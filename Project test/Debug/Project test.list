
Project test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b78  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08004c84  08004c84  00014c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d1c  08004d1c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004d1c  08004d1c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d1c  08004d1c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d1c  08004d1c  00014d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d20  08004d20  00014d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004d24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b0  20000070  08004d94  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000620  08004d94  00020620  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001306d  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a3c  00000000  00000000  00033106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a0  00000000  00000000  00035b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c8  00000000  00000000  00036de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000196cd  00000000  00000000  00037fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ed1  00000000  00000000  0005167d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090eaa  00000000  00000000  0006654e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f73f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000530c  00000000  00000000  000f7448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004c6c 	.word	0x08004c6c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004c6c 	.word	0x08004c6c

0800014c <BUTTON_ReadPin>:
#include "BUTTON.h"
// (FINAL x3)

// ************************** Low Level Layer *****************************************************//
static ButtonState BUTTON_ReadPin(Button *Button) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(Button->Port, Button->Pin);
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	681a      	ldr	r2, [r3, #0]
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	889b      	ldrh	r3, [r3, #4]
 800015c:	4619      	mov	r1, r3
 800015e:	4610      	mov	r0, r2
 8000160:	f002 f806 	bl	8002170 <HAL_GPIO_ReadPin>
 8000164:	4603      	mov	r3, r0
}
 8000166:	4618      	mov	r0, r3
 8000168:	3708      	adds	r7, #8
 800016a:	46bd      	mov	sp, r7
 800016c:	bd80      	pop	{r7, pc}

0800016e <buttonInit>:
// ************************** High Level Layer *****************************************************//
void buttonInit(Button *button, GPIO_TypeDef *BUTTON_PORT, uint16_t BUTTON_Pin,
		CallbackShortPress cbShort, CallbackLongPress cbLong,
		CallbackDoublePress cbDouble) {
 800016e:	b580      	push	{r7, lr}
 8000170:	b084      	sub	sp, #16
 8000172:	af00      	add	r7, sp, #0
 8000174:	60f8      	str	r0, [r7, #12]
 8000176:	60b9      	str	r1, [r7, #8]
 8000178:	603b      	str	r3, [r7, #0]
 800017a:	4613      	mov	r3, r2
 800017c:	80fb      	strh	r3, [r7, #6]
	button->Port = BUTTON_PORT;
 800017e:	68fb      	ldr	r3, [r7, #12]
 8000180:	68ba      	ldr	r2, [r7, #8]
 8000182:	601a      	str	r2, [r3, #0]
	button->Pin = BUTTON_Pin;
 8000184:	68fb      	ldr	r3, [r7, #12]
 8000186:	88fa      	ldrh	r2, [r7, #6]
 8000188:	809a      	strh	r2, [r3, #4]

	button->state = BUTTON_ReadPin(button);
 800018a:	68f8      	ldr	r0, [r7, #12]
 800018c:	f7ff ffde 	bl	800014c <BUTTON_ReadPin>
 8000190:	4603      	mov	r3, r0
 8000192:	461a      	mov	r2, r3
 8000194:	68fb      	ldr	r3, [r7, #12]
 8000196:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	button->lastState = button->state;
 800019a:	68fb      	ldr	r3, [r7, #12]
 800019c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80001a0:	68fb      	ldr	r3, [r7, #12]
 80001a2:	f883 2020 	strb.w	r2, [r3, #32]
	button->timeIn = HAL_GetTick();
 80001a6:	f001 fbc3 	bl	8001930 <HAL_GetTick>
 80001aa:	4602      	mov	r2, r0
 80001ac:	68fb      	ldr	r3, [r7, #12]
 80001ae:	609a      	str	r2, [r3, #8]
	button->hasChanged = false;
 80001b0:	68fb      	ldr	r3, [r7, #12]
 80001b2:	2200      	movs	r2, #0
 80001b4:	741a      	strb	r2, [r3, #16]
	button->_change = false;
 80001b6:	68fb      	ldr	r3, [r7, #12]
 80001b8:	2200      	movs	r2, #0
 80001ba:	745a      	strb	r2, [r3, #17]
	button->nClicks = 0;
 80001bc:	68fb      	ldr	r3, [r7, #12]
 80001be:	2200      	movs	r2, #0
 80001c0:	625a      	str	r2, [r3, #36]	; 0x24

	button->callbackShort = cbShort;
 80001c2:	68fb      	ldr	r3, [r7, #12]
 80001c4:	683a      	ldr	r2, [r7, #0]
 80001c6:	629a      	str	r2, [r3, #40]	; 0x28
	button->callbackLong = cbLong;
 80001c8:	68fb      	ldr	r3, [r7, #12]
 80001ca:	69ba      	ldr	r2, [r7, #24]
 80001cc:	62da      	str	r2, [r3, #44]	; 0x2c
	button->callbackDouble = cbDouble;
 80001ce:	68fb      	ldr	r3, [r7, #12]
 80001d0:	69fa      	ldr	r2, [r7, #28]
 80001d2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80001d4:	bf00      	nop
 80001d6:	3710      	adds	r7, #16
 80001d8:	46bd      	mov	sp, r7
 80001da:	bd80      	pop	{r7, pc}

080001dc <_newState>:

//Source

void _newState(Button *button, StateMachine nextState) {
 80001dc:	b480      	push	{r7}
 80001de:	b083      	sub	sp, #12
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
 80001e4:	460b      	mov	r3, r1
 80001e6:	70fb      	strb	r3, [r7, #3]
	button->lastState = button->state;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	f883 2020 	strb.w	r2, [r3, #32]
	button->state = nextState;
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	78fa      	ldrb	r2, [r7, #3]
 80001f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80001fc:	bf00      	nop
 80001fe:	370c      	adds	r7, #12
 8000200:	46bd      	mov	sp, r7
 8000202:	bc80      	pop	{r7}
 8000204:	4770      	bx	lr

08000206 <_reset>:

void _reset(Button *button) {
 8000206:	b480      	push	{r7}
 8000208:	b083      	sub	sp, #12
 800020a:	af00      	add	r7, sp, #0
 800020c:	6078      	str	r0, [r7, #4]
	button->state = INIT;
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	2200      	movs	r2, #0
 8000212:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	button->lastState = INIT;
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	2200      	movs	r2, #0
 800021a:	f883 2020 	strb.w	r2, [r3, #32]
	button->nClicks = 0;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	2200      	movs	r2, #0
 8000222:	625a      	str	r2, [r3, #36]	; 0x24
	button->startPress = 0;
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	2200      	movs	r2, #0
 8000228:	619a      	str	r2, [r3, #24]
}
 800022a:	bf00      	nop
 800022c:	370c      	adds	r7, #12
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr

08000234 <tick>:

#define BUTTON_DOWN _btnState == GPIO_PIN_RESET
#define BUTTON_UP _btnState == GPIO_PIN_SET

void tick(Button *button, GPIO_PinState _btnState) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
 800023c:	460b      	mov	r3, r1
 800023e:	70fb      	strb	r3, [r7, #3]

	uint32_t now = HAL_GetTick();
 8000240:	f001 fb76 	bl	8001930 <HAL_GetTick>
 8000244:	60f8      	str	r0, [r7, #12]

	button->timePress = now - button->startPress;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	699b      	ldr	r3, [r3, #24]
 800024a:	68fa      	ldr	r2, [r7, #12]
 800024c:	1ad2      	subs	r2, r2, r3
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	615a      	str	r2, [r3, #20]

	switch (button->state) {
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000258:	2b07      	cmp	r3, #7
 800025a:	f200 80b1 	bhi.w	80003c0 <tick+0x18c>
 800025e:	a201      	add	r2, pc, #4	; (adr r2, 8000264 <tick+0x30>)
 8000260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000264:	08000285 	.word	0x08000285
 8000268:	080002a3 	.word	0x080002a3
 800026c:	080002f1 	.word	0x080002f1
 8000270:	0800032b 	.word	0x0800032b
 8000274:	080003c1 	.word	0x080003c1
 8000278:	080003c1 	.word	0x080003c1
 800027c:	08000377 	.word	0x08000377
 8000280:	0800038d 	.word	0x0800038d
	case INIT:
		if (BUTTON_DOWN) {
 8000284:	78fb      	ldrb	r3, [r7, #3]
 8000286:	2b00      	cmp	r3, #0
 8000288:	f040 809f 	bne.w	80003ca <tick+0x196>
			_newState(button, DOWN);
 800028c:	2101      	movs	r1, #1
 800028e:	6878      	ldr	r0, [r7, #4]
 8000290:	f7ff ffa4 	bl	80001dc <_newState>
			button->startPress = now;
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	68fa      	ldr	r2, [r7, #12]
 8000298:	619a      	str	r2, [r3, #24]
			button->nClicks = 0;
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	2200      	movs	r2, #0
 800029e:	625a      	str	r2, [r3, #36]	; 0x24
		}
		break;
 80002a0:	e093      	b.n	80003ca <tick+0x196>
	case DOWN:
		if ((BUTTON_UP) && button->timePress < DEBOUNCE_TIME) {
 80002a2:	78fb      	ldrb	r3, [r7, #3]
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d10b      	bne.n	80002c0 <tick+0x8c>
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	695b      	ldr	r3, [r3, #20]
 80002ac:	2b31      	cmp	r3, #49	; 0x31
 80002ae:	d807      	bhi.n	80002c0 <tick+0x8c>
			_newState(button, button->lastState);
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80002b6:	4619      	mov	r1, r3
 80002b8:	6878      	ldr	r0, [r7, #4]
 80002ba:	f7ff ff8f 	bl	80001dc <_newState>
			_newState(button, UP);
			button->startPress = now;
		} else if ((BUTTON_DOWN) && button->timePress > PRESS_TIME) {
			_newState(button, PRESS);
		}
		break;
 80002be:	e086      	b.n	80003ce <tick+0x19a>
		} else if (BUTTON_UP) {
 80002c0:	78fb      	ldrb	r3, [r7, #3]
 80002c2:	2b01      	cmp	r3, #1
 80002c4:	d107      	bne.n	80002d6 <tick+0xa2>
			_newState(button, UP);
 80002c6:	2102      	movs	r1, #2
 80002c8:	6878      	ldr	r0, [r7, #4]
 80002ca:	f7ff ff87 	bl	80001dc <_newState>
			button->startPress = now;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	68fa      	ldr	r2, [r7, #12]
 80002d2:	619a      	str	r2, [r3, #24]
		break;
 80002d4:	e07b      	b.n	80003ce <tick+0x19a>
		} else if ((BUTTON_DOWN) && button->timePress > PRESS_TIME) {
 80002d6:	78fb      	ldrb	r3, [r7, #3]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d178      	bne.n	80003ce <tick+0x19a>
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80002e4:	d973      	bls.n	80003ce <tick+0x19a>
			_newState(button, PRESS);
 80002e6:	2106      	movs	r1, #6
 80002e8:	6878      	ldr	r0, [r7, #4]
 80002ea:	f7ff ff77 	bl	80001dc <_newState>
		break;
 80002ee:	e06e      	b.n	80003ce <tick+0x19a>
	case UP:
		if ((BUTTON_UP) && button->timePress < DEBOUNCE_TIME) {
 80002f0:	78fb      	ldrb	r3, [r7, #3]
 80002f2:	2b01      	cmp	r3, #1
 80002f4:	d10b      	bne.n	800030e <tick+0xda>
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	695b      	ldr	r3, [r3, #20]
 80002fa:	2b31      	cmp	r3, #49	; 0x31
 80002fc:	d807      	bhi.n	800030e <tick+0xda>
			_newState(button, button->lastState);
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000304:	4619      	mov	r1, r3
 8000306:	6878      	ldr	r0, [r7, #4]
 8000308:	f7ff ff68 	bl	80001dc <_newState>
		} else if (button->timePress >= DEBOUNCE_TIME) {
			button->nClicks++;
			_newState(button, COUNT);
		}
		break;
 800030c:	e061      	b.n	80003d2 <tick+0x19e>
		} else if (button->timePress >= DEBOUNCE_TIME) {
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	2b31      	cmp	r3, #49	; 0x31
 8000314:	d95d      	bls.n	80003d2 <tick+0x19e>
			button->nClicks++;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800031a:	1c5a      	adds	r2, r3, #1
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	625a      	str	r2, [r3, #36]	; 0x24
			_newState(button, COUNT);
 8000320:	2103      	movs	r1, #3
 8000322:	6878      	ldr	r0, [r7, #4]
 8000324:	f7ff ff5a 	bl	80001dc <_newState>
		break;
 8000328:	e053      	b.n	80003d2 <tick+0x19e>
	case COUNT:
		if (BUTTON_DOWN) {
 800032a:	78fb      	ldrb	r3, [r7, #3]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d107      	bne.n	8000340 <tick+0x10c>
			_newState(button, DOWN);
 8000330:	2101      	movs	r1, #1
 8000332:	6878      	ldr	r0, [r7, #4]
 8000334:	f7ff ff52 	bl	80001dc <_newState>
			button->startPress = now;
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	68fa      	ldr	r2, [r7, #12]
 800033c:	619a      	str	r2, [r3, #24]
				// Double Click Function here
				button->callbackDouble();
			}
			_reset(button);
		}
		break;
 800033e:	e04a      	b.n	80003d6 <tick+0x1a2>
		} else if ((button->timePress > CLICK_TIME)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	695b      	ldr	r3, [r3, #20]
 8000344:	2b96      	cmp	r3, #150	; 0x96
 8000346:	d803      	bhi.n	8000350 <tick+0x11c>
				|| (button->nClicks == MAXCLICKS)) {
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800034c:	2b02      	cmp	r3, #2
 800034e:	d142      	bne.n	80003d6 <tick+0x1a2>
			if (button->nClicks == 1) {
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000354:	2b01      	cmp	r3, #1
 8000356:	d103      	bne.n	8000360 <tick+0x12c>
				button->callbackShort();
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800035c:	4798      	blx	r3
 800035e:	e006      	b.n	800036e <tick+0x13a>
			} else if (button->nClicks == 2) {
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000364:	2b02      	cmp	r3, #2
 8000366:	d102      	bne.n	800036e <tick+0x13a>
				button->callbackDouble();
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036c:	4798      	blx	r3
			_reset(button);
 800036e:	6878      	ldr	r0, [r7, #4]
 8000370:	f7ff ff49 	bl	8000206 <_reset>
		break;
 8000374:	e02f      	b.n	80003d6 <tick+0x1a2>
	case PRESS:
		if (BUTTON_UP) {
 8000376:	78fb      	ldrb	r3, [r7, #3]
 8000378:	2b01      	cmp	r3, #1
 800037a:	d12e      	bne.n	80003da <tick+0x1a6>
			_newState(button, PRESSEND);
 800037c:	2107      	movs	r1, #7
 800037e:	6878      	ldr	r0, [r7, #4]
 8000380:	f7ff ff2c 	bl	80001dc <_newState>
			button->startPress = now;
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	68fa      	ldr	r2, [r7, #12]
 8000388:	619a      	str	r2, [r3, #24]
		} else {
		}
		break;
 800038a:	e026      	b.n	80003da <tick+0x1a6>
	case PRESSEND:
		if ((BUTTON_DOWN) && button->timePress < DEBOUNCE_TIME) {
 800038c:	78fb      	ldrb	r3, [r7, #3]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d10b      	bne.n	80003aa <tick+0x176>
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	2b31      	cmp	r3, #49	; 0x31
 8000398:	d807      	bhi.n	80003aa <tick+0x176>
			_newState(button, button->lastState);
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80003a0:	4619      	mov	r1, r3
 80003a2:	6878      	ldr	r0, [r7, #4]
 80003a4:	f7ff ff1a 	bl	80001dc <_newState>
		} else if (button->timePress >= DEBOUNCE_TIME) {
			//PRESS Function here
			button->callbackLong();
			_reset(button);
		}
		break;
 80003a8:	e019      	b.n	80003de <tick+0x1aa>
		} else if (button->timePress >= DEBOUNCE_TIME) {
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	2b31      	cmp	r3, #49	; 0x31
 80003b0:	d915      	bls.n	80003de <tick+0x1aa>
			button->callbackLong();
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003b6:	4798      	blx	r3
			_reset(button);
 80003b8:	6878      	ldr	r0, [r7, #4]
 80003ba:	f7ff ff24 	bl	8000206 <_reset>
		break;
 80003be:	e00e      	b.n	80003de <tick+0x1aa>
	default:
		_newState(button, INIT);
 80003c0:	2100      	movs	r1, #0
 80003c2:	6878      	ldr	r0, [r7, #4]
 80003c4:	f7ff ff0a 	bl	80001dc <_newState>
		break;
 80003c8:	e00a      	b.n	80003e0 <tick+0x1ac>
		break;
 80003ca:	bf00      	nop
 80003cc:	e008      	b.n	80003e0 <tick+0x1ac>
		break;
 80003ce:	bf00      	nop
 80003d0:	e006      	b.n	80003e0 <tick+0x1ac>
		break;
 80003d2:	bf00      	nop
 80003d4:	e004      	b.n	80003e0 <tick+0x1ac>
		break;
 80003d6:	bf00      	nop
 80003d8:	e002      	b.n	80003e0 <tick+0x1ac>
		break;
 80003da:	bf00      	nop
 80003dc:	e000      	b.n	80003e0 <tick+0x1ac>
		break;
 80003de:	bf00      	nop
	}

}
 80003e0:	bf00      	nop
 80003e2:	3710      	adds	r7, #16
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}

080003e8 <CLCD_Delay>:
 CLCD_I2C_WriteString(&LCD1,"hello anh em ");
 ******************************************************************************************************************/
#include "CLCD_I2C.h"

//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	4603      	mov	r3, r0
 80003f0:	80fb      	strh	r3, [r7, #6]
  HAL_Delay(Time);
 80003f2:	88fb      	ldrh	r3, [r7, #6]
 80003f4:	4618      	mov	r0, r3
 80003f6:	f001 faa5 	bl	8001944 <HAL_Delay>
}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name *LCD, uint8_t Data, uint8_t Mode) {
 8000402:	b580      	push	{r7, lr}
 8000404:	b086      	sub	sp, #24
 8000406:	af02      	add	r7, sp, #8
 8000408:	6078      	str	r0, [r7, #4]
 800040a:	460b      	mov	r3, r1
 800040c:	70fb      	strb	r3, [r7, #3]
 800040e:	4613      	mov	r3, r2
 8000410:	70bb      	strb	r3, [r7, #2]
  char Data_H;
  char Data_L;
  uint8_t Data_I2C[4];
  Data_H = Data & 0xF0;
 8000412:	78fb      	ldrb	r3, [r7, #3]
 8000414:	f023 030f 	bic.w	r3, r3, #15
 8000418:	73fb      	strb	r3, [r7, #15]
  Data_L = (Data << 4) & 0xF0;
 800041a:	78fb      	ldrb	r3, [r7, #3]
 800041c:	011b      	lsls	r3, r3, #4
 800041e:	73bb      	strb	r3, [r7, #14]
  if (LCD->BACKLIGHT) {
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	7adb      	ldrb	r3, [r3, #11]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d007      	beq.n	8000438 <CLCD_WriteI2C+0x36>
	Data_H |= LCD_BACKLIGHT;
 8000428:	7bfb      	ldrb	r3, [r7, #15]
 800042a:	f043 0308 	orr.w	r3, r3, #8
 800042e:	73fb      	strb	r3, [r7, #15]
	Data_L |= LCD_BACKLIGHT;
 8000430:	7bbb      	ldrb	r3, [r7, #14]
 8000432:	f043 0308 	orr.w	r3, r3, #8
 8000436:	73bb      	strb	r3, [r7, #14]
  }
  if (Mode == CLCD_DATA) {
 8000438:	78bb      	ldrb	r3, [r7, #2]
 800043a:	2b01      	cmp	r3, #1
 800043c:	d108      	bne.n	8000450 <CLCD_WriteI2C+0x4e>
	Data_H |= LCD_RS;
 800043e:	7bfb      	ldrb	r3, [r7, #15]
 8000440:	f043 0301 	orr.w	r3, r3, #1
 8000444:	73fb      	strb	r3, [r7, #15]
	Data_L |= LCD_RS;
 8000446:	7bbb      	ldrb	r3, [r7, #14]
 8000448:	f043 0301 	orr.w	r3, r3, #1
 800044c:	73bb      	strb	r3, [r7, #14]
 800044e:	e00a      	b.n	8000466 <CLCD_WriteI2C+0x64>
  } else if (Mode == CLCD_COMMAND) {
 8000450:	78bb      	ldrb	r3, [r7, #2]
 8000452:	2b00      	cmp	r3, #0
 8000454:	d107      	bne.n	8000466 <CLCD_WriteI2C+0x64>
	Data_H &= ~LCD_RS;
 8000456:	7bfb      	ldrb	r3, [r7, #15]
 8000458:	f023 0301 	bic.w	r3, r3, #1
 800045c:	73fb      	strb	r3, [r7, #15]
	Data_L &= ~LCD_RS;
 800045e:	7bbb      	ldrb	r3, [r7, #14]
 8000460:	f023 0301 	bic.w	r3, r3, #1
 8000464:	73bb      	strb	r3, [r7, #14]
  }
  Data_I2C[0] = Data_H | LCD_EN;
 8000466:	7bfb      	ldrb	r3, [r7, #15]
 8000468:	f043 0304 	orr.w	r3, r3, #4
 800046c:	b2db      	uxtb	r3, r3
 800046e:	723b      	strb	r3, [r7, #8]
//  CLCD_Delay(1);
  Data_I2C[1] = Data_H;
 8000470:	7bfb      	ldrb	r3, [r7, #15]
 8000472:	727b      	strb	r3, [r7, #9]
  Data_I2C[2] = Data_L | LCD_EN;
 8000474:	7bbb      	ldrb	r3, [r7, #14]
 8000476:	f043 0304 	orr.w	r3, r3, #4
 800047a:	b2db      	uxtb	r3, r3
 800047c:	72bb      	strb	r3, [r7, #10]
//  CLCD_Delay(1);
  Data_I2C[3] = Data_L;
 800047e:	7bbb      	ldrb	r3, [r7, #14]
 8000480:	72fb      	strb	r3, [r7, #11]
//  HAL_I2C_Master_Transmit_DMA(LCD->I2C, LCD->ADDRESS, (uint8_t*) Data_I2C,
//	  sizeof(Data_I2C));
  HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t*) Data_I2C,
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	6818      	ldr	r0, [r3, #0]
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	791b      	ldrb	r3, [r3, #4]
 800048a:	b299      	uxth	r1, r3
 800048c:	f107 0208 	add.w	r2, r7, #8
 8000490:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000494:	9300      	str	r3, [sp, #0]
 8000496:	2304      	movs	r3, #4
 8000498:	f001 ffde 	bl	8002458 <HAL_I2C_Master_Transmit>
	  sizeof(Data_I2C), 1000);
}
 800049c:	bf00      	nop
 800049e:	3710      	adds	r7, #16
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <CLCD_I2C_Init>:

//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name *LCD, I2C_HandleTypeDef *hi2c_CLCD,
	uint8_t Address, uint8_t Colums, uint8_t Rows) {
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b084      	sub	sp, #16
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	60f8      	str	r0, [r7, #12]
 80004ac:	60b9      	str	r1, [r7, #8]
 80004ae:	4611      	mov	r1, r2
 80004b0:	461a      	mov	r2, r3
 80004b2:	460b      	mov	r3, r1
 80004b4:	71fb      	strb	r3, [r7, #7]
 80004b6:	4613      	mov	r3, r2
 80004b8:	71bb      	strb	r3, [r7, #6]
  LCD->I2C = hi2c_CLCD;
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	68ba      	ldr	r2, [r7, #8]
 80004be:	601a      	str	r2, [r3, #0]
  LCD->ADDRESS = Address;
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	79fa      	ldrb	r2, [r7, #7]
 80004c4:	711a      	strb	r2, [r3, #4]
  LCD->COLUMS = Colums;
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	79ba      	ldrb	r2, [r7, #6]
 80004ca:	715a      	strb	r2, [r3, #5]
  LCD->ROWS = Rows;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	7e3a      	ldrb	r2, [r7, #24]
 80004d0:	719a      	strb	r2, [r3, #6]

  LCD->FUNCTIONSET = LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS;
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	2228      	movs	r2, #40	; 0x28
 80004d6:	729a      	strb	r2, [r3, #10]
  LCD->ENTRYMODE = LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	2206      	movs	r2, #6
 80004dc:	71da      	strb	r2, [r3, #7]
  LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	220c      	movs	r2, #12
 80004e2:	721a      	strb	r2, [r3, #8]
	  | LCD_BLINKOFF;
  LCD->CURSORSHIFT = LCD_CURSORSHIFT | LCD_CURSORMOVE | LCD_MOVERIGHT;
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	2214      	movs	r2, #20
 80004e8:	725a      	strb	r2, [r3, #9]
  LCD->BACKLIGHT = LCD_BACKLIGHT;
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	2208      	movs	r2, #8
 80004ee:	72da      	strb	r2, [r3, #11]

  CLCD_Delay(50);
 80004f0:	2032      	movs	r0, #50	; 0x32
 80004f2:	f7ff ff79 	bl	80003e8 <CLCD_Delay>
  CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 80004f6:	2200      	movs	r2, #0
 80004f8:	2133      	movs	r1, #51	; 0x33
 80004fa:	68f8      	ldr	r0, [r7, #12]
 80004fc:	f7ff ff81 	bl	8000402 <CLCD_WriteI2C>
//	CLCD_Delay(5);
  CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000500:	2200      	movs	r2, #0
 8000502:	2133      	movs	r1, #51	; 0x33
 8000504:	68f8      	ldr	r0, [r7, #12]
 8000506:	f7ff ff7c 	bl	8000402 <CLCD_WriteI2C>
  CLCD_Delay(5);
 800050a:	2005      	movs	r0, #5
 800050c:	f7ff ff6c 	bl	80003e8 <CLCD_Delay>
  CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8000510:	2200      	movs	r2, #0
 8000512:	2132      	movs	r1, #50	; 0x32
 8000514:	68f8      	ldr	r0, [r7, #12]
 8000516:	f7ff ff74 	bl	8000402 <CLCD_WriteI2C>
  CLCD_Delay(5);
 800051a:	2005      	movs	r0, #5
 800051c:	f7ff ff64 	bl	80003e8 <CLCD_Delay>
  CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 8000520:	2200      	movs	r2, #0
 8000522:	2120      	movs	r1, #32
 8000524:	68f8      	ldr	r0, [r7, #12]
 8000526:	f7ff ff6c 	bl	8000402 <CLCD_WriteI2C>
  CLCD_Delay(5);
 800052a:	2005      	movs	r0, #5
 800052c:	f7ff ff5c 	bl	80003e8 <CLCD_Delay>

  CLCD_WriteI2C(LCD, LCD->ENTRYMODE, CLCD_COMMAND);
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	79db      	ldrb	r3, [r3, #7]
 8000534:	2200      	movs	r2, #0
 8000536:	4619      	mov	r1, r3
 8000538:	68f8      	ldr	r0, [r7, #12]
 800053a:	f7ff ff62 	bl	8000402 <CLCD_WriteI2C>
  CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	7a1b      	ldrb	r3, [r3, #8]
 8000542:	2200      	movs	r2, #0
 8000544:	4619      	mov	r1, r3
 8000546:	68f8      	ldr	r0, [r7, #12]
 8000548:	f7ff ff5b 	bl	8000402 <CLCD_WriteI2C>
  CLCD_WriteI2C(LCD, LCD->CURSORSHIFT, CLCD_COMMAND);
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	7a5b      	ldrb	r3, [r3, #9]
 8000550:	2200      	movs	r2, #0
 8000552:	4619      	mov	r1, r3
 8000554:	68f8      	ldr	r0, [r7, #12]
 8000556:	f7ff ff54 	bl	8000402 <CLCD_WriteI2C>
  CLCD_WriteI2C(LCD, LCD->FUNCTIONSET, CLCD_COMMAND);
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	7a9b      	ldrb	r3, [r3, #10]
 800055e:	2200      	movs	r2, #0
 8000560:	4619      	mov	r1, r3
 8000562:	68f8      	ldr	r0, [r7, #12]
 8000564:	f7ff ff4d 	bl	8000402 <CLCD_WriteI2C>

  CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 8000568:	2200      	movs	r2, #0
 800056a:	2101      	movs	r1, #1
 800056c:	68f8      	ldr	r0, [r7, #12]
 800056e:	f7ff ff48 	bl	8000402 <CLCD_WriteI2C>
  CLCD_WriteI2C(LCD, LCD_RETURNHOME, CLCD_COMMAND);
 8000572:	2200      	movs	r2, #0
 8000574:	2102      	movs	r1, #2
 8000576:	68f8      	ldr	r0, [r7, #12]
 8000578:	f7ff ff43 	bl	8000402 <CLCD_WriteI2C>
}
 800057c:	bf00      	nop
 800057e:	3710      	adds	r7, #16
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name *LCD, uint8_t Xpos, uint8_t Ypos) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	460b      	mov	r3, r1
 800058e:	70fb      	strb	r3, [r7, #3]
 8000590:	4613      	mov	r3, r2
 8000592:	70bb      	strb	r3, [r7, #2]
  uint8_t DRAM_ADDRESS = 0x00;
 8000594:	2300      	movs	r3, #0
 8000596:	73fb      	strb	r3, [r7, #15]
  if (Xpos >= LCD->COLUMS) {
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	795b      	ldrb	r3, [r3, #5]
 800059c:	78fa      	ldrb	r2, [r7, #3]
 800059e:	429a      	cmp	r2, r3
 80005a0:	d303      	bcc.n	80005aa <CLCD_I2C_SetCursor+0x26>
	Xpos = LCD->COLUMS - 1;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	795b      	ldrb	r3, [r3, #5]
 80005a6:	3b01      	subs	r3, #1
 80005a8:	70fb      	strb	r3, [r7, #3]
  }
  if (Ypos >= LCD->ROWS) {
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	799b      	ldrb	r3, [r3, #6]
 80005ae:	78ba      	ldrb	r2, [r7, #2]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d303      	bcc.n	80005bc <CLCD_I2C_SetCursor+0x38>
	Ypos = LCD->ROWS - 1;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	799b      	ldrb	r3, [r3, #6]
 80005b8:	3b01      	subs	r3, #1
 80005ba:	70bb      	strb	r3, [r7, #2]
  }
  if (Ypos == 0) {
 80005bc:	78bb      	ldrb	r3, [r7, #2]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d102      	bne.n	80005c8 <CLCD_I2C_SetCursor+0x44>
	DRAM_ADDRESS = 0x00 + Xpos;
 80005c2:	78fb      	ldrb	r3, [r7, #3]
 80005c4:	73fb      	strb	r3, [r7, #15]
 80005c6:	e013      	b.n	80005f0 <CLCD_I2C_SetCursor+0x6c>
  } else if (Ypos == 1) {
 80005c8:	78bb      	ldrb	r3, [r7, #2]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d103      	bne.n	80005d6 <CLCD_I2C_SetCursor+0x52>
	DRAM_ADDRESS = 0x40 + Xpos;
 80005ce:	78fb      	ldrb	r3, [r7, #3]
 80005d0:	3340      	adds	r3, #64	; 0x40
 80005d2:	73fb      	strb	r3, [r7, #15]
 80005d4:	e00c      	b.n	80005f0 <CLCD_I2C_SetCursor+0x6c>
  } else if (Ypos == 2) {
 80005d6:	78bb      	ldrb	r3, [r7, #2]
 80005d8:	2b02      	cmp	r3, #2
 80005da:	d103      	bne.n	80005e4 <CLCD_I2C_SetCursor+0x60>
	DRAM_ADDRESS = 0x14 + Xpos;
 80005dc:	78fb      	ldrb	r3, [r7, #3]
 80005de:	3314      	adds	r3, #20
 80005e0:	73fb      	strb	r3, [r7, #15]
 80005e2:	e005      	b.n	80005f0 <CLCD_I2C_SetCursor+0x6c>
  } else if (Ypos == 3) {
 80005e4:	78bb      	ldrb	r3, [r7, #2]
 80005e6:	2b03      	cmp	r3, #3
 80005e8:	d102      	bne.n	80005f0 <CLCD_I2C_SetCursor+0x6c>
	DRAM_ADDRESS = 0x54 + Xpos;
 80005ea:	78fb      	ldrb	r3, [r7, #3]
 80005ec:	3354      	adds	r3, #84	; 0x54
 80005ee:	73fb      	strb	r3, [r7, #15]
  }
  CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR | DRAM_ADDRESS, CLCD_COMMAND);
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
 80005f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	2200      	movs	r2, #0
 80005fa:	4619      	mov	r1, r3
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f7ff ff00 	bl	8000402 <CLCD_WriteI2C>
}
 8000602:	bf00      	nop
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}

0800060a <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name *LCD, char character) {
 800060a:	b580      	push	{r7, lr}
 800060c:	b082      	sub	sp, #8
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
 8000612:	460b      	mov	r3, r1
 8000614:	70fb      	strb	r3, [r7, #3]
  CLCD_WriteI2C(LCD, character, CLCD_DATA);
 8000616:	78fb      	ldrb	r3, [r7, #3]
 8000618:	2201      	movs	r2, #1
 800061a:	4619      	mov	r1, r3
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f7ff fef0 	bl	8000402 <CLCD_WriteI2C>
}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name *LCD, char *String) {
 800062a:	b580      	push	{r7, lr}
 800062c:	b082      	sub	sp, #8
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
 8000632:	6039      	str	r1, [r7, #0]
  while (*String)
 8000634:	e007      	b.n	8000646 <CLCD_I2C_WriteString+0x1c>
	CLCD_I2C_WriteChar(LCD, *String++);
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	1c5a      	adds	r2, r3, #1
 800063a:	603a      	str	r2, [r7, #0]
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	4619      	mov	r1, r3
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f7ff ffe2 	bl	800060a <CLCD_I2C_WriteChar>
  while (*String)
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d1f3      	bne.n	8000636 <CLCD_I2C_WriteString+0xc>
}
 800064e:	bf00      	nop
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <CLCD_I2C_Clear>:
void CLCD_I2C_Clear(CLCD_I2C_Name *LCD) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 8000660:	2200      	movs	r2, #0
 8000662:	2101      	movs	r1, #1
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f7ff fecc 	bl	8000402 <CLCD_WriteI2C>
  CLCD_Delay(5);
 800066a:	2005      	movs	r0, #5
 800066c:	f7ff febc 	bl	80003e8 <CLCD_Delay>
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <CLCD_I2C_ReturnHome>:
void CLCD_I2C_ReturnHome(CLCD_I2C_Name *LCD) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  CLCD_WriteI2C(LCD, LCD_RETURNHOME, CLCD_COMMAND);
 8000680:	2200      	movs	r2, #0
 8000682:	2102      	movs	r1, #2
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f7ff febc 	bl	8000402 <CLCD_WriteI2C>
  CLCD_Delay(5);
 800068a:	2005      	movs	r0, #5
 800068c:	f7ff feac 	bl	80003e8 <CLCD_Delay>
}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <CLCD_I2C_CursorOn>:
void CLCD_I2C_CursorOn(CLCD_I2C_Name *LCD) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  LCD->DISPLAYCTRL |= LCD_CURSORON;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	7a1b      	ldrb	r3, [r3, #8]
 80006a4:	f043 0302 	orr.w	r3, r3, #2
 80006a8:	b2da      	uxtb	r2, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	721a      	strb	r2, [r3, #8]
  CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	7a1b      	ldrb	r3, [r3, #8]
 80006b2:	2200      	movs	r2, #0
 80006b4:	4619      	mov	r1, r3
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f7ff fea3 	bl	8000402 <CLCD_WriteI2C>
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <CLCD_I2C_CursorOff>:
void CLCD_I2C_CursorOff(CLCD_I2C_Name *LCD) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  LCD->DISPLAYCTRL &= ~LCD_CURSORON;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	7a1b      	ldrb	r3, [r3, #8]
 80006d0:	f023 0302 	bic.w	r3, r3, #2
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	721a      	strb	r2, [r3, #8]
  CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	7a1b      	ldrb	r3, [r3, #8]
 80006de:	2200      	movs	r2, #0
 80006e0:	4619      	mov	r1, r3
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f7ff fe8d 	bl	8000402 <CLCD_WriteI2C>
}
 80006e8:	bf00      	nop
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <CLCD_I2C_BlinkOn>:
void CLCD_I2C_BlinkOn(CLCD_I2C_Name *LCD) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  LCD->DISPLAYCTRL |= LCD_BLINKON;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	7a1b      	ldrb	r3, [r3, #8]
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	b2da      	uxtb	r2, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	721a      	strb	r2, [r3, #8]
  CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	7a1b      	ldrb	r3, [r3, #8]
 800070a:	2200      	movs	r2, #0
 800070c:	4619      	mov	r1, r3
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f7ff fe77 	bl	8000402 <CLCD_WriteI2C>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <CLCD_I2C_BlinkOff>:
void CLCD_I2C_BlinkOff(CLCD_I2C_Name *LCD) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  LCD->DISPLAYCTRL &= ~LCD_BLINKON;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	7a1b      	ldrb	r3, [r3, #8]
 8000728:	f023 0301 	bic.w	r3, r3, #1
 800072c:	b2da      	uxtb	r2, r3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	721a      	strb	r2, [r3, #8]
  CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	7a1b      	ldrb	r3, [r3, #8]
 8000736:	2200      	movs	r2, #0
 8000738:	4619      	mov	r1, r3
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f7ff fe61 	bl	8000402 <CLCD_WriteI2C>
}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <LCD_Begin>:

/* Short code */
void LCD_Begin(CLCD_I2C_Name *LCD, I2C_HandleTypeDef *hi2c_CLCD,
	uint8_t Address, uint8_t Colums, uint8_t Rows) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af02      	add	r7, sp, #8
 800074e:	60f8      	str	r0, [r7, #12]
 8000750:	60b9      	str	r1, [r7, #8]
 8000752:	4611      	mov	r1, r2
 8000754:	461a      	mov	r2, r3
 8000756:	460b      	mov	r3, r1
 8000758:	71fb      	strb	r3, [r7, #7]
 800075a:	4613      	mov	r3, r2
 800075c:	71bb      	strb	r3, [r7, #6]
  CLCD_I2C_Init(LCD, hi2c_CLCD, Address, Colums, Rows);
 800075e:	79b9      	ldrb	r1, [r7, #6]
 8000760:	79fa      	ldrb	r2, [r7, #7]
 8000762:	7e3b      	ldrb	r3, [r7, #24]
 8000764:	9300      	str	r3, [sp, #0]
 8000766:	460b      	mov	r3, r1
 8000768:	68b9      	ldr	r1, [r7, #8]
 800076a:	68f8      	ldr	r0, [r7, #12]
 800076c:	f7ff fe9a 	bl	80004a4 <CLCD_I2C_Init>
}
 8000770:	bf00      	nop
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <LCD_Set_Cursor>:
void LCD_Set_Cursor(CLCD_I2C_Name *LCD, u8 a, u8 b) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	460b      	mov	r3, r1
 8000782:	70fb      	strb	r3, [r7, #3]
 8000784:	4613      	mov	r3, r2
 8000786:	70bb      	strb	r3, [r7, #2]
  a -= 1;
 8000788:	78fb      	ldrb	r3, [r7, #3]
 800078a:	3b01      	subs	r3, #1
 800078c:	70fb      	strb	r3, [r7, #3]
  b -= 1;
 800078e:	78bb      	ldrb	r3, [r7, #2]
 8000790:	3b01      	subs	r3, #1
 8000792:	70bb      	strb	r3, [r7, #2]
  CLCD_I2C_SetCursor(LCD, b, a);
 8000794:	78fa      	ldrb	r2, [r7, #3]
 8000796:	78bb      	ldrb	r3, [r7, #2]
 8000798:	4619      	mov	r1, r3
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f7ff fef2 	bl	8000584 <CLCD_I2C_SetCursor>
}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <LCD_Clear>:
void LCD_Print_Char(CLCD_I2C_Name *LCD, char data) {
  CLCD_I2C_WriteChar(LCD, data);
}
void LCD_Clear(CLCD_I2C_Name *LCD) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  CLCD_I2C_Clear(LCD);
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f7ff ff51 	bl	8000658 <CLCD_I2C_Clear>
  CLCD_I2C_ReturnHome(LCD);
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f7ff ff5e 	bl	8000678 <CLCD_I2C_ReturnHome>
}
 80007bc:	bf00      	nop
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <LCD_Print_String>:
void LCD_Print_String(CLCD_I2C_Name *LCD, char *data) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
  CLCD_I2C_WriteString(LCD, data);
 80007ce:	6839      	ldr	r1, [r7, #0]
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f7ff ff2a 	bl	800062a <CLCD_I2C_WriteString>
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <LCD_Print_String_At>:
  itoa(data, temp_buffer, 10);
  u8 i;
  for (i = 0; temp_buffer[i] != '\0'; i++)
	LCD_Print_Char(LCD, temp_buffer[i]); //Split the string using pointers and call the Char function
}
void LCD_Print_String_At(CLCD_I2C_Name *LCD, u8 a, u8 b, char *data) {
 80007de:	b580      	push	{r7, lr}
 80007e0:	b084      	sub	sp, #16
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	60f8      	str	r0, [r7, #12]
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	460b      	mov	r3, r1
 80007ea:	72fb      	strb	r3, [r7, #11]
 80007ec:	4613      	mov	r3, r2
 80007ee:	72bb      	strb	r3, [r7, #10]
  LCD_Set_Cursor(LCD, a, b);
 80007f0:	7aba      	ldrb	r2, [r7, #10]
 80007f2:	7afb      	ldrb	r3, [r7, #11]
 80007f4:	4619      	mov	r1, r3
 80007f6:	68f8      	ldr	r0, [r7, #12]
 80007f8:	f7ff ffbe 	bl	8000778 <LCD_Set_Cursor>
  LCD_Print_String(LCD, data);
 80007fc:	6879      	ldr	r1, [r7, #4]
 80007fe:	68f8      	ldr	r0, [r7, #12]
 8000800:	f7ff ffe0 	bl	80007c4 <LCD_Print_String>
}
 8000804:	bf00      	nop
 8000806:	3710      	adds	r7, #16
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <setup>:
bool menuSelected = false;
bool digitSelected = false;

bool _isCursorBlink = false;
u32 lastBlink = 0;
void setup() {
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af02      	add	r7, sp, #8
//  HAL_TIM_Base_Start_IT(&htim4);

  LCD_Begin(&LCD, &hi2c2, 0x4E, 16, 2);
 8000812:	2302      	movs	r3, #2
 8000814:	9300      	str	r3, [sp, #0]
 8000816:	2310      	movs	r3, #16
 8000818:	224e      	movs	r2, #78	; 0x4e
 800081a:	4914      	ldr	r1, [pc, #80]	; (800086c <setup+0x60>)
 800081c:	4814      	ldr	r0, [pc, #80]	; (8000870 <setup+0x64>)
 800081e:	f7ff ff93 	bl	8000748 <LCD_Begin>
  LCD_Clear(&LCD);
 8000822:	4813      	ldr	r0, [pc, #76]	; (8000870 <setup+0x64>)
 8000824:	f7ff ffc0 	bl	80007a8 <LCD_Clear>
  LCD_Print_String_At(&LCD, 1, 2, "Begin");
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <setup+0x68>)
 800082a:	2202      	movs	r2, #2
 800082c:	2101      	movs	r1, #1
 800082e:	4810      	ldr	r0, [pc, #64]	; (8000870 <setup+0x64>)
 8000830:	f7ff ffd5 	bl	80007de <LCD_Print_String_At>

  buttonInit(&x1, x1_pin, cbShort, cbLong, cbDouble);
 8000834:	4b10      	ldr	r3, [pc, #64]	; (8000878 <setup+0x6c>)
 8000836:	9301      	str	r3, [sp, #4]
 8000838:	4b10      	ldr	r3, [pc, #64]	; (800087c <setup+0x70>)
 800083a:	9300      	str	r3, [sp, #0]
 800083c:	4b10      	ldr	r3, [pc, #64]	; (8000880 <setup+0x74>)
 800083e:	2202      	movs	r2, #2
 8000840:	4910      	ldr	r1, [pc, #64]	; (8000884 <setup+0x78>)
 8000842:	4811      	ldr	r0, [pc, #68]	; (8000888 <setup+0x7c>)
 8000844:	f7ff fc93 	bl	800016e <buttonInit>
//  buttonInit(&x7, x7_pin, cbShort, cbLong, cbDouble);

  LCD_Print_String_At(&LCD, 1, 1, "TIME: ");
 8000848:	4b10      	ldr	r3, [pc, #64]	; (800088c <setup+0x80>)
 800084a:	2201      	movs	r2, #1
 800084c:	2101      	movs	r1, #1
 800084e:	4808      	ldr	r0, [pc, #32]	; (8000870 <setup+0x64>)
 8000850:	f7ff ffc5 	bl	80007de <LCD_Print_String_At>
  LCD_Print_String_At(&LCD, 2, 1, "SET: ");
 8000854:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <setup+0x84>)
 8000856:	2201      	movs	r2, #1
 8000858:	2102      	movs	r1, #2
 800085a:	4805      	ldr	r0, [pc, #20]	; (8000870 <setup+0x64>)
 800085c:	f7ff ffbf 	bl	80007de <LCD_Print_String_At>
  updateTime();
 8000860:	f000 f866 	bl	8000930 <updateTime>
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200000dc 	.word	0x200000dc
 8000870:	200000c0 	.word	0x200000c0
 8000874:	08004c84 	.word	0x08004c84
 8000878:	08000b71 	.word	0x08000b71
 800087c:	08000ad1 	.word	0x08000ad1
 8000880:	08000a11 	.word	0x08000a11
 8000884:	40010c00 	.word	0x40010c00
 8000888:	2000008c 	.word	0x2000008c
 800088c:	08004c8c 	.word	0x08004c8c
 8000890:	08004c94 	.word	0x08004c94

08000894 <loop>:
void loop() {
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
  a = HAL_GPIO_ReadPin(x1_pin);
 800089a:	2102      	movs	r1, #2
 800089c:	481c      	ldr	r0, [pc, #112]	; (8000910 <loop+0x7c>)
 800089e:	f001 fc67 	bl	8002170 <HAL_GPIO_ReadPin>
 80008a2:	4603      	mov	r3, r0
 80008a4:	461a      	mov	r2, r3
 80008a6:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <loop+0x80>)
 80008a8:	701a      	strb	r2, [r3, #0]
  tick(&x1, a);
 80008aa:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <loop+0x80>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	4619      	mov	r1, r3
 80008b0:	4819      	ldr	r0, [pc, #100]	; (8000918 <loop+0x84>)
 80008b2:	f7ff fcbf 	bl	8000234 <tick>

  if (menuSelected && !digitSelected) {
 80008b6:	4b19      	ldr	r3, [pc, #100]	; (800091c <loop+0x88>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d024      	beq.n	8000908 <loop+0x74>
 80008be:	4b18      	ldr	r3, [pc, #96]	; (8000920 <loop+0x8c>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	f083 0301 	eor.w	r3, r3, #1
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d01d      	beq.n	8000908 <loop+0x74>
	u32 now = HAL_GetTick();
 80008cc:	f001 f830 	bl	8001930 <HAL_GetTick>
 80008d0:	6078      	str	r0, [r7, #4]
	if (now - lastBlink > 300) {
 80008d2:	4b14      	ldr	r3, [pc, #80]	; (8000924 <loop+0x90>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80008de:	d913      	bls.n	8000908 <loop+0x74>
	  lastBlink = now;
 80008e0:	4a10      	ldr	r2, [pc, #64]	; (8000924 <loop+0x90>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6013      	str	r3, [r2, #0]
	  if (_isCursorBlink) {
 80008e6:	4b10      	ldr	r3, [pc, #64]	; (8000928 <loop+0x94>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d006      	beq.n	80008fc <loop+0x68>
		_isCursorBlink = false;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <loop+0x94>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	701a      	strb	r2, [r3, #0]
		CLCD_I2C_CursorOn(&LCD);
 80008f4:	480d      	ldr	r0, [pc, #52]	; (800092c <loop+0x98>)
 80008f6:	f7ff fecf 	bl	8000698 <CLCD_I2C_CursorOn>
		_isCursorBlink = true;
		CLCD_I2C_CursorOff(&LCD);
	  }
	}
  }
}
 80008fa:	e005      	b.n	8000908 <loop+0x74>
		_isCursorBlink = true;
 80008fc:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <loop+0x94>)
 80008fe:	2201      	movs	r2, #1
 8000900:	701a      	strb	r2, [r3, #0]
		CLCD_I2C_CursorOff(&LCD);
 8000902:	480a      	ldr	r0, [pc, #40]	; (800092c <loop+0x98>)
 8000904:	f7ff fede 	bl	80006c4 <CLCD_I2C_CursorOff>
}
 8000908:	bf00      	nop
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40010c00 	.word	0x40010c00
 8000914:	200000cc 	.word	0x200000cc
 8000918:	2000008c 	.word	0x2000008c
 800091c:	200000d5 	.word	0x200000d5
 8000920:	200000d6 	.word	0x200000d6
 8000924:	200000d8 	.word	0x200000d8
 8000928:	200000d7 	.word	0x200000d7
 800092c:	200000c0 	.word	0x200000c0

08000930 <updateTime>:

void updateTime() {
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
  char holder[3];
  for (u8 i = 0; i < 4; i++) {
 8000936:	2300      	movs	r3, #0
 8000938:	71fb      	strb	r3, [r7, #7]
 800093a:	e052      	b.n	80009e2 <updateTime+0xb2>
	switch (i) {
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	2b03      	cmp	r3, #3
 8000940:	d846      	bhi.n	80009d0 <updateTime+0xa0>
 8000942:	a201      	add	r2, pc, #4	; (adr r2, 8000948 <updateTime+0x18>)
 8000944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000948:	08000959 	.word	0x08000959
 800094c:	08000977 	.word	0x08000977
 8000950:	08000995 	.word	0x08000995
 8000954:	080009b3 	.word	0x080009b3
	  case 0:
		LCD_Set_Cursor(&LCD, 1, 7);
 8000958:	2207      	movs	r2, #7
 800095a:	2101      	movs	r1, #1
 800095c:	4827      	ldr	r0, [pc, #156]	; (80009fc <updateTime+0xcc>)
 800095e:	f7ff ff0b 	bl	8000778 <LCD_Set_Cursor>
		sprintf(holder, "%2d", timeHolder[i]);
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	4a26      	ldr	r2, [pc, #152]	; (8000a00 <updateTime+0xd0>)
 8000966:	5cd3      	ldrb	r3, [r2, r3]
 8000968:	461a      	mov	r2, r3
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	4925      	ldr	r1, [pc, #148]	; (8000a04 <updateTime+0xd4>)
 800096e:	4618      	mov	r0, r3
 8000970:	f003 fd02 	bl	8004378 <siprintf>
		break;
 8000974:	e02d      	b.n	80009d2 <updateTime+0xa2>
	  case 1:
		LCD_Set_Cursor(&LCD, 1, 9);
 8000976:	2209      	movs	r2, #9
 8000978:	2101      	movs	r1, #1
 800097a:	4820      	ldr	r0, [pc, #128]	; (80009fc <updateTime+0xcc>)
 800097c:	f7ff fefc 	bl	8000778 <LCD_Set_Cursor>
		sprintf(holder, "%1d", timeHolder[i]);
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	4a1f      	ldr	r2, [pc, #124]	; (8000a00 <updateTime+0xd0>)
 8000984:	5cd3      	ldrb	r3, [r2, r3]
 8000986:	461a      	mov	r2, r3
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	491f      	ldr	r1, [pc, #124]	; (8000a08 <updateTime+0xd8>)
 800098c:	4618      	mov	r0, r3
 800098e:	f003 fcf3 	bl	8004378 <siprintf>
		break;
 8000992:	e01e      	b.n	80009d2 <updateTime+0xa2>
	  case 2:
		LCD_Set_Cursor(&LCD, 1, 11);
 8000994:	220b      	movs	r2, #11
 8000996:	2101      	movs	r1, #1
 8000998:	4818      	ldr	r0, [pc, #96]	; (80009fc <updateTime+0xcc>)
 800099a:	f7ff feed 	bl	8000778 <LCD_Set_Cursor>
		sprintf(holder, "%1d", timeHolder[i]);
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	4a17      	ldr	r2, [pc, #92]	; (8000a00 <updateTime+0xd0>)
 80009a2:	5cd3      	ldrb	r3, [r2, r3]
 80009a4:	461a      	mov	r2, r3
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	4917      	ldr	r1, [pc, #92]	; (8000a08 <updateTime+0xd8>)
 80009aa:	4618      	mov	r0, r3
 80009ac:	f003 fce4 	bl	8004378 <siprintf>
		break;
 80009b0:	e00f      	b.n	80009d2 <updateTime+0xa2>
	  case 3:
		LCD_Set_Cursor(&LCD, 1, 12);
 80009b2:	220c      	movs	r2, #12
 80009b4:	2101      	movs	r1, #1
 80009b6:	4811      	ldr	r0, [pc, #68]	; (80009fc <updateTime+0xcc>)
 80009b8:	f7ff fede 	bl	8000778 <LCD_Set_Cursor>
		sprintf(holder, "%1d", timeHolder[i]);
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	4a10      	ldr	r2, [pc, #64]	; (8000a00 <updateTime+0xd0>)
 80009c0:	5cd3      	ldrb	r3, [r2, r3]
 80009c2:	461a      	mov	r2, r3
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	4910      	ldr	r1, [pc, #64]	; (8000a08 <updateTime+0xd8>)
 80009c8:	4618      	mov	r0, r3
 80009ca:	f003 fcd5 	bl	8004378 <siprintf>
		break;
 80009ce:	e000      	b.n	80009d2 <updateTime+0xa2>
	  default:
		break;
 80009d0:	bf00      	nop
	}
	LCD_Print_String(&LCD, holder);
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	4619      	mov	r1, r3
 80009d6:	4809      	ldr	r0, [pc, #36]	; (80009fc <updateTime+0xcc>)
 80009d8:	f7ff fef4 	bl	80007c4 <LCD_Print_String>
  for (u8 i = 0; i < 4; i++) {
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	3301      	adds	r3, #1
 80009e0:	71fb      	strb	r3, [r7, #7]
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	2b03      	cmp	r3, #3
 80009e6:	d9a9      	bls.n	800093c <updateTime+0xc>
  }
  LCD_Print_String_At(&LCD, 1, 10, ":");
 80009e8:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <updateTime+0xdc>)
 80009ea:	220a      	movs	r2, #10
 80009ec:	2101      	movs	r1, #1
 80009ee:	4803      	ldr	r0, [pc, #12]	; (80009fc <updateTime+0xcc>)
 80009f0:	f7ff fef5 	bl	80007de <LCD_Print_String_At>
}
 80009f4:	bf00      	nop
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	200000c0 	.word	0x200000c0
 8000a00:	200000d0 	.word	0x200000d0
 8000a04:	08004c9c 	.word	0x08004c9c
 8000a08:	08004ca0 	.word	0x08004ca0
 8000a0c:	08004ca4 	.word	0x08004ca4

08000a10 <cbShort>:
 * click -> inc
 * double click -> choose
 * hold -> back
 * */

void cbShort() {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  LCD_Print_String_At(&LCD, 2, 11, "SHORT");
 8000a14:	4b28      	ldr	r3, [pc, #160]	; (8000ab8 <cbShort+0xa8>)
 8000a16:	220b      	movs	r2, #11
 8000a18:	2102      	movs	r1, #2
 8000a1a:	4828      	ldr	r0, [pc, #160]	; (8000abc <cbShort+0xac>)
 8000a1c:	f7ff fedf 	bl	80007de <LCD_Print_String_At>

  if (menuSelected) {
 8000a20:	4b27      	ldr	r3, [pc, #156]	; (8000ac0 <cbShort+0xb0>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d019      	beq.n	8000a5c <cbShort+0x4c>
	if (digitSelected) {
 8000a28:	4b26      	ldr	r3, [pc, #152]	; (8000ac4 <cbShort+0xb4>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d008      	beq.n	8000a42 <cbShort+0x32>
	  timeHolder[holderIndex]++;
 8000a30:	4b25      	ldr	r3, [pc, #148]	; (8000ac8 <cbShort+0xb8>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	4a25      	ldr	r2, [pc, #148]	; (8000acc <cbShort+0xbc>)
 8000a36:	5cd2      	ldrb	r2, [r2, r3]
 8000a38:	3201      	adds	r2, #1
 8000a3a:	b2d1      	uxtb	r1, r2
 8000a3c:	4a23      	ldr	r2, [pc, #140]	; (8000acc <cbShort+0xbc>)
 8000a3e:	54d1      	strb	r1, [r2, r3]
 8000a40:	e00c      	b.n	8000a5c <cbShort+0x4c>
	} else {
	  holderIndex++;
 8000a42:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <cbShort+0xb8>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	3301      	adds	r3, #1
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	4b1f      	ldr	r3, [pc, #124]	; (8000ac8 <cbShort+0xb8>)
 8000a4c:	701a      	strb	r2, [r3, #0]
	  if (holderIndex > 3)
 8000a4e:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <cbShort+0xb8>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b03      	cmp	r3, #3
 8000a54:	d902      	bls.n	8000a5c <cbShort+0x4c>
		holderIndex = 0;
 8000a56:	4b1c      	ldr	r3, [pc, #112]	; (8000ac8 <cbShort+0xb8>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	701a      	strb	r2, [r3, #0]
	}
  }

  updateTime();
 8000a5c:	f7ff ff68 	bl	8000930 <updateTime>
  switch (holderIndex) {
 8000a60:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <cbShort+0xb8>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b03      	cmp	r3, #3
 8000a66:	d823      	bhi.n	8000ab0 <cbShort+0xa0>
 8000a68:	a201      	add	r2, pc, #4	; (adr r2, 8000a70 <cbShort+0x60>)
 8000a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a6e:	bf00      	nop
 8000a70:	08000a81 	.word	0x08000a81
 8000a74:	08000a8d 	.word	0x08000a8d
 8000a78:	08000a99 	.word	0x08000a99
 8000a7c:	08000aa5 	.word	0x08000aa5
	case 0:
	  LCD_Set_Cursor(&LCD, 1, 8);
 8000a80:	2208      	movs	r2, #8
 8000a82:	2101      	movs	r1, #1
 8000a84:	480d      	ldr	r0, [pc, #52]	; (8000abc <cbShort+0xac>)
 8000a86:	f7ff fe77 	bl	8000778 <LCD_Set_Cursor>
	  break;
 8000a8a:	e012      	b.n	8000ab2 <cbShort+0xa2>
	case 1:
	  LCD_Set_Cursor(&LCD, 1, 9);
 8000a8c:	2209      	movs	r2, #9
 8000a8e:	2101      	movs	r1, #1
 8000a90:	480a      	ldr	r0, [pc, #40]	; (8000abc <cbShort+0xac>)
 8000a92:	f7ff fe71 	bl	8000778 <LCD_Set_Cursor>
	  break;
 8000a96:	e00c      	b.n	8000ab2 <cbShort+0xa2>
	case 2:
	  LCD_Set_Cursor(&LCD, 1, 11);
 8000a98:	220b      	movs	r2, #11
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	4807      	ldr	r0, [pc, #28]	; (8000abc <cbShort+0xac>)
 8000a9e:	f7ff fe6b 	bl	8000778 <LCD_Set_Cursor>
	  break;
 8000aa2:	e006      	b.n	8000ab2 <cbShort+0xa2>
	case 3:
	  LCD_Set_Cursor(&LCD, 1, 12);
 8000aa4:	220c      	movs	r2, #12
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	4804      	ldr	r0, [pc, #16]	; (8000abc <cbShort+0xac>)
 8000aaa:	f7ff fe65 	bl	8000778 <LCD_Set_Cursor>
	  break;
 8000aae:	e000      	b.n	8000ab2 <cbShort+0xa2>
	default:
	  break;
 8000ab0:	bf00      	nop
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	08004ca8 	.word	0x08004ca8
 8000abc:	200000c0 	.word	0x200000c0
 8000ac0:	200000d5 	.word	0x200000d5
 8000ac4:	200000d6 	.word	0x200000d6
 8000ac8:	200000d4 	.word	0x200000d4
 8000acc:	200000d0 	.word	0x200000d0

08000ad0 <cbLong>:

void cbLong() {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  LCD_Print_String_At(&LCD, 2, 11, "LONG ");
 8000ad4:	4b21      	ldr	r3, [pc, #132]	; (8000b5c <cbLong+0x8c>)
 8000ad6:	220b      	movs	r2, #11
 8000ad8:	2102      	movs	r1, #2
 8000ada:	4821      	ldr	r0, [pc, #132]	; (8000b60 <cbLong+0x90>)
 8000adc:	f7ff fe7f 	bl	80007de <LCD_Print_String_At>
  if (menuSelected == true) {
 8000ae0:	4b20      	ldr	r3, [pc, #128]	; (8000b64 <cbLong+0x94>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d00d      	beq.n	8000b04 <cbLong+0x34>
	if (digitSelected == true) {
 8000ae8:	4b1f      	ldr	r3, [pc, #124]	; (8000b68 <cbLong+0x98>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d003      	beq.n	8000af8 <cbLong+0x28>
	  digitSelected = false;
 8000af0:	4b1d      	ldr	r3, [pc, #116]	; (8000b68 <cbLong+0x98>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	701a      	strb	r2, [r3, #0]
 8000af6:	e005      	b.n	8000b04 <cbLong+0x34>
	} else {
	  menuSelected = false;
 8000af8:	4b1a      	ldr	r3, [pc, #104]	; (8000b64 <cbLong+0x94>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	701a      	strb	r2, [r3, #0]
	  CLCD_I2C_BlinkOff(&LCD);
 8000afe:	4818      	ldr	r0, [pc, #96]	; (8000b60 <cbLong+0x90>)
 8000b00:	f7ff fe0c 	bl	800071c <CLCD_I2C_BlinkOff>
	}
  }
  switch (holderIndex) {
 8000b04:	4b19      	ldr	r3, [pc, #100]	; (8000b6c <cbLong+0x9c>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b03      	cmp	r3, #3
 8000b0a:	d823      	bhi.n	8000b54 <cbLong+0x84>
 8000b0c:	a201      	add	r2, pc, #4	; (adr r2, 8000b14 <cbLong+0x44>)
 8000b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b12:	bf00      	nop
 8000b14:	08000b25 	.word	0x08000b25
 8000b18:	08000b31 	.word	0x08000b31
 8000b1c:	08000b3d 	.word	0x08000b3d
 8000b20:	08000b49 	.word	0x08000b49
	case 0:
	  LCD_Set_Cursor(&LCD, 1, 8);
 8000b24:	2208      	movs	r2, #8
 8000b26:	2101      	movs	r1, #1
 8000b28:	480d      	ldr	r0, [pc, #52]	; (8000b60 <cbLong+0x90>)
 8000b2a:	f7ff fe25 	bl	8000778 <LCD_Set_Cursor>
	  break;
 8000b2e:	e012      	b.n	8000b56 <cbLong+0x86>
	case 1:
	  LCD_Set_Cursor(&LCD, 1, 9);
 8000b30:	2209      	movs	r2, #9
 8000b32:	2101      	movs	r1, #1
 8000b34:	480a      	ldr	r0, [pc, #40]	; (8000b60 <cbLong+0x90>)
 8000b36:	f7ff fe1f 	bl	8000778 <LCD_Set_Cursor>
	  break;
 8000b3a:	e00c      	b.n	8000b56 <cbLong+0x86>
	case 2:
	  LCD_Set_Cursor(&LCD, 1, 11);
 8000b3c:	220b      	movs	r2, #11
 8000b3e:	2101      	movs	r1, #1
 8000b40:	4807      	ldr	r0, [pc, #28]	; (8000b60 <cbLong+0x90>)
 8000b42:	f7ff fe19 	bl	8000778 <LCD_Set_Cursor>
	  break;
 8000b46:	e006      	b.n	8000b56 <cbLong+0x86>
	case 3:
	  LCD_Set_Cursor(&LCD, 1, 12);
 8000b48:	220c      	movs	r2, #12
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	4804      	ldr	r0, [pc, #16]	; (8000b60 <cbLong+0x90>)
 8000b4e:	f7ff fe13 	bl	8000778 <LCD_Set_Cursor>
	  break;
 8000b52:	e000      	b.n	8000b56 <cbLong+0x86>
	default:
	  break;
 8000b54:	bf00      	nop
  }
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	08004cb0 	.word	0x08004cb0
 8000b60:	200000c0 	.word	0x200000c0
 8000b64:	200000d5 	.word	0x200000d5
 8000b68:	200000d6 	.word	0x200000d6
 8000b6c:	200000d4 	.word	0x200000d4

08000b70 <cbDouble>:
void cbDouble() {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  LCD_Print_String_At(&LCD, 2, 11, "DOUBL");
 8000b74:	4b27      	ldr	r3, [pc, #156]	; (8000c14 <cbDouble+0xa4>)
 8000b76:	220b      	movs	r2, #11
 8000b78:	2102      	movs	r1, #2
 8000b7a:	4827      	ldr	r0, [pc, #156]	; (8000c18 <cbDouble+0xa8>)
 8000b7c:	f7ff fe2f 	bl	80007de <LCD_Print_String_At>
  if (menuSelected == true) {
 8000b80:	4b26      	ldr	r3, [pc, #152]	; (8000c1c <cbDouble+0xac>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d010      	beq.n	8000baa <cbDouble+0x3a>
	if (digitSelected == false) {
 8000b88:	4b25      	ldr	r3, [pc, #148]	; (8000c20 <cbDouble+0xb0>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	f083 0301 	eor.w	r3, r3, #1
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d012      	beq.n	8000bbc <cbDouble+0x4c>
	  CLCD_I2C_CursorOff(&LCD);
 8000b96:	4820      	ldr	r0, [pc, #128]	; (8000c18 <cbDouble+0xa8>)
 8000b98:	f7ff fd94 	bl	80006c4 <CLCD_I2C_CursorOff>
	  CLCD_I2C_BlinkOn(&LCD);
 8000b9c:	481e      	ldr	r0, [pc, #120]	; (8000c18 <cbDouble+0xa8>)
 8000b9e:	f7ff fda7 	bl	80006f0 <CLCD_I2C_BlinkOn>
	  digitSelected = true;
 8000ba2:	4b1f      	ldr	r3, [pc, #124]	; (8000c20 <cbDouble+0xb0>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	701a      	strb	r2, [r3, #0]
 8000ba8:	e008      	b.n	8000bbc <cbDouble+0x4c>
	}
  } else {
	holderIndex = 0;
 8000baa:	4b1e      	ldr	r3, [pc, #120]	; (8000c24 <cbDouble+0xb4>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]
	menuSelected = true;
 8000bb0:	4b1a      	ldr	r3, [pc, #104]	; (8000c1c <cbDouble+0xac>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	701a      	strb	r2, [r3, #0]
	digitSelected = false;
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <cbDouble+0xb0>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	701a      	strb	r2, [r3, #0]
  }
  switch (holderIndex) {
 8000bbc:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <cbDouble+0xb4>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b03      	cmp	r3, #3
 8000bc2:	d823      	bhi.n	8000c0c <cbDouble+0x9c>
 8000bc4:	a201      	add	r2, pc, #4	; (adr r2, 8000bcc <cbDouble+0x5c>)
 8000bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bca:	bf00      	nop
 8000bcc:	08000bdd 	.word	0x08000bdd
 8000bd0:	08000be9 	.word	0x08000be9
 8000bd4:	08000bf5 	.word	0x08000bf5
 8000bd8:	08000c01 	.word	0x08000c01
	case 0:
	  LCD_Set_Cursor(&LCD, 1, 8);
 8000bdc:	2208      	movs	r2, #8
 8000bde:	2101      	movs	r1, #1
 8000be0:	480d      	ldr	r0, [pc, #52]	; (8000c18 <cbDouble+0xa8>)
 8000be2:	f7ff fdc9 	bl	8000778 <LCD_Set_Cursor>
	  break;
 8000be6:	e012      	b.n	8000c0e <cbDouble+0x9e>
	case 1:
	  LCD_Set_Cursor(&LCD, 1, 9);
 8000be8:	2209      	movs	r2, #9
 8000bea:	2101      	movs	r1, #1
 8000bec:	480a      	ldr	r0, [pc, #40]	; (8000c18 <cbDouble+0xa8>)
 8000bee:	f7ff fdc3 	bl	8000778 <LCD_Set_Cursor>
	  break;
 8000bf2:	e00c      	b.n	8000c0e <cbDouble+0x9e>
	case 2:
	  LCD_Set_Cursor(&LCD, 1, 11);
 8000bf4:	220b      	movs	r2, #11
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	4807      	ldr	r0, [pc, #28]	; (8000c18 <cbDouble+0xa8>)
 8000bfa:	f7ff fdbd 	bl	8000778 <LCD_Set_Cursor>
	  break;
 8000bfe:	e006      	b.n	8000c0e <cbDouble+0x9e>
	case 3:
	  LCD_Set_Cursor(&LCD, 1, 12);
 8000c00:	220c      	movs	r2, #12
 8000c02:	2101      	movs	r1, #1
 8000c04:	4804      	ldr	r0, [pc, #16]	; (8000c18 <cbDouble+0xa8>)
 8000c06:	f7ff fdb7 	bl	8000778 <LCD_Set_Cursor>
	  break;
 8000c0a:	e000      	b.n	8000c0e <cbDouble+0x9e>
	default:
	  break;
 8000c0c:	bf00      	nop
  }
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	08004cb8 	.word	0x08004cb8
 8000c18:	200000c0 	.word	0x200000c0
 8000c1c:	200000d5 	.word	0x200000d5
 8000c20:	200000d6 	.word	0x200000d6
 8000c24:	200000d4 	.word	0x200000d4

08000c28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c2c:	f000 fe28 	bl	8001880 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c30:	f000 f819 	bl	8000c66 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c34:	f000 fa92 	bl	800115c <MX_GPIO_Init>
  MX_DMA_Init();
 8000c38:	f000 fa7a 	bl	8001130 <MX_DMA_Init>
  MX_TIM1_Init();
 8000c3c:	f000 f8b8 	bl	8000db0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c40:	f000 f90e 	bl	8000e60 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c44:	f000 f960 	bl	8000f08 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000c48:	f000 f9c2 	bl	8000fd0 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000c4c:	f000 fa24 	bl	8001098 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8000c50:	f000 f880 	bl	8000d54 <MX_I2C2_Init>
  MX_USB_PCD_Init();
 8000c54:	f000 fa4a 	bl	80010ec <MX_USB_PCD_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000c58:	f000 f860 	bl	8000d1c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8000c5c:	f7ff fdd6 	bl	800080c <setup>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	loop();
 8000c60:	f7ff fe18 	bl	8000894 <loop>
 8000c64:	e7fc      	b.n	8000c60 <main+0x38>

08000c66 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b094      	sub	sp, #80	; 0x50
 8000c6a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c70:	2228      	movs	r2, #40	; 0x28
 8000c72:	2100      	movs	r1, #0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f003 fb77 	bl	8004368 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
 8000c88:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c96:	2301      	movs	r3, #1
 8000c98:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cb0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000cb2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f001 ffdd 	bl	8002c7c <HAL_RCC_OscConfig>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000cc8:	f000 fb0c 	bl	80012e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ccc:	230f      	movs	r3, #15
 8000cce:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cdc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f002 fa49 	bl	8003180 <HAL_RCC_ClockConfig>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000cf4:	f000 faf6 	bl	80012e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000cf8:	2310      	movs	r3, #16
 8000cfa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000cfc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d00:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	4618      	mov	r0, r3
 8000d06:	f002 fbd3 	bl	80034b0 <HAL_RCCEx_PeriphCLKConfig>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000d10:	f000 fae8 	bl	80012e4 <Error_Handler>
  }
}
 8000d14:	bf00      	nop
 8000d16:	3750      	adds	r7, #80	; 0x50
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2100      	movs	r1, #0
 8000d24:	200e      	movs	r0, #14
 8000d26:	f000 ff08 	bl	8001b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000d2a:	200e      	movs	r0, #14
 8000d2c:	f000 ff21 	bl	8001b72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2100      	movs	r1, #0
 8000d34:	200f      	movs	r0, #15
 8000d36:	f000 ff00 	bl	8001b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000d3a:	200f      	movs	r0, #15
 8000d3c:	f000 ff19 	bl	8001b72 <HAL_NVIC_EnableIRQ>
  /* TIM4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2101      	movs	r1, #1
 8000d44:	201e      	movs	r0, #30
 8000d46:	f000 fef8 	bl	8001b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d4a:	201e      	movs	r0, #30
 8000d4c:	f000 ff11 	bl	8001b72 <HAL_NVIC_EnableIRQ>
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <MX_I2C2_Init+0x50>)
 8000d5a:	4a13      	ldr	r2, [pc, #76]	; (8000da8 <MX_I2C2_Init+0x54>)
 8000d5c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <MX_I2C2_Init+0x50>)
 8000d60:	4a12      	ldr	r2, [pc, #72]	; (8000dac <MX_I2C2_Init+0x58>)
 8000d62:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d64:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <MX_I2C2_Init+0x50>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <MX_I2C2_Init+0x50>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <MX_I2C2_Init+0x50>)
 8000d72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d76:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d78:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <MX_I2C2_Init+0x50>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <MX_I2C2_Init+0x50>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d84:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <MX_I2C2_Init+0x50>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <MX_I2C2_Init+0x50>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d90:	4804      	ldr	r0, [pc, #16]	; (8000da4 <MX_I2C2_Init+0x50>)
 8000d92:	f001 fa1d 	bl	80021d0 <HAL_I2C_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000d9c:	f000 faa2 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	200000dc 	.word	0x200000dc
 8000da8:	40005800 	.word	0x40005800
 8000dac:	000186a0 	.word	0x000186a0

08000db0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08c      	sub	sp, #48	; 0x30
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000db6:	f107 030c 	add.w	r3, r7, #12
 8000dba:	2224      	movs	r2, #36	; 0x24
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f003 fad2 	bl	8004368 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dcc:	4b22      	ldr	r3, [pc, #136]	; (8000e58 <MX_TIM1_Init+0xa8>)
 8000dce:	4a23      	ldr	r2, [pc, #140]	; (8000e5c <MX_TIM1_Init+0xac>)
 8000dd0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000dd2:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <MX_TIM1_Init+0xa8>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd8:	4b1f      	ldr	r3, [pc, #124]	; (8000e58 <MX_TIM1_Init+0xa8>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000dde:	4b1e      	ldr	r3, [pc, #120]	; (8000e58 <MX_TIM1_Init+0xa8>)
 8000de0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000de4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de6:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <MX_TIM1_Init+0xa8>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dec:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <MX_TIM1_Init+0xa8>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000df2:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <MX_TIM1_Init+0xa8>)
 8000df4:	2280      	movs	r2, #128	; 0x80
 8000df6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e00:	2301      	movs	r3, #1
 8000e02:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000e08:	230a      	movs	r3, #10
 8000e0a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e10:	2301      	movs	r3, #1
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000e18:	230a      	movs	r3, #10
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000e1c:	f107 030c 	add.w	r3, r7, #12
 8000e20:	4619      	mov	r1, r3
 8000e22:	480d      	ldr	r0, [pc, #52]	; (8000e58 <MX_TIM1_Init+0xa8>)
 8000e24:	f002 fc49 	bl	80036ba <HAL_TIM_Encoder_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000e2e:	f000 fa59 	bl	80012e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e32:	2300      	movs	r3, #0
 8000e34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4806      	ldr	r0, [pc, #24]	; (8000e58 <MX_TIM1_Init+0xa8>)
 8000e40:	f003 f8bc 	bl	8003fbc <HAL_TIMEx_MasterConfigSynchronization>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000e4a:	f000 fa4b 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	3730      	adds	r7, #48	; 0x30
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	200001b8 	.word	0x200001b8
 8000e5c:	40012c00 	.word	0x40012c00

08000e60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08c      	sub	sp, #48	; 0x30
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e66:	f107 030c 	add.w	r3, r7, #12
 8000e6a:	2224      	movs	r2, #36	; 0x24
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f003 fa7a 	bl	8004368 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e7c:	4b21      	ldr	r3, [pc, #132]	; (8000f04 <MX_TIM2_Init+0xa4>)
 8000e7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e84:	4b1f      	ldr	r3, [pc, #124]	; (8000f04 <MX_TIM2_Init+0xa4>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8a:	4b1e      	ldr	r3, [pc, #120]	; (8000f04 <MX_TIM2_Init+0xa4>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000e90:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <MX_TIM2_Init+0xa4>)
 8000e92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e98:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <MX_TIM2_Init+0xa4>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e9e:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <MX_TIM2_Init+0xa4>)
 8000ea0:	2280      	movs	r2, #128	; 0x80
 8000ea2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000eac:	2301      	movs	r3, #1
 8000eae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000ec8:	f107 030c 	add.w	r3, r7, #12
 8000ecc:	4619      	mov	r1, r3
 8000ece:	480d      	ldr	r0, [pc, #52]	; (8000f04 <MX_TIM2_Init+0xa4>)
 8000ed0:	f002 fbf3 	bl	80036ba <HAL_TIM_Encoder_Init>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000eda:	f000 fa03 	bl	80012e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4806      	ldr	r0, [pc, #24]	; (8000f04 <MX_TIM2_Init+0xa4>)
 8000eec:	f003 f866 	bl	8003fbc <HAL_TIMEx_MasterConfigSynchronization>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000ef6:	f000 f9f5 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000efa:	bf00      	nop
 8000efc:	3730      	adds	r7, #48	; 0x30
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000200 	.word	0x20000200

08000f08 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	; 0x28
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f0e:	f107 0320 	add.w	r3, r7, #32
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
 8000f24:	611a      	str	r2, [r3, #16]
 8000f26:	615a      	str	r2, [r3, #20]
 8000f28:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f2a:	4b27      	ldr	r3, [pc, #156]	; (8000fc8 <MX_TIM3_Init+0xc0>)
 8000f2c:	4a27      	ldr	r2, [pc, #156]	; (8000fcc <MX_TIM3_Init+0xc4>)
 8000f2e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48;
 8000f30:	4b25      	ldr	r3, [pc, #148]	; (8000fc8 <MX_TIM3_Init+0xc0>)
 8000f32:	2230      	movs	r2, #48	; 0x30
 8000f34:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f36:	4b24      	ldr	r3, [pc, #144]	; (8000fc8 <MX_TIM3_Init+0xc0>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 8000f3c:	4b22      	ldr	r3, [pc, #136]	; (8000fc8 <MX_TIM3_Init+0xc0>)
 8000f3e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000f42:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f44:	4b20      	ldr	r3, [pc, #128]	; (8000fc8 <MX_TIM3_Init+0xc0>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f4a:	4b1f      	ldr	r3, [pc, #124]	; (8000fc8 <MX_TIM3_Init+0xc0>)
 8000f4c:	2280      	movs	r2, #128	; 0x80
 8000f4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f50:	481d      	ldr	r0, [pc, #116]	; (8000fc8 <MX_TIM3_Init+0xc0>)
 8000f52:	f002 fb63 	bl	800361c <HAL_TIM_PWM_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000f5c:	f000 f9c2 	bl	80012e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f60:	2300      	movs	r3, #0
 8000f62:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f64:	2300      	movs	r3, #0
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f68:	f107 0320 	add.w	r3, r7, #32
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4816      	ldr	r0, [pc, #88]	; (8000fc8 <MX_TIM3_Init+0xc0>)
 8000f70:	f003 f824 	bl	8003fbc <HAL_TIMEx_MasterConfigSynchronization>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000f7a:	f000 f9b3 	bl	80012e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f7e:	2360      	movs	r3, #96	; 0x60
 8000f80:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	2200      	movs	r2, #0
 8000f92:	4619      	mov	r1, r3
 8000f94:	480c      	ldr	r0, [pc, #48]	; (8000fc8 <MX_TIM3_Init+0xc0>)
 8000f96:	f002 fd3b 	bl	8003a10 <HAL_TIM_PWM_ConfigChannel>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000fa0:	f000 f9a0 	bl	80012e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	2204      	movs	r2, #4
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4807      	ldr	r0, [pc, #28]	; (8000fc8 <MX_TIM3_Init+0xc0>)
 8000fac:	f002 fd30 	bl	8003a10 <HAL_TIM_PWM_ConfigChannel>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000fb6:	f000 f995 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000fba:	4803      	ldr	r0, [pc, #12]	; (8000fc8 <MX_TIM3_Init+0xc0>)
 8000fbc:	f000 fafa 	bl	80015b4 <HAL_TIM_MspPostInit>

}
 8000fc0:	bf00      	nop
 8000fc2:	3728      	adds	r7, #40	; 0x28
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000248 	.word	0x20000248
 8000fcc:	40000400 	.word	0x40000400

08000fd0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	; 0x28
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd6:	f107 0320 	add.w	r3, r7, #32
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fe0:	1d3b      	adds	r3, r7, #4
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
 8000fec:	611a      	str	r2, [r3, #16]
 8000fee:	615a      	str	r2, [r3, #20]
 8000ff0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ff2:	4b27      	ldr	r3, [pc, #156]	; (8001090 <MX_TIM4_Init+0xc0>)
 8000ff4:	4a27      	ldr	r2, [pc, #156]	; (8001094 <MX_TIM4_Init+0xc4>)
 8000ff6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48;
 8000ff8:	4b25      	ldr	r3, [pc, #148]	; (8001090 <MX_TIM4_Init+0xc0>)
 8000ffa:	2230      	movs	r2, #48	; 0x30
 8000ffc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffe:	4b24      	ldr	r3, [pc, #144]	; (8001090 <MX_TIM4_Init+0xc0>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001004:	4b22      	ldr	r3, [pc, #136]	; (8001090 <MX_TIM4_Init+0xc0>)
 8001006:	f240 32e7 	movw	r2, #999	; 0x3e7
 800100a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800100c:	4b20      	ldr	r3, [pc, #128]	; (8001090 <MX_TIM4_Init+0xc0>)
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001012:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <MX_TIM4_Init+0xc0>)
 8001014:	2280      	movs	r2, #128	; 0x80
 8001016:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001018:	481d      	ldr	r0, [pc, #116]	; (8001090 <MX_TIM4_Init+0xc0>)
 800101a:	f002 faff 	bl	800361c <HAL_TIM_PWM_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001024:	f000 f95e 	bl	80012e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001028:	2300      	movs	r3, #0
 800102a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800102c:	2300      	movs	r3, #0
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001030:	f107 0320 	add.w	r3, r7, #32
 8001034:	4619      	mov	r1, r3
 8001036:	4816      	ldr	r0, [pc, #88]	; (8001090 <MX_TIM4_Init+0xc0>)
 8001038:	f002 ffc0 	bl	8003fbc <HAL_TIMEx_MasterConfigSynchronization>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001042:	f000 f94f 	bl	80012e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001046:	2360      	movs	r3, #96	; 0x60
 8001048:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	2204      	movs	r2, #4
 800105a:	4619      	mov	r1, r3
 800105c:	480c      	ldr	r0, [pc, #48]	; (8001090 <MX_TIM4_Init+0xc0>)
 800105e:	f002 fcd7 	bl	8003a10 <HAL_TIM_PWM_ConfigChannel>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001068:	f000 f93c 	bl	80012e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	2208      	movs	r2, #8
 8001070:	4619      	mov	r1, r3
 8001072:	4807      	ldr	r0, [pc, #28]	; (8001090 <MX_TIM4_Init+0xc0>)
 8001074:	f002 fccc 	bl	8003a10 <HAL_TIM_PWM_ConfigChannel>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800107e:	f000 f931 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001082:	4803      	ldr	r0, [pc, #12]	; (8001090 <MX_TIM4_Init+0xc0>)
 8001084:	f000 fa96 	bl	80015b4 <HAL_TIM_MspPostInit>

}
 8001088:	bf00      	nop
 800108a:	3728      	adds	r7, #40	; 0x28
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000290 	.word	0x20000290
 8001094:	40000800 	.word	0x40000800

08001098 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 800109e:	4a12      	ldr	r2, [pc, #72]	; (80010e8 <MX_USART2_UART_Init+0x50>)
 80010a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010b6:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010bc:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010be:	220c      	movs	r2, #12
 80010c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c2:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ce:	4805      	ldr	r0, [pc, #20]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010d0:	f002 ffe4 	bl	800409c <HAL_UART_Init>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010da:	f000 f903 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200002d8 	.word	0x200002d8
 80010e8:	40004400 	.word	0x40004400

080010ec <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80010f0:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <MX_USB_PCD_Init+0x3c>)
 80010f2:	4a0e      	ldr	r2, [pc, #56]	; (800112c <MX_USB_PCD_Init+0x40>)
 80010f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80010f6:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <MX_USB_PCD_Init+0x3c>)
 80010f8:	2208      	movs	r2, #8
 80010fa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80010fc:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <MX_USB_PCD_Init+0x3c>)
 80010fe:	2202      	movs	r2, #2
 8001100:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <MX_USB_PCD_Init+0x3c>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001108:	4b07      	ldr	r3, [pc, #28]	; (8001128 <MX_USB_PCD_Init+0x3c>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <MX_USB_PCD_Init+0x3c>)
 8001110:	2200      	movs	r2, #0
 8001112:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001114:	4804      	ldr	r0, [pc, #16]	; (8001128 <MX_USB_PCD_Init+0x3c>)
 8001116:	f001 fca5 	bl	8002a64 <HAL_PCD_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001120:	f000 f8e0 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	2000031c 	.word	0x2000031c
 800112c:	40005c00 	.word	0x40005c00

08001130 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001136:	4b08      	ldr	r3, [pc, #32]	; (8001158 <MX_DMA_Init+0x28>)
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	4a07      	ldr	r2, [pc, #28]	; (8001158 <MX_DMA_Init+0x28>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6153      	str	r3, [r2, #20]
 8001142:	4b05      	ldr	r3, [pc, #20]	; (8001158 <MX_DMA_Init+0x28>)
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]

}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr
 8001158:	40021000 	.word	0x40021000

0800115c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001162:	f107 0310 	add.w	r3, r7, #16
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001170:	4b57      	ldr	r3, [pc, #348]	; (80012d0 <MX_GPIO_Init+0x174>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	4a56      	ldr	r2, [pc, #344]	; (80012d0 <MX_GPIO_Init+0x174>)
 8001176:	f043 0310 	orr.w	r3, r3, #16
 800117a:	6193      	str	r3, [r2, #24]
 800117c:	4b54      	ldr	r3, [pc, #336]	; (80012d0 <MX_GPIO_Init+0x174>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	f003 0310 	and.w	r3, r3, #16
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001188:	4b51      	ldr	r3, [pc, #324]	; (80012d0 <MX_GPIO_Init+0x174>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	4a50      	ldr	r2, [pc, #320]	; (80012d0 <MX_GPIO_Init+0x174>)
 800118e:	f043 0320 	orr.w	r3, r3, #32
 8001192:	6193      	str	r3, [r2, #24]
 8001194:	4b4e      	ldr	r3, [pc, #312]	; (80012d0 <MX_GPIO_Init+0x174>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f003 0320 	and.w	r3, r3, #32
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a0:	4b4b      	ldr	r3, [pc, #300]	; (80012d0 <MX_GPIO_Init+0x174>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	4a4a      	ldr	r2, [pc, #296]	; (80012d0 <MX_GPIO_Init+0x174>)
 80011a6:	f043 0304 	orr.w	r3, r3, #4
 80011aa:	6193      	str	r3, [r2, #24]
 80011ac:	4b48      	ldr	r3, [pc, #288]	; (80012d0 <MX_GPIO_Init+0x174>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	f003 0304 	and.w	r3, r3, #4
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b8:	4b45      	ldr	r3, [pc, #276]	; (80012d0 <MX_GPIO_Init+0x174>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	4a44      	ldr	r2, [pc, #272]	; (80012d0 <MX_GPIO_Init+0x174>)
 80011be:	f043 0308 	orr.w	r3, r3, #8
 80011c2:	6193      	str	r3, [r2, #24]
 80011c4:	4b42      	ldr	r3, [pc, #264]	; (80012d0 <MX_GPIO_Init+0x174>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	f003 0308 	and.w	r3, r3, #8
 80011cc:	603b      	str	r3, [r7, #0]
 80011ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Y0_Pin|Y1_Pin|Y2_Pin, GPIO_PIN_RESET);
 80011d0:	2200      	movs	r2, #0
 80011d2:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80011d6:	483f      	ldr	r0, [pc, #252]	; (80012d4 <MX_GPIO_Init+0x178>)
 80011d8:	f000 ffe1 	bl	800219e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Y10_Pin|Y11_Pin|Y7_Pin, GPIO_PIN_RESET);
 80011dc:	2200      	movs	r2, #0
 80011de:	f44f 6186 	mov.w	r1, #1072	; 0x430
 80011e2:	483d      	ldr	r0, [pc, #244]	; (80012d8 <MX_GPIO_Init+0x17c>)
 80011e4:	f000 ffdb 	bl	800219e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Y3_Pin|Y4_Pin|Y5_Pin|Y6_Pin, GPIO_PIN_RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80011ee:	483b      	ldr	r0, [pc, #236]	; (80012dc <MX_GPIO_Init+0x180>)
 80011f0:	f000 ffd5 	bl	800219e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Y0_Pin Y1_Pin Y2_Pin */
  GPIO_InitStruct.Pin = Y0_Pin|Y1_Pin|Y2_Pin;
 80011f4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80011f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fa:	2301      	movs	r3, #1
 80011fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2302      	movs	r3, #2
 8001204:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001206:	f107 0310 	add.w	r3, r7, #16
 800120a:	4619      	mov	r1, r3
 800120c:	4831      	ldr	r0, [pc, #196]	; (80012d4 <MX_GPIO_Init+0x178>)
 800120e:	f000 fe2b 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : Y10_Pin Y11_Pin Y7_Pin */
  GPIO_InitStruct.Pin = Y10_Pin|Y11_Pin|Y7_Pin;
 8001212:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8001216:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001218:	2301      	movs	r3, #1
 800121a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2302      	movs	r3, #2
 8001222:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001224:	f107 0310 	add.w	r3, r7, #16
 8001228:	4619      	mov	r1, r3
 800122a:	482b      	ldr	r0, [pc, #172]	; (80012d8 <MX_GPIO_Init+0x17c>)
 800122c:	f000 fe1c 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : X0_Pin X1_Pin */
  GPIO_InitStruct.Pin = X0_Pin|X1_Pin;
 8001230:	2303      	movs	r3, #3
 8001232:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123c:	f107 0310 	add.w	r3, r7, #16
 8001240:	4619      	mov	r1, r3
 8001242:	4826      	ldr	r0, [pc, #152]	; (80012dc <MX_GPIO_Init+0x180>)
 8001244:	f000 fe10 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001248:	2304      	movs	r3, #4
 800124a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800124c:	2303      	movs	r3, #3
 800124e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001250:	f107 0310 	add.w	r3, r7, #16
 8001254:	4619      	mov	r1, r3
 8001256:	4821      	ldr	r0, [pc, #132]	; (80012dc <MX_GPIO_Init+0x180>)
 8001258:	f000 fe06 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : Y3_Pin Y4_Pin Y5_Pin Y6_Pin */
  GPIO_InitStruct.Pin = Y3_Pin|Y4_Pin|Y5_Pin|Y6_Pin;
 800125c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001260:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001262:	2301      	movs	r3, #1
 8001264:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126a:	2302      	movs	r3, #2
 800126c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126e:	f107 0310 	add.w	r3, r7, #16
 8001272:	4619      	mov	r1, r3
 8001274:	4819      	ldr	r0, [pc, #100]	; (80012dc <MX_GPIO_Init+0x180>)
 8001276:	f000 fdf7 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : X2_Pin */
  GPIO_InitStruct.Pin = X2_Pin;
 800127a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800127e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001284:	2301      	movs	r3, #1
 8001286:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(X2_GPIO_Port, &GPIO_InitStruct);
 8001288:	f107 0310 	add.w	r3, r7, #16
 800128c:	4619      	mov	r1, r3
 800128e:	4812      	ldr	r0, [pc, #72]	; (80012d8 <MX_GPIO_Init+0x17c>)
 8001290:	f000 fdea 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : X3_Pin X4_Pin X7_Pin */
  GPIO_InitStruct.Pin = X3_Pin|X4_Pin|X7_Pin;
 8001294:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001298:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800129e:	2301      	movs	r3, #1
 80012a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a2:	f107 0310 	add.w	r3, r7, #16
 80012a6:	4619      	mov	r1, r3
 80012a8:	480c      	ldr	r0, [pc, #48]	; (80012dc <MX_GPIO_Init+0x180>)
 80012aa:	f000 fddd 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : X5_Pin X6_Pin */
  GPIO_InitStruct.Pin = X5_Pin|X6_Pin;
 80012ae:	2360      	movs	r3, #96	; 0x60
 80012b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80012b2:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <MX_GPIO_Init+0x184>)
 80012b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012b6:	2301      	movs	r3, #1
 80012b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ba:	f107 0310 	add.w	r3, r7, #16
 80012be:	4619      	mov	r1, r3
 80012c0:	4806      	ldr	r0, [pc, #24]	; (80012dc <MX_GPIO_Init+0x180>)
 80012c2:	f000 fdd1 	bl	8001e68 <HAL_GPIO_Init>

}
 80012c6:	bf00      	nop
 80012c8:	3720      	adds	r7, #32
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40011000 	.word	0x40011000
 80012d8:	40010800 	.word	0x40010800
 80012dc:	40010c00 	.word	0x40010c00
 80012e0:	10310000 	.word	0x10310000

080012e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e8:	b672      	cpsid	i
}
 80012ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80012ec:	e7fe      	b.n	80012ec <Error_Handler+0x8>
	...

080012f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012f6:	4b15      	ldr	r3, [pc, #84]	; (800134c <HAL_MspInit+0x5c>)
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	4a14      	ldr	r2, [pc, #80]	; (800134c <HAL_MspInit+0x5c>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6193      	str	r3, [r2, #24]
 8001302:	4b12      	ldr	r3, [pc, #72]	; (800134c <HAL_MspInit+0x5c>)
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800130e:	4b0f      	ldr	r3, [pc, #60]	; (800134c <HAL_MspInit+0x5c>)
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	4a0e      	ldr	r2, [pc, #56]	; (800134c <HAL_MspInit+0x5c>)
 8001314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001318:	61d3      	str	r3, [r2, #28]
 800131a:	4b0c      	ldr	r3, [pc, #48]	; (800134c <HAL_MspInit+0x5c>)
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001326:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <HAL_MspInit+0x60>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	4a04      	ldr	r2, [pc, #16]	; (8001350 <HAL_MspInit+0x60>)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001342:	bf00      	nop
 8001344:	3714      	adds	r7, #20
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr
 800134c:	40021000 	.word	0x40021000
 8001350:	40010000 	.word	0x40010000

08001354 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b088      	sub	sp, #32
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 0310 	add.w	r3, r7, #16
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a3c      	ldr	r2, [pc, #240]	; (8001460 <HAL_I2C_MspInit+0x10c>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d170      	bne.n	8001456 <HAL_I2C_MspInit+0x102>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001374:	4b3b      	ldr	r3, [pc, #236]	; (8001464 <HAL_I2C_MspInit+0x110>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	4a3a      	ldr	r2, [pc, #232]	; (8001464 <HAL_I2C_MspInit+0x110>)
 800137a:	f043 0308 	orr.w	r3, r3, #8
 800137e:	6193      	str	r3, [r2, #24]
 8001380:	4b38      	ldr	r3, [pc, #224]	; (8001464 <HAL_I2C_MspInit+0x110>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	f003 0308 	and.w	r3, r3, #8
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 800138c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001390:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001392:	2312      	movs	r3, #18
 8001394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001396:	2303      	movs	r3, #3
 8001398:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139a:	f107 0310 	add.w	r3, r7, #16
 800139e:	4619      	mov	r1, r3
 80013a0:	4831      	ldr	r0, [pc, #196]	; (8001468 <HAL_I2C_MspInit+0x114>)
 80013a2:	f000 fd61 	bl	8001e68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013a6:	4b2f      	ldr	r3, [pc, #188]	; (8001464 <HAL_I2C_MspInit+0x110>)
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	4a2e      	ldr	r2, [pc, #184]	; (8001464 <HAL_I2C_MspInit+0x110>)
 80013ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013b0:	61d3      	str	r3, [r2, #28]
 80013b2:	4b2c      	ldr	r3, [pc, #176]	; (8001464 <HAL_I2C_MspInit+0x110>)
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 DMA Init */
    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 80013be:	4b2b      	ldr	r3, [pc, #172]	; (800146c <HAL_I2C_MspInit+0x118>)
 80013c0:	4a2b      	ldr	r2, [pc, #172]	; (8001470 <HAL_I2C_MspInit+0x11c>)
 80013c2:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013c4:	4b29      	ldr	r3, [pc, #164]	; (800146c <HAL_I2C_MspInit+0x118>)
 80013c6:	2210      	movs	r2, #16
 80013c8:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013ca:	4b28      	ldr	r3, [pc, #160]	; (800146c <HAL_I2C_MspInit+0x118>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013d0:	4b26      	ldr	r3, [pc, #152]	; (800146c <HAL_I2C_MspInit+0x118>)
 80013d2:	2280      	movs	r2, #128	; 0x80
 80013d4:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013d6:	4b25      	ldr	r3, [pc, #148]	; (800146c <HAL_I2C_MspInit+0x118>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013dc:	4b23      	ldr	r3, [pc, #140]	; (800146c <HAL_I2C_MspInit+0x118>)
 80013de:	2200      	movs	r2, #0
 80013e0:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80013e2:	4b22      	ldr	r3, [pc, #136]	; (800146c <HAL_I2C_MspInit+0x118>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013e8:	4b20      	ldr	r3, [pc, #128]	; (800146c <HAL_I2C_MspInit+0x118>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80013ee:	481f      	ldr	r0, [pc, #124]	; (800146c <HAL_I2C_MspInit+0x118>)
 80013f0:	f000 fbda 	bl	8001ba8 <HAL_DMA_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <HAL_I2C_MspInit+0xaa>
    {
      Error_Handler();
 80013fa:	f7ff ff73 	bl	80012e4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a1a      	ldr	r2, [pc, #104]	; (800146c <HAL_I2C_MspInit+0x118>)
 8001402:	635a      	str	r2, [r3, #52]	; 0x34
 8001404:	4a19      	ldr	r2, [pc, #100]	; (800146c <HAL_I2C_MspInit+0x118>)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel5;
 800140a:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <HAL_I2C_MspInit+0x120>)
 800140c:	4a1a      	ldr	r2, [pc, #104]	; (8001478 <HAL_I2C_MspInit+0x124>)
 800140e:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001410:	4b18      	ldr	r3, [pc, #96]	; (8001474 <HAL_I2C_MspInit+0x120>)
 8001412:	2200      	movs	r2, #0
 8001414:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001416:	4b17      	ldr	r3, [pc, #92]	; (8001474 <HAL_I2C_MspInit+0x120>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800141c:	4b15      	ldr	r3, [pc, #84]	; (8001474 <HAL_I2C_MspInit+0x120>)
 800141e:	2280      	movs	r2, #128	; 0x80
 8001420:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001422:	4b14      	ldr	r3, [pc, #80]	; (8001474 <HAL_I2C_MspInit+0x120>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <HAL_I2C_MspInit+0x120>)
 800142a:	2200      	movs	r2, #0
 800142c:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 800142e:	4b11      	ldr	r3, [pc, #68]	; (8001474 <HAL_I2C_MspInit+0x120>)
 8001430:	2200      	movs	r2, #0
 8001432:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <HAL_I2C_MspInit+0x120>)
 8001436:	2200      	movs	r2, #0
 8001438:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 800143a:	480e      	ldr	r0, [pc, #56]	; (8001474 <HAL_I2C_MspInit+0x120>)
 800143c:	f000 fbb4 	bl	8001ba8 <HAL_DMA_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <HAL_I2C_MspInit+0xf6>
    {
      Error_Handler();
 8001446:	f7ff ff4d 	bl	80012e4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a09      	ldr	r2, [pc, #36]	; (8001474 <HAL_I2C_MspInit+0x120>)
 800144e:	639a      	str	r2, [r3, #56]	; 0x38
 8001450:	4a08      	ldr	r2, [pc, #32]	; (8001474 <HAL_I2C_MspInit+0x120>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001456:	bf00      	nop
 8001458:	3720      	adds	r7, #32
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40005800 	.word	0x40005800
 8001464:	40021000 	.word	0x40021000
 8001468:	40010c00 	.word	0x40010c00
 800146c:	20000130 	.word	0x20000130
 8001470:	40020044 	.word	0x40020044
 8001474:	20000174 	.word	0x20000174
 8001478:	40020058 	.word	0x40020058

0800147c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08a      	sub	sp, #40	; 0x28
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 0318 	add.w	r3, r7, #24
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a2b      	ldr	r2, [pc, #172]	; (8001544 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d125      	bne.n	80014e8 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800149c:	4b2a      	ldr	r3, [pc, #168]	; (8001548 <HAL_TIM_Encoder_MspInit+0xcc>)
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	4a29      	ldr	r2, [pc, #164]	; (8001548 <HAL_TIM_Encoder_MspInit+0xcc>)
 80014a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014a6:	6193      	str	r3, [r2, #24]
 80014a8:	4b27      	ldr	r3, [pc, #156]	; (8001548 <HAL_TIM_Encoder_MspInit+0xcc>)
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014b0:	617b      	str	r3, [r7, #20]
 80014b2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b4:	4b24      	ldr	r3, [pc, #144]	; (8001548 <HAL_TIM_Encoder_MspInit+0xcc>)
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	4a23      	ldr	r2, [pc, #140]	; (8001548 <HAL_TIM_Encoder_MspInit+0xcc>)
 80014ba:	f043 0304 	orr.w	r3, r3, #4
 80014be:	6193      	str	r3, [r2, #24]
 80014c0:	4b21      	ldr	r3, [pc, #132]	; (8001548 <HAL_TIM_Encoder_MspInit+0xcc>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	f003 0304 	and.w	r3, r3, #4
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ECD_1A_Pin|ECD_1B_Pin;
 80014cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014da:	f107 0318 	add.w	r3, r7, #24
 80014de:	4619      	mov	r1, r3
 80014e0:	481a      	ldr	r0, [pc, #104]	; (800154c <HAL_TIM_Encoder_MspInit+0xd0>)
 80014e2:	f000 fcc1 	bl	8001e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014e6:	e028      	b.n	800153a <HAL_TIM_Encoder_MspInit+0xbe>
  else if(htim_encoder->Instance==TIM2)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014f0:	d123      	bne.n	800153a <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014f2:	4b15      	ldr	r3, [pc, #84]	; (8001548 <HAL_TIM_Encoder_MspInit+0xcc>)
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	4a14      	ldr	r2, [pc, #80]	; (8001548 <HAL_TIM_Encoder_MspInit+0xcc>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	61d3      	str	r3, [r2, #28]
 80014fe:	4b12      	ldr	r3, [pc, #72]	; (8001548 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150a:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <HAL_TIM_Encoder_MspInit+0xcc>)
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	4a0e      	ldr	r2, [pc, #56]	; (8001548 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001510:	f043 0304 	orr.w	r3, r3, #4
 8001514:	6193      	str	r3, [r2, #24]
 8001516:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	f003 0304 	and.w	r3, r3, #4
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ECD_2A_Pin|ECD_2B_Pin;
 8001522:	2303      	movs	r3, #3
 8001524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001526:	2300      	movs	r3, #0
 8001528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152e:	f107 0318 	add.w	r3, r7, #24
 8001532:	4619      	mov	r1, r3
 8001534:	4805      	ldr	r0, [pc, #20]	; (800154c <HAL_TIM_Encoder_MspInit+0xd0>)
 8001536:	f000 fc97 	bl	8001e68 <HAL_GPIO_Init>
}
 800153a:	bf00      	nop
 800153c:	3728      	adds	r7, #40	; 0x28
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40012c00 	.word	0x40012c00
 8001548:	40021000 	.word	0x40021000
 800154c:	40010800 	.word	0x40010800

08001550 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a12      	ldr	r2, [pc, #72]	; (80015a8 <HAL_TIM_PWM_MspInit+0x58>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d10c      	bne.n	800157c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001562:	4b12      	ldr	r3, [pc, #72]	; (80015ac <HAL_TIM_PWM_MspInit+0x5c>)
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	4a11      	ldr	r2, [pc, #68]	; (80015ac <HAL_TIM_PWM_MspInit+0x5c>)
 8001568:	f043 0302 	orr.w	r3, r3, #2
 800156c:	61d3      	str	r3, [r2, #28]
 800156e:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <HAL_TIM_PWM_MspInit+0x5c>)
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800157a:	e010      	b.n	800159e <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a0b      	ldr	r2, [pc, #44]	; (80015b0 <HAL_TIM_PWM_MspInit+0x60>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d10b      	bne.n	800159e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <HAL_TIM_PWM_MspInit+0x5c>)
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	4a08      	ldr	r2, [pc, #32]	; (80015ac <HAL_TIM_PWM_MspInit+0x5c>)
 800158c:	f043 0304 	orr.w	r3, r3, #4
 8001590:	61d3      	str	r3, [r2, #28]
 8001592:	4b06      	ldr	r3, [pc, #24]	; (80015ac <HAL_TIM_PWM_MspInit+0x5c>)
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	f003 0304 	and.w	r3, r3, #4
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]
}
 800159e:	bf00      	nop
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr
 80015a8:	40000400 	.word	0x40000400
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40000800 	.word	0x40000800

080015b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b088      	sub	sp, #32
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0310 	add.w	r3, r7, #16
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a1f      	ldr	r2, [pc, #124]	; (800164c <HAL_TIM_MspPostInit+0x98>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d118      	bne.n	8001606 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d4:	4b1e      	ldr	r3, [pc, #120]	; (8001650 <HAL_TIM_MspPostInit+0x9c>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	4a1d      	ldr	r2, [pc, #116]	; (8001650 <HAL_TIM_MspPostInit+0x9c>)
 80015da:	f043 0304 	orr.w	r3, r3, #4
 80015de:	6193      	str	r3, [r2, #24]
 80015e0:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <HAL_TIM_MspPostInit+0x9c>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWM_1A_Pin|PWM_1B_Pin;
 80015ec:	23c0      	movs	r3, #192	; 0xc0
 80015ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f0:	2302      	movs	r3, #2
 80015f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f4:	2302      	movs	r3, #2
 80015f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f8:	f107 0310 	add.w	r3, r7, #16
 80015fc:	4619      	mov	r1, r3
 80015fe:	4815      	ldr	r0, [pc, #84]	; (8001654 <HAL_TIM_MspPostInit+0xa0>)
 8001600:	f000 fc32 	bl	8001e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001604:	e01d      	b.n	8001642 <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM4)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a13      	ldr	r2, [pc, #76]	; (8001658 <HAL_TIM_MspPostInit+0xa4>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d118      	bne.n	8001642 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <HAL_TIM_MspPostInit+0x9c>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	4a0e      	ldr	r2, [pc, #56]	; (8001650 <HAL_TIM_MspPostInit+0x9c>)
 8001616:	f043 0308 	orr.w	r3, r3, #8
 800161a:	6193      	str	r3, [r2, #24]
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <HAL_TIM_MspPostInit+0x9c>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	f003 0308 	and.w	r3, r3, #8
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_2A_Pin|PWM_2B_Pin;
 8001628:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800162c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162e:	2302      	movs	r3, #2
 8001630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001632:	2302      	movs	r3, #2
 8001634:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001636:	f107 0310 	add.w	r3, r7, #16
 800163a:	4619      	mov	r1, r3
 800163c:	4807      	ldr	r0, [pc, #28]	; (800165c <HAL_TIM_MspPostInit+0xa8>)
 800163e:	f000 fc13 	bl	8001e68 <HAL_GPIO_Init>
}
 8001642:	bf00      	nop
 8001644:	3720      	adds	r7, #32
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40000400 	.word	0x40000400
 8001650:	40021000 	.word	0x40021000
 8001654:	40010800 	.word	0x40010800
 8001658:	40000800 	.word	0x40000800
 800165c:	40010c00 	.word	0x40010c00

08001660 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b088      	sub	sp, #32
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	f107 0310 	add.w	r3, r7, #16
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a1b      	ldr	r2, [pc, #108]	; (80016e8 <HAL_UART_MspInit+0x88>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d12f      	bne.n	80016e0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001680:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <HAL_UART_MspInit+0x8c>)
 8001682:	69db      	ldr	r3, [r3, #28]
 8001684:	4a19      	ldr	r2, [pc, #100]	; (80016ec <HAL_UART_MspInit+0x8c>)
 8001686:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800168a:	61d3      	str	r3, [r2, #28]
 800168c:	4b17      	ldr	r3, [pc, #92]	; (80016ec <HAL_UART_MspInit+0x8c>)
 800168e:	69db      	ldr	r3, [r3, #28]
 8001690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001698:	4b14      	ldr	r3, [pc, #80]	; (80016ec <HAL_UART_MspInit+0x8c>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	4a13      	ldr	r2, [pc, #76]	; (80016ec <HAL_UART_MspInit+0x8c>)
 800169e:	f043 0304 	orr.w	r3, r3, #4
 80016a2:	6193      	str	r3, [r2, #24]
 80016a4:	4b11      	ldr	r3, [pc, #68]	; (80016ec <HAL_UART_MspInit+0x8c>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = TX2_Pin;
 80016b0:	2304      	movs	r3, #4
 80016b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b4:	2302      	movs	r3, #2
 80016b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016b8:	2303      	movs	r3, #3
 80016ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TX2_GPIO_Port, &GPIO_InitStruct);
 80016bc:	f107 0310 	add.w	r3, r7, #16
 80016c0:	4619      	mov	r1, r3
 80016c2:	480b      	ldr	r0, [pc, #44]	; (80016f0 <HAL_UART_MspInit+0x90>)
 80016c4:	f000 fbd0 	bl	8001e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX2_Pin;
 80016c8:	2308      	movs	r3, #8
 80016ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(RX2_GPIO_Port, &GPIO_InitStruct);
 80016d4:	f107 0310 	add.w	r3, r7, #16
 80016d8:	4619      	mov	r1, r3
 80016da:	4805      	ldr	r0, [pc, #20]	; (80016f0 <HAL_UART_MspInit+0x90>)
 80016dc:	f000 fbc4 	bl	8001e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016e0:	bf00      	nop
 80016e2:	3720      	adds	r7, #32
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40004400 	.word	0x40004400
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40010800 	.word	0x40010800

080016f4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a09      	ldr	r2, [pc, #36]	; (8001728 <HAL_PCD_MspInit+0x34>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d10b      	bne.n	800171e <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001706:	4b09      	ldr	r3, [pc, #36]	; (800172c <HAL_PCD_MspInit+0x38>)
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	4a08      	ldr	r2, [pc, #32]	; (800172c <HAL_PCD_MspInit+0x38>)
 800170c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001710:	61d3      	str	r3, [r2, #28]
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <HAL_PCD_MspInit+0x38>)
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800171e:	bf00      	nop
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr
 8001728:	40005c00 	.word	0x40005c00
 800172c:	40021000 	.word	0x40021000

08001730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001734:	e7fe      	b.n	8001734 <NMI_Handler+0x4>

08001736 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800173a:	e7fe      	b.n	800173a <HardFault_Handler+0x4>

0800173c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001740:	e7fe      	b.n	8001740 <MemManage_Handler+0x4>

08001742 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001746:	e7fe      	b.n	8001746 <BusFault_Handler+0x4>

08001748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800174c:	e7fe      	b.n	800174c <UsageFault_Handler+0x4>

0800174e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr

0800175a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr

08001766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr

08001772 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001776:	f000 f8c9 	bl	800190c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001784:	4802      	ldr	r0, [pc, #8]	; (8001790 <DMA1_Channel4_IRQHandler+0x10>)
 8001786:	f000 fa69 	bl	8001c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000130 	.word	0x20000130

08001794 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001798:	4802      	ldr	r0, [pc, #8]	; (80017a4 <DMA1_Channel5_IRQHandler+0x10>)
 800179a:	f000 fa5f 	bl	8001c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000174 	.word	0x20000174

080017a8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80017ac:	4802      	ldr	r0, [pc, #8]	; (80017b8 <TIM4_IRQHandler+0x10>)
 80017ae:	f002 f826 	bl	80037fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000290 	.word	0x20000290

080017bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017c4:	4a14      	ldr	r2, [pc, #80]	; (8001818 <_sbrk+0x5c>)
 80017c6:	4b15      	ldr	r3, [pc, #84]	; (800181c <_sbrk+0x60>)
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017d0:	4b13      	ldr	r3, [pc, #76]	; (8001820 <_sbrk+0x64>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d102      	bne.n	80017de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <_sbrk+0x64>)
 80017da:	4a12      	ldr	r2, [pc, #72]	; (8001824 <_sbrk+0x68>)
 80017dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <_sbrk+0x64>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4413      	add	r3, r2
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d207      	bcs.n	80017fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017ec:	f002 fd92 	bl	8004314 <__errno>
 80017f0:	4603      	mov	r3, r0
 80017f2:	220c      	movs	r2, #12
 80017f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017f6:	f04f 33ff 	mov.w	r3, #4294967295
 80017fa:	e009      	b.n	8001810 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <_sbrk+0x64>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001802:	4b07      	ldr	r3, [pc, #28]	; (8001820 <_sbrk+0x64>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	4a05      	ldr	r2, [pc, #20]	; (8001820 <_sbrk+0x64>)
 800180c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800180e:	68fb      	ldr	r3, [r7, #12]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20005000 	.word	0x20005000
 800181c:	00000400 	.word	0x00000400
 8001820:	20000608 	.word	0x20000608
 8001824:	20000620 	.word	0x20000620

08001828 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr

08001834 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001834:	480c      	ldr	r0, [pc, #48]	; (8001868 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001836:	490d      	ldr	r1, [pc, #52]	; (800186c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001838:	4a0d      	ldr	r2, [pc, #52]	; (8001870 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800183a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800183c:	e002      	b.n	8001844 <LoopCopyDataInit>

0800183e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800183e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001842:	3304      	adds	r3, #4

08001844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001848:	d3f9      	bcc.n	800183e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800184a:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800184c:	4c0a      	ldr	r4, [pc, #40]	; (8001878 <LoopFillZerobss+0x22>)
  movs r3, #0
 800184e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001850:	e001      	b.n	8001856 <LoopFillZerobss>

08001852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001854:	3204      	adds	r2, #4

08001856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001858:	d3fb      	bcc.n	8001852 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800185a:	f7ff ffe5 	bl	8001828 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800185e:	f002 fd5f 	bl	8004320 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001862:	f7ff f9e1 	bl	8000c28 <main>
  bx lr
 8001866:	4770      	bx	lr
  ldr r0, =_sdata
 8001868:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800186c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001870:	08004d24 	.word	0x08004d24
  ldr r2, =_sbss
 8001874:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001878:	20000620 	.word	0x20000620

0800187c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800187c:	e7fe      	b.n	800187c <ADC1_2_IRQHandler>
	...

08001880 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001884:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <HAL_Init+0x28>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a07      	ldr	r2, [pc, #28]	; (80018a8 <HAL_Init+0x28>)
 800188a:	f043 0310 	orr.w	r3, r3, #16
 800188e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001890:	2003      	movs	r0, #3
 8001892:	f000 f947 	bl	8001b24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001896:	200f      	movs	r0, #15
 8001898:	f000 f808 	bl	80018ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800189c:	f7ff fd28 	bl	80012f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40022000 	.word	0x40022000

080018ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_InitTick+0x54>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <HAL_InitTick+0x58>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	4619      	mov	r1, r3
 80018be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 f95f 	bl	8001b8e <HAL_SYSTICK_Config>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e00e      	b.n	80018f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b0f      	cmp	r3, #15
 80018de:	d80a      	bhi.n	80018f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e0:	2200      	movs	r2, #0
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	f04f 30ff 	mov.w	r0, #4294967295
 80018e8:	f000 f927 	bl	8001b3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018ec:	4a06      	ldr	r2, [pc, #24]	; (8001908 <HAL_InitTick+0x5c>)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	e000      	b.n	80018f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20000000 	.word	0x20000000
 8001904:	20000008 	.word	0x20000008
 8001908:	20000004 	.word	0x20000004

0800190c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <HAL_IncTick+0x1c>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	461a      	mov	r2, r3
 8001916:	4b05      	ldr	r3, [pc, #20]	; (800192c <HAL_IncTick+0x20>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4413      	add	r3, r2
 800191c:	4a03      	ldr	r2, [pc, #12]	; (800192c <HAL_IncTick+0x20>)
 800191e:	6013      	str	r3, [r2, #0]
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr
 8001928:	20000008 	.word	0x20000008
 800192c:	2000060c 	.word	0x2000060c

08001930 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return uwTick;
 8001934:	4b02      	ldr	r3, [pc, #8]	; (8001940 <HAL_GetTick+0x10>)
 8001936:	681b      	ldr	r3, [r3, #0]
}
 8001938:	4618      	mov	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr
 8001940:	2000060c 	.word	0x2000060c

08001944 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800194c:	f7ff fff0 	bl	8001930 <HAL_GetTick>
 8001950:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800195c:	d005      	beq.n	800196a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800195e:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <HAL_Delay+0x44>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	461a      	mov	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4413      	add	r3, r2
 8001968:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800196a:	bf00      	nop
 800196c:	f7ff ffe0 	bl	8001930 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	429a      	cmp	r2, r3
 800197a:	d8f7      	bhi.n	800196c <HAL_Delay+0x28>
  {
  }
}
 800197c:	bf00      	nop
 800197e:	bf00      	nop
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000008 	.word	0x20000008

0800198c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <__NVIC_SetPriorityGrouping+0x44>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019a2:	68ba      	ldr	r2, [r7, #8]
 80019a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019a8:	4013      	ands	r3, r2
 80019aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019be:	4a04      	ldr	r2, [pc, #16]	; (80019d0 <__NVIC_SetPriorityGrouping+0x44>)
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	60d3      	str	r3, [r2, #12]
}
 80019c4:	bf00      	nop
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d8:	4b04      	ldr	r3, [pc, #16]	; (80019ec <__NVIC_GetPriorityGrouping+0x18>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	0a1b      	lsrs	r3, r3, #8
 80019de:	f003 0307 	and.w	r3, r3, #7
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	db0b      	blt.n	8001a1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	f003 021f 	and.w	r2, r3, #31
 8001a08:	4906      	ldr	r1, [pc, #24]	; (8001a24 <__NVIC_EnableIRQ+0x34>)
 8001a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0e:	095b      	lsrs	r3, r3, #5
 8001a10:	2001      	movs	r0, #1
 8001a12:	fa00 f202 	lsl.w	r2, r0, r2
 8001a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr
 8001a24:	e000e100 	.word	0xe000e100

08001a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	6039      	str	r1, [r7, #0]
 8001a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	db0a      	blt.n	8001a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	490c      	ldr	r1, [pc, #48]	; (8001a74 <__NVIC_SetPriority+0x4c>)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	0112      	lsls	r2, r2, #4
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a50:	e00a      	b.n	8001a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	4908      	ldr	r1, [pc, #32]	; (8001a78 <__NVIC_SetPriority+0x50>)
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	3b04      	subs	r3, #4
 8001a60:	0112      	lsls	r2, r2, #4
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	440b      	add	r3, r1
 8001a66:	761a      	strb	r2, [r3, #24]
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bc80      	pop	{r7}
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	e000e100 	.word	0xe000e100
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b089      	sub	sp, #36	; 0x24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f1c3 0307 	rsb	r3, r3, #7
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	bf28      	it	cs
 8001a9a:	2304      	movcs	r3, #4
 8001a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	2b06      	cmp	r3, #6
 8001aa4:	d902      	bls.n	8001aac <NVIC_EncodePriority+0x30>
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3b03      	subs	r3, #3
 8001aaa:	e000      	b.n	8001aae <NVIC_EncodePriority+0x32>
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43da      	mvns	r2, r3
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	401a      	ands	r2, r3
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ace:	43d9      	mvns	r1, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad4:	4313      	orrs	r3, r2
         );
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3724      	adds	r7, #36	; 0x24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr

08001ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001af0:	d301      	bcc.n	8001af6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001af2:	2301      	movs	r3, #1
 8001af4:	e00f      	b.n	8001b16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001af6:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <SysTick_Config+0x40>)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001afe:	210f      	movs	r1, #15
 8001b00:	f04f 30ff 	mov.w	r0, #4294967295
 8001b04:	f7ff ff90 	bl	8001a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <SysTick_Config+0x40>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b0e:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <SysTick_Config+0x40>)
 8001b10:	2207      	movs	r2, #7
 8001b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	e000e010 	.word	0xe000e010

08001b24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff ff2d 	bl	800198c <__NVIC_SetPriorityGrouping>
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b086      	sub	sp, #24
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	4603      	mov	r3, r0
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	607a      	str	r2, [r7, #4]
 8001b46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b4c:	f7ff ff42 	bl	80019d4 <__NVIC_GetPriorityGrouping>
 8001b50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	68b9      	ldr	r1, [r7, #8]
 8001b56:	6978      	ldr	r0, [r7, #20]
 8001b58:	f7ff ff90 	bl	8001a7c <NVIC_EncodePriority>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b62:	4611      	mov	r1, r2
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff ff5f 	bl	8001a28 <__NVIC_SetPriority>
}
 8001b6a:	bf00      	nop
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	4603      	mov	r3, r0
 8001b7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff ff35 	bl	80019f0 <__NVIC_EnableIRQ>
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff ffa2 	bl	8001ae0 <SysTick_Config>
 8001b9c:	4603      	mov	r3, r0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
	...

08001ba8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e043      	b.n	8001c46 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	4b22      	ldr	r3, [pc, #136]	; (8001c50 <HAL_DMA_Init+0xa8>)
 8001bc6:	4413      	add	r3, r2
 8001bc8:	4a22      	ldr	r2, [pc, #136]	; (8001c54 <HAL_DMA_Init+0xac>)
 8001bca:	fba2 2303 	umull	r2, r3, r2, r3
 8001bce:	091b      	lsrs	r3, r3, #4
 8001bd0:	009a      	lsls	r2, r3, #2
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a1f      	ldr	r2, [pc, #124]	; (8001c58 <HAL_DMA_Init+0xb0>)
 8001bda:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2202      	movs	r2, #2
 8001be0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001bf2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001bf6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001c00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr
 8001c50:	bffdfff8 	.word	0xbffdfff8
 8001c54:	cccccccd 	.word	0xcccccccd
 8001c58:	40020000 	.word	0x40020000

08001c5c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	2204      	movs	r2, #4
 8001c7a:	409a      	lsls	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d04f      	beq.n	8001d24 <HAL_DMA_IRQHandler+0xc8>
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	f003 0304 	and.w	r3, r3, #4
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d04a      	beq.n	8001d24 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0320 	and.w	r3, r3, #32
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d107      	bne.n	8001cac <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0204 	bic.w	r2, r2, #4
 8001caa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a66      	ldr	r2, [pc, #408]	; (8001e4c <HAL_DMA_IRQHandler+0x1f0>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d029      	beq.n	8001d0a <HAL_DMA_IRQHandler+0xae>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a65      	ldr	r2, [pc, #404]	; (8001e50 <HAL_DMA_IRQHandler+0x1f4>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d022      	beq.n	8001d06 <HAL_DMA_IRQHandler+0xaa>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a63      	ldr	r2, [pc, #396]	; (8001e54 <HAL_DMA_IRQHandler+0x1f8>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d01a      	beq.n	8001d00 <HAL_DMA_IRQHandler+0xa4>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a62      	ldr	r2, [pc, #392]	; (8001e58 <HAL_DMA_IRQHandler+0x1fc>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d012      	beq.n	8001cfa <HAL_DMA_IRQHandler+0x9e>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a60      	ldr	r2, [pc, #384]	; (8001e5c <HAL_DMA_IRQHandler+0x200>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d00a      	beq.n	8001cf4 <HAL_DMA_IRQHandler+0x98>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a5f      	ldr	r2, [pc, #380]	; (8001e60 <HAL_DMA_IRQHandler+0x204>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d102      	bne.n	8001cee <HAL_DMA_IRQHandler+0x92>
 8001ce8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001cec:	e00e      	b.n	8001d0c <HAL_DMA_IRQHandler+0xb0>
 8001cee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001cf2:	e00b      	b.n	8001d0c <HAL_DMA_IRQHandler+0xb0>
 8001cf4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001cf8:	e008      	b.n	8001d0c <HAL_DMA_IRQHandler+0xb0>
 8001cfa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cfe:	e005      	b.n	8001d0c <HAL_DMA_IRQHandler+0xb0>
 8001d00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d04:	e002      	b.n	8001d0c <HAL_DMA_IRQHandler+0xb0>
 8001d06:	2340      	movs	r3, #64	; 0x40
 8001d08:	e000      	b.n	8001d0c <HAL_DMA_IRQHandler+0xb0>
 8001d0a:	2304      	movs	r3, #4
 8001d0c:	4a55      	ldr	r2, [pc, #340]	; (8001e64 <HAL_DMA_IRQHandler+0x208>)
 8001d0e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 8094 	beq.w	8001e42 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001d22:	e08e      	b.n	8001e42 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	2202      	movs	r2, #2
 8001d2a:	409a      	lsls	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d056      	beq.n	8001de2 <HAL_DMA_IRQHandler+0x186>
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d051      	beq.n	8001de2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0320 	and.w	r3, r3, #32
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d10b      	bne.n	8001d64 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 020a 	bic.w	r2, r2, #10
 8001d5a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a38      	ldr	r2, [pc, #224]	; (8001e4c <HAL_DMA_IRQHandler+0x1f0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d029      	beq.n	8001dc2 <HAL_DMA_IRQHandler+0x166>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a37      	ldr	r2, [pc, #220]	; (8001e50 <HAL_DMA_IRQHandler+0x1f4>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d022      	beq.n	8001dbe <HAL_DMA_IRQHandler+0x162>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a35      	ldr	r2, [pc, #212]	; (8001e54 <HAL_DMA_IRQHandler+0x1f8>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d01a      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x15c>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a34      	ldr	r2, [pc, #208]	; (8001e58 <HAL_DMA_IRQHandler+0x1fc>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d012      	beq.n	8001db2 <HAL_DMA_IRQHandler+0x156>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a32      	ldr	r2, [pc, #200]	; (8001e5c <HAL_DMA_IRQHandler+0x200>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d00a      	beq.n	8001dac <HAL_DMA_IRQHandler+0x150>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a31      	ldr	r2, [pc, #196]	; (8001e60 <HAL_DMA_IRQHandler+0x204>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d102      	bne.n	8001da6 <HAL_DMA_IRQHandler+0x14a>
 8001da0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001da4:	e00e      	b.n	8001dc4 <HAL_DMA_IRQHandler+0x168>
 8001da6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001daa:	e00b      	b.n	8001dc4 <HAL_DMA_IRQHandler+0x168>
 8001dac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001db0:	e008      	b.n	8001dc4 <HAL_DMA_IRQHandler+0x168>
 8001db2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001db6:	e005      	b.n	8001dc4 <HAL_DMA_IRQHandler+0x168>
 8001db8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dbc:	e002      	b.n	8001dc4 <HAL_DMA_IRQHandler+0x168>
 8001dbe:	2320      	movs	r3, #32
 8001dc0:	e000      	b.n	8001dc4 <HAL_DMA_IRQHandler+0x168>
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	4a27      	ldr	r2, [pc, #156]	; (8001e64 <HAL_DMA_IRQHandler+0x208>)
 8001dc6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d034      	beq.n	8001e42 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001de0:	e02f      	b.n	8001e42 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	2208      	movs	r2, #8
 8001de8:	409a      	lsls	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	4013      	ands	r3, r2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d028      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x1e8>
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	f003 0308 	and.w	r3, r3, #8
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d023      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 020e 	bic.w	r2, r2, #14
 8001e0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e14:	2101      	movs	r1, #1
 8001e16:	fa01 f202 	lsl.w	r2, r1, r2
 8001e1a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d004      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	4798      	blx	r3
    }
  }
  return;
 8001e42:	bf00      	nop
 8001e44:	bf00      	nop
}
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40020008 	.word	0x40020008
 8001e50:	4002001c 	.word	0x4002001c
 8001e54:	40020030 	.word	0x40020030
 8001e58:	40020044 	.word	0x40020044
 8001e5c:	40020058 	.word	0x40020058
 8001e60:	4002006c 	.word	0x4002006c
 8001e64:	40020000 	.word	0x40020000

08001e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b08b      	sub	sp, #44	; 0x2c
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e72:	2300      	movs	r3, #0
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e76:	2300      	movs	r3, #0
 8001e78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e7a:	e169      	b.n	8002150 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	69fa      	ldr	r2, [r7, #28]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	f040 8158 	bne.w	800214a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	4a9a      	ldr	r2, [pc, #616]	; (8002108 <HAL_GPIO_Init+0x2a0>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d05e      	beq.n	8001f62 <HAL_GPIO_Init+0xfa>
 8001ea4:	4a98      	ldr	r2, [pc, #608]	; (8002108 <HAL_GPIO_Init+0x2a0>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d875      	bhi.n	8001f96 <HAL_GPIO_Init+0x12e>
 8001eaa:	4a98      	ldr	r2, [pc, #608]	; (800210c <HAL_GPIO_Init+0x2a4>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d058      	beq.n	8001f62 <HAL_GPIO_Init+0xfa>
 8001eb0:	4a96      	ldr	r2, [pc, #600]	; (800210c <HAL_GPIO_Init+0x2a4>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d86f      	bhi.n	8001f96 <HAL_GPIO_Init+0x12e>
 8001eb6:	4a96      	ldr	r2, [pc, #600]	; (8002110 <HAL_GPIO_Init+0x2a8>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d052      	beq.n	8001f62 <HAL_GPIO_Init+0xfa>
 8001ebc:	4a94      	ldr	r2, [pc, #592]	; (8002110 <HAL_GPIO_Init+0x2a8>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d869      	bhi.n	8001f96 <HAL_GPIO_Init+0x12e>
 8001ec2:	4a94      	ldr	r2, [pc, #592]	; (8002114 <HAL_GPIO_Init+0x2ac>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d04c      	beq.n	8001f62 <HAL_GPIO_Init+0xfa>
 8001ec8:	4a92      	ldr	r2, [pc, #584]	; (8002114 <HAL_GPIO_Init+0x2ac>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d863      	bhi.n	8001f96 <HAL_GPIO_Init+0x12e>
 8001ece:	4a92      	ldr	r2, [pc, #584]	; (8002118 <HAL_GPIO_Init+0x2b0>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d046      	beq.n	8001f62 <HAL_GPIO_Init+0xfa>
 8001ed4:	4a90      	ldr	r2, [pc, #576]	; (8002118 <HAL_GPIO_Init+0x2b0>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d85d      	bhi.n	8001f96 <HAL_GPIO_Init+0x12e>
 8001eda:	2b12      	cmp	r3, #18
 8001edc:	d82a      	bhi.n	8001f34 <HAL_GPIO_Init+0xcc>
 8001ede:	2b12      	cmp	r3, #18
 8001ee0:	d859      	bhi.n	8001f96 <HAL_GPIO_Init+0x12e>
 8001ee2:	a201      	add	r2, pc, #4	; (adr r2, 8001ee8 <HAL_GPIO_Init+0x80>)
 8001ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee8:	08001f63 	.word	0x08001f63
 8001eec:	08001f3d 	.word	0x08001f3d
 8001ef0:	08001f4f 	.word	0x08001f4f
 8001ef4:	08001f91 	.word	0x08001f91
 8001ef8:	08001f97 	.word	0x08001f97
 8001efc:	08001f97 	.word	0x08001f97
 8001f00:	08001f97 	.word	0x08001f97
 8001f04:	08001f97 	.word	0x08001f97
 8001f08:	08001f97 	.word	0x08001f97
 8001f0c:	08001f97 	.word	0x08001f97
 8001f10:	08001f97 	.word	0x08001f97
 8001f14:	08001f97 	.word	0x08001f97
 8001f18:	08001f97 	.word	0x08001f97
 8001f1c:	08001f97 	.word	0x08001f97
 8001f20:	08001f97 	.word	0x08001f97
 8001f24:	08001f97 	.word	0x08001f97
 8001f28:	08001f97 	.word	0x08001f97
 8001f2c:	08001f45 	.word	0x08001f45
 8001f30:	08001f59 	.word	0x08001f59
 8001f34:	4a79      	ldr	r2, [pc, #484]	; (800211c <HAL_GPIO_Init+0x2b4>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d013      	beq.n	8001f62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f3a:	e02c      	b.n	8001f96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	623b      	str	r3, [r7, #32]
          break;
 8001f42:	e029      	b.n	8001f98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	3304      	adds	r3, #4
 8001f4a:	623b      	str	r3, [r7, #32]
          break;
 8001f4c:	e024      	b.n	8001f98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	3308      	adds	r3, #8
 8001f54:	623b      	str	r3, [r7, #32]
          break;
 8001f56:	e01f      	b.n	8001f98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	330c      	adds	r3, #12
 8001f5e:	623b      	str	r3, [r7, #32]
          break;
 8001f60:	e01a      	b.n	8001f98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d102      	bne.n	8001f70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f6a:	2304      	movs	r3, #4
 8001f6c:	623b      	str	r3, [r7, #32]
          break;
 8001f6e:	e013      	b.n	8001f98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d105      	bne.n	8001f84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f78:	2308      	movs	r3, #8
 8001f7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	69fa      	ldr	r2, [r7, #28]
 8001f80:	611a      	str	r2, [r3, #16]
          break;
 8001f82:	e009      	b.n	8001f98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f84:	2308      	movs	r3, #8
 8001f86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69fa      	ldr	r2, [r7, #28]
 8001f8c:	615a      	str	r2, [r3, #20]
          break;
 8001f8e:	e003      	b.n	8001f98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f90:	2300      	movs	r3, #0
 8001f92:	623b      	str	r3, [r7, #32]
          break;
 8001f94:	e000      	b.n	8001f98 <HAL_GPIO_Init+0x130>
          break;
 8001f96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	2bff      	cmp	r3, #255	; 0xff
 8001f9c:	d801      	bhi.n	8001fa2 <HAL_GPIO_Init+0x13a>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	e001      	b.n	8001fa6 <HAL_GPIO_Init+0x13e>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	2bff      	cmp	r3, #255	; 0xff
 8001fac:	d802      	bhi.n	8001fb4 <HAL_GPIO_Init+0x14c>
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	e002      	b.n	8001fba <HAL_GPIO_Init+0x152>
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	3b08      	subs	r3, #8
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	210f      	movs	r1, #15
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	401a      	ands	r2, r3
 8001fcc:	6a39      	ldr	r1, [r7, #32]
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 80b1 	beq.w	800214a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fe8:	4b4d      	ldr	r3, [pc, #308]	; (8002120 <HAL_GPIO_Init+0x2b8>)
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	4a4c      	ldr	r2, [pc, #304]	; (8002120 <HAL_GPIO_Init+0x2b8>)
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	6193      	str	r3, [r2, #24]
 8001ff4:	4b4a      	ldr	r3, [pc, #296]	; (8002120 <HAL_GPIO_Init+0x2b8>)
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002000:	4a48      	ldr	r2, [pc, #288]	; (8002124 <HAL_GPIO_Init+0x2bc>)
 8002002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002004:	089b      	lsrs	r3, r3, #2
 8002006:	3302      	adds	r3, #2
 8002008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800200c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	f003 0303 	and.w	r3, r3, #3
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	220f      	movs	r2, #15
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	4013      	ands	r3, r2
 8002022:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a40      	ldr	r2, [pc, #256]	; (8002128 <HAL_GPIO_Init+0x2c0>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d013      	beq.n	8002054 <HAL_GPIO_Init+0x1ec>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a3f      	ldr	r2, [pc, #252]	; (800212c <HAL_GPIO_Init+0x2c4>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d00d      	beq.n	8002050 <HAL_GPIO_Init+0x1e8>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a3e      	ldr	r2, [pc, #248]	; (8002130 <HAL_GPIO_Init+0x2c8>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d007      	beq.n	800204c <HAL_GPIO_Init+0x1e4>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a3d      	ldr	r2, [pc, #244]	; (8002134 <HAL_GPIO_Init+0x2cc>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d101      	bne.n	8002048 <HAL_GPIO_Init+0x1e0>
 8002044:	2303      	movs	r3, #3
 8002046:	e006      	b.n	8002056 <HAL_GPIO_Init+0x1ee>
 8002048:	2304      	movs	r3, #4
 800204a:	e004      	b.n	8002056 <HAL_GPIO_Init+0x1ee>
 800204c:	2302      	movs	r3, #2
 800204e:	e002      	b.n	8002056 <HAL_GPIO_Init+0x1ee>
 8002050:	2301      	movs	r3, #1
 8002052:	e000      	b.n	8002056 <HAL_GPIO_Init+0x1ee>
 8002054:	2300      	movs	r3, #0
 8002056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002058:	f002 0203 	and.w	r2, r2, #3
 800205c:	0092      	lsls	r2, r2, #2
 800205e:	4093      	lsls	r3, r2
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	4313      	orrs	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002066:	492f      	ldr	r1, [pc, #188]	; (8002124 <HAL_GPIO_Init+0x2bc>)
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	089b      	lsrs	r3, r3, #2
 800206c:	3302      	adds	r3, #2
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d006      	beq.n	800208e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002080:	4b2d      	ldr	r3, [pc, #180]	; (8002138 <HAL_GPIO_Init+0x2d0>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	492c      	ldr	r1, [pc, #176]	; (8002138 <HAL_GPIO_Init+0x2d0>)
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	4313      	orrs	r3, r2
 800208a:	600b      	str	r3, [r1, #0]
 800208c:	e006      	b.n	800209c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800208e:	4b2a      	ldr	r3, [pc, #168]	; (8002138 <HAL_GPIO_Init+0x2d0>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	43db      	mvns	r3, r3
 8002096:	4928      	ldr	r1, [pc, #160]	; (8002138 <HAL_GPIO_Init+0x2d0>)
 8002098:	4013      	ands	r3, r2
 800209a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d006      	beq.n	80020b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020a8:	4b23      	ldr	r3, [pc, #140]	; (8002138 <HAL_GPIO_Init+0x2d0>)
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	4922      	ldr	r1, [pc, #136]	; (8002138 <HAL_GPIO_Init+0x2d0>)
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	604b      	str	r3, [r1, #4]
 80020b4:	e006      	b.n	80020c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020b6:	4b20      	ldr	r3, [pc, #128]	; (8002138 <HAL_GPIO_Init+0x2d0>)
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	43db      	mvns	r3, r3
 80020be:	491e      	ldr	r1, [pc, #120]	; (8002138 <HAL_GPIO_Init+0x2d0>)
 80020c0:	4013      	ands	r3, r2
 80020c2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d006      	beq.n	80020de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020d0:	4b19      	ldr	r3, [pc, #100]	; (8002138 <HAL_GPIO_Init+0x2d0>)
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	4918      	ldr	r1, [pc, #96]	; (8002138 <HAL_GPIO_Init+0x2d0>)
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	4313      	orrs	r3, r2
 80020da:	608b      	str	r3, [r1, #8]
 80020dc:	e006      	b.n	80020ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020de:	4b16      	ldr	r3, [pc, #88]	; (8002138 <HAL_GPIO_Init+0x2d0>)
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	43db      	mvns	r3, r3
 80020e6:	4914      	ldr	r1, [pc, #80]	; (8002138 <HAL_GPIO_Init+0x2d0>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d021      	beq.n	800213c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020f8:	4b0f      	ldr	r3, [pc, #60]	; (8002138 <HAL_GPIO_Init+0x2d0>)
 80020fa:	68da      	ldr	r2, [r3, #12]
 80020fc:	490e      	ldr	r1, [pc, #56]	; (8002138 <HAL_GPIO_Init+0x2d0>)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	4313      	orrs	r3, r2
 8002102:	60cb      	str	r3, [r1, #12]
 8002104:	e021      	b.n	800214a <HAL_GPIO_Init+0x2e2>
 8002106:	bf00      	nop
 8002108:	10320000 	.word	0x10320000
 800210c:	10310000 	.word	0x10310000
 8002110:	10220000 	.word	0x10220000
 8002114:	10210000 	.word	0x10210000
 8002118:	10120000 	.word	0x10120000
 800211c:	10110000 	.word	0x10110000
 8002120:	40021000 	.word	0x40021000
 8002124:	40010000 	.word	0x40010000
 8002128:	40010800 	.word	0x40010800
 800212c:	40010c00 	.word	0x40010c00
 8002130:	40011000 	.word	0x40011000
 8002134:	40011400 	.word	0x40011400
 8002138:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800213c:	4b0b      	ldr	r3, [pc, #44]	; (800216c <HAL_GPIO_Init+0x304>)
 800213e:	68da      	ldr	r2, [r3, #12]
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	43db      	mvns	r3, r3
 8002144:	4909      	ldr	r1, [pc, #36]	; (800216c <HAL_GPIO_Init+0x304>)
 8002146:	4013      	ands	r3, r2
 8002148:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	3301      	adds	r3, #1
 800214e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	fa22 f303 	lsr.w	r3, r2, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	f47f ae8e 	bne.w	8001e7c <HAL_GPIO_Init+0x14>
  }
}
 8002160:	bf00      	nop
 8002162:	bf00      	nop
 8002164:	372c      	adds	r7, #44	; 0x2c
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr
 800216c:	40010400 	.word	0x40010400

08002170 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	460b      	mov	r3, r1
 800217a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	887b      	ldrh	r3, [r7, #2]
 8002182:	4013      	ands	r3, r2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d002      	beq.n	800218e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002188:	2301      	movs	r3, #1
 800218a:	73fb      	strb	r3, [r7, #15]
 800218c:	e001      	b.n	8002192 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800218e:	2300      	movs	r3, #0
 8002190:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002192:	7bfb      	ldrb	r3, [r7, #15]
}
 8002194:	4618      	mov	r0, r3
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr

0800219e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
 80021a6:	460b      	mov	r3, r1
 80021a8:	807b      	strh	r3, [r7, #2]
 80021aa:	4613      	mov	r3, r2
 80021ac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021ae:	787b      	ldrb	r3, [r7, #1]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021b4:	887a      	ldrh	r2, [r7, #2]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021ba:	e003      	b.n	80021c4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021bc:	887b      	ldrh	r3, [r7, #2]
 80021be:	041a      	lsls	r2, r3, #16
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	611a      	str	r2, [r3, #16]
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc80      	pop	{r7}
 80021cc:	4770      	bx	lr
	...

080021d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e12b      	b.n	800243a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d106      	bne.n	80021fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff f8ac 	bl	8001354 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2224      	movs	r2, #36	; 0x24
 8002200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 0201 	bic.w	r2, r2, #1
 8002212:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002222:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002232:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002234:	f001 f8f6 	bl	8003424 <HAL_RCC_GetPCLK1Freq>
 8002238:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	4a81      	ldr	r2, [pc, #516]	; (8002444 <HAL_I2C_Init+0x274>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d807      	bhi.n	8002254 <HAL_I2C_Init+0x84>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4a80      	ldr	r2, [pc, #512]	; (8002448 <HAL_I2C_Init+0x278>)
 8002248:	4293      	cmp	r3, r2
 800224a:	bf94      	ite	ls
 800224c:	2301      	movls	r3, #1
 800224e:	2300      	movhi	r3, #0
 8002250:	b2db      	uxtb	r3, r3
 8002252:	e006      	b.n	8002262 <HAL_I2C_Init+0x92>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4a7d      	ldr	r2, [pc, #500]	; (800244c <HAL_I2C_Init+0x27c>)
 8002258:	4293      	cmp	r3, r2
 800225a:	bf94      	ite	ls
 800225c:	2301      	movls	r3, #1
 800225e:	2300      	movhi	r3, #0
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e0e7      	b.n	800243a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	4a78      	ldr	r2, [pc, #480]	; (8002450 <HAL_I2C_Init+0x280>)
 800226e:	fba2 2303 	umull	r2, r3, r2, r3
 8002272:	0c9b      	lsrs	r3, r3, #18
 8002274:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68ba      	ldr	r2, [r7, #8]
 8002286:	430a      	orrs	r2, r1
 8002288:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	4a6a      	ldr	r2, [pc, #424]	; (8002444 <HAL_I2C_Init+0x274>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d802      	bhi.n	80022a4 <HAL_I2C_Init+0xd4>
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	3301      	adds	r3, #1
 80022a2:	e009      	b.n	80022b8 <HAL_I2C_Init+0xe8>
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022aa:	fb02 f303 	mul.w	r3, r2, r3
 80022ae:	4a69      	ldr	r2, [pc, #420]	; (8002454 <HAL_I2C_Init+0x284>)
 80022b0:	fba2 2303 	umull	r2, r3, r2, r3
 80022b4:	099b      	lsrs	r3, r3, #6
 80022b6:	3301      	adds	r3, #1
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	6812      	ldr	r2, [r2, #0]
 80022bc:	430b      	orrs	r3, r1
 80022be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	495c      	ldr	r1, [pc, #368]	; (8002444 <HAL_I2C_Init+0x274>)
 80022d4:	428b      	cmp	r3, r1
 80022d6:	d819      	bhi.n	800230c <HAL_I2C_Init+0x13c>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	1e59      	subs	r1, r3, #1
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80022e6:	1c59      	adds	r1, r3, #1
 80022e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022ec:	400b      	ands	r3, r1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00a      	beq.n	8002308 <HAL_I2C_Init+0x138>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	1e59      	subs	r1, r3, #1
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002300:	3301      	adds	r3, #1
 8002302:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002306:	e051      	b.n	80023ac <HAL_I2C_Init+0x1dc>
 8002308:	2304      	movs	r3, #4
 800230a:	e04f      	b.n	80023ac <HAL_I2C_Init+0x1dc>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d111      	bne.n	8002338 <HAL_I2C_Init+0x168>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	1e58      	subs	r0, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6859      	ldr	r1, [r3, #4]
 800231c:	460b      	mov	r3, r1
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	440b      	add	r3, r1
 8002322:	fbb0 f3f3 	udiv	r3, r0, r3
 8002326:	3301      	adds	r3, #1
 8002328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800232c:	2b00      	cmp	r3, #0
 800232e:	bf0c      	ite	eq
 8002330:	2301      	moveq	r3, #1
 8002332:	2300      	movne	r3, #0
 8002334:	b2db      	uxtb	r3, r3
 8002336:	e012      	b.n	800235e <HAL_I2C_Init+0x18e>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	1e58      	subs	r0, r3, #1
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6859      	ldr	r1, [r3, #4]
 8002340:	460b      	mov	r3, r1
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	0099      	lsls	r1, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	fbb0 f3f3 	udiv	r3, r0, r3
 800234e:	3301      	adds	r3, #1
 8002350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002354:	2b00      	cmp	r3, #0
 8002356:	bf0c      	ite	eq
 8002358:	2301      	moveq	r3, #1
 800235a:	2300      	movne	r3, #0
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <HAL_I2C_Init+0x196>
 8002362:	2301      	movs	r3, #1
 8002364:	e022      	b.n	80023ac <HAL_I2C_Init+0x1dc>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10e      	bne.n	800238c <HAL_I2C_Init+0x1bc>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	1e58      	subs	r0, r3, #1
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6859      	ldr	r1, [r3, #4]
 8002376:	460b      	mov	r3, r1
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	440b      	add	r3, r1
 800237c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002380:	3301      	adds	r3, #1
 8002382:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800238a:	e00f      	b.n	80023ac <HAL_I2C_Init+0x1dc>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	1e58      	subs	r0, r3, #1
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6859      	ldr	r1, [r3, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	0099      	lsls	r1, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	fbb0 f3f3 	udiv	r3, r0, r3
 80023a2:	3301      	adds	r3, #1
 80023a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	6809      	ldr	r1, [r1, #0]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69da      	ldr	r2, [r3, #28]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	431a      	orrs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	430a      	orrs	r2, r1
 80023ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	6911      	ldr	r1, [r2, #16]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	68d2      	ldr	r2, [r2, #12]
 80023e6:	4311      	orrs	r1, r2
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6812      	ldr	r2, [r2, #0]
 80023ec:	430b      	orrs	r3, r1
 80023ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695a      	ldr	r2, [r3, #20]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	430a      	orrs	r2, r1
 800240a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0201 	orr.w	r2, r2, #1
 800241a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2220      	movs	r2, #32
 8002426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	000186a0 	.word	0x000186a0
 8002448:	001e847f 	.word	0x001e847f
 800244c:	003d08ff 	.word	0x003d08ff
 8002450:	431bde83 	.word	0x431bde83
 8002454:	10624dd3 	.word	0x10624dd3

08002458 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b088      	sub	sp, #32
 800245c:	af02      	add	r7, sp, #8
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	607a      	str	r2, [r7, #4]
 8002462:	461a      	mov	r2, r3
 8002464:	460b      	mov	r3, r1
 8002466:	817b      	strh	r3, [r7, #10]
 8002468:	4613      	mov	r3, r2
 800246a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800246c:	f7ff fa60 	bl	8001930 <HAL_GetTick>
 8002470:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b20      	cmp	r3, #32
 800247c:	f040 80e0 	bne.w	8002640 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	2319      	movs	r3, #25
 8002486:	2201      	movs	r2, #1
 8002488:	4970      	ldr	r1, [pc, #448]	; (800264c <HAL_I2C_Master_Transmit+0x1f4>)
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f000 f964 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002496:	2302      	movs	r3, #2
 8002498:	e0d3      	b.n	8002642 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d101      	bne.n	80024a8 <HAL_I2C_Master_Transmit+0x50>
 80024a4:	2302      	movs	r3, #2
 80024a6:	e0cc      	b.n	8002642 <HAL_I2C_Master_Transmit+0x1ea>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d007      	beq.n	80024ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f042 0201 	orr.w	r2, r2, #1
 80024cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2221      	movs	r2, #33	; 0x21
 80024e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2210      	movs	r2, #16
 80024ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	893a      	ldrh	r2, [r7, #8]
 80024fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002504:	b29a      	uxth	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	4a50      	ldr	r2, [pc, #320]	; (8002650 <HAL_I2C_Master_Transmit+0x1f8>)
 800250e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002510:	8979      	ldrh	r1, [r7, #10]
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	6a3a      	ldr	r2, [r7, #32]
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 f89c 	bl	8002654 <I2C_MasterRequestWrite>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e08d      	b.n	8002642 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002526:	2300      	movs	r3, #0
 8002528:	613b      	str	r3, [r7, #16]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	613b      	str	r3, [r7, #16]
 800253a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800253c:	e066      	b.n	800260c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	6a39      	ldr	r1, [r7, #32]
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 f9de 	bl	8002904 <I2C_WaitOnTXEFlagUntilTimeout>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00d      	beq.n	800256a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	2b04      	cmp	r3, #4
 8002554:	d107      	bne.n	8002566 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002564:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e06b      	b.n	8002642 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	781a      	ldrb	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	1c5a      	adds	r2, r3, #1
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002584:	b29b      	uxth	r3, r3
 8002586:	3b01      	subs	r3, #1
 8002588:	b29a      	uxth	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002592:	3b01      	subs	r3, #1
 8002594:	b29a      	uxth	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	2b04      	cmp	r3, #4
 80025a6:	d11b      	bne.n	80025e0 <HAL_I2C_Master_Transmit+0x188>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d017      	beq.n	80025e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	781a      	ldrb	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	1c5a      	adds	r2, r3, #1
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	3b01      	subs	r3, #1
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d8:	3b01      	subs	r3, #1
 80025da:	b29a      	uxth	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	6a39      	ldr	r1, [r7, #32]
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f000 f9ce 	bl	8002986 <I2C_WaitOnBTFFlagUntilTimeout>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00d      	beq.n	800260c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f4:	2b04      	cmp	r3, #4
 80025f6:	d107      	bne.n	8002608 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002606:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e01a      	b.n	8002642 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002610:	2b00      	cmp	r3, #0
 8002612:	d194      	bne.n	800253e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002622:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2220      	movs	r2, #32
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800263c:	2300      	movs	r3, #0
 800263e:	e000      	b.n	8002642 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002640:	2302      	movs	r3, #2
  }
}
 8002642:	4618      	mov	r0, r3
 8002644:	3718      	adds	r7, #24
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	00100002 	.word	0x00100002
 8002650:	ffff0000 	.word	0xffff0000

08002654 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b088      	sub	sp, #32
 8002658:	af02      	add	r7, sp, #8
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	607a      	str	r2, [r7, #4]
 800265e:	603b      	str	r3, [r7, #0]
 8002660:	460b      	mov	r3, r1
 8002662:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002668:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	2b08      	cmp	r3, #8
 800266e:	d006      	beq.n	800267e <I2C_MasterRequestWrite+0x2a>
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d003      	beq.n	800267e <I2C_MasterRequestWrite+0x2a>
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800267c:	d108      	bne.n	8002690 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	e00b      	b.n	80026a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002694:	2b12      	cmp	r3, #18
 8002696:	d107      	bne.n	80026a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f000 f84f 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00d      	beq.n	80026dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026ce:	d103      	bne.n	80026d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e035      	b.n	8002748 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026e4:	d108      	bne.n	80026f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026e6:	897b      	ldrh	r3, [r7, #10]
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	461a      	mov	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80026f4:	611a      	str	r2, [r3, #16]
 80026f6:	e01b      	b.n	8002730 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80026f8:	897b      	ldrh	r3, [r7, #10]
 80026fa:	11db      	asrs	r3, r3, #7
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	f003 0306 	and.w	r3, r3, #6
 8002702:	b2db      	uxtb	r3, r3
 8002704:	f063 030f 	orn	r3, r3, #15
 8002708:	b2da      	uxtb	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	490e      	ldr	r1, [pc, #56]	; (8002750 <I2C_MasterRequestWrite+0xfc>)
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 f875 	bl	8002806 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e010      	b.n	8002748 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002726:	897b      	ldrh	r3, [r7, #10]
 8002728:	b2da      	uxtb	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	4907      	ldr	r1, [pc, #28]	; (8002754 <I2C_MasterRequestWrite+0x100>)
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 f865 	bl	8002806 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e000      	b.n	8002748 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	00010008 	.word	0x00010008
 8002754:	00010002 	.word	0x00010002

08002758 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	603b      	str	r3, [r7, #0]
 8002764:	4613      	mov	r3, r2
 8002766:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002768:	e025      	b.n	80027b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002770:	d021      	beq.n	80027b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002772:	f7ff f8dd 	bl	8001930 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	429a      	cmp	r2, r3
 8002780:	d302      	bcc.n	8002788 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d116      	bne.n	80027b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2220      	movs	r2, #32
 8002792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	f043 0220 	orr.w	r2, r3, #32
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e023      	b.n	80027fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	0c1b      	lsrs	r3, r3, #16
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d10d      	bne.n	80027dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	43da      	mvns	r2, r3
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	4013      	ands	r3, r2
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	bf0c      	ite	eq
 80027d2:	2301      	moveq	r3, #1
 80027d4:	2300      	movne	r3, #0
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	461a      	mov	r2, r3
 80027da:	e00c      	b.n	80027f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	43da      	mvns	r2, r3
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	4013      	ands	r3, r2
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	bf0c      	ite	eq
 80027ee:	2301      	moveq	r3, #1
 80027f0:	2300      	movne	r3, #0
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	461a      	mov	r2, r3
 80027f6:	79fb      	ldrb	r3, [r7, #7]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d0b6      	beq.n	800276a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b084      	sub	sp, #16
 800280a:	af00      	add	r7, sp, #0
 800280c:	60f8      	str	r0, [r7, #12]
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	607a      	str	r2, [r7, #4]
 8002812:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002814:	e051      	b.n	80028ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002824:	d123      	bne.n	800286e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002834:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800283e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2220      	movs	r2, #32
 800284a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f043 0204 	orr.w	r2, r3, #4
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e046      	b.n	80028fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002874:	d021      	beq.n	80028ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002876:	f7ff f85b 	bl	8001930 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	429a      	cmp	r2, r3
 8002884:	d302      	bcc.n	800288c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d116      	bne.n	80028ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2220      	movs	r2, #32
 8002896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	f043 0220 	orr.w	r2, r3, #32
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e020      	b.n	80028fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	0c1b      	lsrs	r3, r3, #16
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d10c      	bne.n	80028de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	43da      	mvns	r2, r3
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	4013      	ands	r3, r2
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	bf14      	ite	ne
 80028d6:	2301      	movne	r3, #1
 80028d8:	2300      	moveq	r3, #0
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	e00b      	b.n	80028f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	43da      	mvns	r2, r3
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	4013      	ands	r3, r2
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	bf14      	ite	ne
 80028f0:	2301      	movne	r3, #1
 80028f2:	2300      	moveq	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d18d      	bne.n	8002816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002910:	e02d      	b.n	800296e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 f878 	bl	8002a08 <I2C_IsAcknowledgeFailed>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e02d      	b.n	800297e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002928:	d021      	beq.n	800296e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800292a:	f7ff f801 	bl	8001930 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	68ba      	ldr	r2, [r7, #8]
 8002936:	429a      	cmp	r2, r3
 8002938:	d302      	bcc.n	8002940 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d116      	bne.n	800296e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2220      	movs	r2, #32
 800294a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	f043 0220 	orr.w	r2, r3, #32
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e007      	b.n	800297e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002978:	2b80      	cmp	r3, #128	; 0x80
 800297a:	d1ca      	bne.n	8002912 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b084      	sub	sp, #16
 800298a:	af00      	add	r7, sp, #0
 800298c:	60f8      	str	r0, [r7, #12]
 800298e:	60b9      	str	r1, [r7, #8]
 8002990:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002992:	e02d      	b.n	80029f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f000 f837 	bl	8002a08 <I2C_IsAcknowledgeFailed>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e02d      	b.n	8002a00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029aa:	d021      	beq.n	80029f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ac:	f7fe ffc0 	bl	8001930 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	68ba      	ldr	r2, [r7, #8]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d302      	bcc.n	80029c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d116      	bne.n	80029f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2220      	movs	r2, #32
 80029cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	f043 0220 	orr.w	r2, r3, #32
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e007      	b.n	8002a00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	f003 0304 	and.w	r3, r3, #4
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d1ca      	bne.n	8002994 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a1e:	d11b      	bne.n	8002a58 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a28:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	f043 0204 	orr.w	r2, r3, #4
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e000      	b.n	8002a5a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr

08002a64 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a66:	b08b      	sub	sp, #44	; 0x2c
 8002a68:	af06      	add	r7, sp, #24
 8002a6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e0fd      	b.n	8002c72 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d106      	bne.n	8002a90 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7fe fe32 	bl	80016f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2203      	movs	r2, #3
 8002a94:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f001 fbe9 	bl	8004274 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	603b      	str	r3, [r7, #0]
 8002aa8:	687e      	ldr	r6, [r7, #4]
 8002aaa:	466d      	mov	r5, sp
 8002aac:	f106 0410 	add.w	r4, r6, #16
 8002ab0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ab2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ab4:	6823      	ldr	r3, [r4, #0]
 8002ab6:	602b      	str	r3, [r5, #0]
 8002ab8:	1d33      	adds	r3, r6, #4
 8002aba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002abc:	6838      	ldr	r0, [r7, #0]
 8002abe:	f001 fbc9 	bl	8004254 <USB_CoreInit>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d005      	beq.n	8002ad4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2202      	movs	r2, #2
 8002acc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e0ce      	b.n	8002c72 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2100      	movs	r1, #0
 8002ada:	4618      	mov	r0, r3
 8002adc:	f001 fbe4 	bl	80042a8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	73fb      	strb	r3, [r7, #15]
 8002ae4:	e04c      	b.n	8002b80 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ae6:	7bfb      	ldrb	r3, [r7, #15]
 8002ae8:	6879      	ldr	r1, [r7, #4]
 8002aea:	1c5a      	adds	r2, r3, #1
 8002aec:	4613      	mov	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4413      	add	r3, r2
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	440b      	add	r3, r1
 8002af6:	3301      	adds	r3, #1
 8002af8:	2201      	movs	r2, #1
 8002afa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	1c5a      	adds	r2, r3, #1
 8002b02:	4613      	mov	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	440b      	add	r3, r1
 8002b0c:	7bfa      	ldrb	r2, [r7, #15]
 8002b0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b10:	7bfa      	ldrb	r2, [r7, #15]
 8002b12:	7bfb      	ldrb	r3, [r7, #15]
 8002b14:	b298      	uxth	r0, r3
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	440b      	add	r3, r1
 8002b22:	3336      	adds	r3, #54	; 0x36
 8002b24:	4602      	mov	r2, r0
 8002b26:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	4613      	mov	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	4413      	add	r3, r2
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	440b      	add	r3, r1
 8002b38:	3303      	adds	r3, #3
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b3e:	7bfa      	ldrb	r2, [r7, #15]
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	4613      	mov	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	440b      	add	r3, r1
 8002b4c:	3338      	adds	r3, #56	; 0x38
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b52:	7bfa      	ldrb	r2, [r7, #15]
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	4613      	mov	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	440b      	add	r3, r1
 8002b60:	333c      	adds	r3, #60	; 0x3c
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b66:	7bfa      	ldrb	r2, [r7, #15]
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4413      	add	r3, r2
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	440b      	add	r3, r1
 8002b74:	3340      	adds	r3, #64	; 0x40
 8002b76:	2200      	movs	r2, #0
 8002b78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b7a:	7bfb      	ldrb	r3, [r7, #15]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	73fb      	strb	r3, [r7, #15]
 8002b80:	7bfa      	ldrb	r2, [r7, #15]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d3ad      	bcc.n	8002ae6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	73fb      	strb	r3, [r7, #15]
 8002b8e:	e044      	b.n	8002c1a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b90:	7bfa      	ldrb	r2, [r7, #15]
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	4613      	mov	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	440b      	add	r3, r1
 8002b9e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ba6:	7bfa      	ldrb	r2, [r7, #15]
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	4613      	mov	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	440b      	add	r3, r1
 8002bb4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bb8:	7bfa      	ldrb	r2, [r7, #15]
 8002bba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bbc:	7bfa      	ldrb	r2, [r7, #15]
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	440b      	add	r3, r1
 8002bca:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002bce:	2200      	movs	r2, #0
 8002bd0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bd2:	7bfa      	ldrb	r2, [r7, #15]
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4413      	add	r3, r2
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	440b      	add	r3, r1
 8002be0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002be8:	7bfa      	ldrb	r2, [r7, #15]
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	4613      	mov	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	440b      	add	r3, r1
 8002bf6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bfe:	7bfa      	ldrb	r2, [r7, #15]
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	4613      	mov	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	440b      	add	r3, r1
 8002c0c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
 8002c16:	3301      	adds	r3, #1
 8002c18:	73fb      	strb	r3, [r7, #15]
 8002c1a:	7bfa      	ldrb	r2, [r7, #15]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d3b5      	bcc.n	8002b90 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	603b      	str	r3, [r7, #0]
 8002c2a:	687e      	ldr	r6, [r7, #4]
 8002c2c:	466d      	mov	r5, sp
 8002c2e:	f106 0410 	add.w	r4, r6, #16
 8002c32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c36:	6823      	ldr	r3, [r4, #0]
 8002c38:	602b      	str	r3, [r5, #0]
 8002c3a:	1d33      	adds	r3, r6, #4
 8002c3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c3e:	6838      	ldr	r0, [r7, #0]
 8002c40:	f001 fb3e 	bl	80042c0 <USB_DevInit>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d005      	beq.n	8002c56 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e00d      	b.n	8002c72 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f001 fb48 	bl	8004300 <USB_DevDisconnect>

  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3714      	adds	r7, #20
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002c7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e272      	b.n	8003174 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 8087 	beq.w	8002daa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c9c:	4b92      	ldr	r3, [pc, #584]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f003 030c 	and.w	r3, r3, #12
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d00c      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ca8:	4b8f      	ldr	r3, [pc, #572]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f003 030c 	and.w	r3, r3, #12
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d112      	bne.n	8002cda <HAL_RCC_OscConfig+0x5e>
 8002cb4:	4b8c      	ldr	r3, [pc, #560]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc0:	d10b      	bne.n	8002cda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc2:	4b89      	ldr	r3, [pc, #548]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d06c      	beq.n	8002da8 <HAL_RCC_OscConfig+0x12c>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d168      	bne.n	8002da8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e24c      	b.n	8003174 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce2:	d106      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x76>
 8002ce4:	4b80      	ldr	r3, [pc, #512]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a7f      	ldr	r2, [pc, #508]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cee:	6013      	str	r3, [r2, #0]
 8002cf0:	e02e      	b.n	8002d50 <HAL_RCC_OscConfig+0xd4>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10c      	bne.n	8002d14 <HAL_RCC_OscConfig+0x98>
 8002cfa:	4b7b      	ldr	r3, [pc, #492]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a7a      	ldr	r2, [pc, #488]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002d00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d04:	6013      	str	r3, [r2, #0]
 8002d06:	4b78      	ldr	r3, [pc, #480]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a77      	ldr	r2, [pc, #476]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002d0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d10:	6013      	str	r3, [r2, #0]
 8002d12:	e01d      	b.n	8002d50 <HAL_RCC_OscConfig+0xd4>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d1c:	d10c      	bne.n	8002d38 <HAL_RCC_OscConfig+0xbc>
 8002d1e:	4b72      	ldr	r3, [pc, #456]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a71      	ldr	r2, [pc, #452]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	4b6f      	ldr	r3, [pc, #444]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a6e      	ldr	r2, [pc, #440]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	e00b      	b.n	8002d50 <HAL_RCC_OscConfig+0xd4>
 8002d38:	4b6b      	ldr	r3, [pc, #428]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a6a      	ldr	r2, [pc, #424]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d42:	6013      	str	r3, [r2, #0]
 8002d44:	4b68      	ldr	r3, [pc, #416]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a67      	ldr	r2, [pc, #412]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d013      	beq.n	8002d80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d58:	f7fe fdea 	bl	8001930 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d60:	f7fe fde6 	bl	8001930 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b64      	cmp	r3, #100	; 0x64
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e200      	b.n	8003174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d72:	4b5d      	ldr	r3, [pc, #372]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0f0      	beq.n	8002d60 <HAL_RCC_OscConfig+0xe4>
 8002d7e:	e014      	b.n	8002daa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d80:	f7fe fdd6 	bl	8001930 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d88:	f7fe fdd2 	bl	8001930 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b64      	cmp	r3, #100	; 0x64
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e1ec      	b.n	8003174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d9a:	4b53      	ldr	r3, [pc, #332]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f0      	bne.n	8002d88 <HAL_RCC_OscConfig+0x10c>
 8002da6:	e000      	b.n	8002daa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d063      	beq.n	8002e7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002db6:	4b4c      	ldr	r3, [pc, #304]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f003 030c 	and.w	r3, r3, #12
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00b      	beq.n	8002dda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002dc2:	4b49      	ldr	r3, [pc, #292]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f003 030c 	and.w	r3, r3, #12
 8002dca:	2b08      	cmp	r3, #8
 8002dcc:	d11c      	bne.n	8002e08 <HAL_RCC_OscConfig+0x18c>
 8002dce:	4b46      	ldr	r3, [pc, #280]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d116      	bne.n	8002e08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dda:	4b43      	ldr	r3, [pc, #268]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d005      	beq.n	8002df2 <HAL_RCC_OscConfig+0x176>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d001      	beq.n	8002df2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e1c0      	b.n	8003174 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df2:	4b3d      	ldr	r3, [pc, #244]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	4939      	ldr	r1, [pc, #228]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e06:	e03a      	b.n	8002e7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d020      	beq.n	8002e52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e10:	4b36      	ldr	r3, [pc, #216]	; (8002eec <HAL_RCC_OscConfig+0x270>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e16:	f7fe fd8b 	bl	8001930 <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e1e:	f7fe fd87 	bl	8001930 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e1a1      	b.n	8003174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e30:	4b2d      	ldr	r3, [pc, #180]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0f0      	beq.n	8002e1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e3c:	4b2a      	ldr	r3, [pc, #168]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	4927      	ldr	r1, [pc, #156]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	600b      	str	r3, [r1, #0]
 8002e50:	e015      	b.n	8002e7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e52:	4b26      	ldr	r3, [pc, #152]	; (8002eec <HAL_RCC_OscConfig+0x270>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e58:	f7fe fd6a 	bl	8001930 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e60:	f7fe fd66 	bl	8001930 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e180      	b.n	8003174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e72:	4b1d      	ldr	r3, [pc, #116]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d03a      	beq.n	8002f00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d019      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e92:	4b17      	ldr	r3, [pc, #92]	; (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002e94:	2201      	movs	r2, #1
 8002e96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e98:	f7fe fd4a 	bl	8001930 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ea0:	f7fe fd46 	bl	8001930 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e160      	b.n	8003174 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eb2:	4b0d      	ldr	r3, [pc, #52]	; (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0f0      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ebe:	2001      	movs	r0, #1
 8002ec0:	f000 fad8 	bl	8003474 <RCC_Delay>
 8002ec4:	e01c      	b.n	8002f00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ec6:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ecc:	f7fe fd30 	bl	8001930 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed2:	e00f      	b.n	8002ef4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ed4:	f7fe fd2c 	bl	8001930 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d908      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e146      	b.n	8003174 <HAL_RCC_OscConfig+0x4f8>
 8002ee6:	bf00      	nop
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	42420000 	.word	0x42420000
 8002ef0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef4:	4b92      	ldr	r3, [pc, #584]	; (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1e9      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 80a6 	beq.w	800305a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f12:	4b8b      	ldr	r3, [pc, #556]	; (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10d      	bne.n	8002f3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f1e:	4b88      	ldr	r3, [pc, #544]	; (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	4a87      	ldr	r2, [pc, #540]	; (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8002f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f28:	61d3      	str	r3, [r2, #28]
 8002f2a:	4b85      	ldr	r3, [pc, #532]	; (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f32:	60bb      	str	r3, [r7, #8]
 8002f34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f36:	2301      	movs	r3, #1
 8002f38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3a:	4b82      	ldr	r3, [pc, #520]	; (8003144 <HAL_RCC_OscConfig+0x4c8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d118      	bne.n	8002f78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f46:	4b7f      	ldr	r3, [pc, #508]	; (8003144 <HAL_RCC_OscConfig+0x4c8>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a7e      	ldr	r2, [pc, #504]	; (8003144 <HAL_RCC_OscConfig+0x4c8>)
 8002f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f52:	f7fe fced 	bl	8001930 <HAL_GetTick>
 8002f56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f58:	e008      	b.n	8002f6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f5a:	f7fe fce9 	bl	8001930 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b64      	cmp	r3, #100	; 0x64
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e103      	b.n	8003174 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f6c:	4b75      	ldr	r3, [pc, #468]	; (8003144 <HAL_RCC_OscConfig+0x4c8>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d0f0      	beq.n	8002f5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d106      	bne.n	8002f8e <HAL_RCC_OscConfig+0x312>
 8002f80:	4b6f      	ldr	r3, [pc, #444]	; (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	4a6e      	ldr	r2, [pc, #440]	; (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8002f86:	f043 0301 	orr.w	r3, r3, #1
 8002f8a:	6213      	str	r3, [r2, #32]
 8002f8c:	e02d      	b.n	8002fea <HAL_RCC_OscConfig+0x36e>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10c      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x334>
 8002f96:	4b6a      	ldr	r3, [pc, #424]	; (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	4a69      	ldr	r2, [pc, #420]	; (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8002f9c:	f023 0301 	bic.w	r3, r3, #1
 8002fa0:	6213      	str	r3, [r2, #32]
 8002fa2:	4b67      	ldr	r3, [pc, #412]	; (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	4a66      	ldr	r2, [pc, #408]	; (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8002fa8:	f023 0304 	bic.w	r3, r3, #4
 8002fac:	6213      	str	r3, [r2, #32]
 8002fae:	e01c      	b.n	8002fea <HAL_RCC_OscConfig+0x36e>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	2b05      	cmp	r3, #5
 8002fb6:	d10c      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x356>
 8002fb8:	4b61      	ldr	r3, [pc, #388]	; (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	4a60      	ldr	r2, [pc, #384]	; (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8002fbe:	f043 0304 	orr.w	r3, r3, #4
 8002fc2:	6213      	str	r3, [r2, #32]
 8002fc4:	4b5e      	ldr	r3, [pc, #376]	; (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	4a5d      	ldr	r2, [pc, #372]	; (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8002fca:	f043 0301 	orr.w	r3, r3, #1
 8002fce:	6213      	str	r3, [r2, #32]
 8002fd0:	e00b      	b.n	8002fea <HAL_RCC_OscConfig+0x36e>
 8002fd2:	4b5b      	ldr	r3, [pc, #364]	; (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	4a5a      	ldr	r2, [pc, #360]	; (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8002fd8:	f023 0301 	bic.w	r3, r3, #1
 8002fdc:	6213      	str	r3, [r2, #32]
 8002fde:	4b58      	ldr	r3, [pc, #352]	; (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	4a57      	ldr	r2, [pc, #348]	; (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8002fe4:	f023 0304 	bic.w	r3, r3, #4
 8002fe8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d015      	beq.n	800301e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff2:	f7fe fc9d 	bl	8001930 <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff8:	e00a      	b.n	8003010 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ffa:	f7fe fc99 	bl	8001930 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	f241 3288 	movw	r2, #5000	; 0x1388
 8003008:	4293      	cmp	r3, r2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e0b1      	b.n	8003174 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003010:	4b4b      	ldr	r3, [pc, #300]	; (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0ee      	beq.n	8002ffa <HAL_RCC_OscConfig+0x37e>
 800301c:	e014      	b.n	8003048 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800301e:	f7fe fc87 	bl	8001930 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003024:	e00a      	b.n	800303c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003026:	f7fe fc83 	bl	8001930 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	f241 3288 	movw	r2, #5000	; 0x1388
 8003034:	4293      	cmp	r3, r2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e09b      	b.n	8003174 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800303c:	4b40      	ldr	r3, [pc, #256]	; (8003140 <HAL_RCC_OscConfig+0x4c4>)
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1ee      	bne.n	8003026 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003048:	7dfb      	ldrb	r3, [r7, #23]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d105      	bne.n	800305a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800304e:	4b3c      	ldr	r3, [pc, #240]	; (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	4a3b      	ldr	r2, [pc, #236]	; (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8003054:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003058:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 8087 	beq.w	8003172 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003064:	4b36      	ldr	r3, [pc, #216]	; (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 030c 	and.w	r3, r3, #12
 800306c:	2b08      	cmp	r3, #8
 800306e:	d061      	beq.n	8003134 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	2b02      	cmp	r3, #2
 8003076:	d146      	bne.n	8003106 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003078:	4b33      	ldr	r3, [pc, #204]	; (8003148 <HAL_RCC_OscConfig+0x4cc>)
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307e:	f7fe fc57 	bl	8001930 <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003084:	e008      	b.n	8003098 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003086:	f7fe fc53 	bl	8001930 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e06d      	b.n	8003174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003098:	4b29      	ldr	r3, [pc, #164]	; (8003140 <HAL_RCC_OscConfig+0x4c4>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1f0      	bne.n	8003086 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ac:	d108      	bne.n	80030c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030ae:	4b24      	ldr	r3, [pc, #144]	; (8003140 <HAL_RCC_OscConfig+0x4c4>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	4921      	ldr	r1, [pc, #132]	; (8003140 <HAL_RCC_OscConfig+0x4c4>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030c0:	4b1f      	ldr	r3, [pc, #124]	; (8003140 <HAL_RCC_OscConfig+0x4c4>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a19      	ldr	r1, [r3, #32]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	430b      	orrs	r3, r1
 80030d2:	491b      	ldr	r1, [pc, #108]	; (8003140 <HAL_RCC_OscConfig+0x4c4>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030d8:	4b1b      	ldr	r3, [pc, #108]	; (8003148 <HAL_RCC_OscConfig+0x4cc>)
 80030da:	2201      	movs	r2, #1
 80030dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030de:	f7fe fc27 	bl	8001930 <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030e4:	e008      	b.n	80030f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e6:	f7fe fc23 	bl	8001930 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e03d      	b.n	8003174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030f8:	4b11      	ldr	r3, [pc, #68]	; (8003140 <HAL_RCC_OscConfig+0x4c4>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0f0      	beq.n	80030e6 <HAL_RCC_OscConfig+0x46a>
 8003104:	e035      	b.n	8003172 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003106:	4b10      	ldr	r3, [pc, #64]	; (8003148 <HAL_RCC_OscConfig+0x4cc>)
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310c:	f7fe fc10 	bl	8001930 <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003114:	f7fe fc0c 	bl	8001930 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e026      	b.n	8003174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003126:	4b06      	ldr	r3, [pc, #24]	; (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1f0      	bne.n	8003114 <HAL_RCC_OscConfig+0x498>
 8003132:	e01e      	b.n	8003172 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d107      	bne.n	800314c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e019      	b.n	8003174 <HAL_RCC_OscConfig+0x4f8>
 8003140:	40021000 	.word	0x40021000
 8003144:	40007000 	.word	0x40007000
 8003148:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800314c:	4b0b      	ldr	r3, [pc, #44]	; (800317c <HAL_RCC_OscConfig+0x500>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	429a      	cmp	r2, r3
 800315e:	d106      	bne.n	800316e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800316a:	429a      	cmp	r2, r3
 800316c:	d001      	beq.n	8003172 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40021000 	.word	0x40021000

08003180 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e0d0      	b.n	8003336 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003194:	4b6a      	ldr	r3, [pc, #424]	; (8003340 <HAL_RCC_ClockConfig+0x1c0>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0307 	and.w	r3, r3, #7
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d910      	bls.n	80031c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031a2:	4b67      	ldr	r3, [pc, #412]	; (8003340 <HAL_RCC_ClockConfig+0x1c0>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f023 0207 	bic.w	r2, r3, #7
 80031aa:	4965      	ldr	r1, [pc, #404]	; (8003340 <HAL_RCC_ClockConfig+0x1c0>)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b2:	4b63      	ldr	r3, [pc, #396]	; (8003340 <HAL_RCC_ClockConfig+0x1c0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d001      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e0b8      	b.n	8003336 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d020      	beq.n	8003212 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d005      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031dc:	4b59      	ldr	r3, [pc, #356]	; (8003344 <HAL_RCC_ClockConfig+0x1c4>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	4a58      	ldr	r2, [pc, #352]	; (8003344 <HAL_RCC_ClockConfig+0x1c4>)
 80031e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80031e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0308 	and.w	r3, r3, #8
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d005      	beq.n	8003200 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031f4:	4b53      	ldr	r3, [pc, #332]	; (8003344 <HAL_RCC_ClockConfig+0x1c4>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	4a52      	ldr	r2, [pc, #328]	; (8003344 <HAL_RCC_ClockConfig+0x1c4>)
 80031fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80031fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003200:	4b50      	ldr	r3, [pc, #320]	; (8003344 <HAL_RCC_ClockConfig+0x1c4>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	494d      	ldr	r1, [pc, #308]	; (8003344 <HAL_RCC_ClockConfig+0x1c4>)
 800320e:	4313      	orrs	r3, r2
 8003210:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d040      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d107      	bne.n	8003236 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003226:	4b47      	ldr	r3, [pc, #284]	; (8003344 <HAL_RCC_ClockConfig+0x1c4>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d115      	bne.n	800325e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e07f      	b.n	8003336 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d107      	bne.n	800324e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800323e:	4b41      	ldr	r3, [pc, #260]	; (8003344 <HAL_RCC_ClockConfig+0x1c4>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d109      	bne.n	800325e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e073      	b.n	8003336 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800324e:	4b3d      	ldr	r3, [pc, #244]	; (8003344 <HAL_RCC_ClockConfig+0x1c4>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e06b      	b.n	8003336 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800325e:	4b39      	ldr	r3, [pc, #228]	; (8003344 <HAL_RCC_ClockConfig+0x1c4>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f023 0203 	bic.w	r2, r3, #3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	4936      	ldr	r1, [pc, #216]	; (8003344 <HAL_RCC_ClockConfig+0x1c4>)
 800326c:	4313      	orrs	r3, r2
 800326e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003270:	f7fe fb5e 	bl	8001930 <HAL_GetTick>
 8003274:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003276:	e00a      	b.n	800328e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003278:	f7fe fb5a 	bl	8001930 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	f241 3288 	movw	r2, #5000	; 0x1388
 8003286:	4293      	cmp	r3, r2
 8003288:	d901      	bls.n	800328e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e053      	b.n	8003336 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328e:	4b2d      	ldr	r3, [pc, #180]	; (8003344 <HAL_RCC_ClockConfig+0x1c4>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f003 020c 	and.w	r2, r3, #12
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	429a      	cmp	r2, r3
 800329e:	d1eb      	bne.n	8003278 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032a0:	4b27      	ldr	r3, [pc, #156]	; (8003340 <HAL_RCC_ClockConfig+0x1c0>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d210      	bcs.n	80032d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ae:	4b24      	ldr	r3, [pc, #144]	; (8003340 <HAL_RCC_ClockConfig+0x1c0>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f023 0207 	bic.w	r2, r3, #7
 80032b6:	4922      	ldr	r1, [pc, #136]	; (8003340 <HAL_RCC_ClockConfig+0x1c0>)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032be:	4b20      	ldr	r3, [pc, #128]	; (8003340 <HAL_RCC_ClockConfig+0x1c0>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d001      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e032      	b.n	8003336 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d008      	beq.n	80032ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032dc:	4b19      	ldr	r3, [pc, #100]	; (8003344 <HAL_RCC_ClockConfig+0x1c4>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	4916      	ldr	r1, [pc, #88]	; (8003344 <HAL_RCC_ClockConfig+0x1c4>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d009      	beq.n	800330e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032fa:	4b12      	ldr	r3, [pc, #72]	; (8003344 <HAL_RCC_ClockConfig+0x1c4>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	490e      	ldr	r1, [pc, #56]	; (8003344 <HAL_RCC_ClockConfig+0x1c4>)
 800330a:	4313      	orrs	r3, r2
 800330c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800330e:	f000 f821 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 8003312:	4602      	mov	r2, r0
 8003314:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <HAL_RCC_ClockConfig+0x1c4>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	091b      	lsrs	r3, r3, #4
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	490a      	ldr	r1, [pc, #40]	; (8003348 <HAL_RCC_ClockConfig+0x1c8>)
 8003320:	5ccb      	ldrb	r3, [r1, r3]
 8003322:	fa22 f303 	lsr.w	r3, r2, r3
 8003326:	4a09      	ldr	r2, [pc, #36]	; (800334c <HAL_RCC_ClockConfig+0x1cc>)
 8003328:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800332a:	4b09      	ldr	r3, [pc, #36]	; (8003350 <HAL_RCC_ClockConfig+0x1d0>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f7fe fabc 	bl	80018ac <HAL_InitTick>

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	40022000 	.word	0x40022000
 8003344:	40021000 	.word	0x40021000
 8003348:	08004cd0 	.word	0x08004cd0
 800334c:	20000000 	.word	0x20000000
 8003350:	20000004 	.word	0x20000004

08003354 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003354:	b490      	push	{r4, r7}
 8003356:	b08a      	sub	sp, #40	; 0x28
 8003358:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800335a:	4b29      	ldr	r3, [pc, #164]	; (8003400 <HAL_RCC_GetSysClockFreq+0xac>)
 800335c:	1d3c      	adds	r4, r7, #4
 800335e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003360:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003364:	f240 2301 	movw	r3, #513	; 0x201
 8003368:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800336a:	2300      	movs	r3, #0
 800336c:	61fb      	str	r3, [r7, #28]
 800336e:	2300      	movs	r3, #0
 8003370:	61bb      	str	r3, [r7, #24]
 8003372:	2300      	movs	r3, #0
 8003374:	627b      	str	r3, [r7, #36]	; 0x24
 8003376:	2300      	movs	r3, #0
 8003378:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800337a:	2300      	movs	r3, #0
 800337c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800337e:	4b21      	ldr	r3, [pc, #132]	; (8003404 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	f003 030c 	and.w	r3, r3, #12
 800338a:	2b04      	cmp	r3, #4
 800338c:	d002      	beq.n	8003394 <HAL_RCC_GetSysClockFreq+0x40>
 800338e:	2b08      	cmp	r3, #8
 8003390:	d003      	beq.n	800339a <HAL_RCC_GetSysClockFreq+0x46>
 8003392:	e02b      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003394:	4b1c      	ldr	r3, [pc, #112]	; (8003408 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003396:	623b      	str	r3, [r7, #32]
      break;
 8003398:	e02b      	b.n	80033f2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	0c9b      	lsrs	r3, r3, #18
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	3328      	adds	r3, #40	; 0x28
 80033a4:	443b      	add	r3, r7
 80033a6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80033aa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d012      	beq.n	80033dc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033b6:	4b13      	ldr	r3, [pc, #76]	; (8003404 <HAL_RCC_GetSysClockFreq+0xb0>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	0c5b      	lsrs	r3, r3, #17
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	3328      	adds	r3, #40	; 0x28
 80033c2:	443b      	add	r3, r7
 80033c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80033c8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	4a0e      	ldr	r2, [pc, #56]	; (8003408 <HAL_RCC_GetSysClockFreq+0xb4>)
 80033ce:	fb03 f202 	mul.w	r2, r3, r2
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d8:	627b      	str	r3, [r7, #36]	; 0x24
 80033da:	e004      	b.n	80033e6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	4a0b      	ldr	r2, [pc, #44]	; (800340c <HAL_RCC_GetSysClockFreq+0xb8>)
 80033e0:	fb02 f303 	mul.w	r3, r2, r3
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80033e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e8:	623b      	str	r3, [r7, #32]
      break;
 80033ea:	e002      	b.n	80033f2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033ec:	4b06      	ldr	r3, [pc, #24]	; (8003408 <HAL_RCC_GetSysClockFreq+0xb4>)
 80033ee:	623b      	str	r3, [r7, #32]
      break;
 80033f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033f2:	6a3b      	ldr	r3, [r7, #32]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3728      	adds	r7, #40	; 0x28
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc90      	pop	{r4, r7}
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	08004cc0 	.word	0x08004cc0
 8003404:	40021000 	.word	0x40021000
 8003408:	007a1200 	.word	0x007a1200
 800340c:	003d0900 	.word	0x003d0900

08003410 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003414:	4b02      	ldr	r3, [pc, #8]	; (8003420 <HAL_RCC_GetHCLKFreq+0x10>)
 8003416:	681b      	ldr	r3, [r3, #0]
}
 8003418:	4618      	mov	r0, r3
 800341a:	46bd      	mov	sp, r7
 800341c:	bc80      	pop	{r7}
 800341e:	4770      	bx	lr
 8003420:	20000000 	.word	0x20000000

08003424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003428:	f7ff fff2 	bl	8003410 <HAL_RCC_GetHCLKFreq>
 800342c:	4602      	mov	r2, r0
 800342e:	4b05      	ldr	r3, [pc, #20]	; (8003444 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	0a1b      	lsrs	r3, r3, #8
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	4903      	ldr	r1, [pc, #12]	; (8003448 <HAL_RCC_GetPCLK1Freq+0x24>)
 800343a:	5ccb      	ldrb	r3, [r1, r3]
 800343c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003440:	4618      	mov	r0, r3
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40021000 	.word	0x40021000
 8003448:	08004ce0 	.word	0x08004ce0

0800344c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003450:	f7ff ffde 	bl	8003410 <HAL_RCC_GetHCLKFreq>
 8003454:	4602      	mov	r2, r0
 8003456:	4b05      	ldr	r3, [pc, #20]	; (800346c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	0adb      	lsrs	r3, r3, #11
 800345c:	f003 0307 	and.w	r3, r3, #7
 8003460:	4903      	ldr	r1, [pc, #12]	; (8003470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003462:	5ccb      	ldrb	r3, [r1, r3]
 8003464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003468:	4618      	mov	r0, r3
 800346a:	bd80      	pop	{r7, pc}
 800346c:	40021000 	.word	0x40021000
 8003470:	08004ce0 	.word	0x08004ce0

08003474 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800347c:	4b0a      	ldr	r3, [pc, #40]	; (80034a8 <RCC_Delay+0x34>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a0a      	ldr	r2, [pc, #40]	; (80034ac <RCC_Delay+0x38>)
 8003482:	fba2 2303 	umull	r2, r3, r2, r3
 8003486:	0a5b      	lsrs	r3, r3, #9
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	fb02 f303 	mul.w	r3, r2, r3
 800348e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003490:	bf00      	nop
  }
  while (Delay --);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	1e5a      	subs	r2, r3, #1
 8003496:	60fa      	str	r2, [r7, #12]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1f9      	bne.n	8003490 <RCC_Delay+0x1c>
}
 800349c:	bf00      	nop
 800349e:	bf00      	nop
 80034a0:	3714      	adds	r7, #20
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bc80      	pop	{r7}
 80034a6:	4770      	bx	lr
 80034a8:	20000000 	.word	0x20000000
 80034ac:	10624dd3 	.word	0x10624dd3

080034b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80034b8:	2300      	movs	r3, #0
 80034ba:	613b      	str	r3, [r7, #16]
 80034bc:	2300      	movs	r3, #0
 80034be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d07d      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80034cc:	2300      	movs	r3, #0
 80034ce:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034d0:	4b4f      	ldr	r3, [pc, #316]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10d      	bne.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034dc:	4b4c      	ldr	r3, [pc, #304]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034de:	69db      	ldr	r3, [r3, #28]
 80034e0:	4a4b      	ldr	r2, [pc, #300]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034e6:	61d3      	str	r3, [r2, #28]
 80034e8:	4b49      	ldr	r3, [pc, #292]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f0:	60bb      	str	r3, [r7, #8]
 80034f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034f4:	2301      	movs	r3, #1
 80034f6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f8:	4b46      	ldr	r3, [pc, #280]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003500:	2b00      	cmp	r3, #0
 8003502:	d118      	bne.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003504:	4b43      	ldr	r3, [pc, #268]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a42      	ldr	r2, [pc, #264]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800350a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800350e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003510:	f7fe fa0e 	bl	8001930 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003516:	e008      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003518:	f7fe fa0a 	bl	8001930 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b64      	cmp	r3, #100	; 0x64
 8003524:	d901      	bls.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e06d      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800352a:	4b3a      	ldr	r3, [pc, #232]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0f0      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003536:	4b36      	ldr	r3, [pc, #216]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800353e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d02e      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	429a      	cmp	r2, r3
 8003552:	d027      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003554:	4b2e      	ldr	r3, [pc, #184]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800355c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800355e:	4b2e      	ldr	r3, [pc, #184]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003560:	2201      	movs	r2, #1
 8003562:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003564:	4b2c      	ldr	r3, [pc, #176]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800356a:	4a29      	ldr	r2, [pc, #164]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d014      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357a:	f7fe f9d9 	bl	8001930 <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003580:	e00a      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003582:	f7fe f9d5 	bl	8001930 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003590:	4293      	cmp	r3, r2
 8003592:	d901      	bls.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e036      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003598:	4b1d      	ldr	r3, [pc, #116]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0ee      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035a4:	4b1a      	ldr	r3, [pc, #104]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	4917      	ldr	r1, [pc, #92]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035b6:	7dfb      	ldrb	r3, [r7, #23]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d105      	bne.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035bc:	4b14      	ldr	r3, [pc, #80]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035be:	69db      	ldr	r3, [r3, #28]
 80035c0:	4a13      	ldr	r2, [pc, #76]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d008      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035d4:	4b0e      	ldr	r3, [pc, #56]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	490b      	ldr	r1, [pc, #44]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0310 	and.w	r3, r3, #16
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d008      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035f2:	4b07      	ldr	r3, [pc, #28]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	4904      	ldr	r1, [pc, #16]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003600:	4313      	orrs	r3, r2
 8003602:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	40021000 	.word	0x40021000
 8003614:	40007000 	.word	0x40007000
 8003618:	42420440 	.word	0x42420440

0800361c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e041      	b.n	80036b2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d106      	bne.n	8003648 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7fd ff84 	bl	8001550 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3304      	adds	r3, #4
 8003658:	4619      	mov	r1, r3
 800365a:	4610      	mov	r0, r2
 800365c:	f000 fac4 	bl	8003be8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b086      	sub	sp, #24
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e093      	b.n	80037f6 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d106      	bne.n	80036e8 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7fd feca 	bl	800147c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6812      	ldr	r2, [r2, #0]
 80036fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036fe:	f023 0307 	bic.w	r3, r3, #7
 8003702:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3304      	adds	r3, #4
 800370c:	4619      	mov	r1, r3
 800370e:	4610      	mov	r0, r2
 8003710:	f000 fa6a 	bl	8003be8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	4313      	orrs	r3, r2
 8003734:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800373c:	f023 0303 	bic.w	r3, r3, #3
 8003740:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	689a      	ldr	r2, [r3, #8]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	021b      	lsls	r3, r3, #8
 800374c:	4313      	orrs	r3, r2
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	4313      	orrs	r3, r2
 8003752:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800375a:	f023 030c 	bic.w	r3, r3, #12
 800375e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003766:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800376a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	68da      	ldr	r2, [r3, #12]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	69db      	ldr	r3, [r3, #28]
 8003774:	021b      	lsls	r3, r3, #8
 8003776:	4313      	orrs	r3, r2
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	4313      	orrs	r3, r2
 800377c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	011a      	lsls	r2, r3, #4
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	031b      	lsls	r3, r3, #12
 800378a:	4313      	orrs	r3, r2
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	4313      	orrs	r3, r2
 8003790:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003798:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	011b      	lsls	r3, r3, #4
 80037a4:	4313      	orrs	r3, r2
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3718      	adds	r7, #24
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b082      	sub	sp, #8
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b02      	cmp	r3, #2
 8003812:	d122      	bne.n	800385a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b02      	cmp	r3, #2
 8003820:	d11b      	bne.n	800385a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f06f 0202 	mvn.w	r2, #2
 800382a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	f003 0303 	and.w	r3, r3, #3
 800383c:	2b00      	cmp	r3, #0
 800383e:	d003      	beq.n	8003848 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f9b5 	bl	8003bb0 <HAL_TIM_IC_CaptureCallback>
 8003846:	e005      	b.n	8003854 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 f9a8 	bl	8003b9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f9b7 	bl	8003bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b04      	cmp	r3, #4
 8003866:	d122      	bne.n	80038ae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	f003 0304 	and.w	r3, r3, #4
 8003872:	2b04      	cmp	r3, #4
 8003874:	d11b      	bne.n	80038ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f06f 0204 	mvn.w	r2, #4
 800387e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003890:	2b00      	cmp	r3, #0
 8003892:	d003      	beq.n	800389c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f98b 	bl	8003bb0 <HAL_TIM_IC_CaptureCallback>
 800389a:	e005      	b.n	80038a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f97e 	bl	8003b9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f98d 	bl	8003bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	f003 0308 	and.w	r3, r3, #8
 80038b8:	2b08      	cmp	r3, #8
 80038ba:	d122      	bne.n	8003902 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f003 0308 	and.w	r3, r3, #8
 80038c6:	2b08      	cmp	r3, #8
 80038c8:	d11b      	bne.n	8003902 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f06f 0208 	mvn.w	r2, #8
 80038d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2204      	movs	r2, #4
 80038d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	69db      	ldr	r3, [r3, #28]
 80038e0:	f003 0303 	and.w	r3, r3, #3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d003      	beq.n	80038f0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 f961 	bl	8003bb0 <HAL_TIM_IC_CaptureCallback>
 80038ee:	e005      	b.n	80038fc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f954 	bl	8003b9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f963 	bl	8003bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	f003 0310 	and.w	r3, r3, #16
 800390c:	2b10      	cmp	r3, #16
 800390e:	d122      	bne.n	8003956 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	f003 0310 	and.w	r3, r3, #16
 800391a:	2b10      	cmp	r3, #16
 800391c:	d11b      	bne.n	8003956 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f06f 0210 	mvn.w	r2, #16
 8003926:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2208      	movs	r2, #8
 800392c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	69db      	ldr	r3, [r3, #28]
 8003934:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003938:	2b00      	cmp	r3, #0
 800393a:	d003      	beq.n	8003944 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 f937 	bl	8003bb0 <HAL_TIM_IC_CaptureCallback>
 8003942:	e005      	b.n	8003950 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f92a 	bl	8003b9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f939 	bl	8003bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b01      	cmp	r3, #1
 8003962:	d10e      	bne.n	8003982 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b01      	cmp	r3, #1
 8003970:	d107      	bne.n	8003982 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f06f 0201 	mvn.w	r2, #1
 800397a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 f905 	bl	8003b8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800398c:	2b80      	cmp	r3, #128	; 0x80
 800398e:	d10e      	bne.n	80039ae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399a:	2b80      	cmp	r3, #128	; 0x80
 800399c:	d107      	bne.n	80039ae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 fb6e 	bl	800408a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b8:	2b40      	cmp	r3, #64	; 0x40
 80039ba:	d10e      	bne.n	80039da <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c6:	2b40      	cmp	r3, #64	; 0x40
 80039c8:	d107      	bne.n	80039da <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 f8fd 	bl	8003bd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	f003 0320 	and.w	r3, r3, #32
 80039e4:	2b20      	cmp	r3, #32
 80039e6:	d10e      	bne.n	8003a06 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f003 0320 	and.w	r3, r3, #32
 80039f2:	2b20      	cmp	r3, #32
 80039f4:	d107      	bne.n	8003a06 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f06f 0220 	mvn.w	r2, #32
 80039fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 fb39 	bl	8004078 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a06:	bf00      	nop
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
	...

08003a10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d101      	bne.n	8003a2a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003a26:	2302      	movs	r3, #2
 8003a28:	e0ac      	b.n	8003b84 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b0c      	cmp	r3, #12
 8003a36:	f200 809f 	bhi.w	8003b78 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003a3a:	a201      	add	r2, pc, #4	; (adr r2, 8003a40 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a40:	08003a75 	.word	0x08003a75
 8003a44:	08003b79 	.word	0x08003b79
 8003a48:	08003b79 	.word	0x08003b79
 8003a4c:	08003b79 	.word	0x08003b79
 8003a50:	08003ab5 	.word	0x08003ab5
 8003a54:	08003b79 	.word	0x08003b79
 8003a58:	08003b79 	.word	0x08003b79
 8003a5c:	08003b79 	.word	0x08003b79
 8003a60:	08003af7 	.word	0x08003af7
 8003a64:	08003b79 	.word	0x08003b79
 8003a68:	08003b79 	.word	0x08003b79
 8003a6c:	08003b79 	.word	0x08003b79
 8003a70:	08003b37 	.word	0x08003b37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68b9      	ldr	r1, [r7, #8]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 f916 	bl	8003cac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699a      	ldr	r2, [r3, #24]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0208 	orr.w	r2, r2, #8
 8003a8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699a      	ldr	r2, [r3, #24]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 0204 	bic.w	r2, r2, #4
 8003a9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6999      	ldr	r1, [r3, #24]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	691a      	ldr	r2, [r3, #16]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	619a      	str	r2, [r3, #24]
      break;
 8003ab2:	e062      	b.n	8003b7a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68b9      	ldr	r1, [r7, #8]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 f95c 	bl	8003d78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699a      	ldr	r2, [r3, #24]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ace:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	699a      	ldr	r2, [r3, #24]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ade:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6999      	ldr	r1, [r3, #24]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	021a      	lsls	r2, r3, #8
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	430a      	orrs	r2, r1
 8003af2:	619a      	str	r2, [r3, #24]
      break;
 8003af4:	e041      	b.n	8003b7a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68b9      	ldr	r1, [r7, #8]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f000 f9a5 	bl	8003e4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	69da      	ldr	r2, [r3, #28]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f042 0208 	orr.w	r2, r2, #8
 8003b10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	69da      	ldr	r2, [r3, #28]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0204 	bic.w	r2, r2, #4
 8003b20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	69d9      	ldr	r1, [r3, #28]
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	691a      	ldr	r2, [r3, #16]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	61da      	str	r2, [r3, #28]
      break;
 8003b34:	e021      	b.n	8003b7a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68b9      	ldr	r1, [r7, #8]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 f9ef 	bl	8003f20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	69da      	ldr	r2, [r3, #28]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	69da      	ldr	r2, [r3, #28]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	69d9      	ldr	r1, [r3, #28]
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	021a      	lsls	r2, r3, #8
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	61da      	str	r2, [r3, #28]
      break;
 8003b76:	e000      	b.n	8003b7a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003b78:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bc80      	pop	{r7}
 8003b9c:	4770      	bx	lr

08003b9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b083      	sub	sp, #12
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bc80      	pop	{r7}
 8003bae:	4770      	bx	lr

08003bb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bc80      	pop	{r7}
 8003bc0:	4770      	bx	lr

08003bc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b083      	sub	sp, #12
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bca:	bf00      	nop
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bc80      	pop	{r7}
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bc80      	pop	{r7}
 8003be4:	4770      	bx	lr
	...

08003be8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a29      	ldr	r2, [pc, #164]	; (8003ca0 <TIM_Base_SetConfig+0xb8>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d00b      	beq.n	8003c18 <TIM_Base_SetConfig+0x30>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c06:	d007      	beq.n	8003c18 <TIM_Base_SetConfig+0x30>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a26      	ldr	r2, [pc, #152]	; (8003ca4 <TIM_Base_SetConfig+0xbc>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d003      	beq.n	8003c18 <TIM_Base_SetConfig+0x30>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a25      	ldr	r2, [pc, #148]	; (8003ca8 <TIM_Base_SetConfig+0xc0>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d108      	bne.n	8003c2a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a1c      	ldr	r2, [pc, #112]	; (8003ca0 <TIM_Base_SetConfig+0xb8>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d00b      	beq.n	8003c4a <TIM_Base_SetConfig+0x62>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c38:	d007      	beq.n	8003c4a <TIM_Base_SetConfig+0x62>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a19      	ldr	r2, [pc, #100]	; (8003ca4 <TIM_Base_SetConfig+0xbc>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d003      	beq.n	8003c4a <TIM_Base_SetConfig+0x62>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a18      	ldr	r2, [pc, #96]	; (8003ca8 <TIM_Base_SetConfig+0xc0>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d108      	bne.n	8003c5c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a07      	ldr	r2, [pc, #28]	; (8003ca0 <TIM_Base_SetConfig+0xb8>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d103      	bne.n	8003c90 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	691a      	ldr	r2, [r3, #16]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	615a      	str	r2, [r3, #20]
}
 8003c96:	bf00      	nop
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bc80      	pop	{r7}
 8003c9e:	4770      	bx	lr
 8003ca0:	40012c00 	.word	0x40012c00
 8003ca4:	40000400 	.word	0x40000400
 8003ca8:	40000800 	.word	0x40000800

08003cac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b087      	sub	sp, #28
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a1b      	ldr	r3, [r3, #32]
 8003cba:	f023 0201 	bic.w	r2, r3, #1
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f023 0303 	bic.w	r3, r3, #3
 8003ce2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f023 0302 	bic.w	r3, r3, #2
 8003cf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a1c      	ldr	r2, [pc, #112]	; (8003d74 <TIM_OC1_SetConfig+0xc8>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d10c      	bne.n	8003d22 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	f023 0308 	bic.w	r3, r3, #8
 8003d0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f023 0304 	bic.w	r3, r3, #4
 8003d20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a13      	ldr	r2, [pc, #76]	; (8003d74 <TIM_OC1_SetConfig+0xc8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d111      	bne.n	8003d4e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	621a      	str	r2, [r3, #32]
}
 8003d68:	bf00      	nop
 8003d6a:	371c      	adds	r7, #28
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bc80      	pop	{r7}
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	40012c00 	.word	0x40012c00

08003d78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	f023 0210 	bic.w	r2, r3, #16
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	021b      	lsls	r3, r3, #8
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f023 0320 	bic.w	r3, r3, #32
 8003dc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	011b      	lsls	r3, r3, #4
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a1d      	ldr	r2, [pc, #116]	; (8003e48 <TIM_OC2_SetConfig+0xd0>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d10d      	bne.n	8003df4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	011b      	lsls	r3, r3, #4
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003df2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a14      	ldr	r2, [pc, #80]	; (8003e48 <TIM_OC2_SetConfig+0xd0>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d113      	bne.n	8003e24 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685a      	ldr	r2, [r3, #4]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	621a      	str	r2, [r3, #32]
}
 8003e3e:	bf00      	nop
 8003e40:	371c      	adds	r7, #28
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bc80      	pop	{r7}
 8003e46:	4770      	bx	lr
 8003e48:	40012c00 	.word	0x40012c00

08003e4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b087      	sub	sp, #28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f023 0303 	bic.w	r3, r3, #3
 8003e82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	021b      	lsls	r3, r3, #8
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a1d      	ldr	r2, [pc, #116]	; (8003f1c <TIM_OC3_SetConfig+0xd0>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d10d      	bne.n	8003ec6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003eb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	021b      	lsls	r3, r3, #8
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ec4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a14      	ldr	r2, [pc, #80]	; (8003f1c <TIM_OC3_SetConfig+0xd0>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d113      	bne.n	8003ef6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ed4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003edc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	011b      	lsls	r3, r3, #4
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	011b      	lsls	r3, r3, #4
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	621a      	str	r2, [r3, #32]
}
 8003f10:	bf00      	nop
 8003f12:	371c      	adds	r7, #28
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bc80      	pop	{r7}
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	40012c00 	.word	0x40012c00

08003f20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b087      	sub	sp, #28
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	021b      	lsls	r3, r3, #8
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	031b      	lsls	r3, r3, #12
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a0f      	ldr	r2, [pc, #60]	; (8003fb8 <TIM_OC4_SetConfig+0x98>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d109      	bne.n	8003f94 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	019b      	lsls	r3, r3, #6
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	621a      	str	r2, [r3, #32]
}
 8003fae:	bf00      	nop
 8003fb0:	371c      	adds	r7, #28
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bc80      	pop	{r7}
 8003fb6:	4770      	bx	lr
 8003fb8:	40012c00 	.word	0x40012c00

08003fbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d101      	bne.n	8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e046      	b.n	8004062 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ffa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4313      	orrs	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a16      	ldr	r2, [pc, #88]	; (800406c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d00e      	beq.n	8004036 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004020:	d009      	beq.n	8004036 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a12      	ldr	r2, [pc, #72]	; (8004070 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d004      	beq.n	8004036 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a10      	ldr	r2, [pc, #64]	; (8004074 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d10c      	bne.n	8004050 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800403c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	4313      	orrs	r3, r2
 8004046:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3714      	adds	r7, #20
 8004066:	46bd      	mov	sp, r7
 8004068:	bc80      	pop	{r7}
 800406a:	4770      	bx	lr
 800406c:	40012c00 	.word	0x40012c00
 8004070:	40000400 	.word	0x40000400
 8004074:	40000800 	.word	0x40000800

08004078 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	bc80      	pop	{r7}
 8004088:	4770      	bx	lr

0800408a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004092:	bf00      	nop
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	bc80      	pop	{r7}
 800409a:	4770      	bx	lr

0800409c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e03f      	b.n	800412e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d106      	bne.n	80040c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7fd facc 	bl	8001660 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2224      	movs	r2, #36	; 0x24
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68da      	ldr	r2, [r3, #12]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f829 	bl	8004138 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	691a      	ldr	r2, [r3, #16]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	695a      	ldr	r2, [r3, #20]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004104:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68da      	ldr	r2, [r3, #12]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004114:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2220      	movs	r2, #32
 8004128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
	...

08004138 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68da      	ldr	r2, [r3, #12]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	689a      	ldr	r2, [r3, #8]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	431a      	orrs	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	4313      	orrs	r3, r2
 8004166:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004172:	f023 030c 	bic.w	r3, r3, #12
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	6812      	ldr	r2, [r2, #0]
 800417a:	68b9      	ldr	r1, [r7, #8]
 800417c:	430b      	orrs	r3, r1
 800417e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	699a      	ldr	r2, [r3, #24]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a2c      	ldr	r2, [pc, #176]	; (800424c <UART_SetConfig+0x114>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d103      	bne.n	80041a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80041a0:	f7ff f954 	bl	800344c <HAL_RCC_GetPCLK2Freq>
 80041a4:	60f8      	str	r0, [r7, #12]
 80041a6:	e002      	b.n	80041ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80041a8:	f7ff f93c 	bl	8003424 <HAL_RCC_GetPCLK1Freq>
 80041ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	4613      	mov	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	009a      	lsls	r2, r3, #2
 80041b8:	441a      	add	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c4:	4a22      	ldr	r2, [pc, #136]	; (8004250 <UART_SetConfig+0x118>)
 80041c6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ca:	095b      	lsrs	r3, r3, #5
 80041cc:	0119      	lsls	r1, r3, #4
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	4613      	mov	r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	4413      	add	r3, r2
 80041d6:	009a      	lsls	r2, r3, #2
 80041d8:	441a      	add	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80041e4:	4b1a      	ldr	r3, [pc, #104]	; (8004250 <UART_SetConfig+0x118>)
 80041e6:	fba3 0302 	umull	r0, r3, r3, r2
 80041ea:	095b      	lsrs	r3, r3, #5
 80041ec:	2064      	movs	r0, #100	; 0x64
 80041ee:	fb00 f303 	mul.w	r3, r0, r3
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	011b      	lsls	r3, r3, #4
 80041f6:	3332      	adds	r3, #50	; 0x32
 80041f8:	4a15      	ldr	r2, [pc, #84]	; (8004250 <UART_SetConfig+0x118>)
 80041fa:	fba2 2303 	umull	r2, r3, r2, r3
 80041fe:	095b      	lsrs	r3, r3, #5
 8004200:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004204:	4419      	add	r1, r3
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	4613      	mov	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	009a      	lsls	r2, r3, #2
 8004210:	441a      	add	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	fbb2 f2f3 	udiv	r2, r2, r3
 800421c:	4b0c      	ldr	r3, [pc, #48]	; (8004250 <UART_SetConfig+0x118>)
 800421e:	fba3 0302 	umull	r0, r3, r3, r2
 8004222:	095b      	lsrs	r3, r3, #5
 8004224:	2064      	movs	r0, #100	; 0x64
 8004226:	fb00 f303 	mul.w	r3, r0, r3
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	011b      	lsls	r3, r3, #4
 800422e:	3332      	adds	r3, #50	; 0x32
 8004230:	4a07      	ldr	r2, [pc, #28]	; (8004250 <UART_SetConfig+0x118>)
 8004232:	fba2 2303 	umull	r2, r3, r2, r3
 8004236:	095b      	lsrs	r3, r3, #5
 8004238:	f003 020f 	and.w	r2, r3, #15
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	440a      	add	r2, r1
 8004242:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004244:	bf00      	nop
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40013800 	.word	0x40013800
 8004250:	51eb851f 	.word	0x51eb851f

08004254 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004254:	b084      	sub	sp, #16
 8004256:	b480      	push	{r7}
 8004258:	b083      	sub	sp, #12
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
 800425e:	f107 0014 	add.w	r0, r7, #20
 8004262:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	bc80      	pop	{r7}
 8004270:	b004      	add	sp, #16
 8004272:	4770      	bx	lr

08004274 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800427c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004280:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004288:	b29a      	uxth	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	b29b      	uxth	r3, r3
 800428e:	43db      	mvns	r3, r3
 8004290:	b29b      	uxth	r3, r3
 8004292:	4013      	ands	r3, r2
 8004294:	b29a      	uxth	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bc80      	pop	{r7}
 80042a6:	4770      	bx	lr

080042a8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	460b      	mov	r3, r1
 80042b2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bc80      	pop	{r7}
 80042be:	4770      	bx	lr

080042c0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80042c0:	b084      	sub	sp, #16
 80042c2:	b480      	push	{r7}
 80042c4:	b083      	sub	sp, #12
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
 80042ca:	f107 0014 	add.w	r0, r7, #20
 80042ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bc80      	pop	{r7}
 80042fc:	b004      	add	sp, #16
 80042fe:	4770      	bx	lr

08004300 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	bc80      	pop	{r7}
 8004312:	4770      	bx	lr

08004314 <__errno>:
 8004314:	4b01      	ldr	r3, [pc, #4]	; (800431c <__errno+0x8>)
 8004316:	6818      	ldr	r0, [r3, #0]
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	2000000c 	.word	0x2000000c

08004320 <__libc_init_array>:
 8004320:	b570      	push	{r4, r5, r6, lr}
 8004322:	2600      	movs	r6, #0
 8004324:	4d0c      	ldr	r5, [pc, #48]	; (8004358 <__libc_init_array+0x38>)
 8004326:	4c0d      	ldr	r4, [pc, #52]	; (800435c <__libc_init_array+0x3c>)
 8004328:	1b64      	subs	r4, r4, r5
 800432a:	10a4      	asrs	r4, r4, #2
 800432c:	42a6      	cmp	r6, r4
 800432e:	d109      	bne.n	8004344 <__libc_init_array+0x24>
 8004330:	f000 fc9c 	bl	8004c6c <_init>
 8004334:	2600      	movs	r6, #0
 8004336:	4d0a      	ldr	r5, [pc, #40]	; (8004360 <__libc_init_array+0x40>)
 8004338:	4c0a      	ldr	r4, [pc, #40]	; (8004364 <__libc_init_array+0x44>)
 800433a:	1b64      	subs	r4, r4, r5
 800433c:	10a4      	asrs	r4, r4, #2
 800433e:	42a6      	cmp	r6, r4
 8004340:	d105      	bne.n	800434e <__libc_init_array+0x2e>
 8004342:	bd70      	pop	{r4, r5, r6, pc}
 8004344:	f855 3b04 	ldr.w	r3, [r5], #4
 8004348:	4798      	blx	r3
 800434a:	3601      	adds	r6, #1
 800434c:	e7ee      	b.n	800432c <__libc_init_array+0xc>
 800434e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004352:	4798      	blx	r3
 8004354:	3601      	adds	r6, #1
 8004356:	e7f2      	b.n	800433e <__libc_init_array+0x1e>
 8004358:	08004d1c 	.word	0x08004d1c
 800435c:	08004d1c 	.word	0x08004d1c
 8004360:	08004d1c 	.word	0x08004d1c
 8004364:	08004d20 	.word	0x08004d20

08004368 <memset>:
 8004368:	4603      	mov	r3, r0
 800436a:	4402      	add	r2, r0
 800436c:	4293      	cmp	r3, r2
 800436e:	d100      	bne.n	8004372 <memset+0xa>
 8004370:	4770      	bx	lr
 8004372:	f803 1b01 	strb.w	r1, [r3], #1
 8004376:	e7f9      	b.n	800436c <memset+0x4>

08004378 <siprintf>:
 8004378:	b40e      	push	{r1, r2, r3}
 800437a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800437e:	b500      	push	{lr}
 8004380:	b09c      	sub	sp, #112	; 0x70
 8004382:	ab1d      	add	r3, sp, #116	; 0x74
 8004384:	9002      	str	r0, [sp, #8]
 8004386:	9006      	str	r0, [sp, #24]
 8004388:	9107      	str	r1, [sp, #28]
 800438a:	9104      	str	r1, [sp, #16]
 800438c:	4808      	ldr	r0, [pc, #32]	; (80043b0 <siprintf+0x38>)
 800438e:	4909      	ldr	r1, [pc, #36]	; (80043b4 <siprintf+0x3c>)
 8004390:	f853 2b04 	ldr.w	r2, [r3], #4
 8004394:	9105      	str	r1, [sp, #20]
 8004396:	6800      	ldr	r0, [r0, #0]
 8004398:	a902      	add	r1, sp, #8
 800439a:	9301      	str	r3, [sp, #4]
 800439c:	f000 f868 	bl	8004470 <_svfiprintf_r>
 80043a0:	2200      	movs	r2, #0
 80043a2:	9b02      	ldr	r3, [sp, #8]
 80043a4:	701a      	strb	r2, [r3, #0]
 80043a6:	b01c      	add	sp, #112	; 0x70
 80043a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80043ac:	b003      	add	sp, #12
 80043ae:	4770      	bx	lr
 80043b0:	2000000c 	.word	0x2000000c
 80043b4:	ffff0208 	.word	0xffff0208

080043b8 <__ssputs_r>:
 80043b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043bc:	688e      	ldr	r6, [r1, #8]
 80043be:	4682      	mov	sl, r0
 80043c0:	429e      	cmp	r6, r3
 80043c2:	460c      	mov	r4, r1
 80043c4:	4690      	mov	r8, r2
 80043c6:	461f      	mov	r7, r3
 80043c8:	d838      	bhi.n	800443c <__ssputs_r+0x84>
 80043ca:	898a      	ldrh	r2, [r1, #12]
 80043cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80043d0:	d032      	beq.n	8004438 <__ssputs_r+0x80>
 80043d2:	6825      	ldr	r5, [r4, #0]
 80043d4:	6909      	ldr	r1, [r1, #16]
 80043d6:	3301      	adds	r3, #1
 80043d8:	eba5 0901 	sub.w	r9, r5, r1
 80043dc:	6965      	ldr	r5, [r4, #20]
 80043de:	444b      	add	r3, r9
 80043e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80043e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80043e8:	106d      	asrs	r5, r5, #1
 80043ea:	429d      	cmp	r5, r3
 80043ec:	bf38      	it	cc
 80043ee:	461d      	movcc	r5, r3
 80043f0:	0553      	lsls	r3, r2, #21
 80043f2:	d531      	bpl.n	8004458 <__ssputs_r+0xa0>
 80043f4:	4629      	mov	r1, r5
 80043f6:	f000 fb6f 	bl	8004ad8 <_malloc_r>
 80043fa:	4606      	mov	r6, r0
 80043fc:	b950      	cbnz	r0, 8004414 <__ssputs_r+0x5c>
 80043fe:	230c      	movs	r3, #12
 8004400:	f04f 30ff 	mov.w	r0, #4294967295
 8004404:	f8ca 3000 	str.w	r3, [sl]
 8004408:	89a3      	ldrh	r3, [r4, #12]
 800440a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800440e:	81a3      	strh	r3, [r4, #12]
 8004410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004414:	464a      	mov	r2, r9
 8004416:	6921      	ldr	r1, [r4, #16]
 8004418:	f000 face 	bl	80049b8 <memcpy>
 800441c:	89a3      	ldrh	r3, [r4, #12]
 800441e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004426:	81a3      	strh	r3, [r4, #12]
 8004428:	6126      	str	r6, [r4, #16]
 800442a:	444e      	add	r6, r9
 800442c:	6026      	str	r6, [r4, #0]
 800442e:	463e      	mov	r6, r7
 8004430:	6165      	str	r5, [r4, #20]
 8004432:	eba5 0509 	sub.w	r5, r5, r9
 8004436:	60a5      	str	r5, [r4, #8]
 8004438:	42be      	cmp	r6, r7
 800443a:	d900      	bls.n	800443e <__ssputs_r+0x86>
 800443c:	463e      	mov	r6, r7
 800443e:	4632      	mov	r2, r6
 8004440:	4641      	mov	r1, r8
 8004442:	6820      	ldr	r0, [r4, #0]
 8004444:	f000 fac6 	bl	80049d4 <memmove>
 8004448:	68a3      	ldr	r3, [r4, #8]
 800444a:	2000      	movs	r0, #0
 800444c:	1b9b      	subs	r3, r3, r6
 800444e:	60a3      	str	r3, [r4, #8]
 8004450:	6823      	ldr	r3, [r4, #0]
 8004452:	4433      	add	r3, r6
 8004454:	6023      	str	r3, [r4, #0]
 8004456:	e7db      	b.n	8004410 <__ssputs_r+0x58>
 8004458:	462a      	mov	r2, r5
 800445a:	f000 fbb1 	bl	8004bc0 <_realloc_r>
 800445e:	4606      	mov	r6, r0
 8004460:	2800      	cmp	r0, #0
 8004462:	d1e1      	bne.n	8004428 <__ssputs_r+0x70>
 8004464:	4650      	mov	r0, sl
 8004466:	6921      	ldr	r1, [r4, #16]
 8004468:	f000 face 	bl	8004a08 <_free_r>
 800446c:	e7c7      	b.n	80043fe <__ssputs_r+0x46>
	...

08004470 <_svfiprintf_r>:
 8004470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004474:	4698      	mov	r8, r3
 8004476:	898b      	ldrh	r3, [r1, #12]
 8004478:	4607      	mov	r7, r0
 800447a:	061b      	lsls	r3, r3, #24
 800447c:	460d      	mov	r5, r1
 800447e:	4614      	mov	r4, r2
 8004480:	b09d      	sub	sp, #116	; 0x74
 8004482:	d50e      	bpl.n	80044a2 <_svfiprintf_r+0x32>
 8004484:	690b      	ldr	r3, [r1, #16]
 8004486:	b963      	cbnz	r3, 80044a2 <_svfiprintf_r+0x32>
 8004488:	2140      	movs	r1, #64	; 0x40
 800448a:	f000 fb25 	bl	8004ad8 <_malloc_r>
 800448e:	6028      	str	r0, [r5, #0]
 8004490:	6128      	str	r0, [r5, #16]
 8004492:	b920      	cbnz	r0, 800449e <_svfiprintf_r+0x2e>
 8004494:	230c      	movs	r3, #12
 8004496:	603b      	str	r3, [r7, #0]
 8004498:	f04f 30ff 	mov.w	r0, #4294967295
 800449c:	e0d1      	b.n	8004642 <_svfiprintf_r+0x1d2>
 800449e:	2340      	movs	r3, #64	; 0x40
 80044a0:	616b      	str	r3, [r5, #20]
 80044a2:	2300      	movs	r3, #0
 80044a4:	9309      	str	r3, [sp, #36]	; 0x24
 80044a6:	2320      	movs	r3, #32
 80044a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80044ac:	2330      	movs	r3, #48	; 0x30
 80044ae:	f04f 0901 	mov.w	r9, #1
 80044b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80044b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800465c <_svfiprintf_r+0x1ec>
 80044ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80044be:	4623      	mov	r3, r4
 80044c0:	469a      	mov	sl, r3
 80044c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044c6:	b10a      	cbz	r2, 80044cc <_svfiprintf_r+0x5c>
 80044c8:	2a25      	cmp	r2, #37	; 0x25
 80044ca:	d1f9      	bne.n	80044c0 <_svfiprintf_r+0x50>
 80044cc:	ebba 0b04 	subs.w	fp, sl, r4
 80044d0:	d00b      	beq.n	80044ea <_svfiprintf_r+0x7a>
 80044d2:	465b      	mov	r3, fp
 80044d4:	4622      	mov	r2, r4
 80044d6:	4629      	mov	r1, r5
 80044d8:	4638      	mov	r0, r7
 80044da:	f7ff ff6d 	bl	80043b8 <__ssputs_r>
 80044de:	3001      	adds	r0, #1
 80044e0:	f000 80aa 	beq.w	8004638 <_svfiprintf_r+0x1c8>
 80044e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044e6:	445a      	add	r2, fp
 80044e8:	9209      	str	r2, [sp, #36]	; 0x24
 80044ea:	f89a 3000 	ldrb.w	r3, [sl]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f000 80a2 	beq.w	8004638 <_svfiprintf_r+0x1c8>
 80044f4:	2300      	movs	r3, #0
 80044f6:	f04f 32ff 	mov.w	r2, #4294967295
 80044fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044fe:	f10a 0a01 	add.w	sl, sl, #1
 8004502:	9304      	str	r3, [sp, #16]
 8004504:	9307      	str	r3, [sp, #28]
 8004506:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800450a:	931a      	str	r3, [sp, #104]	; 0x68
 800450c:	4654      	mov	r4, sl
 800450e:	2205      	movs	r2, #5
 8004510:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004514:	4851      	ldr	r0, [pc, #324]	; (800465c <_svfiprintf_r+0x1ec>)
 8004516:	f000 fa41 	bl	800499c <memchr>
 800451a:	9a04      	ldr	r2, [sp, #16]
 800451c:	b9d8      	cbnz	r0, 8004556 <_svfiprintf_r+0xe6>
 800451e:	06d0      	lsls	r0, r2, #27
 8004520:	bf44      	itt	mi
 8004522:	2320      	movmi	r3, #32
 8004524:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004528:	0711      	lsls	r1, r2, #28
 800452a:	bf44      	itt	mi
 800452c:	232b      	movmi	r3, #43	; 0x2b
 800452e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004532:	f89a 3000 	ldrb.w	r3, [sl]
 8004536:	2b2a      	cmp	r3, #42	; 0x2a
 8004538:	d015      	beq.n	8004566 <_svfiprintf_r+0xf6>
 800453a:	4654      	mov	r4, sl
 800453c:	2000      	movs	r0, #0
 800453e:	f04f 0c0a 	mov.w	ip, #10
 8004542:	9a07      	ldr	r2, [sp, #28]
 8004544:	4621      	mov	r1, r4
 8004546:	f811 3b01 	ldrb.w	r3, [r1], #1
 800454a:	3b30      	subs	r3, #48	; 0x30
 800454c:	2b09      	cmp	r3, #9
 800454e:	d94e      	bls.n	80045ee <_svfiprintf_r+0x17e>
 8004550:	b1b0      	cbz	r0, 8004580 <_svfiprintf_r+0x110>
 8004552:	9207      	str	r2, [sp, #28]
 8004554:	e014      	b.n	8004580 <_svfiprintf_r+0x110>
 8004556:	eba0 0308 	sub.w	r3, r0, r8
 800455a:	fa09 f303 	lsl.w	r3, r9, r3
 800455e:	4313      	orrs	r3, r2
 8004560:	46a2      	mov	sl, r4
 8004562:	9304      	str	r3, [sp, #16]
 8004564:	e7d2      	b.n	800450c <_svfiprintf_r+0x9c>
 8004566:	9b03      	ldr	r3, [sp, #12]
 8004568:	1d19      	adds	r1, r3, #4
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	9103      	str	r1, [sp, #12]
 800456e:	2b00      	cmp	r3, #0
 8004570:	bfbb      	ittet	lt
 8004572:	425b      	neglt	r3, r3
 8004574:	f042 0202 	orrlt.w	r2, r2, #2
 8004578:	9307      	strge	r3, [sp, #28]
 800457a:	9307      	strlt	r3, [sp, #28]
 800457c:	bfb8      	it	lt
 800457e:	9204      	strlt	r2, [sp, #16]
 8004580:	7823      	ldrb	r3, [r4, #0]
 8004582:	2b2e      	cmp	r3, #46	; 0x2e
 8004584:	d10c      	bne.n	80045a0 <_svfiprintf_r+0x130>
 8004586:	7863      	ldrb	r3, [r4, #1]
 8004588:	2b2a      	cmp	r3, #42	; 0x2a
 800458a:	d135      	bne.n	80045f8 <_svfiprintf_r+0x188>
 800458c:	9b03      	ldr	r3, [sp, #12]
 800458e:	3402      	adds	r4, #2
 8004590:	1d1a      	adds	r2, r3, #4
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	9203      	str	r2, [sp, #12]
 8004596:	2b00      	cmp	r3, #0
 8004598:	bfb8      	it	lt
 800459a:	f04f 33ff 	movlt.w	r3, #4294967295
 800459e:	9305      	str	r3, [sp, #20]
 80045a0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004660 <_svfiprintf_r+0x1f0>
 80045a4:	2203      	movs	r2, #3
 80045a6:	4650      	mov	r0, sl
 80045a8:	7821      	ldrb	r1, [r4, #0]
 80045aa:	f000 f9f7 	bl	800499c <memchr>
 80045ae:	b140      	cbz	r0, 80045c2 <_svfiprintf_r+0x152>
 80045b0:	2340      	movs	r3, #64	; 0x40
 80045b2:	eba0 000a 	sub.w	r0, r0, sl
 80045b6:	fa03 f000 	lsl.w	r0, r3, r0
 80045ba:	9b04      	ldr	r3, [sp, #16]
 80045bc:	3401      	adds	r4, #1
 80045be:	4303      	orrs	r3, r0
 80045c0:	9304      	str	r3, [sp, #16]
 80045c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045c6:	2206      	movs	r2, #6
 80045c8:	4826      	ldr	r0, [pc, #152]	; (8004664 <_svfiprintf_r+0x1f4>)
 80045ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80045ce:	f000 f9e5 	bl	800499c <memchr>
 80045d2:	2800      	cmp	r0, #0
 80045d4:	d038      	beq.n	8004648 <_svfiprintf_r+0x1d8>
 80045d6:	4b24      	ldr	r3, [pc, #144]	; (8004668 <_svfiprintf_r+0x1f8>)
 80045d8:	bb1b      	cbnz	r3, 8004622 <_svfiprintf_r+0x1b2>
 80045da:	9b03      	ldr	r3, [sp, #12]
 80045dc:	3307      	adds	r3, #7
 80045de:	f023 0307 	bic.w	r3, r3, #7
 80045e2:	3308      	adds	r3, #8
 80045e4:	9303      	str	r3, [sp, #12]
 80045e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045e8:	4433      	add	r3, r6
 80045ea:	9309      	str	r3, [sp, #36]	; 0x24
 80045ec:	e767      	b.n	80044be <_svfiprintf_r+0x4e>
 80045ee:	460c      	mov	r4, r1
 80045f0:	2001      	movs	r0, #1
 80045f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80045f6:	e7a5      	b.n	8004544 <_svfiprintf_r+0xd4>
 80045f8:	2300      	movs	r3, #0
 80045fa:	f04f 0c0a 	mov.w	ip, #10
 80045fe:	4619      	mov	r1, r3
 8004600:	3401      	adds	r4, #1
 8004602:	9305      	str	r3, [sp, #20]
 8004604:	4620      	mov	r0, r4
 8004606:	f810 2b01 	ldrb.w	r2, [r0], #1
 800460a:	3a30      	subs	r2, #48	; 0x30
 800460c:	2a09      	cmp	r2, #9
 800460e:	d903      	bls.n	8004618 <_svfiprintf_r+0x1a8>
 8004610:	2b00      	cmp	r3, #0
 8004612:	d0c5      	beq.n	80045a0 <_svfiprintf_r+0x130>
 8004614:	9105      	str	r1, [sp, #20]
 8004616:	e7c3      	b.n	80045a0 <_svfiprintf_r+0x130>
 8004618:	4604      	mov	r4, r0
 800461a:	2301      	movs	r3, #1
 800461c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004620:	e7f0      	b.n	8004604 <_svfiprintf_r+0x194>
 8004622:	ab03      	add	r3, sp, #12
 8004624:	9300      	str	r3, [sp, #0]
 8004626:	462a      	mov	r2, r5
 8004628:	4638      	mov	r0, r7
 800462a:	4b10      	ldr	r3, [pc, #64]	; (800466c <_svfiprintf_r+0x1fc>)
 800462c:	a904      	add	r1, sp, #16
 800462e:	f3af 8000 	nop.w
 8004632:	1c42      	adds	r2, r0, #1
 8004634:	4606      	mov	r6, r0
 8004636:	d1d6      	bne.n	80045e6 <_svfiprintf_r+0x176>
 8004638:	89ab      	ldrh	r3, [r5, #12]
 800463a:	065b      	lsls	r3, r3, #25
 800463c:	f53f af2c 	bmi.w	8004498 <_svfiprintf_r+0x28>
 8004640:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004642:	b01d      	add	sp, #116	; 0x74
 8004644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004648:	ab03      	add	r3, sp, #12
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	462a      	mov	r2, r5
 800464e:	4638      	mov	r0, r7
 8004650:	4b06      	ldr	r3, [pc, #24]	; (800466c <_svfiprintf_r+0x1fc>)
 8004652:	a904      	add	r1, sp, #16
 8004654:	f000 f87c 	bl	8004750 <_printf_i>
 8004658:	e7eb      	b.n	8004632 <_svfiprintf_r+0x1c2>
 800465a:	bf00      	nop
 800465c:	08004ce8 	.word	0x08004ce8
 8004660:	08004cee 	.word	0x08004cee
 8004664:	08004cf2 	.word	0x08004cf2
 8004668:	00000000 	.word	0x00000000
 800466c:	080043b9 	.word	0x080043b9

08004670 <_printf_common>:
 8004670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004674:	4616      	mov	r6, r2
 8004676:	4699      	mov	r9, r3
 8004678:	688a      	ldr	r2, [r1, #8]
 800467a:	690b      	ldr	r3, [r1, #16]
 800467c:	4607      	mov	r7, r0
 800467e:	4293      	cmp	r3, r2
 8004680:	bfb8      	it	lt
 8004682:	4613      	movlt	r3, r2
 8004684:	6033      	str	r3, [r6, #0]
 8004686:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800468a:	460c      	mov	r4, r1
 800468c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004690:	b10a      	cbz	r2, 8004696 <_printf_common+0x26>
 8004692:	3301      	adds	r3, #1
 8004694:	6033      	str	r3, [r6, #0]
 8004696:	6823      	ldr	r3, [r4, #0]
 8004698:	0699      	lsls	r1, r3, #26
 800469a:	bf42      	ittt	mi
 800469c:	6833      	ldrmi	r3, [r6, #0]
 800469e:	3302      	addmi	r3, #2
 80046a0:	6033      	strmi	r3, [r6, #0]
 80046a2:	6825      	ldr	r5, [r4, #0]
 80046a4:	f015 0506 	ands.w	r5, r5, #6
 80046a8:	d106      	bne.n	80046b8 <_printf_common+0x48>
 80046aa:	f104 0a19 	add.w	sl, r4, #25
 80046ae:	68e3      	ldr	r3, [r4, #12]
 80046b0:	6832      	ldr	r2, [r6, #0]
 80046b2:	1a9b      	subs	r3, r3, r2
 80046b4:	42ab      	cmp	r3, r5
 80046b6:	dc28      	bgt.n	800470a <_printf_common+0x9a>
 80046b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80046bc:	1e13      	subs	r3, r2, #0
 80046be:	6822      	ldr	r2, [r4, #0]
 80046c0:	bf18      	it	ne
 80046c2:	2301      	movne	r3, #1
 80046c4:	0692      	lsls	r2, r2, #26
 80046c6:	d42d      	bmi.n	8004724 <_printf_common+0xb4>
 80046c8:	4649      	mov	r1, r9
 80046ca:	4638      	mov	r0, r7
 80046cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046d0:	47c0      	blx	r8
 80046d2:	3001      	adds	r0, #1
 80046d4:	d020      	beq.n	8004718 <_printf_common+0xa8>
 80046d6:	6823      	ldr	r3, [r4, #0]
 80046d8:	68e5      	ldr	r5, [r4, #12]
 80046da:	f003 0306 	and.w	r3, r3, #6
 80046de:	2b04      	cmp	r3, #4
 80046e0:	bf18      	it	ne
 80046e2:	2500      	movne	r5, #0
 80046e4:	6832      	ldr	r2, [r6, #0]
 80046e6:	f04f 0600 	mov.w	r6, #0
 80046ea:	68a3      	ldr	r3, [r4, #8]
 80046ec:	bf08      	it	eq
 80046ee:	1aad      	subeq	r5, r5, r2
 80046f0:	6922      	ldr	r2, [r4, #16]
 80046f2:	bf08      	it	eq
 80046f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046f8:	4293      	cmp	r3, r2
 80046fa:	bfc4      	itt	gt
 80046fc:	1a9b      	subgt	r3, r3, r2
 80046fe:	18ed      	addgt	r5, r5, r3
 8004700:	341a      	adds	r4, #26
 8004702:	42b5      	cmp	r5, r6
 8004704:	d11a      	bne.n	800473c <_printf_common+0xcc>
 8004706:	2000      	movs	r0, #0
 8004708:	e008      	b.n	800471c <_printf_common+0xac>
 800470a:	2301      	movs	r3, #1
 800470c:	4652      	mov	r2, sl
 800470e:	4649      	mov	r1, r9
 8004710:	4638      	mov	r0, r7
 8004712:	47c0      	blx	r8
 8004714:	3001      	adds	r0, #1
 8004716:	d103      	bne.n	8004720 <_printf_common+0xb0>
 8004718:	f04f 30ff 	mov.w	r0, #4294967295
 800471c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004720:	3501      	adds	r5, #1
 8004722:	e7c4      	b.n	80046ae <_printf_common+0x3e>
 8004724:	2030      	movs	r0, #48	; 0x30
 8004726:	18e1      	adds	r1, r4, r3
 8004728:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800472c:	1c5a      	adds	r2, r3, #1
 800472e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004732:	4422      	add	r2, r4
 8004734:	3302      	adds	r3, #2
 8004736:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800473a:	e7c5      	b.n	80046c8 <_printf_common+0x58>
 800473c:	2301      	movs	r3, #1
 800473e:	4622      	mov	r2, r4
 8004740:	4649      	mov	r1, r9
 8004742:	4638      	mov	r0, r7
 8004744:	47c0      	blx	r8
 8004746:	3001      	adds	r0, #1
 8004748:	d0e6      	beq.n	8004718 <_printf_common+0xa8>
 800474a:	3601      	adds	r6, #1
 800474c:	e7d9      	b.n	8004702 <_printf_common+0x92>
	...

08004750 <_printf_i>:
 8004750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004754:	7e0f      	ldrb	r7, [r1, #24]
 8004756:	4691      	mov	r9, r2
 8004758:	2f78      	cmp	r7, #120	; 0x78
 800475a:	4680      	mov	r8, r0
 800475c:	460c      	mov	r4, r1
 800475e:	469a      	mov	sl, r3
 8004760:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004762:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004766:	d807      	bhi.n	8004778 <_printf_i+0x28>
 8004768:	2f62      	cmp	r7, #98	; 0x62
 800476a:	d80a      	bhi.n	8004782 <_printf_i+0x32>
 800476c:	2f00      	cmp	r7, #0
 800476e:	f000 80d9 	beq.w	8004924 <_printf_i+0x1d4>
 8004772:	2f58      	cmp	r7, #88	; 0x58
 8004774:	f000 80a4 	beq.w	80048c0 <_printf_i+0x170>
 8004778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800477c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004780:	e03a      	b.n	80047f8 <_printf_i+0xa8>
 8004782:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004786:	2b15      	cmp	r3, #21
 8004788:	d8f6      	bhi.n	8004778 <_printf_i+0x28>
 800478a:	a101      	add	r1, pc, #4	; (adr r1, 8004790 <_printf_i+0x40>)
 800478c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004790:	080047e9 	.word	0x080047e9
 8004794:	080047fd 	.word	0x080047fd
 8004798:	08004779 	.word	0x08004779
 800479c:	08004779 	.word	0x08004779
 80047a0:	08004779 	.word	0x08004779
 80047a4:	08004779 	.word	0x08004779
 80047a8:	080047fd 	.word	0x080047fd
 80047ac:	08004779 	.word	0x08004779
 80047b0:	08004779 	.word	0x08004779
 80047b4:	08004779 	.word	0x08004779
 80047b8:	08004779 	.word	0x08004779
 80047bc:	0800490b 	.word	0x0800490b
 80047c0:	0800482d 	.word	0x0800482d
 80047c4:	080048ed 	.word	0x080048ed
 80047c8:	08004779 	.word	0x08004779
 80047cc:	08004779 	.word	0x08004779
 80047d0:	0800492d 	.word	0x0800492d
 80047d4:	08004779 	.word	0x08004779
 80047d8:	0800482d 	.word	0x0800482d
 80047dc:	08004779 	.word	0x08004779
 80047e0:	08004779 	.word	0x08004779
 80047e4:	080048f5 	.word	0x080048f5
 80047e8:	682b      	ldr	r3, [r5, #0]
 80047ea:	1d1a      	adds	r2, r3, #4
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	602a      	str	r2, [r5, #0]
 80047f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047f8:	2301      	movs	r3, #1
 80047fa:	e0a4      	b.n	8004946 <_printf_i+0x1f6>
 80047fc:	6820      	ldr	r0, [r4, #0]
 80047fe:	6829      	ldr	r1, [r5, #0]
 8004800:	0606      	lsls	r6, r0, #24
 8004802:	f101 0304 	add.w	r3, r1, #4
 8004806:	d50a      	bpl.n	800481e <_printf_i+0xce>
 8004808:	680e      	ldr	r6, [r1, #0]
 800480a:	602b      	str	r3, [r5, #0]
 800480c:	2e00      	cmp	r6, #0
 800480e:	da03      	bge.n	8004818 <_printf_i+0xc8>
 8004810:	232d      	movs	r3, #45	; 0x2d
 8004812:	4276      	negs	r6, r6
 8004814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004818:	230a      	movs	r3, #10
 800481a:	485e      	ldr	r0, [pc, #376]	; (8004994 <_printf_i+0x244>)
 800481c:	e019      	b.n	8004852 <_printf_i+0x102>
 800481e:	680e      	ldr	r6, [r1, #0]
 8004820:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004824:	602b      	str	r3, [r5, #0]
 8004826:	bf18      	it	ne
 8004828:	b236      	sxthne	r6, r6
 800482a:	e7ef      	b.n	800480c <_printf_i+0xbc>
 800482c:	682b      	ldr	r3, [r5, #0]
 800482e:	6820      	ldr	r0, [r4, #0]
 8004830:	1d19      	adds	r1, r3, #4
 8004832:	6029      	str	r1, [r5, #0]
 8004834:	0601      	lsls	r1, r0, #24
 8004836:	d501      	bpl.n	800483c <_printf_i+0xec>
 8004838:	681e      	ldr	r6, [r3, #0]
 800483a:	e002      	b.n	8004842 <_printf_i+0xf2>
 800483c:	0646      	lsls	r6, r0, #25
 800483e:	d5fb      	bpl.n	8004838 <_printf_i+0xe8>
 8004840:	881e      	ldrh	r6, [r3, #0]
 8004842:	2f6f      	cmp	r7, #111	; 0x6f
 8004844:	bf0c      	ite	eq
 8004846:	2308      	moveq	r3, #8
 8004848:	230a      	movne	r3, #10
 800484a:	4852      	ldr	r0, [pc, #328]	; (8004994 <_printf_i+0x244>)
 800484c:	2100      	movs	r1, #0
 800484e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004852:	6865      	ldr	r5, [r4, #4]
 8004854:	2d00      	cmp	r5, #0
 8004856:	bfa8      	it	ge
 8004858:	6821      	ldrge	r1, [r4, #0]
 800485a:	60a5      	str	r5, [r4, #8]
 800485c:	bfa4      	itt	ge
 800485e:	f021 0104 	bicge.w	r1, r1, #4
 8004862:	6021      	strge	r1, [r4, #0]
 8004864:	b90e      	cbnz	r6, 800486a <_printf_i+0x11a>
 8004866:	2d00      	cmp	r5, #0
 8004868:	d04d      	beq.n	8004906 <_printf_i+0x1b6>
 800486a:	4615      	mov	r5, r2
 800486c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004870:	fb03 6711 	mls	r7, r3, r1, r6
 8004874:	5dc7      	ldrb	r7, [r0, r7]
 8004876:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800487a:	4637      	mov	r7, r6
 800487c:	42bb      	cmp	r3, r7
 800487e:	460e      	mov	r6, r1
 8004880:	d9f4      	bls.n	800486c <_printf_i+0x11c>
 8004882:	2b08      	cmp	r3, #8
 8004884:	d10b      	bne.n	800489e <_printf_i+0x14e>
 8004886:	6823      	ldr	r3, [r4, #0]
 8004888:	07de      	lsls	r6, r3, #31
 800488a:	d508      	bpl.n	800489e <_printf_i+0x14e>
 800488c:	6923      	ldr	r3, [r4, #16]
 800488e:	6861      	ldr	r1, [r4, #4]
 8004890:	4299      	cmp	r1, r3
 8004892:	bfde      	ittt	le
 8004894:	2330      	movle	r3, #48	; 0x30
 8004896:	f805 3c01 	strble.w	r3, [r5, #-1]
 800489a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800489e:	1b52      	subs	r2, r2, r5
 80048a0:	6122      	str	r2, [r4, #16]
 80048a2:	464b      	mov	r3, r9
 80048a4:	4621      	mov	r1, r4
 80048a6:	4640      	mov	r0, r8
 80048a8:	f8cd a000 	str.w	sl, [sp]
 80048ac:	aa03      	add	r2, sp, #12
 80048ae:	f7ff fedf 	bl	8004670 <_printf_common>
 80048b2:	3001      	adds	r0, #1
 80048b4:	d14c      	bne.n	8004950 <_printf_i+0x200>
 80048b6:	f04f 30ff 	mov.w	r0, #4294967295
 80048ba:	b004      	add	sp, #16
 80048bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048c0:	4834      	ldr	r0, [pc, #208]	; (8004994 <_printf_i+0x244>)
 80048c2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80048c6:	6829      	ldr	r1, [r5, #0]
 80048c8:	6823      	ldr	r3, [r4, #0]
 80048ca:	f851 6b04 	ldr.w	r6, [r1], #4
 80048ce:	6029      	str	r1, [r5, #0]
 80048d0:	061d      	lsls	r5, r3, #24
 80048d2:	d514      	bpl.n	80048fe <_printf_i+0x1ae>
 80048d4:	07df      	lsls	r7, r3, #31
 80048d6:	bf44      	itt	mi
 80048d8:	f043 0320 	orrmi.w	r3, r3, #32
 80048dc:	6023      	strmi	r3, [r4, #0]
 80048de:	b91e      	cbnz	r6, 80048e8 <_printf_i+0x198>
 80048e0:	6823      	ldr	r3, [r4, #0]
 80048e2:	f023 0320 	bic.w	r3, r3, #32
 80048e6:	6023      	str	r3, [r4, #0]
 80048e8:	2310      	movs	r3, #16
 80048ea:	e7af      	b.n	800484c <_printf_i+0xfc>
 80048ec:	6823      	ldr	r3, [r4, #0]
 80048ee:	f043 0320 	orr.w	r3, r3, #32
 80048f2:	6023      	str	r3, [r4, #0]
 80048f4:	2378      	movs	r3, #120	; 0x78
 80048f6:	4828      	ldr	r0, [pc, #160]	; (8004998 <_printf_i+0x248>)
 80048f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048fc:	e7e3      	b.n	80048c6 <_printf_i+0x176>
 80048fe:	0659      	lsls	r1, r3, #25
 8004900:	bf48      	it	mi
 8004902:	b2b6      	uxthmi	r6, r6
 8004904:	e7e6      	b.n	80048d4 <_printf_i+0x184>
 8004906:	4615      	mov	r5, r2
 8004908:	e7bb      	b.n	8004882 <_printf_i+0x132>
 800490a:	682b      	ldr	r3, [r5, #0]
 800490c:	6826      	ldr	r6, [r4, #0]
 800490e:	1d18      	adds	r0, r3, #4
 8004910:	6961      	ldr	r1, [r4, #20]
 8004912:	6028      	str	r0, [r5, #0]
 8004914:	0635      	lsls	r5, r6, #24
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	d501      	bpl.n	800491e <_printf_i+0x1ce>
 800491a:	6019      	str	r1, [r3, #0]
 800491c:	e002      	b.n	8004924 <_printf_i+0x1d4>
 800491e:	0670      	lsls	r0, r6, #25
 8004920:	d5fb      	bpl.n	800491a <_printf_i+0x1ca>
 8004922:	8019      	strh	r1, [r3, #0]
 8004924:	2300      	movs	r3, #0
 8004926:	4615      	mov	r5, r2
 8004928:	6123      	str	r3, [r4, #16]
 800492a:	e7ba      	b.n	80048a2 <_printf_i+0x152>
 800492c:	682b      	ldr	r3, [r5, #0]
 800492e:	2100      	movs	r1, #0
 8004930:	1d1a      	adds	r2, r3, #4
 8004932:	602a      	str	r2, [r5, #0]
 8004934:	681d      	ldr	r5, [r3, #0]
 8004936:	6862      	ldr	r2, [r4, #4]
 8004938:	4628      	mov	r0, r5
 800493a:	f000 f82f 	bl	800499c <memchr>
 800493e:	b108      	cbz	r0, 8004944 <_printf_i+0x1f4>
 8004940:	1b40      	subs	r0, r0, r5
 8004942:	6060      	str	r0, [r4, #4]
 8004944:	6863      	ldr	r3, [r4, #4]
 8004946:	6123      	str	r3, [r4, #16]
 8004948:	2300      	movs	r3, #0
 800494a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800494e:	e7a8      	b.n	80048a2 <_printf_i+0x152>
 8004950:	462a      	mov	r2, r5
 8004952:	4649      	mov	r1, r9
 8004954:	4640      	mov	r0, r8
 8004956:	6923      	ldr	r3, [r4, #16]
 8004958:	47d0      	blx	sl
 800495a:	3001      	adds	r0, #1
 800495c:	d0ab      	beq.n	80048b6 <_printf_i+0x166>
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	079b      	lsls	r3, r3, #30
 8004962:	d413      	bmi.n	800498c <_printf_i+0x23c>
 8004964:	68e0      	ldr	r0, [r4, #12]
 8004966:	9b03      	ldr	r3, [sp, #12]
 8004968:	4298      	cmp	r0, r3
 800496a:	bfb8      	it	lt
 800496c:	4618      	movlt	r0, r3
 800496e:	e7a4      	b.n	80048ba <_printf_i+0x16a>
 8004970:	2301      	movs	r3, #1
 8004972:	4632      	mov	r2, r6
 8004974:	4649      	mov	r1, r9
 8004976:	4640      	mov	r0, r8
 8004978:	47d0      	blx	sl
 800497a:	3001      	adds	r0, #1
 800497c:	d09b      	beq.n	80048b6 <_printf_i+0x166>
 800497e:	3501      	adds	r5, #1
 8004980:	68e3      	ldr	r3, [r4, #12]
 8004982:	9903      	ldr	r1, [sp, #12]
 8004984:	1a5b      	subs	r3, r3, r1
 8004986:	42ab      	cmp	r3, r5
 8004988:	dcf2      	bgt.n	8004970 <_printf_i+0x220>
 800498a:	e7eb      	b.n	8004964 <_printf_i+0x214>
 800498c:	2500      	movs	r5, #0
 800498e:	f104 0619 	add.w	r6, r4, #25
 8004992:	e7f5      	b.n	8004980 <_printf_i+0x230>
 8004994:	08004cf9 	.word	0x08004cf9
 8004998:	08004d0a 	.word	0x08004d0a

0800499c <memchr>:
 800499c:	4603      	mov	r3, r0
 800499e:	b510      	push	{r4, lr}
 80049a0:	b2c9      	uxtb	r1, r1
 80049a2:	4402      	add	r2, r0
 80049a4:	4293      	cmp	r3, r2
 80049a6:	4618      	mov	r0, r3
 80049a8:	d101      	bne.n	80049ae <memchr+0x12>
 80049aa:	2000      	movs	r0, #0
 80049ac:	e003      	b.n	80049b6 <memchr+0x1a>
 80049ae:	7804      	ldrb	r4, [r0, #0]
 80049b0:	3301      	adds	r3, #1
 80049b2:	428c      	cmp	r4, r1
 80049b4:	d1f6      	bne.n	80049a4 <memchr+0x8>
 80049b6:	bd10      	pop	{r4, pc}

080049b8 <memcpy>:
 80049b8:	440a      	add	r2, r1
 80049ba:	4291      	cmp	r1, r2
 80049bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80049c0:	d100      	bne.n	80049c4 <memcpy+0xc>
 80049c2:	4770      	bx	lr
 80049c4:	b510      	push	{r4, lr}
 80049c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049ca:	4291      	cmp	r1, r2
 80049cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049d0:	d1f9      	bne.n	80049c6 <memcpy+0xe>
 80049d2:	bd10      	pop	{r4, pc}

080049d4 <memmove>:
 80049d4:	4288      	cmp	r0, r1
 80049d6:	b510      	push	{r4, lr}
 80049d8:	eb01 0402 	add.w	r4, r1, r2
 80049dc:	d902      	bls.n	80049e4 <memmove+0x10>
 80049de:	4284      	cmp	r4, r0
 80049e0:	4623      	mov	r3, r4
 80049e2:	d807      	bhi.n	80049f4 <memmove+0x20>
 80049e4:	1e43      	subs	r3, r0, #1
 80049e6:	42a1      	cmp	r1, r4
 80049e8:	d008      	beq.n	80049fc <memmove+0x28>
 80049ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80049f2:	e7f8      	b.n	80049e6 <memmove+0x12>
 80049f4:	4601      	mov	r1, r0
 80049f6:	4402      	add	r2, r0
 80049f8:	428a      	cmp	r2, r1
 80049fa:	d100      	bne.n	80049fe <memmove+0x2a>
 80049fc:	bd10      	pop	{r4, pc}
 80049fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a06:	e7f7      	b.n	80049f8 <memmove+0x24>

08004a08 <_free_r>:
 8004a08:	b538      	push	{r3, r4, r5, lr}
 8004a0a:	4605      	mov	r5, r0
 8004a0c:	2900      	cmp	r1, #0
 8004a0e:	d040      	beq.n	8004a92 <_free_r+0x8a>
 8004a10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a14:	1f0c      	subs	r4, r1, #4
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	bfb8      	it	lt
 8004a1a:	18e4      	addlt	r4, r4, r3
 8004a1c:	f000 f910 	bl	8004c40 <__malloc_lock>
 8004a20:	4a1c      	ldr	r2, [pc, #112]	; (8004a94 <_free_r+0x8c>)
 8004a22:	6813      	ldr	r3, [r2, #0]
 8004a24:	b933      	cbnz	r3, 8004a34 <_free_r+0x2c>
 8004a26:	6063      	str	r3, [r4, #4]
 8004a28:	6014      	str	r4, [r2, #0]
 8004a2a:	4628      	mov	r0, r5
 8004a2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a30:	f000 b90c 	b.w	8004c4c <__malloc_unlock>
 8004a34:	42a3      	cmp	r3, r4
 8004a36:	d908      	bls.n	8004a4a <_free_r+0x42>
 8004a38:	6820      	ldr	r0, [r4, #0]
 8004a3a:	1821      	adds	r1, r4, r0
 8004a3c:	428b      	cmp	r3, r1
 8004a3e:	bf01      	itttt	eq
 8004a40:	6819      	ldreq	r1, [r3, #0]
 8004a42:	685b      	ldreq	r3, [r3, #4]
 8004a44:	1809      	addeq	r1, r1, r0
 8004a46:	6021      	streq	r1, [r4, #0]
 8004a48:	e7ed      	b.n	8004a26 <_free_r+0x1e>
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	b10b      	cbz	r3, 8004a54 <_free_r+0x4c>
 8004a50:	42a3      	cmp	r3, r4
 8004a52:	d9fa      	bls.n	8004a4a <_free_r+0x42>
 8004a54:	6811      	ldr	r1, [r2, #0]
 8004a56:	1850      	adds	r0, r2, r1
 8004a58:	42a0      	cmp	r0, r4
 8004a5a:	d10b      	bne.n	8004a74 <_free_r+0x6c>
 8004a5c:	6820      	ldr	r0, [r4, #0]
 8004a5e:	4401      	add	r1, r0
 8004a60:	1850      	adds	r0, r2, r1
 8004a62:	4283      	cmp	r3, r0
 8004a64:	6011      	str	r1, [r2, #0]
 8004a66:	d1e0      	bne.n	8004a2a <_free_r+0x22>
 8004a68:	6818      	ldr	r0, [r3, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	4401      	add	r1, r0
 8004a6e:	6011      	str	r1, [r2, #0]
 8004a70:	6053      	str	r3, [r2, #4]
 8004a72:	e7da      	b.n	8004a2a <_free_r+0x22>
 8004a74:	d902      	bls.n	8004a7c <_free_r+0x74>
 8004a76:	230c      	movs	r3, #12
 8004a78:	602b      	str	r3, [r5, #0]
 8004a7a:	e7d6      	b.n	8004a2a <_free_r+0x22>
 8004a7c:	6820      	ldr	r0, [r4, #0]
 8004a7e:	1821      	adds	r1, r4, r0
 8004a80:	428b      	cmp	r3, r1
 8004a82:	bf01      	itttt	eq
 8004a84:	6819      	ldreq	r1, [r3, #0]
 8004a86:	685b      	ldreq	r3, [r3, #4]
 8004a88:	1809      	addeq	r1, r1, r0
 8004a8a:	6021      	streq	r1, [r4, #0]
 8004a8c:	6063      	str	r3, [r4, #4]
 8004a8e:	6054      	str	r4, [r2, #4]
 8004a90:	e7cb      	b.n	8004a2a <_free_r+0x22>
 8004a92:	bd38      	pop	{r3, r4, r5, pc}
 8004a94:	20000610 	.word	0x20000610

08004a98 <sbrk_aligned>:
 8004a98:	b570      	push	{r4, r5, r6, lr}
 8004a9a:	4e0e      	ldr	r6, [pc, #56]	; (8004ad4 <sbrk_aligned+0x3c>)
 8004a9c:	460c      	mov	r4, r1
 8004a9e:	6831      	ldr	r1, [r6, #0]
 8004aa0:	4605      	mov	r5, r0
 8004aa2:	b911      	cbnz	r1, 8004aaa <sbrk_aligned+0x12>
 8004aa4:	f000 f8bc 	bl	8004c20 <_sbrk_r>
 8004aa8:	6030      	str	r0, [r6, #0]
 8004aaa:	4621      	mov	r1, r4
 8004aac:	4628      	mov	r0, r5
 8004aae:	f000 f8b7 	bl	8004c20 <_sbrk_r>
 8004ab2:	1c43      	adds	r3, r0, #1
 8004ab4:	d00a      	beq.n	8004acc <sbrk_aligned+0x34>
 8004ab6:	1cc4      	adds	r4, r0, #3
 8004ab8:	f024 0403 	bic.w	r4, r4, #3
 8004abc:	42a0      	cmp	r0, r4
 8004abe:	d007      	beq.n	8004ad0 <sbrk_aligned+0x38>
 8004ac0:	1a21      	subs	r1, r4, r0
 8004ac2:	4628      	mov	r0, r5
 8004ac4:	f000 f8ac 	bl	8004c20 <_sbrk_r>
 8004ac8:	3001      	adds	r0, #1
 8004aca:	d101      	bne.n	8004ad0 <sbrk_aligned+0x38>
 8004acc:	f04f 34ff 	mov.w	r4, #4294967295
 8004ad0:	4620      	mov	r0, r4
 8004ad2:	bd70      	pop	{r4, r5, r6, pc}
 8004ad4:	20000614 	.word	0x20000614

08004ad8 <_malloc_r>:
 8004ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004adc:	1ccd      	adds	r5, r1, #3
 8004ade:	f025 0503 	bic.w	r5, r5, #3
 8004ae2:	3508      	adds	r5, #8
 8004ae4:	2d0c      	cmp	r5, #12
 8004ae6:	bf38      	it	cc
 8004ae8:	250c      	movcc	r5, #12
 8004aea:	2d00      	cmp	r5, #0
 8004aec:	4607      	mov	r7, r0
 8004aee:	db01      	blt.n	8004af4 <_malloc_r+0x1c>
 8004af0:	42a9      	cmp	r1, r5
 8004af2:	d905      	bls.n	8004b00 <_malloc_r+0x28>
 8004af4:	230c      	movs	r3, #12
 8004af6:	2600      	movs	r6, #0
 8004af8:	603b      	str	r3, [r7, #0]
 8004afa:	4630      	mov	r0, r6
 8004afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b00:	4e2e      	ldr	r6, [pc, #184]	; (8004bbc <_malloc_r+0xe4>)
 8004b02:	f000 f89d 	bl	8004c40 <__malloc_lock>
 8004b06:	6833      	ldr	r3, [r6, #0]
 8004b08:	461c      	mov	r4, r3
 8004b0a:	bb34      	cbnz	r4, 8004b5a <_malloc_r+0x82>
 8004b0c:	4629      	mov	r1, r5
 8004b0e:	4638      	mov	r0, r7
 8004b10:	f7ff ffc2 	bl	8004a98 <sbrk_aligned>
 8004b14:	1c43      	adds	r3, r0, #1
 8004b16:	4604      	mov	r4, r0
 8004b18:	d14d      	bne.n	8004bb6 <_malloc_r+0xde>
 8004b1a:	6834      	ldr	r4, [r6, #0]
 8004b1c:	4626      	mov	r6, r4
 8004b1e:	2e00      	cmp	r6, #0
 8004b20:	d140      	bne.n	8004ba4 <_malloc_r+0xcc>
 8004b22:	6823      	ldr	r3, [r4, #0]
 8004b24:	4631      	mov	r1, r6
 8004b26:	4638      	mov	r0, r7
 8004b28:	eb04 0803 	add.w	r8, r4, r3
 8004b2c:	f000 f878 	bl	8004c20 <_sbrk_r>
 8004b30:	4580      	cmp	r8, r0
 8004b32:	d13a      	bne.n	8004baa <_malloc_r+0xd2>
 8004b34:	6821      	ldr	r1, [r4, #0]
 8004b36:	3503      	adds	r5, #3
 8004b38:	1a6d      	subs	r5, r5, r1
 8004b3a:	f025 0503 	bic.w	r5, r5, #3
 8004b3e:	3508      	adds	r5, #8
 8004b40:	2d0c      	cmp	r5, #12
 8004b42:	bf38      	it	cc
 8004b44:	250c      	movcc	r5, #12
 8004b46:	4638      	mov	r0, r7
 8004b48:	4629      	mov	r1, r5
 8004b4a:	f7ff ffa5 	bl	8004a98 <sbrk_aligned>
 8004b4e:	3001      	adds	r0, #1
 8004b50:	d02b      	beq.n	8004baa <_malloc_r+0xd2>
 8004b52:	6823      	ldr	r3, [r4, #0]
 8004b54:	442b      	add	r3, r5
 8004b56:	6023      	str	r3, [r4, #0]
 8004b58:	e00e      	b.n	8004b78 <_malloc_r+0xa0>
 8004b5a:	6822      	ldr	r2, [r4, #0]
 8004b5c:	1b52      	subs	r2, r2, r5
 8004b5e:	d41e      	bmi.n	8004b9e <_malloc_r+0xc6>
 8004b60:	2a0b      	cmp	r2, #11
 8004b62:	d916      	bls.n	8004b92 <_malloc_r+0xba>
 8004b64:	1961      	adds	r1, r4, r5
 8004b66:	42a3      	cmp	r3, r4
 8004b68:	6025      	str	r5, [r4, #0]
 8004b6a:	bf18      	it	ne
 8004b6c:	6059      	strne	r1, [r3, #4]
 8004b6e:	6863      	ldr	r3, [r4, #4]
 8004b70:	bf08      	it	eq
 8004b72:	6031      	streq	r1, [r6, #0]
 8004b74:	5162      	str	r2, [r4, r5]
 8004b76:	604b      	str	r3, [r1, #4]
 8004b78:	4638      	mov	r0, r7
 8004b7a:	f104 060b 	add.w	r6, r4, #11
 8004b7e:	f000 f865 	bl	8004c4c <__malloc_unlock>
 8004b82:	f026 0607 	bic.w	r6, r6, #7
 8004b86:	1d23      	adds	r3, r4, #4
 8004b88:	1af2      	subs	r2, r6, r3
 8004b8a:	d0b6      	beq.n	8004afa <_malloc_r+0x22>
 8004b8c:	1b9b      	subs	r3, r3, r6
 8004b8e:	50a3      	str	r3, [r4, r2]
 8004b90:	e7b3      	b.n	8004afa <_malloc_r+0x22>
 8004b92:	6862      	ldr	r2, [r4, #4]
 8004b94:	42a3      	cmp	r3, r4
 8004b96:	bf0c      	ite	eq
 8004b98:	6032      	streq	r2, [r6, #0]
 8004b9a:	605a      	strne	r2, [r3, #4]
 8004b9c:	e7ec      	b.n	8004b78 <_malloc_r+0xa0>
 8004b9e:	4623      	mov	r3, r4
 8004ba0:	6864      	ldr	r4, [r4, #4]
 8004ba2:	e7b2      	b.n	8004b0a <_malloc_r+0x32>
 8004ba4:	4634      	mov	r4, r6
 8004ba6:	6876      	ldr	r6, [r6, #4]
 8004ba8:	e7b9      	b.n	8004b1e <_malloc_r+0x46>
 8004baa:	230c      	movs	r3, #12
 8004bac:	4638      	mov	r0, r7
 8004bae:	603b      	str	r3, [r7, #0]
 8004bb0:	f000 f84c 	bl	8004c4c <__malloc_unlock>
 8004bb4:	e7a1      	b.n	8004afa <_malloc_r+0x22>
 8004bb6:	6025      	str	r5, [r4, #0]
 8004bb8:	e7de      	b.n	8004b78 <_malloc_r+0xa0>
 8004bba:	bf00      	nop
 8004bbc:	20000610 	.word	0x20000610

08004bc0 <_realloc_r>:
 8004bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bc4:	4680      	mov	r8, r0
 8004bc6:	4614      	mov	r4, r2
 8004bc8:	460e      	mov	r6, r1
 8004bca:	b921      	cbnz	r1, 8004bd6 <_realloc_r+0x16>
 8004bcc:	4611      	mov	r1, r2
 8004bce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bd2:	f7ff bf81 	b.w	8004ad8 <_malloc_r>
 8004bd6:	b92a      	cbnz	r2, 8004be4 <_realloc_r+0x24>
 8004bd8:	f7ff ff16 	bl	8004a08 <_free_r>
 8004bdc:	4625      	mov	r5, r4
 8004bde:	4628      	mov	r0, r5
 8004be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004be4:	f000 f838 	bl	8004c58 <_malloc_usable_size_r>
 8004be8:	4284      	cmp	r4, r0
 8004bea:	4607      	mov	r7, r0
 8004bec:	d802      	bhi.n	8004bf4 <_realloc_r+0x34>
 8004bee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004bf2:	d812      	bhi.n	8004c1a <_realloc_r+0x5a>
 8004bf4:	4621      	mov	r1, r4
 8004bf6:	4640      	mov	r0, r8
 8004bf8:	f7ff ff6e 	bl	8004ad8 <_malloc_r>
 8004bfc:	4605      	mov	r5, r0
 8004bfe:	2800      	cmp	r0, #0
 8004c00:	d0ed      	beq.n	8004bde <_realloc_r+0x1e>
 8004c02:	42bc      	cmp	r4, r7
 8004c04:	4622      	mov	r2, r4
 8004c06:	4631      	mov	r1, r6
 8004c08:	bf28      	it	cs
 8004c0a:	463a      	movcs	r2, r7
 8004c0c:	f7ff fed4 	bl	80049b8 <memcpy>
 8004c10:	4631      	mov	r1, r6
 8004c12:	4640      	mov	r0, r8
 8004c14:	f7ff fef8 	bl	8004a08 <_free_r>
 8004c18:	e7e1      	b.n	8004bde <_realloc_r+0x1e>
 8004c1a:	4635      	mov	r5, r6
 8004c1c:	e7df      	b.n	8004bde <_realloc_r+0x1e>
	...

08004c20 <_sbrk_r>:
 8004c20:	b538      	push	{r3, r4, r5, lr}
 8004c22:	2300      	movs	r3, #0
 8004c24:	4d05      	ldr	r5, [pc, #20]	; (8004c3c <_sbrk_r+0x1c>)
 8004c26:	4604      	mov	r4, r0
 8004c28:	4608      	mov	r0, r1
 8004c2a:	602b      	str	r3, [r5, #0]
 8004c2c:	f7fc fdc6 	bl	80017bc <_sbrk>
 8004c30:	1c43      	adds	r3, r0, #1
 8004c32:	d102      	bne.n	8004c3a <_sbrk_r+0x1a>
 8004c34:	682b      	ldr	r3, [r5, #0]
 8004c36:	b103      	cbz	r3, 8004c3a <_sbrk_r+0x1a>
 8004c38:	6023      	str	r3, [r4, #0]
 8004c3a:	bd38      	pop	{r3, r4, r5, pc}
 8004c3c:	20000618 	.word	0x20000618

08004c40 <__malloc_lock>:
 8004c40:	4801      	ldr	r0, [pc, #4]	; (8004c48 <__malloc_lock+0x8>)
 8004c42:	f000 b811 	b.w	8004c68 <__retarget_lock_acquire_recursive>
 8004c46:	bf00      	nop
 8004c48:	2000061c 	.word	0x2000061c

08004c4c <__malloc_unlock>:
 8004c4c:	4801      	ldr	r0, [pc, #4]	; (8004c54 <__malloc_unlock+0x8>)
 8004c4e:	f000 b80c 	b.w	8004c6a <__retarget_lock_release_recursive>
 8004c52:	bf00      	nop
 8004c54:	2000061c 	.word	0x2000061c

08004c58 <_malloc_usable_size_r>:
 8004c58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c5c:	1f18      	subs	r0, r3, #4
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	bfbc      	itt	lt
 8004c62:	580b      	ldrlt	r3, [r1, r0]
 8004c64:	18c0      	addlt	r0, r0, r3
 8004c66:	4770      	bx	lr

08004c68 <__retarget_lock_acquire_recursive>:
 8004c68:	4770      	bx	lr

08004c6a <__retarget_lock_release_recursive>:
 8004c6a:	4770      	bx	lr

08004c6c <_init>:
 8004c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c6e:	bf00      	nop
 8004c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c72:	bc08      	pop	{r3}
 8004c74:	469e      	mov	lr, r3
 8004c76:	4770      	bx	lr

08004c78 <_fini>:
 8004c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7a:	bf00      	nop
 8004c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c7e:	bc08      	pop	{r3}
 8004c80:	469e      	mov	lr, r3
 8004c82:	4770      	bx	lr
