
Project Dung final velo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008598  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  080086a8  080086a8  000186a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b8c  08008b8c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  08008b8c  08008b8c  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008b8c  08008b8c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b8c  08008b8c  00018b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b90  08008b90  00018b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08008b94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  200001ec  08008d80  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  08008d80  000204a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e2a0  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000218f  00000000  00000000  0002e4b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  00030648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d98  00000000  00000000  000314a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019027  00000000  00000000  00032240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010079  00000000  00000000  0004b267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d06c  00000000  00000000  0005b2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e834c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f54  00000000  00000000  000e839c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	08008690 	.word	0x08008690

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	08008690 	.word	0x08008690

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2uiz>:
 8000bf0:	004a      	lsls	r2, r1, #1
 8000bf2:	d211      	bcs.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bf4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf8:	d211      	bcs.n	8000c1e <__aeabi_d2uiz+0x2e>
 8000bfa:	d50d      	bpl.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bfc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c04:	d40e      	bmi.n	8000c24 <__aeabi_d2uiz+0x34>
 8000c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_d2uiz+0x3a>
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_d2f>:
 8000c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c38:	bf24      	itt	cs
 8000c3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_d2f+0x30>
 8000c44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c64:	d121      	bne.n	8000caa <__aeabi_d2f+0x7a>
 8000c66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c6a:	bfbc      	itt	lt
 8000c6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c70:	4770      	bxlt	lr
 8000c72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7a:	f1c2 0218 	rsb	r2, r2, #24
 8000c7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c86:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	f040 0001 	orrne.w	r0, r0, #1
 8000c90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ca0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca8:	e7cc      	b.n	8000c44 <__aeabi_d2f+0x14>
 8000caa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cae:	d107      	bne.n	8000cc0 <__aeabi_d2f+0x90>
 8000cb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cbe:	4770      	bxne	lr
 8000cc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__aeabi_frsub>:
 8000cd0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cd4:	e002      	b.n	8000cdc <__addsf3>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_fsub>:
 8000cd8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cdc <__addsf3>:
 8000cdc:	0042      	lsls	r2, r0, #1
 8000cde:	bf1f      	itttt	ne
 8000ce0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ce4:	ea92 0f03 	teqne	r2, r3
 8000ce8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf0:	d06a      	beq.n	8000dc8 <__addsf3+0xec>
 8000cf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cfa:	bfc1      	itttt	gt
 8000cfc:	18d2      	addgt	r2, r2, r3
 8000cfe:	4041      	eorgt	r1, r0
 8000d00:	4048      	eorgt	r0, r1
 8000d02:	4041      	eorgt	r1, r0
 8000d04:	bfb8      	it	lt
 8000d06:	425b      	neglt	r3, r3
 8000d08:	2b19      	cmp	r3, #25
 8000d0a:	bf88      	it	hi
 8000d0c:	4770      	bxhi	lr
 8000d0e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d1a:	bf18      	it	ne
 8000d1c:	4240      	negne	r0, r0
 8000d1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d22:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d26:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d2a:	bf18      	it	ne
 8000d2c:	4249      	negne	r1, r1
 8000d2e:	ea92 0f03 	teq	r2, r3
 8000d32:	d03f      	beq.n	8000db4 <__addsf3+0xd8>
 8000d34:	f1a2 0201 	sub.w	r2, r2, #1
 8000d38:	fa41 fc03 	asr.w	ip, r1, r3
 8000d3c:	eb10 000c 	adds.w	r0, r0, ip
 8000d40:	f1c3 0320 	rsb	r3, r3, #32
 8000d44:	fa01 f103 	lsl.w	r1, r1, r3
 8000d48:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__addsf3+0x78>
 8000d4e:	4249      	negs	r1, r1
 8000d50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d54:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d58:	d313      	bcc.n	8000d82 <__addsf3+0xa6>
 8000d5a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d5e:	d306      	bcc.n	8000d6e <__addsf3+0x92>
 8000d60:	0840      	lsrs	r0, r0, #1
 8000d62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d66:	f102 0201 	add.w	r2, r2, #1
 8000d6a:	2afe      	cmp	r2, #254	; 0xfe
 8000d6c:	d251      	bcs.n	8000e12 <__addsf3+0x136>
 8000d6e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	ea40 0003 	orr.w	r0, r0, r3
 8000d80:	4770      	bx	lr
 8000d82:	0049      	lsls	r1, r1, #1
 8000d84:	eb40 0000 	adc.w	r0, r0, r0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	bf28      	it	cs
 8000d8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d90:	d2ed      	bcs.n	8000d6e <__addsf3+0x92>
 8000d92:	fab0 fc80 	clz	ip, r0
 8000d96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000da2:	bfaa      	itet	ge
 8000da4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da8:	4252      	neglt	r2, r2
 8000daa:	4318      	orrge	r0, r3
 8000dac:	bfbc      	itt	lt
 8000dae:	40d0      	lsrlt	r0, r2
 8000db0:	4318      	orrlt	r0, r3
 8000db2:	4770      	bx	lr
 8000db4:	f092 0f00 	teq	r2, #0
 8000db8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000dbc:	bf06      	itte	eq
 8000dbe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dc2:	3201      	addeq	r2, #1
 8000dc4:	3b01      	subne	r3, #1
 8000dc6:	e7b5      	b.n	8000d34 <__addsf3+0x58>
 8000dc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd0:	bf18      	it	ne
 8000dd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dd6:	d021      	beq.n	8000e1c <__addsf3+0x140>
 8000dd8:	ea92 0f03 	teq	r2, r3
 8000ddc:	d004      	beq.n	8000de8 <__addsf3+0x10c>
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	bf08      	it	eq
 8000de4:	4608      	moveq	r0, r1
 8000de6:	4770      	bx	lr
 8000de8:	ea90 0f01 	teq	r0, r1
 8000dec:	bf1c      	itt	ne
 8000dee:	2000      	movne	r0, #0
 8000df0:	4770      	bxne	lr
 8000df2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000df6:	d104      	bne.n	8000e02 <__addsf3+0x126>
 8000df8:	0040      	lsls	r0, r0, #1
 8000dfa:	bf28      	it	cs
 8000dfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000e06:	bf3c      	itt	cc
 8000e08:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e0c:	4770      	bxcc	lr
 8000e0e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e12:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e1a:	4770      	bx	lr
 8000e1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e20:	bf16      	itet	ne
 8000e22:	4608      	movne	r0, r1
 8000e24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e28:	4601      	movne	r1, r0
 8000e2a:	0242      	lsls	r2, r0, #9
 8000e2c:	bf06      	itte	eq
 8000e2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e32:	ea90 0f01 	teqeq	r0, r1
 8000e36:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_ui2f>:
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e004      	b.n	8000e4c <__aeabi_i2f+0x8>
 8000e42:	bf00      	nop

08000e44 <__aeabi_i2f>:
 8000e44:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e48:	bf48      	it	mi
 8000e4a:	4240      	negmi	r0, r0
 8000e4c:	ea5f 0c00 	movs.w	ip, r0
 8000e50:	bf08      	it	eq
 8000e52:	4770      	bxeq	lr
 8000e54:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e58:	4601      	mov	r1, r0
 8000e5a:	f04f 0000 	mov.w	r0, #0
 8000e5e:	e01c      	b.n	8000e9a <__aeabi_l2f+0x2a>

08000e60 <__aeabi_ul2f>:
 8000e60:	ea50 0201 	orrs.w	r2, r0, r1
 8000e64:	bf08      	it	eq
 8000e66:	4770      	bxeq	lr
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	e00a      	b.n	8000e84 <__aeabi_l2f+0x14>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_l2f>:
 8000e70:	ea50 0201 	orrs.w	r2, r0, r1
 8000e74:	bf08      	it	eq
 8000e76:	4770      	bxeq	lr
 8000e78:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e7c:	d502      	bpl.n	8000e84 <__aeabi_l2f+0x14>
 8000e7e:	4240      	negs	r0, r0
 8000e80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e84:	ea5f 0c01 	movs.w	ip, r1
 8000e88:	bf02      	ittt	eq
 8000e8a:	4684      	moveq	ip, r0
 8000e8c:	4601      	moveq	r1, r0
 8000e8e:	2000      	moveq	r0, #0
 8000e90:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e94:	bf08      	it	eq
 8000e96:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e9e:	fabc f28c 	clz	r2, ip
 8000ea2:	3a08      	subs	r2, #8
 8000ea4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea8:	db10      	blt.n	8000ecc <__aeabi_l2f+0x5c>
 8000eaa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eae:	4463      	add	r3, ip
 8000eb0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eb4:	f1c2 0220 	rsb	r2, r2, #32
 8000eb8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ebc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec0:	eb43 0002 	adc.w	r0, r3, r2
 8000ec4:	bf08      	it	eq
 8000ec6:	f020 0001 	biceq.w	r0, r0, #1
 8000eca:	4770      	bx	lr
 8000ecc:	f102 0220 	add.w	r2, r2, #32
 8000ed0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ed4:	f1c2 0220 	rsb	r2, r2, #32
 8000ed8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000edc:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee0:	eb43 0002 	adc.w	r0, r3, r2
 8000ee4:	bf08      	it	eq
 8000ee6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eea:	4770      	bx	lr

08000eec <__gesf2>:
 8000eec:	f04f 3cff 	mov.w	ip, #4294967295
 8000ef0:	e006      	b.n	8000f00 <__cmpsf2+0x4>
 8000ef2:	bf00      	nop

08000ef4 <__lesf2>:
 8000ef4:	f04f 0c01 	mov.w	ip, #1
 8000ef8:	e002      	b.n	8000f00 <__cmpsf2+0x4>
 8000efa:	bf00      	nop

08000efc <__cmpsf2>:
 8000efc:	f04f 0c01 	mov.w	ip, #1
 8000f00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f04:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f08:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f0c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f10:	bf18      	it	ne
 8000f12:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f16:	d011      	beq.n	8000f3c <__cmpsf2+0x40>
 8000f18:	b001      	add	sp, #4
 8000f1a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f1e:	bf18      	it	ne
 8000f20:	ea90 0f01 	teqne	r0, r1
 8000f24:	bf58      	it	pl
 8000f26:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f2a:	bf88      	it	hi
 8000f2c:	17c8      	asrhi	r0, r1, #31
 8000f2e:	bf38      	it	cc
 8000f30:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f34:	bf18      	it	ne
 8000f36:	f040 0001 	orrne.w	r0, r0, #1
 8000f3a:	4770      	bx	lr
 8000f3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f40:	d102      	bne.n	8000f48 <__cmpsf2+0x4c>
 8000f42:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f46:	d105      	bne.n	8000f54 <__cmpsf2+0x58>
 8000f48:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f4c:	d1e4      	bne.n	8000f18 <__cmpsf2+0x1c>
 8000f4e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f52:	d0e1      	beq.n	8000f18 <__cmpsf2+0x1c>
 8000f54:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <__aeabi_cfrcmple>:
 8000f5c:	4684      	mov	ip, r0
 8000f5e:	4608      	mov	r0, r1
 8000f60:	4661      	mov	r1, ip
 8000f62:	e7ff      	b.n	8000f64 <__aeabi_cfcmpeq>

08000f64 <__aeabi_cfcmpeq>:
 8000f64:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f66:	f7ff ffc9 	bl	8000efc <__cmpsf2>
 8000f6a:	2800      	cmp	r0, #0
 8000f6c:	bf48      	it	mi
 8000f6e:	f110 0f00 	cmnmi.w	r0, #0
 8000f72:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f74 <__aeabi_fcmpeq>:
 8000f74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f78:	f7ff fff4 	bl	8000f64 <__aeabi_cfcmpeq>
 8000f7c:	bf0c      	ite	eq
 8000f7e:	2001      	moveq	r0, #1
 8000f80:	2000      	movne	r0, #0
 8000f82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f86:	bf00      	nop

08000f88 <__aeabi_fcmplt>:
 8000f88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f8c:	f7ff ffea 	bl	8000f64 <__aeabi_cfcmpeq>
 8000f90:	bf34      	ite	cc
 8000f92:	2001      	movcc	r0, #1
 8000f94:	2000      	movcs	r0, #0
 8000f96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f9a:	bf00      	nop

08000f9c <__aeabi_fcmple>:
 8000f9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fa0:	f7ff ffe0 	bl	8000f64 <__aeabi_cfcmpeq>
 8000fa4:	bf94      	ite	ls
 8000fa6:	2001      	movls	r0, #1
 8000fa8:	2000      	movhi	r0, #0
 8000faa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fae:	bf00      	nop

08000fb0 <__aeabi_fcmpge>:
 8000fb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fb4:	f7ff ffd2 	bl	8000f5c <__aeabi_cfrcmple>
 8000fb8:	bf94      	ite	ls
 8000fba:	2001      	movls	r0, #1
 8000fbc:	2000      	movhi	r0, #0
 8000fbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_fcmpgt>:
 8000fc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc8:	f7ff ffc8 	bl	8000f5c <__aeabi_cfrcmple>
 8000fcc:	bf34      	ite	cc
 8000fce:	2001      	movcc	r0, #1
 8000fd0:	2000      	movcs	r0, #0
 8000fd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fd6:	bf00      	nop

08000fd8 <__aeabi_f2uiz>:
 8000fd8:	0042      	lsls	r2, r0, #1
 8000fda:	d20e      	bcs.n	8000ffa <__aeabi_f2uiz+0x22>
 8000fdc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fe0:	d30b      	bcc.n	8000ffa <__aeabi_f2uiz+0x22>
 8000fe2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fe6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fea:	d409      	bmi.n	8001000 <__aeabi_f2uiz+0x28>
 8000fec:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ff0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ff4:	fa23 f002 	lsr.w	r0, r3, r2
 8000ff8:	4770      	bx	lr
 8000ffa:	f04f 0000 	mov.w	r0, #0
 8000ffe:	4770      	bx	lr
 8001000:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001004:	d101      	bne.n	800100a <__aeabi_f2uiz+0x32>
 8001006:	0242      	lsls	r2, r0, #9
 8001008:	d102      	bne.n	8001010 <__aeabi_f2uiz+0x38>
 800100a:	f04f 30ff 	mov.w	r0, #4294967295
 800100e:	4770      	bx	lr
 8001010:	f04f 0000 	mov.w	r0, #0
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <BUTTON_ReadPin>:
#include "BUTTON.h"
// (FINAL x3)

// ************************** Low Level Layer *****************************************************//
static ButtonState BUTTON_ReadPin(Button *Button) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  return HAL_GPIO_ReadPin(Button->Port, Button->Pin);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	889b      	ldrh	r3, [r3, #4]
 8001028:	4619      	mov	r1, r3
 800102a:	4610      	mov	r0, r2
 800102c:	f002 fc98 	bl	8003960 <HAL_GPIO_ReadPin>
 8001030:	4603      	mov	r3, r0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <buttonInit>:
// ************************** High Level Layer *****************************************************//
void buttonInit(Button *Button, GPIO_TypeDef *BUTTON_PORT, uint16_t BUTTON_Pin) {
 800103a:	b580      	push	{r7, lr}
 800103c:	b084      	sub	sp, #16
 800103e:	af00      	add	r7, sp, #0
 8001040:	60f8      	str	r0, [r7, #12]
 8001042:	60b9      	str	r1, [r7, #8]
 8001044:	4613      	mov	r3, r2
 8001046:	80fb      	strh	r3, [r7, #6]
  Button->Port = BUTTON_PORT;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	601a      	str	r2, [r3, #0]
  Button->Pin = BUTTON_Pin;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	88fa      	ldrh	r2, [r7, #6]
 8001052:	809a      	strh	r2, [r3, #4]

  Button->state = BUTTON_ReadPin(Button);
 8001054:	68f8      	ldr	r0, [r7, #12]
 8001056:	f7ff ffdf 	bl	8001018 <BUTTON_ReadPin>
 800105a:	4603      	mov	r3, r0
 800105c:	461a      	mov	r2, r3
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	71da      	strb	r2, [r3, #7]
  Button->preState = Button->state;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	79da      	ldrb	r2, [r3, #7]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	719a      	strb	r2, [r3, #6]
  Button->timeIn = HAL_GetTick();
 800106a:	f002 f987 	bl	800337c <HAL_GetTick>
 800106e:	4602      	mov	r2, r0
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	609a      	str	r2, [r3, #8]
  Button->hasChanged = false;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	2200      	movs	r2, #0
 8001078:	741a      	strb	r2, [r3, #16]
  Button->_change = false;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2200      	movs	r2, #0
 800107e:	745a      	strb	r2, [r3, #17]
}
 8001080:	bf00      	nop
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <buttonRead>:

ButtonState buttonRead(Button *Button) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  ButtonState curState = BUTTON_ReadPin(Button);
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff ffc1 	bl	8001018 <BUTTON_ReadPin>
 8001096:	4603      	mov	r3, r0
 8001098:	73fb      	strb	r3, [r7, #15]
  uint32_t now = HAL_GetTick();
 800109a:	f002 f96f 	bl	800337c <HAL_GetTick>
 800109e:	60b8      	str	r0, [r7, #8]
  if (curState != Button->state) {
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	79db      	ldrb	r3, [r3, #7]
 80010a4:	7bfa      	ldrb	r2, [r7, #15]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d026      	beq.n	80010f8 <buttonRead+0x70>
	if (Button->_change == false)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	7c5b      	ldrb	r3, [r3, #17]
 80010ae:	f083 0301 	eor.w	r3, r3, #1
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d005      	beq.n	80010c4 <buttonRead+0x3c>
	{
	  Button->timeIn = now;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	609a      	str	r2, [r3, #8]
	  Button->_change = true;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2201      	movs	r2, #1
 80010c2:	745a      	strb	r2, [r3, #17]
	}
	Button->timeDelta = now - Button->timeIn;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	68ba      	ldr	r2, [r7, #8]
 80010ca:	1ad2      	subs	r2, r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	60da      	str	r2, [r3, #12]
	if (Button->timeDelta > DEBOUND_TIME) {
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	2b32      	cmp	r3, #50	; 0x32
 80010d6:	d917      	bls.n	8001108 <buttonRead+0x80>
	  Button->state = curState;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	7bfa      	ldrb	r2, [r7, #15]
 80010dc:	71da      	strb	r2, [r3, #7]
	  Button->timeDelta = 0;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	60da      	str	r2, [r3, #12]
	  Button->timeIn = now;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	68ba      	ldr	r2, [r7, #8]
 80010e8:	609a      	str	r2, [r3, #8]
	  Button->_change = false;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2200      	movs	r2, #0
 80010ee:	745a      	strb	r2, [r3, #17]
	  Button->hasChanged = true;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2201      	movs	r2, #1
 80010f4:	741a      	strb	r2, [r3, #16]
 80010f6:	e007      	b.n	8001108 <buttonRead+0x80>
	}
  } else if (curState == Button->state)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	79db      	ldrb	r3, [r3, #7]
 80010fc:	7bfa      	ldrb	r2, [r7, #15]
 80010fe:	429a      	cmp	r2, r3
 8001100:	d102      	bne.n	8001108 <buttonRead+0x80>
  {
	Button->_change = false;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	745a      	strb	r2, [r3, #17]
  }
  return Button->state;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	79db      	ldrb	r3, [r3, #7]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <CLCD_Delay>:
******************************************************************************************************************/
#include "CLCD_I2C.h"

//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 800111e:	88fb      	ldrh	r3, [r7, #6]
 8001120:	4618      	mov	r0, r3
 8001122:	f002 f935 	bl	8003390 <HAL_Delay>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b086      	sub	sp, #24
 8001132:	af02      	add	r7, sp, #8
 8001134:	6078      	str	r0, [r7, #4]
 8001136:	460b      	mov	r3, r1
 8001138:	70fb      	strb	r3, [r7, #3]
 800113a:	4613      	mov	r3, r2
 800113c:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 800113e:	78fb      	ldrb	r3, [r7, #3]
 8001140:	f023 030f 	bic.w	r3, r3, #15
 8001144:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 8001146:	78fb      	ldrb	r3, [r7, #3]
 8001148:	011b      	lsls	r3, r3, #4
 800114a:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	7adb      	ldrb	r3, [r3, #11]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d007      	beq.n	8001164 <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT; 
 8001154:	7bfb      	ldrb	r3, [r7, #15]
 8001156:	f043 0308 	orr.w	r3, r3, #8
 800115a:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT; 
 800115c:	7bbb      	ldrb	r3, [r7, #14]
 800115e:	f043 0308 	orr.w	r3, r3, #8
 8001162:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 8001164:	78bb      	ldrb	r3, [r7, #2]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d108      	bne.n	800117c <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 800116a:	7bfb      	ldrb	r3, [r7, #15]
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 8001172:	7bbb      	ldrb	r3, [r7, #14]
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	73bb      	strb	r3, [r7, #14]
 800117a:	e00a      	b.n	8001192 <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 800117c:	78bb      	ldrb	r3, [r7, #2]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d107      	bne.n	8001192 <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 8001182:	7bfb      	ldrb	r3, [r7, #15]
 8001184:	f023 0301 	bic.w	r3, r3, #1
 8001188:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 800118a:	7bbb      	ldrb	r3, [r7, #14]
 800118c:	f023 0301 	bic.w	r3, r3, #1
 8001190:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	f043 0304 	orr.w	r3, r3, #4
 8001198:	b2db      	uxtb	r3, r3
 800119a:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 800119c:	2001      	movs	r0, #1
 800119e:	f7ff ffb9 	bl	8001114 <CLCD_Delay>
	Data_I2C[1] = Data_H;
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 80011a6:	7bbb      	ldrb	r3, [r7, #14]
 80011a8:	f043 0304 	orr.w	r3, r3, #4
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 80011b0:	2001      	movs	r0, #1
 80011b2:	f7ff ffaf 	bl	8001114 <CLCD_Delay>
	Data_I2C[3] = Data_L;
 80011b6:	7bbb      	ldrb	r3, [r7, #14]
 80011b8:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6818      	ldr	r0, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	791b      	ldrb	r3, [r3, #4]
 80011c2:	b299      	uxth	r1, r3
 80011c4:	f107 0208 	add.w	r2, r7, #8
 80011c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	2304      	movs	r3, #4
 80011d0:	f002 fd6a 	bl	8003ca8 <HAL_I2C_Master_Transmit>
}
 80011d4:	bf00      	nop
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <CLCD_I2C_Init>:


//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	4611      	mov	r1, r2
 80011e8:	461a      	mov	r2, r3
 80011ea:	460b      	mov	r3, r1
 80011ec:	71fb      	strb	r3, [r7, #7]
 80011ee:	4613      	mov	r3, r2
 80011f0:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	68ba      	ldr	r2, [r7, #8]
 80011f6:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	79fa      	ldrb	r2, [r7, #7]
 80011fc:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	79ba      	ldrb	r2, [r7, #6]
 8001202:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	7e3a      	ldrb	r2, [r7, #24]
 8001208:	719a      	strb	r2, [r3, #6]
	
	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	2228      	movs	r2, #40	; 0x28
 800120e:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2206      	movs	r2, #6
 8001214:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	220c      	movs	r2, #12
 800121a:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2214      	movs	r2, #20
 8001220:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2208      	movs	r2, #8
 8001226:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 8001228:	2032      	movs	r0, #50	; 0x32
 800122a:	f7ff ff73 	bl	8001114 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 800122e:	2200      	movs	r2, #0
 8001230:	2133      	movs	r1, #51	; 0x33
 8001232:	68f8      	ldr	r0, [r7, #12]
 8001234:	f7ff ff7b 	bl	800112e <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8001238:	2200      	movs	r2, #0
 800123a:	2133      	movs	r1, #51	; 0x33
 800123c:	68f8      	ldr	r0, [r7, #12]
 800123e:	f7ff ff76 	bl	800112e <CLCD_WriteI2C>
	CLCD_Delay(5);
 8001242:	2005      	movs	r0, #5
 8001244:	f7ff ff66 	bl	8001114 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8001248:	2200      	movs	r2, #0
 800124a:	2132      	movs	r1, #50	; 0x32
 800124c:	68f8      	ldr	r0, [r7, #12]
 800124e:	f7ff ff6e 	bl	800112e <CLCD_WriteI2C>
	CLCD_Delay(5);
 8001252:	2005      	movs	r0, #5
 8001254:	f7ff ff5e 	bl	8001114 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 8001258:	2200      	movs	r2, #0
 800125a:	2120      	movs	r1, #32
 800125c:	68f8      	ldr	r0, [r7, #12]
 800125e:	f7ff ff66 	bl	800112e <CLCD_WriteI2C>
	CLCD_Delay(5);
 8001262:	2005      	movs	r0, #5
 8001264:	f7ff ff56 	bl	8001114 <CLCD_Delay>
	
	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	79db      	ldrb	r3, [r3, #7]
 800126c:	2200      	movs	r2, #0
 800126e:	4619      	mov	r1, r3
 8001270:	68f8      	ldr	r0, [r7, #12]
 8001272:	f7ff ff5c 	bl	800112e <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	7a1b      	ldrb	r3, [r3, #8]
 800127a:	2200      	movs	r2, #0
 800127c:	4619      	mov	r1, r3
 800127e:	68f8      	ldr	r0, [r7, #12]
 8001280:	f7ff ff55 	bl	800112e <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	7a5b      	ldrb	r3, [r3, #9]
 8001288:	2200      	movs	r2, #0
 800128a:	4619      	mov	r1, r3
 800128c:	68f8      	ldr	r0, [r7, #12]
 800128e:	f7ff ff4e 	bl	800112e <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	7a9b      	ldrb	r3, [r3, #10]
 8001296:	2200      	movs	r2, #0
 8001298:	4619      	mov	r1, r3
 800129a:	68f8      	ldr	r0, [r7, #12]
 800129c:	f7ff ff47 	bl	800112e <CLCD_WriteI2C>
	
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2101      	movs	r1, #1
 80012a4:	68f8      	ldr	r0, [r7, #12]
 80012a6:	f7ff ff42 	bl	800112e <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2102      	movs	r1, #2
 80012ae:	68f8      	ldr	r0, [r7, #12]
 80012b0:	f7ff ff3d 	bl	800112e <CLCD_WriteI2C>
}
 80012b4:	bf00      	nop
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	70fb      	strb	r3, [r7, #3]
 80012c8:	4613      	mov	r3, r2
 80012ca:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 80012cc:	2300      	movs	r3, #0
 80012ce:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	795b      	ldrb	r3, [r3, #5]
 80012d4:	78fa      	ldrb	r2, [r7, #3]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d303      	bcc.n	80012e2 <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	795b      	ldrb	r3, [r3, #5]
 80012de:	3b01      	subs	r3, #1
 80012e0:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	799b      	ldrb	r3, [r3, #6]
 80012e6:	78ba      	ldrb	r2, [r7, #2]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d303      	bcc.n	80012f4 <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	799b      	ldrb	r3, [r3, #6]
 80012f0:	3b01      	subs	r3, #1
 80012f2:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 80012f4:	78bb      	ldrb	r3, [r7, #2]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d102      	bne.n	8001300 <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 80012fa:	78fb      	ldrb	r3, [r7, #3]
 80012fc:	73fb      	strb	r3, [r7, #15]
 80012fe:	e013      	b.n	8001328 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 8001300:	78bb      	ldrb	r3, [r7, #2]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d103      	bne.n	800130e <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 8001306:	78fb      	ldrb	r3, [r7, #3]
 8001308:	3340      	adds	r3, #64	; 0x40
 800130a:	73fb      	strb	r3, [r7, #15]
 800130c:	e00c      	b.n	8001328 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 800130e:	78bb      	ldrb	r3, [r7, #2]
 8001310:	2b02      	cmp	r3, #2
 8001312:	d103      	bne.n	800131c <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x14 + Xpos;
 8001314:	78fb      	ldrb	r3, [r7, #3]
 8001316:	3314      	adds	r3, #20
 8001318:	73fb      	strb	r3, [r7, #15]
 800131a:	e005      	b.n	8001328 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 800131c:	78bb      	ldrb	r3, [r7, #2]
 800131e:	2b03      	cmp	r3, #3
 8001320:	d102      	bne.n	8001328 <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x54 + Xpos;
 8001322:	78fb      	ldrb	r3, [r7, #3]
 8001324:	3354      	adds	r3, #84	; 0x54
 8001326:	73fb      	strb	r3, [r7, #15]
	}
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2200      	movs	r2, #0
 8001332:	4619      	mov	r1, r3
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff fefa 	bl	800112e <CLCD_WriteI2C>
}
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	460b      	mov	r3, r1
 800134c:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 800134e:	78fb      	ldrb	r3, [r7, #3]
 8001350:	2201      	movs	r2, #1
 8001352:	4619      	mov	r1, r3
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff feea 	bl	800112e <CLCD_WriteI2C>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
 800136a:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_I2C_WriteChar(LCD, *String++);
 800136c:	e007      	b.n	800137e <CLCD_I2C_WriteString+0x1c>
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	1c5a      	adds	r2, r3, #1
 8001372:	603a      	str	r2, [r7, #0]
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	4619      	mov	r1, r3
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff ffe2 	bl	8001342 <CLCD_I2C_WriteChar>
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1f3      	bne.n	800136e <CLCD_I2C_WriteString+0xc>
}
 8001386:	bf00      	nop
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <CLCD_I2C_Clear>:
void CLCD_I2C_Clear(CLCD_I2C_Name* LCD)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 8001398:	2200      	movs	r2, #0
 800139a:	2101      	movs	r1, #1
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff fec6 	bl	800112e <CLCD_WriteI2C>
	CLCD_Delay(5);
 80013a2:	2005      	movs	r0, #5
 80013a4:	f7ff feb6 	bl	8001114 <CLCD_Delay>
}
 80013a8:	bf00      	nop
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <CLCD_I2C_ReturnHome>:
void CLCD_I2C_ReturnHome(CLCD_I2C_Name* LCD)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	CLCD_WriteI2C(LCD, LCD_RETURNHOME, CLCD_COMMAND);
 80013b8:	2200      	movs	r2, #0
 80013ba:	2102      	movs	r1, #2
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff feb6 	bl	800112e <CLCD_WriteI2C>
	CLCD_Delay(5);
 80013c2:	2005      	movs	r0, #5
 80013c4:	f7ff fea6 	bl	8001114 <CLCD_Delay>
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <LCD_Begin>:
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
}

/* Short code */
void LCD_Begin(CLCD_I2C_Name *LCD, I2C_HandleTypeDef *hi2c_CLCD,
	uint8_t Address, uint8_t Colums, uint8_t Rows) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af02      	add	r7, sp, #8
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	4611      	mov	r1, r2
 80013dc:	461a      	mov	r2, r3
 80013de:	460b      	mov	r3, r1
 80013e0:	71fb      	strb	r3, [r7, #7]
 80013e2:	4613      	mov	r3, r2
 80013e4:	71bb      	strb	r3, [r7, #6]
  CLCD_I2C_Init(LCD, hi2c_CLCD, Address, Colums, Rows);
 80013e6:	79b9      	ldrb	r1, [r7, #6]
 80013e8:	79fa      	ldrb	r2, [r7, #7]
 80013ea:	7e3b      	ldrb	r3, [r7, #24]
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	460b      	mov	r3, r1
 80013f0:	68b9      	ldr	r1, [r7, #8]
 80013f2:	68f8      	ldr	r0, [r7, #12]
 80013f4:	f7ff fef2 	bl	80011dc <CLCD_I2C_Init>
}
 80013f8:	bf00      	nop
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <LCD_Set_Cursor>:
void LCD_Set_Cursor(CLCD_I2C_Name *LCD, u8 a, u8 b) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	70fb      	strb	r3, [r7, #3]
 800140c:	4613      	mov	r3, r2
 800140e:	70bb      	strb	r3, [r7, #2]
  a -= 1;
 8001410:	78fb      	ldrb	r3, [r7, #3]
 8001412:	3b01      	subs	r3, #1
 8001414:	70fb      	strb	r3, [r7, #3]
  b -= 1;
 8001416:	78bb      	ldrb	r3, [r7, #2]
 8001418:	3b01      	subs	r3, #1
 800141a:	70bb      	strb	r3, [r7, #2]
  CLCD_I2C_SetCursor(LCD, b, a);
 800141c:	78fa      	ldrb	r2, [r7, #3]
 800141e:	78bb      	ldrb	r3, [r7, #2]
 8001420:	4619      	mov	r1, r3
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff ff4a 	bl	80012bc <CLCD_I2C_SetCursor>
}
 8001428:	bf00      	nop
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <LCD_Clear>:
void LCD_Print_Char(CLCD_I2C_Name *LCD, char data) {
  CLCD_I2C_WriteChar(LCD, data);
}
void LCD_Clear(CLCD_I2C_Name *LCD) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  CLCD_I2C_Clear(LCD);
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff ffa9 	bl	8001390 <CLCD_I2C_Clear>
  CLCD_I2C_ReturnHome(LCD);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff ffb6 	bl	80013b0 <CLCD_I2C_ReturnHome>
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <LCD_Print_String>:
void LCD_Print_String(CLCD_I2C_Name *LCD, char *data) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  CLCD_I2C_WriteString(LCD, data);
 8001456:	6839      	ldr	r1, [r7, #0]
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff ff82 	bl	8001362 <CLCD_I2C_WriteString>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <LCD_Print_String_At>:
  itoa(data, temp_buffer, 10);
  u8 i;
  for (i = 0; temp_buffer[i] != '\0'; i++)
	LCD_Print_Char(LCD, temp_buffer[i]); //Split the string using pointers and call the Char function
}
void LCD_Print_String_At(CLCD_I2C_Name *LCD, u8 a, u8 b, char *data) {
 8001466:	b580      	push	{r7, lr}
 8001468:	b084      	sub	sp, #16
 800146a:	af00      	add	r7, sp, #0
 800146c:	60f8      	str	r0, [r7, #12]
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	72fb      	strb	r3, [r7, #11]
 8001474:	4613      	mov	r3, r2
 8001476:	72bb      	strb	r3, [r7, #10]
  LCD_Set_Cursor(LCD, a, b);
 8001478:	7aba      	ldrb	r2, [r7, #10]
 800147a:	7afb      	ldrb	r3, [r7, #11]
 800147c:	4619      	mov	r1, r3
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	f7ff ffbe 	bl	8001400 <LCD_Set_Cursor>
  LCD_Print_String(LCD, data);
 8001484:	6879      	ldr	r1, [r7, #4]
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	f7ff ffe0 	bl	800144c <LCD_Print_String>
}
 800148c:	bf00      	nop
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001498:	f001 ff18 	bl	80032cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800149c:	f000 f830 	bl	8001500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014a0:	f000 fa0c 	bl	80018bc <MX_GPIO_Init>
  MX_TIM1_Init();
 80014a4:	f000 f8a0 	bl	80015e8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80014a8:	f000 f8f6 	bl	8001698 <MX_TIM2_Init>
  MX_TIM3_Init();
 80014ac:	f000 f948 	bl	8001740 <MX_TIM3_Init>
  MX_TIM4_Init();
 80014b0:	f000 f9aa 	bl	8001808 <MX_TIM4_Init>
  MX_I2C2_Init();
 80014b4:	f000 f86a 	bl	800158c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  start_up();
 80014b8:	f000 ff8c 	bl	80023d4 <start_up>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	state = buttonRead(&SW_Mode);
 80014bc:	480e      	ldr	r0, [pc, #56]	; (80014f8 <main+0x64>)
 80014be:	f7ff fde3 	bl	8001088 <buttonRead>
 80014c2:	4603      	mov	r3, r0
 80014c4:	461a      	mov	r2, r3
 80014c6:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <main+0x68>)
 80014c8:	701a      	strb	r2, [r3, #0]
	if (SW_Mode.hasChanged) {
 80014ca:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <main+0x64>)
 80014cc:	7c1b      	ldrb	r3, [r3, #16]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d00f      	beq.n	80014f2 <main+0x5e>
	  SW_Mode.hasChanged = false;
 80014d2:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <main+0x64>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	741a      	strb	r2, [r3, #16]
	  if (state == IDLE) {
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <main+0x68>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d102      	bne.n	80014e6 <main+0x52>
		active_idle();
 80014e0:	f001 f834 	bl	800254c <active_idle>
 80014e4:	e005      	b.n	80014f2 <main+0x5e>
	  } else if (state == RUN) {
 80014e6:	4b05      	ldr	r3, [pc, #20]	; (80014fc <main+0x68>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <main+0x5e>
		active_run();
 80014ee:	f001 f873 	bl	80025d8 <active_run>
	  }
	}
	apply_state();
 80014f2:	f001 fd7d 	bl	8002ff0 <apply_state>
	state = buttonRead(&SW_Mode);
 80014f6:	e7e1      	b.n	80014bc <main+0x28>
 80014f8:	200003a8 	.word	0x200003a8
 80014fc:	200003e4 	.word	0x200003e4

08001500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b090      	sub	sp, #64	; 0x40
 8001504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001506:	f107 0318 	add.w	r3, r7, #24
 800150a:	2228      	movs	r2, #40	; 0x28
 800150c:	2100      	movs	r1, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f004 f9dc 	bl	80058cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
 8001520:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001522:	2301      	movs	r3, #1
 8001524:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001526:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800152a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800152c:	2300      	movs	r3, #0
 800152e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001530:	2301      	movs	r3, #1
 8001532:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001534:	2302      	movs	r3, #2
 8001536:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001538:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800153c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800153e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001542:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001544:	f107 0318 	add.w	r3, r7, #24
 8001548:	4618      	mov	r0, r3
 800154a:	f002 feb3 	bl	80042b4 <HAL_RCC_OscConfig>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001554:	f000 fa82 	bl	8001a5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001558:	230f      	movs	r3, #15
 800155a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155c:	2302      	movs	r3, #2
 800155e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001564:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001568:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	2101      	movs	r1, #1
 8001572:	4618      	mov	r0, r3
 8001574:	f003 f920 	bl	80047b8 <HAL_RCC_ClockConfig>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800157e:	f000 fa6d 	bl	8001a5c <Error_Handler>
  }
}
 8001582:	bf00      	nop
 8001584:	3740      	adds	r7, #64	; 0x40
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <MX_I2C2_Init+0x50>)
 8001592:	4a13      	ldr	r2, [pc, #76]	; (80015e0 <MX_I2C2_Init+0x54>)
 8001594:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <MX_I2C2_Init+0x50>)
 8001598:	4a12      	ldr	r2, [pc, #72]	; (80015e4 <MX_I2C2_Init+0x58>)
 800159a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <MX_I2C2_Init+0x50>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <MX_I2C2_Init+0x50>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <MX_I2C2_Init+0x50>)
 80015aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015ae:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015b0:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <MX_I2C2_Init+0x50>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <MX_I2C2_Init+0x50>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015bc:	4b07      	ldr	r3, [pc, #28]	; (80015dc <MX_I2C2_Init+0x50>)
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <MX_I2C2_Init+0x50>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015c8:	4804      	ldr	r0, [pc, #16]	; (80015dc <MX_I2C2_Init+0x50>)
 80015ca:	f002 fa29 	bl	8003a20 <HAL_I2C_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80015d4:	f000 fa42 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000208 	.word	0x20000208
 80015e0:	40005800 	.word	0x40005800
 80015e4:	000186a0 	.word	0x000186a0

080015e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08c      	sub	sp, #48	; 0x30
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015ee:	f107 030c 	add.w	r3, r7, #12
 80015f2:	2224      	movs	r2, #36	; 0x24
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f004 f968 	bl	80058cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001604:	4b22      	ldr	r3, [pc, #136]	; (8001690 <MX_TIM1_Init+0xa8>)
 8001606:	4a23      	ldr	r2, [pc, #140]	; (8001694 <MX_TIM1_Init+0xac>)
 8001608:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800160a:	4b21      	ldr	r3, [pc, #132]	; (8001690 <MX_TIM1_Init+0xa8>)
 800160c:	2200      	movs	r2, #0
 800160e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001610:	4b1f      	ldr	r3, [pc, #124]	; (8001690 <MX_TIM1_Init+0xa8>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001616:	4b1e      	ldr	r3, [pc, #120]	; (8001690 <MX_TIM1_Init+0xa8>)
 8001618:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800161c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800161e:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <MX_TIM1_Init+0xa8>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001624:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <MX_TIM1_Init+0xa8>)
 8001626:	2200      	movs	r2, #0
 8001628:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800162a:	4b19      	ldr	r3, [pc, #100]	; (8001690 <MX_TIM1_Init+0xa8>)
 800162c:	2280      	movs	r2, #128	; 0x80
 800162e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001630:	2303      	movs	r3, #3
 8001632:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001634:	2300      	movs	r3, #0
 8001636:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001638:	2301      	movs	r3, #1
 800163a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800163c:	2300      	movs	r3, #0
 800163e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001640:	230a      	movs	r3, #10
 8001642:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001644:	2300      	movs	r3, #0
 8001646:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001648:	2301      	movs	r3, #1
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800164c:	2300      	movs	r3, #0
 800164e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001650:	230a      	movs	r3, #10
 8001652:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001654:	f107 030c 	add.w	r3, r7, #12
 8001658:	4619      	mov	r1, r3
 800165a:	480d      	ldr	r0, [pc, #52]	; (8001690 <MX_TIM1_Init+0xa8>)
 800165c:	f003 fb74 	bl	8004d48 <HAL_TIM_Encoder_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001666:	f000 f9f9 	bl	8001a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800166a:	2300      	movs	r3, #0
 800166c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800166e:	2300      	movs	r3, #0
 8001670:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	4619      	mov	r1, r3
 8001676:	4806      	ldr	r0, [pc, #24]	; (8001690 <MX_TIM1_Init+0xa8>)
 8001678:	f004 f88e 	bl	8005798 <HAL_TIMEx_MasterConfigSynchronization>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001682:	f000 f9eb 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	3730      	adds	r7, #48	; 0x30
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	2000025c 	.word	0x2000025c
 8001694:	40012c00 	.word	0x40012c00

08001698 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08c      	sub	sp, #48	; 0x30
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800169e:	f107 030c 	add.w	r3, r7, #12
 80016a2:	2224      	movs	r2, #36	; 0x24
 80016a4:	2100      	movs	r1, #0
 80016a6:	4618      	mov	r0, r3
 80016a8:	f004 f910 	bl	80058cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ac:	1d3b      	adds	r3, r7, #4
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016b4:	4b21      	ldr	r3, [pc, #132]	; (800173c <MX_TIM2_Init+0xa4>)
 80016b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016bc:	4b1f      	ldr	r3, [pc, #124]	; (800173c <MX_TIM2_Init+0xa4>)
 80016be:	2200      	movs	r2, #0
 80016c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c2:	4b1e      	ldr	r3, [pc, #120]	; (800173c <MX_TIM2_Init+0xa4>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80016c8:	4b1c      	ldr	r3, [pc, #112]	; (800173c <MX_TIM2_Init+0xa4>)
 80016ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d0:	4b1a      	ldr	r3, [pc, #104]	; (800173c <MX_TIM2_Init+0xa4>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016d6:	4b19      	ldr	r3, [pc, #100]	; (800173c <MX_TIM2_Init+0xa4>)
 80016d8:	2280      	movs	r2, #128	; 0x80
 80016da:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016dc:	2303      	movs	r3, #3
 80016de:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016e0:	2300      	movs	r3, #0
 80016e2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016e4:	2301      	movs	r3, #1
 80016e6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 80016ec:	2301      	movs	r3, #1
 80016ee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016f0:	2300      	movs	r3, #0
 80016f2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016f4:	2301      	movs	r3, #1
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016f8:	2300      	movs	r3, #0
 80016fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 80016fc:	2301      	movs	r3, #1
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001700:	f107 030c 	add.w	r3, r7, #12
 8001704:	4619      	mov	r1, r3
 8001706:	480d      	ldr	r0, [pc, #52]	; (800173c <MX_TIM2_Init+0xa4>)
 8001708:	f003 fb1e 	bl	8004d48 <HAL_TIM_Encoder_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001712:	f000 f9a3 	bl	8001a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001716:	2300      	movs	r3, #0
 8001718:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800171a:	2300      	movs	r3, #0
 800171c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	4619      	mov	r1, r3
 8001722:	4806      	ldr	r0, [pc, #24]	; (800173c <MX_TIM2_Init+0xa4>)
 8001724:	f004 f838 	bl	8005798 <HAL_TIMEx_MasterConfigSynchronization>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800172e:	f000 f995 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001732:	bf00      	nop
 8001734:	3730      	adds	r7, #48	; 0x30
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	200002a4 	.word	0x200002a4

08001740 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08a      	sub	sp, #40	; 0x28
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001746:	f107 0320 	add.w	r3, r7, #32
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001750:	1d3b      	adds	r3, r7, #4
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
 800175c:	611a      	str	r2, [r3, #16]
 800175e:	615a      	str	r2, [r3, #20]
 8001760:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001762:	4b27      	ldr	r3, [pc, #156]	; (8001800 <MX_TIM3_Init+0xc0>)
 8001764:	4a27      	ldr	r2, [pc, #156]	; (8001804 <MX_TIM3_Init+0xc4>)
 8001766:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48;
 8001768:	4b25      	ldr	r3, [pc, #148]	; (8001800 <MX_TIM3_Init+0xc0>)
 800176a:	2230      	movs	r2, #48	; 0x30
 800176c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800176e:	4b24      	ldr	r3, [pc, #144]	; (8001800 <MX_TIM3_Init+0xc0>)
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 8001774:	4b22      	ldr	r3, [pc, #136]	; (8001800 <MX_TIM3_Init+0xc0>)
 8001776:	f240 12f3 	movw	r2, #499	; 0x1f3
 800177a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800177c:	4b20      	ldr	r3, [pc, #128]	; (8001800 <MX_TIM3_Init+0xc0>)
 800177e:	2200      	movs	r2, #0
 8001780:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001782:	4b1f      	ldr	r3, [pc, #124]	; (8001800 <MX_TIM3_Init+0xc0>)
 8001784:	2280      	movs	r2, #128	; 0x80
 8001786:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001788:	481d      	ldr	r0, [pc, #116]	; (8001800 <MX_TIM3_Init+0xc0>)
 800178a:	f003 f9eb 	bl	8004b64 <HAL_TIM_PWM_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001794:	f000 f962 	bl	8001a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001798:	2300      	movs	r3, #0
 800179a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800179c:	2300      	movs	r3, #0
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017a0:	f107 0320 	add.w	r3, r7, #32
 80017a4:	4619      	mov	r1, r3
 80017a6:	4816      	ldr	r0, [pc, #88]	; (8001800 <MX_TIM3_Init+0xc0>)
 80017a8:	f003 fff6 	bl	8005798 <HAL_TIMEx_MasterConfigSynchronization>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80017b2:	f000 f953 	bl	8001a5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017b6:	2360      	movs	r3, #96	; 0x60
 80017b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	2200      	movs	r2, #0
 80017ca:	4619      	mov	r1, r3
 80017cc:	480c      	ldr	r0, [pc, #48]	; (8001800 <MX_TIM3_Init+0xc0>)
 80017ce:	f003 fcf3 	bl	80051b8 <HAL_TIM_PWM_ConfigChannel>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80017d8:	f000 f940 	bl	8001a5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017dc:	1d3b      	adds	r3, r7, #4
 80017de:	2204      	movs	r2, #4
 80017e0:	4619      	mov	r1, r3
 80017e2:	4807      	ldr	r0, [pc, #28]	; (8001800 <MX_TIM3_Init+0xc0>)
 80017e4:	f003 fce8 	bl	80051b8 <HAL_TIM_PWM_ConfigChannel>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80017ee:	f000 f935 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017f2:	4803      	ldr	r0, [pc, #12]	; (8001800 <MX_TIM3_Init+0xc0>)
 80017f4:	f000 fa4e 	bl	8001c94 <HAL_TIM_MspPostInit>

}
 80017f8:	bf00      	nop
 80017fa:	3728      	adds	r7, #40	; 0x28
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	200002ec 	.word	0x200002ec
 8001804:	40000400 	.word	0x40000400

08001808 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08a      	sub	sp, #40	; 0x28
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800180e:	f107 0320 	add.w	r3, r7, #32
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001818:	1d3b      	adds	r3, r7, #4
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
 8001824:	611a      	str	r2, [r3, #16]
 8001826:	615a      	str	r2, [r3, #20]
 8001828:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800182a:	4b22      	ldr	r3, [pc, #136]	; (80018b4 <MX_TIM4_Init+0xac>)
 800182c:	4a22      	ldr	r2, [pc, #136]	; (80018b8 <MX_TIM4_Init+0xb0>)
 800182e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48;
 8001830:	4b20      	ldr	r3, [pc, #128]	; (80018b4 <MX_TIM4_Init+0xac>)
 8001832:	2230      	movs	r2, #48	; 0x30
 8001834:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001836:	4b1f      	ldr	r3, [pc, #124]	; (80018b4 <MX_TIM4_Init+0xac>)
 8001838:	2200      	movs	r2, #0
 800183a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 800183c:	4b1d      	ldr	r3, [pc, #116]	; (80018b4 <MX_TIM4_Init+0xac>)
 800183e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001842:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001844:	4b1b      	ldr	r3, [pc, #108]	; (80018b4 <MX_TIM4_Init+0xac>)
 8001846:	2200      	movs	r2, #0
 8001848:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800184a:	4b1a      	ldr	r3, [pc, #104]	; (80018b4 <MX_TIM4_Init+0xac>)
 800184c:	2280      	movs	r2, #128	; 0x80
 800184e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001850:	4818      	ldr	r0, [pc, #96]	; (80018b4 <MX_TIM4_Init+0xac>)
 8001852:	f003 f987 	bl	8004b64 <HAL_TIM_PWM_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800185c:	f000 f8fe 	bl	8001a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001860:	2300      	movs	r3, #0
 8001862:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001864:	2300      	movs	r3, #0
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001868:	f107 0320 	add.w	r3, r7, #32
 800186c:	4619      	mov	r1, r3
 800186e:	4811      	ldr	r0, [pc, #68]	; (80018b4 <MX_TIM4_Init+0xac>)
 8001870:	f003 ff92 	bl	8005798 <HAL_TIMEx_MasterConfigSynchronization>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800187a:	f000 f8ef 	bl	8001a5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800187e:	2360      	movs	r3, #96	; 0x60
 8001880:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	2208      	movs	r2, #8
 8001892:	4619      	mov	r1, r3
 8001894:	4807      	ldr	r0, [pc, #28]	; (80018b4 <MX_TIM4_Init+0xac>)
 8001896:	f003 fc8f 	bl	80051b8 <HAL_TIM_PWM_ConfigChannel>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80018a0:	f000 f8dc 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80018a4:	4803      	ldr	r0, [pc, #12]	; (80018b4 <MX_TIM4_Init+0xac>)
 80018a6:	f000 f9f5 	bl	8001c94 <HAL_TIM_MspPostInit>

}
 80018aa:	bf00      	nop
 80018ac:	3728      	adds	r7, #40	; 0x28
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000334 	.word	0x20000334
 80018b8:	40000800 	.word	0x40000800

080018bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b088      	sub	sp, #32
 80018c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c2:	f107 0310 	add.w	r3, r7, #16
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d0:	4b5c      	ldr	r3, [pc, #368]	; (8001a44 <MX_GPIO_Init+0x188>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	4a5b      	ldr	r2, [pc, #364]	; (8001a44 <MX_GPIO_Init+0x188>)
 80018d6:	f043 0310 	orr.w	r3, r3, #16
 80018da:	6193      	str	r3, [r2, #24]
 80018dc:	4b59      	ldr	r3, [pc, #356]	; (8001a44 <MX_GPIO_Init+0x188>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	f003 0310 	and.w	r3, r3, #16
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018e8:	4b56      	ldr	r3, [pc, #344]	; (8001a44 <MX_GPIO_Init+0x188>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	4a55      	ldr	r2, [pc, #340]	; (8001a44 <MX_GPIO_Init+0x188>)
 80018ee:	f043 0320 	orr.w	r3, r3, #32
 80018f2:	6193      	str	r3, [r2, #24]
 80018f4:	4b53      	ldr	r3, [pc, #332]	; (8001a44 <MX_GPIO_Init+0x188>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	f003 0320 	and.w	r3, r3, #32
 80018fc:	60bb      	str	r3, [r7, #8]
 80018fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001900:	4b50      	ldr	r3, [pc, #320]	; (8001a44 <MX_GPIO_Init+0x188>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	4a4f      	ldr	r2, [pc, #316]	; (8001a44 <MX_GPIO_Init+0x188>)
 8001906:	f043 0304 	orr.w	r3, r3, #4
 800190a:	6193      	str	r3, [r2, #24]
 800190c:	4b4d      	ldr	r3, [pc, #308]	; (8001a44 <MX_GPIO_Init+0x188>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	f003 0304 	and.w	r3, r3, #4
 8001914:	607b      	str	r3, [r7, #4]
 8001916:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001918:	4b4a      	ldr	r3, [pc, #296]	; (8001a44 <MX_GPIO_Init+0x188>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	4a49      	ldr	r2, [pc, #292]	; (8001a44 <MX_GPIO_Init+0x188>)
 800191e:	f043 0308 	orr.w	r3, r3, #8
 8001922:	6193      	str	r3, [r2, #24]
 8001924:	4b47      	ldr	r3, [pc, #284]	; (8001a44 <MX_GPIO_Init+0x188>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	f003 0308 	and.w	r3, r3, #8
 800192c:	603b      	str	r3, [r7, #0]
 800192e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_L_Pin|M1_R_Pin|LED_Y_Pin, GPIO_PIN_RESET);
 8001930:	2200      	movs	r2, #0
 8001932:	f240 410c 	movw	r1, #1036	; 0x40c
 8001936:	4844      	ldr	r0, [pc, #272]	; (8001a48 <MX_GPIO_Init+0x18c>)
 8001938:	f002 f829 	bl	800398e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M2_R_Pin|M2_L_Pin|LED_G_Pin, GPIO_PIN_RESET);
 800193c:	2200      	movs	r2, #0
 800193e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001942:	4842      	ldr	r0, [pc, #264]	; (8001a4c <MX_GPIO_Init+0x190>)
 8001944:	f002 f823 	bl	800398e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001948:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800194c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800194e:	2303      	movs	r3, #3
 8001950:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001952:	f107 0310 	add.w	r3, r7, #16
 8001956:	4619      	mov	r1, r3
 8001958:	483d      	ldr	r0, [pc, #244]	; (8001a50 <MX_GPIO_Init+0x194>)
 800195a:	f001 fe7d 	bl	8003658 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_L_Pin M1_R_Pin LED_Y_Pin */
  GPIO_InitStruct.Pin = M1_L_Pin|M1_R_Pin|LED_Y_Pin;
 800195e:	f240 430c 	movw	r3, #1036	; 0x40c
 8001962:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001964:	2301      	movs	r3, #1
 8001966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196c:	2302      	movs	r3, #2
 800196e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001970:	f107 0310 	add.w	r3, r7, #16
 8001974:	4619      	mov	r1, r3
 8001976:	4834      	ldr	r0, [pc, #208]	; (8001a48 <MX_GPIO_Init+0x18c>)
 8001978:	f001 fe6e 	bl	8003658 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12;
 800197c:	f641 0330 	movw	r3, #6192	; 0x1830
 8001980:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001982:	2303      	movs	r3, #3
 8001984:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001986:	f107 0310 	add.w	r3, r7, #16
 800198a:	4619      	mov	r1, r3
 800198c:	482e      	ldr	r0, [pc, #184]	; (8001a48 <MX_GPIO_Init+0x18c>)
 800198e:	f001 fe63 	bl	8003658 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_START_Pin BTN_STOP_Pin LVL_SW2_Pin LVL_SW1_Pin */
  GPIO_InitStruct.Pin = BTN_START_Pin|BTN_STOP_Pin|LVL_SW2_Pin|LVL_SW1_Pin;
 8001992:	231b      	movs	r3, #27
 8001994:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800199a:	2301      	movs	r3, #1
 800199c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199e:	f107 0310 	add.w	r3, r7, #16
 80019a2:	4619      	mov	r1, r3
 80019a4:	4829      	ldr	r0, [pc, #164]	; (8001a4c <MX_GPIO_Init+0x190>)
 80019a6:	f001 fe57 	bl	8003658 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_7;
 80019aa:	f241 0384 	movw	r3, #4228	; 0x1084
 80019ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019b0:	2303      	movs	r3, #3
 80019b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b4:	f107 0310 	add.w	r3, r7, #16
 80019b8:	4619      	mov	r1, r3
 80019ba:	4824      	ldr	r0, [pc, #144]	; (8001a4c <MX_GPIO_Init+0x190>)
 80019bc:	f001 fe4c 	bl	8003658 <HAL_GPIO_Init>

  /*Configure GPIO pins : M2_R_Pin M2_L_Pin LED_G_Pin */
  GPIO_InitStruct.Pin = M2_R_Pin|M2_L_Pin|LED_G_Pin;
 80019c0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80019c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c6:	2301      	movs	r3, #1
 80019c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ce:	2302      	movs	r3, #2
 80019d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d2:	f107 0310 	add.w	r3, r7, #16
 80019d6:	4619      	mov	r1, r3
 80019d8:	481c      	ldr	r0, [pc, #112]	; (8001a4c <MX_GPIO_Init+0x190>)
 80019da:	f001 fe3d 	bl	8003658 <HAL_GPIO_Init>

  /*Configure GPIO pin : MODE_SW_Pin */
  GPIO_InitStruct.Pin = MODE_SW_Pin;
 80019de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019e8:	2301      	movs	r3, #1
 80019ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MODE_SW_GPIO_Port, &GPIO_InitStruct);
 80019ec:	f107 0310 	add.w	r3, r7, #16
 80019f0:	4619      	mov	r1, r3
 80019f2:	4815      	ldr	r0, [pc, #84]	; (8001a48 <MX_GPIO_Init+0x18c>)
 80019f4:	f001 fe30 	bl	8003658 <HAL_GPIO_Init>

  /*Configure GPIO pins : LMS_B_Pin LMS_E_Pin */
  GPIO_InitStruct.Pin = LMS_B_Pin|LMS_E_Pin;
 80019f8:	2360      	movs	r3, #96	; 0x60
 80019fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80019fc:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <MX_GPIO_Init+0x198>)
 80019fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a04:	f107 0310 	add.w	r3, r7, #16
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4810      	ldr	r0, [pc, #64]	; (8001a4c <MX_GPIO_Init+0x190>)
 8001a0c:	f001 fe24 	bl	8003658 <HAL_GPIO_Init>

  /*Configure GPIO pin : LMS_M_Pin */
  GPIO_InitStruct.Pin = LMS_M_Pin;
 8001a10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a16:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <MX_GPIO_Init+0x19c>)
 8001a18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LMS_M_GPIO_Port, &GPIO_InitStruct);
 8001a1e:	f107 0310 	add.w	r3, r7, #16
 8001a22:	4619      	mov	r1, r3
 8001a24:	4809      	ldr	r0, [pc, #36]	; (8001a4c <MX_GPIO_Init+0x190>)
 8001a26:	f001 fe17 	bl	8003658 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2102      	movs	r1, #2
 8001a2e:	2017      	movs	r0, #23
 8001a30:	f001 fdcd 	bl	80035ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a34:	2017      	movs	r0, #23
 8001a36:	f001 fde6 	bl	8003606 <HAL_NVIC_EnableIRQ>

}
 8001a3a:	bf00      	nop
 8001a3c:	3720      	adds	r7, #32
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40010800 	.word	0x40010800
 8001a4c:	40010c00 	.word	0x40010c00
 8001a50:	40011000 	.word	0x40011000
 8001a54:	10310000 	.word	0x10310000
 8001a58:	10110000 	.word	0x10110000

08001a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a60:	b672      	cpsid	i
}
 8001a62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001a64:	e7fe      	b.n	8001a64 <Error_Handler+0x8>
	...

08001a68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a6e:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <HAL_MspInit+0x5c>)
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	4a14      	ldr	r2, [pc, #80]	; (8001ac4 <HAL_MspInit+0x5c>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6193      	str	r3, [r2, #24]
 8001a7a:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <HAL_MspInit+0x5c>)
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a86:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <HAL_MspInit+0x5c>)
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	4a0e      	ldr	r2, [pc, #56]	; (8001ac4 <HAL_MspInit+0x5c>)
 8001a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a90:	61d3      	str	r3, [r2, #28]
 8001a92:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <HAL_MspInit+0x5c>)
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9a:	607b      	str	r3, [r7, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <HAL_MspInit+0x60>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	4a04      	ldr	r2, [pc, #16]	; (8001ac8 <HAL_MspInit+0x60>)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aba:	bf00      	nop
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	40010000 	.word	0x40010000

08001acc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 0310 	add.w	r3, r7, #16
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a16      	ldr	r2, [pc, #88]	; (8001b40 <HAL_I2C_MspInit+0x74>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d124      	bne.n	8001b36 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aec:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <HAL_I2C_MspInit+0x78>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	4a14      	ldr	r2, [pc, #80]	; (8001b44 <HAL_I2C_MspInit+0x78>)
 8001af2:	f043 0308 	orr.w	r3, r3, #8
 8001af6:	6193      	str	r3, [r2, #24]
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <HAL_I2C_MspInit+0x78>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	f003 0308 	and.w	r3, r3, #8
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b04:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b0a:	2312      	movs	r3, #18
 8001b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b12:	f107 0310 	add.w	r3, r7, #16
 8001b16:	4619      	mov	r1, r3
 8001b18:	480b      	ldr	r0, [pc, #44]	; (8001b48 <HAL_I2C_MspInit+0x7c>)
 8001b1a:	f001 fd9d 	bl	8003658 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b1e:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <HAL_I2C_MspInit+0x78>)
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	4a08      	ldr	r2, [pc, #32]	; (8001b44 <HAL_I2C_MspInit+0x78>)
 8001b24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b28:	61d3      	str	r3, [r2, #28]
 8001b2a:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <HAL_I2C_MspInit+0x78>)
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b32:	60bb      	str	r3, [r7, #8]
 8001b34:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001b36:	bf00      	nop
 8001b38:	3720      	adds	r7, #32
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40005800 	.word	0x40005800
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40010c00 	.word	0x40010c00

08001b4c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08a      	sub	sp, #40	; 0x28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 0318 	add.w	r3, r7, #24
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a2b      	ldr	r2, [pc, #172]	; (8001c14 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d125      	bne.n	8001bb8 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b6c:	4b2a      	ldr	r3, [pc, #168]	; (8001c18 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	4a29      	ldr	r2, [pc, #164]	; (8001c18 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001b72:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b76:	6193      	str	r3, [r2, #24]
 8001b78:	4b27      	ldr	r3, [pc, #156]	; (8001c18 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b80:	617b      	str	r3, [r7, #20]
 8001b82:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b84:	4b24      	ldr	r3, [pc, #144]	; (8001c18 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	4a23      	ldr	r2, [pc, #140]	; (8001c18 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001b8a:	f043 0304 	orr.w	r3, r3, #4
 8001b8e:	6193      	str	r3, [r2, #24]
 8001b90:	4b21      	ldr	r3, [pc, #132]	; (8001c18 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	613b      	str	r3, [r7, #16]
 8001b9a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ECD1A_Pin|ECD1B_Pin;
 8001b9c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001baa:	f107 0318 	add.w	r3, r7, #24
 8001bae:	4619      	mov	r1, r3
 8001bb0:	481a      	ldr	r0, [pc, #104]	; (8001c1c <HAL_TIM_Encoder_MspInit+0xd0>)
 8001bb2:	f001 fd51 	bl	8003658 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001bb6:	e028      	b.n	8001c0a <HAL_TIM_Encoder_MspInit+0xbe>
  else if(htim_encoder->Instance==TIM2)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bc0:	d123      	bne.n	8001c0a <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bc2:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	4a14      	ldr	r2, [pc, #80]	; (8001c18 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	61d3      	str	r3, [r2, #28]
 8001bce:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bda:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	4a0e      	ldr	r2, [pc, #56]	; (8001c18 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001be0:	f043 0304 	orr.w	r3, r3, #4
 8001be4:	6193      	str	r3, [r2, #24]
 8001be6:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	60bb      	str	r3, [r7, #8]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ECD2A_Pin|ECD2B_Pin;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfe:	f107 0318 	add.w	r3, r7, #24
 8001c02:	4619      	mov	r1, r3
 8001c04:	4805      	ldr	r0, [pc, #20]	; (8001c1c <HAL_TIM_Encoder_MspInit+0xd0>)
 8001c06:	f001 fd27 	bl	8003658 <HAL_GPIO_Init>
}
 8001c0a:	bf00      	nop
 8001c0c:	3728      	adds	r7, #40	; 0x28
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40012c00 	.word	0x40012c00
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40010800 	.word	0x40010800

08001c20 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a16      	ldr	r2, [pc, #88]	; (8001c88 <HAL_TIM_PWM_MspInit+0x68>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d10c      	bne.n	8001c4c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c32:	4b16      	ldr	r3, [pc, #88]	; (8001c8c <HAL_TIM_PWM_MspInit+0x6c>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	4a15      	ldr	r2, [pc, #84]	; (8001c8c <HAL_TIM_PWM_MspInit+0x6c>)
 8001c38:	f043 0302 	orr.w	r3, r3, #2
 8001c3c:	61d3      	str	r3, [r2, #28]
 8001c3e:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <HAL_TIM_PWM_MspInit+0x6c>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c4a:	e018      	b.n	8001c7e <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM4)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a0f      	ldr	r2, [pc, #60]	; (8001c90 <HAL_TIM_PWM_MspInit+0x70>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d113      	bne.n	8001c7e <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c56:	4b0d      	ldr	r3, [pc, #52]	; (8001c8c <HAL_TIM_PWM_MspInit+0x6c>)
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	4a0c      	ldr	r2, [pc, #48]	; (8001c8c <HAL_TIM_PWM_MspInit+0x6c>)
 8001c5c:	f043 0304 	orr.w	r3, r3, #4
 8001c60:	61d3      	str	r3, [r2, #28]
 8001c62:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <HAL_TIM_PWM_MspInit+0x6c>)
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2101      	movs	r1, #1
 8001c72:	201e      	movs	r0, #30
 8001c74:	f001 fcab 	bl	80035ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c78:	201e      	movs	r0, #30
 8001c7a:	f001 fcc4 	bl	8003606 <HAL_NVIC_EnableIRQ>
}
 8001c7e:	bf00      	nop
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40000400 	.word	0x40000400
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	40000800 	.word	0x40000800

08001c94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b088      	sub	sp, #32
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	f107 0310 	add.w	r3, r7, #16
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a1f      	ldr	r2, [pc, #124]	; (8001d2c <HAL_TIM_MspPostInit+0x98>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d118      	bne.n	8001ce6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb4:	4b1e      	ldr	r3, [pc, #120]	; (8001d30 <HAL_TIM_MspPostInit+0x9c>)
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	4a1d      	ldr	r2, [pc, #116]	; (8001d30 <HAL_TIM_MspPostInit+0x9c>)
 8001cba:	f043 0304 	orr.w	r3, r3, #4
 8001cbe:	6193      	str	r3, [r2, #24]
 8001cc0:	4b1b      	ldr	r3, [pc, #108]	; (8001d30 <HAL_TIM_MspPostInit+0x9c>)
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWM1_F_Pin|PWM1_B_Pin;
 8001ccc:	23c0      	movs	r3, #192	; 0xc0
 8001cce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd8:	f107 0310 	add.w	r3, r7, #16
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4815      	ldr	r0, [pc, #84]	; (8001d34 <HAL_TIM_MspPostInit+0xa0>)
 8001ce0:	f001 fcba 	bl	8003658 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001ce4:	e01d      	b.n	8001d22 <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM4)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a13      	ldr	r2, [pc, #76]	; (8001d38 <HAL_TIM_MspPostInit+0xa4>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d118      	bne.n	8001d22 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <HAL_TIM_MspPostInit+0x9c>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	4a0e      	ldr	r2, [pc, #56]	; (8001d30 <HAL_TIM_MspPostInit+0x9c>)
 8001cf6:	f043 0308 	orr.w	r3, r3, #8
 8001cfa:	6193      	str	r3, [r2, #24]
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <HAL_TIM_MspPostInit+0x9c>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	f003 0308 	and.w	r3, r3, #8
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM2_Pin;
 8001d08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d12:	2302      	movs	r3, #2
 8001d14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM2_GPIO_Port, &GPIO_InitStruct);
 8001d16:	f107 0310 	add.w	r3, r7, #16
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4807      	ldr	r0, [pc, #28]	; (8001d3c <HAL_TIM_MspPostInit+0xa8>)
 8001d1e:	f001 fc9b 	bl	8003658 <HAL_GPIO_Init>
}
 8001d22:	bf00      	nop
 8001d24:	3720      	adds	r7, #32
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40000400 	.word	0x40000400
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40010800 	.word	0x40010800
 8001d38:	40000800 	.word	0x40000800
 8001d3c:	40010c00 	.word	0x40010c00

08001d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d44:	e7fe      	b.n	8001d44 <NMI_Handler+0x4>

08001d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d4a:	e7fe      	b.n	8001d4a <HardFault_Handler+0x4>

08001d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <MemManage_Handler+0x4>

08001d52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d56:	e7fe      	b.n	8001d56 <BusFault_Handler+0x4>

08001d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d5c:	e7fe      	b.n	8001d5c <UsageFault_Handler+0x4>

08001d5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr

08001d6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bc80      	pop	{r7}
 8001d74:	4770      	bx	lr

08001d76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr

08001d82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d86:	f001 fae7 	bl	8003358 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LMS_B_Pin);
 8001d92:	2020      	movs	r0, #32
 8001d94:	f001 fe2c 	bl	80039f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LMS_E_Pin);
 8001d98:	2040      	movs	r0, #64	; 0x40
 8001d9a:	f001 fe29 	bl	80039f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LMS_M_Pin);
 8001d9e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001da2:	f001 fe25 	bl	80039f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
	...

08001dac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001db0:	4802      	ldr	r0, [pc, #8]	; (8001dbc <TIM4_IRQHandler+0x10>)
 8001db2:	f003 f8f9 	bl	8004fa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000334 	.word	0x20000334

08001dc0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
	return 1;
 8001dc4:	2301      	movs	r3, #1
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr

08001dce <_kill>:

int _kill(int pid, int sig)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
 8001dd6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001dd8:	f003 fd4e 	bl	8005878 <__errno>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2216      	movs	r2, #22
 8001de0:	601a      	str	r2, [r3, #0]
	return -1;
 8001de2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <_exit>:

void _exit (int status)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001df6:	f04f 31ff 	mov.w	r1, #4294967295
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff ffe7 	bl	8001dce <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e00:	e7fe      	b.n	8001e00 <_exit+0x12>

08001e02 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b086      	sub	sp, #24
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	60f8      	str	r0, [r7, #12]
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e0e:	2300      	movs	r3, #0
 8001e10:	617b      	str	r3, [r7, #20]
 8001e12:	e00a      	b.n	8001e2a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e14:	f3af 8000 	nop.w
 8001e18:	4601      	mov	r1, r0
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	1c5a      	adds	r2, r3, #1
 8001e1e:	60ba      	str	r2, [r7, #8]
 8001e20:	b2ca      	uxtb	r2, r1
 8001e22:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	3301      	adds	r3, #1
 8001e28:	617b      	str	r3, [r7, #20]
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	dbf0      	blt.n	8001e14 <_read+0x12>
	}

return len;
 8001e32:	687b      	ldr	r3, [r7, #4]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]
 8001e4c:	e009      	b.n	8001e62 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	1c5a      	adds	r2, r3, #1
 8001e52:	60ba      	str	r2, [r7, #8]
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	617b      	str	r3, [r7, #20]
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	dbf1      	blt.n	8001e4e <_write+0x12>
	}
	return len;
 8001e6a:	687b      	ldr	r3, [r7, #4]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <_close>:

int _close(int file)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
	return -1;
 8001e7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr

08001e8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
 8001e92:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e9a:	605a      	str	r2, [r3, #4]
	return 0;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr

08001ea8 <_isatty>:

int _isatty(int file)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
	return 1;
 8001eb0:	2301      	movs	r3, #1
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr

08001ebc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
	return 0;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr

08001ed4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001edc:	4a14      	ldr	r2, [pc, #80]	; (8001f30 <_sbrk+0x5c>)
 8001ede:	4b15      	ldr	r3, [pc, #84]	; (8001f34 <_sbrk+0x60>)
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ee8:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <_sbrk+0x64>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d102      	bne.n	8001ef6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ef0:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <_sbrk+0x64>)
 8001ef2:	4a12      	ldr	r2, [pc, #72]	; (8001f3c <_sbrk+0x68>)
 8001ef4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ef6:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <_sbrk+0x64>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4413      	add	r3, r2
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d207      	bcs.n	8001f14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f04:	f003 fcb8 	bl	8005878 <__errno>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	220c      	movs	r2, #12
 8001f0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f12:	e009      	b.n	8001f28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f14:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <_sbrk+0x64>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f1a:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <_sbrk+0x64>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4413      	add	r3, r2
 8001f22:	4a05      	ldr	r2, [pc, #20]	; (8001f38 <_sbrk+0x64>)
 8001f24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f26:	68fb      	ldr	r3, [r7, #12]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	20005000 	.word	0x20005000
 8001f34:	00000400 	.word	0x00000400
 8001f38:	200003e8 	.word	0x200003e8
 8001f3c:	200004a8 	.word	0x200004a8

08001f40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr

08001f4c <MAP>:
bool FLAG_completeRun = false;
u8 preLevel = 3;

/*===================================================*/
uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax,
	uint32_t au32_OUTmin, uint32_t au32_OUTmax) {
 8001f4c:	b5b0      	push	{r4, r5, r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
 8001f58:	603b      	str	r3, [r7, #0]
  uint32_t val = au32_IN - au32_INmin;
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	617b      	str	r3, [r7, #20]
  val = val * (au32_OUTmax - au32_OUTmin);
 8001f62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	1ad2      	subs	r2, r2, r3
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	fb02 f303 	mul.w	r3, r2, r3
 8001f6e:	617b      	str	r3, [r7, #20]
  val = val / (1.0 * (au32_INmax - au32_INmin));
 8001f70:	6978      	ldr	r0, [r7, #20]
 8001f72:	f7fe faeb 	bl	800054c <__aeabi_ui2d>
 8001f76:	4604      	mov	r4, r0
 8001f78:	460d      	mov	r5, r1
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7fe fae3 	bl	800054c <__aeabi_ui2d>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	4629      	mov	r1, r5
 8001f8e:	f7fe fc81 	bl	8000894 <__aeabi_ddiv>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	4610      	mov	r0, r2
 8001f98:	4619      	mov	r1, r3
 8001f9a:	f7fe fe29 	bl	8000bf0 <__aeabi_d2uiz>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	617b      	str	r3, [r7, #20]
  val = val + au32_OUTmin;
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	617b      	str	r3, [r7, #20]
  return val;
 8001faa:	697b      	ldr	r3, [r7, #20]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bdb0      	pop	{r4, r5, r7, pc}

08001fb4 <set_motor_velo>:

void set_motor_velo(u8 id, s16 val) {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	460a      	mov	r2, r1
 8001fbe:	71fb      	strb	r3, [r7, #7]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	80bb      	strh	r3, [r7, #4]
  switch (id) {
 8001fc4:	79fb      	ldrb	r3, [r7, #7]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d002      	beq.n	8001fd0 <set_motor_velo+0x1c>
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d009      	beq.n	8001fe2 <set_motor_velo+0x2e>
	  break;
	case 2:
	  M2_vref = val;
	  break;
  }
}
 8001fce:	e011      	b.n	8001ff4 <set_motor_velo+0x40>
	  M1_vref = val;
 8001fd0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe ff35 	bl	8000e44 <__aeabi_i2f>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	4a07      	ldr	r2, [pc, #28]	; (8001ffc <set_motor_velo+0x48>)
 8001fde:	6013      	str	r3, [r2, #0]
	  break;
 8001fe0:	e008      	b.n	8001ff4 <set_motor_velo+0x40>
	  M2_vref = val;
 8001fe2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe ff2c 	bl	8000e44 <__aeabi_i2f>
 8001fec:	4603      	mov	r3, r0
 8001fee:	4a04      	ldr	r2, [pc, #16]	; (8002000 <set_motor_velo+0x4c>)
 8001ff0:	6013      	str	r3, [r2, #0]
	  break;
 8001ff2:	bf00      	nop
}
 8001ff4:	bf00      	nop
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	2000043c 	.word	0x2000043c
 8002000:	20000440 	.word	0x20000440

08002004 <set_motor>:
void set_motor(u8 id, s8 dir, u16 val) {
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af02      	add	r7, sp, #8
 800200a:	4603      	mov	r3, r0
 800200c:	71fb      	strb	r3, [r7, #7]
 800200e:	460b      	mov	r3, r1
 8002010:	71bb      	strb	r3, [r7, #6]
 8002012:	4613      	mov	r3, r2
 8002014:	80bb      	strh	r3, [r7, #4]
  u16 pwm;
  switch (id) {
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d002      	beq.n	8002022 <set_motor+0x1e>
 800201c:	2b02      	cmp	r3, #2
 800201e:	d05d      	beq.n	80020dc <set_motor+0xd8>
		HAL_GPIO_WritePin(M2_R_GPIO_Port, M2_R_Pin, GPIO_PIN_RESET);
		TIM4->CCR3 = 999;
	  }
	  break;
	default:
	  return;
 8002020:	e0c6      	b.n	80021b0 <set_motor+0x1ac>
	  pwm = MAP(val, 0, 1000, 0, 499);
 8002022:	88b8      	ldrh	r0, [r7, #4]
 8002024:	f240 13f3 	movw	r3, #499	; 0x1f3
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	2300      	movs	r3, #0
 800202c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002030:	2100      	movs	r1, #0
 8002032:	f7ff ff8b 	bl	8001f4c <MAP>
 8002036:	4603      	mov	r3, r0
 8002038:	81fb      	strh	r3, [r7, #14]
	  if (dir == 1) {
 800203a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d110      	bne.n	8002064 <set_motor+0x60>
		HAL_GPIO_WritePin(M1_R_GPIO_Port, M1_R_Pin, GPIO_PIN_SET);
 8002042:	2201      	movs	r2, #1
 8002044:	2108      	movs	r1, #8
 8002046:	485c      	ldr	r0, [pc, #368]	; (80021b8 <set_motor+0x1b4>)
 8002048:	f001 fca1 	bl	800398e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1_L_GPIO_Port, M1_L_Pin, GPIO_PIN_SET);
 800204c:	2201      	movs	r2, #1
 800204e:	2104      	movs	r1, #4
 8002050:	4859      	ldr	r0, [pc, #356]	; (80021b8 <set_motor+0x1b4>)
 8002052:	f001 fc9c 	bl	800398e <HAL_GPIO_WritePin>
		TIM3->CCR1 = pwm;
 8002056:	4a59      	ldr	r2, [pc, #356]	; (80021bc <set_motor+0x1b8>)
 8002058:	89fb      	ldrh	r3, [r7, #14]
 800205a:	6353      	str	r3, [r2, #52]	; 0x34
		TIM3->CCR2 = 0;
 800205c:	4b57      	ldr	r3, [pc, #348]	; (80021bc <set_motor+0x1b8>)
 800205e:	2200      	movs	r2, #0
 8002060:	639a      	str	r2, [r3, #56]	; 0x38
	  break;
 8002062:	e0a5      	b.n	80021b0 <set_motor+0x1ac>
	  } else if (dir == -1) {
 8002064:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800206c:	d110      	bne.n	8002090 <set_motor+0x8c>
		HAL_GPIO_WritePin(M1_R_GPIO_Port, M1_R_Pin, GPIO_PIN_SET);
 800206e:	2201      	movs	r2, #1
 8002070:	2108      	movs	r1, #8
 8002072:	4851      	ldr	r0, [pc, #324]	; (80021b8 <set_motor+0x1b4>)
 8002074:	f001 fc8b 	bl	800398e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1_L_GPIO_Port, M1_L_Pin, GPIO_PIN_SET);
 8002078:	2201      	movs	r2, #1
 800207a:	2104      	movs	r1, #4
 800207c:	484e      	ldr	r0, [pc, #312]	; (80021b8 <set_motor+0x1b4>)
 800207e:	f001 fc86 	bl	800398e <HAL_GPIO_WritePin>
		TIM3->CCR2 = pwm;
 8002082:	4a4e      	ldr	r2, [pc, #312]	; (80021bc <set_motor+0x1b8>)
 8002084:	89fb      	ldrh	r3, [r7, #14]
 8002086:	6393      	str	r3, [r2, #56]	; 0x38
		TIM3->CCR1 = 0;
 8002088:	4b4c      	ldr	r3, [pc, #304]	; (80021bc <set_motor+0x1b8>)
 800208a:	2200      	movs	r2, #0
 800208c:	635a      	str	r2, [r3, #52]	; 0x34
	  break;
 800208e:	e08f      	b.n	80021b0 <set_motor+0x1ac>
	  } else if (dir == 0) //Freely run
 8002090:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d110      	bne.n	80020ba <set_motor+0xb6>
		HAL_GPIO_WritePin(M1_R_GPIO_Port, M1_R_Pin, GPIO_PIN_RESET);
 8002098:	2200      	movs	r2, #0
 800209a:	2108      	movs	r1, #8
 800209c:	4846      	ldr	r0, [pc, #280]	; (80021b8 <set_motor+0x1b4>)
 800209e:	f001 fc76 	bl	800398e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1_L_GPIO_Port, M1_L_Pin, GPIO_PIN_RESET);
 80020a2:	2200      	movs	r2, #0
 80020a4:	2104      	movs	r1, #4
 80020a6:	4844      	ldr	r0, [pc, #272]	; (80021b8 <set_motor+0x1b4>)
 80020a8:	f001 fc71 	bl	800398e <HAL_GPIO_WritePin>
		TIM3->CCR1 = 0;
 80020ac:	4b43      	ldr	r3, [pc, #268]	; (80021bc <set_motor+0x1b8>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 0;
 80020b2:	4b42      	ldr	r3, [pc, #264]	; (80021bc <set_motor+0x1b8>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	639a      	str	r2, [r3, #56]	; 0x38
	  break;
 80020b8:	e07a      	b.n	80021b0 <set_motor+0x1ac>
		HAL_GPIO_WritePin(M1_R_GPIO_Port, M1_R_Pin, GPIO_PIN_SET);
 80020ba:	2201      	movs	r2, #1
 80020bc:	2108      	movs	r1, #8
 80020be:	483e      	ldr	r0, [pc, #248]	; (80021b8 <set_motor+0x1b4>)
 80020c0:	f001 fc65 	bl	800398e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1_L_GPIO_Port, M1_L_Pin, GPIO_PIN_SET);
 80020c4:	2201      	movs	r2, #1
 80020c6:	2104      	movs	r1, #4
 80020c8:	483b      	ldr	r0, [pc, #236]	; (80021b8 <set_motor+0x1b4>)
 80020ca:	f001 fc60 	bl	800398e <HAL_GPIO_WritePin>
		TIM3->CCR2 = 0;
 80020ce:	4b3b      	ldr	r3, [pc, #236]	; (80021bc <set_motor+0x1b8>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR1 = 0;
 80020d4:	4b39      	ldr	r3, [pc, #228]	; (80021bc <set_motor+0x1b8>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	635a      	str	r2, [r3, #52]	; 0x34
	  break;
 80020da:	e069      	b.n	80021b0 <set_motor+0x1ac>
	  pwm = MAP(val, 0, 1000, 0, 999);
 80020dc:	88b8      	ldrh	r0, [r7, #4]
 80020de:	f240 33e7 	movw	r3, #999	; 0x3e7
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	2300      	movs	r3, #0
 80020e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020ea:	2100      	movs	r1, #0
 80020ec:	f7ff ff2e 	bl	8001f4c <MAP>
 80020f0:	4603      	mov	r3, r0
 80020f2:	81fb      	strh	r3, [r7, #14]
	  if (dir == -1 && BEGIN_REACH == false) {
 80020f4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80020f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020fc:	d116      	bne.n	800212c <set_motor+0x128>
 80020fe:	4b30      	ldr	r3, [pc, #192]	; (80021c0 <set_motor+0x1bc>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	f083 0301 	eor.w	r3, r3, #1
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00f      	beq.n	800212c <set_motor+0x128>
		HAL_GPIO_WritePin(M2_L_GPIO_Port, M2_L_Pin, GPIO_PIN_SET);
 800210c:	2201      	movs	r2, #1
 800210e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002112:	482c      	ldr	r0, [pc, #176]	; (80021c4 <set_motor+0x1c0>)
 8002114:	f001 fc3b 	bl	800398e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2_R_GPIO_Port, M2_R_Pin, GPIO_PIN_RESET);
 8002118:	2200      	movs	r2, #0
 800211a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800211e:	4829      	ldr	r0, [pc, #164]	; (80021c4 <set_motor+0x1c0>)
 8002120:	f001 fc35 	bl	800398e <HAL_GPIO_WritePin>
		TIM4->CCR3 = pwm;
 8002124:	4a28      	ldr	r2, [pc, #160]	; (80021c8 <set_motor+0x1c4>)
 8002126:	89fb      	ldrh	r3, [r7, #14]
 8002128:	63d3      	str	r3, [r2, #60]	; 0x3c
 800212a:	e040      	b.n	80021ae <set_motor+0x1aa>
	  } else if (dir == 1 && END_REACH == false) {
 800212c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d116      	bne.n	8002162 <set_motor+0x15e>
 8002134:	4b25      	ldr	r3, [pc, #148]	; (80021cc <set_motor+0x1c8>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	f083 0301 	eor.w	r3, r3, #1
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00f      	beq.n	8002162 <set_motor+0x15e>
		HAL_GPIO_WritePin(M2_L_GPIO_Port, M2_L_Pin, GPIO_PIN_RESET);
 8002142:	2200      	movs	r2, #0
 8002144:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002148:	481e      	ldr	r0, [pc, #120]	; (80021c4 <set_motor+0x1c0>)
 800214a:	f001 fc20 	bl	800398e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2_R_GPIO_Port, M2_R_Pin, GPIO_PIN_SET);
 800214e:	2201      	movs	r2, #1
 8002150:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002154:	481b      	ldr	r0, [pc, #108]	; (80021c4 <set_motor+0x1c0>)
 8002156:	f001 fc1a 	bl	800398e <HAL_GPIO_WritePin>
		TIM4->CCR3 = pwm;
 800215a:	4a1b      	ldr	r2, [pc, #108]	; (80021c8 <set_motor+0x1c4>)
 800215c:	89fb      	ldrh	r3, [r7, #14]
 800215e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002160:	e025      	b.n	80021ae <set_motor+0x1aa>
	  } else if (dir == -2) //Freely run
 8002162:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002166:	f113 0f02 	cmn.w	r3, #2
 800216a:	d10f      	bne.n	800218c <set_motor+0x188>
		TIM4->CCR3 = 0;
 800216c:	4b16      	ldr	r3, [pc, #88]	; (80021c8 <set_motor+0x1c4>)
 800216e:	2200      	movs	r2, #0
 8002170:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(M2_L_GPIO_Port, M2_L_Pin, GPIO_PIN_RESET);
 8002172:	2200      	movs	r2, #0
 8002174:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002178:	4812      	ldr	r0, [pc, #72]	; (80021c4 <set_motor+0x1c0>)
 800217a:	f001 fc08 	bl	800398e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2_R_GPIO_Port, M2_R_Pin, GPIO_PIN_RESET);
 800217e:	2200      	movs	r2, #0
 8002180:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002184:	480f      	ldr	r0, [pc, #60]	; (80021c4 <set_motor+0x1c0>)
 8002186:	f001 fc02 	bl	800398e <HAL_GPIO_WritePin>
	  break;
 800218a:	e010      	b.n	80021ae <set_motor+0x1aa>
		HAL_GPIO_WritePin(M2_L_GPIO_Port, M2_L_Pin, GPIO_PIN_RESET);
 800218c:	2200      	movs	r2, #0
 800218e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002192:	480c      	ldr	r0, [pc, #48]	; (80021c4 <set_motor+0x1c0>)
 8002194:	f001 fbfb 	bl	800398e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2_R_GPIO_Port, M2_R_Pin, GPIO_PIN_RESET);
 8002198:	2200      	movs	r2, #0
 800219a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800219e:	4809      	ldr	r0, [pc, #36]	; (80021c4 <set_motor+0x1c0>)
 80021a0:	f001 fbf5 	bl	800398e <HAL_GPIO_WritePin>
		TIM4->CCR3 = 999;
 80021a4:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <set_motor+0x1c4>)
 80021a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021aa:	63da      	str	r2, [r3, #60]	; 0x3c
	  break;
 80021ac:	e7ff      	b.n	80021ae <set_motor+0x1aa>
 80021ae:	bf00      	nop
  }
}
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40010800 	.word	0x40010800
 80021bc:	40000400 	.word	0x40000400
 80021c0:	2000037d 	.word	0x2000037d
 80021c4:	40010c00 	.word	0x40010c00
 80021c8:	40000800 	.word	0x40000800
 80021cc:	2000037c 	.word	0x2000037c

080021d0 <lightLED>:

void lightLED(bool yellow, bool green) {
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	460a      	mov	r2, r1
 80021da:	71fb      	strb	r3, [r7, #7]
 80021dc:	4613      	mov	r3, r2
 80021de:	71bb      	strb	r3, [r7, #6]
  if (yellow) {
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d006      	beq.n	80021f4 <lightLED+0x24>
	HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, GPIO_PIN_SET);
 80021e6:	2201      	movs	r2, #1
 80021e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021ec:	4814      	ldr	r0, [pc, #80]	; (8002240 <lightLED+0x70>)
 80021ee:	f001 fbce 	bl	800398e <HAL_GPIO_WritePin>
 80021f2:	e00b      	b.n	800220c <lightLED+0x3c>
  } else if (yellow == false) {
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	f083 0301 	eor.w	r3, r3, #1
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d005      	beq.n	800220c <lightLED+0x3c>
	HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, GPIO_PIN_RESET);
 8002200:	2200      	movs	r2, #0
 8002202:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002206:	480e      	ldr	r0, [pc, #56]	; (8002240 <lightLED+0x70>)
 8002208:	f001 fbc1 	bl	800398e <HAL_GPIO_WritePin>
  }

  if (green) {
 800220c:	79bb      	ldrb	r3, [r7, #6]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d006      	beq.n	8002220 <lightLED+0x50>
	HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8002212:	2201      	movs	r2, #1
 8002214:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002218:	480a      	ldr	r0, [pc, #40]	; (8002244 <lightLED+0x74>)
 800221a:	f001 fbb8 	bl	800398e <HAL_GPIO_WritePin>
  } else if (green == false) {
	HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
  }
}
 800221e:	e00b      	b.n	8002238 <lightLED+0x68>
  } else if (green == false) {
 8002220:	79bb      	ldrb	r3, [r7, #6]
 8002222:	f083 0301 	eor.w	r3, r3, #1
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b00      	cmp	r3, #0
 800222a:	d005      	beq.n	8002238 <lightLED+0x68>
	HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 800222c:	2200      	movs	r2, #0
 800222e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002232:	4804      	ldr	r0, [pc, #16]	; (8002244 <lightLED+0x74>)
 8002234:	f001 fbab 	bl	800398e <HAL_GPIO_WritePin>
}
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40010800 	.word	0x40010800
 8002244:	40010c00 	.word	0x40010c00

08002248 <HAL_GPIO_EXTI_Callback>:
bool FLAG_startPointSet = false;
bool FLAG_midInTime = false;
u32 midInTime = 0;
u32 midDelta = 0;
bool FLAG_midOutTime = false;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == LMS_B_Pin) {
 8002252:	88fb      	ldrh	r3, [r7, #6]
 8002254:	2b20      	cmp	r3, #32
 8002256:	d11a      	bne.n	800228e <HAL_GPIO_EXTI_Callback+0x46>
	if (HAL_GPIO_ReadPin(LMS_B_GPIO_Port, LMS_B_Pin) == GPIO_PIN_SET) {
 8002258:	2120      	movs	r1, #32
 800225a:	484f      	ldr	r0, [pc, #316]	; (8002398 <HAL_GPIO_EXTI_Callback+0x150>)
 800225c:	f001 fb80 	bl	8003960 <HAL_GPIO_ReadPin>
 8002260:	4603      	mov	r3, r0
 8002262:	2b01      	cmp	r3, #1
 8002264:	d103      	bne.n	800226e <HAL_GPIO_EXTI_Callback+0x26>
	  BEGIN_REACH = false;
 8002266:	4b4d      	ldr	r3, [pc, #308]	; (800239c <HAL_GPIO_EXTI_Callback+0x154>)
 8002268:	2200      	movs	r2, #0
 800226a:	701a      	strb	r2, [r3, #0]
 800226c:	e091      	b.n	8002392 <HAL_GPIO_EXTI_Callback+0x14a>
	} else {
	  BEGIN_REACH = true;
 800226e:	4b4b      	ldr	r3, [pc, #300]	; (800239c <HAL_GPIO_EXTI_Callback+0x154>)
 8002270:	2201      	movs	r2, #1
 8002272:	701a      	strb	r2, [r3, #0]
	  if (M2_dir == -1)
 8002274:	4b4a      	ldr	r3, [pc, #296]	; (80023a0 <HAL_GPIO_EXTI_Callback+0x158>)
 8002276:	f993 3000 	ldrsb.w	r3, [r3]
 800227a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800227e:	f040 8088 	bne.w	8002392 <HAL_GPIO_EXTI_Callback+0x14a>
		set_motor(2, 0, 0);
 8002282:	2200      	movs	r2, #0
 8002284:	2100      	movs	r1, #0
 8002286:	2002      	movs	r0, #2
 8002288:	f7ff febc 	bl	8002004 <set_motor>
 800228c:	e081      	b.n	8002392 <HAL_GPIO_EXTI_Callback+0x14a>
	}
  } else if (GPIO_Pin == LMS_E_Pin) {
 800228e:	88fb      	ldrh	r3, [r7, #6]
 8002290:	2b40      	cmp	r3, #64	; 0x40
 8002292:	d118      	bne.n	80022c6 <HAL_GPIO_EXTI_Callback+0x7e>
	if (HAL_GPIO_ReadPin(LMS_E_GPIO_Port, LMS_E_Pin) == GPIO_PIN_SET) {
 8002294:	2140      	movs	r1, #64	; 0x40
 8002296:	4840      	ldr	r0, [pc, #256]	; (8002398 <HAL_GPIO_EXTI_Callback+0x150>)
 8002298:	f001 fb62 	bl	8003960 <HAL_GPIO_ReadPin>
 800229c:	4603      	mov	r3, r0
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d103      	bne.n	80022aa <HAL_GPIO_EXTI_Callback+0x62>
	  END_REACH = false;
 80022a2:	4b40      	ldr	r3, [pc, #256]	; (80023a4 <HAL_GPIO_EXTI_Callback+0x15c>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	701a      	strb	r2, [r3, #0]
 80022a8:	e073      	b.n	8002392 <HAL_GPIO_EXTI_Callback+0x14a>
	} else {
	  END_REACH = true;
 80022aa:	4b3e      	ldr	r3, [pc, #248]	; (80023a4 <HAL_GPIO_EXTI_Callback+0x15c>)
 80022ac:	2201      	movs	r2, #1
 80022ae:	701a      	strb	r2, [r3, #0]
	  if (M2_dir == 1)
 80022b0:	4b3b      	ldr	r3, [pc, #236]	; (80023a0 <HAL_GPIO_EXTI_Callback+0x158>)
 80022b2:	f993 3000 	ldrsb.w	r3, [r3]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d16b      	bne.n	8002392 <HAL_GPIO_EXTI_Callback+0x14a>
		set_motor(2, 0, 0);
 80022ba:	2200      	movs	r2, #0
 80022bc:	2100      	movs	r1, #0
 80022be:	2002      	movs	r0, #2
 80022c0:	f7ff fea0 	bl	8002004 <set_motor>
 80022c4:	e065      	b.n	8002392 <HAL_GPIO_EXTI_Callback+0x14a>
	}
  } else if (GPIO_Pin == LMS_M_Pin) {
 80022c6:	88fb      	ldrh	r3, [r7, #6]
 80022c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022cc:	d160      	bne.n	8002390 <HAL_GPIO_EXTI_Callback+0x148>
	if (HAL_GPIO_ReadPin(LMS_M_GPIO_Port, LMS_M_Pin) == GPIO_PIN_SET) {
 80022ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022d2:	4831      	ldr	r0, [pc, #196]	; (8002398 <HAL_GPIO_EXTI_Callback+0x150>)
 80022d4:	f001 fb44 	bl	8003960 <HAL_GPIO_ReadPin>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d142      	bne.n	8002364 <HAL_GPIO_EXTI_Callback+0x11c>
	  MID_REACH = false;
 80022de:	4b32      	ldr	r3, [pc, #200]	; (80023a8 <HAL_GPIO_EXTI_Callback+0x160>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	701a      	strb	r2, [r3, #0]
	  FLAG_midInTime = false;
 80022e4:	4b31      	ldr	r3, [pc, #196]	; (80023ac <HAL_GPIO_EXTI_Callback+0x164>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	701a      	strb	r2, [r3, #0]
	  if (FLAG_midOutTime == false) {
 80022ea:	4b31      	ldr	r3, [pc, #196]	; (80023b0 <HAL_GPIO_EXTI_Callback+0x168>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	f083 0301 	eor.w	r3, r3, #1
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d04c      	beq.n	8002392 <HAL_GPIO_EXTI_Callback+0x14a>
		FLAG_midOutTime = true;
 80022f8:	4b2d      	ldr	r3, [pc, #180]	; (80023b0 <HAL_GPIO_EXTI_Callback+0x168>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	701a      	strb	r2, [r3, #0]
		u32 now_midOut = HAL_GetTick();
 80022fe:	f001 f83d 	bl	800337c <HAL_GetTick>
 8002302:	60f8      	str	r0, [r7, #12]
		midDelta = now_midOut - midInTime;
 8002304:	4b2b      	ldr	r3, [pc, #172]	; (80023b4 <HAL_GPIO_EXTI_Callback+0x16c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	4a2a      	ldr	r2, [pc, #168]	; (80023b8 <HAL_GPIO_EXTI_Callback+0x170>)
 800230e:	6013      	str	r3, [r2, #0]
		midInTime = now_midOut;
 8002310:	4a28      	ldr	r2, [pc, #160]	; (80023b4 <HAL_GPIO_EXTI_Callback+0x16c>)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6013      	str	r3, [r2, #0]
		if (midDelta > 3000) {
 8002316:	4b28      	ldr	r3, [pc, #160]	; (80023b8 <HAL_GPIO_EXTI_Callback+0x170>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800231e:	4293      	cmp	r3, r2
 8002320:	d905      	bls.n	800232e <HAL_GPIO_EXTI_Callback+0xe6>
		  FLAG_startPointSet = false;
 8002322:	4b26      	ldr	r3, [pc, #152]	; (80023bc <HAL_GPIO_EXTI_Callback+0x174>)
 8002324:	2200      	movs	r2, #0
 8002326:	701a      	strb	r2, [r3, #0]
		  midDelta = 0;
 8002328:	4b23      	ldr	r3, [pc, #140]	; (80023b8 <HAL_GPIO_EXTI_Callback+0x170>)
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]
		}

		if ((FLAG_startPointSet == false) && (FLAG_runMotor == true)) {
 800232e:	4b23      	ldr	r3, [pc, #140]	; (80023bc <HAL_GPIO_EXTI_Callback+0x174>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	f083 0301 	eor.w	r3, r3, #1
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b00      	cmp	r3, #0
 800233a:	d02a      	beq.n	8002392 <HAL_GPIO_EXTI_Callback+0x14a>
 800233c:	4b20      	ldr	r3, [pc, #128]	; (80023c0 <HAL_GPIO_EXTI_Callback+0x178>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d026      	beq.n	8002392 <HAL_GPIO_EXTI_Callback+0x14a>
		  M2_travel_StartPoint = M2_x;
 8002344:	4b1f      	ldr	r3, [pc, #124]	; (80023c4 <HAL_GPIO_EXTI_Callback+0x17c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a1f      	ldr	r2, [pc, #124]	; (80023c8 <HAL_GPIO_EXTI_Callback+0x180>)
 800234a:	6013      	str	r3, [r2, #0]
		  M2_travel = 0;
 800234c:	4b1f      	ldr	r3, [pc, #124]	; (80023cc <HAL_GPIO_EXTI_Callback+0x184>)
 800234e:	f04f 0200 	mov.w	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
		  M1_travel = 0;
 8002354:	4b1e      	ldr	r3, [pc, #120]	; (80023d0 <HAL_GPIO_EXTI_Callback+0x188>)
 8002356:	f04f 0200 	mov.w	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
		  FLAG_startPointSet = true;
 800235c:	4b17      	ldr	r3, [pc, #92]	; (80023bc <HAL_GPIO_EXTI_Callback+0x174>)
 800235e:	2201      	movs	r2, #1
 8002360:	701a      	strb	r2, [r3, #0]
 8002362:	e016      	b.n	8002392 <HAL_GPIO_EXTI_Callback+0x14a>
		}
	  }
	} else {
	  MID_REACH = true;
 8002364:	4b10      	ldr	r3, [pc, #64]	; (80023a8 <HAL_GPIO_EXTI_Callback+0x160>)
 8002366:	2201      	movs	r2, #1
 8002368:	701a      	strb	r2, [r3, #0]
	  FLAG_midOutTime = false;
 800236a:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <HAL_GPIO_EXTI_Callback+0x168>)
 800236c:	2200      	movs	r2, #0
 800236e:	701a      	strb	r2, [r3, #0]
	  if (FLAG_midInTime == false) {
 8002370:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <HAL_GPIO_EXTI_Callback+0x164>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	f083 0301 	eor.w	r3, r3, #1
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d009      	beq.n	8002392 <HAL_GPIO_EXTI_Callback+0x14a>
		FLAG_midInTime = true;
 800237e:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <HAL_GPIO_EXTI_Callback+0x164>)
 8002380:	2201      	movs	r2, #1
 8002382:	701a      	strb	r2, [r3, #0]
		midInTime = HAL_GetTick();
 8002384:	f000 fffa 	bl	800337c <HAL_GetTick>
 8002388:	4603      	mov	r3, r0
 800238a:	4a0a      	ldr	r2, [pc, #40]	; (80023b4 <HAL_GPIO_EXTI_Callback+0x16c>)
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	e000      	b.n	8002392 <HAL_GPIO_EXTI_Callback+0x14a>
	  }
	}
  } else
	return;
 8002390:	bf00      	nop
}
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40010c00 	.word	0x40010c00
 800239c:	2000037d 	.word	0x2000037d
 80023a0:	20000400 	.word	0x20000400
 80023a4:	2000037c 	.word	0x2000037c
 80023a8:	2000037e 	.word	0x2000037e
 80023ac:	20000464 	.word	0x20000464
 80023b0:	20000470 	.word	0x20000470
 80023b4:	20000468 	.word	0x20000468
 80023b8:	2000046c 	.word	0x2000046c
 80023bc:	20000463 	.word	0x20000463
 80023c0:	20000438 	.word	0x20000438
 80023c4:	20000420 	.word	0x20000420
 80023c8:	20000434 	.word	0x20000434
 80023cc:	20000424 	.word	0x20000424
 80023d0:	20000428 	.word	0x20000428

080023d4 <start_up>:

void start_up() {
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af02      	add	r7, sp, #8
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80023da:	213c      	movs	r1, #60	; 0x3c
 80023dc:	483b      	ldr	r0, [pc, #236]	; (80024cc <start_up+0xf8>)
 80023de:	f002 fd55 	bl	8004e8c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80023e2:	213c      	movs	r1, #60	; 0x3c
 80023e4:	483a      	ldr	r0, [pc, #232]	; (80024d0 <start_up+0xfc>)
 80023e6:	f002 fd51 	bl	8004e8c <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start_IT(&htim4);
 80023ea:	483a      	ldr	r0, [pc, #232]	; (80024d4 <start_up+0x100>)
 80023ec:	f002 fb68 	bl	8004ac0 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80023f0:	2100      	movs	r1, #0
 80023f2:	4839      	ldr	r0, [pc, #228]	; (80024d8 <start_up+0x104>)
 80023f4:	f002 fc06 	bl	8004c04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80023f8:	2104      	movs	r1, #4
 80023fa:	4837      	ldr	r0, [pc, #220]	; (80024d8 <start_up+0x104>)
 80023fc:	f002 fc02 	bl	8004c04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002400:	2108      	movs	r1, #8
 8002402:	4834      	ldr	r0, [pc, #208]	; (80024d4 <start_up+0x100>)
 8002404:	f002 fbfe 	bl	8004c04 <HAL_TIM_PWM_Start>

  buttonInit(&BTN_Start, BTN_START_GPIO_Port, BTN_START_Pin);
 8002408:	2201      	movs	r2, #1
 800240a:	4934      	ldr	r1, [pc, #208]	; (80024dc <start_up+0x108>)
 800240c:	4834      	ldr	r0, [pc, #208]	; (80024e0 <start_up+0x10c>)
 800240e:	f7fe fe14 	bl	800103a <buttonInit>
  buttonInit(&BTN_Stop, BTN_STOP_GPIO_Port, BTN_STOP_Pin);
 8002412:	2202      	movs	r2, #2
 8002414:	4931      	ldr	r1, [pc, #196]	; (80024dc <start_up+0x108>)
 8002416:	4833      	ldr	r0, [pc, #204]	; (80024e4 <start_up+0x110>)
 8002418:	f7fe fe0f 	bl	800103a <buttonInit>
  buttonInit(&SW_Mode, MODE_SW_GPIO_Port, MODE_SW_Pin);
 800241c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002420:	4931      	ldr	r1, [pc, #196]	; (80024e8 <start_up+0x114>)
 8002422:	4832      	ldr	r0, [pc, #200]	; (80024ec <start_up+0x118>)
 8002424:	f7fe fe09 	bl	800103a <buttonInit>
  buttonInit(&SW_Lvl1, LVL_SW1_GPIO_Port, LVL_SW1_Pin);
 8002428:	2210      	movs	r2, #16
 800242a:	492c      	ldr	r1, [pc, #176]	; (80024dc <start_up+0x108>)
 800242c:	4830      	ldr	r0, [pc, #192]	; (80024f0 <start_up+0x11c>)
 800242e:	f7fe fe04 	bl	800103a <buttonInit>
  buttonInit(&SW_Lvl2, LVL_SW2_GPIO_Port, LVL_SW2_Pin);
 8002432:	2208      	movs	r2, #8
 8002434:	4929      	ldr	r1, [pc, #164]	; (80024dc <start_up+0x108>)
 8002436:	482f      	ldr	r0, [pc, #188]	; (80024f4 <start_up+0x120>)
 8002438:	f7fe fdff 	bl	800103a <buttonInit>

  LCD_Begin(&LCD, &hi2c2, 0x4E, 20, 4);
 800243c:	2304      	movs	r3, #4
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	2314      	movs	r3, #20
 8002442:	224e      	movs	r2, #78	; 0x4e
 8002444:	492c      	ldr	r1, [pc, #176]	; (80024f8 <start_up+0x124>)
 8002446:	482d      	ldr	r0, [pc, #180]	; (80024fc <start_up+0x128>)
 8002448:	f7fe ffc2 	bl	80013d0 <LCD_Begin>
   |Target:             |
   |Total:              |
   |                    |
   ----------------------
   **************************/
  LCD_Clear(&LCD);
 800244c:	482b      	ldr	r0, [pc, #172]	; (80024fc <start_up+0x128>)
 800244e:	f7fe ffef 	bl	8001430 <LCD_Clear>
  LCD_Print_String_At(&LCD, 1, 3, "Abrasion Tester");
 8002452:	4b2b      	ldr	r3, [pc, #172]	; (8002500 <start_up+0x12c>)
 8002454:	2203      	movs	r2, #3
 8002456:	2101      	movs	r1, #1
 8002458:	4828      	ldr	r0, [pc, #160]	; (80024fc <start_up+0x128>)
 800245a:	f7ff f804 	bl	8001466 <LCD_Print_String_At>

  state = buttonRead(&SW_Mode);
 800245e:	4823      	ldr	r0, [pc, #140]	; (80024ec <start_up+0x118>)
 8002460:	f7fe fe12 	bl	8001088 <buttonRead>
 8002464:	4603      	mov	r3, r0
 8002466:	461a      	mov	r2, r3
 8002468:	4b26      	ldr	r3, [pc, #152]	; (8002504 <start_up+0x130>)
 800246a:	701a      	strb	r2, [r3, #0]
  if (state == IDLE)
 800246c:	4b25      	ldr	r3, [pc, #148]	; (8002504 <start_up+0x130>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d102      	bne.n	800247a <start_up+0xa6>
	active_idle();
 8002474:	f000 f86a 	bl	800254c <active_idle>
 8002478:	e005      	b.n	8002486 <start_up+0xb2>
  else if (state == RUN)
 800247a:	4b22      	ldr	r3, [pc, #136]	; (8002504 <start_up+0x130>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <start_up+0xb2>
	active_run();
 8002482:	f000 f8a9 	bl	80025d8 <active_run>

  if (HAL_GPIO_ReadPin(LMS_B_GPIO_Port, LMS_B_Pin) == GPIO_PIN_RESET) {
 8002486:	2120      	movs	r1, #32
 8002488:	4814      	ldr	r0, [pc, #80]	; (80024dc <start_up+0x108>)
 800248a:	f001 fa69 	bl	8003960 <HAL_GPIO_ReadPin>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d102      	bne.n	800249a <start_up+0xc6>
	BEGIN_REACH = true;
 8002494:	4b1c      	ldr	r3, [pc, #112]	; (8002508 <start_up+0x134>)
 8002496:	2201      	movs	r2, #1
 8002498:	701a      	strb	r2, [r3, #0]
  }
  if (HAL_GPIO_ReadPin(LMS_E_GPIO_Port, LMS_E_Pin) == GPIO_PIN_RESET) {
 800249a:	2140      	movs	r1, #64	; 0x40
 800249c:	480f      	ldr	r0, [pc, #60]	; (80024dc <start_up+0x108>)
 800249e:	f001 fa5f 	bl	8003960 <HAL_GPIO_ReadPin>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d102      	bne.n	80024ae <start_up+0xda>
	END_REACH = true;
 80024a8:	4b18      	ldr	r3, [pc, #96]	; (800250c <start_up+0x138>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	701a      	strb	r2, [r3, #0]
  }
  if (HAL_GPIO_ReadPin(LMS_M_GPIO_Port, LMS_M_Pin) == GPIO_PIN_RESET) {
 80024ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024b2:	480a      	ldr	r0, [pc, #40]	; (80024dc <start_up+0x108>)
 80024b4:	f001 fa54 	bl	8003960 <HAL_GPIO_ReadPin>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d102      	bne.n	80024c4 <start_up+0xf0>
	MID_REACH = true;
 80024be:	4b14      	ldr	r3, [pc, #80]	; (8002510 <start_up+0x13c>)
 80024c0:	2201      	movs	r2, #1
 80024c2:	701a      	strb	r2, [r3, #0]
  }

}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	2000025c 	.word	0x2000025c
 80024d0:	200002a4 	.word	0x200002a4
 80024d4:	20000334 	.word	0x20000334
 80024d8:	200002ec 	.word	0x200002ec
 80024dc:	40010c00 	.word	0x40010c00
 80024e0:	20000380 	.word	0x20000380
 80024e4:	20000394 	.word	0x20000394
 80024e8:	40010800 	.word	0x40010800
 80024ec:	200003a8 	.word	0x200003a8
 80024f0:	200003bc 	.word	0x200003bc
 80024f4:	200003d0 	.word	0x200003d0
 80024f8:	20000208 	.word	0x20000208
 80024fc:	200003ec 	.word	0x200003ec
 8002500:	080086a8 	.word	0x080086a8
 8002504:	200003e4 	.word	0x200003e4
 8002508:	2000037d 	.word	0x2000037d
 800250c:	2000037c 	.word	0x2000037c
 8002510:	2000037e 	.word	0x2000037e

08002514 <stop_motor>:
void stop_motor(bool motor1, bool motor2) {
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	460a      	mov	r2, r1
 800251e:	71fb      	strb	r3, [r7, #7]
 8002520:	4613      	mov	r3, r2
 8002522:	71bb      	strb	r3, [r7, #6]
  if (motor1) {
 8002524:	79fb      	ldrb	r3, [r7, #7]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d004      	beq.n	8002534 <stop_motor+0x20>
	set_motor(1, 0, 0);
 800252a:	2200      	movs	r2, #0
 800252c:	2100      	movs	r1, #0
 800252e:	2001      	movs	r0, #1
 8002530:	f7ff fd68 	bl	8002004 <set_motor>
  }
  if (motor2) {
 8002534:	79bb      	ldrb	r3, [r7, #6]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d004      	beq.n	8002544 <stop_motor+0x30>
	set_motor(2, 0, 0);
 800253a:	2200      	movs	r2, #0
 800253c:	2100      	movs	r1, #0
 800253e:	2002      	movs	r0, #2
 8002540:	f7ff fd60 	bl	8002004 <set_motor>
  }
}
 8002544:	bf00      	nop
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <active_idle>:
void active_idle() {
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
   |                    |
   | Press START to     |
   | return home        |
   ----------------------
   **************************/
  stop_motor(1, 1);
 8002550:	2101      	movs	r1, #1
 8002552:	2001      	movs	r0, #1
 8002554:	f7ff ffde 	bl	8002514 <stop_motor>
  LCD_Print_String_At(&LCD, 2, 1, "                    ");
 8002558:	4b18      	ldr	r3, [pc, #96]	; (80025bc <active_idle+0x70>)
 800255a:	2201      	movs	r2, #1
 800255c:	2102      	movs	r1, #2
 800255e:	4818      	ldr	r0, [pc, #96]	; (80025c0 <active_idle+0x74>)
 8002560:	f7fe ff81 	bl	8001466 <LCD_Print_String_At>
  LCD_Print_String_At(&LCD, 3, 1, "                    ");
 8002564:	4b15      	ldr	r3, [pc, #84]	; (80025bc <active_idle+0x70>)
 8002566:	2201      	movs	r2, #1
 8002568:	2103      	movs	r1, #3
 800256a:	4815      	ldr	r0, [pc, #84]	; (80025c0 <active_idle+0x74>)
 800256c:	f7fe ff7b 	bl	8001466 <LCD_Print_String_At>
  LCD_Print_String_At(&LCD, 4, 1, "                    ");
 8002570:	4b12      	ldr	r3, [pc, #72]	; (80025bc <active_idle+0x70>)
 8002572:	2201      	movs	r2, #1
 8002574:	2104      	movs	r1, #4
 8002576:	4812      	ldr	r0, [pc, #72]	; (80025c0 <active_idle+0x74>)
 8002578:	f7fe ff75 	bl	8001466 <LCD_Print_String_At>
  LCD_Print_String_At(&LCD, 3, 1, " Press START to     ");
 800257c:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <active_idle+0x78>)
 800257e:	2201      	movs	r2, #1
 8002580:	2103      	movs	r1, #3
 8002582:	480f      	ldr	r0, [pc, #60]	; (80025c0 <active_idle+0x74>)
 8002584:	f7fe ff6f 	bl	8001466 <LCD_Print_String_At>
  LCD_Print_String_At(&LCD, 4, 1, " return home        ");
 8002588:	4b0f      	ldr	r3, [pc, #60]	; (80025c8 <active_idle+0x7c>)
 800258a:	2201      	movs	r2, #1
 800258c:	2104      	movs	r1, #4
 800258e:	480c      	ldr	r0, [pc, #48]	; (80025c0 <active_idle+0x74>)
 8002590:	f7fe ff69 	bl	8001466 <LCD_Print_String_At>

  if (RUN_MODE == true) {
 8002594:	4b0d      	ldr	r3, [pc, #52]	; (80025cc <active_idle+0x80>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d002      	beq.n	80025a2 <active_idle+0x56>
	RUN_MODE = false;
 800259c:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <active_idle+0x80>)
 800259e:	2200      	movs	r2, #0
 80025a0:	701a      	strb	r2, [r3, #0]
  }
  IDLE_MODE = true;
 80025a2:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <active_idle+0x84>)
 80025a4:	2201      	movs	r2, #1
 80025a6:	701a      	strb	r2, [r3, #0]
  lightLED(1, 0);
 80025a8:	2100      	movs	r1, #0
 80025aa:	2001      	movs	r0, #1
 80025ac:	f7ff fe10 	bl	80021d0 <lightLED>
  FLAG_returnHome = false;
 80025b0:	4b08      	ldr	r3, [pc, #32]	; (80025d4 <active_idle+0x88>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	701a      	strb	r2, [r3, #0]
}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	080086b8 	.word	0x080086b8
 80025c0:	200003ec 	.word	0x200003ec
 80025c4:	080086d0 	.word	0x080086d0
 80025c8:	080086e8 	.word	0x080086e8
 80025cc:	200003f8 	.word	0x200003f8
 80025d0:	200003f9 	.word	0x200003f9
 80025d4:	200003fb 	.word	0x200003fb

080025d8 <active_run>:
void active_run() {
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  if (IDLE_MODE == true) {
 80025dc:	4b47      	ldr	r3, [pc, #284]	; (80026fc <active_run+0x124>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d002      	beq.n	80025ea <active_run+0x12>
	IDLE_MODE = false;
 80025e4:	4b45      	ldr	r3, [pc, #276]	; (80026fc <active_run+0x124>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	701a      	strb	r2, [r3, #0]
  }
  stop_motor(1, 1);
 80025ea:	2101      	movs	r1, #1
 80025ec:	2001      	movs	r0, #1
 80025ee:	f7ff ff91 	bl	8002514 <stop_motor>
  LCD_Print_String_At(&LCD, 4, 1, "                    ");
 80025f2:	4b43      	ldr	r3, [pc, #268]	; (8002700 <active_run+0x128>)
 80025f4:	2201      	movs	r2, #1
 80025f6:	2104      	movs	r1, #4
 80025f8:	4842      	ldr	r0, [pc, #264]	; (8002704 <active_run+0x12c>)
 80025fa:	f7fe ff34 	bl	8001466 <LCD_Print_String_At>

  if (!IDLE_MODE) {
 80025fe:	4b3f      	ldr	r3, [pc, #252]	; (80026fc <active_run+0x124>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	f083 0301 	eor.w	r3, r3, #1
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	d061      	beq.n	80026d0 <active_run+0xf8>
	switch (level) {
 800260c:	4b3e      	ldr	r3, [pc, #248]	; (8002708 <active_run+0x130>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2b02      	cmp	r3, #2
 8002612:	d044      	beq.n	800269e <active_run+0xc6>
 8002614:	2b02      	cmp	r3, #2
 8002616:	dc5d      	bgt.n	80026d4 <active_run+0xfc>
 8002618:	2b00      	cmp	r3, #0
 800261a:	d002      	beq.n	8002622 <active_run+0x4a>
 800261c:	2b01      	cmp	r3, #1
 800261e:	d025      	beq.n	800266c <active_run+0x94>
		LCD_Print_String_At(&LCD, 3, 1, "                    ");
		LCD_Print_String_At(&LCD, 3, 1, "Target revs: 84");
		break;

	  default:
		break;
 8002620:	e058      	b.n	80026d4 <active_run+0xfc>
		LCD_Print_String_At(&LCD, 2, 1, "                    ");
 8002622:	4b37      	ldr	r3, [pc, #220]	; (8002700 <active_run+0x128>)
 8002624:	2201      	movs	r2, #1
 8002626:	2102      	movs	r1, #2
 8002628:	4836      	ldr	r0, [pc, #216]	; (8002704 <active_run+0x12c>)
 800262a:	f7fe ff1c 	bl	8001466 <LCD_Print_String_At>
		LCD_Print_String_At(&LCD, 2, 1, "Mode: Manual");
 800262e:	4b37      	ldr	r3, [pc, #220]	; (800270c <active_run+0x134>)
 8002630:	2201      	movs	r2, #1
 8002632:	2102      	movs	r1, #2
 8002634:	4833      	ldr	r0, [pc, #204]	; (8002704 <active_run+0x12c>)
 8002636:	f7fe ff16 	bl	8001466 <LCD_Print_String_At>
		LCD_Print_String_At(&LCD, 3, 1, "                    ");
 800263a:	4b31      	ldr	r3, [pc, #196]	; (8002700 <active_run+0x128>)
 800263c:	2201      	movs	r2, #1
 800263e:	2103      	movs	r1, #3
 8002640:	4830      	ldr	r0, [pc, #192]	; (8002704 <active_run+0x12c>)
 8002642:	f7fe ff10 	bl	8001466 <LCD_Print_String_At>
		LCD_Print_String_At(&LCD, 3, 1, "Start: Forward ");
 8002646:	4b32      	ldr	r3, [pc, #200]	; (8002710 <active_run+0x138>)
 8002648:	2201      	movs	r2, #1
 800264a:	2103      	movs	r1, #3
 800264c:	482d      	ldr	r0, [pc, #180]	; (8002704 <active_run+0x12c>)
 800264e:	f7fe ff0a 	bl	8001466 <LCD_Print_String_At>
		LCD_Print_String_At(&LCD, 4, 1, "                    ");
 8002652:	4b2b      	ldr	r3, [pc, #172]	; (8002700 <active_run+0x128>)
 8002654:	2201      	movs	r2, #1
 8002656:	2104      	movs	r1, #4
 8002658:	482a      	ldr	r0, [pc, #168]	; (8002704 <active_run+0x12c>)
 800265a:	f7fe ff04 	bl	8001466 <LCD_Print_String_At>
		LCD_Print_String_At(&LCD, 4, 1, "Stop: Backward ");
 800265e:	4b2d      	ldr	r3, [pc, #180]	; (8002714 <active_run+0x13c>)
 8002660:	2201      	movs	r2, #1
 8002662:	2104      	movs	r1, #4
 8002664:	4827      	ldr	r0, [pc, #156]	; (8002704 <active_run+0x12c>)
 8002666:	f7fe fefe 	bl	8001466 <LCD_Print_String_At>
		break;
 800266a:	e034      	b.n	80026d6 <active_run+0xfe>
		LCD_Print_String_At(&LCD, 2, 1, "                    ");
 800266c:	4b24      	ldr	r3, [pc, #144]	; (8002700 <active_run+0x128>)
 800266e:	2201      	movs	r2, #1
 8002670:	2102      	movs	r1, #2
 8002672:	4824      	ldr	r0, [pc, #144]	; (8002704 <active_run+0x12c>)
 8002674:	f7fe fef7 	bl	8001466 <LCD_Print_String_At>
		LCD_Print_String_At(&LCD, 2, 1, "Mode: 2m");
 8002678:	4b27      	ldr	r3, [pc, #156]	; (8002718 <active_run+0x140>)
 800267a:	2201      	movs	r2, #1
 800267c:	2102      	movs	r1, #2
 800267e:	4821      	ldr	r0, [pc, #132]	; (8002704 <active_run+0x12c>)
 8002680:	f7fe fef1 	bl	8001466 <LCD_Print_String_At>
		LCD_Print_String_At(&LCD, 3, 1, "                    ");
 8002684:	4b1e      	ldr	r3, [pc, #120]	; (8002700 <active_run+0x128>)
 8002686:	2201      	movs	r2, #1
 8002688:	2103      	movs	r1, #3
 800268a:	481e      	ldr	r0, [pc, #120]	; (8002704 <active_run+0x12c>)
 800268c:	f7fe feeb 	bl	8001466 <LCD_Print_String_At>
		LCD_Print_String_At(&LCD, 3, 1, "Target revs: 42");
 8002690:	4b22      	ldr	r3, [pc, #136]	; (800271c <active_run+0x144>)
 8002692:	2201      	movs	r2, #1
 8002694:	2103      	movs	r1, #3
 8002696:	481b      	ldr	r0, [pc, #108]	; (8002704 <active_run+0x12c>)
 8002698:	f7fe fee5 	bl	8001466 <LCD_Print_String_At>
		break;
 800269c:	e01b      	b.n	80026d6 <active_run+0xfe>
		LCD_Print_String_At(&LCD, 2, 1, "                    ");
 800269e:	4b18      	ldr	r3, [pc, #96]	; (8002700 <active_run+0x128>)
 80026a0:	2201      	movs	r2, #1
 80026a2:	2102      	movs	r1, #2
 80026a4:	4817      	ldr	r0, [pc, #92]	; (8002704 <active_run+0x12c>)
 80026a6:	f7fe fede 	bl	8001466 <LCD_Print_String_At>
		LCD_Print_String_At(&LCD, 2, 1, "Mode: 4m");
 80026aa:	4b1d      	ldr	r3, [pc, #116]	; (8002720 <active_run+0x148>)
 80026ac:	2201      	movs	r2, #1
 80026ae:	2102      	movs	r1, #2
 80026b0:	4814      	ldr	r0, [pc, #80]	; (8002704 <active_run+0x12c>)
 80026b2:	f7fe fed8 	bl	8001466 <LCD_Print_String_At>
		LCD_Print_String_At(&LCD, 3, 1, "                    ");
 80026b6:	4b12      	ldr	r3, [pc, #72]	; (8002700 <active_run+0x128>)
 80026b8:	2201      	movs	r2, #1
 80026ba:	2103      	movs	r1, #3
 80026bc:	4811      	ldr	r0, [pc, #68]	; (8002704 <active_run+0x12c>)
 80026be:	f7fe fed2 	bl	8001466 <LCD_Print_String_At>
		LCD_Print_String_At(&LCD, 3, 1, "Target revs: 84");
 80026c2:	4b18      	ldr	r3, [pc, #96]	; (8002724 <active_run+0x14c>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	2103      	movs	r1, #3
 80026c8:	480e      	ldr	r0, [pc, #56]	; (8002704 <active_run+0x12c>)
 80026ca:	f7fe fecc 	bl	8001466 <LCD_Print_String_At>
		break;
 80026ce:	e002      	b.n	80026d6 <active_run+0xfe>
	}
  }
 80026d0:	bf00      	nop
 80026d2:	e000      	b.n	80026d6 <active_run+0xfe>
		break;
 80026d4:	bf00      	nop

  RUN_MODE = true;
 80026d6:	4b14      	ldr	r3, [pc, #80]	; (8002728 <active_run+0x150>)
 80026d8:	2201      	movs	r2, #1
 80026da:	701a      	strb	r2, [r3, #0]
  lightLED(0, 1);
 80026dc:	2101      	movs	r1, #1
 80026de:	2000      	movs	r0, #0
 80026e0:	f7ff fd76 	bl	80021d0 <lightLED>
  FLAG_runMotor = false;
 80026e4:	4b11      	ldr	r3, [pc, #68]	; (800272c <active_run+0x154>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	701a      	strb	r2, [r3, #0]

  FLAG_completeRun = false;
 80026ea:	4b11      	ldr	r3, [pc, #68]	; (8002730 <active_run+0x158>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]
  preLevel = level;
 80026f0:	4b05      	ldr	r3, [pc, #20]	; (8002708 <active_run+0x130>)
 80026f2:	781a      	ldrb	r2, [r3, #0]
 80026f4:	4b0f      	ldr	r3, [pc, #60]	; (8002734 <active_run+0x15c>)
 80026f6:	701a      	strb	r2, [r3, #0]
}
 80026f8:	bf00      	nop
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	200003f9 	.word	0x200003f9
 8002700:	080086b8 	.word	0x080086b8
 8002704:	200003ec 	.word	0x200003ec
 8002708:	200003fa 	.word	0x200003fa
 800270c:	08008700 	.word	0x08008700
 8002710:	08008710 	.word	0x08008710
 8002714:	08008720 	.word	0x08008720
 8002718:	08008730 	.word	0x08008730
 800271c:	0800873c 	.word	0x0800873c
 8002720:	0800874c 	.word	0x0800874c
 8002724:	08008758 	.word	0x08008758
 8002728:	200003f8 	.word	0x200003f8
 800272c:	20000438 	.word	0x20000438
 8002730:	20000462 	.word	0x20000462
 8002734:	20000010 	.word	0x20000010

08002738 <check_button>:
u32 prePrint = 0;
float preVal = 0;
void check_button() {
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
  BTN_Start_state = buttonRead(&BTN_Start);
 800273e:	4838      	ldr	r0, [pc, #224]	; (8002820 <check_button+0xe8>)
 8002740:	f7fe fca2 	bl	8001088 <buttonRead>
 8002744:	4603      	mov	r3, r0
 8002746:	461a      	mov	r2, r3
 8002748:	4b36      	ldr	r3, [pc, #216]	; (8002824 <check_button+0xec>)
 800274a:	701a      	strb	r2, [r3, #0]
  BTN_Stop_state = buttonRead(&BTN_Stop);
 800274c:	4836      	ldr	r0, [pc, #216]	; (8002828 <check_button+0xf0>)
 800274e:	f7fe fc9b 	bl	8001088 <buttonRead>
 8002752:	4603      	mov	r3, r0
 8002754:	461a      	mov	r2, r3
 8002756:	4b35      	ldr	r3, [pc, #212]	; (800282c <check_button+0xf4>)
 8002758:	701a      	strb	r2, [r3, #0]

  SW_Lvl1_state = buttonRead(&SW_Lvl1);
 800275a:	4835      	ldr	r0, [pc, #212]	; (8002830 <check_button+0xf8>)
 800275c:	f7fe fc94 	bl	8001088 <buttonRead>
 8002760:	4603      	mov	r3, r0
 8002762:	461a      	mov	r2, r3
 8002764:	4b33      	ldr	r3, [pc, #204]	; (8002834 <check_button+0xfc>)
 8002766:	701a      	strb	r2, [r3, #0]
  SW_Lvl2_state = buttonRead(&SW_Lvl2);
 8002768:	4833      	ldr	r0, [pc, #204]	; (8002838 <check_button+0x100>)
 800276a:	f7fe fc8d 	bl	8001088 <buttonRead>
 800276e:	4603      	mov	r3, r0
 8002770:	461a      	mov	r2, r3
 8002772:	4b32      	ldr	r3, [pc, #200]	; (800283c <check_button+0x104>)
 8002774:	701a      	strb	r2, [r3, #0]

  if (SW_Lvl1_state == BTN_SET && SW_Lvl2_state == BTN_SET) {
 8002776:	4b2f      	ldr	r3, [pc, #188]	; (8002834 <check_button+0xfc>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d107      	bne.n	800278e <check_button+0x56>
 800277e:	4b2f      	ldr	r3, [pc, #188]	; (800283c <check_button+0x104>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d103      	bne.n	800278e <check_button+0x56>
	level = 1;
 8002786:	4b2e      	ldr	r3, [pc, #184]	; (8002840 <check_button+0x108>)
 8002788:	2201      	movs	r2, #1
 800278a:	701a      	strb	r2, [r3, #0]
 800278c:	e00e      	b.n	80027ac <check_button+0x74>
  } else if (SW_Lvl1_state == BTN_RESET) {
 800278e:	4b29      	ldr	r3, [pc, #164]	; (8002834 <check_button+0xfc>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d103      	bne.n	800279e <check_button+0x66>
	level = 0;
 8002796:	4b2a      	ldr	r3, [pc, #168]	; (8002840 <check_button+0x108>)
 8002798:	2200      	movs	r2, #0
 800279a:	701a      	strb	r2, [r3, #0]
 800279c:	e006      	b.n	80027ac <check_button+0x74>
  } else if (SW_Lvl2_state == BTN_RESET) {
 800279e:	4b27      	ldr	r3, [pc, #156]	; (800283c <check_button+0x104>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d102      	bne.n	80027ac <check_button+0x74>
	level = 2;
 80027a6:	4b26      	ldr	r3, [pc, #152]	; (8002840 <check_button+0x108>)
 80027a8:	2202      	movs	r2, #2
 80027aa:	701a      	strb	r2, [r3, #0]
  }
  if (RUN_MODE) {
 80027ac:	4b25      	ldr	r3, [pc, #148]	; (8002844 <check_button+0x10c>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d030      	beq.n	8002816 <check_button+0xde>
	if (FLAG_runMotor) {
 80027b4:	4b24      	ldr	r3, [pc, #144]	; (8002848 <check_button+0x110>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d02c      	beq.n	8002816 <check_button+0xde>
	  LCD_Print_String_At(&LCD, 4, 1, "Total revs: ");
 80027bc:	4b23      	ldr	r3, [pc, #140]	; (800284c <check_button+0x114>)
 80027be:	2201      	movs	r2, #1
 80027c0:	2104      	movs	r1, #4
 80027c2:	4823      	ldr	r0, [pc, #140]	; (8002850 <check_button+0x118>)
 80027c4:	f7fe fe4f 	bl	8001466 <LCD_Print_String_At>
	  u32 now = HAL_GetTick();
 80027c8:	f000 fdd8 	bl	800337c <HAL_GetTick>
 80027cc:	60f8      	str	r0, [r7, #12]

	  if (now - prePrint > 150) {
 80027ce:	4b21      	ldr	r3, [pc, #132]	; (8002854 <check_button+0x11c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b96      	cmp	r3, #150	; 0x96
 80027d8:	d91d      	bls.n	8002816 <check_button+0xde>
		preVal = M1_travel;
 80027da:	4b1f      	ldr	r3, [pc, #124]	; (8002858 <check_button+0x120>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a1f      	ldr	r2, [pc, #124]	; (800285c <check_button+0x124>)
 80027e0:	6013      	str	r3, [r2, #0]
		prePrint = now;
 80027e2:	4a1c      	ldr	r2, [pc, #112]	; (8002854 <check_button+0x11c>)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6013      	str	r3, [r2, #0]
		LCD_Print_String_At(&LCD, 4, 13, "     ");
 80027e8:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <check_button+0x128>)
 80027ea:	220d      	movs	r2, #13
 80027ec:	2104      	movs	r1, #4
 80027ee:	4818      	ldr	r0, [pc, #96]	; (8002850 <check_button+0x118>)
 80027f0:	f7fe fe39 	bl	8001466 <LCD_Print_String_At>
		char holder[5];
		sprintf(holder, "%3.2f", M1_travel);
 80027f4:	4b18      	ldr	r3, [pc, #96]	; (8002858 <check_button+0x120>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7fd fec9 	bl	8000590 <__aeabi_f2d>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	1d38      	adds	r0, r7, #4
 8002804:	4917      	ldr	r1, [pc, #92]	; (8002864 <check_button+0x12c>)
 8002806:	f003 fcc9 	bl	800619c <siprintf>
		LCD_Print_String_At(&LCD, 4, 13, holder);
 800280a:	1d3b      	adds	r3, r7, #4
 800280c:	220d      	movs	r2, #13
 800280e:	2104      	movs	r1, #4
 8002810:	480f      	ldr	r0, [pc, #60]	; (8002850 <check_button+0x118>)
 8002812:	f7fe fe28 	bl	8001466 <LCD_Print_String_At>
	  }
	}
  }
}
 8002816:	bf00      	nop
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20000380 	.word	0x20000380
 8002824:	20000004 	.word	0x20000004
 8002828:	20000394 	.word	0x20000394
 800282c:	20000005 	.word	0x20000005
 8002830:	200003bc 	.word	0x200003bc
 8002834:	20000006 	.word	0x20000006
 8002838:	200003d0 	.word	0x200003d0
 800283c:	20000007 	.word	0x20000007
 8002840:	200003fa 	.word	0x200003fa
 8002844:	200003f8 	.word	0x200003f8
 8002848:	20000438 	.word	0x20000438
 800284c:	08008768 	.word	0x08008768
 8002850:	200003ec 	.word	0x200003ec
 8002854:	20000474 	.word	0x20000474
 8002858:	20000428 	.word	0x20000428
 800285c:	20000478 	.word	0x20000478
 8002860:	08008778 	.word	0x08008778
 8002864:	08008780 	.word	0x08008780

08002868 <flash_LED>:

void flash_LED(u8 id, u16 interval) {
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	460a      	mov	r2, r1
 8002872:	71fb      	strb	r3, [r7, #7]
 8002874:	4613      	mov	r3, r2
 8002876:	80bb      	strh	r3, [r7, #4]
  static u32 last_Y = 0, last_G = 0;
  u32 now = HAL_GetTick();
 8002878:	f000 fd80 	bl	800337c <HAL_GetTick>
 800287c:	60f8      	str	r0, [r7, #12]
  switch (id) {
 800287e:	79fb      	ldrb	r3, [r7, #7]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d002      	beq.n	800288a <flash_LED+0x22>
 8002884:	2b01      	cmp	r3, #1
 8002886:	d010      	beq.n	80028aa <flash_LED+0x42>
		HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
		last_G = now;
	  }
	  break;
  }
}
 8002888:	e022      	b.n	80028d0 <flash_LED+0x68>
	  if ((now - last_Y) > interval) {
 800288a:	4b13      	ldr	r3, [pc, #76]	; (80028d8 <flash_LED+0x70>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	1ad2      	subs	r2, r2, r3
 8002892:	88bb      	ldrh	r3, [r7, #4]
 8002894:	429a      	cmp	r2, r3
 8002896:	d918      	bls.n	80028ca <flash_LED+0x62>
		HAL_GPIO_TogglePin(LED_Y_GPIO_Port, LED_Y_Pin);
 8002898:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800289c:	480f      	ldr	r0, [pc, #60]	; (80028dc <flash_LED+0x74>)
 800289e:	f001 f88e 	bl	80039be <HAL_GPIO_TogglePin>
		last_Y = now;
 80028a2:	4a0d      	ldr	r2, [pc, #52]	; (80028d8 <flash_LED+0x70>)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6013      	str	r3, [r2, #0]
	  break;
 80028a8:	e00f      	b.n	80028ca <flash_LED+0x62>
	  if ((now - last_G) > interval) {
 80028aa:	4b0d      	ldr	r3, [pc, #52]	; (80028e0 <flash_LED+0x78>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	1ad2      	subs	r2, r2, r3
 80028b2:	88bb      	ldrh	r3, [r7, #4]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d90a      	bls.n	80028ce <flash_LED+0x66>
		HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 80028b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028bc:	4809      	ldr	r0, [pc, #36]	; (80028e4 <flash_LED+0x7c>)
 80028be:	f001 f87e 	bl	80039be <HAL_GPIO_TogglePin>
		last_G = now;
 80028c2:	4a07      	ldr	r2, [pc, #28]	; (80028e0 <flash_LED+0x78>)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6013      	str	r3, [r2, #0]
	  break;
 80028c8:	e001      	b.n	80028ce <flash_LED+0x66>
	  break;
 80028ca:	bf00      	nop
 80028cc:	e000      	b.n	80028d0 <flash_LED+0x68>
	  break;
 80028ce:	bf00      	nop
}
 80028d0:	bf00      	nop
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	20000488 	.word	0x20000488
 80028dc:	40010800 	.word	0x40010800
 80028e0:	2000048c 	.word	0x2000048c
 80028e4:	40010c00 	.word	0x40010c00

080028e8 <return_home>:
bool FLAG_returnFineRev = false;
void return_home() {
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
  if (FLAG_returnFast) {
 80028ee:	4b39      	ldr	r3, [pc, #228]	; (80029d4 <return_home+0xec>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d021      	beq.n	800293a <return_home+0x52>
	if (BEGIN_REACH) {
 80028f6:	4b38      	ldr	r3, [pc, #224]	; (80029d8 <return_home+0xf0>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d010      	beq.n	8002920 <return_home+0x38>
	  FLAG_returnFast = false;
 80028fe:	4b35      	ldr	r3, [pc, #212]	; (80029d4 <return_home+0xec>)
 8002900:	2200      	movs	r2, #0
 8002902:	701a      	strb	r2, [r3, #0]
	  FLAG_returnFine = true;
 8002904:	4b35      	ldr	r3, [pc, #212]	; (80029dc <return_home+0xf4>)
 8002906:	2201      	movs	r2, #1
 8002908:	701a      	strb	r2, [r3, #0]
	  TS_returnFine = HAL_GetTick();
 800290a:	f000 fd37 	bl	800337c <HAL_GetTick>
 800290e:	4603      	mov	r3, r0
 8002910:	4a33      	ldr	r2, [pc, #204]	; (80029e0 <return_home+0xf8>)
 8002912:	6013      	str	r3, [r2, #0]
	  set_motor(2, 0, 0);
 8002914:	2200      	movs	r2, #0
 8002916:	2100      	movs	r1, #0
 8002918:	2002      	movs	r0, #2
 800291a:	f7ff fb73 	bl	8002004 <set_motor>
	  return;
 800291e:	e056      	b.n	80029ce <return_home+0xe6>
	}
	set_motor(2, -1, 1000);
 8002920:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002924:	f04f 31ff 	mov.w	r1, #4294967295
 8002928:	2002      	movs	r0, #2
 800292a:	f7ff fb6b 	bl	8002004 <set_motor>
	FLAG_returnFine = false;
 800292e:	4b2b      	ldr	r3, [pc, #172]	; (80029dc <return_home+0xf4>)
 8002930:	2200      	movs	r2, #0
 8002932:	701a      	strb	r2, [r3, #0]
	FLAG_returnFineRev = false;
 8002934:	4b2b      	ldr	r3, [pc, #172]	; (80029e4 <return_home+0xfc>)
 8002936:	2200      	movs	r2, #0
 8002938:	701a      	strb	r2, [r3, #0]
  }
  if (FLAG_returnFine) {
 800293a:	4b28      	ldr	r3, [pc, #160]	; (80029dc <return_home+0xf4>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d01c      	beq.n	800297c <return_home+0x94>
	u32 deltaTime = HAL_GetTick() - TS_returnFine;
 8002942:	f000 fd1b 	bl	800337c <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	4b25      	ldr	r3, [pc, #148]	; (80029e0 <return_home+0xf8>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	607b      	str	r3, [r7, #4]

	if (deltaTime > 2000) {
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002956:	d90b      	bls.n	8002970 <return_home+0x88>
	  FLAG_returnFineRev = true;
 8002958:	4b22      	ldr	r3, [pc, #136]	; (80029e4 <return_home+0xfc>)
 800295a:	2201      	movs	r2, #1
 800295c:	701a      	strb	r2, [r3, #0]
	  FLAG_returnFine = false;
 800295e:	4b1f      	ldr	r3, [pc, #124]	; (80029dc <return_home+0xf4>)
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]
	  set_motor(2, 0, 0);
 8002964:	2200      	movs	r2, #0
 8002966:	2100      	movs	r1, #0
 8002968:	2002      	movs	r0, #2
 800296a:	f7ff fb4b 	bl	8002004 <set_motor>
	  return;
 800296e:	e02e      	b.n	80029ce <return_home+0xe6>
	}
	set_motor(2, 1, 1000);
 8002970:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002974:	2101      	movs	r1, #1
 8002976:	2002      	movs	r0, #2
 8002978:	f7ff fb44 	bl	8002004 <set_motor>
  }
  if (FLAG_returnFineRev) {
 800297c:	4b19      	ldr	r3, [pc, #100]	; (80029e4 <return_home+0xfc>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d024      	beq.n	80029ce <return_home+0xe6>
	if (BEGIN_REACH) {
 8002984:	4b14      	ldr	r3, [pc, #80]	; (80029d8 <return_home+0xf0>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d019      	beq.n	80029c0 <return_home+0xd8>
	  set_motor(2, 0, 0);
 800298c:	2200      	movs	r2, #0
 800298e:	2100      	movs	r1, #0
 8002990:	2002      	movs	r0, #2
 8002992:	f7ff fb37 	bl	8002004 <set_motor>
	  FLAG_returnHome = false;
 8002996:	4b14      	ldr	r3, [pc, #80]	; (80029e8 <return_home+0x100>)
 8002998:	2200      	movs	r2, #0
 800299a:	701a      	strb	r2, [r3, #0]
	  FLAG_startPointSet = false;
 800299c:	4b13      	ldr	r3, [pc, #76]	; (80029ec <return_home+0x104>)
 800299e:	2200      	movs	r2, #0
 80029a0:	701a      	strb	r2, [r3, #0]
	  HAL_NVIC_DisableIRQ(TIM4_IRQn);
 80029a2:	201e      	movs	r0, #30
 80029a4:	f000 fe3d 	bl	8003622 <HAL_NVIC_DisableIRQ>
	  M2_x = 0;
 80029a8:	4b11      	ldr	r3, [pc, #68]	; (80029f0 <return_home+0x108>)
 80029aa:	f04f 0200 	mov.w	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
	  M2_travel = 0;
 80029b0:	4b10      	ldr	r3, [pc, #64]	; (80029f4 <return_home+0x10c>)
 80029b2:	f04f 0200 	mov.w	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
	  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80029b8:	201e      	movs	r0, #30
 80029ba:	f000 fe24 	bl	8003606 <HAL_NVIC_EnableIRQ>
	  return;
 80029be:	e006      	b.n	80029ce <return_home+0xe6>
	}
	set_motor(2, -1, 800);
 80029c0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80029c4:	f04f 31ff 	mov.w	r1, #4294967295
 80029c8:	2002      	movs	r0, #2
 80029ca:	f7ff fb1b 	bl	8002004 <set_motor>
  }
}
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	2000042c 	.word	0x2000042c
 80029d8:	2000037d 	.word	0x2000037d
 80029dc:	2000042d 	.word	0x2000042d
 80029e0:	20000430 	.word	0x20000430
 80029e4:	2000047c 	.word	0x2000047c
 80029e8:	200003fb 	.word	0x200003fb
 80029ec:	20000463 	.word	0x20000463
 80029f0:	20000420 	.word	0x20000420
 80029f4:	20000424 	.word	0x20000424

080029f8 <HAL_TIM_PeriodElapsedCallback>:

s32 delta_E1 = 0, delta_E2 = 0;
u8 deltaT = 20; //ms
float M1_pwm = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80029f8:	b5b0      	push	{r4, r5, r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4) {
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a25      	ldr	r2, [pc, #148]	; (8002a9c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	f040 8236 	bne.w	8002e78 <HAL_TIM_PeriodElapsedCallback+0x480>
	tick_count = tick_count + 1;
 8002a0c:	4b24      	ldr	r3, [pc, #144]	; (8002aa0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	3301      	adds	r3, #1
 8002a12:	4a23      	ldr	r2, [pc, #140]	; (8002aa0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002a14:	6013      	str	r3, [r2, #0]
	if (tick_count >= deltaT) {
 8002a16:	4b23      	ldr	r3, [pc, #140]	; (8002aa4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	4b20      	ldr	r3, [pc, #128]	; (8002aa0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	f200 8229 	bhi.w	8002e78 <HAL_TIM_PeriodElapsedCallback+0x480>
	  //50 ms
	  tick_count = 0;
 8002a26:	4b1e      	ldr	r3, [pc, #120]	; (8002aa0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
	  {
		now_E1 = TIM1->CNT;
 8002a2c:	4b1e      	ldr	r3, [pc, #120]	; (8002aa8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	461a      	mov	r2, r3
 8002a32:	4b1e      	ldr	r3, [pc, #120]	; (8002aac <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002a34:	601a      	str	r2, [r3, #0]
		now_E2 = TIM2->CNT;
 8002a36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	4b1c      	ldr	r3, [pc, #112]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002a40:	601a      	str	r2, [r3, #0]

		s32 delta_E1 = now_E1 - pre_E1;
 8002a42:	4b1a      	ldr	r3, [pc, #104]	; (8002aac <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	461a      	mov	r2, r3
 8002a48:	4b1a      	ldr	r3, [pc, #104]	; (8002ab4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	617b      	str	r3, [r7, #20]
		s32 delta_E2 = now_E2 - pre_E2;
 8002a50:	4b17      	ldr	r3, [pc, #92]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	461a      	mov	r2, r3
 8002a56:	4b18      	ldr	r3, [pc, #96]	; (8002ab8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	613b      	str	r3, [r7, #16]

		if (delta_E1 < -3000) // now = 5, pre = 65530
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	4a16      	ldr	r2, [pc, #88]	; (8002abc <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	da05      	bge.n	8002a72 <HAL_TIM_PeriodElapsedCallback+0x7a>
		  delta_E1 = delta_E1 + 0xFFFF;
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002a6c:	33ff      	adds	r3, #255	; 0xff
 8002a6e:	617b      	str	r3, [r7, #20]
 8002a70:	e009      	b.n	8002a86 <HAL_TIM_PeriodElapsedCallback+0x8e>
		else if (delta_E1 > 3000) // now = 65535, pre = 5
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	dd04      	ble.n	8002a86 <HAL_TIM_PeriodElapsedCallback+0x8e>
		  delta_E1 = delta_E1 - 0xFFFF;
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8002a82:	3bff      	subs	r3, #255	; 0xff
 8002a84:	617b      	str	r3, [r7, #20]

		if (delta_E2 < -3000) // now = 5, pre = 65530
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	4a0c      	ldr	r2, [pc, #48]	; (8002abc <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	da18      	bge.n	8002ac0 <HAL_TIM_PeriodElapsedCallback+0xc8>
		  delta_E2 = delta_E2 + 0xFFFF;
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002a94:	33ff      	adds	r3, #255	; 0xff
 8002a96:	613b      	str	r3, [r7, #16]
 8002a98:	e01c      	b.n	8002ad4 <HAL_TIM_PeriodElapsedCallback+0xdc>
 8002a9a:	bf00      	nop
 8002a9c:	40000800 	.word	0x40000800
 8002aa0:	20000404 	.word	0x20000404
 8002aa4:	20000011 	.word	0x20000011
 8002aa8:	40012c00 	.word	0x40012c00
 8002aac:	20000410 	.word	0x20000410
 8002ab0:	20000414 	.word	0x20000414
 8002ab4:	20000418 	.word	0x20000418
 8002ab8:	2000041c 	.word	0x2000041c
 8002abc:	fffff448 	.word	0xfffff448
		else if (delta_E2 > 3000) // now = 65535, pre = 5
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	dd04      	ble.n	8002ad4 <HAL_TIM_PeriodElapsedCallback+0xdc>
		  delta_E2 = delta_E2 - 0xFFFF;
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8002ad0:	3bff      	subs	r3, #255	; 0xff
 8002ad2:	613b      	str	r3, [r7, #16]

		// (ticks/s*60)/(ticks/mRev*mRev/outRev) = outRev/min
		M1_velo = (delta_E1 * (1000 / deltaT) * 60.0)
 8002ad4:	4bb4      	ldr	r3, [pc, #720]	; (8002da8 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ade:	fb93 f3f2 	sdiv	r3, r3, r2
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	fb02 f303 	mul.w	r3, r2, r3
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fd fd3f 	bl	800056c <__aeabi_i2d>
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	4bae      	ldr	r3, [pc, #696]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8002af4:	f7fd fda4 	bl	8000640 <__aeabi_dmul>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4610      	mov	r0, r2
 8002afe:	4619      	mov	r1, r3
			/ (1.0 * M1_PulsePerRev * M1_GearRatio);
 8002b00:	a3a3      	add	r3, pc, #652	; (adr r3, 8002d90 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8002b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b06:	f7fd fec5 	bl	8000894 <__aeabi_ddiv>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	4610      	mov	r0, r2
 8002b10:	4619      	mov	r1, r3
 8002b12:	f7fe f88d 	bl	8000c30 <__aeabi_d2f>
 8002b16:	4603      	mov	r3, r0
		M1_velo = (delta_E1 * (1000 / deltaT) * 60.0)
 8002b18:	4aa5      	ldr	r2, [pc, #660]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8002b1a:	6013      	str	r3, [r2, #0]
		M2_velo = (delta_E2 * (1000 / deltaT) * 60.0)
 8002b1c:	4ba2      	ldr	r3, [pc, #648]	; (8002da8 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	461a      	mov	r2, r3
 8002b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b26:	fb93 f3f2 	sdiv	r3, r3, r2
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	fb02 f303 	mul.w	r3, r2, r3
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7fd fd1b 	bl	800056c <__aeabi_i2d>
 8002b36:	f04f 0200 	mov.w	r2, #0
 8002b3a:	4b9c      	ldr	r3, [pc, #624]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8002b3c:	f7fd fd80 	bl	8000640 <__aeabi_dmul>
 8002b40:	4602      	mov	r2, r0
 8002b42:	460b      	mov	r3, r1
 8002b44:	4610      	mov	r0, r2
 8002b46:	4619      	mov	r1, r3
			/ (1.0 * M2_PulsePerRev * M2_GearRatio);
 8002b48:	f04f 0200 	mov.w	r2, #0
 8002b4c:	4b99      	ldr	r3, [pc, #612]	; (8002db4 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8002b4e:	f7fd fea1 	bl	8000894 <__aeabi_ddiv>
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	4610      	mov	r0, r2
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f7fe f869 	bl	8000c30 <__aeabi_d2f>
 8002b5e:	4603      	mov	r3, r0
		M2_velo = (delta_E2 * (1000 / deltaT) * 60.0)
 8002b60:	4a95      	ldr	r2, [pc, #596]	; (8002db8 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8002b62:	6013      	str	r3, [r2, #0]

		// pulse/(pulse/rev*rev/Outrev) = OutRev *pitch = mm
		M2_x = M2_x
			+ delta_E2 * M2_visme_pitch * 1.0
 8002b64:	4b95      	ldr	r3, [pc, #596]	; (8002dbc <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fd fd11 	bl	8000590 <__aeabi_f2d>
 8002b6e:	4604      	mov	r4, r0
 8002b70:	460d      	mov	r5, r1
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fd fcf8 	bl	800056c <__aeabi_i2d>
				/ (1.0 * M2_PulsePerRev * M2_GearRatio);
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	4b8c      	ldr	r3, [pc, #560]	; (8002db4 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8002b82:	f7fd fe87 	bl	8000894 <__aeabi_ddiv>
 8002b86:	4602      	mov	r2, r0
 8002b88:	460b      	mov	r3, r1
			+ delta_E2 * M2_visme_pitch * 1.0
 8002b8a:	4620      	mov	r0, r4
 8002b8c:	4629      	mov	r1, r5
 8002b8e:	f7fd fba1 	bl	80002d4 <__adddf3>
 8002b92:	4602      	mov	r2, r0
 8002b94:	460b      	mov	r3, r1
 8002b96:	4610      	mov	r0, r2
 8002b98:	4619      	mov	r1, r3
 8002b9a:	f7fe f849 	bl	8000c30 <__aeabi_d2f>
 8002b9e:	4603      	mov	r3, r0
		M2_x = M2_x
 8002ba0:	4a86      	ldr	r2, [pc, #536]	; (8002dbc <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8002ba2:	6013      	str	r3, [r2, #0]

		pre_E1 = now_E1;
 8002ba4:	4b86      	ldr	r3, [pc, #536]	; (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4b86      	ldr	r3, [pc, #536]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8002bac:	601a      	str	r2, [r3, #0]
		pre_E2 = now_E2;
 8002bae:	4b86      	ldr	r3, [pc, #536]	; (8002dc8 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	4b85      	ldr	r3, [pc, #532]	; (8002dcc <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 8002bb6:	601a      	str	r2, [r3, #0]

		u32 delta_E2_abs = abs(delta_E2);
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	bfb8      	it	lt
 8002bbe:	425b      	neglt	r3, r3
 8002bc0:	60fb      	str	r3, [r7, #12]
		M2_travel = M2_travel
			+ (delta_E2_abs * M2_visme_pitch * 1.0)
 8002bc2:	4b83      	ldr	r3, [pc, #524]	; (8002dd0 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7fd fce2 	bl	8000590 <__aeabi_f2d>
 8002bcc:	4604      	mov	r4, r0
 8002bce:	460d      	mov	r5, r1
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7fd fcb9 	bl	800054c <__aeabi_ui2d>
				/ (1.0 * M2_PulsePerRev * M2_GearRatio);
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	4b75      	ldr	r3, [pc, #468]	; (8002db4 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8002be0:	f7fd fe58 	bl	8000894 <__aeabi_ddiv>
 8002be4:	4602      	mov	r2, r0
 8002be6:	460b      	mov	r3, r1
			+ (delta_E2_abs * M2_visme_pitch * 1.0)
 8002be8:	4620      	mov	r0, r4
 8002bea:	4629      	mov	r1, r5
 8002bec:	f7fd fb72 	bl	80002d4 <__adddf3>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	4610      	mov	r0, r2
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	f7fe f81a 	bl	8000c30 <__aeabi_d2f>
 8002bfc:	4603      	mov	r3, r0
		M2_travel = M2_travel
 8002bfe:	4a74      	ldr	r2, [pc, #464]	; (8002dd0 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 8002c00:	6013      	str	r3, [r2, #0]
		M1_travel = M1_travel
			+ delta_E1 * 1.0 / (1.0 * M1_PulsePerRev * M1_GearRatio);
 8002c02:	4b74      	ldr	r3, [pc, #464]	; (8002dd4 <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7fd fcc2 	bl	8000590 <__aeabi_f2d>
 8002c0c:	4604      	mov	r4, r0
 8002c0e:	460d      	mov	r5, r1
 8002c10:	6978      	ldr	r0, [r7, #20]
 8002c12:	f7fd fcab 	bl	800056c <__aeabi_i2d>
 8002c16:	a35e      	add	r3, pc, #376	; (adr r3, 8002d90 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8002c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1c:	f7fd fe3a 	bl	8000894 <__aeabi_ddiv>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	4620      	mov	r0, r4
 8002c26:	4629      	mov	r1, r5
 8002c28:	f7fd fb54 	bl	80002d4 <__adddf3>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	460b      	mov	r3, r1
 8002c30:	4610      	mov	r0, r2
 8002c32:	4619      	mov	r1, r3
 8002c34:	f7fd fffc 	bl	8000c30 <__aeabi_d2f>
 8002c38:	4603      	mov	r3, r0
		M1_travel = M1_travel
 8002c3a:	4a66      	ldr	r2, [pc, #408]	; (8002dd4 <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8002c3c:	6013      	str	r3, [r2, #0]

		M1_velo_filt = -0.222 * M1_velo_filt + 0.611 * M1_velo
 8002c3e:	4b66      	ldr	r3, [pc, #408]	; (8002dd8 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fd fca4 	bl	8000590 <__aeabi_f2d>
 8002c48:	a353      	add	r3, pc, #332	; (adr r3, 8002d98 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8002c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4e:	f7fd fcf7 	bl	8000640 <__aeabi_dmul>
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	4614      	mov	r4, r2
 8002c58:	461d      	mov	r5, r3
 8002c5a:	4b55      	ldr	r3, [pc, #340]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7fd fc96 	bl	8000590 <__aeabi_f2d>
 8002c64:	a34e      	add	r3, pc, #312	; (adr r3, 8002da0 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8002c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6a:	f7fd fce9 	bl	8000640 <__aeabi_dmul>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	4620      	mov	r0, r4
 8002c74:	4629      	mov	r1, r5
 8002c76:	f7fd fb2d 	bl	80002d4 <__adddf3>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	4614      	mov	r4, r2
 8002c80:	461d      	mov	r5, r3
			+ 0.611 * M1_preVelo;
 8002c82:	4b56      	ldr	r3, [pc, #344]	; (8002ddc <HAL_TIM_PeriodElapsedCallback+0x3e4>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fd fc82 	bl	8000590 <__aeabi_f2d>
 8002c8c:	a344      	add	r3, pc, #272	; (adr r3, 8002da0 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8002c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c92:	f7fd fcd5 	bl	8000640 <__aeabi_dmul>
 8002c96:	4602      	mov	r2, r0
 8002c98:	460b      	mov	r3, r1
 8002c9a:	4620      	mov	r0, r4
 8002c9c:	4629      	mov	r1, r5
 8002c9e:	f7fd fb19 	bl	80002d4 <__adddf3>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	4610      	mov	r0, r2
 8002ca8:	4619      	mov	r1, r3
 8002caa:	f7fd ffc1 	bl	8000c30 <__aeabi_d2f>
 8002cae:	4603      	mov	r3, r0
		M1_velo_filt = -0.222 * M1_velo_filt + 0.611 * M1_velo
 8002cb0:	4a49      	ldr	r2, [pc, #292]	; (8002dd8 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8002cb2:	6013      	str	r3, [r2, #0]
		M1_preVelo = M1_velo;
 8002cb4:	4b3e      	ldr	r3, [pc, #248]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a48      	ldr	r2, [pc, #288]	; (8002ddc <HAL_TIM_PeriodElapsedCallback+0x3e4>)
 8002cba:	6013      	str	r3, [r2, #0]

		M1_velo_e = M1_vref - M1_velo_filt;
 8002cbc:	4b48      	ldr	r3, [pc, #288]	; (8002de0 <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a45      	ldr	r2, [pc, #276]	; (8002dd8 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8002cc2:	6812      	ldr	r2, [r2, #0]
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fe f806 	bl	8000cd8 <__aeabi_fsub>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	461a      	mov	r2, r3
 8002cd0:	4b44      	ldr	r3, [pc, #272]	; (8002de4 <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 8002cd2:	601a      	str	r2, [r3, #0]
		M1_velo_eint = M1_velo_eint + M1_velo_e * deltaT / 1000.0;
 8002cd4:	4b44      	ldr	r3, [pc, #272]	; (8002de8 <HAL_TIM_PeriodElapsedCallback+0x3f0>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7fd fc59 	bl	8000590 <__aeabi_f2d>
 8002cde:	4604      	mov	r4, r0
 8002ce0:	460d      	mov	r5, r1
 8002ce2:	4b31      	ldr	r3, [pc, #196]	; (8002da8 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7fe f8ac 	bl	8000e44 <__aeabi_i2f>
 8002cec:	4602      	mov	r2, r0
 8002cee:	4b3d      	ldr	r3, [pc, #244]	; (8002de4 <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4610      	mov	r0, r2
 8002cf6:	f7fd fa33 	bl	8000160 <__aeabi_fmul>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7fd fc47 	bl	8000590 <__aeabi_f2d>
 8002d02:	f04f 0200 	mov.w	r2, #0
 8002d06:	4b39      	ldr	r3, [pc, #228]	; (8002dec <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 8002d08:	f7fd fdc4 	bl	8000894 <__aeabi_ddiv>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	460b      	mov	r3, r1
 8002d10:	4620      	mov	r0, r4
 8002d12:	4629      	mov	r1, r5
 8002d14:	f7fd fade 	bl	80002d4 <__adddf3>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	4619      	mov	r1, r3
 8002d20:	f7fd ff86 	bl	8000c30 <__aeabi_d2f>
 8002d24:	4603      	mov	r3, r0
 8002d26:	4a30      	ldr	r2, [pc, #192]	; (8002de8 <HAL_TIM_PeriodElapsedCallback+0x3f0>)
 8002d28:	6013      	str	r3, [r2, #0]
		M1_u = M1_Kp * M1_velo_e + M1_Ki * M1_velo_eint;
 8002d2a:	4b31      	ldr	r3, [pc, #196]	; (8002df0 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a2d      	ldr	r2, [pc, #180]	; (8002de4 <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 8002d30:	6812      	ldr	r2, [r2, #0]
 8002d32:	4611      	mov	r1, r2
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fd fa13 	bl	8000160 <__aeabi_fmul>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	461c      	mov	r4, r3
 8002d3e:	4b2d      	ldr	r3, [pc, #180]	; (8002df4 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a29      	ldr	r2, [pc, #164]	; (8002de8 <HAL_TIM_PeriodElapsedCallback+0x3f0>)
 8002d44:	6812      	ldr	r2, [r2, #0]
 8002d46:	4611      	mov	r1, r2
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fd fa09 	bl	8000160 <__aeabi_fmul>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	4619      	mov	r1, r3
 8002d52:	4620      	mov	r0, r4
 8002d54:	f7fd ffc2 	bl	8000cdc <__addsf3>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	4b26      	ldr	r3, [pc, #152]	; (8002df8 <HAL_TIM_PeriodElapsedCallback+0x400>)
 8002d5e:	601a      	str	r2, [r3, #0]
		M1_velo_preE = M1_velo_e;
 8002d60:	4b20      	ldr	r3, [pc, #128]	; (8002de4 <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a25      	ldr	r2, [pc, #148]	; (8002dfc <HAL_TIM_PeriodElapsedCallback+0x404>)
 8002d66:	6013      	str	r3, [r2, #0]
		M1_pwm = fabsf(M1_u);
 8002d68:	4b23      	ldr	r3, [pc, #140]	; (8002df8 <HAL_TIM_PeriodElapsedCallback+0x400>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d70:	4a23      	ldr	r2, [pc, #140]	; (8002e00 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002d72:	6013      	str	r3, [r2, #0]
		if (M1_pwm > 1000.0)
 8002d74:	4b22      	ldr	r3, [pc, #136]	; (8002e00 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4922      	ldr	r1, [pc, #136]	; (8002e04 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fe f922 	bl	8000fc4 <__aeabi_fcmpgt>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d040      	beq.n	8002e08 <HAL_TIM_PeriodElapsedCallback+0x410>
		  M1_pwm = 1000.0;
 8002d86:	4b1e      	ldr	r3, [pc, #120]	; (8002e00 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002d88:	4a1e      	ldr	r2, [pc, #120]	; (8002e04 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	e04a      	b.n	8002e24 <HAL_TIM_PeriodElapsedCallback+0x42c>
 8002d8e:	bf00      	nop
 8002d90:	00000000 	.word	0x00000000
 8002d94:	40a77000 	.word	0x40a77000
 8002d98:	f9db22d1 	.word	0xf9db22d1
 8002d9c:	bfcc6a7e 	.word	0xbfcc6a7e
 8002da0:	df3b645a 	.word	0xdf3b645a
 8002da4:	3fe38d4f 	.word	0x3fe38d4f
 8002da8:	20000011 	.word	0x20000011
 8002dac:	404e0000 	.word	0x404e0000
 8002db0:	20000408 	.word	0x20000408
 8002db4:	409e0000 	.word	0x409e0000
 8002db8:	2000040c 	.word	0x2000040c
 8002dbc:	20000420 	.word	0x20000420
 8002dc0:	20000410 	.word	0x20000410
 8002dc4:	20000418 	.word	0x20000418
 8002dc8:	20000414 	.word	0x20000414
 8002dcc:	2000041c 	.word	0x2000041c
 8002dd0:	20000424 	.word	0x20000424
 8002dd4:	20000428 	.word	0x20000428
 8002dd8:	20000444 	.word	0x20000444
 8002ddc:	20000448 	.word	0x20000448
 8002de0:	2000043c 	.word	0x2000043c
 8002de4:	20000458 	.word	0x20000458
 8002de8:	2000044c 	.word	0x2000044c
 8002dec:	408f4000 	.word	0x408f4000
 8002df0:	20000008 	.word	0x20000008
 8002df4:	2000000c 	.word	0x2000000c
 8002df8:	20000454 	.word	0x20000454
 8002dfc:	2000045c 	.word	0x2000045c
 8002e00:	20000480 	.word	0x20000480
 8002e04:	447a0000 	.word	0x447a0000
		else if (M1_pwm < 0)
 8002e08:	4b1d      	ldr	r3, [pc, #116]	; (8002e80 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f04f 0100 	mov.w	r1, #0
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7fe f8b9 	bl	8000f88 <__aeabi_fcmplt>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d003      	beq.n	8002e24 <HAL_TIM_PeriodElapsedCallback+0x42c>
		  M1_pwm = 0;
 8002e1c:	4b18      	ldr	r3, [pc, #96]	; (8002e80 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8002e1e:	f04f 0200 	mov.w	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]

		if (M1_u < 0)
 8002e24:	4b17      	ldr	r3, [pc, #92]	; (8002e84 <HAL_TIM_PeriodElapsedCallback+0x48c>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f04f 0100 	mov.w	r1, #0
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7fe f8ab 	bl	8000f88 <__aeabi_fcmplt>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d003      	beq.n	8002e40 <HAL_TIM_PeriodElapsedCallback+0x448>
		  M1_dir = 1;
 8002e38:	4b13      	ldr	r3, [pc, #76]	; (8002e88 <HAL_TIM_PeriodElapsedCallback+0x490>)
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	701a      	strb	r2, [r3, #0]
 8002e3e:	e002      	b.n	8002e46 <HAL_TIM_PeriodElapsedCallback+0x44e>
		else
		  M1_dir = -1;
 8002e40:	4b11      	ldr	r3, [pc, #68]	; (8002e88 <HAL_TIM_PeriodElapsedCallback+0x490>)
 8002e42:	22ff      	movs	r2, #255	; 0xff
 8002e44:	701a      	strb	r2, [r3, #0]

		if (FLAG_runMotor) {
 8002e46:	4b11      	ldr	r3, [pc, #68]	; (8002e8c <HAL_TIM_PeriodElapsedCallback+0x494>)
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00f      	beq.n	8002e6e <HAL_TIM_PeriodElapsedCallback+0x476>
		  set_motor(1, M1_dir, M1_pwm);
 8002e4e:	4b0e      	ldr	r3, [pc, #56]	; (8002e88 <HAL_TIM_PeriodElapsedCallback+0x490>)
 8002e50:	f993 4000 	ldrsb.w	r4, [r3]
 8002e54:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fe f8bd 	bl	8000fd8 <__aeabi_f2uiz>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	461a      	mov	r2, r3
 8002e64:	4621      	mov	r1, r4
 8002e66:	2001      	movs	r0, #1
 8002e68:	f7ff f8cc 	bl	8002004 <set_motor>
		} else
		  set_motor(1, 0, 0);
	  }
	}
  }
}
 8002e6c:	e004      	b.n	8002e78 <HAL_TIM_PeriodElapsedCallback+0x480>
		  set_motor(1, 0, 0);
 8002e6e:	2200      	movs	r2, #0
 8002e70:	2100      	movs	r1, #0
 8002e72:	2001      	movs	r0, #1
 8002e74:	f7ff f8c6 	bl	8002004 <set_motor>
}
 8002e78:	bf00      	nop
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bdb0      	pop	{r4, r5, r7, pc}
 8002e80:	20000480 	.word	0x20000480
 8002e84:	20000454 	.word	0x20000454
 8002e88:	20000450 	.word	0x20000450
 8002e8c:	20000438 	.word	0x20000438

08002e90 <run_motor>:

void run_motor() {
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
  /* Stop condition */
  if (M1_travel >= M1_toRotate) {
 8002e96:	4b4a      	ldr	r3, [pc, #296]	; (8002fc0 <run_motor+0x130>)
 8002e98:	881b      	ldrh	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fd ffd2 	bl	8000e44 <__aeabi_i2f>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	4b48      	ldr	r3, [pc, #288]	; (8002fc4 <run_motor+0x134>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4610      	mov	r0, r2
 8002eaa:	f7fe f877 	bl	8000f9c <__aeabi_fcmple>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d034      	beq.n	8002f1e <run_motor+0x8e>
	set_motor(2, 0, 0);
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	2002      	movs	r0, #2
 8002eba:	f7ff f8a3 	bl	8002004 <set_motor>
	set_motor_velo(1, 0);
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	2001      	movs	r0, #1
 8002ec2:	f7ff f877 	bl	8001fb4 <set_motor_velo>
	set_motor(1, 0, 0);
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	2100      	movs	r1, #0
 8002eca:	2001      	movs	r0, #1
 8002ecc:	f7ff f89a 	bl	8002004 <set_motor>
	flash_LED(LED_G, 300);
 8002ed0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002ed4:	2001      	movs	r0, #1
 8002ed6:	f7ff fcc7 	bl	8002868 <flash_LED>
	FLAG_completeRun = true;
 8002eda:	4b3b      	ldr	r3, [pc, #236]	; (8002fc8 <run_motor+0x138>)
 8002edc:	2201      	movs	r2, #1
 8002ede:	701a      	strb	r2, [r3, #0]
	FLAG_runMotor = false;
 8002ee0:	4b3a      	ldr	r3, [pc, #232]	; (8002fcc <run_motor+0x13c>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	701a      	strb	r2, [r3, #0]

	LCD_Print_String_At(&LCD, 4, 13, "     ");
 8002ee6:	4b3a      	ldr	r3, [pc, #232]	; (8002fd0 <run_motor+0x140>)
 8002ee8:	220d      	movs	r2, #13
 8002eea:	2104      	movs	r1, #4
 8002eec:	4839      	ldr	r0, [pc, #228]	; (8002fd4 <run_motor+0x144>)
 8002eee:	f7fe faba 	bl	8001466 <LCD_Print_String_At>
	char holder[5];
	sprintf(holder, "%3.2f", (float) M1_toRotate);
 8002ef2:	4b33      	ldr	r3, [pc, #204]	; (8002fc0 <run_motor+0x130>)
 8002ef4:	881b      	ldrh	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fd ffa0 	bl	8000e3c <__aeabi_ui2f>
 8002efc:	4603      	mov	r3, r0
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fd fb46 	bl	8000590 <__aeabi_f2d>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	4638      	mov	r0, r7
 8002f0a:	4933      	ldr	r1, [pc, #204]	; (8002fd8 <run_motor+0x148>)
 8002f0c:	f003 f946 	bl	800619c <siprintf>
	LCD_Print_String_At(&LCD, 4, 13, holder);
 8002f10:	463b      	mov	r3, r7
 8002f12:	220d      	movs	r2, #13
 8002f14:	2104      	movs	r1, #4
 8002f16:	482f      	ldr	r0, [pc, #188]	; (8002fd4 <run_motor+0x144>)
 8002f18:	f7fe faa5 	bl	8001466 <LCD_Print_String_At>
 8002f1c:	e04d      	b.n	8002fba <run_motor+0x12a>

	return;
  } else if (M2_dir == 1) {
 8002f1e:	4b2f      	ldr	r3, [pc, #188]	; (8002fdc <run_motor+0x14c>)
 8002f20:	f993 3000 	ldrsb.w	r3, [r3]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d109      	bne.n	8002f3c <run_motor+0xac>
	set_motor(2, M2_dir, 1000);
 8002f28:	4b2c      	ldr	r3, [pc, #176]	; (8002fdc <run_motor+0x14c>)
 8002f2a:	f993 3000 	ldrsb.w	r3, [r3]
 8002f2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f32:	4619      	mov	r1, r3
 8002f34:	2002      	movs	r0, #2
 8002f36:	f7ff f865 	bl	8002004 <set_motor>
 8002f3a:	e00e      	b.n	8002f5a <run_motor+0xca>
  } else if (M2_dir == -1) {
 8002f3c:	4b27      	ldr	r3, [pc, #156]	; (8002fdc <run_motor+0x14c>)
 8002f3e:	f993 3000 	ldrsb.w	r3, [r3]
 8002f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f46:	d108      	bne.n	8002f5a <run_motor+0xca>
	set_motor(2, M2_dir, 1000);
 8002f48:	4b24      	ldr	r3, [pc, #144]	; (8002fdc <run_motor+0x14c>)
 8002f4a:	f993 3000 	ldrsb.w	r3, [r3]
 8002f4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f52:	4619      	mov	r1, r3
 8002f54:	2002      	movs	r0, #2
 8002f56:	f7ff f855 	bl	8002004 <set_motor>
  }
  set_motor_velo(1, 40);
 8002f5a:	2128      	movs	r1, #40	; 0x28
 8002f5c:	2001      	movs	r0, #1
 8002f5e:	f7ff f829 	bl	8001fb4 <set_motor_velo>
  if (M2_dir == 1 && M2_x >= travelLength) {
 8002f62:	4b1e      	ldr	r3, [pc, #120]	; (8002fdc <run_motor+0x14c>)
 8002f64:	f993 3000 	ldrsb.w	r3, [r3]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d10c      	bne.n	8002f86 <run_motor+0xf6>
 8002f6c:	4b1c      	ldr	r3, [pc, #112]	; (8002fe0 <run_motor+0x150>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	491c      	ldr	r1, [pc, #112]	; (8002fe4 <run_motor+0x154>)
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fe f81c 	bl	8000fb0 <__aeabi_fcmpge>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <run_motor+0xf6>
	M2_dir = -1;
 8002f7e:	4b17      	ldr	r3, [pc, #92]	; (8002fdc <run_motor+0x14c>)
 8002f80:	22ff      	movs	r2, #255	; 0xff
 8002f82:	701a      	strb	r2, [r3, #0]
 8002f84:	e019      	b.n	8002fba <run_motor+0x12a>
  } else if (M2_dir == -1 && M2_x <= (M2_travel_StartPoint + 5)) {
 8002f86:	4b15      	ldr	r3, [pc, #84]	; (8002fdc <run_motor+0x14c>)
 8002f88:	f993 3000 	ldrsb.w	r3, [r3]
 8002f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f90:	d113      	bne.n	8002fba <run_motor+0x12a>
 8002f92:	4b15      	ldr	r3, [pc, #84]	; (8002fe8 <run_motor+0x158>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4915      	ldr	r1, [pc, #84]	; (8002fec <run_motor+0x15c>)
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7fd fe9f 	bl	8000cdc <__addsf3>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4b0f      	ldr	r3, [pc, #60]	; (8002fe0 <run_motor+0x150>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4610      	mov	r0, r2
 8002faa:	f7fe f801 	bl	8000fb0 <__aeabi_fcmpge>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d002      	beq.n	8002fba <run_motor+0x12a>
	M2_dir = 1;
 8002fb4:	4b09      	ldr	r3, [pc, #36]	; (8002fdc <run_motor+0x14c>)
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	701a      	strb	r2, [r3, #0]
  }
}
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	20000460 	.word	0x20000460
 8002fc4:	20000428 	.word	0x20000428
 8002fc8:	20000462 	.word	0x20000462
 8002fcc:	20000438 	.word	0x20000438
 8002fd0:	08008778 	.word	0x08008778
 8002fd4:	200003ec 	.word	0x200003ec
 8002fd8:	08008780 	.word	0x08008780
 8002fdc:	20000400 	.word	0x20000400
 8002fe0:	20000420 	.word	0x20000420
 8002fe4:	437a0000 	.word	0x437a0000
 8002fe8:	20000434 	.word	0x20000434
 8002fec:	40a00000 	.word	0x40a00000

08002ff0 <apply_state>:

bool FLAG_notHome = false;
void apply_state() {
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  check_button();
 8002ff4:	f7ff fba0 	bl	8002738 <check_button>
  if (IDLE_MODE) {
 8002ff8:	4b8b      	ldr	r3, [pc, #556]	; (8003228 <apply_state+0x238>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d024      	beq.n	800304a <apply_state+0x5a>
	if (BTN_Stop_state == BTN_RESET) {
 8003000:	4b8a      	ldr	r3, [pc, #552]	; (800322c <apply_state+0x23c>)
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d107      	bne.n	8003018 <apply_state+0x28>
	  FLAG_returnHome = false;
 8003008:	4b89      	ldr	r3, [pc, #548]	; (8003230 <apply_state+0x240>)
 800300a:	2200      	movs	r2, #0
 800300c:	701a      	strb	r2, [r3, #0]
	  set_motor(2, 0, 0);
 800300e:	2200      	movs	r2, #0
 8003010:	2100      	movs	r1, #0
 8003012:	2002      	movs	r0, #2
 8003014:	f7fe fff6 	bl	8002004 <set_motor>
	}
	if (BTN_Start_state == BTN_RESET && BEGIN_REACH == false) {
 8003018:	4b86      	ldr	r3, [pc, #536]	; (8003234 <apply_state+0x244>)
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d10c      	bne.n	800303a <apply_state+0x4a>
 8003020:	4b85      	ldr	r3, [pc, #532]	; (8003238 <apply_state+0x248>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	f083 0301 	eor.w	r3, r3, #1
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d005      	beq.n	800303a <apply_state+0x4a>
	  FLAG_returnHome = true;
 800302e:	4b80      	ldr	r3, [pc, #512]	; (8003230 <apply_state+0x240>)
 8003030:	2201      	movs	r2, #1
 8003032:	701a      	strb	r2, [r3, #0]
	  FLAG_returnFast = true;
 8003034:	4b81      	ldr	r3, [pc, #516]	; (800323c <apply_state+0x24c>)
 8003036:	2201      	movs	r2, #1
 8003038:	701a      	strb	r2, [r3, #0]
	}

	if (FLAG_returnHome) {
 800303a:	4b7d      	ldr	r3, [pc, #500]	; (8003230 <apply_state+0x240>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	f000 80f1 	beq.w	8003226 <apply_state+0x236>
	  return_home();
 8003044:	f7ff fc50 	bl	80028e8 <return_home>
 8003048:	e0ed      	b.n	8003226 <apply_state+0x236>
	}
  } else if (RUN_MODE) {
 800304a:	4b7d      	ldr	r3, [pc, #500]	; (8003240 <apply_state+0x250>)
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 80e9 	beq.w	8003226 <apply_state+0x236>
	if (preLevel != level) {
 8003054:	4b7b      	ldr	r3, [pc, #492]	; (8003244 <apply_state+0x254>)
 8003056:	781a      	ldrb	r2, [r3, #0]
 8003058:	4b7b      	ldr	r3, [pc, #492]	; (8003248 <apply_state+0x258>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	429a      	cmp	r2, r3
 800305e:	d001      	beq.n	8003064 <apply_state+0x74>
	  active_run();
 8003060:	f7ff faba 	bl	80025d8 <active_run>
	}
	FLAG_returnHome = false;
 8003064:	4b72      	ldr	r3, [pc, #456]	; (8003230 <apply_state+0x240>)
 8003066:	2200      	movs	r2, #0
 8003068:	701a      	strb	r2, [r3, #0]

	if (level != 0 && FLAG_runMotor == true) {
 800306a:	4b77      	ldr	r3, [pc, #476]	; (8003248 <apply_state+0x258>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00a      	beq.n	8003088 <apply_state+0x98>
 8003072:	4b76      	ldr	r3, [pc, #472]	; (800324c <apply_state+0x25c>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d006      	beq.n	8003088 <apply_state+0x98>
	  run_motor();
 800307a:	f7ff ff09 	bl	8002e90 <run_motor>
	  lightLED(0, 1);
 800307e:	2101      	movs	r1, #1
 8003080:	2000      	movs	r0, #0
 8003082:	f7ff f8a5 	bl	80021d0 <lightLED>
 8003086:	e00e      	b.n	80030a6 <apply_state+0xb6>
	} else if (level != 0 && !FLAG_runMotor)
 8003088:	4b6f      	ldr	r3, [pc, #444]	; (8003248 <apply_state+0x258>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00a      	beq.n	80030a6 <apply_state+0xb6>
 8003090:	4b6e      	ldr	r3, [pc, #440]	; (800324c <apply_state+0x25c>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	f083 0301 	eor.w	r3, r3, #1
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <apply_state+0xb6>
	  stop_motor(1, 1);
 800309e:	2101      	movs	r1, #1
 80030a0:	2001      	movs	r0, #1
 80030a2:	f7ff fa37 	bl	8002514 <stop_motor>
	if (level != 0 && BTN_Stop_state == BTN_RESET) {
 80030a6:	4b68      	ldr	r3, [pc, #416]	; (8003248 <apply_state+0x258>)
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00d      	beq.n	80030ca <apply_state+0xda>
 80030ae:	4b5f      	ldr	r3, [pc, #380]	; (800322c <apply_state+0x23c>)
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d109      	bne.n	80030ca <apply_state+0xda>
	  FLAG_runMotor = false;
 80030b6:	4b65      	ldr	r3, [pc, #404]	; (800324c <apply_state+0x25c>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	701a      	strb	r2, [r3, #0]
	  FLAG_completeRun = false;
 80030bc:	4b64      	ldr	r3, [pc, #400]	; (8003250 <apply_state+0x260>)
 80030be:	2200      	movs	r2, #0
 80030c0:	701a      	strb	r2, [r3, #0]
	  stop_motor(1, 1);
 80030c2:	2101      	movs	r1, #1
 80030c4:	2001      	movs	r0, #1
 80030c6:	f7ff fa25 	bl	8002514 <stop_motor>
	}

	if (FLAG_completeRun == true) {
 80030ca:	4b61      	ldr	r3, [pc, #388]	; (8003250 <apply_state+0x260>)
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d005      	beq.n	80030de <apply_state+0xee>
	  flash_LED(LED_G, 800);
 80030d2:	f44f 7148 	mov.w	r1, #800	; 0x320
 80030d6:	2001      	movs	r0, #1
 80030d8:	f7ff fbc6 	bl	8002868 <flash_LED>
	  return;
 80030dc:	e0a3      	b.n	8003226 <apply_state+0x236>
	}
	if (!FLAG_notHome) {
 80030de:	4b5d      	ldr	r3, [pc, #372]	; (8003254 <apply_state+0x264>)
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	f083 0301 	eor.w	r3, r3, #1
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d038      	beq.n	800315e <apply_state+0x16e>
	  if (level == 1) {
 80030ec:	4b56      	ldr	r3, [pc, #344]	; (8003248 <apply_state+0x258>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d106      	bne.n	8003102 <apply_state+0x112>
		distanceToGo = 2000;
 80030f4:	4b58      	ldr	r3, [pc, #352]	; (8003258 <apply_state+0x268>)
 80030f6:	4a59      	ldr	r2, [pc, #356]	; (800325c <apply_state+0x26c>)
 80030f8:	601a      	str	r2, [r3, #0]
		M1_toRotate = 42;
 80030fa:	4b59      	ldr	r3, [pc, #356]	; (8003260 <apply_state+0x270>)
 80030fc:	222a      	movs	r2, #42	; 0x2a
 80030fe:	801a      	strh	r2, [r3, #0]
 8003100:	e009      	b.n	8003116 <apply_state+0x126>
	  } else if (level == 2) {
 8003102:	4b51      	ldr	r3, [pc, #324]	; (8003248 <apply_state+0x258>)
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d105      	bne.n	8003116 <apply_state+0x126>
		distanceToGo = 4000;
 800310a:	4b53      	ldr	r3, [pc, #332]	; (8003258 <apply_state+0x268>)
 800310c:	4a55      	ldr	r2, [pc, #340]	; (8003264 <apply_state+0x274>)
 800310e:	601a      	str	r2, [r3, #0]
		M1_toRotate = 84;
 8003110:	4b53      	ldr	r3, [pc, #332]	; (8003260 <apply_state+0x270>)
 8003112:	2254      	movs	r2, #84	; 0x54
 8003114:	801a      	strh	r2, [r3, #0]
	  }
	  if (BTN_Stop_state == BTN_RESET) {
 8003116:	4b45      	ldr	r3, [pc, #276]	; (800322c <apply_state+0x23c>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d103      	bne.n	8003126 <apply_state+0x136>
		FLAG_runMotor = false;
 800311e:	4b4b      	ldr	r3, [pc, #300]	; (800324c <apply_state+0x25c>)
 8003120:	2200      	movs	r2, #0
 8003122:	701a      	strb	r2, [r3, #0]
 8003124:	e01b      	b.n	800315e <apply_state+0x16e>
//		stop_motor(1, 1);
	  } else if (BTN_Start_state == BTN_RESET && !FLAG_runMotor) {
 8003126:	4b43      	ldr	r3, [pc, #268]	; (8003234 <apply_state+0x244>)
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d117      	bne.n	800315e <apply_state+0x16e>
 800312e:	4b47      	ldr	r3, [pc, #284]	; (800324c <apply_state+0x25c>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	f083 0301 	eor.w	r3, r3, #1
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	d010      	beq.n	800315e <apply_state+0x16e>
		FLAG_runMotor = true;
 800313c:	4b43      	ldr	r3, [pc, #268]	; (800324c <apply_state+0x25c>)
 800313e:	2201      	movs	r2, #1
 8003140:	701a      	strb	r2, [r3, #0]
		M2_travel_StartPoint = 40;
 8003142:	4b49      	ldr	r3, [pc, #292]	; (8003268 <apply_state+0x278>)
 8003144:	4a49      	ldr	r2, [pc, #292]	; (800326c <apply_state+0x27c>)
 8003146:	601a      	str	r2, [r3, #0]
		M2_dir = 1;
 8003148:	4b49      	ldr	r3, [pc, #292]	; (8003270 <apply_state+0x280>)
 800314a:	2201      	movs	r2, #1
 800314c:	701a      	strb	r2, [r3, #0]
		M1_travel = 0;
 800314e:	4b49      	ldr	r3, [pc, #292]	; (8003274 <apply_state+0x284>)
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	601a      	str	r2, [r3, #0]
		M1_velo_eint = 0;
 8003156:	4b48      	ldr	r3, [pc, #288]	; (8003278 <apply_state+0x288>)
 8003158:	f04f 0200 	mov.w	r2, #0
 800315c:	601a      	str	r2, [r3, #0]
	  }
	}

	switch (level) {
 800315e:	4b3a      	ldr	r3, [pc, #232]	; (8003248 <apply_state+0x258>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d005      	beq.n	8003172 <apply_state+0x182>
 8003166:	2b00      	cmp	r3, #0
 8003168:	db5d      	blt.n	8003226 <apply_state+0x236>
 800316a:	3b01      	subs	r3, #1
 800316c:	2b01      	cmp	r3, #1
 800316e:	d85a      	bhi.n	8003226 <apply_state+0x236>
 8003170:	e02f      	b.n	80031d2 <apply_state+0x1e2>
	  case 0:
		lightLED(0, 1);
 8003172:	2101      	movs	r1, #1
 8003174:	2000      	movs	r0, #0
 8003176:	f7ff f82b 	bl	80021d0 <lightLED>
		if (BTN_Start_state == BTN_RESET && END_REACH == false) {
 800317a:	4b2e      	ldr	r3, [pc, #184]	; (8003234 <apply_state+0x244>)
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10d      	bne.n	800319e <apply_state+0x1ae>
 8003182:	4b3e      	ldr	r3, [pc, #248]	; (800327c <apply_state+0x28c>)
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	f083 0301 	eor.w	r3, r3, #1
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b00      	cmp	r3, #0
 800318e:	d006      	beq.n	800319e <apply_state+0x1ae>
		  set_motor(2, 1, 1000);
 8003190:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003194:	2101      	movs	r1, #1
 8003196:	2002      	movs	r0, #2
 8003198:	f7fe ff34 	bl	8002004 <set_motor>
 800319c:	e018      	b.n	80031d0 <apply_state+0x1e0>
		} else if (BTN_Stop_state == BTN_RESET && BEGIN_REACH == false) {
 800319e:	4b23      	ldr	r3, [pc, #140]	; (800322c <apply_state+0x23c>)
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10e      	bne.n	80031c4 <apply_state+0x1d4>
 80031a6:	4b24      	ldr	r3, [pc, #144]	; (8003238 <apply_state+0x248>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	f083 0301 	eor.w	r3, r3, #1
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d007      	beq.n	80031c4 <apply_state+0x1d4>
		  set_motor(2, -1, 1000);
 80031b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80031b8:	f04f 31ff 	mov.w	r1, #4294967295
 80031bc:	2002      	movs	r0, #2
 80031be:	f7fe ff21 	bl	8002004 <set_motor>
 80031c2:	e005      	b.n	80031d0 <apply_state+0x1e0>
		} else {
		  set_motor(2, 0, 0);
 80031c4:	2200      	movs	r2, #0
 80031c6:	2100      	movs	r1, #0
 80031c8:	2002      	movs	r0, #2
 80031ca:	f7fe ff1b 	bl	8002004 <set_motor>
		}
		return;
 80031ce:	e02a      	b.n	8003226 <apply_state+0x236>
 80031d0:	e029      	b.n	8003226 <apply_state+0x236>
		break;
	  case 1:
	  case 2:
		if (!BEGIN_REACH && !FLAG_runMotor) {
 80031d2:	4b19      	ldr	r3, [pc, #100]	; (8003238 <apply_state+0x248>)
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	f083 0301 	eor.w	r3, r3, #1
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00f      	beq.n	8003200 <apply_state+0x210>
 80031e0:	4b1a      	ldr	r3, [pc, #104]	; (800324c <apply_state+0x25c>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	f083 0301 	eor.w	r3, r3, #1
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d008      	beq.n	8003200 <apply_state+0x210>
		  flash_LED(LED_G, 500);
 80031ee:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80031f2:	2001      	movs	r0, #1
 80031f4:	f7ff fb38 	bl	8002868 <flash_LED>
		  FLAG_notHome = true;
 80031f8:	4b16      	ldr	r3, [pc, #88]	; (8003254 <apply_state+0x264>)
 80031fa:	2201      	movs	r2, #1
 80031fc:	701a      	strb	r2, [r3, #0]
		  return;
 80031fe:	e012      	b.n	8003226 <apply_state+0x236>
		} else if (BEGIN_REACH && !FLAG_runMotor) {
 8003200:	4b0d      	ldr	r3, [pc, #52]	; (8003238 <apply_state+0x248>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00d      	beq.n	8003224 <apply_state+0x234>
 8003208:	4b10      	ldr	r3, [pc, #64]	; (800324c <apply_state+0x25c>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	f083 0301 	eor.w	r3, r3, #1
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d006      	beq.n	8003224 <apply_state+0x234>
		  FLAG_notHome = false;
 8003216:	4b0f      	ldr	r3, [pc, #60]	; (8003254 <apply_state+0x264>)
 8003218:	2200      	movs	r2, #0
 800321a:	701a      	strb	r2, [r3, #0]
		  lightLED(0, 1);
 800321c:	2101      	movs	r1, #1
 800321e:	2000      	movs	r0, #0
 8003220:	f7fe ffd6 	bl	80021d0 <lightLED>
		}
		break;
 8003224:	bf00      	nop
	}
  }
}
 8003226:	bd80      	pop	{r7, pc}
 8003228:	200003f9 	.word	0x200003f9
 800322c:	20000005 	.word	0x20000005
 8003230:	200003fb 	.word	0x200003fb
 8003234:	20000004 	.word	0x20000004
 8003238:	2000037d 	.word	0x2000037d
 800323c:	2000042c 	.word	0x2000042c
 8003240:	200003f8 	.word	0x200003f8
 8003244:	20000010 	.word	0x20000010
 8003248:	200003fa 	.word	0x200003fa
 800324c:	20000438 	.word	0x20000438
 8003250:	20000462 	.word	0x20000462
 8003254:	20000484 	.word	0x20000484
 8003258:	200003fc 	.word	0x200003fc
 800325c:	44fa0000 	.word	0x44fa0000
 8003260:	20000460 	.word	0x20000460
 8003264:	457a0000 	.word	0x457a0000
 8003268:	20000434 	.word	0x20000434
 800326c:	42200000 	.word	0x42200000
 8003270:	20000400 	.word	0x20000400
 8003274:	20000428 	.word	0x20000428
 8003278:	2000044c 	.word	0x2000044c
 800327c:	2000037c 	.word	0x2000037c

08003280 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003280:	480c      	ldr	r0, [pc, #48]	; (80032b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003282:	490d      	ldr	r1, [pc, #52]	; (80032b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003284:	4a0d      	ldr	r2, [pc, #52]	; (80032bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003288:	e002      	b.n	8003290 <LoopCopyDataInit>

0800328a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800328a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800328c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800328e:	3304      	adds	r3, #4

08003290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003294:	d3f9      	bcc.n	800328a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003296:	4a0a      	ldr	r2, [pc, #40]	; (80032c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003298:	4c0a      	ldr	r4, [pc, #40]	; (80032c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800329a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800329c:	e001      	b.n	80032a2 <LoopFillZerobss>

0800329e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800329e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032a0:	3204      	adds	r2, #4

080032a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032a4:	d3fb      	bcc.n	800329e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80032a6:	f7fe fe4b 	bl	8001f40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032aa:	f002 faeb 	bl	8005884 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80032ae:	f7fe f8f1 	bl	8001494 <main>
  bx lr
 80032b2:	4770      	bx	lr
  ldr r0, =_sdata
 80032b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032b8:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80032bc:	08008b94 	.word	0x08008b94
  ldr r2, =_sbss
 80032c0:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80032c4:	200004a4 	.word	0x200004a4

080032c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80032c8:	e7fe      	b.n	80032c8 <ADC1_2_IRQHandler>
	...

080032cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032d0:	4b08      	ldr	r3, [pc, #32]	; (80032f4 <HAL_Init+0x28>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a07      	ldr	r2, [pc, #28]	; (80032f4 <HAL_Init+0x28>)
 80032d6:	f043 0310 	orr.w	r3, r3, #16
 80032da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032dc:	2003      	movs	r0, #3
 80032de:	f000 f96b 	bl	80035b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032e2:	200f      	movs	r0, #15
 80032e4:	f000 f808 	bl	80032f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032e8:	f7fe fbbe 	bl	8001a68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	40022000 	.word	0x40022000

080032f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003300:	4b12      	ldr	r3, [pc, #72]	; (800334c <HAL_InitTick+0x54>)
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	4b12      	ldr	r3, [pc, #72]	; (8003350 <HAL_InitTick+0x58>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	4619      	mov	r1, r3
 800330a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800330e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003312:	fbb2 f3f3 	udiv	r3, r2, r3
 8003316:	4618      	mov	r0, r3
 8003318:	f000 f991 	bl	800363e <HAL_SYSTICK_Config>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e00e      	b.n	8003344 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b0f      	cmp	r3, #15
 800332a:	d80a      	bhi.n	8003342 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800332c:	2200      	movs	r2, #0
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	f04f 30ff 	mov.w	r0, #4294967295
 8003334:	f000 f94b 	bl	80035ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003338:	4a06      	ldr	r2, [pc, #24]	; (8003354 <HAL_InitTick+0x5c>)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800333e:	2300      	movs	r3, #0
 8003340:	e000      	b.n	8003344 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
}
 8003344:	4618      	mov	r0, r3
 8003346:	3708      	adds	r7, #8
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	20000000 	.word	0x20000000
 8003350:	20000018 	.word	0x20000018
 8003354:	20000014 	.word	0x20000014

08003358 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800335c:	4b05      	ldr	r3, [pc, #20]	; (8003374 <HAL_IncTick+0x1c>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	461a      	mov	r2, r3
 8003362:	4b05      	ldr	r3, [pc, #20]	; (8003378 <HAL_IncTick+0x20>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4413      	add	r3, r2
 8003368:	4a03      	ldr	r2, [pc, #12]	; (8003378 <HAL_IncTick+0x20>)
 800336a:	6013      	str	r3, [r2, #0]
}
 800336c:	bf00      	nop
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr
 8003374:	20000018 	.word	0x20000018
 8003378:	20000490 	.word	0x20000490

0800337c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  return uwTick;
 8003380:	4b02      	ldr	r3, [pc, #8]	; (800338c <HAL_GetTick+0x10>)
 8003382:	681b      	ldr	r3, [r3, #0]
}
 8003384:	4618      	mov	r0, r3
 8003386:	46bd      	mov	sp, r7
 8003388:	bc80      	pop	{r7}
 800338a:	4770      	bx	lr
 800338c:	20000490 	.word	0x20000490

08003390 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003398:	f7ff fff0 	bl	800337c <HAL_GetTick>
 800339c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a8:	d005      	beq.n	80033b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033aa:	4b0a      	ldr	r3, [pc, #40]	; (80033d4 <HAL_Delay+0x44>)
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	461a      	mov	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	4413      	add	r3, r2
 80033b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033b6:	bf00      	nop
 80033b8:	f7ff ffe0 	bl	800337c <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d8f7      	bhi.n	80033b8 <HAL_Delay+0x28>
  {
  }
}
 80033c8:	bf00      	nop
 80033ca:	bf00      	nop
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	20000018 	.word	0x20000018

080033d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033e8:	4b0c      	ldr	r3, [pc, #48]	; (800341c <__NVIC_SetPriorityGrouping+0x44>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033f4:	4013      	ands	r3, r2
 80033f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003400:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003408:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800340a:	4a04      	ldr	r2, [pc, #16]	; (800341c <__NVIC_SetPriorityGrouping+0x44>)
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	60d3      	str	r3, [r2, #12]
}
 8003410:	bf00      	nop
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	bc80      	pop	{r7}
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	e000ed00 	.word	0xe000ed00

08003420 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003424:	4b04      	ldr	r3, [pc, #16]	; (8003438 <__NVIC_GetPriorityGrouping+0x18>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	0a1b      	lsrs	r3, r3, #8
 800342a:	f003 0307 	and.w	r3, r3, #7
}
 800342e:	4618      	mov	r0, r3
 8003430:	46bd      	mov	sp, r7
 8003432:	bc80      	pop	{r7}
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	e000ed00 	.word	0xe000ed00

0800343c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344a:	2b00      	cmp	r3, #0
 800344c:	db0b      	blt.n	8003466 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800344e:	79fb      	ldrb	r3, [r7, #7]
 8003450:	f003 021f 	and.w	r2, r3, #31
 8003454:	4906      	ldr	r1, [pc, #24]	; (8003470 <__NVIC_EnableIRQ+0x34>)
 8003456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345a:	095b      	lsrs	r3, r3, #5
 800345c:	2001      	movs	r0, #1
 800345e:	fa00 f202 	lsl.w	r2, r0, r2
 8003462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	bc80      	pop	{r7}
 800346e:	4770      	bx	lr
 8003470:	e000e100 	.word	0xe000e100

08003474 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800347e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003482:	2b00      	cmp	r3, #0
 8003484:	db12      	blt.n	80034ac <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003486:	79fb      	ldrb	r3, [r7, #7]
 8003488:	f003 021f 	and.w	r2, r3, #31
 800348c:	490a      	ldr	r1, [pc, #40]	; (80034b8 <__NVIC_DisableIRQ+0x44>)
 800348e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003492:	095b      	lsrs	r3, r3, #5
 8003494:	2001      	movs	r0, #1
 8003496:	fa00 f202 	lsl.w	r2, r0, r2
 800349a:	3320      	adds	r3, #32
 800349c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80034a0:	f3bf 8f4f 	dsb	sy
}
 80034a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80034a6:	f3bf 8f6f 	isb	sy
}
 80034aa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bc80      	pop	{r7}
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	e000e100 	.word	0xe000e100

080034bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	4603      	mov	r3, r0
 80034c4:	6039      	str	r1, [r7, #0]
 80034c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	db0a      	blt.n	80034e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	490c      	ldr	r1, [pc, #48]	; (8003508 <__NVIC_SetPriority+0x4c>)
 80034d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034da:	0112      	lsls	r2, r2, #4
 80034dc:	b2d2      	uxtb	r2, r2
 80034de:	440b      	add	r3, r1
 80034e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034e4:	e00a      	b.n	80034fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	4908      	ldr	r1, [pc, #32]	; (800350c <__NVIC_SetPriority+0x50>)
 80034ec:	79fb      	ldrb	r3, [r7, #7]
 80034ee:	f003 030f 	and.w	r3, r3, #15
 80034f2:	3b04      	subs	r3, #4
 80034f4:	0112      	lsls	r2, r2, #4
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	440b      	add	r3, r1
 80034fa:	761a      	strb	r2, [r3, #24]
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	bc80      	pop	{r7}
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	e000e100 	.word	0xe000e100
 800350c:	e000ed00 	.word	0xe000ed00

08003510 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003510:	b480      	push	{r7}
 8003512:	b089      	sub	sp, #36	; 0x24
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f1c3 0307 	rsb	r3, r3, #7
 800352a:	2b04      	cmp	r3, #4
 800352c:	bf28      	it	cs
 800352e:	2304      	movcs	r3, #4
 8003530:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	3304      	adds	r3, #4
 8003536:	2b06      	cmp	r3, #6
 8003538:	d902      	bls.n	8003540 <NVIC_EncodePriority+0x30>
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	3b03      	subs	r3, #3
 800353e:	e000      	b.n	8003542 <NVIC_EncodePriority+0x32>
 8003540:	2300      	movs	r3, #0
 8003542:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003544:	f04f 32ff 	mov.w	r2, #4294967295
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	43da      	mvns	r2, r3
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	401a      	ands	r2, r3
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003558:	f04f 31ff 	mov.w	r1, #4294967295
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	fa01 f303 	lsl.w	r3, r1, r3
 8003562:	43d9      	mvns	r1, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003568:	4313      	orrs	r3, r2
         );
}
 800356a:	4618      	mov	r0, r3
 800356c:	3724      	adds	r7, #36	; 0x24
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr

08003574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3b01      	subs	r3, #1
 8003580:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003584:	d301      	bcc.n	800358a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003586:	2301      	movs	r3, #1
 8003588:	e00f      	b.n	80035aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800358a:	4a0a      	ldr	r2, [pc, #40]	; (80035b4 <SysTick_Config+0x40>)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3b01      	subs	r3, #1
 8003590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003592:	210f      	movs	r1, #15
 8003594:	f04f 30ff 	mov.w	r0, #4294967295
 8003598:	f7ff ff90 	bl	80034bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800359c:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <SysTick_Config+0x40>)
 800359e:	2200      	movs	r2, #0
 80035a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035a2:	4b04      	ldr	r3, [pc, #16]	; (80035b4 <SysTick_Config+0x40>)
 80035a4:	2207      	movs	r2, #7
 80035a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	e000e010 	.word	0xe000e010

080035b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f7ff ff09 	bl	80033d8 <__NVIC_SetPriorityGrouping>
}
 80035c6:	bf00      	nop
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b086      	sub	sp, #24
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	4603      	mov	r3, r0
 80035d6:	60b9      	str	r1, [r7, #8]
 80035d8:	607a      	str	r2, [r7, #4]
 80035da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035dc:	2300      	movs	r3, #0
 80035de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035e0:	f7ff ff1e 	bl	8003420 <__NVIC_GetPriorityGrouping>
 80035e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	68b9      	ldr	r1, [r7, #8]
 80035ea:	6978      	ldr	r0, [r7, #20]
 80035ec:	f7ff ff90 	bl	8003510 <NVIC_EncodePriority>
 80035f0:	4602      	mov	r2, r0
 80035f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035f6:	4611      	mov	r1, r2
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7ff ff5f 	bl	80034bc <__NVIC_SetPriority>
}
 80035fe:	bf00      	nop
 8003600:	3718      	adds	r7, #24
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b082      	sub	sp, #8
 800360a:	af00      	add	r7, sp, #0
 800360c:	4603      	mov	r3, r0
 800360e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff ff11 	bl	800343c <__NVIC_EnableIRQ>
}
 800361a:	bf00      	nop
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b082      	sub	sp, #8
 8003626:	af00      	add	r7, sp, #0
 8003628:	4603      	mov	r3, r0
 800362a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800362c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff ff1f 	bl	8003474 <__NVIC_DisableIRQ>
}
 8003636:	bf00      	nop
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b082      	sub	sp, #8
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7ff ff94 	bl	8003574 <SysTick_Config>
 800364c:	4603      	mov	r3, r0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
	...

08003658 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003658:	b480      	push	{r7}
 800365a:	b08b      	sub	sp, #44	; 0x2c
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003662:	2300      	movs	r3, #0
 8003664:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003666:	2300      	movs	r3, #0
 8003668:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800366a:	e169      	b.n	8003940 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800366c:	2201      	movs	r2, #1
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	69fa      	ldr	r2, [r7, #28]
 800367c:	4013      	ands	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	429a      	cmp	r2, r3
 8003686:	f040 8158 	bne.w	800393a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	4a9a      	ldr	r2, [pc, #616]	; (80038f8 <HAL_GPIO_Init+0x2a0>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d05e      	beq.n	8003752 <HAL_GPIO_Init+0xfa>
 8003694:	4a98      	ldr	r2, [pc, #608]	; (80038f8 <HAL_GPIO_Init+0x2a0>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d875      	bhi.n	8003786 <HAL_GPIO_Init+0x12e>
 800369a:	4a98      	ldr	r2, [pc, #608]	; (80038fc <HAL_GPIO_Init+0x2a4>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d058      	beq.n	8003752 <HAL_GPIO_Init+0xfa>
 80036a0:	4a96      	ldr	r2, [pc, #600]	; (80038fc <HAL_GPIO_Init+0x2a4>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d86f      	bhi.n	8003786 <HAL_GPIO_Init+0x12e>
 80036a6:	4a96      	ldr	r2, [pc, #600]	; (8003900 <HAL_GPIO_Init+0x2a8>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d052      	beq.n	8003752 <HAL_GPIO_Init+0xfa>
 80036ac:	4a94      	ldr	r2, [pc, #592]	; (8003900 <HAL_GPIO_Init+0x2a8>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d869      	bhi.n	8003786 <HAL_GPIO_Init+0x12e>
 80036b2:	4a94      	ldr	r2, [pc, #592]	; (8003904 <HAL_GPIO_Init+0x2ac>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d04c      	beq.n	8003752 <HAL_GPIO_Init+0xfa>
 80036b8:	4a92      	ldr	r2, [pc, #584]	; (8003904 <HAL_GPIO_Init+0x2ac>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d863      	bhi.n	8003786 <HAL_GPIO_Init+0x12e>
 80036be:	4a92      	ldr	r2, [pc, #584]	; (8003908 <HAL_GPIO_Init+0x2b0>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d046      	beq.n	8003752 <HAL_GPIO_Init+0xfa>
 80036c4:	4a90      	ldr	r2, [pc, #576]	; (8003908 <HAL_GPIO_Init+0x2b0>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d85d      	bhi.n	8003786 <HAL_GPIO_Init+0x12e>
 80036ca:	2b12      	cmp	r3, #18
 80036cc:	d82a      	bhi.n	8003724 <HAL_GPIO_Init+0xcc>
 80036ce:	2b12      	cmp	r3, #18
 80036d0:	d859      	bhi.n	8003786 <HAL_GPIO_Init+0x12e>
 80036d2:	a201      	add	r2, pc, #4	; (adr r2, 80036d8 <HAL_GPIO_Init+0x80>)
 80036d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d8:	08003753 	.word	0x08003753
 80036dc:	0800372d 	.word	0x0800372d
 80036e0:	0800373f 	.word	0x0800373f
 80036e4:	08003781 	.word	0x08003781
 80036e8:	08003787 	.word	0x08003787
 80036ec:	08003787 	.word	0x08003787
 80036f0:	08003787 	.word	0x08003787
 80036f4:	08003787 	.word	0x08003787
 80036f8:	08003787 	.word	0x08003787
 80036fc:	08003787 	.word	0x08003787
 8003700:	08003787 	.word	0x08003787
 8003704:	08003787 	.word	0x08003787
 8003708:	08003787 	.word	0x08003787
 800370c:	08003787 	.word	0x08003787
 8003710:	08003787 	.word	0x08003787
 8003714:	08003787 	.word	0x08003787
 8003718:	08003787 	.word	0x08003787
 800371c:	08003735 	.word	0x08003735
 8003720:	08003749 	.word	0x08003749
 8003724:	4a79      	ldr	r2, [pc, #484]	; (800390c <HAL_GPIO_Init+0x2b4>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d013      	beq.n	8003752 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800372a:	e02c      	b.n	8003786 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	623b      	str	r3, [r7, #32]
          break;
 8003732:	e029      	b.n	8003788 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	3304      	adds	r3, #4
 800373a:	623b      	str	r3, [r7, #32]
          break;
 800373c:	e024      	b.n	8003788 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	3308      	adds	r3, #8
 8003744:	623b      	str	r3, [r7, #32]
          break;
 8003746:	e01f      	b.n	8003788 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	330c      	adds	r3, #12
 800374e:	623b      	str	r3, [r7, #32]
          break;
 8003750:	e01a      	b.n	8003788 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d102      	bne.n	8003760 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800375a:	2304      	movs	r3, #4
 800375c:	623b      	str	r3, [r7, #32]
          break;
 800375e:	e013      	b.n	8003788 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d105      	bne.n	8003774 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003768:	2308      	movs	r3, #8
 800376a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	69fa      	ldr	r2, [r7, #28]
 8003770:	611a      	str	r2, [r3, #16]
          break;
 8003772:	e009      	b.n	8003788 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003774:	2308      	movs	r3, #8
 8003776:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	69fa      	ldr	r2, [r7, #28]
 800377c:	615a      	str	r2, [r3, #20]
          break;
 800377e:	e003      	b.n	8003788 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003780:	2300      	movs	r3, #0
 8003782:	623b      	str	r3, [r7, #32]
          break;
 8003784:	e000      	b.n	8003788 <HAL_GPIO_Init+0x130>
          break;
 8003786:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	2bff      	cmp	r3, #255	; 0xff
 800378c:	d801      	bhi.n	8003792 <HAL_GPIO_Init+0x13a>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	e001      	b.n	8003796 <HAL_GPIO_Init+0x13e>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	3304      	adds	r3, #4
 8003796:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	2bff      	cmp	r3, #255	; 0xff
 800379c:	d802      	bhi.n	80037a4 <HAL_GPIO_Init+0x14c>
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	e002      	b.n	80037aa <HAL_GPIO_Init+0x152>
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a6:	3b08      	subs	r3, #8
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	210f      	movs	r1, #15
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	fa01 f303 	lsl.w	r3, r1, r3
 80037b8:	43db      	mvns	r3, r3
 80037ba:	401a      	ands	r2, r3
 80037bc:	6a39      	ldr	r1, [r7, #32]
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	fa01 f303 	lsl.w	r3, r1, r3
 80037c4:	431a      	orrs	r2, r3
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f000 80b1 	beq.w	800393a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80037d8:	4b4d      	ldr	r3, [pc, #308]	; (8003910 <HAL_GPIO_Init+0x2b8>)
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	4a4c      	ldr	r2, [pc, #304]	; (8003910 <HAL_GPIO_Init+0x2b8>)
 80037de:	f043 0301 	orr.w	r3, r3, #1
 80037e2:	6193      	str	r3, [r2, #24]
 80037e4:	4b4a      	ldr	r3, [pc, #296]	; (8003910 <HAL_GPIO_Init+0x2b8>)
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	60bb      	str	r3, [r7, #8]
 80037ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80037f0:	4a48      	ldr	r2, [pc, #288]	; (8003914 <HAL_GPIO_Init+0x2bc>)
 80037f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f4:	089b      	lsrs	r3, r3, #2
 80037f6:	3302      	adds	r3, #2
 80037f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	f003 0303 	and.w	r3, r3, #3
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	220f      	movs	r2, #15
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	43db      	mvns	r3, r3
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	4013      	ands	r3, r2
 8003812:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a40      	ldr	r2, [pc, #256]	; (8003918 <HAL_GPIO_Init+0x2c0>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d013      	beq.n	8003844 <HAL_GPIO_Init+0x1ec>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a3f      	ldr	r2, [pc, #252]	; (800391c <HAL_GPIO_Init+0x2c4>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d00d      	beq.n	8003840 <HAL_GPIO_Init+0x1e8>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a3e      	ldr	r2, [pc, #248]	; (8003920 <HAL_GPIO_Init+0x2c8>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d007      	beq.n	800383c <HAL_GPIO_Init+0x1e4>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a3d      	ldr	r2, [pc, #244]	; (8003924 <HAL_GPIO_Init+0x2cc>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d101      	bne.n	8003838 <HAL_GPIO_Init+0x1e0>
 8003834:	2303      	movs	r3, #3
 8003836:	e006      	b.n	8003846 <HAL_GPIO_Init+0x1ee>
 8003838:	2304      	movs	r3, #4
 800383a:	e004      	b.n	8003846 <HAL_GPIO_Init+0x1ee>
 800383c:	2302      	movs	r3, #2
 800383e:	e002      	b.n	8003846 <HAL_GPIO_Init+0x1ee>
 8003840:	2301      	movs	r3, #1
 8003842:	e000      	b.n	8003846 <HAL_GPIO_Init+0x1ee>
 8003844:	2300      	movs	r3, #0
 8003846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003848:	f002 0203 	and.w	r2, r2, #3
 800384c:	0092      	lsls	r2, r2, #2
 800384e:	4093      	lsls	r3, r2
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	4313      	orrs	r3, r2
 8003854:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003856:	492f      	ldr	r1, [pc, #188]	; (8003914 <HAL_GPIO_Init+0x2bc>)
 8003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385a:	089b      	lsrs	r3, r3, #2
 800385c:	3302      	adds	r3, #2
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d006      	beq.n	800387e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003870:	4b2d      	ldr	r3, [pc, #180]	; (8003928 <HAL_GPIO_Init+0x2d0>)
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	492c      	ldr	r1, [pc, #176]	; (8003928 <HAL_GPIO_Init+0x2d0>)
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	4313      	orrs	r3, r2
 800387a:	600b      	str	r3, [r1, #0]
 800387c:	e006      	b.n	800388c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800387e:	4b2a      	ldr	r3, [pc, #168]	; (8003928 <HAL_GPIO_Init+0x2d0>)
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	43db      	mvns	r3, r3
 8003886:	4928      	ldr	r1, [pc, #160]	; (8003928 <HAL_GPIO_Init+0x2d0>)
 8003888:	4013      	ands	r3, r2
 800388a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d006      	beq.n	80038a6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003898:	4b23      	ldr	r3, [pc, #140]	; (8003928 <HAL_GPIO_Init+0x2d0>)
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	4922      	ldr	r1, [pc, #136]	; (8003928 <HAL_GPIO_Init+0x2d0>)
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	604b      	str	r3, [r1, #4]
 80038a4:	e006      	b.n	80038b4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80038a6:	4b20      	ldr	r3, [pc, #128]	; (8003928 <HAL_GPIO_Init+0x2d0>)
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	43db      	mvns	r3, r3
 80038ae:	491e      	ldr	r1, [pc, #120]	; (8003928 <HAL_GPIO_Init+0x2d0>)
 80038b0:	4013      	ands	r3, r2
 80038b2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d006      	beq.n	80038ce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80038c0:	4b19      	ldr	r3, [pc, #100]	; (8003928 <HAL_GPIO_Init+0x2d0>)
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	4918      	ldr	r1, [pc, #96]	; (8003928 <HAL_GPIO_Init+0x2d0>)
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	608b      	str	r3, [r1, #8]
 80038cc:	e006      	b.n	80038dc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80038ce:	4b16      	ldr	r3, [pc, #88]	; (8003928 <HAL_GPIO_Init+0x2d0>)
 80038d0:	689a      	ldr	r2, [r3, #8]
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	43db      	mvns	r3, r3
 80038d6:	4914      	ldr	r1, [pc, #80]	; (8003928 <HAL_GPIO_Init+0x2d0>)
 80038d8:	4013      	ands	r3, r2
 80038da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d021      	beq.n	800392c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80038e8:	4b0f      	ldr	r3, [pc, #60]	; (8003928 <HAL_GPIO_Init+0x2d0>)
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	490e      	ldr	r1, [pc, #56]	; (8003928 <HAL_GPIO_Init+0x2d0>)
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	60cb      	str	r3, [r1, #12]
 80038f4:	e021      	b.n	800393a <HAL_GPIO_Init+0x2e2>
 80038f6:	bf00      	nop
 80038f8:	10320000 	.word	0x10320000
 80038fc:	10310000 	.word	0x10310000
 8003900:	10220000 	.word	0x10220000
 8003904:	10210000 	.word	0x10210000
 8003908:	10120000 	.word	0x10120000
 800390c:	10110000 	.word	0x10110000
 8003910:	40021000 	.word	0x40021000
 8003914:	40010000 	.word	0x40010000
 8003918:	40010800 	.word	0x40010800
 800391c:	40010c00 	.word	0x40010c00
 8003920:	40011000 	.word	0x40011000
 8003924:	40011400 	.word	0x40011400
 8003928:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800392c:	4b0b      	ldr	r3, [pc, #44]	; (800395c <HAL_GPIO_Init+0x304>)
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	43db      	mvns	r3, r3
 8003934:	4909      	ldr	r1, [pc, #36]	; (800395c <HAL_GPIO_Init+0x304>)
 8003936:	4013      	ands	r3, r2
 8003938:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	3301      	adds	r3, #1
 800393e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	fa22 f303 	lsr.w	r3, r2, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	f47f ae8e 	bne.w	800366c <HAL_GPIO_Init+0x14>
  }
}
 8003950:	bf00      	nop
 8003952:	bf00      	nop
 8003954:	372c      	adds	r7, #44	; 0x2c
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr
 800395c:	40010400 	.word	0x40010400

08003960 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	460b      	mov	r3, r1
 800396a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689a      	ldr	r2, [r3, #8]
 8003970:	887b      	ldrh	r3, [r7, #2]
 8003972:	4013      	ands	r3, r2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d002      	beq.n	800397e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003978:	2301      	movs	r3, #1
 800397a:	73fb      	strb	r3, [r7, #15]
 800397c:	e001      	b.n	8003982 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800397e:	2300      	movs	r3, #0
 8003980:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003982:	7bfb      	ldrb	r3, [r7, #15]
}
 8003984:	4618      	mov	r0, r3
 8003986:	3714      	adds	r7, #20
 8003988:	46bd      	mov	sp, r7
 800398a:	bc80      	pop	{r7}
 800398c:	4770      	bx	lr

0800398e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800398e:	b480      	push	{r7}
 8003990:	b083      	sub	sp, #12
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
 8003996:	460b      	mov	r3, r1
 8003998:	807b      	strh	r3, [r7, #2]
 800399a:	4613      	mov	r3, r2
 800399c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800399e:	787b      	ldrb	r3, [r7, #1]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d003      	beq.n	80039ac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039a4:	887a      	ldrh	r2, [r7, #2]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80039aa:	e003      	b.n	80039b4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80039ac:	887b      	ldrh	r3, [r7, #2]
 80039ae:	041a      	lsls	r2, r3, #16
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	611a      	str	r2, [r3, #16]
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bc80      	pop	{r7}
 80039bc:	4770      	bx	lr

080039be <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80039be:	b480      	push	{r7}
 80039c0:	b085      	sub	sp, #20
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
 80039c6:	460b      	mov	r3, r1
 80039c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039d0:	887a      	ldrh	r2, [r7, #2]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	4013      	ands	r3, r2
 80039d6:	041a      	lsls	r2, r3, #16
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	43d9      	mvns	r1, r3
 80039dc:	887b      	ldrh	r3, [r7, #2]
 80039de:	400b      	ands	r3, r1
 80039e0:	431a      	orrs	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	611a      	str	r2, [r3, #16]
}
 80039e6:	bf00      	nop
 80039e8:	3714      	adds	r7, #20
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bc80      	pop	{r7}
 80039ee:	4770      	bx	lr

080039f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	4603      	mov	r3, r0
 80039f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80039fa:	4b08      	ldr	r3, [pc, #32]	; (8003a1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039fc:	695a      	ldr	r2, [r3, #20]
 80039fe:	88fb      	ldrh	r3, [r7, #6]
 8003a00:	4013      	ands	r3, r2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d006      	beq.n	8003a14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a06:	4a05      	ldr	r2, [pc, #20]	; (8003a1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a08:	88fb      	ldrh	r3, [r7, #6]
 8003a0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a0c:	88fb      	ldrh	r3, [r7, #6]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fe fc1a 	bl	8002248 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a14:	bf00      	nop
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40010400 	.word	0x40010400

08003a20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e12b      	b.n	8003c8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d106      	bne.n	8003a4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7fe f840 	bl	8001acc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2224      	movs	r2, #36	; 0x24
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 0201 	bic.w	r2, r2, #1
 8003a62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a84:	f000 ffea 	bl	8004a5c <HAL_RCC_GetPCLK1Freq>
 8003a88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	4a81      	ldr	r2, [pc, #516]	; (8003c94 <HAL_I2C_Init+0x274>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d807      	bhi.n	8003aa4 <HAL_I2C_Init+0x84>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	4a80      	ldr	r2, [pc, #512]	; (8003c98 <HAL_I2C_Init+0x278>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	bf94      	ite	ls
 8003a9c:	2301      	movls	r3, #1
 8003a9e:	2300      	movhi	r3, #0
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	e006      	b.n	8003ab2 <HAL_I2C_Init+0x92>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4a7d      	ldr	r2, [pc, #500]	; (8003c9c <HAL_I2C_Init+0x27c>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	bf94      	ite	ls
 8003aac:	2301      	movls	r3, #1
 8003aae:	2300      	movhi	r3, #0
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e0e7      	b.n	8003c8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	4a78      	ldr	r2, [pc, #480]	; (8003ca0 <HAL_I2C_Init+0x280>)
 8003abe:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac2:	0c9b      	lsrs	r3, r3, #18
 8003ac4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	4a6a      	ldr	r2, [pc, #424]	; (8003c94 <HAL_I2C_Init+0x274>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d802      	bhi.n	8003af4 <HAL_I2C_Init+0xd4>
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	3301      	adds	r3, #1
 8003af2:	e009      	b.n	8003b08 <HAL_I2C_Init+0xe8>
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003afa:	fb02 f303 	mul.w	r3, r2, r3
 8003afe:	4a69      	ldr	r2, [pc, #420]	; (8003ca4 <HAL_I2C_Init+0x284>)
 8003b00:	fba2 2303 	umull	r2, r3, r2, r3
 8003b04:	099b      	lsrs	r3, r3, #6
 8003b06:	3301      	adds	r3, #1
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	6812      	ldr	r2, [r2, #0]
 8003b0c:	430b      	orrs	r3, r1
 8003b0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	495c      	ldr	r1, [pc, #368]	; (8003c94 <HAL_I2C_Init+0x274>)
 8003b24:	428b      	cmp	r3, r1
 8003b26:	d819      	bhi.n	8003b5c <HAL_I2C_Init+0x13c>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	1e59      	subs	r1, r3, #1
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b36:	1c59      	adds	r1, r3, #1
 8003b38:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b3c:	400b      	ands	r3, r1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00a      	beq.n	8003b58 <HAL_I2C_Init+0x138>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	1e59      	subs	r1, r3, #1
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b50:	3301      	adds	r3, #1
 8003b52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b56:	e051      	b.n	8003bfc <HAL_I2C_Init+0x1dc>
 8003b58:	2304      	movs	r3, #4
 8003b5a:	e04f      	b.n	8003bfc <HAL_I2C_Init+0x1dc>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d111      	bne.n	8003b88 <HAL_I2C_Init+0x168>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	1e58      	subs	r0, r3, #1
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6859      	ldr	r1, [r3, #4]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	440b      	add	r3, r1
 8003b72:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b76:	3301      	adds	r3, #1
 8003b78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	bf0c      	ite	eq
 8003b80:	2301      	moveq	r3, #1
 8003b82:	2300      	movne	r3, #0
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	e012      	b.n	8003bae <HAL_I2C_Init+0x18e>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	1e58      	subs	r0, r3, #1
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6859      	ldr	r1, [r3, #4]
 8003b90:	460b      	mov	r3, r1
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	440b      	add	r3, r1
 8003b96:	0099      	lsls	r1, r3, #2
 8003b98:	440b      	add	r3, r1
 8003b9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	bf0c      	ite	eq
 8003ba8:	2301      	moveq	r3, #1
 8003baa:	2300      	movne	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <HAL_I2C_Init+0x196>
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e022      	b.n	8003bfc <HAL_I2C_Init+0x1dc>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10e      	bne.n	8003bdc <HAL_I2C_Init+0x1bc>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	1e58      	subs	r0, r3, #1
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6859      	ldr	r1, [r3, #4]
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	440b      	add	r3, r1
 8003bcc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bda:	e00f      	b.n	8003bfc <HAL_I2C_Init+0x1dc>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	1e58      	subs	r0, r3, #1
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6859      	ldr	r1, [r3, #4]
 8003be4:	460b      	mov	r3, r1
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	440b      	add	r3, r1
 8003bea:	0099      	lsls	r1, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bf8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bfc:	6879      	ldr	r1, [r7, #4]
 8003bfe:	6809      	ldr	r1, [r1, #0]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	69da      	ldr	r2, [r3, #28]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	431a      	orrs	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6911      	ldr	r1, [r2, #16]
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	68d2      	ldr	r2, [r2, #12]
 8003c36:	4311      	orrs	r1, r2
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6812      	ldr	r2, [r2, #0]
 8003c3c:	430b      	orrs	r3, r1
 8003c3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	695a      	ldr	r2, [r3, #20]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f042 0201 	orr.w	r2, r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2220      	movs	r2, #32
 8003c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	000186a0 	.word	0x000186a0
 8003c98:	001e847f 	.word	0x001e847f
 8003c9c:	003d08ff 	.word	0x003d08ff
 8003ca0:	431bde83 	.word	0x431bde83
 8003ca4:	10624dd3 	.word	0x10624dd3

08003ca8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b088      	sub	sp, #32
 8003cac:	af02      	add	r7, sp, #8
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	607a      	str	r2, [r7, #4]
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	817b      	strh	r3, [r7, #10]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cbc:	f7ff fb5e 	bl	800337c <HAL_GetTick>
 8003cc0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b20      	cmp	r3, #32
 8003ccc:	f040 80e0 	bne.w	8003e90 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	2319      	movs	r3, #25
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	4970      	ldr	r1, [pc, #448]	; (8003e9c <HAL_I2C_Master_Transmit+0x1f4>)
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 f964 	bl	8003fa8 <I2C_WaitOnFlagUntilTimeout>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	e0d3      	b.n	8003e92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d101      	bne.n	8003cf8 <HAL_I2C_Master_Transmit+0x50>
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	e0cc      	b.n	8003e92 <HAL_I2C_Master_Transmit+0x1ea>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d007      	beq.n	8003d1e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f042 0201 	orr.w	r2, r2, #1
 8003d1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2221      	movs	r2, #33	; 0x21
 8003d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2210      	movs	r2, #16
 8003d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	893a      	ldrh	r2, [r7, #8]
 8003d4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	4a50      	ldr	r2, [pc, #320]	; (8003ea0 <HAL_I2C_Master_Transmit+0x1f8>)
 8003d5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d60:	8979      	ldrh	r1, [r7, #10]
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	6a3a      	ldr	r2, [r7, #32]
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f000 f89c 	bl	8003ea4 <I2C_MasterRequestWrite>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d001      	beq.n	8003d76 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e08d      	b.n	8003e92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d76:	2300      	movs	r3, #0
 8003d78:	613b      	str	r3, [r7, #16]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	613b      	str	r3, [r7, #16]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	613b      	str	r3, [r7, #16]
 8003d8a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003d8c:	e066      	b.n	8003e5c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	6a39      	ldr	r1, [r7, #32]
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f000 f9de 	bl	8004154 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00d      	beq.n	8003dba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d107      	bne.n	8003db6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003db4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e06b      	b.n	8003e92 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbe:	781a      	ldrb	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dca:	1c5a      	adds	r2, r3, #1
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003de2:	3b01      	subs	r3, #1
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b04      	cmp	r3, #4
 8003df6:	d11b      	bne.n	8003e30 <HAL_I2C_Master_Transmit+0x188>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d017      	beq.n	8003e30 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	781a      	ldrb	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	1c5a      	adds	r2, r3, #1
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	6a39      	ldr	r1, [r7, #32]
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 f9ce 	bl	80041d6 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00d      	beq.n	8003e5c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e44:	2b04      	cmp	r3, #4
 8003e46:	d107      	bne.n	8003e58 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e56:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e01a      	b.n	8003e92 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d194      	bne.n	8003d8e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2220      	movs	r2, #32
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	e000      	b.n	8003e92 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003e90:	2302      	movs	r3, #2
  }
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3718      	adds	r7, #24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	00100002 	.word	0x00100002
 8003ea0:	ffff0000 	.word	0xffff0000

08003ea4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b088      	sub	sp, #32
 8003ea8:	af02      	add	r7, sp, #8
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	607a      	str	r2, [r7, #4]
 8003eae:	603b      	str	r3, [r7, #0]
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	d006      	beq.n	8003ece <I2C_MasterRequestWrite+0x2a>
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d003      	beq.n	8003ece <I2C_MasterRequestWrite+0x2a>
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ecc:	d108      	bne.n	8003ee0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003edc:	601a      	str	r2, [r3, #0]
 8003ede:	e00b      	b.n	8003ef8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee4:	2b12      	cmp	r3, #18
 8003ee6:	d107      	bne.n	8003ef8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ef6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 f84f 	bl	8003fa8 <I2C_WaitOnFlagUntilTimeout>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00d      	beq.n	8003f2c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f1e:	d103      	bne.n	8003f28 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e035      	b.n	8003f98 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f34:	d108      	bne.n	8003f48 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f36:	897b      	ldrh	r3, [r7, #10]
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f44:	611a      	str	r2, [r3, #16]
 8003f46:	e01b      	b.n	8003f80 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f48:	897b      	ldrh	r3, [r7, #10]
 8003f4a:	11db      	asrs	r3, r3, #7
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	f003 0306 	and.w	r3, r3, #6
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	f063 030f 	orn	r3, r3, #15
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	490e      	ldr	r1, [pc, #56]	; (8003fa0 <I2C_MasterRequestWrite+0xfc>)
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f000 f875 	bl	8004056 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e010      	b.n	8003f98 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f76:	897b      	ldrh	r3, [r7, #10]
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	4907      	ldr	r1, [pc, #28]	; (8003fa4 <I2C_MasterRequestWrite+0x100>)
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 f865 	bl	8004056 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e000      	b.n	8003f98 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3718      	adds	r7, #24
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	00010008 	.word	0x00010008
 8003fa4:	00010002 	.word	0x00010002

08003fa8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	603b      	str	r3, [r7, #0]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fb8:	e025      	b.n	8004006 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc0:	d021      	beq.n	8004006 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fc2:	f7ff f9db 	bl	800337c <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	683a      	ldr	r2, [r7, #0]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d302      	bcc.n	8003fd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d116      	bne.n	8004006 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2220      	movs	r2, #32
 8003fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	f043 0220 	orr.w	r2, r3, #32
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e023      	b.n	800404e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	0c1b      	lsrs	r3, r3, #16
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b01      	cmp	r3, #1
 800400e:	d10d      	bne.n	800402c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	43da      	mvns	r2, r3
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	4013      	ands	r3, r2
 800401c:	b29b      	uxth	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	bf0c      	ite	eq
 8004022:	2301      	moveq	r3, #1
 8004024:	2300      	movne	r3, #0
 8004026:	b2db      	uxtb	r3, r3
 8004028:	461a      	mov	r2, r3
 800402a:	e00c      	b.n	8004046 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	43da      	mvns	r2, r3
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	4013      	ands	r3, r2
 8004038:	b29b      	uxth	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	bf0c      	ite	eq
 800403e:	2301      	moveq	r3, #1
 8004040:	2300      	movne	r3, #0
 8004042:	b2db      	uxtb	r3, r3
 8004044:	461a      	mov	r2, r3
 8004046:	79fb      	ldrb	r3, [r7, #7]
 8004048:	429a      	cmp	r2, r3
 800404a:	d0b6      	beq.n	8003fba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b084      	sub	sp, #16
 800405a:	af00      	add	r7, sp, #0
 800405c:	60f8      	str	r0, [r7, #12]
 800405e:	60b9      	str	r1, [r7, #8]
 8004060:	607a      	str	r2, [r7, #4]
 8004062:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004064:	e051      	b.n	800410a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004074:	d123      	bne.n	80040be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004084:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800408e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2220      	movs	r2, #32
 800409a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	f043 0204 	orr.w	r2, r3, #4
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e046      	b.n	800414c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c4:	d021      	beq.n	800410a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040c6:	f7ff f959 	bl	800337c <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d302      	bcc.n	80040dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d116      	bne.n	800410a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2220      	movs	r2, #32
 80040e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	f043 0220 	orr.w	r2, r3, #32
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e020      	b.n	800414c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	0c1b      	lsrs	r3, r3, #16
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b01      	cmp	r3, #1
 8004112:	d10c      	bne.n	800412e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	43da      	mvns	r2, r3
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	4013      	ands	r3, r2
 8004120:	b29b      	uxth	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	bf14      	ite	ne
 8004126:	2301      	movne	r3, #1
 8004128:	2300      	moveq	r3, #0
 800412a:	b2db      	uxtb	r3, r3
 800412c:	e00b      	b.n	8004146 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	43da      	mvns	r2, r3
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	4013      	ands	r3, r2
 800413a:	b29b      	uxth	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	bf14      	ite	ne
 8004140:	2301      	movne	r3, #1
 8004142:	2300      	moveq	r3, #0
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d18d      	bne.n	8004066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004160:	e02d      	b.n	80041be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f000 f878 	bl	8004258 <I2C_IsAcknowledgeFailed>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e02d      	b.n	80041ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004178:	d021      	beq.n	80041be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800417a:	f7ff f8ff 	bl	800337c <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	429a      	cmp	r2, r3
 8004188:	d302      	bcc.n	8004190 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d116      	bne.n	80041be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2220      	movs	r2, #32
 800419a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	f043 0220 	orr.w	r2, r3, #32
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e007      	b.n	80041ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c8:	2b80      	cmp	r3, #128	; 0x80
 80041ca:	d1ca      	bne.n	8004162 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b084      	sub	sp, #16
 80041da:	af00      	add	r7, sp, #0
 80041dc:	60f8      	str	r0, [r7, #12]
 80041de:	60b9      	str	r1, [r7, #8]
 80041e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041e2:	e02d      	b.n	8004240 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f000 f837 	bl	8004258 <I2C_IsAcknowledgeFailed>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d001      	beq.n	80041f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e02d      	b.n	8004250 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fa:	d021      	beq.n	8004240 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041fc:	f7ff f8be 	bl	800337c <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	429a      	cmp	r2, r3
 800420a:	d302      	bcc.n	8004212 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d116      	bne.n	8004240 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2220      	movs	r2, #32
 800421c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	f043 0220 	orr.w	r2, r3, #32
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e007      	b.n	8004250 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	f003 0304 	and.w	r3, r3, #4
 800424a:	2b04      	cmp	r3, #4
 800424c:	d1ca      	bne.n	80041e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800426a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800426e:	d11b      	bne.n	80042a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004278:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2220      	movs	r2, #32
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004294:	f043 0204 	orr.w	r2, r3, #4
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e000      	b.n	80042aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bc80      	pop	{r7}
 80042b2:	4770      	bx	lr

080042b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e272      	b.n	80047ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 8087 	beq.w	80043e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042d4:	4b92      	ldr	r3, [pc, #584]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f003 030c 	and.w	r3, r3, #12
 80042dc:	2b04      	cmp	r3, #4
 80042de:	d00c      	beq.n	80042fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80042e0:	4b8f      	ldr	r3, [pc, #572]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f003 030c 	and.w	r3, r3, #12
 80042e8:	2b08      	cmp	r3, #8
 80042ea:	d112      	bne.n	8004312 <HAL_RCC_OscConfig+0x5e>
 80042ec:	4b8c      	ldr	r3, [pc, #560]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042f8:	d10b      	bne.n	8004312 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042fa:	4b89      	ldr	r3, [pc, #548]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d06c      	beq.n	80043e0 <HAL_RCC_OscConfig+0x12c>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d168      	bne.n	80043e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e24c      	b.n	80047ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800431a:	d106      	bne.n	800432a <HAL_RCC_OscConfig+0x76>
 800431c:	4b80      	ldr	r3, [pc, #512]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a7f      	ldr	r2, [pc, #508]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004326:	6013      	str	r3, [r2, #0]
 8004328:	e02e      	b.n	8004388 <HAL_RCC_OscConfig+0xd4>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10c      	bne.n	800434c <HAL_RCC_OscConfig+0x98>
 8004332:	4b7b      	ldr	r3, [pc, #492]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a7a      	ldr	r2, [pc, #488]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800433c:	6013      	str	r3, [r2, #0]
 800433e:	4b78      	ldr	r3, [pc, #480]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a77      	ldr	r2, [pc, #476]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004344:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	e01d      	b.n	8004388 <HAL_RCC_OscConfig+0xd4>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004354:	d10c      	bne.n	8004370 <HAL_RCC_OscConfig+0xbc>
 8004356:	4b72      	ldr	r3, [pc, #456]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a71      	ldr	r2, [pc, #452]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 800435c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004360:	6013      	str	r3, [r2, #0]
 8004362:	4b6f      	ldr	r3, [pc, #444]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a6e      	ldr	r2, [pc, #440]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	e00b      	b.n	8004388 <HAL_RCC_OscConfig+0xd4>
 8004370:	4b6b      	ldr	r3, [pc, #428]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a6a      	ldr	r2, [pc, #424]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800437a:	6013      	str	r3, [r2, #0]
 800437c:	4b68      	ldr	r3, [pc, #416]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a67      	ldr	r2, [pc, #412]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004386:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d013      	beq.n	80043b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004390:	f7fe fff4 	bl	800337c <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004398:	f7fe fff0 	bl	800337c <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b64      	cmp	r3, #100	; 0x64
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e200      	b.n	80047ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043aa:	4b5d      	ldr	r3, [pc, #372]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d0f0      	beq.n	8004398 <HAL_RCC_OscConfig+0xe4>
 80043b6:	e014      	b.n	80043e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b8:	f7fe ffe0 	bl	800337c <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043c0:	f7fe ffdc 	bl	800337c <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b64      	cmp	r3, #100	; 0x64
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e1ec      	b.n	80047ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043d2:	4b53      	ldr	r3, [pc, #332]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1f0      	bne.n	80043c0 <HAL_RCC_OscConfig+0x10c>
 80043de:	e000      	b.n	80043e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d063      	beq.n	80044b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043ee:	4b4c      	ldr	r3, [pc, #304]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f003 030c 	and.w	r3, r3, #12
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00b      	beq.n	8004412 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80043fa:	4b49      	ldr	r3, [pc, #292]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f003 030c 	and.w	r3, r3, #12
 8004402:	2b08      	cmp	r3, #8
 8004404:	d11c      	bne.n	8004440 <HAL_RCC_OscConfig+0x18c>
 8004406:	4b46      	ldr	r3, [pc, #280]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d116      	bne.n	8004440 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004412:	4b43      	ldr	r3, [pc, #268]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d005      	beq.n	800442a <HAL_RCC_OscConfig+0x176>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d001      	beq.n	800442a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e1c0      	b.n	80047ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800442a:	4b3d      	ldr	r3, [pc, #244]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	4939      	ldr	r1, [pc, #228]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 800443a:	4313      	orrs	r3, r2
 800443c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800443e:	e03a      	b.n	80044b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d020      	beq.n	800448a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004448:	4b36      	ldr	r3, [pc, #216]	; (8004524 <HAL_RCC_OscConfig+0x270>)
 800444a:	2201      	movs	r2, #1
 800444c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800444e:	f7fe ff95 	bl	800337c <HAL_GetTick>
 8004452:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004454:	e008      	b.n	8004468 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004456:	f7fe ff91 	bl	800337c <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e1a1      	b.n	80047ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004468:	4b2d      	ldr	r3, [pc, #180]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0f0      	beq.n	8004456 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004474:	4b2a      	ldr	r3, [pc, #168]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	00db      	lsls	r3, r3, #3
 8004482:	4927      	ldr	r1, [pc, #156]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 8004484:	4313      	orrs	r3, r2
 8004486:	600b      	str	r3, [r1, #0]
 8004488:	e015      	b.n	80044b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800448a:	4b26      	ldr	r3, [pc, #152]	; (8004524 <HAL_RCC_OscConfig+0x270>)
 800448c:	2200      	movs	r2, #0
 800448e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004490:	f7fe ff74 	bl	800337c <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004498:	f7fe ff70 	bl	800337c <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e180      	b.n	80047ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044aa:	4b1d      	ldr	r3, [pc, #116]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1f0      	bne.n	8004498 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0308 	and.w	r3, r3, #8
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d03a      	beq.n	8004538 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d019      	beq.n	80044fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044ca:	4b17      	ldr	r3, [pc, #92]	; (8004528 <HAL_RCC_OscConfig+0x274>)
 80044cc:	2201      	movs	r2, #1
 80044ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044d0:	f7fe ff54 	bl	800337c <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044d8:	f7fe ff50 	bl	800337c <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e160      	b.n	80047ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ea:	4b0d      	ldr	r3, [pc, #52]	; (8004520 <HAL_RCC_OscConfig+0x26c>)
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0f0      	beq.n	80044d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80044f6:	2001      	movs	r0, #1
 80044f8:	f000 fac4 	bl	8004a84 <RCC_Delay>
 80044fc:	e01c      	b.n	8004538 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044fe:	4b0a      	ldr	r3, [pc, #40]	; (8004528 <HAL_RCC_OscConfig+0x274>)
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004504:	f7fe ff3a 	bl	800337c <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800450a:	e00f      	b.n	800452c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800450c:	f7fe ff36 	bl	800337c <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d908      	bls.n	800452c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e146      	b.n	80047ac <HAL_RCC_OscConfig+0x4f8>
 800451e:	bf00      	nop
 8004520:	40021000 	.word	0x40021000
 8004524:	42420000 	.word	0x42420000
 8004528:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800452c:	4b92      	ldr	r3, [pc, #584]	; (8004778 <HAL_RCC_OscConfig+0x4c4>)
 800452e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1e9      	bne.n	800450c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 80a6 	beq.w	8004692 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004546:	2300      	movs	r3, #0
 8004548:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800454a:	4b8b      	ldr	r3, [pc, #556]	; (8004778 <HAL_RCC_OscConfig+0x4c4>)
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10d      	bne.n	8004572 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004556:	4b88      	ldr	r3, [pc, #544]	; (8004778 <HAL_RCC_OscConfig+0x4c4>)
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	4a87      	ldr	r2, [pc, #540]	; (8004778 <HAL_RCC_OscConfig+0x4c4>)
 800455c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004560:	61d3      	str	r3, [r2, #28]
 8004562:	4b85      	ldr	r3, [pc, #532]	; (8004778 <HAL_RCC_OscConfig+0x4c4>)
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800456a:	60bb      	str	r3, [r7, #8]
 800456c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800456e:	2301      	movs	r3, #1
 8004570:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004572:	4b82      	ldr	r3, [pc, #520]	; (800477c <HAL_RCC_OscConfig+0x4c8>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457a:	2b00      	cmp	r3, #0
 800457c:	d118      	bne.n	80045b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800457e:	4b7f      	ldr	r3, [pc, #508]	; (800477c <HAL_RCC_OscConfig+0x4c8>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a7e      	ldr	r2, [pc, #504]	; (800477c <HAL_RCC_OscConfig+0x4c8>)
 8004584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004588:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800458a:	f7fe fef7 	bl	800337c <HAL_GetTick>
 800458e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004590:	e008      	b.n	80045a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004592:	f7fe fef3 	bl	800337c <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	2b64      	cmp	r3, #100	; 0x64
 800459e:	d901      	bls.n	80045a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e103      	b.n	80047ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045a4:	4b75      	ldr	r3, [pc, #468]	; (800477c <HAL_RCC_OscConfig+0x4c8>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d0f0      	beq.n	8004592 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d106      	bne.n	80045c6 <HAL_RCC_OscConfig+0x312>
 80045b8:	4b6f      	ldr	r3, [pc, #444]	; (8004778 <HAL_RCC_OscConfig+0x4c4>)
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	4a6e      	ldr	r2, [pc, #440]	; (8004778 <HAL_RCC_OscConfig+0x4c4>)
 80045be:	f043 0301 	orr.w	r3, r3, #1
 80045c2:	6213      	str	r3, [r2, #32]
 80045c4:	e02d      	b.n	8004622 <HAL_RCC_OscConfig+0x36e>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10c      	bne.n	80045e8 <HAL_RCC_OscConfig+0x334>
 80045ce:	4b6a      	ldr	r3, [pc, #424]	; (8004778 <HAL_RCC_OscConfig+0x4c4>)
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	4a69      	ldr	r2, [pc, #420]	; (8004778 <HAL_RCC_OscConfig+0x4c4>)
 80045d4:	f023 0301 	bic.w	r3, r3, #1
 80045d8:	6213      	str	r3, [r2, #32]
 80045da:	4b67      	ldr	r3, [pc, #412]	; (8004778 <HAL_RCC_OscConfig+0x4c4>)
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	4a66      	ldr	r2, [pc, #408]	; (8004778 <HAL_RCC_OscConfig+0x4c4>)
 80045e0:	f023 0304 	bic.w	r3, r3, #4
 80045e4:	6213      	str	r3, [r2, #32]
 80045e6:	e01c      	b.n	8004622 <HAL_RCC_OscConfig+0x36e>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	2b05      	cmp	r3, #5
 80045ee:	d10c      	bne.n	800460a <HAL_RCC_OscConfig+0x356>
 80045f0:	4b61      	ldr	r3, [pc, #388]	; (8004778 <HAL_RCC_OscConfig+0x4c4>)
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	4a60      	ldr	r2, [pc, #384]	; (8004778 <HAL_RCC_OscConfig+0x4c4>)
 80045f6:	f043 0304 	orr.w	r3, r3, #4
 80045fa:	6213      	str	r3, [r2, #32]
 80045fc:	4b5e      	ldr	r3, [pc, #376]	; (8004778 <HAL_RCC_OscConfig+0x4c4>)
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	4a5d      	ldr	r2, [pc, #372]	; (8004778 <HAL_RCC_OscConfig+0x4c4>)
 8004602:	f043 0301 	orr.w	r3, r3, #1
 8004606:	6213      	str	r3, [r2, #32]
 8004608:	e00b      	b.n	8004622 <HAL_RCC_OscConfig+0x36e>
 800460a:	4b5b      	ldr	r3, [pc, #364]	; (8004778 <HAL_RCC_OscConfig+0x4c4>)
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	4a5a      	ldr	r2, [pc, #360]	; (8004778 <HAL_RCC_OscConfig+0x4c4>)
 8004610:	f023 0301 	bic.w	r3, r3, #1
 8004614:	6213      	str	r3, [r2, #32]
 8004616:	4b58      	ldr	r3, [pc, #352]	; (8004778 <HAL_RCC_OscConfig+0x4c4>)
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	4a57      	ldr	r2, [pc, #348]	; (8004778 <HAL_RCC_OscConfig+0x4c4>)
 800461c:	f023 0304 	bic.w	r3, r3, #4
 8004620:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d015      	beq.n	8004656 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800462a:	f7fe fea7 	bl	800337c <HAL_GetTick>
 800462e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004630:	e00a      	b.n	8004648 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004632:	f7fe fea3 	bl	800337c <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004640:	4293      	cmp	r3, r2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e0b1      	b.n	80047ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004648:	4b4b      	ldr	r3, [pc, #300]	; (8004778 <HAL_RCC_OscConfig+0x4c4>)
 800464a:	6a1b      	ldr	r3, [r3, #32]
 800464c:	f003 0302 	and.w	r3, r3, #2
 8004650:	2b00      	cmp	r3, #0
 8004652:	d0ee      	beq.n	8004632 <HAL_RCC_OscConfig+0x37e>
 8004654:	e014      	b.n	8004680 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004656:	f7fe fe91 	bl	800337c <HAL_GetTick>
 800465a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800465c:	e00a      	b.n	8004674 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800465e:	f7fe fe8d 	bl	800337c <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	f241 3288 	movw	r2, #5000	; 0x1388
 800466c:	4293      	cmp	r3, r2
 800466e:	d901      	bls.n	8004674 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e09b      	b.n	80047ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004674:	4b40      	ldr	r3, [pc, #256]	; (8004778 <HAL_RCC_OscConfig+0x4c4>)
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1ee      	bne.n	800465e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004680:	7dfb      	ldrb	r3, [r7, #23]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d105      	bne.n	8004692 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004686:	4b3c      	ldr	r3, [pc, #240]	; (8004778 <HAL_RCC_OscConfig+0x4c4>)
 8004688:	69db      	ldr	r3, [r3, #28]
 800468a:	4a3b      	ldr	r2, [pc, #236]	; (8004778 <HAL_RCC_OscConfig+0x4c4>)
 800468c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004690:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	69db      	ldr	r3, [r3, #28]
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 8087 	beq.w	80047aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800469c:	4b36      	ldr	r3, [pc, #216]	; (8004778 <HAL_RCC_OscConfig+0x4c4>)
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f003 030c 	and.w	r3, r3, #12
 80046a4:	2b08      	cmp	r3, #8
 80046a6:	d061      	beq.n	800476c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	69db      	ldr	r3, [r3, #28]
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d146      	bne.n	800473e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046b0:	4b33      	ldr	r3, [pc, #204]	; (8004780 <HAL_RCC_OscConfig+0x4cc>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b6:	f7fe fe61 	bl	800337c <HAL_GetTick>
 80046ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046bc:	e008      	b.n	80046d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046be:	f7fe fe5d 	bl	800337c <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d901      	bls.n	80046d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e06d      	b.n	80047ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046d0:	4b29      	ldr	r3, [pc, #164]	; (8004778 <HAL_RCC_OscConfig+0x4c4>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1f0      	bne.n	80046be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046e4:	d108      	bne.n	80046f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80046e6:	4b24      	ldr	r3, [pc, #144]	; (8004778 <HAL_RCC_OscConfig+0x4c4>)
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	4921      	ldr	r1, [pc, #132]	; (8004778 <HAL_RCC_OscConfig+0x4c4>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046f8:	4b1f      	ldr	r3, [pc, #124]	; (8004778 <HAL_RCC_OscConfig+0x4c4>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a19      	ldr	r1, [r3, #32]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004708:	430b      	orrs	r3, r1
 800470a:	491b      	ldr	r1, [pc, #108]	; (8004778 <HAL_RCC_OscConfig+0x4c4>)
 800470c:	4313      	orrs	r3, r2
 800470e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004710:	4b1b      	ldr	r3, [pc, #108]	; (8004780 <HAL_RCC_OscConfig+0x4cc>)
 8004712:	2201      	movs	r2, #1
 8004714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004716:	f7fe fe31 	bl	800337c <HAL_GetTick>
 800471a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800471c:	e008      	b.n	8004730 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800471e:	f7fe fe2d 	bl	800337c <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d901      	bls.n	8004730 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e03d      	b.n	80047ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004730:	4b11      	ldr	r3, [pc, #68]	; (8004778 <HAL_RCC_OscConfig+0x4c4>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0f0      	beq.n	800471e <HAL_RCC_OscConfig+0x46a>
 800473c:	e035      	b.n	80047aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800473e:	4b10      	ldr	r3, [pc, #64]	; (8004780 <HAL_RCC_OscConfig+0x4cc>)
 8004740:	2200      	movs	r2, #0
 8004742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004744:	f7fe fe1a 	bl	800337c <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800474c:	f7fe fe16 	bl	800337c <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e026      	b.n	80047ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800475e:	4b06      	ldr	r3, [pc, #24]	; (8004778 <HAL_RCC_OscConfig+0x4c4>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1f0      	bne.n	800474c <HAL_RCC_OscConfig+0x498>
 800476a:	e01e      	b.n	80047aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	69db      	ldr	r3, [r3, #28]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d107      	bne.n	8004784 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e019      	b.n	80047ac <HAL_RCC_OscConfig+0x4f8>
 8004778:	40021000 	.word	0x40021000
 800477c:	40007000 	.word	0x40007000
 8004780:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004784:	4b0b      	ldr	r3, [pc, #44]	; (80047b4 <HAL_RCC_OscConfig+0x500>)
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	429a      	cmp	r2, r3
 8004796:	d106      	bne.n	80047a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d001      	beq.n	80047aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e000      	b.n	80047ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	40021000 	.word	0x40021000

080047b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e0d0      	b.n	800496e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047cc:	4b6a      	ldr	r3, [pc, #424]	; (8004978 <HAL_RCC_ClockConfig+0x1c0>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0307 	and.w	r3, r3, #7
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d910      	bls.n	80047fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047da:	4b67      	ldr	r3, [pc, #412]	; (8004978 <HAL_RCC_ClockConfig+0x1c0>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f023 0207 	bic.w	r2, r3, #7
 80047e2:	4965      	ldr	r1, [pc, #404]	; (8004978 <HAL_RCC_ClockConfig+0x1c0>)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ea:	4b63      	ldr	r3, [pc, #396]	; (8004978 <HAL_RCC_ClockConfig+0x1c0>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d001      	beq.n	80047fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e0b8      	b.n	800496e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d020      	beq.n	800484a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0304 	and.w	r3, r3, #4
 8004810:	2b00      	cmp	r3, #0
 8004812:	d005      	beq.n	8004820 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004814:	4b59      	ldr	r3, [pc, #356]	; (800497c <HAL_RCC_ClockConfig+0x1c4>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	4a58      	ldr	r2, [pc, #352]	; (800497c <HAL_RCC_ClockConfig+0x1c4>)
 800481a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800481e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0308 	and.w	r3, r3, #8
 8004828:	2b00      	cmp	r3, #0
 800482a:	d005      	beq.n	8004838 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800482c:	4b53      	ldr	r3, [pc, #332]	; (800497c <HAL_RCC_ClockConfig+0x1c4>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	4a52      	ldr	r2, [pc, #328]	; (800497c <HAL_RCC_ClockConfig+0x1c4>)
 8004832:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004836:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004838:	4b50      	ldr	r3, [pc, #320]	; (800497c <HAL_RCC_ClockConfig+0x1c4>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	494d      	ldr	r1, [pc, #308]	; (800497c <HAL_RCC_ClockConfig+0x1c4>)
 8004846:	4313      	orrs	r3, r2
 8004848:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	d040      	beq.n	80048d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d107      	bne.n	800486e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800485e:	4b47      	ldr	r3, [pc, #284]	; (800497c <HAL_RCC_ClockConfig+0x1c4>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d115      	bne.n	8004896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e07f      	b.n	800496e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2b02      	cmp	r3, #2
 8004874:	d107      	bne.n	8004886 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004876:	4b41      	ldr	r3, [pc, #260]	; (800497c <HAL_RCC_ClockConfig+0x1c4>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d109      	bne.n	8004896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e073      	b.n	800496e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004886:	4b3d      	ldr	r3, [pc, #244]	; (800497c <HAL_RCC_ClockConfig+0x1c4>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d101      	bne.n	8004896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e06b      	b.n	800496e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004896:	4b39      	ldr	r3, [pc, #228]	; (800497c <HAL_RCC_ClockConfig+0x1c4>)
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f023 0203 	bic.w	r2, r3, #3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	4936      	ldr	r1, [pc, #216]	; (800497c <HAL_RCC_ClockConfig+0x1c4>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048a8:	f7fe fd68 	bl	800337c <HAL_GetTick>
 80048ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ae:	e00a      	b.n	80048c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048b0:	f7fe fd64 	bl	800337c <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80048be:	4293      	cmp	r3, r2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e053      	b.n	800496e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048c6:	4b2d      	ldr	r3, [pc, #180]	; (800497c <HAL_RCC_ClockConfig+0x1c4>)
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f003 020c 	and.w	r2, r3, #12
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d1eb      	bne.n	80048b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048d8:	4b27      	ldr	r3, [pc, #156]	; (8004978 <HAL_RCC_ClockConfig+0x1c0>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d210      	bcs.n	8004908 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048e6:	4b24      	ldr	r3, [pc, #144]	; (8004978 <HAL_RCC_ClockConfig+0x1c0>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f023 0207 	bic.w	r2, r3, #7
 80048ee:	4922      	ldr	r1, [pc, #136]	; (8004978 <HAL_RCC_ClockConfig+0x1c0>)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048f6:	4b20      	ldr	r3, [pc, #128]	; (8004978 <HAL_RCC_ClockConfig+0x1c0>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0307 	and.w	r3, r3, #7
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	429a      	cmp	r2, r3
 8004902:	d001      	beq.n	8004908 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e032      	b.n	800496e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0304 	and.w	r3, r3, #4
 8004910:	2b00      	cmp	r3, #0
 8004912:	d008      	beq.n	8004926 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004914:	4b19      	ldr	r3, [pc, #100]	; (800497c <HAL_RCC_ClockConfig+0x1c4>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	4916      	ldr	r1, [pc, #88]	; (800497c <HAL_RCC_ClockConfig+0x1c4>)
 8004922:	4313      	orrs	r3, r2
 8004924:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0308 	and.w	r3, r3, #8
 800492e:	2b00      	cmp	r3, #0
 8004930:	d009      	beq.n	8004946 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004932:	4b12      	ldr	r3, [pc, #72]	; (800497c <HAL_RCC_ClockConfig+0x1c4>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	00db      	lsls	r3, r3, #3
 8004940:	490e      	ldr	r1, [pc, #56]	; (800497c <HAL_RCC_ClockConfig+0x1c4>)
 8004942:	4313      	orrs	r3, r2
 8004944:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004946:	f000 f821 	bl	800498c <HAL_RCC_GetSysClockFreq>
 800494a:	4602      	mov	r2, r0
 800494c:	4b0b      	ldr	r3, [pc, #44]	; (800497c <HAL_RCC_ClockConfig+0x1c4>)
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	091b      	lsrs	r3, r3, #4
 8004952:	f003 030f 	and.w	r3, r3, #15
 8004956:	490a      	ldr	r1, [pc, #40]	; (8004980 <HAL_RCC_ClockConfig+0x1c8>)
 8004958:	5ccb      	ldrb	r3, [r1, r3]
 800495a:	fa22 f303 	lsr.w	r3, r2, r3
 800495e:	4a09      	ldr	r2, [pc, #36]	; (8004984 <HAL_RCC_ClockConfig+0x1cc>)
 8004960:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004962:	4b09      	ldr	r3, [pc, #36]	; (8004988 <HAL_RCC_ClockConfig+0x1d0>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4618      	mov	r0, r3
 8004968:	f7fe fcc6 	bl	80032f8 <HAL_InitTick>

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	40022000 	.word	0x40022000
 800497c:	40021000 	.word	0x40021000
 8004980:	08008798 	.word	0x08008798
 8004984:	20000000 	.word	0x20000000
 8004988:	20000014 	.word	0x20000014

0800498c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800498c:	b490      	push	{r4, r7}
 800498e:	b08a      	sub	sp, #40	; 0x28
 8004990:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004992:	4b29      	ldr	r3, [pc, #164]	; (8004a38 <HAL_RCC_GetSysClockFreq+0xac>)
 8004994:	1d3c      	adds	r4, r7, #4
 8004996:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004998:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800499c:	f240 2301 	movw	r3, #513	; 0x201
 80049a0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80049a2:	2300      	movs	r3, #0
 80049a4:	61fb      	str	r3, [r7, #28]
 80049a6:	2300      	movs	r3, #0
 80049a8:	61bb      	str	r3, [r7, #24]
 80049aa:	2300      	movs	r3, #0
 80049ac:	627b      	str	r3, [r7, #36]	; 0x24
 80049ae:	2300      	movs	r3, #0
 80049b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80049b2:	2300      	movs	r3, #0
 80049b4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80049b6:	4b21      	ldr	r3, [pc, #132]	; (8004a3c <HAL_RCC_GetSysClockFreq+0xb0>)
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	f003 030c 	and.w	r3, r3, #12
 80049c2:	2b04      	cmp	r3, #4
 80049c4:	d002      	beq.n	80049cc <HAL_RCC_GetSysClockFreq+0x40>
 80049c6:	2b08      	cmp	r3, #8
 80049c8:	d003      	beq.n	80049d2 <HAL_RCC_GetSysClockFreq+0x46>
 80049ca:	e02b      	b.n	8004a24 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049cc:	4b1c      	ldr	r3, [pc, #112]	; (8004a40 <HAL_RCC_GetSysClockFreq+0xb4>)
 80049ce:	623b      	str	r3, [r7, #32]
      break;
 80049d0:	e02b      	b.n	8004a2a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	0c9b      	lsrs	r3, r3, #18
 80049d6:	f003 030f 	and.w	r3, r3, #15
 80049da:	3328      	adds	r3, #40	; 0x28
 80049dc:	443b      	add	r3, r7
 80049de:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80049e2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d012      	beq.n	8004a14 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80049ee:	4b13      	ldr	r3, [pc, #76]	; (8004a3c <HAL_RCC_GetSysClockFreq+0xb0>)
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	0c5b      	lsrs	r3, r3, #17
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	3328      	adds	r3, #40	; 0x28
 80049fa:	443b      	add	r3, r7
 80049fc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004a00:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	4a0e      	ldr	r2, [pc, #56]	; (8004a40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004a06:	fb03 f202 	mul.w	r2, r3, r2
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a10:	627b      	str	r3, [r7, #36]	; 0x24
 8004a12:	e004      	b.n	8004a1e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	4a0b      	ldr	r2, [pc, #44]	; (8004a44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a18:	fb02 f303 	mul.w	r3, r2, r3
 8004a1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a20:	623b      	str	r3, [r7, #32]
      break;
 8004a22:	e002      	b.n	8004a2a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a24:	4b06      	ldr	r3, [pc, #24]	; (8004a40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004a26:	623b      	str	r3, [r7, #32]
      break;
 8004a28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a2a:	6a3b      	ldr	r3, [r7, #32]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3728      	adds	r7, #40	; 0x28
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bc90      	pop	{r4, r7}
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	08008788 	.word	0x08008788
 8004a3c:	40021000 	.word	0x40021000
 8004a40:	007a1200 	.word	0x007a1200
 8004a44:	003d0900 	.word	0x003d0900

08004a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a4c:	4b02      	ldr	r3, [pc, #8]	; (8004a58 <HAL_RCC_GetHCLKFreq+0x10>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bc80      	pop	{r7}
 8004a56:	4770      	bx	lr
 8004a58:	20000000 	.word	0x20000000

08004a5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a60:	f7ff fff2 	bl	8004a48 <HAL_RCC_GetHCLKFreq>
 8004a64:	4602      	mov	r2, r0
 8004a66:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	0a1b      	lsrs	r3, r3, #8
 8004a6c:	f003 0307 	and.w	r3, r3, #7
 8004a70:	4903      	ldr	r1, [pc, #12]	; (8004a80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a72:	5ccb      	ldrb	r3, [r1, r3]
 8004a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	40021000 	.word	0x40021000
 8004a80:	080087a8 	.word	0x080087a8

08004a84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a8c:	4b0a      	ldr	r3, [pc, #40]	; (8004ab8 <RCC_Delay+0x34>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a0a      	ldr	r2, [pc, #40]	; (8004abc <RCC_Delay+0x38>)
 8004a92:	fba2 2303 	umull	r2, r3, r2, r3
 8004a96:	0a5b      	lsrs	r3, r3, #9
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	fb02 f303 	mul.w	r3, r2, r3
 8004a9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004aa0:	bf00      	nop
  }
  while (Delay --);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	1e5a      	subs	r2, r3, #1
 8004aa6:	60fa      	str	r2, [r7, #12]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1f9      	bne.n	8004aa0 <RCC_Delay+0x1c>
}
 8004aac:	bf00      	nop
 8004aae:	bf00      	nop
 8004ab0:	3714      	adds	r7, #20
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bc80      	pop	{r7}
 8004ab6:	4770      	bx	lr
 8004ab8:	20000000 	.word	0x20000000
 8004abc:	10624dd3 	.word	0x10624dd3

08004ac0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d001      	beq.n	8004ad8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e03a      	b.n	8004b4e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2202      	movs	r2, #2
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68da      	ldr	r2, [r3, #12]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f042 0201 	orr.w	r2, r2, #1
 8004aee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a18      	ldr	r2, [pc, #96]	; (8004b58 <HAL_TIM_Base_Start_IT+0x98>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d00e      	beq.n	8004b18 <HAL_TIM_Base_Start_IT+0x58>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b02:	d009      	beq.n	8004b18 <HAL_TIM_Base_Start_IT+0x58>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a14      	ldr	r2, [pc, #80]	; (8004b5c <HAL_TIM_Base_Start_IT+0x9c>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d004      	beq.n	8004b18 <HAL_TIM_Base_Start_IT+0x58>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a13      	ldr	r2, [pc, #76]	; (8004b60 <HAL_TIM_Base_Start_IT+0xa0>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d111      	bne.n	8004b3c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f003 0307 	and.w	r3, r3, #7
 8004b22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2b06      	cmp	r3, #6
 8004b28:	d010      	beq.n	8004b4c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f042 0201 	orr.w	r2, r2, #1
 8004b38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b3a:	e007      	b.n	8004b4c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f042 0201 	orr.w	r2, r2, #1
 8004b4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3714      	adds	r7, #20
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bc80      	pop	{r7}
 8004b56:	4770      	bx	lr
 8004b58:	40012c00 	.word	0x40012c00
 8004b5c:	40000400 	.word	0x40000400
 8004b60:	40000800 	.word	0x40000800

08004b64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d101      	bne.n	8004b76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e041      	b.n	8004bfa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d106      	bne.n	8004b90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f7fd f848 	bl	8001c20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2202      	movs	r2, #2
 8004b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	3304      	adds	r3, #4
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	4610      	mov	r0, r2
 8004ba4:	f000 fbea 	bl	800537c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
	...

08004c04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d109      	bne.n	8004c28 <HAL_TIM_PWM_Start+0x24>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	bf14      	ite	ne
 8004c20:	2301      	movne	r3, #1
 8004c22:	2300      	moveq	r3, #0
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	e022      	b.n	8004c6e <HAL_TIM_PWM_Start+0x6a>
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	2b04      	cmp	r3, #4
 8004c2c:	d109      	bne.n	8004c42 <HAL_TIM_PWM_Start+0x3e>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	bf14      	ite	ne
 8004c3a:	2301      	movne	r3, #1
 8004c3c:	2300      	moveq	r3, #0
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	e015      	b.n	8004c6e <HAL_TIM_PWM_Start+0x6a>
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	d109      	bne.n	8004c5c <HAL_TIM_PWM_Start+0x58>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	bf14      	ite	ne
 8004c54:	2301      	movne	r3, #1
 8004c56:	2300      	moveq	r3, #0
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	e008      	b.n	8004c6e <HAL_TIM_PWM_Start+0x6a>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	bf14      	ite	ne
 8004c68:	2301      	movne	r3, #1
 8004c6a:	2300      	moveq	r3, #0
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e05e      	b.n	8004d34 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d104      	bne.n	8004c86 <HAL_TIM_PWM_Start+0x82>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2202      	movs	r2, #2
 8004c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c84:	e013      	b.n	8004cae <HAL_TIM_PWM_Start+0xaa>
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	2b04      	cmp	r3, #4
 8004c8a:	d104      	bne.n	8004c96 <HAL_TIM_PWM_Start+0x92>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2202      	movs	r2, #2
 8004c90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c94:	e00b      	b.n	8004cae <HAL_TIM_PWM_Start+0xaa>
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	2b08      	cmp	r3, #8
 8004c9a:	d104      	bne.n	8004ca6 <HAL_TIM_PWM_Start+0xa2>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ca4:	e003      	b.n	8004cae <HAL_TIM_PWM_Start+0xaa>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2202      	movs	r2, #2
 8004caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	6839      	ldr	r1, [r7, #0]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 fd4a 	bl	8005750 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a1e      	ldr	r2, [pc, #120]	; (8004d3c <HAL_TIM_PWM_Start+0x138>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d107      	bne.n	8004cd6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cd4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a18      	ldr	r2, [pc, #96]	; (8004d3c <HAL_TIM_PWM_Start+0x138>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d00e      	beq.n	8004cfe <HAL_TIM_PWM_Start+0xfa>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ce8:	d009      	beq.n	8004cfe <HAL_TIM_PWM_Start+0xfa>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a14      	ldr	r2, [pc, #80]	; (8004d40 <HAL_TIM_PWM_Start+0x13c>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d004      	beq.n	8004cfe <HAL_TIM_PWM_Start+0xfa>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a12      	ldr	r2, [pc, #72]	; (8004d44 <HAL_TIM_PWM_Start+0x140>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d111      	bne.n	8004d22 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f003 0307 	and.w	r3, r3, #7
 8004d08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2b06      	cmp	r3, #6
 8004d0e:	d010      	beq.n	8004d32 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f042 0201 	orr.w	r2, r2, #1
 8004d1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d20:	e007      	b.n	8004d32 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f042 0201 	orr.w	r2, r2, #1
 8004d30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	40012c00 	.word	0x40012c00
 8004d40:	40000400 	.word	0x40000400
 8004d44:	40000800 	.word	0x40000800

08004d48 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d101      	bne.n	8004d5c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e093      	b.n	8004e84 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d106      	bne.n	8004d76 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f7fc feeb 	bl	8001b4c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2202      	movs	r2, #2
 8004d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	6812      	ldr	r2, [r2, #0]
 8004d88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d8c:	f023 0307 	bic.w	r3, r3, #7
 8004d90:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	3304      	adds	r3, #4
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	4610      	mov	r0, r2
 8004d9e:	f000 faed 	bl	800537c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	6a1b      	ldr	r3, [r3, #32]
 8004db8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dca:	f023 0303 	bic.w	r3, r3, #3
 8004dce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	689a      	ldr	r2, [r3, #8]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	021b      	lsls	r3, r3, #8
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004de8:	f023 030c 	bic.w	r3, r3, #12
 8004dec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004df4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004df8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	021b      	lsls	r3, r3, #8
 8004e04:	4313      	orrs	r3, r2
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	011a      	lsls	r2, r3, #4
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	031b      	lsls	r3, r3, #12
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004e26:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	011b      	lsls	r3, r3, #4
 8004e32:	4313      	orrs	r3, r2
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3718      	adds	r7, #24
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e9c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ea4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004eac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004eb4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d110      	bne.n	8004ede <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ebc:	7bfb      	ldrb	r3, [r7, #15]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d102      	bne.n	8004ec8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ec2:	7b7b      	ldrb	r3, [r7, #13]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d001      	beq.n	8004ecc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e069      	b.n	8004fa0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004edc:	e031      	b.n	8004f42 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2b04      	cmp	r3, #4
 8004ee2:	d110      	bne.n	8004f06 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ee4:	7bbb      	ldrb	r3, [r7, #14]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d102      	bne.n	8004ef0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004eea:	7b3b      	ldrb	r3, [r7, #12]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d001      	beq.n	8004ef4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e055      	b.n	8004fa0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2202      	movs	r2, #2
 8004f00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f04:	e01d      	b.n	8004f42 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f06:	7bfb      	ldrb	r3, [r7, #15]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d108      	bne.n	8004f1e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f0c:	7bbb      	ldrb	r3, [r7, #14]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d105      	bne.n	8004f1e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f12:	7b7b      	ldrb	r3, [r7, #13]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d102      	bne.n	8004f1e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f18:	7b3b      	ldrb	r3, [r7, #12]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d001      	beq.n	8004f22 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e03e      	b.n	8004fa0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2202      	movs	r2, #2
 8004f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2202      	movs	r2, #2
 8004f36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d003      	beq.n	8004f50 <HAL_TIM_Encoder_Start+0xc4>
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	d008      	beq.n	8004f60 <HAL_TIM_Encoder_Start+0xd4>
 8004f4e:	e00f      	b.n	8004f70 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2201      	movs	r2, #1
 8004f56:	2100      	movs	r1, #0
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f000 fbf9 	bl	8005750 <TIM_CCxChannelCmd>
      break;
 8004f5e:	e016      	b.n	8004f8e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2201      	movs	r2, #1
 8004f66:	2104      	movs	r1, #4
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f000 fbf1 	bl	8005750 <TIM_CCxChannelCmd>
      break;
 8004f6e:	e00e      	b.n	8004f8e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2201      	movs	r2, #1
 8004f76:	2100      	movs	r1, #0
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f000 fbe9 	bl	8005750 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2201      	movs	r2, #1
 8004f84:	2104      	movs	r1, #4
 8004f86:	4618      	mov	r0, r3
 8004f88:	f000 fbe2 	bl	8005750 <TIM_CCxChannelCmd>
      break;
 8004f8c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f042 0201 	orr.w	r2, r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	f003 0302 	and.w	r3, r3, #2
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d122      	bne.n	8005004 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d11b      	bne.n	8005004 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f06f 0202 	mvn.w	r2, #2
 8004fd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	f003 0303 	and.w	r3, r3, #3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d003      	beq.n	8004ff2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f9ab 	bl	8005346 <HAL_TIM_IC_CaptureCallback>
 8004ff0:	e005      	b.n	8004ffe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f99e 	bl	8005334 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 f9ad 	bl	8005358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	f003 0304 	and.w	r3, r3, #4
 800500e:	2b04      	cmp	r3, #4
 8005010:	d122      	bne.n	8005058 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f003 0304 	and.w	r3, r3, #4
 800501c:	2b04      	cmp	r3, #4
 800501e:	d11b      	bne.n	8005058 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f06f 0204 	mvn.w	r2, #4
 8005028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2202      	movs	r2, #2
 800502e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f981 	bl	8005346 <HAL_TIM_IC_CaptureCallback>
 8005044:	e005      	b.n	8005052 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f974 	bl	8005334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 f983 	bl	8005358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	f003 0308 	and.w	r3, r3, #8
 8005062:	2b08      	cmp	r3, #8
 8005064:	d122      	bne.n	80050ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	f003 0308 	and.w	r3, r3, #8
 8005070:	2b08      	cmp	r3, #8
 8005072:	d11b      	bne.n	80050ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f06f 0208 	mvn.w	r2, #8
 800507c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2204      	movs	r2, #4
 8005082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	69db      	ldr	r3, [r3, #28]
 800508a:	f003 0303 	and.w	r3, r3, #3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f957 	bl	8005346 <HAL_TIM_IC_CaptureCallback>
 8005098:	e005      	b.n	80050a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 f94a 	bl	8005334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 f959 	bl	8005358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	f003 0310 	and.w	r3, r3, #16
 80050b6:	2b10      	cmp	r3, #16
 80050b8:	d122      	bne.n	8005100 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f003 0310 	and.w	r3, r3, #16
 80050c4:	2b10      	cmp	r3, #16
 80050c6:	d11b      	bne.n	8005100 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f06f 0210 	mvn.w	r2, #16
 80050d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2208      	movs	r2, #8
 80050d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d003      	beq.n	80050ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f92d 	bl	8005346 <HAL_TIM_IC_CaptureCallback>
 80050ec:	e005      	b.n	80050fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f920 	bl	8005334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 f92f 	bl	8005358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	2b01      	cmp	r3, #1
 800510c:	d10e      	bne.n	800512c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f003 0301 	and.w	r3, r3, #1
 8005118:	2b01      	cmp	r3, #1
 800511a:	d107      	bne.n	800512c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f06f 0201 	mvn.w	r2, #1
 8005124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7fd fc66 	bl	80029f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005136:	2b80      	cmp	r3, #128	; 0x80
 8005138:	d10e      	bne.n	8005158 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005144:	2b80      	cmp	r3, #128	; 0x80
 8005146:	d107      	bne.n	8005158 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 fb87 	bl	8005866 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005162:	2b40      	cmp	r3, #64	; 0x40
 8005164:	d10e      	bne.n	8005184 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005170:	2b40      	cmp	r3, #64	; 0x40
 8005172:	d107      	bne.n	8005184 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800517c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f8f3 	bl	800536a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	f003 0320 	and.w	r3, r3, #32
 800518e:	2b20      	cmp	r3, #32
 8005190:	d10e      	bne.n	80051b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	f003 0320 	and.w	r3, r3, #32
 800519c:	2b20      	cmp	r3, #32
 800519e:	d107      	bne.n	80051b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f06f 0220 	mvn.w	r2, #32
 80051a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 fb52 	bl	8005854 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051b0:	bf00      	nop
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d101      	bne.n	80051d2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80051ce:	2302      	movs	r3, #2
 80051d0:	e0ac      	b.n	800532c <HAL_TIM_PWM_ConfigChannel+0x174>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2b0c      	cmp	r3, #12
 80051de:	f200 809f 	bhi.w	8005320 <HAL_TIM_PWM_ConfigChannel+0x168>
 80051e2:	a201      	add	r2, pc, #4	; (adr r2, 80051e8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80051e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e8:	0800521d 	.word	0x0800521d
 80051ec:	08005321 	.word	0x08005321
 80051f0:	08005321 	.word	0x08005321
 80051f4:	08005321 	.word	0x08005321
 80051f8:	0800525d 	.word	0x0800525d
 80051fc:	08005321 	.word	0x08005321
 8005200:	08005321 	.word	0x08005321
 8005204:	08005321 	.word	0x08005321
 8005208:	0800529f 	.word	0x0800529f
 800520c:	08005321 	.word	0x08005321
 8005210:	08005321 	.word	0x08005321
 8005214:	08005321 	.word	0x08005321
 8005218:	080052df 	.word	0x080052df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68b9      	ldr	r1, [r7, #8]
 8005222:	4618      	mov	r0, r3
 8005224:	f000 f90c 	bl	8005440 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	699a      	ldr	r2, [r3, #24]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f042 0208 	orr.w	r2, r2, #8
 8005236:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	699a      	ldr	r2, [r3, #24]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f022 0204 	bic.w	r2, r2, #4
 8005246:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6999      	ldr	r1, [r3, #24]
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	691a      	ldr	r2, [r3, #16]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	430a      	orrs	r2, r1
 8005258:	619a      	str	r2, [r3, #24]
      break;
 800525a:	e062      	b.n	8005322 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68b9      	ldr	r1, [r7, #8]
 8005262:	4618      	mov	r0, r3
 8005264:	f000 f952 	bl	800550c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	699a      	ldr	r2, [r3, #24]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005276:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	699a      	ldr	r2, [r3, #24]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005286:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6999      	ldr	r1, [r3, #24]
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	021a      	lsls	r2, r3, #8
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	430a      	orrs	r2, r1
 800529a:	619a      	str	r2, [r3, #24]
      break;
 800529c:	e041      	b.n	8005322 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68b9      	ldr	r1, [r7, #8]
 80052a4:	4618      	mov	r0, r3
 80052a6:	f000 f99b 	bl	80055e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	69da      	ldr	r2, [r3, #28]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f042 0208 	orr.w	r2, r2, #8
 80052b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	69da      	ldr	r2, [r3, #28]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f022 0204 	bic.w	r2, r2, #4
 80052c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	69d9      	ldr	r1, [r3, #28]
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	691a      	ldr	r2, [r3, #16]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	430a      	orrs	r2, r1
 80052da:	61da      	str	r2, [r3, #28]
      break;
 80052dc:	e021      	b.n	8005322 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68b9      	ldr	r1, [r7, #8]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f000 f9e5 	bl	80056b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	69da      	ldr	r2, [r3, #28]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	69da      	ldr	r2, [r3, #28]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005308:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	69d9      	ldr	r1, [r3, #28]
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	021a      	lsls	r2, r3, #8
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	430a      	orrs	r2, r1
 800531c:	61da      	str	r2, [r3, #28]
      break;
 800531e:	e000      	b.n	8005322 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005320:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	bc80      	pop	{r7}
 8005344:	4770      	bx	lr

08005346 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005346:	b480      	push	{r7}
 8005348:	b083      	sub	sp, #12
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800534e:	bf00      	nop
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	bc80      	pop	{r7}
 8005356:	4770      	bx	lr

08005358 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	bc80      	pop	{r7}
 8005368:	4770      	bx	lr

0800536a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800536a:	b480      	push	{r7}
 800536c:	b083      	sub	sp, #12
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005372:	bf00      	nop
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	bc80      	pop	{r7}
 800537a:	4770      	bx	lr

0800537c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a29      	ldr	r2, [pc, #164]	; (8005434 <TIM_Base_SetConfig+0xb8>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d00b      	beq.n	80053ac <TIM_Base_SetConfig+0x30>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800539a:	d007      	beq.n	80053ac <TIM_Base_SetConfig+0x30>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a26      	ldr	r2, [pc, #152]	; (8005438 <TIM_Base_SetConfig+0xbc>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d003      	beq.n	80053ac <TIM_Base_SetConfig+0x30>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a25      	ldr	r2, [pc, #148]	; (800543c <TIM_Base_SetConfig+0xc0>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d108      	bne.n	80053be <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a1c      	ldr	r2, [pc, #112]	; (8005434 <TIM_Base_SetConfig+0xb8>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d00b      	beq.n	80053de <TIM_Base_SetConfig+0x62>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053cc:	d007      	beq.n	80053de <TIM_Base_SetConfig+0x62>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a19      	ldr	r2, [pc, #100]	; (8005438 <TIM_Base_SetConfig+0xbc>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d003      	beq.n	80053de <TIM_Base_SetConfig+0x62>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a18      	ldr	r2, [pc, #96]	; (800543c <TIM_Base_SetConfig+0xc0>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d108      	bne.n	80053f0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	689a      	ldr	r2, [r3, #8]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a07      	ldr	r2, [pc, #28]	; (8005434 <TIM_Base_SetConfig+0xb8>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d103      	bne.n	8005424 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	691a      	ldr	r2, [r3, #16]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	615a      	str	r2, [r3, #20]
}
 800542a:	bf00      	nop
 800542c:	3714      	adds	r7, #20
 800542e:	46bd      	mov	sp, r7
 8005430:	bc80      	pop	{r7}
 8005432:	4770      	bx	lr
 8005434:	40012c00 	.word	0x40012c00
 8005438:	40000400 	.word	0x40000400
 800543c:	40000800 	.word	0x40000800

08005440 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005440:	b480      	push	{r7}
 8005442:	b087      	sub	sp, #28
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	f023 0201 	bic.w	r2, r3, #1
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800546e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f023 0303 	bic.w	r3, r3, #3
 8005476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	4313      	orrs	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	f023 0302 	bic.w	r3, r3, #2
 8005488:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	4313      	orrs	r3, r2
 8005492:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a1c      	ldr	r2, [pc, #112]	; (8005508 <TIM_OC1_SetConfig+0xc8>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d10c      	bne.n	80054b6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	f023 0308 	bic.w	r3, r3, #8
 80054a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	697a      	ldr	r2, [r7, #20]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f023 0304 	bic.w	r3, r3, #4
 80054b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a13      	ldr	r2, [pc, #76]	; (8005508 <TIM_OC1_SetConfig+0xc8>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d111      	bne.n	80054e2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	4313      	orrs	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	621a      	str	r2, [r3, #32]
}
 80054fc:	bf00      	nop
 80054fe:	371c      	adds	r7, #28
 8005500:	46bd      	mov	sp, r7
 8005502:	bc80      	pop	{r7}
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	40012c00 	.word	0x40012c00

0800550c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	f023 0210 	bic.w	r2, r3, #16
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800553a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005542:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	021b      	lsls	r3, r3, #8
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	4313      	orrs	r3, r2
 800554e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	f023 0320 	bic.w	r3, r3, #32
 8005556:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	011b      	lsls	r3, r3, #4
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	4313      	orrs	r3, r2
 8005562:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a1d      	ldr	r2, [pc, #116]	; (80055dc <TIM_OC2_SetConfig+0xd0>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d10d      	bne.n	8005588 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005572:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	011b      	lsls	r3, r3, #4
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	4313      	orrs	r3, r2
 800557e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005586:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a14      	ldr	r2, [pc, #80]	; (80055dc <TIM_OC2_SetConfig+0xd0>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d113      	bne.n	80055b8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005596:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800559e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	695b      	ldr	r3, [r3, #20]
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685a      	ldr	r2, [r3, #4]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	621a      	str	r2, [r3, #32]
}
 80055d2:	bf00      	nop
 80055d4:	371c      	adds	r7, #28
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bc80      	pop	{r7}
 80055da:	4770      	bx	lr
 80055dc:	40012c00 	.word	0x40012c00

080055e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b087      	sub	sp, #28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800560e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f023 0303 	bic.w	r3, r3, #3
 8005616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	4313      	orrs	r3, r2
 8005620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	021b      	lsls	r3, r3, #8
 8005630:	697a      	ldr	r2, [r7, #20]
 8005632:	4313      	orrs	r3, r2
 8005634:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a1d      	ldr	r2, [pc, #116]	; (80056b0 <TIM_OC3_SetConfig+0xd0>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d10d      	bne.n	800565a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005644:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	021b      	lsls	r3, r3, #8
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	4313      	orrs	r3, r2
 8005650:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005658:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a14      	ldr	r2, [pc, #80]	; (80056b0 <TIM_OC3_SetConfig+0xd0>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d113      	bne.n	800568a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005668:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005670:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	011b      	lsls	r3, r3, #4
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	4313      	orrs	r3, r2
 800567c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	011b      	lsls	r3, r3, #4
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	4313      	orrs	r3, r2
 8005688:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	621a      	str	r2, [r3, #32]
}
 80056a4:	bf00      	nop
 80056a6:	371c      	adds	r7, #28
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bc80      	pop	{r7}
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	40012c00 	.word	0x40012c00

080056b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b087      	sub	sp, #28
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	021b      	lsls	r3, r3, #8
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	031b      	lsls	r3, r3, #12
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	4313      	orrs	r3, r2
 800570a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a0f      	ldr	r2, [pc, #60]	; (800574c <TIM_OC4_SetConfig+0x98>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d109      	bne.n	8005728 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800571a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	695b      	ldr	r3, [r3, #20]
 8005720:	019b      	lsls	r3, r3, #6
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	4313      	orrs	r3, r2
 8005726:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	621a      	str	r2, [r3, #32]
}
 8005742:	bf00      	nop
 8005744:	371c      	adds	r7, #28
 8005746:	46bd      	mov	sp, r7
 8005748:	bc80      	pop	{r7}
 800574a:	4770      	bx	lr
 800574c:	40012c00 	.word	0x40012c00

08005750 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005750:	b480      	push	{r7}
 8005752:	b087      	sub	sp, #28
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	f003 031f 	and.w	r3, r3, #31
 8005762:	2201      	movs	r2, #1
 8005764:	fa02 f303 	lsl.w	r3, r2, r3
 8005768:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6a1a      	ldr	r2, [r3, #32]
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	43db      	mvns	r3, r3
 8005772:	401a      	ands	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6a1a      	ldr	r2, [r3, #32]
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	f003 031f 	and.w	r3, r3, #31
 8005782:	6879      	ldr	r1, [r7, #4]
 8005784:	fa01 f303 	lsl.w	r3, r1, r3
 8005788:	431a      	orrs	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	621a      	str	r2, [r3, #32]
}
 800578e:	bf00      	nop
 8005790:	371c      	adds	r7, #28
 8005792:	46bd      	mov	sp, r7
 8005794:	bc80      	pop	{r7}
 8005796:	4770      	bx	lr

08005798 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d101      	bne.n	80057b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057ac:	2302      	movs	r3, #2
 80057ae:	e046      	b.n	800583e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2202      	movs	r2, #2
 80057bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	4313      	orrs	r3, r2
 80057e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a16      	ldr	r2, [pc, #88]	; (8005848 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d00e      	beq.n	8005812 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057fc:	d009      	beq.n	8005812 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a12      	ldr	r2, [pc, #72]	; (800584c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d004      	beq.n	8005812 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a10      	ldr	r2, [pc, #64]	; (8005850 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d10c      	bne.n	800582c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005818:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	68ba      	ldr	r2, [r7, #8]
 8005820:	4313      	orrs	r3, r2
 8005822:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	bc80      	pop	{r7}
 8005846:	4770      	bx	lr
 8005848:	40012c00 	.word	0x40012c00
 800584c:	40000400 	.word	0x40000400
 8005850:	40000800 	.word	0x40000800

08005854 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	bc80      	pop	{r7}
 8005864:	4770      	bx	lr

08005866 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005866:	b480      	push	{r7}
 8005868:	b083      	sub	sp, #12
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800586e:	bf00      	nop
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	bc80      	pop	{r7}
 8005876:	4770      	bx	lr

08005878 <__errno>:
 8005878:	4b01      	ldr	r3, [pc, #4]	; (8005880 <__errno+0x8>)
 800587a:	6818      	ldr	r0, [r3, #0]
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	2000001c 	.word	0x2000001c

08005884 <__libc_init_array>:
 8005884:	b570      	push	{r4, r5, r6, lr}
 8005886:	2600      	movs	r6, #0
 8005888:	4d0c      	ldr	r5, [pc, #48]	; (80058bc <__libc_init_array+0x38>)
 800588a:	4c0d      	ldr	r4, [pc, #52]	; (80058c0 <__libc_init_array+0x3c>)
 800588c:	1b64      	subs	r4, r4, r5
 800588e:	10a4      	asrs	r4, r4, #2
 8005890:	42a6      	cmp	r6, r4
 8005892:	d109      	bne.n	80058a8 <__libc_init_array+0x24>
 8005894:	f002 fefc 	bl	8008690 <_init>
 8005898:	2600      	movs	r6, #0
 800589a:	4d0a      	ldr	r5, [pc, #40]	; (80058c4 <__libc_init_array+0x40>)
 800589c:	4c0a      	ldr	r4, [pc, #40]	; (80058c8 <__libc_init_array+0x44>)
 800589e:	1b64      	subs	r4, r4, r5
 80058a0:	10a4      	asrs	r4, r4, #2
 80058a2:	42a6      	cmp	r6, r4
 80058a4:	d105      	bne.n	80058b2 <__libc_init_array+0x2e>
 80058a6:	bd70      	pop	{r4, r5, r6, pc}
 80058a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80058ac:	4798      	blx	r3
 80058ae:	3601      	adds	r6, #1
 80058b0:	e7ee      	b.n	8005890 <__libc_init_array+0xc>
 80058b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80058b6:	4798      	blx	r3
 80058b8:	3601      	adds	r6, #1
 80058ba:	e7f2      	b.n	80058a2 <__libc_init_array+0x1e>
 80058bc:	08008b8c 	.word	0x08008b8c
 80058c0:	08008b8c 	.word	0x08008b8c
 80058c4:	08008b8c 	.word	0x08008b8c
 80058c8:	08008b90 	.word	0x08008b90

080058cc <memset>:
 80058cc:	4603      	mov	r3, r0
 80058ce:	4402      	add	r2, r0
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d100      	bne.n	80058d6 <memset+0xa>
 80058d4:	4770      	bx	lr
 80058d6:	f803 1b01 	strb.w	r1, [r3], #1
 80058da:	e7f9      	b.n	80058d0 <memset+0x4>

080058dc <__cvt>:
 80058dc:	2b00      	cmp	r3, #0
 80058de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058e2:	461f      	mov	r7, r3
 80058e4:	bfbb      	ittet	lt
 80058e6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80058ea:	461f      	movlt	r7, r3
 80058ec:	2300      	movge	r3, #0
 80058ee:	232d      	movlt	r3, #45	; 0x2d
 80058f0:	b088      	sub	sp, #32
 80058f2:	4614      	mov	r4, r2
 80058f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80058f6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80058f8:	7013      	strb	r3, [r2, #0]
 80058fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80058fc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005900:	f023 0820 	bic.w	r8, r3, #32
 8005904:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005908:	d005      	beq.n	8005916 <__cvt+0x3a>
 800590a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800590e:	d100      	bne.n	8005912 <__cvt+0x36>
 8005910:	3501      	adds	r5, #1
 8005912:	2302      	movs	r3, #2
 8005914:	e000      	b.n	8005918 <__cvt+0x3c>
 8005916:	2303      	movs	r3, #3
 8005918:	aa07      	add	r2, sp, #28
 800591a:	9204      	str	r2, [sp, #16]
 800591c:	aa06      	add	r2, sp, #24
 800591e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005922:	e9cd 3500 	strd	r3, r5, [sp]
 8005926:	4622      	mov	r2, r4
 8005928:	463b      	mov	r3, r7
 800592a:	f000 fce5 	bl	80062f8 <_dtoa_r>
 800592e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005932:	4606      	mov	r6, r0
 8005934:	d102      	bne.n	800593c <__cvt+0x60>
 8005936:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005938:	07db      	lsls	r3, r3, #31
 800593a:	d522      	bpl.n	8005982 <__cvt+0xa6>
 800593c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005940:	eb06 0905 	add.w	r9, r6, r5
 8005944:	d110      	bne.n	8005968 <__cvt+0x8c>
 8005946:	7833      	ldrb	r3, [r6, #0]
 8005948:	2b30      	cmp	r3, #48	; 0x30
 800594a:	d10a      	bne.n	8005962 <__cvt+0x86>
 800594c:	2200      	movs	r2, #0
 800594e:	2300      	movs	r3, #0
 8005950:	4620      	mov	r0, r4
 8005952:	4639      	mov	r1, r7
 8005954:	f7fb f8dc 	bl	8000b10 <__aeabi_dcmpeq>
 8005958:	b918      	cbnz	r0, 8005962 <__cvt+0x86>
 800595a:	f1c5 0501 	rsb	r5, r5, #1
 800595e:	f8ca 5000 	str.w	r5, [sl]
 8005962:	f8da 3000 	ldr.w	r3, [sl]
 8005966:	4499      	add	r9, r3
 8005968:	2200      	movs	r2, #0
 800596a:	2300      	movs	r3, #0
 800596c:	4620      	mov	r0, r4
 800596e:	4639      	mov	r1, r7
 8005970:	f7fb f8ce 	bl	8000b10 <__aeabi_dcmpeq>
 8005974:	b108      	cbz	r0, 800597a <__cvt+0x9e>
 8005976:	f8cd 901c 	str.w	r9, [sp, #28]
 800597a:	2230      	movs	r2, #48	; 0x30
 800597c:	9b07      	ldr	r3, [sp, #28]
 800597e:	454b      	cmp	r3, r9
 8005980:	d307      	bcc.n	8005992 <__cvt+0xb6>
 8005982:	4630      	mov	r0, r6
 8005984:	9b07      	ldr	r3, [sp, #28]
 8005986:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005988:	1b9b      	subs	r3, r3, r6
 800598a:	6013      	str	r3, [r2, #0]
 800598c:	b008      	add	sp, #32
 800598e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005992:	1c59      	adds	r1, r3, #1
 8005994:	9107      	str	r1, [sp, #28]
 8005996:	701a      	strb	r2, [r3, #0]
 8005998:	e7f0      	b.n	800597c <__cvt+0xa0>

0800599a <__exponent>:
 800599a:	4603      	mov	r3, r0
 800599c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800599e:	2900      	cmp	r1, #0
 80059a0:	f803 2b02 	strb.w	r2, [r3], #2
 80059a4:	bfb6      	itet	lt
 80059a6:	222d      	movlt	r2, #45	; 0x2d
 80059a8:	222b      	movge	r2, #43	; 0x2b
 80059aa:	4249      	neglt	r1, r1
 80059ac:	2909      	cmp	r1, #9
 80059ae:	7042      	strb	r2, [r0, #1]
 80059b0:	dd2b      	ble.n	8005a0a <__exponent+0x70>
 80059b2:	f10d 0407 	add.w	r4, sp, #7
 80059b6:	46a4      	mov	ip, r4
 80059b8:	270a      	movs	r7, #10
 80059ba:	fb91 f6f7 	sdiv	r6, r1, r7
 80059be:	460a      	mov	r2, r1
 80059c0:	46a6      	mov	lr, r4
 80059c2:	fb07 1516 	mls	r5, r7, r6, r1
 80059c6:	2a63      	cmp	r2, #99	; 0x63
 80059c8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80059cc:	4631      	mov	r1, r6
 80059ce:	f104 34ff 	add.w	r4, r4, #4294967295
 80059d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80059d6:	dcf0      	bgt.n	80059ba <__exponent+0x20>
 80059d8:	3130      	adds	r1, #48	; 0x30
 80059da:	f1ae 0502 	sub.w	r5, lr, #2
 80059de:	f804 1c01 	strb.w	r1, [r4, #-1]
 80059e2:	4629      	mov	r1, r5
 80059e4:	1c44      	adds	r4, r0, #1
 80059e6:	4561      	cmp	r1, ip
 80059e8:	d30a      	bcc.n	8005a00 <__exponent+0x66>
 80059ea:	f10d 0209 	add.w	r2, sp, #9
 80059ee:	eba2 020e 	sub.w	r2, r2, lr
 80059f2:	4565      	cmp	r5, ip
 80059f4:	bf88      	it	hi
 80059f6:	2200      	movhi	r2, #0
 80059f8:	4413      	add	r3, r2
 80059fa:	1a18      	subs	r0, r3, r0
 80059fc:	b003      	add	sp, #12
 80059fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a00:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a04:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005a08:	e7ed      	b.n	80059e6 <__exponent+0x4c>
 8005a0a:	2330      	movs	r3, #48	; 0x30
 8005a0c:	3130      	adds	r1, #48	; 0x30
 8005a0e:	7083      	strb	r3, [r0, #2]
 8005a10:	70c1      	strb	r1, [r0, #3]
 8005a12:	1d03      	adds	r3, r0, #4
 8005a14:	e7f1      	b.n	80059fa <__exponent+0x60>
	...

08005a18 <_printf_float>:
 8005a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a1c:	b091      	sub	sp, #68	; 0x44
 8005a1e:	460c      	mov	r4, r1
 8005a20:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005a24:	4616      	mov	r6, r2
 8005a26:	461f      	mov	r7, r3
 8005a28:	4605      	mov	r5, r0
 8005a2a:	f001 fa53 	bl	8006ed4 <_localeconv_r>
 8005a2e:	6803      	ldr	r3, [r0, #0]
 8005a30:	4618      	mov	r0, r3
 8005a32:	9309      	str	r3, [sp, #36]	; 0x24
 8005a34:	f7fa fb8c 	bl	8000150 <strlen>
 8005a38:	2300      	movs	r3, #0
 8005a3a:	930e      	str	r3, [sp, #56]	; 0x38
 8005a3c:	f8d8 3000 	ldr.w	r3, [r8]
 8005a40:	900a      	str	r0, [sp, #40]	; 0x28
 8005a42:	3307      	adds	r3, #7
 8005a44:	f023 0307 	bic.w	r3, r3, #7
 8005a48:	f103 0208 	add.w	r2, r3, #8
 8005a4c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005a50:	f8d4 b000 	ldr.w	fp, [r4]
 8005a54:	f8c8 2000 	str.w	r2, [r8]
 8005a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005a60:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005a64:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005a68:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a6e:	4640      	mov	r0, r8
 8005a70:	4b9c      	ldr	r3, [pc, #624]	; (8005ce4 <_printf_float+0x2cc>)
 8005a72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a74:	f7fb f87e 	bl	8000b74 <__aeabi_dcmpun>
 8005a78:	bb70      	cbnz	r0, 8005ad8 <_printf_float+0xc0>
 8005a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a7e:	4640      	mov	r0, r8
 8005a80:	4b98      	ldr	r3, [pc, #608]	; (8005ce4 <_printf_float+0x2cc>)
 8005a82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a84:	f7fb f858 	bl	8000b38 <__aeabi_dcmple>
 8005a88:	bb30      	cbnz	r0, 8005ad8 <_printf_float+0xc0>
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	4640      	mov	r0, r8
 8005a90:	4651      	mov	r1, sl
 8005a92:	f7fb f847 	bl	8000b24 <__aeabi_dcmplt>
 8005a96:	b110      	cbz	r0, 8005a9e <_printf_float+0x86>
 8005a98:	232d      	movs	r3, #45	; 0x2d
 8005a9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a9e:	4b92      	ldr	r3, [pc, #584]	; (8005ce8 <_printf_float+0x2d0>)
 8005aa0:	4892      	ldr	r0, [pc, #584]	; (8005cec <_printf_float+0x2d4>)
 8005aa2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005aa6:	bf94      	ite	ls
 8005aa8:	4698      	movls	r8, r3
 8005aaa:	4680      	movhi	r8, r0
 8005aac:	2303      	movs	r3, #3
 8005aae:	f04f 0a00 	mov.w	sl, #0
 8005ab2:	6123      	str	r3, [r4, #16]
 8005ab4:	f02b 0304 	bic.w	r3, fp, #4
 8005ab8:	6023      	str	r3, [r4, #0]
 8005aba:	4633      	mov	r3, r6
 8005abc:	4621      	mov	r1, r4
 8005abe:	4628      	mov	r0, r5
 8005ac0:	9700      	str	r7, [sp, #0]
 8005ac2:	aa0f      	add	r2, sp, #60	; 0x3c
 8005ac4:	f000 f9d4 	bl	8005e70 <_printf_common>
 8005ac8:	3001      	adds	r0, #1
 8005aca:	f040 8090 	bne.w	8005bee <_printf_float+0x1d6>
 8005ace:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad2:	b011      	add	sp, #68	; 0x44
 8005ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ad8:	4642      	mov	r2, r8
 8005ada:	4653      	mov	r3, sl
 8005adc:	4640      	mov	r0, r8
 8005ade:	4651      	mov	r1, sl
 8005ae0:	f7fb f848 	bl	8000b74 <__aeabi_dcmpun>
 8005ae4:	b148      	cbz	r0, 8005afa <_printf_float+0xe2>
 8005ae6:	f1ba 0f00 	cmp.w	sl, #0
 8005aea:	bfb8      	it	lt
 8005aec:	232d      	movlt	r3, #45	; 0x2d
 8005aee:	4880      	ldr	r0, [pc, #512]	; (8005cf0 <_printf_float+0x2d8>)
 8005af0:	bfb8      	it	lt
 8005af2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005af6:	4b7f      	ldr	r3, [pc, #508]	; (8005cf4 <_printf_float+0x2dc>)
 8005af8:	e7d3      	b.n	8005aa2 <_printf_float+0x8a>
 8005afa:	6863      	ldr	r3, [r4, #4]
 8005afc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005b00:	1c5a      	adds	r2, r3, #1
 8005b02:	d142      	bne.n	8005b8a <_printf_float+0x172>
 8005b04:	2306      	movs	r3, #6
 8005b06:	6063      	str	r3, [r4, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	9206      	str	r2, [sp, #24]
 8005b0c:	aa0e      	add	r2, sp, #56	; 0x38
 8005b0e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005b12:	aa0d      	add	r2, sp, #52	; 0x34
 8005b14:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005b18:	9203      	str	r2, [sp, #12]
 8005b1a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005b1e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005b22:	6023      	str	r3, [r4, #0]
 8005b24:	6863      	ldr	r3, [r4, #4]
 8005b26:	4642      	mov	r2, r8
 8005b28:	9300      	str	r3, [sp, #0]
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	4653      	mov	r3, sl
 8005b2e:	910b      	str	r1, [sp, #44]	; 0x2c
 8005b30:	f7ff fed4 	bl	80058dc <__cvt>
 8005b34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b36:	4680      	mov	r8, r0
 8005b38:	2947      	cmp	r1, #71	; 0x47
 8005b3a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005b3c:	d108      	bne.n	8005b50 <_printf_float+0x138>
 8005b3e:	1cc8      	adds	r0, r1, #3
 8005b40:	db02      	blt.n	8005b48 <_printf_float+0x130>
 8005b42:	6863      	ldr	r3, [r4, #4]
 8005b44:	4299      	cmp	r1, r3
 8005b46:	dd40      	ble.n	8005bca <_printf_float+0x1b2>
 8005b48:	f1a9 0902 	sub.w	r9, r9, #2
 8005b4c:	fa5f f989 	uxtb.w	r9, r9
 8005b50:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005b54:	d81f      	bhi.n	8005b96 <_printf_float+0x17e>
 8005b56:	464a      	mov	r2, r9
 8005b58:	3901      	subs	r1, #1
 8005b5a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005b5e:	910d      	str	r1, [sp, #52]	; 0x34
 8005b60:	f7ff ff1b 	bl	800599a <__exponent>
 8005b64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b66:	4682      	mov	sl, r0
 8005b68:	1813      	adds	r3, r2, r0
 8005b6a:	2a01      	cmp	r2, #1
 8005b6c:	6123      	str	r3, [r4, #16]
 8005b6e:	dc02      	bgt.n	8005b76 <_printf_float+0x15e>
 8005b70:	6822      	ldr	r2, [r4, #0]
 8005b72:	07d2      	lsls	r2, r2, #31
 8005b74:	d501      	bpl.n	8005b7a <_printf_float+0x162>
 8005b76:	3301      	adds	r3, #1
 8005b78:	6123      	str	r3, [r4, #16]
 8005b7a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d09b      	beq.n	8005aba <_printf_float+0xa2>
 8005b82:	232d      	movs	r3, #45	; 0x2d
 8005b84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b88:	e797      	b.n	8005aba <_printf_float+0xa2>
 8005b8a:	2947      	cmp	r1, #71	; 0x47
 8005b8c:	d1bc      	bne.n	8005b08 <_printf_float+0xf0>
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1ba      	bne.n	8005b08 <_printf_float+0xf0>
 8005b92:	2301      	movs	r3, #1
 8005b94:	e7b7      	b.n	8005b06 <_printf_float+0xee>
 8005b96:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005b9a:	d118      	bne.n	8005bce <_printf_float+0x1b6>
 8005b9c:	2900      	cmp	r1, #0
 8005b9e:	6863      	ldr	r3, [r4, #4]
 8005ba0:	dd0b      	ble.n	8005bba <_printf_float+0x1a2>
 8005ba2:	6121      	str	r1, [r4, #16]
 8005ba4:	b913      	cbnz	r3, 8005bac <_printf_float+0x194>
 8005ba6:	6822      	ldr	r2, [r4, #0]
 8005ba8:	07d0      	lsls	r0, r2, #31
 8005baa:	d502      	bpl.n	8005bb2 <_printf_float+0x19a>
 8005bac:	3301      	adds	r3, #1
 8005bae:	440b      	add	r3, r1
 8005bb0:	6123      	str	r3, [r4, #16]
 8005bb2:	f04f 0a00 	mov.w	sl, #0
 8005bb6:	65a1      	str	r1, [r4, #88]	; 0x58
 8005bb8:	e7df      	b.n	8005b7a <_printf_float+0x162>
 8005bba:	b913      	cbnz	r3, 8005bc2 <_printf_float+0x1aa>
 8005bbc:	6822      	ldr	r2, [r4, #0]
 8005bbe:	07d2      	lsls	r2, r2, #31
 8005bc0:	d501      	bpl.n	8005bc6 <_printf_float+0x1ae>
 8005bc2:	3302      	adds	r3, #2
 8005bc4:	e7f4      	b.n	8005bb0 <_printf_float+0x198>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e7f2      	b.n	8005bb0 <_printf_float+0x198>
 8005bca:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005bce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bd0:	4299      	cmp	r1, r3
 8005bd2:	db05      	blt.n	8005be0 <_printf_float+0x1c8>
 8005bd4:	6823      	ldr	r3, [r4, #0]
 8005bd6:	6121      	str	r1, [r4, #16]
 8005bd8:	07d8      	lsls	r0, r3, #31
 8005bda:	d5ea      	bpl.n	8005bb2 <_printf_float+0x19a>
 8005bdc:	1c4b      	adds	r3, r1, #1
 8005bde:	e7e7      	b.n	8005bb0 <_printf_float+0x198>
 8005be0:	2900      	cmp	r1, #0
 8005be2:	bfcc      	ite	gt
 8005be4:	2201      	movgt	r2, #1
 8005be6:	f1c1 0202 	rsble	r2, r1, #2
 8005bea:	4413      	add	r3, r2
 8005bec:	e7e0      	b.n	8005bb0 <_printf_float+0x198>
 8005bee:	6823      	ldr	r3, [r4, #0]
 8005bf0:	055a      	lsls	r2, r3, #21
 8005bf2:	d407      	bmi.n	8005c04 <_printf_float+0x1ec>
 8005bf4:	6923      	ldr	r3, [r4, #16]
 8005bf6:	4642      	mov	r2, r8
 8005bf8:	4631      	mov	r1, r6
 8005bfa:	4628      	mov	r0, r5
 8005bfc:	47b8      	blx	r7
 8005bfe:	3001      	adds	r0, #1
 8005c00:	d12b      	bne.n	8005c5a <_printf_float+0x242>
 8005c02:	e764      	b.n	8005ace <_printf_float+0xb6>
 8005c04:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005c08:	f240 80dd 	bls.w	8005dc6 <_printf_float+0x3ae>
 8005c0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c10:	2200      	movs	r2, #0
 8005c12:	2300      	movs	r3, #0
 8005c14:	f7fa ff7c 	bl	8000b10 <__aeabi_dcmpeq>
 8005c18:	2800      	cmp	r0, #0
 8005c1a:	d033      	beq.n	8005c84 <_printf_float+0x26c>
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	4631      	mov	r1, r6
 8005c20:	4628      	mov	r0, r5
 8005c22:	4a35      	ldr	r2, [pc, #212]	; (8005cf8 <_printf_float+0x2e0>)
 8005c24:	47b8      	blx	r7
 8005c26:	3001      	adds	r0, #1
 8005c28:	f43f af51 	beq.w	8005ace <_printf_float+0xb6>
 8005c2c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005c30:	429a      	cmp	r2, r3
 8005c32:	db02      	blt.n	8005c3a <_printf_float+0x222>
 8005c34:	6823      	ldr	r3, [r4, #0]
 8005c36:	07d8      	lsls	r0, r3, #31
 8005c38:	d50f      	bpl.n	8005c5a <_printf_float+0x242>
 8005c3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c3e:	4631      	mov	r1, r6
 8005c40:	4628      	mov	r0, r5
 8005c42:	47b8      	blx	r7
 8005c44:	3001      	adds	r0, #1
 8005c46:	f43f af42 	beq.w	8005ace <_printf_float+0xb6>
 8005c4a:	f04f 0800 	mov.w	r8, #0
 8005c4e:	f104 091a 	add.w	r9, r4, #26
 8005c52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c54:	3b01      	subs	r3, #1
 8005c56:	4543      	cmp	r3, r8
 8005c58:	dc09      	bgt.n	8005c6e <_printf_float+0x256>
 8005c5a:	6823      	ldr	r3, [r4, #0]
 8005c5c:	079b      	lsls	r3, r3, #30
 8005c5e:	f100 8102 	bmi.w	8005e66 <_printf_float+0x44e>
 8005c62:	68e0      	ldr	r0, [r4, #12]
 8005c64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c66:	4298      	cmp	r0, r3
 8005c68:	bfb8      	it	lt
 8005c6a:	4618      	movlt	r0, r3
 8005c6c:	e731      	b.n	8005ad2 <_printf_float+0xba>
 8005c6e:	2301      	movs	r3, #1
 8005c70:	464a      	mov	r2, r9
 8005c72:	4631      	mov	r1, r6
 8005c74:	4628      	mov	r0, r5
 8005c76:	47b8      	blx	r7
 8005c78:	3001      	adds	r0, #1
 8005c7a:	f43f af28 	beq.w	8005ace <_printf_float+0xb6>
 8005c7e:	f108 0801 	add.w	r8, r8, #1
 8005c82:	e7e6      	b.n	8005c52 <_printf_float+0x23a>
 8005c84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	dc38      	bgt.n	8005cfc <_printf_float+0x2e4>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	4631      	mov	r1, r6
 8005c8e:	4628      	mov	r0, r5
 8005c90:	4a19      	ldr	r2, [pc, #100]	; (8005cf8 <_printf_float+0x2e0>)
 8005c92:	47b8      	blx	r7
 8005c94:	3001      	adds	r0, #1
 8005c96:	f43f af1a 	beq.w	8005ace <_printf_float+0xb6>
 8005c9a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	d102      	bne.n	8005ca8 <_printf_float+0x290>
 8005ca2:	6823      	ldr	r3, [r4, #0]
 8005ca4:	07d9      	lsls	r1, r3, #31
 8005ca6:	d5d8      	bpl.n	8005c5a <_printf_float+0x242>
 8005ca8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cac:	4631      	mov	r1, r6
 8005cae:	4628      	mov	r0, r5
 8005cb0:	47b8      	blx	r7
 8005cb2:	3001      	adds	r0, #1
 8005cb4:	f43f af0b 	beq.w	8005ace <_printf_float+0xb6>
 8005cb8:	f04f 0900 	mov.w	r9, #0
 8005cbc:	f104 0a1a 	add.w	sl, r4, #26
 8005cc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cc2:	425b      	negs	r3, r3
 8005cc4:	454b      	cmp	r3, r9
 8005cc6:	dc01      	bgt.n	8005ccc <_printf_float+0x2b4>
 8005cc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cca:	e794      	b.n	8005bf6 <_printf_float+0x1de>
 8005ccc:	2301      	movs	r3, #1
 8005cce:	4652      	mov	r2, sl
 8005cd0:	4631      	mov	r1, r6
 8005cd2:	4628      	mov	r0, r5
 8005cd4:	47b8      	blx	r7
 8005cd6:	3001      	adds	r0, #1
 8005cd8:	f43f aef9 	beq.w	8005ace <_printf_float+0xb6>
 8005cdc:	f109 0901 	add.w	r9, r9, #1
 8005ce0:	e7ee      	b.n	8005cc0 <_printf_float+0x2a8>
 8005ce2:	bf00      	nop
 8005ce4:	7fefffff 	.word	0x7fefffff
 8005ce8:	080087b4 	.word	0x080087b4
 8005cec:	080087b8 	.word	0x080087b8
 8005cf0:	080087c0 	.word	0x080087c0
 8005cf4:	080087bc 	.word	0x080087bc
 8005cf8:	080087c4 	.word	0x080087c4
 8005cfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005cfe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d00:	429a      	cmp	r2, r3
 8005d02:	bfa8      	it	ge
 8005d04:	461a      	movge	r2, r3
 8005d06:	2a00      	cmp	r2, #0
 8005d08:	4691      	mov	r9, r2
 8005d0a:	dc37      	bgt.n	8005d7c <_printf_float+0x364>
 8005d0c:	f04f 0b00 	mov.w	fp, #0
 8005d10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d14:	f104 021a 	add.w	r2, r4, #26
 8005d18:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005d1c:	ebaa 0309 	sub.w	r3, sl, r9
 8005d20:	455b      	cmp	r3, fp
 8005d22:	dc33      	bgt.n	8005d8c <_printf_float+0x374>
 8005d24:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	db3b      	blt.n	8005da4 <_printf_float+0x38c>
 8005d2c:	6823      	ldr	r3, [r4, #0]
 8005d2e:	07da      	lsls	r2, r3, #31
 8005d30:	d438      	bmi.n	8005da4 <_printf_float+0x38c>
 8005d32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d34:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005d36:	eba3 020a 	sub.w	r2, r3, sl
 8005d3a:	eba3 0901 	sub.w	r9, r3, r1
 8005d3e:	4591      	cmp	r9, r2
 8005d40:	bfa8      	it	ge
 8005d42:	4691      	movge	r9, r2
 8005d44:	f1b9 0f00 	cmp.w	r9, #0
 8005d48:	dc34      	bgt.n	8005db4 <_printf_float+0x39c>
 8005d4a:	f04f 0800 	mov.w	r8, #0
 8005d4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d52:	f104 0a1a 	add.w	sl, r4, #26
 8005d56:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005d5a:	1a9b      	subs	r3, r3, r2
 8005d5c:	eba3 0309 	sub.w	r3, r3, r9
 8005d60:	4543      	cmp	r3, r8
 8005d62:	f77f af7a 	ble.w	8005c5a <_printf_float+0x242>
 8005d66:	2301      	movs	r3, #1
 8005d68:	4652      	mov	r2, sl
 8005d6a:	4631      	mov	r1, r6
 8005d6c:	4628      	mov	r0, r5
 8005d6e:	47b8      	blx	r7
 8005d70:	3001      	adds	r0, #1
 8005d72:	f43f aeac 	beq.w	8005ace <_printf_float+0xb6>
 8005d76:	f108 0801 	add.w	r8, r8, #1
 8005d7a:	e7ec      	b.n	8005d56 <_printf_float+0x33e>
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	4631      	mov	r1, r6
 8005d80:	4642      	mov	r2, r8
 8005d82:	4628      	mov	r0, r5
 8005d84:	47b8      	blx	r7
 8005d86:	3001      	adds	r0, #1
 8005d88:	d1c0      	bne.n	8005d0c <_printf_float+0x2f4>
 8005d8a:	e6a0      	b.n	8005ace <_printf_float+0xb6>
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	4631      	mov	r1, r6
 8005d90:	4628      	mov	r0, r5
 8005d92:	920b      	str	r2, [sp, #44]	; 0x2c
 8005d94:	47b8      	blx	r7
 8005d96:	3001      	adds	r0, #1
 8005d98:	f43f ae99 	beq.w	8005ace <_printf_float+0xb6>
 8005d9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d9e:	f10b 0b01 	add.w	fp, fp, #1
 8005da2:	e7b9      	b.n	8005d18 <_printf_float+0x300>
 8005da4:	4631      	mov	r1, r6
 8005da6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005daa:	4628      	mov	r0, r5
 8005dac:	47b8      	blx	r7
 8005dae:	3001      	adds	r0, #1
 8005db0:	d1bf      	bne.n	8005d32 <_printf_float+0x31a>
 8005db2:	e68c      	b.n	8005ace <_printf_float+0xb6>
 8005db4:	464b      	mov	r3, r9
 8005db6:	4631      	mov	r1, r6
 8005db8:	4628      	mov	r0, r5
 8005dba:	eb08 020a 	add.w	r2, r8, sl
 8005dbe:	47b8      	blx	r7
 8005dc0:	3001      	adds	r0, #1
 8005dc2:	d1c2      	bne.n	8005d4a <_printf_float+0x332>
 8005dc4:	e683      	b.n	8005ace <_printf_float+0xb6>
 8005dc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005dc8:	2a01      	cmp	r2, #1
 8005dca:	dc01      	bgt.n	8005dd0 <_printf_float+0x3b8>
 8005dcc:	07db      	lsls	r3, r3, #31
 8005dce:	d537      	bpl.n	8005e40 <_printf_float+0x428>
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	4642      	mov	r2, r8
 8005dd4:	4631      	mov	r1, r6
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	47b8      	blx	r7
 8005dda:	3001      	adds	r0, #1
 8005ddc:	f43f ae77 	beq.w	8005ace <_printf_float+0xb6>
 8005de0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005de4:	4631      	mov	r1, r6
 8005de6:	4628      	mov	r0, r5
 8005de8:	47b8      	blx	r7
 8005dea:	3001      	adds	r0, #1
 8005dec:	f43f ae6f 	beq.w	8005ace <_printf_float+0xb6>
 8005df0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005df4:	2200      	movs	r2, #0
 8005df6:	2300      	movs	r3, #0
 8005df8:	f7fa fe8a 	bl	8000b10 <__aeabi_dcmpeq>
 8005dfc:	b9d8      	cbnz	r0, 8005e36 <_printf_float+0x41e>
 8005dfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e00:	f108 0201 	add.w	r2, r8, #1
 8005e04:	3b01      	subs	r3, #1
 8005e06:	4631      	mov	r1, r6
 8005e08:	4628      	mov	r0, r5
 8005e0a:	47b8      	blx	r7
 8005e0c:	3001      	adds	r0, #1
 8005e0e:	d10e      	bne.n	8005e2e <_printf_float+0x416>
 8005e10:	e65d      	b.n	8005ace <_printf_float+0xb6>
 8005e12:	2301      	movs	r3, #1
 8005e14:	464a      	mov	r2, r9
 8005e16:	4631      	mov	r1, r6
 8005e18:	4628      	mov	r0, r5
 8005e1a:	47b8      	blx	r7
 8005e1c:	3001      	adds	r0, #1
 8005e1e:	f43f ae56 	beq.w	8005ace <_printf_float+0xb6>
 8005e22:	f108 0801 	add.w	r8, r8, #1
 8005e26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	4543      	cmp	r3, r8
 8005e2c:	dcf1      	bgt.n	8005e12 <_printf_float+0x3fa>
 8005e2e:	4653      	mov	r3, sl
 8005e30:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005e34:	e6e0      	b.n	8005bf8 <_printf_float+0x1e0>
 8005e36:	f04f 0800 	mov.w	r8, #0
 8005e3a:	f104 091a 	add.w	r9, r4, #26
 8005e3e:	e7f2      	b.n	8005e26 <_printf_float+0x40e>
 8005e40:	2301      	movs	r3, #1
 8005e42:	4642      	mov	r2, r8
 8005e44:	e7df      	b.n	8005e06 <_printf_float+0x3ee>
 8005e46:	2301      	movs	r3, #1
 8005e48:	464a      	mov	r2, r9
 8005e4a:	4631      	mov	r1, r6
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	47b8      	blx	r7
 8005e50:	3001      	adds	r0, #1
 8005e52:	f43f ae3c 	beq.w	8005ace <_printf_float+0xb6>
 8005e56:	f108 0801 	add.w	r8, r8, #1
 8005e5a:	68e3      	ldr	r3, [r4, #12]
 8005e5c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005e5e:	1a5b      	subs	r3, r3, r1
 8005e60:	4543      	cmp	r3, r8
 8005e62:	dcf0      	bgt.n	8005e46 <_printf_float+0x42e>
 8005e64:	e6fd      	b.n	8005c62 <_printf_float+0x24a>
 8005e66:	f04f 0800 	mov.w	r8, #0
 8005e6a:	f104 0919 	add.w	r9, r4, #25
 8005e6e:	e7f4      	b.n	8005e5a <_printf_float+0x442>

08005e70 <_printf_common>:
 8005e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e74:	4616      	mov	r6, r2
 8005e76:	4699      	mov	r9, r3
 8005e78:	688a      	ldr	r2, [r1, #8]
 8005e7a:	690b      	ldr	r3, [r1, #16]
 8005e7c:	4607      	mov	r7, r0
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	bfb8      	it	lt
 8005e82:	4613      	movlt	r3, r2
 8005e84:	6033      	str	r3, [r6, #0]
 8005e86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e8a:	460c      	mov	r4, r1
 8005e8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e90:	b10a      	cbz	r2, 8005e96 <_printf_common+0x26>
 8005e92:	3301      	adds	r3, #1
 8005e94:	6033      	str	r3, [r6, #0]
 8005e96:	6823      	ldr	r3, [r4, #0]
 8005e98:	0699      	lsls	r1, r3, #26
 8005e9a:	bf42      	ittt	mi
 8005e9c:	6833      	ldrmi	r3, [r6, #0]
 8005e9e:	3302      	addmi	r3, #2
 8005ea0:	6033      	strmi	r3, [r6, #0]
 8005ea2:	6825      	ldr	r5, [r4, #0]
 8005ea4:	f015 0506 	ands.w	r5, r5, #6
 8005ea8:	d106      	bne.n	8005eb8 <_printf_common+0x48>
 8005eaa:	f104 0a19 	add.w	sl, r4, #25
 8005eae:	68e3      	ldr	r3, [r4, #12]
 8005eb0:	6832      	ldr	r2, [r6, #0]
 8005eb2:	1a9b      	subs	r3, r3, r2
 8005eb4:	42ab      	cmp	r3, r5
 8005eb6:	dc28      	bgt.n	8005f0a <_printf_common+0x9a>
 8005eb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ebc:	1e13      	subs	r3, r2, #0
 8005ebe:	6822      	ldr	r2, [r4, #0]
 8005ec0:	bf18      	it	ne
 8005ec2:	2301      	movne	r3, #1
 8005ec4:	0692      	lsls	r2, r2, #26
 8005ec6:	d42d      	bmi.n	8005f24 <_printf_common+0xb4>
 8005ec8:	4649      	mov	r1, r9
 8005eca:	4638      	mov	r0, r7
 8005ecc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ed0:	47c0      	blx	r8
 8005ed2:	3001      	adds	r0, #1
 8005ed4:	d020      	beq.n	8005f18 <_printf_common+0xa8>
 8005ed6:	6823      	ldr	r3, [r4, #0]
 8005ed8:	68e5      	ldr	r5, [r4, #12]
 8005eda:	f003 0306 	and.w	r3, r3, #6
 8005ede:	2b04      	cmp	r3, #4
 8005ee0:	bf18      	it	ne
 8005ee2:	2500      	movne	r5, #0
 8005ee4:	6832      	ldr	r2, [r6, #0]
 8005ee6:	f04f 0600 	mov.w	r6, #0
 8005eea:	68a3      	ldr	r3, [r4, #8]
 8005eec:	bf08      	it	eq
 8005eee:	1aad      	subeq	r5, r5, r2
 8005ef0:	6922      	ldr	r2, [r4, #16]
 8005ef2:	bf08      	it	eq
 8005ef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	bfc4      	itt	gt
 8005efc:	1a9b      	subgt	r3, r3, r2
 8005efe:	18ed      	addgt	r5, r5, r3
 8005f00:	341a      	adds	r4, #26
 8005f02:	42b5      	cmp	r5, r6
 8005f04:	d11a      	bne.n	8005f3c <_printf_common+0xcc>
 8005f06:	2000      	movs	r0, #0
 8005f08:	e008      	b.n	8005f1c <_printf_common+0xac>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	4652      	mov	r2, sl
 8005f0e:	4649      	mov	r1, r9
 8005f10:	4638      	mov	r0, r7
 8005f12:	47c0      	blx	r8
 8005f14:	3001      	adds	r0, #1
 8005f16:	d103      	bne.n	8005f20 <_printf_common+0xb0>
 8005f18:	f04f 30ff 	mov.w	r0, #4294967295
 8005f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f20:	3501      	adds	r5, #1
 8005f22:	e7c4      	b.n	8005eae <_printf_common+0x3e>
 8005f24:	2030      	movs	r0, #48	; 0x30
 8005f26:	18e1      	adds	r1, r4, r3
 8005f28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f2c:	1c5a      	adds	r2, r3, #1
 8005f2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f32:	4422      	add	r2, r4
 8005f34:	3302      	adds	r3, #2
 8005f36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f3a:	e7c5      	b.n	8005ec8 <_printf_common+0x58>
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	4622      	mov	r2, r4
 8005f40:	4649      	mov	r1, r9
 8005f42:	4638      	mov	r0, r7
 8005f44:	47c0      	blx	r8
 8005f46:	3001      	adds	r0, #1
 8005f48:	d0e6      	beq.n	8005f18 <_printf_common+0xa8>
 8005f4a:	3601      	adds	r6, #1
 8005f4c:	e7d9      	b.n	8005f02 <_printf_common+0x92>
	...

08005f50 <_printf_i>:
 8005f50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f54:	7e0f      	ldrb	r7, [r1, #24]
 8005f56:	4691      	mov	r9, r2
 8005f58:	2f78      	cmp	r7, #120	; 0x78
 8005f5a:	4680      	mov	r8, r0
 8005f5c:	460c      	mov	r4, r1
 8005f5e:	469a      	mov	sl, r3
 8005f60:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f66:	d807      	bhi.n	8005f78 <_printf_i+0x28>
 8005f68:	2f62      	cmp	r7, #98	; 0x62
 8005f6a:	d80a      	bhi.n	8005f82 <_printf_i+0x32>
 8005f6c:	2f00      	cmp	r7, #0
 8005f6e:	f000 80d9 	beq.w	8006124 <_printf_i+0x1d4>
 8005f72:	2f58      	cmp	r7, #88	; 0x58
 8005f74:	f000 80a4 	beq.w	80060c0 <_printf_i+0x170>
 8005f78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f80:	e03a      	b.n	8005ff8 <_printf_i+0xa8>
 8005f82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f86:	2b15      	cmp	r3, #21
 8005f88:	d8f6      	bhi.n	8005f78 <_printf_i+0x28>
 8005f8a:	a101      	add	r1, pc, #4	; (adr r1, 8005f90 <_printf_i+0x40>)
 8005f8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f90:	08005fe9 	.word	0x08005fe9
 8005f94:	08005ffd 	.word	0x08005ffd
 8005f98:	08005f79 	.word	0x08005f79
 8005f9c:	08005f79 	.word	0x08005f79
 8005fa0:	08005f79 	.word	0x08005f79
 8005fa4:	08005f79 	.word	0x08005f79
 8005fa8:	08005ffd 	.word	0x08005ffd
 8005fac:	08005f79 	.word	0x08005f79
 8005fb0:	08005f79 	.word	0x08005f79
 8005fb4:	08005f79 	.word	0x08005f79
 8005fb8:	08005f79 	.word	0x08005f79
 8005fbc:	0800610b 	.word	0x0800610b
 8005fc0:	0800602d 	.word	0x0800602d
 8005fc4:	080060ed 	.word	0x080060ed
 8005fc8:	08005f79 	.word	0x08005f79
 8005fcc:	08005f79 	.word	0x08005f79
 8005fd0:	0800612d 	.word	0x0800612d
 8005fd4:	08005f79 	.word	0x08005f79
 8005fd8:	0800602d 	.word	0x0800602d
 8005fdc:	08005f79 	.word	0x08005f79
 8005fe0:	08005f79 	.word	0x08005f79
 8005fe4:	080060f5 	.word	0x080060f5
 8005fe8:	682b      	ldr	r3, [r5, #0]
 8005fea:	1d1a      	adds	r2, r3, #4
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	602a      	str	r2, [r5, #0]
 8005ff0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ff4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e0a4      	b.n	8006146 <_printf_i+0x1f6>
 8005ffc:	6820      	ldr	r0, [r4, #0]
 8005ffe:	6829      	ldr	r1, [r5, #0]
 8006000:	0606      	lsls	r6, r0, #24
 8006002:	f101 0304 	add.w	r3, r1, #4
 8006006:	d50a      	bpl.n	800601e <_printf_i+0xce>
 8006008:	680e      	ldr	r6, [r1, #0]
 800600a:	602b      	str	r3, [r5, #0]
 800600c:	2e00      	cmp	r6, #0
 800600e:	da03      	bge.n	8006018 <_printf_i+0xc8>
 8006010:	232d      	movs	r3, #45	; 0x2d
 8006012:	4276      	negs	r6, r6
 8006014:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006018:	230a      	movs	r3, #10
 800601a:	485e      	ldr	r0, [pc, #376]	; (8006194 <_printf_i+0x244>)
 800601c:	e019      	b.n	8006052 <_printf_i+0x102>
 800601e:	680e      	ldr	r6, [r1, #0]
 8006020:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006024:	602b      	str	r3, [r5, #0]
 8006026:	bf18      	it	ne
 8006028:	b236      	sxthne	r6, r6
 800602a:	e7ef      	b.n	800600c <_printf_i+0xbc>
 800602c:	682b      	ldr	r3, [r5, #0]
 800602e:	6820      	ldr	r0, [r4, #0]
 8006030:	1d19      	adds	r1, r3, #4
 8006032:	6029      	str	r1, [r5, #0]
 8006034:	0601      	lsls	r1, r0, #24
 8006036:	d501      	bpl.n	800603c <_printf_i+0xec>
 8006038:	681e      	ldr	r6, [r3, #0]
 800603a:	e002      	b.n	8006042 <_printf_i+0xf2>
 800603c:	0646      	lsls	r6, r0, #25
 800603e:	d5fb      	bpl.n	8006038 <_printf_i+0xe8>
 8006040:	881e      	ldrh	r6, [r3, #0]
 8006042:	2f6f      	cmp	r7, #111	; 0x6f
 8006044:	bf0c      	ite	eq
 8006046:	2308      	moveq	r3, #8
 8006048:	230a      	movne	r3, #10
 800604a:	4852      	ldr	r0, [pc, #328]	; (8006194 <_printf_i+0x244>)
 800604c:	2100      	movs	r1, #0
 800604e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006052:	6865      	ldr	r5, [r4, #4]
 8006054:	2d00      	cmp	r5, #0
 8006056:	bfa8      	it	ge
 8006058:	6821      	ldrge	r1, [r4, #0]
 800605a:	60a5      	str	r5, [r4, #8]
 800605c:	bfa4      	itt	ge
 800605e:	f021 0104 	bicge.w	r1, r1, #4
 8006062:	6021      	strge	r1, [r4, #0]
 8006064:	b90e      	cbnz	r6, 800606a <_printf_i+0x11a>
 8006066:	2d00      	cmp	r5, #0
 8006068:	d04d      	beq.n	8006106 <_printf_i+0x1b6>
 800606a:	4615      	mov	r5, r2
 800606c:	fbb6 f1f3 	udiv	r1, r6, r3
 8006070:	fb03 6711 	mls	r7, r3, r1, r6
 8006074:	5dc7      	ldrb	r7, [r0, r7]
 8006076:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800607a:	4637      	mov	r7, r6
 800607c:	42bb      	cmp	r3, r7
 800607e:	460e      	mov	r6, r1
 8006080:	d9f4      	bls.n	800606c <_printf_i+0x11c>
 8006082:	2b08      	cmp	r3, #8
 8006084:	d10b      	bne.n	800609e <_printf_i+0x14e>
 8006086:	6823      	ldr	r3, [r4, #0]
 8006088:	07de      	lsls	r6, r3, #31
 800608a:	d508      	bpl.n	800609e <_printf_i+0x14e>
 800608c:	6923      	ldr	r3, [r4, #16]
 800608e:	6861      	ldr	r1, [r4, #4]
 8006090:	4299      	cmp	r1, r3
 8006092:	bfde      	ittt	le
 8006094:	2330      	movle	r3, #48	; 0x30
 8006096:	f805 3c01 	strble.w	r3, [r5, #-1]
 800609a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800609e:	1b52      	subs	r2, r2, r5
 80060a0:	6122      	str	r2, [r4, #16]
 80060a2:	464b      	mov	r3, r9
 80060a4:	4621      	mov	r1, r4
 80060a6:	4640      	mov	r0, r8
 80060a8:	f8cd a000 	str.w	sl, [sp]
 80060ac:	aa03      	add	r2, sp, #12
 80060ae:	f7ff fedf 	bl	8005e70 <_printf_common>
 80060b2:	3001      	adds	r0, #1
 80060b4:	d14c      	bne.n	8006150 <_printf_i+0x200>
 80060b6:	f04f 30ff 	mov.w	r0, #4294967295
 80060ba:	b004      	add	sp, #16
 80060bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060c0:	4834      	ldr	r0, [pc, #208]	; (8006194 <_printf_i+0x244>)
 80060c2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80060c6:	6829      	ldr	r1, [r5, #0]
 80060c8:	6823      	ldr	r3, [r4, #0]
 80060ca:	f851 6b04 	ldr.w	r6, [r1], #4
 80060ce:	6029      	str	r1, [r5, #0]
 80060d0:	061d      	lsls	r5, r3, #24
 80060d2:	d514      	bpl.n	80060fe <_printf_i+0x1ae>
 80060d4:	07df      	lsls	r7, r3, #31
 80060d6:	bf44      	itt	mi
 80060d8:	f043 0320 	orrmi.w	r3, r3, #32
 80060dc:	6023      	strmi	r3, [r4, #0]
 80060de:	b91e      	cbnz	r6, 80060e8 <_printf_i+0x198>
 80060e0:	6823      	ldr	r3, [r4, #0]
 80060e2:	f023 0320 	bic.w	r3, r3, #32
 80060e6:	6023      	str	r3, [r4, #0]
 80060e8:	2310      	movs	r3, #16
 80060ea:	e7af      	b.n	800604c <_printf_i+0xfc>
 80060ec:	6823      	ldr	r3, [r4, #0]
 80060ee:	f043 0320 	orr.w	r3, r3, #32
 80060f2:	6023      	str	r3, [r4, #0]
 80060f4:	2378      	movs	r3, #120	; 0x78
 80060f6:	4828      	ldr	r0, [pc, #160]	; (8006198 <_printf_i+0x248>)
 80060f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060fc:	e7e3      	b.n	80060c6 <_printf_i+0x176>
 80060fe:	0659      	lsls	r1, r3, #25
 8006100:	bf48      	it	mi
 8006102:	b2b6      	uxthmi	r6, r6
 8006104:	e7e6      	b.n	80060d4 <_printf_i+0x184>
 8006106:	4615      	mov	r5, r2
 8006108:	e7bb      	b.n	8006082 <_printf_i+0x132>
 800610a:	682b      	ldr	r3, [r5, #0]
 800610c:	6826      	ldr	r6, [r4, #0]
 800610e:	1d18      	adds	r0, r3, #4
 8006110:	6961      	ldr	r1, [r4, #20]
 8006112:	6028      	str	r0, [r5, #0]
 8006114:	0635      	lsls	r5, r6, #24
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	d501      	bpl.n	800611e <_printf_i+0x1ce>
 800611a:	6019      	str	r1, [r3, #0]
 800611c:	e002      	b.n	8006124 <_printf_i+0x1d4>
 800611e:	0670      	lsls	r0, r6, #25
 8006120:	d5fb      	bpl.n	800611a <_printf_i+0x1ca>
 8006122:	8019      	strh	r1, [r3, #0]
 8006124:	2300      	movs	r3, #0
 8006126:	4615      	mov	r5, r2
 8006128:	6123      	str	r3, [r4, #16]
 800612a:	e7ba      	b.n	80060a2 <_printf_i+0x152>
 800612c:	682b      	ldr	r3, [r5, #0]
 800612e:	2100      	movs	r1, #0
 8006130:	1d1a      	adds	r2, r3, #4
 8006132:	602a      	str	r2, [r5, #0]
 8006134:	681d      	ldr	r5, [r3, #0]
 8006136:	6862      	ldr	r2, [r4, #4]
 8006138:	4628      	mov	r0, r5
 800613a:	f000 fed7 	bl	8006eec <memchr>
 800613e:	b108      	cbz	r0, 8006144 <_printf_i+0x1f4>
 8006140:	1b40      	subs	r0, r0, r5
 8006142:	6060      	str	r0, [r4, #4]
 8006144:	6863      	ldr	r3, [r4, #4]
 8006146:	6123      	str	r3, [r4, #16]
 8006148:	2300      	movs	r3, #0
 800614a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800614e:	e7a8      	b.n	80060a2 <_printf_i+0x152>
 8006150:	462a      	mov	r2, r5
 8006152:	4649      	mov	r1, r9
 8006154:	4640      	mov	r0, r8
 8006156:	6923      	ldr	r3, [r4, #16]
 8006158:	47d0      	blx	sl
 800615a:	3001      	adds	r0, #1
 800615c:	d0ab      	beq.n	80060b6 <_printf_i+0x166>
 800615e:	6823      	ldr	r3, [r4, #0]
 8006160:	079b      	lsls	r3, r3, #30
 8006162:	d413      	bmi.n	800618c <_printf_i+0x23c>
 8006164:	68e0      	ldr	r0, [r4, #12]
 8006166:	9b03      	ldr	r3, [sp, #12]
 8006168:	4298      	cmp	r0, r3
 800616a:	bfb8      	it	lt
 800616c:	4618      	movlt	r0, r3
 800616e:	e7a4      	b.n	80060ba <_printf_i+0x16a>
 8006170:	2301      	movs	r3, #1
 8006172:	4632      	mov	r2, r6
 8006174:	4649      	mov	r1, r9
 8006176:	4640      	mov	r0, r8
 8006178:	47d0      	blx	sl
 800617a:	3001      	adds	r0, #1
 800617c:	d09b      	beq.n	80060b6 <_printf_i+0x166>
 800617e:	3501      	adds	r5, #1
 8006180:	68e3      	ldr	r3, [r4, #12]
 8006182:	9903      	ldr	r1, [sp, #12]
 8006184:	1a5b      	subs	r3, r3, r1
 8006186:	42ab      	cmp	r3, r5
 8006188:	dcf2      	bgt.n	8006170 <_printf_i+0x220>
 800618a:	e7eb      	b.n	8006164 <_printf_i+0x214>
 800618c:	2500      	movs	r5, #0
 800618e:	f104 0619 	add.w	r6, r4, #25
 8006192:	e7f5      	b.n	8006180 <_printf_i+0x230>
 8006194:	080087c6 	.word	0x080087c6
 8006198:	080087d7 	.word	0x080087d7

0800619c <siprintf>:
 800619c:	b40e      	push	{r1, r2, r3}
 800619e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80061a2:	b500      	push	{lr}
 80061a4:	b09c      	sub	sp, #112	; 0x70
 80061a6:	ab1d      	add	r3, sp, #116	; 0x74
 80061a8:	9002      	str	r0, [sp, #8]
 80061aa:	9006      	str	r0, [sp, #24]
 80061ac:	9107      	str	r1, [sp, #28]
 80061ae:	9104      	str	r1, [sp, #16]
 80061b0:	4808      	ldr	r0, [pc, #32]	; (80061d4 <siprintf+0x38>)
 80061b2:	4909      	ldr	r1, [pc, #36]	; (80061d8 <siprintf+0x3c>)
 80061b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80061b8:	9105      	str	r1, [sp, #20]
 80061ba:	6800      	ldr	r0, [r0, #0]
 80061bc:	a902      	add	r1, sp, #8
 80061be:	9301      	str	r3, [sp, #4]
 80061c0:	f001 fb7e 	bl	80078c0 <_svfiprintf_r>
 80061c4:	2200      	movs	r2, #0
 80061c6:	9b02      	ldr	r3, [sp, #8]
 80061c8:	701a      	strb	r2, [r3, #0]
 80061ca:	b01c      	add	sp, #112	; 0x70
 80061cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80061d0:	b003      	add	sp, #12
 80061d2:	4770      	bx	lr
 80061d4:	2000001c 	.word	0x2000001c
 80061d8:	ffff0208 	.word	0xffff0208

080061dc <quorem>:
 80061dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061e0:	6903      	ldr	r3, [r0, #16]
 80061e2:	690c      	ldr	r4, [r1, #16]
 80061e4:	4607      	mov	r7, r0
 80061e6:	42a3      	cmp	r3, r4
 80061e8:	f2c0 8082 	blt.w	80062f0 <quorem+0x114>
 80061ec:	3c01      	subs	r4, #1
 80061ee:	f100 0514 	add.w	r5, r0, #20
 80061f2:	f101 0814 	add.w	r8, r1, #20
 80061f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061fa:	9301      	str	r3, [sp, #4]
 80061fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006200:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006204:	3301      	adds	r3, #1
 8006206:	429a      	cmp	r2, r3
 8006208:	fbb2 f6f3 	udiv	r6, r2, r3
 800620c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006210:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006214:	d331      	bcc.n	800627a <quorem+0x9e>
 8006216:	f04f 0e00 	mov.w	lr, #0
 800621a:	4640      	mov	r0, r8
 800621c:	46ac      	mov	ip, r5
 800621e:	46f2      	mov	sl, lr
 8006220:	f850 2b04 	ldr.w	r2, [r0], #4
 8006224:	b293      	uxth	r3, r2
 8006226:	fb06 e303 	mla	r3, r6, r3, lr
 800622a:	0c12      	lsrs	r2, r2, #16
 800622c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006230:	b29b      	uxth	r3, r3
 8006232:	fb06 e202 	mla	r2, r6, r2, lr
 8006236:	ebaa 0303 	sub.w	r3, sl, r3
 800623a:	f8dc a000 	ldr.w	sl, [ip]
 800623e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006242:	fa1f fa8a 	uxth.w	sl, sl
 8006246:	4453      	add	r3, sl
 8006248:	f8dc a000 	ldr.w	sl, [ip]
 800624c:	b292      	uxth	r2, r2
 800624e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006252:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006256:	b29b      	uxth	r3, r3
 8006258:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800625c:	4581      	cmp	r9, r0
 800625e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006262:	f84c 3b04 	str.w	r3, [ip], #4
 8006266:	d2db      	bcs.n	8006220 <quorem+0x44>
 8006268:	f855 300b 	ldr.w	r3, [r5, fp]
 800626c:	b92b      	cbnz	r3, 800627a <quorem+0x9e>
 800626e:	9b01      	ldr	r3, [sp, #4]
 8006270:	3b04      	subs	r3, #4
 8006272:	429d      	cmp	r5, r3
 8006274:	461a      	mov	r2, r3
 8006276:	d32f      	bcc.n	80062d8 <quorem+0xfc>
 8006278:	613c      	str	r4, [r7, #16]
 800627a:	4638      	mov	r0, r7
 800627c:	f001 f8d0 	bl	8007420 <__mcmp>
 8006280:	2800      	cmp	r0, #0
 8006282:	db25      	blt.n	80062d0 <quorem+0xf4>
 8006284:	4628      	mov	r0, r5
 8006286:	f04f 0c00 	mov.w	ip, #0
 800628a:	3601      	adds	r6, #1
 800628c:	f858 1b04 	ldr.w	r1, [r8], #4
 8006290:	f8d0 e000 	ldr.w	lr, [r0]
 8006294:	b28b      	uxth	r3, r1
 8006296:	ebac 0303 	sub.w	r3, ip, r3
 800629a:	fa1f f28e 	uxth.w	r2, lr
 800629e:	4413      	add	r3, r2
 80062a0:	0c0a      	lsrs	r2, r1, #16
 80062a2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80062a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062b0:	45c1      	cmp	r9, r8
 80062b2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80062b6:	f840 3b04 	str.w	r3, [r0], #4
 80062ba:	d2e7      	bcs.n	800628c <quorem+0xb0>
 80062bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062c4:	b922      	cbnz	r2, 80062d0 <quorem+0xf4>
 80062c6:	3b04      	subs	r3, #4
 80062c8:	429d      	cmp	r5, r3
 80062ca:	461a      	mov	r2, r3
 80062cc:	d30a      	bcc.n	80062e4 <quorem+0x108>
 80062ce:	613c      	str	r4, [r7, #16]
 80062d0:	4630      	mov	r0, r6
 80062d2:	b003      	add	sp, #12
 80062d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062d8:	6812      	ldr	r2, [r2, #0]
 80062da:	3b04      	subs	r3, #4
 80062dc:	2a00      	cmp	r2, #0
 80062de:	d1cb      	bne.n	8006278 <quorem+0x9c>
 80062e0:	3c01      	subs	r4, #1
 80062e2:	e7c6      	b.n	8006272 <quorem+0x96>
 80062e4:	6812      	ldr	r2, [r2, #0]
 80062e6:	3b04      	subs	r3, #4
 80062e8:	2a00      	cmp	r2, #0
 80062ea:	d1f0      	bne.n	80062ce <quorem+0xf2>
 80062ec:	3c01      	subs	r4, #1
 80062ee:	e7eb      	b.n	80062c8 <quorem+0xec>
 80062f0:	2000      	movs	r0, #0
 80062f2:	e7ee      	b.n	80062d2 <quorem+0xf6>
 80062f4:	0000      	movs	r0, r0
	...

080062f8 <_dtoa_r>:
 80062f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062fc:	4616      	mov	r6, r2
 80062fe:	461f      	mov	r7, r3
 8006300:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006302:	b099      	sub	sp, #100	; 0x64
 8006304:	4605      	mov	r5, r0
 8006306:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800630a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800630e:	b974      	cbnz	r4, 800632e <_dtoa_r+0x36>
 8006310:	2010      	movs	r0, #16
 8006312:	f000 fde3 	bl	8006edc <malloc>
 8006316:	4602      	mov	r2, r0
 8006318:	6268      	str	r0, [r5, #36]	; 0x24
 800631a:	b920      	cbnz	r0, 8006326 <_dtoa_r+0x2e>
 800631c:	21ea      	movs	r1, #234	; 0xea
 800631e:	4ba8      	ldr	r3, [pc, #672]	; (80065c0 <_dtoa_r+0x2c8>)
 8006320:	48a8      	ldr	r0, [pc, #672]	; (80065c4 <_dtoa_r+0x2cc>)
 8006322:	f001 fbdd 	bl	8007ae0 <__assert_func>
 8006326:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800632a:	6004      	str	r4, [r0, #0]
 800632c:	60c4      	str	r4, [r0, #12]
 800632e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006330:	6819      	ldr	r1, [r3, #0]
 8006332:	b151      	cbz	r1, 800634a <_dtoa_r+0x52>
 8006334:	685a      	ldr	r2, [r3, #4]
 8006336:	2301      	movs	r3, #1
 8006338:	4093      	lsls	r3, r2
 800633a:	604a      	str	r2, [r1, #4]
 800633c:	608b      	str	r3, [r1, #8]
 800633e:	4628      	mov	r0, r5
 8006340:	f000 fe30 	bl	8006fa4 <_Bfree>
 8006344:	2200      	movs	r2, #0
 8006346:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006348:	601a      	str	r2, [r3, #0]
 800634a:	1e3b      	subs	r3, r7, #0
 800634c:	bfaf      	iteee	ge
 800634e:	2300      	movge	r3, #0
 8006350:	2201      	movlt	r2, #1
 8006352:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006356:	9305      	strlt	r3, [sp, #20]
 8006358:	bfa8      	it	ge
 800635a:	f8c8 3000 	strge.w	r3, [r8]
 800635e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006362:	4b99      	ldr	r3, [pc, #612]	; (80065c8 <_dtoa_r+0x2d0>)
 8006364:	bfb8      	it	lt
 8006366:	f8c8 2000 	strlt.w	r2, [r8]
 800636a:	ea33 0309 	bics.w	r3, r3, r9
 800636e:	d119      	bne.n	80063a4 <_dtoa_r+0xac>
 8006370:	f242 730f 	movw	r3, #9999	; 0x270f
 8006374:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006376:	6013      	str	r3, [r2, #0]
 8006378:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800637c:	4333      	orrs	r3, r6
 800637e:	f000 857f 	beq.w	8006e80 <_dtoa_r+0xb88>
 8006382:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006384:	b953      	cbnz	r3, 800639c <_dtoa_r+0xa4>
 8006386:	4b91      	ldr	r3, [pc, #580]	; (80065cc <_dtoa_r+0x2d4>)
 8006388:	e022      	b.n	80063d0 <_dtoa_r+0xd8>
 800638a:	4b91      	ldr	r3, [pc, #580]	; (80065d0 <_dtoa_r+0x2d8>)
 800638c:	9303      	str	r3, [sp, #12]
 800638e:	3308      	adds	r3, #8
 8006390:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006392:	6013      	str	r3, [r2, #0]
 8006394:	9803      	ldr	r0, [sp, #12]
 8006396:	b019      	add	sp, #100	; 0x64
 8006398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800639c:	4b8b      	ldr	r3, [pc, #556]	; (80065cc <_dtoa_r+0x2d4>)
 800639e:	9303      	str	r3, [sp, #12]
 80063a0:	3303      	adds	r3, #3
 80063a2:	e7f5      	b.n	8006390 <_dtoa_r+0x98>
 80063a4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80063a8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80063ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80063b0:	2200      	movs	r2, #0
 80063b2:	2300      	movs	r3, #0
 80063b4:	f7fa fbac 	bl	8000b10 <__aeabi_dcmpeq>
 80063b8:	4680      	mov	r8, r0
 80063ba:	b158      	cbz	r0, 80063d4 <_dtoa_r+0xdc>
 80063bc:	2301      	movs	r3, #1
 80063be:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80063c0:	6013      	str	r3, [r2, #0]
 80063c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f000 8558 	beq.w	8006e7a <_dtoa_r+0xb82>
 80063ca:	4882      	ldr	r0, [pc, #520]	; (80065d4 <_dtoa_r+0x2dc>)
 80063cc:	6018      	str	r0, [r3, #0]
 80063ce:	1e43      	subs	r3, r0, #1
 80063d0:	9303      	str	r3, [sp, #12]
 80063d2:	e7df      	b.n	8006394 <_dtoa_r+0x9c>
 80063d4:	ab16      	add	r3, sp, #88	; 0x58
 80063d6:	9301      	str	r3, [sp, #4]
 80063d8:	ab17      	add	r3, sp, #92	; 0x5c
 80063da:	9300      	str	r3, [sp, #0]
 80063dc:	4628      	mov	r0, r5
 80063de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80063e2:	f001 f8c5 	bl	8007570 <__d2b>
 80063e6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80063ea:	4683      	mov	fp, r0
 80063ec:	2c00      	cmp	r4, #0
 80063ee:	d07f      	beq.n	80064f0 <_dtoa_r+0x1f8>
 80063f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80063f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063f6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80063fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063fe:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006402:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006406:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800640a:	2200      	movs	r2, #0
 800640c:	4b72      	ldr	r3, [pc, #456]	; (80065d8 <_dtoa_r+0x2e0>)
 800640e:	f7f9 ff5f 	bl	80002d0 <__aeabi_dsub>
 8006412:	a365      	add	r3, pc, #404	; (adr r3, 80065a8 <_dtoa_r+0x2b0>)
 8006414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006418:	f7fa f912 	bl	8000640 <__aeabi_dmul>
 800641c:	a364      	add	r3, pc, #400	; (adr r3, 80065b0 <_dtoa_r+0x2b8>)
 800641e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006422:	f7f9 ff57 	bl	80002d4 <__adddf3>
 8006426:	4606      	mov	r6, r0
 8006428:	4620      	mov	r0, r4
 800642a:	460f      	mov	r7, r1
 800642c:	f7fa f89e 	bl	800056c <__aeabi_i2d>
 8006430:	a361      	add	r3, pc, #388	; (adr r3, 80065b8 <_dtoa_r+0x2c0>)
 8006432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006436:	f7fa f903 	bl	8000640 <__aeabi_dmul>
 800643a:	4602      	mov	r2, r0
 800643c:	460b      	mov	r3, r1
 800643e:	4630      	mov	r0, r6
 8006440:	4639      	mov	r1, r7
 8006442:	f7f9 ff47 	bl	80002d4 <__adddf3>
 8006446:	4606      	mov	r6, r0
 8006448:	460f      	mov	r7, r1
 800644a:	f7fa fba9 	bl	8000ba0 <__aeabi_d2iz>
 800644e:	2200      	movs	r2, #0
 8006450:	4682      	mov	sl, r0
 8006452:	2300      	movs	r3, #0
 8006454:	4630      	mov	r0, r6
 8006456:	4639      	mov	r1, r7
 8006458:	f7fa fb64 	bl	8000b24 <__aeabi_dcmplt>
 800645c:	b148      	cbz	r0, 8006472 <_dtoa_r+0x17a>
 800645e:	4650      	mov	r0, sl
 8006460:	f7fa f884 	bl	800056c <__aeabi_i2d>
 8006464:	4632      	mov	r2, r6
 8006466:	463b      	mov	r3, r7
 8006468:	f7fa fb52 	bl	8000b10 <__aeabi_dcmpeq>
 800646c:	b908      	cbnz	r0, 8006472 <_dtoa_r+0x17a>
 800646e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006472:	f1ba 0f16 	cmp.w	sl, #22
 8006476:	d858      	bhi.n	800652a <_dtoa_r+0x232>
 8006478:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800647c:	4b57      	ldr	r3, [pc, #348]	; (80065dc <_dtoa_r+0x2e4>)
 800647e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006486:	f7fa fb4d 	bl	8000b24 <__aeabi_dcmplt>
 800648a:	2800      	cmp	r0, #0
 800648c:	d04f      	beq.n	800652e <_dtoa_r+0x236>
 800648e:	2300      	movs	r3, #0
 8006490:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006494:	930f      	str	r3, [sp, #60]	; 0x3c
 8006496:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006498:	1b1c      	subs	r4, r3, r4
 800649a:	1e63      	subs	r3, r4, #1
 800649c:	9309      	str	r3, [sp, #36]	; 0x24
 800649e:	bf49      	itett	mi
 80064a0:	f1c4 0301 	rsbmi	r3, r4, #1
 80064a4:	2300      	movpl	r3, #0
 80064a6:	9306      	strmi	r3, [sp, #24]
 80064a8:	2300      	movmi	r3, #0
 80064aa:	bf54      	ite	pl
 80064ac:	9306      	strpl	r3, [sp, #24]
 80064ae:	9309      	strmi	r3, [sp, #36]	; 0x24
 80064b0:	f1ba 0f00 	cmp.w	sl, #0
 80064b4:	db3d      	blt.n	8006532 <_dtoa_r+0x23a>
 80064b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064b8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80064bc:	4453      	add	r3, sl
 80064be:	9309      	str	r3, [sp, #36]	; 0x24
 80064c0:	2300      	movs	r3, #0
 80064c2:	930a      	str	r3, [sp, #40]	; 0x28
 80064c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064c6:	2b09      	cmp	r3, #9
 80064c8:	f200 808c 	bhi.w	80065e4 <_dtoa_r+0x2ec>
 80064cc:	2b05      	cmp	r3, #5
 80064ce:	bfc4      	itt	gt
 80064d0:	3b04      	subgt	r3, #4
 80064d2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80064d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064d6:	bfc8      	it	gt
 80064d8:	2400      	movgt	r4, #0
 80064da:	f1a3 0302 	sub.w	r3, r3, #2
 80064de:	bfd8      	it	le
 80064e0:	2401      	movle	r4, #1
 80064e2:	2b03      	cmp	r3, #3
 80064e4:	f200 808a 	bhi.w	80065fc <_dtoa_r+0x304>
 80064e8:	e8df f003 	tbb	[pc, r3]
 80064ec:	5b4d4f2d 	.word	0x5b4d4f2d
 80064f0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80064f4:	441c      	add	r4, r3
 80064f6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80064fa:	2b20      	cmp	r3, #32
 80064fc:	bfc3      	ittte	gt
 80064fe:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006502:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006506:	fa09 f303 	lslgt.w	r3, r9, r3
 800650a:	f1c3 0320 	rsble	r3, r3, #32
 800650e:	bfc6      	itte	gt
 8006510:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006514:	4318      	orrgt	r0, r3
 8006516:	fa06 f003 	lslle.w	r0, r6, r3
 800651a:	f7fa f817 	bl	800054c <__aeabi_ui2d>
 800651e:	2301      	movs	r3, #1
 8006520:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006524:	3c01      	subs	r4, #1
 8006526:	9313      	str	r3, [sp, #76]	; 0x4c
 8006528:	e76f      	b.n	800640a <_dtoa_r+0x112>
 800652a:	2301      	movs	r3, #1
 800652c:	e7b2      	b.n	8006494 <_dtoa_r+0x19c>
 800652e:	900f      	str	r0, [sp, #60]	; 0x3c
 8006530:	e7b1      	b.n	8006496 <_dtoa_r+0x19e>
 8006532:	9b06      	ldr	r3, [sp, #24]
 8006534:	eba3 030a 	sub.w	r3, r3, sl
 8006538:	9306      	str	r3, [sp, #24]
 800653a:	f1ca 0300 	rsb	r3, sl, #0
 800653e:	930a      	str	r3, [sp, #40]	; 0x28
 8006540:	2300      	movs	r3, #0
 8006542:	930e      	str	r3, [sp, #56]	; 0x38
 8006544:	e7be      	b.n	80064c4 <_dtoa_r+0x1cc>
 8006546:	2300      	movs	r3, #0
 8006548:	930b      	str	r3, [sp, #44]	; 0x2c
 800654a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800654c:	2b00      	cmp	r3, #0
 800654e:	dc58      	bgt.n	8006602 <_dtoa_r+0x30a>
 8006550:	f04f 0901 	mov.w	r9, #1
 8006554:	464b      	mov	r3, r9
 8006556:	f8cd 9020 	str.w	r9, [sp, #32]
 800655a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800655e:	2200      	movs	r2, #0
 8006560:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006562:	6042      	str	r2, [r0, #4]
 8006564:	2204      	movs	r2, #4
 8006566:	f102 0614 	add.w	r6, r2, #20
 800656a:	429e      	cmp	r6, r3
 800656c:	6841      	ldr	r1, [r0, #4]
 800656e:	d94e      	bls.n	800660e <_dtoa_r+0x316>
 8006570:	4628      	mov	r0, r5
 8006572:	f000 fcd7 	bl	8006f24 <_Balloc>
 8006576:	9003      	str	r0, [sp, #12]
 8006578:	2800      	cmp	r0, #0
 800657a:	d14c      	bne.n	8006616 <_dtoa_r+0x31e>
 800657c:	4602      	mov	r2, r0
 800657e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006582:	4b17      	ldr	r3, [pc, #92]	; (80065e0 <_dtoa_r+0x2e8>)
 8006584:	e6cc      	b.n	8006320 <_dtoa_r+0x28>
 8006586:	2301      	movs	r3, #1
 8006588:	e7de      	b.n	8006548 <_dtoa_r+0x250>
 800658a:	2300      	movs	r3, #0
 800658c:	930b      	str	r3, [sp, #44]	; 0x2c
 800658e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006590:	eb0a 0903 	add.w	r9, sl, r3
 8006594:	f109 0301 	add.w	r3, r9, #1
 8006598:	2b01      	cmp	r3, #1
 800659a:	9308      	str	r3, [sp, #32]
 800659c:	bfb8      	it	lt
 800659e:	2301      	movlt	r3, #1
 80065a0:	e7dd      	b.n	800655e <_dtoa_r+0x266>
 80065a2:	2301      	movs	r3, #1
 80065a4:	e7f2      	b.n	800658c <_dtoa_r+0x294>
 80065a6:	bf00      	nop
 80065a8:	636f4361 	.word	0x636f4361
 80065ac:	3fd287a7 	.word	0x3fd287a7
 80065b0:	8b60c8b3 	.word	0x8b60c8b3
 80065b4:	3fc68a28 	.word	0x3fc68a28
 80065b8:	509f79fb 	.word	0x509f79fb
 80065bc:	3fd34413 	.word	0x3fd34413
 80065c0:	080087f5 	.word	0x080087f5
 80065c4:	0800880c 	.word	0x0800880c
 80065c8:	7ff00000 	.word	0x7ff00000
 80065cc:	080087f1 	.word	0x080087f1
 80065d0:	080087e8 	.word	0x080087e8
 80065d4:	080087c5 	.word	0x080087c5
 80065d8:	3ff80000 	.word	0x3ff80000
 80065dc:	08008900 	.word	0x08008900
 80065e0:	08008867 	.word	0x08008867
 80065e4:	2401      	movs	r4, #1
 80065e6:	2300      	movs	r3, #0
 80065e8:	940b      	str	r4, [sp, #44]	; 0x2c
 80065ea:	9322      	str	r3, [sp, #136]	; 0x88
 80065ec:	f04f 39ff 	mov.w	r9, #4294967295
 80065f0:	2200      	movs	r2, #0
 80065f2:	2312      	movs	r3, #18
 80065f4:	f8cd 9020 	str.w	r9, [sp, #32]
 80065f8:	9223      	str	r2, [sp, #140]	; 0x8c
 80065fa:	e7b0      	b.n	800655e <_dtoa_r+0x266>
 80065fc:	2301      	movs	r3, #1
 80065fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8006600:	e7f4      	b.n	80065ec <_dtoa_r+0x2f4>
 8006602:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8006606:	464b      	mov	r3, r9
 8006608:	f8cd 9020 	str.w	r9, [sp, #32]
 800660c:	e7a7      	b.n	800655e <_dtoa_r+0x266>
 800660e:	3101      	adds	r1, #1
 8006610:	6041      	str	r1, [r0, #4]
 8006612:	0052      	lsls	r2, r2, #1
 8006614:	e7a7      	b.n	8006566 <_dtoa_r+0x26e>
 8006616:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006618:	9a03      	ldr	r2, [sp, #12]
 800661a:	601a      	str	r2, [r3, #0]
 800661c:	9b08      	ldr	r3, [sp, #32]
 800661e:	2b0e      	cmp	r3, #14
 8006620:	f200 80a8 	bhi.w	8006774 <_dtoa_r+0x47c>
 8006624:	2c00      	cmp	r4, #0
 8006626:	f000 80a5 	beq.w	8006774 <_dtoa_r+0x47c>
 800662a:	f1ba 0f00 	cmp.w	sl, #0
 800662e:	dd34      	ble.n	800669a <_dtoa_r+0x3a2>
 8006630:	4a9a      	ldr	r2, [pc, #616]	; (800689c <_dtoa_r+0x5a4>)
 8006632:	f00a 030f 	and.w	r3, sl, #15
 8006636:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800663a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800663e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006642:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006646:	ea4f 142a 	mov.w	r4, sl, asr #4
 800664a:	d016      	beq.n	800667a <_dtoa_r+0x382>
 800664c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006650:	4b93      	ldr	r3, [pc, #588]	; (80068a0 <_dtoa_r+0x5a8>)
 8006652:	2703      	movs	r7, #3
 8006654:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006658:	f7fa f91c 	bl	8000894 <__aeabi_ddiv>
 800665c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006660:	f004 040f 	and.w	r4, r4, #15
 8006664:	4e8e      	ldr	r6, [pc, #568]	; (80068a0 <_dtoa_r+0x5a8>)
 8006666:	b954      	cbnz	r4, 800667e <_dtoa_r+0x386>
 8006668:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800666c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006670:	f7fa f910 	bl	8000894 <__aeabi_ddiv>
 8006674:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006678:	e029      	b.n	80066ce <_dtoa_r+0x3d6>
 800667a:	2702      	movs	r7, #2
 800667c:	e7f2      	b.n	8006664 <_dtoa_r+0x36c>
 800667e:	07e1      	lsls	r1, r4, #31
 8006680:	d508      	bpl.n	8006694 <_dtoa_r+0x39c>
 8006682:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006686:	e9d6 2300 	ldrd	r2, r3, [r6]
 800668a:	f7f9 ffd9 	bl	8000640 <__aeabi_dmul>
 800668e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006692:	3701      	adds	r7, #1
 8006694:	1064      	asrs	r4, r4, #1
 8006696:	3608      	adds	r6, #8
 8006698:	e7e5      	b.n	8006666 <_dtoa_r+0x36e>
 800669a:	f000 80a5 	beq.w	80067e8 <_dtoa_r+0x4f0>
 800669e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80066a2:	f1ca 0400 	rsb	r4, sl, #0
 80066a6:	4b7d      	ldr	r3, [pc, #500]	; (800689c <_dtoa_r+0x5a4>)
 80066a8:	f004 020f 	and.w	r2, r4, #15
 80066ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b4:	f7f9 ffc4 	bl	8000640 <__aeabi_dmul>
 80066b8:	2702      	movs	r7, #2
 80066ba:	2300      	movs	r3, #0
 80066bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066c0:	4e77      	ldr	r6, [pc, #476]	; (80068a0 <_dtoa_r+0x5a8>)
 80066c2:	1124      	asrs	r4, r4, #4
 80066c4:	2c00      	cmp	r4, #0
 80066c6:	f040 8084 	bne.w	80067d2 <_dtoa_r+0x4da>
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1d2      	bne.n	8006674 <_dtoa_r+0x37c>
 80066ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f000 808b 	beq.w	80067ec <_dtoa_r+0x4f4>
 80066d6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80066da:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80066de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80066e2:	2200      	movs	r2, #0
 80066e4:	4b6f      	ldr	r3, [pc, #444]	; (80068a4 <_dtoa_r+0x5ac>)
 80066e6:	f7fa fa1d 	bl	8000b24 <__aeabi_dcmplt>
 80066ea:	2800      	cmp	r0, #0
 80066ec:	d07e      	beq.n	80067ec <_dtoa_r+0x4f4>
 80066ee:	9b08      	ldr	r3, [sp, #32]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d07b      	beq.n	80067ec <_dtoa_r+0x4f4>
 80066f4:	f1b9 0f00 	cmp.w	r9, #0
 80066f8:	dd38      	ble.n	800676c <_dtoa_r+0x474>
 80066fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80066fe:	2200      	movs	r2, #0
 8006700:	4b69      	ldr	r3, [pc, #420]	; (80068a8 <_dtoa_r+0x5b0>)
 8006702:	f7f9 ff9d 	bl	8000640 <__aeabi_dmul>
 8006706:	464c      	mov	r4, r9
 8006708:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800670c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006710:	3701      	adds	r7, #1
 8006712:	4638      	mov	r0, r7
 8006714:	f7f9 ff2a 	bl	800056c <__aeabi_i2d>
 8006718:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800671c:	f7f9 ff90 	bl	8000640 <__aeabi_dmul>
 8006720:	2200      	movs	r2, #0
 8006722:	4b62      	ldr	r3, [pc, #392]	; (80068ac <_dtoa_r+0x5b4>)
 8006724:	f7f9 fdd6 	bl	80002d4 <__adddf3>
 8006728:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800672c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006730:	9611      	str	r6, [sp, #68]	; 0x44
 8006732:	2c00      	cmp	r4, #0
 8006734:	d15d      	bne.n	80067f2 <_dtoa_r+0x4fa>
 8006736:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800673a:	2200      	movs	r2, #0
 800673c:	4b5c      	ldr	r3, [pc, #368]	; (80068b0 <_dtoa_r+0x5b8>)
 800673e:	f7f9 fdc7 	bl	80002d0 <__aeabi_dsub>
 8006742:	4602      	mov	r2, r0
 8006744:	460b      	mov	r3, r1
 8006746:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800674a:	4633      	mov	r3, r6
 800674c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800674e:	f7fa fa07 	bl	8000b60 <__aeabi_dcmpgt>
 8006752:	2800      	cmp	r0, #0
 8006754:	f040 829c 	bne.w	8006c90 <_dtoa_r+0x998>
 8006758:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800675c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800675e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006762:	f7fa f9df 	bl	8000b24 <__aeabi_dcmplt>
 8006766:	2800      	cmp	r0, #0
 8006768:	f040 8290 	bne.w	8006c8c <_dtoa_r+0x994>
 800676c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006770:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006774:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006776:	2b00      	cmp	r3, #0
 8006778:	f2c0 8152 	blt.w	8006a20 <_dtoa_r+0x728>
 800677c:	f1ba 0f0e 	cmp.w	sl, #14
 8006780:	f300 814e 	bgt.w	8006a20 <_dtoa_r+0x728>
 8006784:	4b45      	ldr	r3, [pc, #276]	; (800689c <_dtoa_r+0x5a4>)
 8006786:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800678a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800678e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006792:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006794:	2b00      	cmp	r3, #0
 8006796:	f280 80db 	bge.w	8006950 <_dtoa_r+0x658>
 800679a:	9b08      	ldr	r3, [sp, #32]
 800679c:	2b00      	cmp	r3, #0
 800679e:	f300 80d7 	bgt.w	8006950 <_dtoa_r+0x658>
 80067a2:	f040 8272 	bne.w	8006c8a <_dtoa_r+0x992>
 80067a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067aa:	2200      	movs	r2, #0
 80067ac:	4b40      	ldr	r3, [pc, #256]	; (80068b0 <_dtoa_r+0x5b8>)
 80067ae:	f7f9 ff47 	bl	8000640 <__aeabi_dmul>
 80067b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067b6:	f7fa f9c9 	bl	8000b4c <__aeabi_dcmpge>
 80067ba:	9c08      	ldr	r4, [sp, #32]
 80067bc:	4626      	mov	r6, r4
 80067be:	2800      	cmp	r0, #0
 80067c0:	f040 8248 	bne.w	8006c54 <_dtoa_r+0x95c>
 80067c4:	2331      	movs	r3, #49	; 0x31
 80067c6:	9f03      	ldr	r7, [sp, #12]
 80067c8:	f10a 0a01 	add.w	sl, sl, #1
 80067cc:	f807 3b01 	strb.w	r3, [r7], #1
 80067d0:	e244      	b.n	8006c5c <_dtoa_r+0x964>
 80067d2:	07e2      	lsls	r2, r4, #31
 80067d4:	d505      	bpl.n	80067e2 <_dtoa_r+0x4ea>
 80067d6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80067da:	f7f9 ff31 	bl	8000640 <__aeabi_dmul>
 80067de:	2301      	movs	r3, #1
 80067e0:	3701      	adds	r7, #1
 80067e2:	1064      	asrs	r4, r4, #1
 80067e4:	3608      	adds	r6, #8
 80067e6:	e76d      	b.n	80066c4 <_dtoa_r+0x3cc>
 80067e8:	2702      	movs	r7, #2
 80067ea:	e770      	b.n	80066ce <_dtoa_r+0x3d6>
 80067ec:	46d0      	mov	r8, sl
 80067ee:	9c08      	ldr	r4, [sp, #32]
 80067f0:	e78f      	b.n	8006712 <_dtoa_r+0x41a>
 80067f2:	9903      	ldr	r1, [sp, #12]
 80067f4:	4b29      	ldr	r3, [pc, #164]	; (800689c <_dtoa_r+0x5a4>)
 80067f6:	4421      	add	r1, r4
 80067f8:	9112      	str	r1, [sp, #72]	; 0x48
 80067fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80067fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006800:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006804:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006808:	2900      	cmp	r1, #0
 800680a:	d055      	beq.n	80068b8 <_dtoa_r+0x5c0>
 800680c:	2000      	movs	r0, #0
 800680e:	4929      	ldr	r1, [pc, #164]	; (80068b4 <_dtoa_r+0x5bc>)
 8006810:	f7fa f840 	bl	8000894 <__aeabi_ddiv>
 8006814:	463b      	mov	r3, r7
 8006816:	4632      	mov	r2, r6
 8006818:	f7f9 fd5a 	bl	80002d0 <__aeabi_dsub>
 800681c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006820:	9f03      	ldr	r7, [sp, #12]
 8006822:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006826:	f7fa f9bb 	bl	8000ba0 <__aeabi_d2iz>
 800682a:	4604      	mov	r4, r0
 800682c:	f7f9 fe9e 	bl	800056c <__aeabi_i2d>
 8006830:	4602      	mov	r2, r0
 8006832:	460b      	mov	r3, r1
 8006834:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006838:	f7f9 fd4a 	bl	80002d0 <__aeabi_dsub>
 800683c:	4602      	mov	r2, r0
 800683e:	460b      	mov	r3, r1
 8006840:	3430      	adds	r4, #48	; 0x30
 8006842:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006846:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800684a:	f807 4b01 	strb.w	r4, [r7], #1
 800684e:	f7fa f969 	bl	8000b24 <__aeabi_dcmplt>
 8006852:	2800      	cmp	r0, #0
 8006854:	d174      	bne.n	8006940 <_dtoa_r+0x648>
 8006856:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800685a:	2000      	movs	r0, #0
 800685c:	4911      	ldr	r1, [pc, #68]	; (80068a4 <_dtoa_r+0x5ac>)
 800685e:	f7f9 fd37 	bl	80002d0 <__aeabi_dsub>
 8006862:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006866:	f7fa f95d 	bl	8000b24 <__aeabi_dcmplt>
 800686a:	2800      	cmp	r0, #0
 800686c:	f040 80b7 	bne.w	80069de <_dtoa_r+0x6e6>
 8006870:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006872:	429f      	cmp	r7, r3
 8006874:	f43f af7a 	beq.w	800676c <_dtoa_r+0x474>
 8006878:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800687c:	2200      	movs	r2, #0
 800687e:	4b0a      	ldr	r3, [pc, #40]	; (80068a8 <_dtoa_r+0x5b0>)
 8006880:	f7f9 fede 	bl	8000640 <__aeabi_dmul>
 8006884:	2200      	movs	r2, #0
 8006886:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800688a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800688e:	4b06      	ldr	r3, [pc, #24]	; (80068a8 <_dtoa_r+0x5b0>)
 8006890:	f7f9 fed6 	bl	8000640 <__aeabi_dmul>
 8006894:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006898:	e7c3      	b.n	8006822 <_dtoa_r+0x52a>
 800689a:	bf00      	nop
 800689c:	08008900 	.word	0x08008900
 80068a0:	080088d8 	.word	0x080088d8
 80068a4:	3ff00000 	.word	0x3ff00000
 80068a8:	40240000 	.word	0x40240000
 80068ac:	401c0000 	.word	0x401c0000
 80068b0:	40140000 	.word	0x40140000
 80068b4:	3fe00000 	.word	0x3fe00000
 80068b8:	4630      	mov	r0, r6
 80068ba:	4639      	mov	r1, r7
 80068bc:	f7f9 fec0 	bl	8000640 <__aeabi_dmul>
 80068c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068c2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80068c6:	9c03      	ldr	r4, [sp, #12]
 80068c8:	9314      	str	r3, [sp, #80]	; 0x50
 80068ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068ce:	f7fa f967 	bl	8000ba0 <__aeabi_d2iz>
 80068d2:	9015      	str	r0, [sp, #84]	; 0x54
 80068d4:	f7f9 fe4a 	bl	800056c <__aeabi_i2d>
 80068d8:	4602      	mov	r2, r0
 80068da:	460b      	mov	r3, r1
 80068dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068e0:	f7f9 fcf6 	bl	80002d0 <__aeabi_dsub>
 80068e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80068e6:	4606      	mov	r6, r0
 80068e8:	3330      	adds	r3, #48	; 0x30
 80068ea:	f804 3b01 	strb.w	r3, [r4], #1
 80068ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068f0:	460f      	mov	r7, r1
 80068f2:	429c      	cmp	r4, r3
 80068f4:	f04f 0200 	mov.w	r2, #0
 80068f8:	d124      	bne.n	8006944 <_dtoa_r+0x64c>
 80068fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80068fe:	4bb0      	ldr	r3, [pc, #704]	; (8006bc0 <_dtoa_r+0x8c8>)
 8006900:	f7f9 fce8 	bl	80002d4 <__adddf3>
 8006904:	4602      	mov	r2, r0
 8006906:	460b      	mov	r3, r1
 8006908:	4630      	mov	r0, r6
 800690a:	4639      	mov	r1, r7
 800690c:	f7fa f928 	bl	8000b60 <__aeabi_dcmpgt>
 8006910:	2800      	cmp	r0, #0
 8006912:	d163      	bne.n	80069dc <_dtoa_r+0x6e4>
 8006914:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006918:	2000      	movs	r0, #0
 800691a:	49a9      	ldr	r1, [pc, #676]	; (8006bc0 <_dtoa_r+0x8c8>)
 800691c:	f7f9 fcd8 	bl	80002d0 <__aeabi_dsub>
 8006920:	4602      	mov	r2, r0
 8006922:	460b      	mov	r3, r1
 8006924:	4630      	mov	r0, r6
 8006926:	4639      	mov	r1, r7
 8006928:	f7fa f8fc 	bl	8000b24 <__aeabi_dcmplt>
 800692c:	2800      	cmp	r0, #0
 800692e:	f43f af1d 	beq.w	800676c <_dtoa_r+0x474>
 8006932:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006934:	1e7b      	subs	r3, r7, #1
 8006936:	9314      	str	r3, [sp, #80]	; 0x50
 8006938:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800693c:	2b30      	cmp	r3, #48	; 0x30
 800693e:	d0f8      	beq.n	8006932 <_dtoa_r+0x63a>
 8006940:	46c2      	mov	sl, r8
 8006942:	e03b      	b.n	80069bc <_dtoa_r+0x6c4>
 8006944:	4b9f      	ldr	r3, [pc, #636]	; (8006bc4 <_dtoa_r+0x8cc>)
 8006946:	f7f9 fe7b 	bl	8000640 <__aeabi_dmul>
 800694a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800694e:	e7bc      	b.n	80068ca <_dtoa_r+0x5d2>
 8006950:	9f03      	ldr	r7, [sp, #12]
 8006952:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006956:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800695a:	4640      	mov	r0, r8
 800695c:	4649      	mov	r1, r9
 800695e:	f7f9 ff99 	bl	8000894 <__aeabi_ddiv>
 8006962:	f7fa f91d 	bl	8000ba0 <__aeabi_d2iz>
 8006966:	4604      	mov	r4, r0
 8006968:	f7f9 fe00 	bl	800056c <__aeabi_i2d>
 800696c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006970:	f7f9 fe66 	bl	8000640 <__aeabi_dmul>
 8006974:	4602      	mov	r2, r0
 8006976:	460b      	mov	r3, r1
 8006978:	4640      	mov	r0, r8
 800697a:	4649      	mov	r1, r9
 800697c:	f7f9 fca8 	bl	80002d0 <__aeabi_dsub>
 8006980:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006984:	f807 6b01 	strb.w	r6, [r7], #1
 8006988:	9e03      	ldr	r6, [sp, #12]
 800698a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800698e:	1bbe      	subs	r6, r7, r6
 8006990:	45b4      	cmp	ip, r6
 8006992:	4602      	mov	r2, r0
 8006994:	460b      	mov	r3, r1
 8006996:	d136      	bne.n	8006a06 <_dtoa_r+0x70e>
 8006998:	f7f9 fc9c 	bl	80002d4 <__adddf3>
 800699c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80069a0:	4680      	mov	r8, r0
 80069a2:	4689      	mov	r9, r1
 80069a4:	f7fa f8dc 	bl	8000b60 <__aeabi_dcmpgt>
 80069a8:	bb58      	cbnz	r0, 8006a02 <_dtoa_r+0x70a>
 80069aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80069ae:	4640      	mov	r0, r8
 80069b0:	4649      	mov	r1, r9
 80069b2:	f7fa f8ad 	bl	8000b10 <__aeabi_dcmpeq>
 80069b6:	b108      	cbz	r0, 80069bc <_dtoa_r+0x6c4>
 80069b8:	07e1      	lsls	r1, r4, #31
 80069ba:	d422      	bmi.n	8006a02 <_dtoa_r+0x70a>
 80069bc:	4628      	mov	r0, r5
 80069be:	4659      	mov	r1, fp
 80069c0:	f000 faf0 	bl	8006fa4 <_Bfree>
 80069c4:	2300      	movs	r3, #0
 80069c6:	703b      	strb	r3, [r7, #0]
 80069c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80069ca:	f10a 0001 	add.w	r0, sl, #1
 80069ce:	6018      	str	r0, [r3, #0]
 80069d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f43f acde 	beq.w	8006394 <_dtoa_r+0x9c>
 80069d8:	601f      	str	r7, [r3, #0]
 80069da:	e4db      	b.n	8006394 <_dtoa_r+0x9c>
 80069dc:	4627      	mov	r7, r4
 80069de:	463b      	mov	r3, r7
 80069e0:	461f      	mov	r7, r3
 80069e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80069e6:	2a39      	cmp	r2, #57	; 0x39
 80069e8:	d107      	bne.n	80069fa <_dtoa_r+0x702>
 80069ea:	9a03      	ldr	r2, [sp, #12]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d1f7      	bne.n	80069e0 <_dtoa_r+0x6e8>
 80069f0:	2230      	movs	r2, #48	; 0x30
 80069f2:	9903      	ldr	r1, [sp, #12]
 80069f4:	f108 0801 	add.w	r8, r8, #1
 80069f8:	700a      	strb	r2, [r1, #0]
 80069fa:	781a      	ldrb	r2, [r3, #0]
 80069fc:	3201      	adds	r2, #1
 80069fe:	701a      	strb	r2, [r3, #0]
 8006a00:	e79e      	b.n	8006940 <_dtoa_r+0x648>
 8006a02:	46d0      	mov	r8, sl
 8006a04:	e7eb      	b.n	80069de <_dtoa_r+0x6e6>
 8006a06:	2200      	movs	r2, #0
 8006a08:	4b6e      	ldr	r3, [pc, #440]	; (8006bc4 <_dtoa_r+0x8cc>)
 8006a0a:	f7f9 fe19 	bl	8000640 <__aeabi_dmul>
 8006a0e:	2200      	movs	r2, #0
 8006a10:	2300      	movs	r3, #0
 8006a12:	4680      	mov	r8, r0
 8006a14:	4689      	mov	r9, r1
 8006a16:	f7fa f87b 	bl	8000b10 <__aeabi_dcmpeq>
 8006a1a:	2800      	cmp	r0, #0
 8006a1c:	d09b      	beq.n	8006956 <_dtoa_r+0x65e>
 8006a1e:	e7cd      	b.n	80069bc <_dtoa_r+0x6c4>
 8006a20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a22:	2a00      	cmp	r2, #0
 8006a24:	f000 80d0 	beq.w	8006bc8 <_dtoa_r+0x8d0>
 8006a28:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006a2a:	2a01      	cmp	r2, #1
 8006a2c:	f300 80ae 	bgt.w	8006b8c <_dtoa_r+0x894>
 8006a30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006a32:	2a00      	cmp	r2, #0
 8006a34:	f000 80a6 	beq.w	8006b84 <_dtoa_r+0x88c>
 8006a38:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006a3c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006a3e:	9f06      	ldr	r7, [sp, #24]
 8006a40:	9a06      	ldr	r2, [sp, #24]
 8006a42:	2101      	movs	r1, #1
 8006a44:	441a      	add	r2, r3
 8006a46:	9206      	str	r2, [sp, #24]
 8006a48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	441a      	add	r2, r3
 8006a4e:	9209      	str	r2, [sp, #36]	; 0x24
 8006a50:	f000 fb5e 	bl	8007110 <__i2b>
 8006a54:	4606      	mov	r6, r0
 8006a56:	2f00      	cmp	r7, #0
 8006a58:	dd0c      	ble.n	8006a74 <_dtoa_r+0x77c>
 8006a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	dd09      	ble.n	8006a74 <_dtoa_r+0x77c>
 8006a60:	42bb      	cmp	r3, r7
 8006a62:	bfa8      	it	ge
 8006a64:	463b      	movge	r3, r7
 8006a66:	9a06      	ldr	r2, [sp, #24]
 8006a68:	1aff      	subs	r7, r7, r3
 8006a6a:	1ad2      	subs	r2, r2, r3
 8006a6c:	9206      	str	r2, [sp, #24]
 8006a6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	9309      	str	r3, [sp, #36]	; 0x24
 8006a74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a76:	b1f3      	cbz	r3, 8006ab6 <_dtoa_r+0x7be>
 8006a78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f000 80a8 	beq.w	8006bd0 <_dtoa_r+0x8d8>
 8006a80:	2c00      	cmp	r4, #0
 8006a82:	dd10      	ble.n	8006aa6 <_dtoa_r+0x7ae>
 8006a84:	4631      	mov	r1, r6
 8006a86:	4622      	mov	r2, r4
 8006a88:	4628      	mov	r0, r5
 8006a8a:	f000 fbff 	bl	800728c <__pow5mult>
 8006a8e:	465a      	mov	r2, fp
 8006a90:	4601      	mov	r1, r0
 8006a92:	4606      	mov	r6, r0
 8006a94:	4628      	mov	r0, r5
 8006a96:	f000 fb51 	bl	800713c <__multiply>
 8006a9a:	4680      	mov	r8, r0
 8006a9c:	4659      	mov	r1, fp
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	f000 fa80 	bl	8006fa4 <_Bfree>
 8006aa4:	46c3      	mov	fp, r8
 8006aa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aa8:	1b1a      	subs	r2, r3, r4
 8006aaa:	d004      	beq.n	8006ab6 <_dtoa_r+0x7be>
 8006aac:	4659      	mov	r1, fp
 8006aae:	4628      	mov	r0, r5
 8006ab0:	f000 fbec 	bl	800728c <__pow5mult>
 8006ab4:	4683      	mov	fp, r0
 8006ab6:	2101      	movs	r1, #1
 8006ab8:	4628      	mov	r0, r5
 8006aba:	f000 fb29 	bl	8007110 <__i2b>
 8006abe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ac0:	4604      	mov	r4, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	f340 8086 	ble.w	8006bd4 <_dtoa_r+0x8dc>
 8006ac8:	461a      	mov	r2, r3
 8006aca:	4601      	mov	r1, r0
 8006acc:	4628      	mov	r0, r5
 8006ace:	f000 fbdd 	bl	800728c <__pow5mult>
 8006ad2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ad4:	4604      	mov	r4, r0
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	dd7f      	ble.n	8006bda <_dtoa_r+0x8e2>
 8006ada:	f04f 0800 	mov.w	r8, #0
 8006ade:	6923      	ldr	r3, [r4, #16]
 8006ae0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006ae4:	6918      	ldr	r0, [r3, #16]
 8006ae6:	f000 fac5 	bl	8007074 <__hi0bits>
 8006aea:	f1c0 0020 	rsb	r0, r0, #32
 8006aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006af0:	4418      	add	r0, r3
 8006af2:	f010 001f 	ands.w	r0, r0, #31
 8006af6:	f000 8092 	beq.w	8006c1e <_dtoa_r+0x926>
 8006afa:	f1c0 0320 	rsb	r3, r0, #32
 8006afe:	2b04      	cmp	r3, #4
 8006b00:	f340 808a 	ble.w	8006c18 <_dtoa_r+0x920>
 8006b04:	f1c0 001c 	rsb	r0, r0, #28
 8006b08:	9b06      	ldr	r3, [sp, #24]
 8006b0a:	4407      	add	r7, r0
 8006b0c:	4403      	add	r3, r0
 8006b0e:	9306      	str	r3, [sp, #24]
 8006b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b12:	4403      	add	r3, r0
 8006b14:	9309      	str	r3, [sp, #36]	; 0x24
 8006b16:	9b06      	ldr	r3, [sp, #24]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	dd05      	ble.n	8006b28 <_dtoa_r+0x830>
 8006b1c:	4659      	mov	r1, fp
 8006b1e:	461a      	mov	r2, r3
 8006b20:	4628      	mov	r0, r5
 8006b22:	f000 fc0d 	bl	8007340 <__lshift>
 8006b26:	4683      	mov	fp, r0
 8006b28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	dd05      	ble.n	8006b3a <_dtoa_r+0x842>
 8006b2e:	4621      	mov	r1, r4
 8006b30:	461a      	mov	r2, r3
 8006b32:	4628      	mov	r0, r5
 8006b34:	f000 fc04 	bl	8007340 <__lshift>
 8006b38:	4604      	mov	r4, r0
 8006b3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d070      	beq.n	8006c22 <_dtoa_r+0x92a>
 8006b40:	4621      	mov	r1, r4
 8006b42:	4658      	mov	r0, fp
 8006b44:	f000 fc6c 	bl	8007420 <__mcmp>
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	da6a      	bge.n	8006c22 <_dtoa_r+0x92a>
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	4659      	mov	r1, fp
 8006b50:	220a      	movs	r2, #10
 8006b52:	4628      	mov	r0, r5
 8006b54:	f000 fa48 	bl	8006fe8 <__multadd>
 8006b58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b5a:	4683      	mov	fp, r0
 8006b5c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f000 8194 	beq.w	8006e8e <_dtoa_r+0xb96>
 8006b66:	4631      	mov	r1, r6
 8006b68:	2300      	movs	r3, #0
 8006b6a:	220a      	movs	r2, #10
 8006b6c:	4628      	mov	r0, r5
 8006b6e:	f000 fa3b 	bl	8006fe8 <__multadd>
 8006b72:	f1b9 0f00 	cmp.w	r9, #0
 8006b76:	4606      	mov	r6, r0
 8006b78:	f300 8093 	bgt.w	8006ca2 <_dtoa_r+0x9aa>
 8006b7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	dc57      	bgt.n	8006c32 <_dtoa_r+0x93a>
 8006b82:	e08e      	b.n	8006ca2 <_dtoa_r+0x9aa>
 8006b84:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006b86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006b8a:	e757      	b.n	8006a3c <_dtoa_r+0x744>
 8006b8c:	9b08      	ldr	r3, [sp, #32]
 8006b8e:	1e5c      	subs	r4, r3, #1
 8006b90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b92:	42a3      	cmp	r3, r4
 8006b94:	bfb7      	itett	lt
 8006b96:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006b98:	1b1c      	subge	r4, r3, r4
 8006b9a:	1ae2      	sublt	r2, r4, r3
 8006b9c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006b9e:	bfbe      	ittt	lt
 8006ba0:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006ba2:	189b      	addlt	r3, r3, r2
 8006ba4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006ba6:	9b08      	ldr	r3, [sp, #32]
 8006ba8:	bfb8      	it	lt
 8006baa:	2400      	movlt	r4, #0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	bfbb      	ittet	lt
 8006bb0:	9b06      	ldrlt	r3, [sp, #24]
 8006bb2:	9a08      	ldrlt	r2, [sp, #32]
 8006bb4:	9f06      	ldrge	r7, [sp, #24]
 8006bb6:	1a9f      	sublt	r7, r3, r2
 8006bb8:	bfac      	ite	ge
 8006bba:	9b08      	ldrge	r3, [sp, #32]
 8006bbc:	2300      	movlt	r3, #0
 8006bbe:	e73f      	b.n	8006a40 <_dtoa_r+0x748>
 8006bc0:	3fe00000 	.word	0x3fe00000
 8006bc4:	40240000 	.word	0x40240000
 8006bc8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006bca:	9f06      	ldr	r7, [sp, #24]
 8006bcc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006bce:	e742      	b.n	8006a56 <_dtoa_r+0x75e>
 8006bd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bd2:	e76b      	b.n	8006aac <_dtoa_r+0x7b4>
 8006bd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	dc19      	bgt.n	8006c0e <_dtoa_r+0x916>
 8006bda:	9b04      	ldr	r3, [sp, #16]
 8006bdc:	b9bb      	cbnz	r3, 8006c0e <_dtoa_r+0x916>
 8006bde:	9b05      	ldr	r3, [sp, #20]
 8006be0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006be4:	b99b      	cbnz	r3, 8006c0e <_dtoa_r+0x916>
 8006be6:	9b05      	ldr	r3, [sp, #20]
 8006be8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bec:	0d1b      	lsrs	r3, r3, #20
 8006bee:	051b      	lsls	r3, r3, #20
 8006bf0:	b183      	cbz	r3, 8006c14 <_dtoa_r+0x91c>
 8006bf2:	f04f 0801 	mov.w	r8, #1
 8006bf6:	9b06      	ldr	r3, [sp, #24]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	9306      	str	r3, [sp, #24]
 8006bfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bfe:	3301      	adds	r3, #1
 8006c00:	9309      	str	r3, [sp, #36]	; 0x24
 8006c02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f47f af6a 	bne.w	8006ade <_dtoa_r+0x7e6>
 8006c0a:	2001      	movs	r0, #1
 8006c0c:	e76f      	b.n	8006aee <_dtoa_r+0x7f6>
 8006c0e:	f04f 0800 	mov.w	r8, #0
 8006c12:	e7f6      	b.n	8006c02 <_dtoa_r+0x90a>
 8006c14:	4698      	mov	r8, r3
 8006c16:	e7f4      	b.n	8006c02 <_dtoa_r+0x90a>
 8006c18:	f43f af7d 	beq.w	8006b16 <_dtoa_r+0x81e>
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	301c      	adds	r0, #28
 8006c20:	e772      	b.n	8006b08 <_dtoa_r+0x810>
 8006c22:	9b08      	ldr	r3, [sp, #32]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	dc36      	bgt.n	8006c96 <_dtoa_r+0x99e>
 8006c28:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	dd33      	ble.n	8006c96 <_dtoa_r+0x99e>
 8006c2e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c32:	f1b9 0f00 	cmp.w	r9, #0
 8006c36:	d10d      	bne.n	8006c54 <_dtoa_r+0x95c>
 8006c38:	4621      	mov	r1, r4
 8006c3a:	464b      	mov	r3, r9
 8006c3c:	2205      	movs	r2, #5
 8006c3e:	4628      	mov	r0, r5
 8006c40:	f000 f9d2 	bl	8006fe8 <__multadd>
 8006c44:	4601      	mov	r1, r0
 8006c46:	4604      	mov	r4, r0
 8006c48:	4658      	mov	r0, fp
 8006c4a:	f000 fbe9 	bl	8007420 <__mcmp>
 8006c4e:	2800      	cmp	r0, #0
 8006c50:	f73f adb8 	bgt.w	80067c4 <_dtoa_r+0x4cc>
 8006c54:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006c56:	9f03      	ldr	r7, [sp, #12]
 8006c58:	ea6f 0a03 	mvn.w	sl, r3
 8006c5c:	f04f 0800 	mov.w	r8, #0
 8006c60:	4621      	mov	r1, r4
 8006c62:	4628      	mov	r0, r5
 8006c64:	f000 f99e 	bl	8006fa4 <_Bfree>
 8006c68:	2e00      	cmp	r6, #0
 8006c6a:	f43f aea7 	beq.w	80069bc <_dtoa_r+0x6c4>
 8006c6e:	f1b8 0f00 	cmp.w	r8, #0
 8006c72:	d005      	beq.n	8006c80 <_dtoa_r+0x988>
 8006c74:	45b0      	cmp	r8, r6
 8006c76:	d003      	beq.n	8006c80 <_dtoa_r+0x988>
 8006c78:	4641      	mov	r1, r8
 8006c7a:	4628      	mov	r0, r5
 8006c7c:	f000 f992 	bl	8006fa4 <_Bfree>
 8006c80:	4631      	mov	r1, r6
 8006c82:	4628      	mov	r0, r5
 8006c84:	f000 f98e 	bl	8006fa4 <_Bfree>
 8006c88:	e698      	b.n	80069bc <_dtoa_r+0x6c4>
 8006c8a:	2400      	movs	r4, #0
 8006c8c:	4626      	mov	r6, r4
 8006c8e:	e7e1      	b.n	8006c54 <_dtoa_r+0x95c>
 8006c90:	46c2      	mov	sl, r8
 8006c92:	4626      	mov	r6, r4
 8006c94:	e596      	b.n	80067c4 <_dtoa_r+0x4cc>
 8006c96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f000 80fd 	beq.w	8006e9c <_dtoa_r+0xba4>
 8006ca2:	2f00      	cmp	r7, #0
 8006ca4:	dd05      	ble.n	8006cb2 <_dtoa_r+0x9ba>
 8006ca6:	4631      	mov	r1, r6
 8006ca8:	463a      	mov	r2, r7
 8006caa:	4628      	mov	r0, r5
 8006cac:	f000 fb48 	bl	8007340 <__lshift>
 8006cb0:	4606      	mov	r6, r0
 8006cb2:	f1b8 0f00 	cmp.w	r8, #0
 8006cb6:	d05c      	beq.n	8006d72 <_dtoa_r+0xa7a>
 8006cb8:	4628      	mov	r0, r5
 8006cba:	6871      	ldr	r1, [r6, #4]
 8006cbc:	f000 f932 	bl	8006f24 <_Balloc>
 8006cc0:	4607      	mov	r7, r0
 8006cc2:	b928      	cbnz	r0, 8006cd0 <_dtoa_r+0x9d8>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006cca:	4b7f      	ldr	r3, [pc, #508]	; (8006ec8 <_dtoa_r+0xbd0>)
 8006ccc:	f7ff bb28 	b.w	8006320 <_dtoa_r+0x28>
 8006cd0:	6932      	ldr	r2, [r6, #16]
 8006cd2:	f106 010c 	add.w	r1, r6, #12
 8006cd6:	3202      	adds	r2, #2
 8006cd8:	0092      	lsls	r2, r2, #2
 8006cda:	300c      	adds	r0, #12
 8006cdc:	f000 f914 	bl	8006f08 <memcpy>
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	4639      	mov	r1, r7
 8006ce4:	4628      	mov	r0, r5
 8006ce6:	f000 fb2b 	bl	8007340 <__lshift>
 8006cea:	46b0      	mov	r8, r6
 8006cec:	4606      	mov	r6, r0
 8006cee:	9b03      	ldr	r3, [sp, #12]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	9308      	str	r3, [sp, #32]
 8006cf4:	9b03      	ldr	r3, [sp, #12]
 8006cf6:	444b      	add	r3, r9
 8006cf8:	930a      	str	r3, [sp, #40]	; 0x28
 8006cfa:	9b04      	ldr	r3, [sp, #16]
 8006cfc:	f003 0301 	and.w	r3, r3, #1
 8006d00:	9309      	str	r3, [sp, #36]	; 0x24
 8006d02:	9b08      	ldr	r3, [sp, #32]
 8006d04:	4621      	mov	r1, r4
 8006d06:	3b01      	subs	r3, #1
 8006d08:	4658      	mov	r0, fp
 8006d0a:	9304      	str	r3, [sp, #16]
 8006d0c:	f7ff fa66 	bl	80061dc <quorem>
 8006d10:	4603      	mov	r3, r0
 8006d12:	4641      	mov	r1, r8
 8006d14:	3330      	adds	r3, #48	; 0x30
 8006d16:	9006      	str	r0, [sp, #24]
 8006d18:	4658      	mov	r0, fp
 8006d1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d1c:	f000 fb80 	bl	8007420 <__mcmp>
 8006d20:	4632      	mov	r2, r6
 8006d22:	4681      	mov	r9, r0
 8006d24:	4621      	mov	r1, r4
 8006d26:	4628      	mov	r0, r5
 8006d28:	f000 fb96 	bl	8007458 <__mdiff>
 8006d2c:	68c2      	ldr	r2, [r0, #12]
 8006d2e:	4607      	mov	r7, r0
 8006d30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d32:	bb02      	cbnz	r2, 8006d76 <_dtoa_r+0xa7e>
 8006d34:	4601      	mov	r1, r0
 8006d36:	4658      	mov	r0, fp
 8006d38:	f000 fb72 	bl	8007420 <__mcmp>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d40:	4639      	mov	r1, r7
 8006d42:	4628      	mov	r0, r5
 8006d44:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006d48:	f000 f92c 	bl	8006fa4 <_Bfree>
 8006d4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d50:	9f08      	ldr	r7, [sp, #32]
 8006d52:	ea43 0102 	orr.w	r1, r3, r2
 8006d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d58:	430b      	orrs	r3, r1
 8006d5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d5c:	d10d      	bne.n	8006d7a <_dtoa_r+0xa82>
 8006d5e:	2b39      	cmp	r3, #57	; 0x39
 8006d60:	d029      	beq.n	8006db6 <_dtoa_r+0xabe>
 8006d62:	f1b9 0f00 	cmp.w	r9, #0
 8006d66:	dd01      	ble.n	8006d6c <_dtoa_r+0xa74>
 8006d68:	9b06      	ldr	r3, [sp, #24]
 8006d6a:	3331      	adds	r3, #49	; 0x31
 8006d6c:	9a04      	ldr	r2, [sp, #16]
 8006d6e:	7013      	strb	r3, [r2, #0]
 8006d70:	e776      	b.n	8006c60 <_dtoa_r+0x968>
 8006d72:	4630      	mov	r0, r6
 8006d74:	e7b9      	b.n	8006cea <_dtoa_r+0x9f2>
 8006d76:	2201      	movs	r2, #1
 8006d78:	e7e2      	b.n	8006d40 <_dtoa_r+0xa48>
 8006d7a:	f1b9 0f00 	cmp.w	r9, #0
 8006d7e:	db06      	blt.n	8006d8e <_dtoa_r+0xa96>
 8006d80:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006d82:	ea41 0909 	orr.w	r9, r1, r9
 8006d86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d88:	ea59 0101 	orrs.w	r1, r9, r1
 8006d8c:	d120      	bne.n	8006dd0 <_dtoa_r+0xad8>
 8006d8e:	2a00      	cmp	r2, #0
 8006d90:	ddec      	ble.n	8006d6c <_dtoa_r+0xa74>
 8006d92:	4659      	mov	r1, fp
 8006d94:	2201      	movs	r2, #1
 8006d96:	4628      	mov	r0, r5
 8006d98:	9308      	str	r3, [sp, #32]
 8006d9a:	f000 fad1 	bl	8007340 <__lshift>
 8006d9e:	4621      	mov	r1, r4
 8006da0:	4683      	mov	fp, r0
 8006da2:	f000 fb3d 	bl	8007420 <__mcmp>
 8006da6:	2800      	cmp	r0, #0
 8006da8:	9b08      	ldr	r3, [sp, #32]
 8006daa:	dc02      	bgt.n	8006db2 <_dtoa_r+0xaba>
 8006dac:	d1de      	bne.n	8006d6c <_dtoa_r+0xa74>
 8006dae:	07da      	lsls	r2, r3, #31
 8006db0:	d5dc      	bpl.n	8006d6c <_dtoa_r+0xa74>
 8006db2:	2b39      	cmp	r3, #57	; 0x39
 8006db4:	d1d8      	bne.n	8006d68 <_dtoa_r+0xa70>
 8006db6:	2339      	movs	r3, #57	; 0x39
 8006db8:	9a04      	ldr	r2, [sp, #16]
 8006dba:	7013      	strb	r3, [r2, #0]
 8006dbc:	463b      	mov	r3, r7
 8006dbe:	461f      	mov	r7, r3
 8006dc0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	2a39      	cmp	r2, #57	; 0x39
 8006dc8:	d050      	beq.n	8006e6c <_dtoa_r+0xb74>
 8006dca:	3201      	adds	r2, #1
 8006dcc:	701a      	strb	r2, [r3, #0]
 8006dce:	e747      	b.n	8006c60 <_dtoa_r+0x968>
 8006dd0:	2a00      	cmp	r2, #0
 8006dd2:	dd03      	ble.n	8006ddc <_dtoa_r+0xae4>
 8006dd4:	2b39      	cmp	r3, #57	; 0x39
 8006dd6:	d0ee      	beq.n	8006db6 <_dtoa_r+0xabe>
 8006dd8:	3301      	adds	r3, #1
 8006dda:	e7c7      	b.n	8006d6c <_dtoa_r+0xa74>
 8006ddc:	9a08      	ldr	r2, [sp, #32]
 8006dde:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006de0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006de4:	428a      	cmp	r2, r1
 8006de6:	d02a      	beq.n	8006e3e <_dtoa_r+0xb46>
 8006de8:	4659      	mov	r1, fp
 8006dea:	2300      	movs	r3, #0
 8006dec:	220a      	movs	r2, #10
 8006dee:	4628      	mov	r0, r5
 8006df0:	f000 f8fa 	bl	8006fe8 <__multadd>
 8006df4:	45b0      	cmp	r8, r6
 8006df6:	4683      	mov	fp, r0
 8006df8:	f04f 0300 	mov.w	r3, #0
 8006dfc:	f04f 020a 	mov.w	r2, #10
 8006e00:	4641      	mov	r1, r8
 8006e02:	4628      	mov	r0, r5
 8006e04:	d107      	bne.n	8006e16 <_dtoa_r+0xb1e>
 8006e06:	f000 f8ef 	bl	8006fe8 <__multadd>
 8006e0a:	4680      	mov	r8, r0
 8006e0c:	4606      	mov	r6, r0
 8006e0e:	9b08      	ldr	r3, [sp, #32]
 8006e10:	3301      	adds	r3, #1
 8006e12:	9308      	str	r3, [sp, #32]
 8006e14:	e775      	b.n	8006d02 <_dtoa_r+0xa0a>
 8006e16:	f000 f8e7 	bl	8006fe8 <__multadd>
 8006e1a:	4631      	mov	r1, r6
 8006e1c:	4680      	mov	r8, r0
 8006e1e:	2300      	movs	r3, #0
 8006e20:	220a      	movs	r2, #10
 8006e22:	4628      	mov	r0, r5
 8006e24:	f000 f8e0 	bl	8006fe8 <__multadd>
 8006e28:	4606      	mov	r6, r0
 8006e2a:	e7f0      	b.n	8006e0e <_dtoa_r+0xb16>
 8006e2c:	f1b9 0f00 	cmp.w	r9, #0
 8006e30:	bfcc      	ite	gt
 8006e32:	464f      	movgt	r7, r9
 8006e34:	2701      	movle	r7, #1
 8006e36:	f04f 0800 	mov.w	r8, #0
 8006e3a:	9a03      	ldr	r2, [sp, #12]
 8006e3c:	4417      	add	r7, r2
 8006e3e:	4659      	mov	r1, fp
 8006e40:	2201      	movs	r2, #1
 8006e42:	4628      	mov	r0, r5
 8006e44:	9308      	str	r3, [sp, #32]
 8006e46:	f000 fa7b 	bl	8007340 <__lshift>
 8006e4a:	4621      	mov	r1, r4
 8006e4c:	4683      	mov	fp, r0
 8006e4e:	f000 fae7 	bl	8007420 <__mcmp>
 8006e52:	2800      	cmp	r0, #0
 8006e54:	dcb2      	bgt.n	8006dbc <_dtoa_r+0xac4>
 8006e56:	d102      	bne.n	8006e5e <_dtoa_r+0xb66>
 8006e58:	9b08      	ldr	r3, [sp, #32]
 8006e5a:	07db      	lsls	r3, r3, #31
 8006e5c:	d4ae      	bmi.n	8006dbc <_dtoa_r+0xac4>
 8006e5e:	463b      	mov	r3, r7
 8006e60:	461f      	mov	r7, r3
 8006e62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e66:	2a30      	cmp	r2, #48	; 0x30
 8006e68:	d0fa      	beq.n	8006e60 <_dtoa_r+0xb68>
 8006e6a:	e6f9      	b.n	8006c60 <_dtoa_r+0x968>
 8006e6c:	9a03      	ldr	r2, [sp, #12]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d1a5      	bne.n	8006dbe <_dtoa_r+0xac6>
 8006e72:	2331      	movs	r3, #49	; 0x31
 8006e74:	f10a 0a01 	add.w	sl, sl, #1
 8006e78:	e779      	b.n	8006d6e <_dtoa_r+0xa76>
 8006e7a:	4b14      	ldr	r3, [pc, #80]	; (8006ecc <_dtoa_r+0xbd4>)
 8006e7c:	f7ff baa8 	b.w	80063d0 <_dtoa_r+0xd8>
 8006e80:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f47f aa81 	bne.w	800638a <_dtoa_r+0x92>
 8006e88:	4b11      	ldr	r3, [pc, #68]	; (8006ed0 <_dtoa_r+0xbd8>)
 8006e8a:	f7ff baa1 	b.w	80063d0 <_dtoa_r+0xd8>
 8006e8e:	f1b9 0f00 	cmp.w	r9, #0
 8006e92:	dc03      	bgt.n	8006e9c <_dtoa_r+0xba4>
 8006e94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e96:	2b02      	cmp	r3, #2
 8006e98:	f73f aecb 	bgt.w	8006c32 <_dtoa_r+0x93a>
 8006e9c:	9f03      	ldr	r7, [sp, #12]
 8006e9e:	4621      	mov	r1, r4
 8006ea0:	4658      	mov	r0, fp
 8006ea2:	f7ff f99b 	bl	80061dc <quorem>
 8006ea6:	9a03      	ldr	r2, [sp, #12]
 8006ea8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006eac:	f807 3b01 	strb.w	r3, [r7], #1
 8006eb0:	1aba      	subs	r2, r7, r2
 8006eb2:	4591      	cmp	r9, r2
 8006eb4:	ddba      	ble.n	8006e2c <_dtoa_r+0xb34>
 8006eb6:	4659      	mov	r1, fp
 8006eb8:	2300      	movs	r3, #0
 8006eba:	220a      	movs	r2, #10
 8006ebc:	4628      	mov	r0, r5
 8006ebe:	f000 f893 	bl	8006fe8 <__multadd>
 8006ec2:	4683      	mov	fp, r0
 8006ec4:	e7eb      	b.n	8006e9e <_dtoa_r+0xba6>
 8006ec6:	bf00      	nop
 8006ec8:	08008867 	.word	0x08008867
 8006ecc:	080087c4 	.word	0x080087c4
 8006ed0:	080087e8 	.word	0x080087e8

08006ed4 <_localeconv_r>:
 8006ed4:	4800      	ldr	r0, [pc, #0]	; (8006ed8 <_localeconv_r+0x4>)
 8006ed6:	4770      	bx	lr
 8006ed8:	20000170 	.word	0x20000170

08006edc <malloc>:
 8006edc:	4b02      	ldr	r3, [pc, #8]	; (8006ee8 <malloc+0xc>)
 8006ede:	4601      	mov	r1, r0
 8006ee0:	6818      	ldr	r0, [r3, #0]
 8006ee2:	f000 bc1d 	b.w	8007720 <_malloc_r>
 8006ee6:	bf00      	nop
 8006ee8:	2000001c 	.word	0x2000001c

08006eec <memchr>:
 8006eec:	4603      	mov	r3, r0
 8006eee:	b510      	push	{r4, lr}
 8006ef0:	b2c9      	uxtb	r1, r1
 8006ef2:	4402      	add	r2, r0
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	d101      	bne.n	8006efe <memchr+0x12>
 8006efa:	2000      	movs	r0, #0
 8006efc:	e003      	b.n	8006f06 <memchr+0x1a>
 8006efe:	7804      	ldrb	r4, [r0, #0]
 8006f00:	3301      	adds	r3, #1
 8006f02:	428c      	cmp	r4, r1
 8006f04:	d1f6      	bne.n	8006ef4 <memchr+0x8>
 8006f06:	bd10      	pop	{r4, pc}

08006f08 <memcpy>:
 8006f08:	440a      	add	r2, r1
 8006f0a:	4291      	cmp	r1, r2
 8006f0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f10:	d100      	bne.n	8006f14 <memcpy+0xc>
 8006f12:	4770      	bx	lr
 8006f14:	b510      	push	{r4, lr}
 8006f16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f1a:	4291      	cmp	r1, r2
 8006f1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f20:	d1f9      	bne.n	8006f16 <memcpy+0xe>
 8006f22:	bd10      	pop	{r4, pc}

08006f24 <_Balloc>:
 8006f24:	b570      	push	{r4, r5, r6, lr}
 8006f26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006f28:	4604      	mov	r4, r0
 8006f2a:	460d      	mov	r5, r1
 8006f2c:	b976      	cbnz	r6, 8006f4c <_Balloc+0x28>
 8006f2e:	2010      	movs	r0, #16
 8006f30:	f7ff ffd4 	bl	8006edc <malloc>
 8006f34:	4602      	mov	r2, r0
 8006f36:	6260      	str	r0, [r4, #36]	; 0x24
 8006f38:	b920      	cbnz	r0, 8006f44 <_Balloc+0x20>
 8006f3a:	2166      	movs	r1, #102	; 0x66
 8006f3c:	4b17      	ldr	r3, [pc, #92]	; (8006f9c <_Balloc+0x78>)
 8006f3e:	4818      	ldr	r0, [pc, #96]	; (8006fa0 <_Balloc+0x7c>)
 8006f40:	f000 fdce 	bl	8007ae0 <__assert_func>
 8006f44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f48:	6006      	str	r6, [r0, #0]
 8006f4a:	60c6      	str	r6, [r0, #12]
 8006f4c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006f4e:	68f3      	ldr	r3, [r6, #12]
 8006f50:	b183      	cbz	r3, 8006f74 <_Balloc+0x50>
 8006f52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f5a:	b9b8      	cbnz	r0, 8006f8c <_Balloc+0x68>
 8006f5c:	2101      	movs	r1, #1
 8006f5e:	fa01 f605 	lsl.w	r6, r1, r5
 8006f62:	1d72      	adds	r2, r6, #5
 8006f64:	4620      	mov	r0, r4
 8006f66:	0092      	lsls	r2, r2, #2
 8006f68:	f000 fb5e 	bl	8007628 <_calloc_r>
 8006f6c:	b160      	cbz	r0, 8006f88 <_Balloc+0x64>
 8006f6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006f72:	e00e      	b.n	8006f92 <_Balloc+0x6e>
 8006f74:	2221      	movs	r2, #33	; 0x21
 8006f76:	2104      	movs	r1, #4
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f000 fb55 	bl	8007628 <_calloc_r>
 8006f7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f80:	60f0      	str	r0, [r6, #12]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d1e4      	bne.n	8006f52 <_Balloc+0x2e>
 8006f88:	2000      	movs	r0, #0
 8006f8a:	bd70      	pop	{r4, r5, r6, pc}
 8006f8c:	6802      	ldr	r2, [r0, #0]
 8006f8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006f92:	2300      	movs	r3, #0
 8006f94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006f98:	e7f7      	b.n	8006f8a <_Balloc+0x66>
 8006f9a:	bf00      	nop
 8006f9c:	080087f5 	.word	0x080087f5
 8006fa0:	08008878 	.word	0x08008878

08006fa4 <_Bfree>:
 8006fa4:	b570      	push	{r4, r5, r6, lr}
 8006fa6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006fa8:	4605      	mov	r5, r0
 8006faa:	460c      	mov	r4, r1
 8006fac:	b976      	cbnz	r6, 8006fcc <_Bfree+0x28>
 8006fae:	2010      	movs	r0, #16
 8006fb0:	f7ff ff94 	bl	8006edc <malloc>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	6268      	str	r0, [r5, #36]	; 0x24
 8006fb8:	b920      	cbnz	r0, 8006fc4 <_Bfree+0x20>
 8006fba:	218a      	movs	r1, #138	; 0x8a
 8006fbc:	4b08      	ldr	r3, [pc, #32]	; (8006fe0 <_Bfree+0x3c>)
 8006fbe:	4809      	ldr	r0, [pc, #36]	; (8006fe4 <_Bfree+0x40>)
 8006fc0:	f000 fd8e 	bl	8007ae0 <__assert_func>
 8006fc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006fc8:	6006      	str	r6, [r0, #0]
 8006fca:	60c6      	str	r6, [r0, #12]
 8006fcc:	b13c      	cbz	r4, 8006fde <_Bfree+0x3a>
 8006fce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006fd0:	6862      	ldr	r2, [r4, #4]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006fd8:	6021      	str	r1, [r4, #0]
 8006fda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006fde:	bd70      	pop	{r4, r5, r6, pc}
 8006fe0:	080087f5 	.word	0x080087f5
 8006fe4:	08008878 	.word	0x08008878

08006fe8 <__multadd>:
 8006fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fec:	4607      	mov	r7, r0
 8006fee:	460c      	mov	r4, r1
 8006ff0:	461e      	mov	r6, r3
 8006ff2:	2000      	movs	r0, #0
 8006ff4:	690d      	ldr	r5, [r1, #16]
 8006ff6:	f101 0c14 	add.w	ip, r1, #20
 8006ffa:	f8dc 3000 	ldr.w	r3, [ip]
 8006ffe:	3001      	adds	r0, #1
 8007000:	b299      	uxth	r1, r3
 8007002:	fb02 6101 	mla	r1, r2, r1, r6
 8007006:	0c1e      	lsrs	r6, r3, #16
 8007008:	0c0b      	lsrs	r3, r1, #16
 800700a:	fb02 3306 	mla	r3, r2, r6, r3
 800700e:	b289      	uxth	r1, r1
 8007010:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007014:	4285      	cmp	r5, r0
 8007016:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800701a:	f84c 1b04 	str.w	r1, [ip], #4
 800701e:	dcec      	bgt.n	8006ffa <__multadd+0x12>
 8007020:	b30e      	cbz	r6, 8007066 <__multadd+0x7e>
 8007022:	68a3      	ldr	r3, [r4, #8]
 8007024:	42ab      	cmp	r3, r5
 8007026:	dc19      	bgt.n	800705c <__multadd+0x74>
 8007028:	6861      	ldr	r1, [r4, #4]
 800702a:	4638      	mov	r0, r7
 800702c:	3101      	adds	r1, #1
 800702e:	f7ff ff79 	bl	8006f24 <_Balloc>
 8007032:	4680      	mov	r8, r0
 8007034:	b928      	cbnz	r0, 8007042 <__multadd+0x5a>
 8007036:	4602      	mov	r2, r0
 8007038:	21b5      	movs	r1, #181	; 0xb5
 800703a:	4b0c      	ldr	r3, [pc, #48]	; (800706c <__multadd+0x84>)
 800703c:	480c      	ldr	r0, [pc, #48]	; (8007070 <__multadd+0x88>)
 800703e:	f000 fd4f 	bl	8007ae0 <__assert_func>
 8007042:	6922      	ldr	r2, [r4, #16]
 8007044:	f104 010c 	add.w	r1, r4, #12
 8007048:	3202      	adds	r2, #2
 800704a:	0092      	lsls	r2, r2, #2
 800704c:	300c      	adds	r0, #12
 800704e:	f7ff ff5b 	bl	8006f08 <memcpy>
 8007052:	4621      	mov	r1, r4
 8007054:	4638      	mov	r0, r7
 8007056:	f7ff ffa5 	bl	8006fa4 <_Bfree>
 800705a:	4644      	mov	r4, r8
 800705c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007060:	3501      	adds	r5, #1
 8007062:	615e      	str	r6, [r3, #20]
 8007064:	6125      	str	r5, [r4, #16]
 8007066:	4620      	mov	r0, r4
 8007068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800706c:	08008867 	.word	0x08008867
 8007070:	08008878 	.word	0x08008878

08007074 <__hi0bits>:
 8007074:	0c02      	lsrs	r2, r0, #16
 8007076:	0412      	lsls	r2, r2, #16
 8007078:	4603      	mov	r3, r0
 800707a:	b9ca      	cbnz	r2, 80070b0 <__hi0bits+0x3c>
 800707c:	0403      	lsls	r3, r0, #16
 800707e:	2010      	movs	r0, #16
 8007080:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007084:	bf04      	itt	eq
 8007086:	021b      	lsleq	r3, r3, #8
 8007088:	3008      	addeq	r0, #8
 800708a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800708e:	bf04      	itt	eq
 8007090:	011b      	lsleq	r3, r3, #4
 8007092:	3004      	addeq	r0, #4
 8007094:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007098:	bf04      	itt	eq
 800709a:	009b      	lsleq	r3, r3, #2
 800709c:	3002      	addeq	r0, #2
 800709e:	2b00      	cmp	r3, #0
 80070a0:	db05      	blt.n	80070ae <__hi0bits+0x3a>
 80070a2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80070a6:	f100 0001 	add.w	r0, r0, #1
 80070aa:	bf08      	it	eq
 80070ac:	2020      	moveq	r0, #32
 80070ae:	4770      	bx	lr
 80070b0:	2000      	movs	r0, #0
 80070b2:	e7e5      	b.n	8007080 <__hi0bits+0xc>

080070b4 <__lo0bits>:
 80070b4:	6803      	ldr	r3, [r0, #0]
 80070b6:	4602      	mov	r2, r0
 80070b8:	f013 0007 	ands.w	r0, r3, #7
 80070bc:	d00b      	beq.n	80070d6 <__lo0bits+0x22>
 80070be:	07d9      	lsls	r1, r3, #31
 80070c0:	d421      	bmi.n	8007106 <__lo0bits+0x52>
 80070c2:	0798      	lsls	r0, r3, #30
 80070c4:	bf49      	itett	mi
 80070c6:	085b      	lsrmi	r3, r3, #1
 80070c8:	089b      	lsrpl	r3, r3, #2
 80070ca:	2001      	movmi	r0, #1
 80070cc:	6013      	strmi	r3, [r2, #0]
 80070ce:	bf5c      	itt	pl
 80070d0:	2002      	movpl	r0, #2
 80070d2:	6013      	strpl	r3, [r2, #0]
 80070d4:	4770      	bx	lr
 80070d6:	b299      	uxth	r1, r3
 80070d8:	b909      	cbnz	r1, 80070de <__lo0bits+0x2a>
 80070da:	2010      	movs	r0, #16
 80070dc:	0c1b      	lsrs	r3, r3, #16
 80070de:	b2d9      	uxtb	r1, r3
 80070e0:	b909      	cbnz	r1, 80070e6 <__lo0bits+0x32>
 80070e2:	3008      	adds	r0, #8
 80070e4:	0a1b      	lsrs	r3, r3, #8
 80070e6:	0719      	lsls	r1, r3, #28
 80070e8:	bf04      	itt	eq
 80070ea:	091b      	lsreq	r3, r3, #4
 80070ec:	3004      	addeq	r0, #4
 80070ee:	0799      	lsls	r1, r3, #30
 80070f0:	bf04      	itt	eq
 80070f2:	089b      	lsreq	r3, r3, #2
 80070f4:	3002      	addeq	r0, #2
 80070f6:	07d9      	lsls	r1, r3, #31
 80070f8:	d403      	bmi.n	8007102 <__lo0bits+0x4e>
 80070fa:	085b      	lsrs	r3, r3, #1
 80070fc:	f100 0001 	add.w	r0, r0, #1
 8007100:	d003      	beq.n	800710a <__lo0bits+0x56>
 8007102:	6013      	str	r3, [r2, #0]
 8007104:	4770      	bx	lr
 8007106:	2000      	movs	r0, #0
 8007108:	4770      	bx	lr
 800710a:	2020      	movs	r0, #32
 800710c:	4770      	bx	lr
	...

08007110 <__i2b>:
 8007110:	b510      	push	{r4, lr}
 8007112:	460c      	mov	r4, r1
 8007114:	2101      	movs	r1, #1
 8007116:	f7ff ff05 	bl	8006f24 <_Balloc>
 800711a:	4602      	mov	r2, r0
 800711c:	b928      	cbnz	r0, 800712a <__i2b+0x1a>
 800711e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007122:	4b04      	ldr	r3, [pc, #16]	; (8007134 <__i2b+0x24>)
 8007124:	4804      	ldr	r0, [pc, #16]	; (8007138 <__i2b+0x28>)
 8007126:	f000 fcdb 	bl	8007ae0 <__assert_func>
 800712a:	2301      	movs	r3, #1
 800712c:	6144      	str	r4, [r0, #20]
 800712e:	6103      	str	r3, [r0, #16]
 8007130:	bd10      	pop	{r4, pc}
 8007132:	bf00      	nop
 8007134:	08008867 	.word	0x08008867
 8007138:	08008878 	.word	0x08008878

0800713c <__multiply>:
 800713c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007140:	4691      	mov	r9, r2
 8007142:	690a      	ldr	r2, [r1, #16]
 8007144:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007148:	460c      	mov	r4, r1
 800714a:	429a      	cmp	r2, r3
 800714c:	bfbe      	ittt	lt
 800714e:	460b      	movlt	r3, r1
 8007150:	464c      	movlt	r4, r9
 8007152:	4699      	movlt	r9, r3
 8007154:	6927      	ldr	r7, [r4, #16]
 8007156:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800715a:	68a3      	ldr	r3, [r4, #8]
 800715c:	6861      	ldr	r1, [r4, #4]
 800715e:	eb07 060a 	add.w	r6, r7, sl
 8007162:	42b3      	cmp	r3, r6
 8007164:	b085      	sub	sp, #20
 8007166:	bfb8      	it	lt
 8007168:	3101      	addlt	r1, #1
 800716a:	f7ff fedb 	bl	8006f24 <_Balloc>
 800716e:	b930      	cbnz	r0, 800717e <__multiply+0x42>
 8007170:	4602      	mov	r2, r0
 8007172:	f240 115d 	movw	r1, #349	; 0x15d
 8007176:	4b43      	ldr	r3, [pc, #268]	; (8007284 <__multiply+0x148>)
 8007178:	4843      	ldr	r0, [pc, #268]	; (8007288 <__multiply+0x14c>)
 800717a:	f000 fcb1 	bl	8007ae0 <__assert_func>
 800717e:	f100 0514 	add.w	r5, r0, #20
 8007182:	462b      	mov	r3, r5
 8007184:	2200      	movs	r2, #0
 8007186:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800718a:	4543      	cmp	r3, r8
 800718c:	d321      	bcc.n	80071d2 <__multiply+0x96>
 800718e:	f104 0314 	add.w	r3, r4, #20
 8007192:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007196:	f109 0314 	add.w	r3, r9, #20
 800719a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800719e:	9202      	str	r2, [sp, #8]
 80071a0:	1b3a      	subs	r2, r7, r4
 80071a2:	3a15      	subs	r2, #21
 80071a4:	f022 0203 	bic.w	r2, r2, #3
 80071a8:	3204      	adds	r2, #4
 80071aa:	f104 0115 	add.w	r1, r4, #21
 80071ae:	428f      	cmp	r7, r1
 80071b0:	bf38      	it	cc
 80071b2:	2204      	movcc	r2, #4
 80071b4:	9201      	str	r2, [sp, #4]
 80071b6:	9a02      	ldr	r2, [sp, #8]
 80071b8:	9303      	str	r3, [sp, #12]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d80c      	bhi.n	80071d8 <__multiply+0x9c>
 80071be:	2e00      	cmp	r6, #0
 80071c0:	dd03      	ble.n	80071ca <__multiply+0x8e>
 80071c2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d059      	beq.n	800727e <__multiply+0x142>
 80071ca:	6106      	str	r6, [r0, #16]
 80071cc:	b005      	add	sp, #20
 80071ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071d2:	f843 2b04 	str.w	r2, [r3], #4
 80071d6:	e7d8      	b.n	800718a <__multiply+0x4e>
 80071d8:	f8b3 a000 	ldrh.w	sl, [r3]
 80071dc:	f1ba 0f00 	cmp.w	sl, #0
 80071e0:	d023      	beq.n	800722a <__multiply+0xee>
 80071e2:	46a9      	mov	r9, r5
 80071e4:	f04f 0c00 	mov.w	ip, #0
 80071e8:	f104 0e14 	add.w	lr, r4, #20
 80071ec:	f85e 2b04 	ldr.w	r2, [lr], #4
 80071f0:	f8d9 1000 	ldr.w	r1, [r9]
 80071f4:	fa1f fb82 	uxth.w	fp, r2
 80071f8:	b289      	uxth	r1, r1
 80071fa:	fb0a 110b 	mla	r1, sl, fp, r1
 80071fe:	4461      	add	r1, ip
 8007200:	f8d9 c000 	ldr.w	ip, [r9]
 8007204:	0c12      	lsrs	r2, r2, #16
 8007206:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800720a:	fb0a c202 	mla	r2, sl, r2, ip
 800720e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007212:	b289      	uxth	r1, r1
 8007214:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007218:	4577      	cmp	r7, lr
 800721a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800721e:	f849 1b04 	str.w	r1, [r9], #4
 8007222:	d8e3      	bhi.n	80071ec <__multiply+0xb0>
 8007224:	9a01      	ldr	r2, [sp, #4]
 8007226:	f845 c002 	str.w	ip, [r5, r2]
 800722a:	9a03      	ldr	r2, [sp, #12]
 800722c:	3304      	adds	r3, #4
 800722e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007232:	f1b9 0f00 	cmp.w	r9, #0
 8007236:	d020      	beq.n	800727a <__multiply+0x13e>
 8007238:	46ae      	mov	lr, r5
 800723a:	f04f 0a00 	mov.w	sl, #0
 800723e:	6829      	ldr	r1, [r5, #0]
 8007240:	f104 0c14 	add.w	ip, r4, #20
 8007244:	f8bc b000 	ldrh.w	fp, [ip]
 8007248:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800724c:	b289      	uxth	r1, r1
 800724e:	fb09 220b 	mla	r2, r9, fp, r2
 8007252:	4492      	add	sl, r2
 8007254:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007258:	f84e 1b04 	str.w	r1, [lr], #4
 800725c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007260:	f8be 1000 	ldrh.w	r1, [lr]
 8007264:	0c12      	lsrs	r2, r2, #16
 8007266:	fb09 1102 	mla	r1, r9, r2, r1
 800726a:	4567      	cmp	r7, ip
 800726c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007270:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007274:	d8e6      	bhi.n	8007244 <__multiply+0x108>
 8007276:	9a01      	ldr	r2, [sp, #4]
 8007278:	50a9      	str	r1, [r5, r2]
 800727a:	3504      	adds	r5, #4
 800727c:	e79b      	b.n	80071b6 <__multiply+0x7a>
 800727e:	3e01      	subs	r6, #1
 8007280:	e79d      	b.n	80071be <__multiply+0x82>
 8007282:	bf00      	nop
 8007284:	08008867 	.word	0x08008867
 8007288:	08008878 	.word	0x08008878

0800728c <__pow5mult>:
 800728c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007290:	4615      	mov	r5, r2
 8007292:	f012 0203 	ands.w	r2, r2, #3
 8007296:	4606      	mov	r6, r0
 8007298:	460f      	mov	r7, r1
 800729a:	d007      	beq.n	80072ac <__pow5mult+0x20>
 800729c:	4c25      	ldr	r4, [pc, #148]	; (8007334 <__pow5mult+0xa8>)
 800729e:	3a01      	subs	r2, #1
 80072a0:	2300      	movs	r3, #0
 80072a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80072a6:	f7ff fe9f 	bl	8006fe8 <__multadd>
 80072aa:	4607      	mov	r7, r0
 80072ac:	10ad      	asrs	r5, r5, #2
 80072ae:	d03d      	beq.n	800732c <__pow5mult+0xa0>
 80072b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80072b2:	b97c      	cbnz	r4, 80072d4 <__pow5mult+0x48>
 80072b4:	2010      	movs	r0, #16
 80072b6:	f7ff fe11 	bl	8006edc <malloc>
 80072ba:	4602      	mov	r2, r0
 80072bc:	6270      	str	r0, [r6, #36]	; 0x24
 80072be:	b928      	cbnz	r0, 80072cc <__pow5mult+0x40>
 80072c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80072c4:	4b1c      	ldr	r3, [pc, #112]	; (8007338 <__pow5mult+0xac>)
 80072c6:	481d      	ldr	r0, [pc, #116]	; (800733c <__pow5mult+0xb0>)
 80072c8:	f000 fc0a 	bl	8007ae0 <__assert_func>
 80072cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80072d0:	6004      	str	r4, [r0, #0]
 80072d2:	60c4      	str	r4, [r0, #12]
 80072d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80072d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80072dc:	b94c      	cbnz	r4, 80072f2 <__pow5mult+0x66>
 80072de:	f240 2171 	movw	r1, #625	; 0x271
 80072e2:	4630      	mov	r0, r6
 80072e4:	f7ff ff14 	bl	8007110 <__i2b>
 80072e8:	2300      	movs	r3, #0
 80072ea:	4604      	mov	r4, r0
 80072ec:	f8c8 0008 	str.w	r0, [r8, #8]
 80072f0:	6003      	str	r3, [r0, #0]
 80072f2:	f04f 0900 	mov.w	r9, #0
 80072f6:	07eb      	lsls	r3, r5, #31
 80072f8:	d50a      	bpl.n	8007310 <__pow5mult+0x84>
 80072fa:	4639      	mov	r1, r7
 80072fc:	4622      	mov	r2, r4
 80072fe:	4630      	mov	r0, r6
 8007300:	f7ff ff1c 	bl	800713c <__multiply>
 8007304:	4680      	mov	r8, r0
 8007306:	4639      	mov	r1, r7
 8007308:	4630      	mov	r0, r6
 800730a:	f7ff fe4b 	bl	8006fa4 <_Bfree>
 800730e:	4647      	mov	r7, r8
 8007310:	106d      	asrs	r5, r5, #1
 8007312:	d00b      	beq.n	800732c <__pow5mult+0xa0>
 8007314:	6820      	ldr	r0, [r4, #0]
 8007316:	b938      	cbnz	r0, 8007328 <__pow5mult+0x9c>
 8007318:	4622      	mov	r2, r4
 800731a:	4621      	mov	r1, r4
 800731c:	4630      	mov	r0, r6
 800731e:	f7ff ff0d 	bl	800713c <__multiply>
 8007322:	6020      	str	r0, [r4, #0]
 8007324:	f8c0 9000 	str.w	r9, [r0]
 8007328:	4604      	mov	r4, r0
 800732a:	e7e4      	b.n	80072f6 <__pow5mult+0x6a>
 800732c:	4638      	mov	r0, r7
 800732e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007332:	bf00      	nop
 8007334:	080089c8 	.word	0x080089c8
 8007338:	080087f5 	.word	0x080087f5
 800733c:	08008878 	.word	0x08008878

08007340 <__lshift>:
 8007340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007344:	460c      	mov	r4, r1
 8007346:	4607      	mov	r7, r0
 8007348:	4691      	mov	r9, r2
 800734a:	6923      	ldr	r3, [r4, #16]
 800734c:	6849      	ldr	r1, [r1, #4]
 800734e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007352:	68a3      	ldr	r3, [r4, #8]
 8007354:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007358:	f108 0601 	add.w	r6, r8, #1
 800735c:	42b3      	cmp	r3, r6
 800735e:	db0b      	blt.n	8007378 <__lshift+0x38>
 8007360:	4638      	mov	r0, r7
 8007362:	f7ff fddf 	bl	8006f24 <_Balloc>
 8007366:	4605      	mov	r5, r0
 8007368:	b948      	cbnz	r0, 800737e <__lshift+0x3e>
 800736a:	4602      	mov	r2, r0
 800736c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007370:	4b29      	ldr	r3, [pc, #164]	; (8007418 <__lshift+0xd8>)
 8007372:	482a      	ldr	r0, [pc, #168]	; (800741c <__lshift+0xdc>)
 8007374:	f000 fbb4 	bl	8007ae0 <__assert_func>
 8007378:	3101      	adds	r1, #1
 800737a:	005b      	lsls	r3, r3, #1
 800737c:	e7ee      	b.n	800735c <__lshift+0x1c>
 800737e:	2300      	movs	r3, #0
 8007380:	f100 0114 	add.w	r1, r0, #20
 8007384:	f100 0210 	add.w	r2, r0, #16
 8007388:	4618      	mov	r0, r3
 800738a:	4553      	cmp	r3, sl
 800738c:	db37      	blt.n	80073fe <__lshift+0xbe>
 800738e:	6920      	ldr	r0, [r4, #16]
 8007390:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007394:	f104 0314 	add.w	r3, r4, #20
 8007398:	f019 091f 	ands.w	r9, r9, #31
 800739c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80073a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80073a4:	d02f      	beq.n	8007406 <__lshift+0xc6>
 80073a6:	468a      	mov	sl, r1
 80073a8:	f04f 0c00 	mov.w	ip, #0
 80073ac:	f1c9 0e20 	rsb	lr, r9, #32
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	fa02 f209 	lsl.w	r2, r2, r9
 80073b6:	ea42 020c 	orr.w	r2, r2, ip
 80073ba:	f84a 2b04 	str.w	r2, [sl], #4
 80073be:	f853 2b04 	ldr.w	r2, [r3], #4
 80073c2:	4298      	cmp	r0, r3
 80073c4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80073c8:	d8f2      	bhi.n	80073b0 <__lshift+0x70>
 80073ca:	1b03      	subs	r3, r0, r4
 80073cc:	3b15      	subs	r3, #21
 80073ce:	f023 0303 	bic.w	r3, r3, #3
 80073d2:	3304      	adds	r3, #4
 80073d4:	f104 0215 	add.w	r2, r4, #21
 80073d8:	4290      	cmp	r0, r2
 80073da:	bf38      	it	cc
 80073dc:	2304      	movcc	r3, #4
 80073de:	f841 c003 	str.w	ip, [r1, r3]
 80073e2:	f1bc 0f00 	cmp.w	ip, #0
 80073e6:	d001      	beq.n	80073ec <__lshift+0xac>
 80073e8:	f108 0602 	add.w	r6, r8, #2
 80073ec:	3e01      	subs	r6, #1
 80073ee:	4638      	mov	r0, r7
 80073f0:	4621      	mov	r1, r4
 80073f2:	612e      	str	r6, [r5, #16]
 80073f4:	f7ff fdd6 	bl	8006fa4 <_Bfree>
 80073f8:	4628      	mov	r0, r5
 80073fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8007402:	3301      	adds	r3, #1
 8007404:	e7c1      	b.n	800738a <__lshift+0x4a>
 8007406:	3904      	subs	r1, #4
 8007408:	f853 2b04 	ldr.w	r2, [r3], #4
 800740c:	4298      	cmp	r0, r3
 800740e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007412:	d8f9      	bhi.n	8007408 <__lshift+0xc8>
 8007414:	e7ea      	b.n	80073ec <__lshift+0xac>
 8007416:	bf00      	nop
 8007418:	08008867 	.word	0x08008867
 800741c:	08008878 	.word	0x08008878

08007420 <__mcmp>:
 8007420:	4603      	mov	r3, r0
 8007422:	690a      	ldr	r2, [r1, #16]
 8007424:	6900      	ldr	r0, [r0, #16]
 8007426:	b530      	push	{r4, r5, lr}
 8007428:	1a80      	subs	r0, r0, r2
 800742a:	d10d      	bne.n	8007448 <__mcmp+0x28>
 800742c:	3314      	adds	r3, #20
 800742e:	3114      	adds	r1, #20
 8007430:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007434:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007438:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800743c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007440:	4295      	cmp	r5, r2
 8007442:	d002      	beq.n	800744a <__mcmp+0x2a>
 8007444:	d304      	bcc.n	8007450 <__mcmp+0x30>
 8007446:	2001      	movs	r0, #1
 8007448:	bd30      	pop	{r4, r5, pc}
 800744a:	42a3      	cmp	r3, r4
 800744c:	d3f4      	bcc.n	8007438 <__mcmp+0x18>
 800744e:	e7fb      	b.n	8007448 <__mcmp+0x28>
 8007450:	f04f 30ff 	mov.w	r0, #4294967295
 8007454:	e7f8      	b.n	8007448 <__mcmp+0x28>
	...

08007458 <__mdiff>:
 8007458:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800745c:	460d      	mov	r5, r1
 800745e:	4607      	mov	r7, r0
 8007460:	4611      	mov	r1, r2
 8007462:	4628      	mov	r0, r5
 8007464:	4614      	mov	r4, r2
 8007466:	f7ff ffdb 	bl	8007420 <__mcmp>
 800746a:	1e06      	subs	r6, r0, #0
 800746c:	d111      	bne.n	8007492 <__mdiff+0x3a>
 800746e:	4631      	mov	r1, r6
 8007470:	4638      	mov	r0, r7
 8007472:	f7ff fd57 	bl	8006f24 <_Balloc>
 8007476:	4602      	mov	r2, r0
 8007478:	b928      	cbnz	r0, 8007486 <__mdiff+0x2e>
 800747a:	f240 2132 	movw	r1, #562	; 0x232
 800747e:	4b3a      	ldr	r3, [pc, #232]	; (8007568 <__mdiff+0x110>)
 8007480:	483a      	ldr	r0, [pc, #232]	; (800756c <__mdiff+0x114>)
 8007482:	f000 fb2d 	bl	8007ae0 <__assert_func>
 8007486:	2301      	movs	r3, #1
 8007488:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800748c:	4610      	mov	r0, r2
 800748e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007492:	bfa4      	itt	ge
 8007494:	4623      	movge	r3, r4
 8007496:	462c      	movge	r4, r5
 8007498:	4638      	mov	r0, r7
 800749a:	6861      	ldr	r1, [r4, #4]
 800749c:	bfa6      	itte	ge
 800749e:	461d      	movge	r5, r3
 80074a0:	2600      	movge	r6, #0
 80074a2:	2601      	movlt	r6, #1
 80074a4:	f7ff fd3e 	bl	8006f24 <_Balloc>
 80074a8:	4602      	mov	r2, r0
 80074aa:	b918      	cbnz	r0, 80074b4 <__mdiff+0x5c>
 80074ac:	f44f 7110 	mov.w	r1, #576	; 0x240
 80074b0:	4b2d      	ldr	r3, [pc, #180]	; (8007568 <__mdiff+0x110>)
 80074b2:	e7e5      	b.n	8007480 <__mdiff+0x28>
 80074b4:	f102 0814 	add.w	r8, r2, #20
 80074b8:	46c2      	mov	sl, r8
 80074ba:	f04f 0c00 	mov.w	ip, #0
 80074be:	6927      	ldr	r7, [r4, #16]
 80074c0:	60c6      	str	r6, [r0, #12]
 80074c2:	692e      	ldr	r6, [r5, #16]
 80074c4:	f104 0014 	add.w	r0, r4, #20
 80074c8:	f105 0914 	add.w	r9, r5, #20
 80074cc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80074d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80074d4:	3410      	adds	r4, #16
 80074d6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80074da:	f859 3b04 	ldr.w	r3, [r9], #4
 80074de:	fa1f f18b 	uxth.w	r1, fp
 80074e2:	448c      	add	ip, r1
 80074e4:	b299      	uxth	r1, r3
 80074e6:	0c1b      	lsrs	r3, r3, #16
 80074e8:	ebac 0101 	sub.w	r1, ip, r1
 80074ec:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80074f0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80074f4:	b289      	uxth	r1, r1
 80074f6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80074fa:	454e      	cmp	r6, r9
 80074fc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007500:	f84a 3b04 	str.w	r3, [sl], #4
 8007504:	d8e7      	bhi.n	80074d6 <__mdiff+0x7e>
 8007506:	1b73      	subs	r3, r6, r5
 8007508:	3b15      	subs	r3, #21
 800750a:	f023 0303 	bic.w	r3, r3, #3
 800750e:	3515      	adds	r5, #21
 8007510:	3304      	adds	r3, #4
 8007512:	42ae      	cmp	r6, r5
 8007514:	bf38      	it	cc
 8007516:	2304      	movcc	r3, #4
 8007518:	4418      	add	r0, r3
 800751a:	4443      	add	r3, r8
 800751c:	461e      	mov	r6, r3
 800751e:	4605      	mov	r5, r0
 8007520:	4575      	cmp	r5, lr
 8007522:	d30e      	bcc.n	8007542 <__mdiff+0xea>
 8007524:	f10e 0103 	add.w	r1, lr, #3
 8007528:	1a09      	subs	r1, r1, r0
 800752a:	f021 0103 	bic.w	r1, r1, #3
 800752e:	3803      	subs	r0, #3
 8007530:	4586      	cmp	lr, r0
 8007532:	bf38      	it	cc
 8007534:	2100      	movcc	r1, #0
 8007536:	4419      	add	r1, r3
 8007538:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800753c:	b18b      	cbz	r3, 8007562 <__mdiff+0x10a>
 800753e:	6117      	str	r7, [r2, #16]
 8007540:	e7a4      	b.n	800748c <__mdiff+0x34>
 8007542:	f855 8b04 	ldr.w	r8, [r5], #4
 8007546:	fa1f f188 	uxth.w	r1, r8
 800754a:	4461      	add	r1, ip
 800754c:	140c      	asrs	r4, r1, #16
 800754e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007552:	b289      	uxth	r1, r1
 8007554:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007558:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800755c:	f846 1b04 	str.w	r1, [r6], #4
 8007560:	e7de      	b.n	8007520 <__mdiff+0xc8>
 8007562:	3f01      	subs	r7, #1
 8007564:	e7e8      	b.n	8007538 <__mdiff+0xe0>
 8007566:	bf00      	nop
 8007568:	08008867 	.word	0x08008867
 800756c:	08008878 	.word	0x08008878

08007570 <__d2b>:
 8007570:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007574:	2101      	movs	r1, #1
 8007576:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800757a:	4690      	mov	r8, r2
 800757c:	461d      	mov	r5, r3
 800757e:	f7ff fcd1 	bl	8006f24 <_Balloc>
 8007582:	4604      	mov	r4, r0
 8007584:	b930      	cbnz	r0, 8007594 <__d2b+0x24>
 8007586:	4602      	mov	r2, r0
 8007588:	f240 310a 	movw	r1, #778	; 0x30a
 800758c:	4b24      	ldr	r3, [pc, #144]	; (8007620 <__d2b+0xb0>)
 800758e:	4825      	ldr	r0, [pc, #148]	; (8007624 <__d2b+0xb4>)
 8007590:	f000 faa6 	bl	8007ae0 <__assert_func>
 8007594:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007598:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800759c:	bb2d      	cbnz	r5, 80075ea <__d2b+0x7a>
 800759e:	9301      	str	r3, [sp, #4]
 80075a0:	f1b8 0300 	subs.w	r3, r8, #0
 80075a4:	d026      	beq.n	80075f4 <__d2b+0x84>
 80075a6:	4668      	mov	r0, sp
 80075a8:	9300      	str	r3, [sp, #0]
 80075aa:	f7ff fd83 	bl	80070b4 <__lo0bits>
 80075ae:	9900      	ldr	r1, [sp, #0]
 80075b0:	b1f0      	cbz	r0, 80075f0 <__d2b+0x80>
 80075b2:	9a01      	ldr	r2, [sp, #4]
 80075b4:	f1c0 0320 	rsb	r3, r0, #32
 80075b8:	fa02 f303 	lsl.w	r3, r2, r3
 80075bc:	430b      	orrs	r3, r1
 80075be:	40c2      	lsrs	r2, r0
 80075c0:	6163      	str	r3, [r4, #20]
 80075c2:	9201      	str	r2, [sp, #4]
 80075c4:	9b01      	ldr	r3, [sp, #4]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	bf14      	ite	ne
 80075ca:	2102      	movne	r1, #2
 80075cc:	2101      	moveq	r1, #1
 80075ce:	61a3      	str	r3, [r4, #24]
 80075d0:	6121      	str	r1, [r4, #16]
 80075d2:	b1c5      	cbz	r5, 8007606 <__d2b+0x96>
 80075d4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80075d8:	4405      	add	r5, r0
 80075da:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80075de:	603d      	str	r5, [r7, #0]
 80075e0:	6030      	str	r0, [r6, #0]
 80075e2:	4620      	mov	r0, r4
 80075e4:	b002      	add	sp, #8
 80075e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075ee:	e7d6      	b.n	800759e <__d2b+0x2e>
 80075f0:	6161      	str	r1, [r4, #20]
 80075f2:	e7e7      	b.n	80075c4 <__d2b+0x54>
 80075f4:	a801      	add	r0, sp, #4
 80075f6:	f7ff fd5d 	bl	80070b4 <__lo0bits>
 80075fa:	2101      	movs	r1, #1
 80075fc:	9b01      	ldr	r3, [sp, #4]
 80075fe:	6121      	str	r1, [r4, #16]
 8007600:	6163      	str	r3, [r4, #20]
 8007602:	3020      	adds	r0, #32
 8007604:	e7e5      	b.n	80075d2 <__d2b+0x62>
 8007606:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800760a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800760e:	6038      	str	r0, [r7, #0]
 8007610:	6918      	ldr	r0, [r3, #16]
 8007612:	f7ff fd2f 	bl	8007074 <__hi0bits>
 8007616:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800761a:	6031      	str	r1, [r6, #0]
 800761c:	e7e1      	b.n	80075e2 <__d2b+0x72>
 800761e:	bf00      	nop
 8007620:	08008867 	.word	0x08008867
 8007624:	08008878 	.word	0x08008878

08007628 <_calloc_r>:
 8007628:	b570      	push	{r4, r5, r6, lr}
 800762a:	fba1 5402 	umull	r5, r4, r1, r2
 800762e:	b934      	cbnz	r4, 800763e <_calloc_r+0x16>
 8007630:	4629      	mov	r1, r5
 8007632:	f000 f875 	bl	8007720 <_malloc_r>
 8007636:	4606      	mov	r6, r0
 8007638:	b928      	cbnz	r0, 8007646 <_calloc_r+0x1e>
 800763a:	4630      	mov	r0, r6
 800763c:	bd70      	pop	{r4, r5, r6, pc}
 800763e:	220c      	movs	r2, #12
 8007640:	2600      	movs	r6, #0
 8007642:	6002      	str	r2, [r0, #0]
 8007644:	e7f9      	b.n	800763a <_calloc_r+0x12>
 8007646:	462a      	mov	r2, r5
 8007648:	4621      	mov	r1, r4
 800764a:	f7fe f93f 	bl	80058cc <memset>
 800764e:	e7f4      	b.n	800763a <_calloc_r+0x12>

08007650 <_free_r>:
 8007650:	b538      	push	{r3, r4, r5, lr}
 8007652:	4605      	mov	r5, r0
 8007654:	2900      	cmp	r1, #0
 8007656:	d040      	beq.n	80076da <_free_r+0x8a>
 8007658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800765c:	1f0c      	subs	r4, r1, #4
 800765e:	2b00      	cmp	r3, #0
 8007660:	bfb8      	it	lt
 8007662:	18e4      	addlt	r4, r4, r3
 8007664:	f000 fa98 	bl	8007b98 <__malloc_lock>
 8007668:	4a1c      	ldr	r2, [pc, #112]	; (80076dc <_free_r+0x8c>)
 800766a:	6813      	ldr	r3, [r2, #0]
 800766c:	b933      	cbnz	r3, 800767c <_free_r+0x2c>
 800766e:	6063      	str	r3, [r4, #4]
 8007670:	6014      	str	r4, [r2, #0]
 8007672:	4628      	mov	r0, r5
 8007674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007678:	f000 ba94 	b.w	8007ba4 <__malloc_unlock>
 800767c:	42a3      	cmp	r3, r4
 800767e:	d908      	bls.n	8007692 <_free_r+0x42>
 8007680:	6820      	ldr	r0, [r4, #0]
 8007682:	1821      	adds	r1, r4, r0
 8007684:	428b      	cmp	r3, r1
 8007686:	bf01      	itttt	eq
 8007688:	6819      	ldreq	r1, [r3, #0]
 800768a:	685b      	ldreq	r3, [r3, #4]
 800768c:	1809      	addeq	r1, r1, r0
 800768e:	6021      	streq	r1, [r4, #0]
 8007690:	e7ed      	b.n	800766e <_free_r+0x1e>
 8007692:	461a      	mov	r2, r3
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	b10b      	cbz	r3, 800769c <_free_r+0x4c>
 8007698:	42a3      	cmp	r3, r4
 800769a:	d9fa      	bls.n	8007692 <_free_r+0x42>
 800769c:	6811      	ldr	r1, [r2, #0]
 800769e:	1850      	adds	r0, r2, r1
 80076a0:	42a0      	cmp	r0, r4
 80076a2:	d10b      	bne.n	80076bc <_free_r+0x6c>
 80076a4:	6820      	ldr	r0, [r4, #0]
 80076a6:	4401      	add	r1, r0
 80076a8:	1850      	adds	r0, r2, r1
 80076aa:	4283      	cmp	r3, r0
 80076ac:	6011      	str	r1, [r2, #0]
 80076ae:	d1e0      	bne.n	8007672 <_free_r+0x22>
 80076b0:	6818      	ldr	r0, [r3, #0]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	4401      	add	r1, r0
 80076b6:	6011      	str	r1, [r2, #0]
 80076b8:	6053      	str	r3, [r2, #4]
 80076ba:	e7da      	b.n	8007672 <_free_r+0x22>
 80076bc:	d902      	bls.n	80076c4 <_free_r+0x74>
 80076be:	230c      	movs	r3, #12
 80076c0:	602b      	str	r3, [r5, #0]
 80076c2:	e7d6      	b.n	8007672 <_free_r+0x22>
 80076c4:	6820      	ldr	r0, [r4, #0]
 80076c6:	1821      	adds	r1, r4, r0
 80076c8:	428b      	cmp	r3, r1
 80076ca:	bf01      	itttt	eq
 80076cc:	6819      	ldreq	r1, [r3, #0]
 80076ce:	685b      	ldreq	r3, [r3, #4]
 80076d0:	1809      	addeq	r1, r1, r0
 80076d2:	6021      	streq	r1, [r4, #0]
 80076d4:	6063      	str	r3, [r4, #4]
 80076d6:	6054      	str	r4, [r2, #4]
 80076d8:	e7cb      	b.n	8007672 <_free_r+0x22>
 80076da:	bd38      	pop	{r3, r4, r5, pc}
 80076dc:	20000494 	.word	0x20000494

080076e0 <sbrk_aligned>:
 80076e0:	b570      	push	{r4, r5, r6, lr}
 80076e2:	4e0e      	ldr	r6, [pc, #56]	; (800771c <sbrk_aligned+0x3c>)
 80076e4:	460c      	mov	r4, r1
 80076e6:	6831      	ldr	r1, [r6, #0]
 80076e8:	4605      	mov	r5, r0
 80076ea:	b911      	cbnz	r1, 80076f2 <sbrk_aligned+0x12>
 80076ec:	f000 f9e8 	bl	8007ac0 <_sbrk_r>
 80076f0:	6030      	str	r0, [r6, #0]
 80076f2:	4621      	mov	r1, r4
 80076f4:	4628      	mov	r0, r5
 80076f6:	f000 f9e3 	bl	8007ac0 <_sbrk_r>
 80076fa:	1c43      	adds	r3, r0, #1
 80076fc:	d00a      	beq.n	8007714 <sbrk_aligned+0x34>
 80076fe:	1cc4      	adds	r4, r0, #3
 8007700:	f024 0403 	bic.w	r4, r4, #3
 8007704:	42a0      	cmp	r0, r4
 8007706:	d007      	beq.n	8007718 <sbrk_aligned+0x38>
 8007708:	1a21      	subs	r1, r4, r0
 800770a:	4628      	mov	r0, r5
 800770c:	f000 f9d8 	bl	8007ac0 <_sbrk_r>
 8007710:	3001      	adds	r0, #1
 8007712:	d101      	bne.n	8007718 <sbrk_aligned+0x38>
 8007714:	f04f 34ff 	mov.w	r4, #4294967295
 8007718:	4620      	mov	r0, r4
 800771a:	bd70      	pop	{r4, r5, r6, pc}
 800771c:	20000498 	.word	0x20000498

08007720 <_malloc_r>:
 8007720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007724:	1ccd      	adds	r5, r1, #3
 8007726:	f025 0503 	bic.w	r5, r5, #3
 800772a:	3508      	adds	r5, #8
 800772c:	2d0c      	cmp	r5, #12
 800772e:	bf38      	it	cc
 8007730:	250c      	movcc	r5, #12
 8007732:	2d00      	cmp	r5, #0
 8007734:	4607      	mov	r7, r0
 8007736:	db01      	blt.n	800773c <_malloc_r+0x1c>
 8007738:	42a9      	cmp	r1, r5
 800773a:	d905      	bls.n	8007748 <_malloc_r+0x28>
 800773c:	230c      	movs	r3, #12
 800773e:	2600      	movs	r6, #0
 8007740:	603b      	str	r3, [r7, #0]
 8007742:	4630      	mov	r0, r6
 8007744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007748:	4e2e      	ldr	r6, [pc, #184]	; (8007804 <_malloc_r+0xe4>)
 800774a:	f000 fa25 	bl	8007b98 <__malloc_lock>
 800774e:	6833      	ldr	r3, [r6, #0]
 8007750:	461c      	mov	r4, r3
 8007752:	bb34      	cbnz	r4, 80077a2 <_malloc_r+0x82>
 8007754:	4629      	mov	r1, r5
 8007756:	4638      	mov	r0, r7
 8007758:	f7ff ffc2 	bl	80076e0 <sbrk_aligned>
 800775c:	1c43      	adds	r3, r0, #1
 800775e:	4604      	mov	r4, r0
 8007760:	d14d      	bne.n	80077fe <_malloc_r+0xde>
 8007762:	6834      	ldr	r4, [r6, #0]
 8007764:	4626      	mov	r6, r4
 8007766:	2e00      	cmp	r6, #0
 8007768:	d140      	bne.n	80077ec <_malloc_r+0xcc>
 800776a:	6823      	ldr	r3, [r4, #0]
 800776c:	4631      	mov	r1, r6
 800776e:	4638      	mov	r0, r7
 8007770:	eb04 0803 	add.w	r8, r4, r3
 8007774:	f000 f9a4 	bl	8007ac0 <_sbrk_r>
 8007778:	4580      	cmp	r8, r0
 800777a:	d13a      	bne.n	80077f2 <_malloc_r+0xd2>
 800777c:	6821      	ldr	r1, [r4, #0]
 800777e:	3503      	adds	r5, #3
 8007780:	1a6d      	subs	r5, r5, r1
 8007782:	f025 0503 	bic.w	r5, r5, #3
 8007786:	3508      	adds	r5, #8
 8007788:	2d0c      	cmp	r5, #12
 800778a:	bf38      	it	cc
 800778c:	250c      	movcc	r5, #12
 800778e:	4638      	mov	r0, r7
 8007790:	4629      	mov	r1, r5
 8007792:	f7ff ffa5 	bl	80076e0 <sbrk_aligned>
 8007796:	3001      	adds	r0, #1
 8007798:	d02b      	beq.n	80077f2 <_malloc_r+0xd2>
 800779a:	6823      	ldr	r3, [r4, #0]
 800779c:	442b      	add	r3, r5
 800779e:	6023      	str	r3, [r4, #0]
 80077a0:	e00e      	b.n	80077c0 <_malloc_r+0xa0>
 80077a2:	6822      	ldr	r2, [r4, #0]
 80077a4:	1b52      	subs	r2, r2, r5
 80077a6:	d41e      	bmi.n	80077e6 <_malloc_r+0xc6>
 80077a8:	2a0b      	cmp	r2, #11
 80077aa:	d916      	bls.n	80077da <_malloc_r+0xba>
 80077ac:	1961      	adds	r1, r4, r5
 80077ae:	42a3      	cmp	r3, r4
 80077b0:	6025      	str	r5, [r4, #0]
 80077b2:	bf18      	it	ne
 80077b4:	6059      	strne	r1, [r3, #4]
 80077b6:	6863      	ldr	r3, [r4, #4]
 80077b8:	bf08      	it	eq
 80077ba:	6031      	streq	r1, [r6, #0]
 80077bc:	5162      	str	r2, [r4, r5]
 80077be:	604b      	str	r3, [r1, #4]
 80077c0:	4638      	mov	r0, r7
 80077c2:	f104 060b 	add.w	r6, r4, #11
 80077c6:	f000 f9ed 	bl	8007ba4 <__malloc_unlock>
 80077ca:	f026 0607 	bic.w	r6, r6, #7
 80077ce:	1d23      	adds	r3, r4, #4
 80077d0:	1af2      	subs	r2, r6, r3
 80077d2:	d0b6      	beq.n	8007742 <_malloc_r+0x22>
 80077d4:	1b9b      	subs	r3, r3, r6
 80077d6:	50a3      	str	r3, [r4, r2]
 80077d8:	e7b3      	b.n	8007742 <_malloc_r+0x22>
 80077da:	6862      	ldr	r2, [r4, #4]
 80077dc:	42a3      	cmp	r3, r4
 80077de:	bf0c      	ite	eq
 80077e0:	6032      	streq	r2, [r6, #0]
 80077e2:	605a      	strne	r2, [r3, #4]
 80077e4:	e7ec      	b.n	80077c0 <_malloc_r+0xa0>
 80077e6:	4623      	mov	r3, r4
 80077e8:	6864      	ldr	r4, [r4, #4]
 80077ea:	e7b2      	b.n	8007752 <_malloc_r+0x32>
 80077ec:	4634      	mov	r4, r6
 80077ee:	6876      	ldr	r6, [r6, #4]
 80077f0:	e7b9      	b.n	8007766 <_malloc_r+0x46>
 80077f2:	230c      	movs	r3, #12
 80077f4:	4638      	mov	r0, r7
 80077f6:	603b      	str	r3, [r7, #0]
 80077f8:	f000 f9d4 	bl	8007ba4 <__malloc_unlock>
 80077fc:	e7a1      	b.n	8007742 <_malloc_r+0x22>
 80077fe:	6025      	str	r5, [r4, #0]
 8007800:	e7de      	b.n	80077c0 <_malloc_r+0xa0>
 8007802:	bf00      	nop
 8007804:	20000494 	.word	0x20000494

08007808 <__ssputs_r>:
 8007808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800780c:	688e      	ldr	r6, [r1, #8]
 800780e:	4682      	mov	sl, r0
 8007810:	429e      	cmp	r6, r3
 8007812:	460c      	mov	r4, r1
 8007814:	4690      	mov	r8, r2
 8007816:	461f      	mov	r7, r3
 8007818:	d838      	bhi.n	800788c <__ssputs_r+0x84>
 800781a:	898a      	ldrh	r2, [r1, #12]
 800781c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007820:	d032      	beq.n	8007888 <__ssputs_r+0x80>
 8007822:	6825      	ldr	r5, [r4, #0]
 8007824:	6909      	ldr	r1, [r1, #16]
 8007826:	3301      	adds	r3, #1
 8007828:	eba5 0901 	sub.w	r9, r5, r1
 800782c:	6965      	ldr	r5, [r4, #20]
 800782e:	444b      	add	r3, r9
 8007830:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007834:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007838:	106d      	asrs	r5, r5, #1
 800783a:	429d      	cmp	r5, r3
 800783c:	bf38      	it	cc
 800783e:	461d      	movcc	r5, r3
 8007840:	0553      	lsls	r3, r2, #21
 8007842:	d531      	bpl.n	80078a8 <__ssputs_r+0xa0>
 8007844:	4629      	mov	r1, r5
 8007846:	f7ff ff6b 	bl	8007720 <_malloc_r>
 800784a:	4606      	mov	r6, r0
 800784c:	b950      	cbnz	r0, 8007864 <__ssputs_r+0x5c>
 800784e:	230c      	movs	r3, #12
 8007850:	f04f 30ff 	mov.w	r0, #4294967295
 8007854:	f8ca 3000 	str.w	r3, [sl]
 8007858:	89a3      	ldrh	r3, [r4, #12]
 800785a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800785e:	81a3      	strh	r3, [r4, #12]
 8007860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007864:	464a      	mov	r2, r9
 8007866:	6921      	ldr	r1, [r4, #16]
 8007868:	f7ff fb4e 	bl	8006f08 <memcpy>
 800786c:	89a3      	ldrh	r3, [r4, #12]
 800786e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007876:	81a3      	strh	r3, [r4, #12]
 8007878:	6126      	str	r6, [r4, #16]
 800787a:	444e      	add	r6, r9
 800787c:	6026      	str	r6, [r4, #0]
 800787e:	463e      	mov	r6, r7
 8007880:	6165      	str	r5, [r4, #20]
 8007882:	eba5 0509 	sub.w	r5, r5, r9
 8007886:	60a5      	str	r5, [r4, #8]
 8007888:	42be      	cmp	r6, r7
 800788a:	d900      	bls.n	800788e <__ssputs_r+0x86>
 800788c:	463e      	mov	r6, r7
 800788e:	4632      	mov	r2, r6
 8007890:	4641      	mov	r1, r8
 8007892:	6820      	ldr	r0, [r4, #0]
 8007894:	f000 f966 	bl	8007b64 <memmove>
 8007898:	68a3      	ldr	r3, [r4, #8]
 800789a:	2000      	movs	r0, #0
 800789c:	1b9b      	subs	r3, r3, r6
 800789e:	60a3      	str	r3, [r4, #8]
 80078a0:	6823      	ldr	r3, [r4, #0]
 80078a2:	4433      	add	r3, r6
 80078a4:	6023      	str	r3, [r4, #0]
 80078a6:	e7db      	b.n	8007860 <__ssputs_r+0x58>
 80078a8:	462a      	mov	r2, r5
 80078aa:	f000 f981 	bl	8007bb0 <_realloc_r>
 80078ae:	4606      	mov	r6, r0
 80078b0:	2800      	cmp	r0, #0
 80078b2:	d1e1      	bne.n	8007878 <__ssputs_r+0x70>
 80078b4:	4650      	mov	r0, sl
 80078b6:	6921      	ldr	r1, [r4, #16]
 80078b8:	f7ff feca 	bl	8007650 <_free_r>
 80078bc:	e7c7      	b.n	800784e <__ssputs_r+0x46>
	...

080078c0 <_svfiprintf_r>:
 80078c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c4:	4698      	mov	r8, r3
 80078c6:	898b      	ldrh	r3, [r1, #12]
 80078c8:	4607      	mov	r7, r0
 80078ca:	061b      	lsls	r3, r3, #24
 80078cc:	460d      	mov	r5, r1
 80078ce:	4614      	mov	r4, r2
 80078d0:	b09d      	sub	sp, #116	; 0x74
 80078d2:	d50e      	bpl.n	80078f2 <_svfiprintf_r+0x32>
 80078d4:	690b      	ldr	r3, [r1, #16]
 80078d6:	b963      	cbnz	r3, 80078f2 <_svfiprintf_r+0x32>
 80078d8:	2140      	movs	r1, #64	; 0x40
 80078da:	f7ff ff21 	bl	8007720 <_malloc_r>
 80078de:	6028      	str	r0, [r5, #0]
 80078e0:	6128      	str	r0, [r5, #16]
 80078e2:	b920      	cbnz	r0, 80078ee <_svfiprintf_r+0x2e>
 80078e4:	230c      	movs	r3, #12
 80078e6:	603b      	str	r3, [r7, #0]
 80078e8:	f04f 30ff 	mov.w	r0, #4294967295
 80078ec:	e0d1      	b.n	8007a92 <_svfiprintf_r+0x1d2>
 80078ee:	2340      	movs	r3, #64	; 0x40
 80078f0:	616b      	str	r3, [r5, #20]
 80078f2:	2300      	movs	r3, #0
 80078f4:	9309      	str	r3, [sp, #36]	; 0x24
 80078f6:	2320      	movs	r3, #32
 80078f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078fc:	2330      	movs	r3, #48	; 0x30
 80078fe:	f04f 0901 	mov.w	r9, #1
 8007902:	f8cd 800c 	str.w	r8, [sp, #12]
 8007906:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007aac <_svfiprintf_r+0x1ec>
 800790a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800790e:	4623      	mov	r3, r4
 8007910:	469a      	mov	sl, r3
 8007912:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007916:	b10a      	cbz	r2, 800791c <_svfiprintf_r+0x5c>
 8007918:	2a25      	cmp	r2, #37	; 0x25
 800791a:	d1f9      	bne.n	8007910 <_svfiprintf_r+0x50>
 800791c:	ebba 0b04 	subs.w	fp, sl, r4
 8007920:	d00b      	beq.n	800793a <_svfiprintf_r+0x7a>
 8007922:	465b      	mov	r3, fp
 8007924:	4622      	mov	r2, r4
 8007926:	4629      	mov	r1, r5
 8007928:	4638      	mov	r0, r7
 800792a:	f7ff ff6d 	bl	8007808 <__ssputs_r>
 800792e:	3001      	adds	r0, #1
 8007930:	f000 80aa 	beq.w	8007a88 <_svfiprintf_r+0x1c8>
 8007934:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007936:	445a      	add	r2, fp
 8007938:	9209      	str	r2, [sp, #36]	; 0x24
 800793a:	f89a 3000 	ldrb.w	r3, [sl]
 800793e:	2b00      	cmp	r3, #0
 8007940:	f000 80a2 	beq.w	8007a88 <_svfiprintf_r+0x1c8>
 8007944:	2300      	movs	r3, #0
 8007946:	f04f 32ff 	mov.w	r2, #4294967295
 800794a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800794e:	f10a 0a01 	add.w	sl, sl, #1
 8007952:	9304      	str	r3, [sp, #16]
 8007954:	9307      	str	r3, [sp, #28]
 8007956:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800795a:	931a      	str	r3, [sp, #104]	; 0x68
 800795c:	4654      	mov	r4, sl
 800795e:	2205      	movs	r2, #5
 8007960:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007964:	4851      	ldr	r0, [pc, #324]	; (8007aac <_svfiprintf_r+0x1ec>)
 8007966:	f7ff fac1 	bl	8006eec <memchr>
 800796a:	9a04      	ldr	r2, [sp, #16]
 800796c:	b9d8      	cbnz	r0, 80079a6 <_svfiprintf_r+0xe6>
 800796e:	06d0      	lsls	r0, r2, #27
 8007970:	bf44      	itt	mi
 8007972:	2320      	movmi	r3, #32
 8007974:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007978:	0711      	lsls	r1, r2, #28
 800797a:	bf44      	itt	mi
 800797c:	232b      	movmi	r3, #43	; 0x2b
 800797e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007982:	f89a 3000 	ldrb.w	r3, [sl]
 8007986:	2b2a      	cmp	r3, #42	; 0x2a
 8007988:	d015      	beq.n	80079b6 <_svfiprintf_r+0xf6>
 800798a:	4654      	mov	r4, sl
 800798c:	2000      	movs	r0, #0
 800798e:	f04f 0c0a 	mov.w	ip, #10
 8007992:	9a07      	ldr	r2, [sp, #28]
 8007994:	4621      	mov	r1, r4
 8007996:	f811 3b01 	ldrb.w	r3, [r1], #1
 800799a:	3b30      	subs	r3, #48	; 0x30
 800799c:	2b09      	cmp	r3, #9
 800799e:	d94e      	bls.n	8007a3e <_svfiprintf_r+0x17e>
 80079a0:	b1b0      	cbz	r0, 80079d0 <_svfiprintf_r+0x110>
 80079a2:	9207      	str	r2, [sp, #28]
 80079a4:	e014      	b.n	80079d0 <_svfiprintf_r+0x110>
 80079a6:	eba0 0308 	sub.w	r3, r0, r8
 80079aa:	fa09 f303 	lsl.w	r3, r9, r3
 80079ae:	4313      	orrs	r3, r2
 80079b0:	46a2      	mov	sl, r4
 80079b2:	9304      	str	r3, [sp, #16]
 80079b4:	e7d2      	b.n	800795c <_svfiprintf_r+0x9c>
 80079b6:	9b03      	ldr	r3, [sp, #12]
 80079b8:	1d19      	adds	r1, r3, #4
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	9103      	str	r1, [sp, #12]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	bfbb      	ittet	lt
 80079c2:	425b      	neglt	r3, r3
 80079c4:	f042 0202 	orrlt.w	r2, r2, #2
 80079c8:	9307      	strge	r3, [sp, #28]
 80079ca:	9307      	strlt	r3, [sp, #28]
 80079cc:	bfb8      	it	lt
 80079ce:	9204      	strlt	r2, [sp, #16]
 80079d0:	7823      	ldrb	r3, [r4, #0]
 80079d2:	2b2e      	cmp	r3, #46	; 0x2e
 80079d4:	d10c      	bne.n	80079f0 <_svfiprintf_r+0x130>
 80079d6:	7863      	ldrb	r3, [r4, #1]
 80079d8:	2b2a      	cmp	r3, #42	; 0x2a
 80079da:	d135      	bne.n	8007a48 <_svfiprintf_r+0x188>
 80079dc:	9b03      	ldr	r3, [sp, #12]
 80079de:	3402      	adds	r4, #2
 80079e0:	1d1a      	adds	r2, r3, #4
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	9203      	str	r2, [sp, #12]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	bfb8      	it	lt
 80079ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80079ee:	9305      	str	r3, [sp, #20]
 80079f0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007ab0 <_svfiprintf_r+0x1f0>
 80079f4:	2203      	movs	r2, #3
 80079f6:	4650      	mov	r0, sl
 80079f8:	7821      	ldrb	r1, [r4, #0]
 80079fa:	f7ff fa77 	bl	8006eec <memchr>
 80079fe:	b140      	cbz	r0, 8007a12 <_svfiprintf_r+0x152>
 8007a00:	2340      	movs	r3, #64	; 0x40
 8007a02:	eba0 000a 	sub.w	r0, r0, sl
 8007a06:	fa03 f000 	lsl.w	r0, r3, r0
 8007a0a:	9b04      	ldr	r3, [sp, #16]
 8007a0c:	3401      	adds	r4, #1
 8007a0e:	4303      	orrs	r3, r0
 8007a10:	9304      	str	r3, [sp, #16]
 8007a12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a16:	2206      	movs	r2, #6
 8007a18:	4826      	ldr	r0, [pc, #152]	; (8007ab4 <_svfiprintf_r+0x1f4>)
 8007a1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a1e:	f7ff fa65 	bl	8006eec <memchr>
 8007a22:	2800      	cmp	r0, #0
 8007a24:	d038      	beq.n	8007a98 <_svfiprintf_r+0x1d8>
 8007a26:	4b24      	ldr	r3, [pc, #144]	; (8007ab8 <_svfiprintf_r+0x1f8>)
 8007a28:	bb1b      	cbnz	r3, 8007a72 <_svfiprintf_r+0x1b2>
 8007a2a:	9b03      	ldr	r3, [sp, #12]
 8007a2c:	3307      	adds	r3, #7
 8007a2e:	f023 0307 	bic.w	r3, r3, #7
 8007a32:	3308      	adds	r3, #8
 8007a34:	9303      	str	r3, [sp, #12]
 8007a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a38:	4433      	add	r3, r6
 8007a3a:	9309      	str	r3, [sp, #36]	; 0x24
 8007a3c:	e767      	b.n	800790e <_svfiprintf_r+0x4e>
 8007a3e:	460c      	mov	r4, r1
 8007a40:	2001      	movs	r0, #1
 8007a42:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a46:	e7a5      	b.n	8007994 <_svfiprintf_r+0xd4>
 8007a48:	2300      	movs	r3, #0
 8007a4a:	f04f 0c0a 	mov.w	ip, #10
 8007a4e:	4619      	mov	r1, r3
 8007a50:	3401      	adds	r4, #1
 8007a52:	9305      	str	r3, [sp, #20]
 8007a54:	4620      	mov	r0, r4
 8007a56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a5a:	3a30      	subs	r2, #48	; 0x30
 8007a5c:	2a09      	cmp	r2, #9
 8007a5e:	d903      	bls.n	8007a68 <_svfiprintf_r+0x1a8>
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d0c5      	beq.n	80079f0 <_svfiprintf_r+0x130>
 8007a64:	9105      	str	r1, [sp, #20]
 8007a66:	e7c3      	b.n	80079f0 <_svfiprintf_r+0x130>
 8007a68:	4604      	mov	r4, r0
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a70:	e7f0      	b.n	8007a54 <_svfiprintf_r+0x194>
 8007a72:	ab03      	add	r3, sp, #12
 8007a74:	9300      	str	r3, [sp, #0]
 8007a76:	462a      	mov	r2, r5
 8007a78:	4638      	mov	r0, r7
 8007a7a:	4b10      	ldr	r3, [pc, #64]	; (8007abc <_svfiprintf_r+0x1fc>)
 8007a7c:	a904      	add	r1, sp, #16
 8007a7e:	f7fd ffcb 	bl	8005a18 <_printf_float>
 8007a82:	1c42      	adds	r2, r0, #1
 8007a84:	4606      	mov	r6, r0
 8007a86:	d1d6      	bne.n	8007a36 <_svfiprintf_r+0x176>
 8007a88:	89ab      	ldrh	r3, [r5, #12]
 8007a8a:	065b      	lsls	r3, r3, #25
 8007a8c:	f53f af2c 	bmi.w	80078e8 <_svfiprintf_r+0x28>
 8007a90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a92:	b01d      	add	sp, #116	; 0x74
 8007a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a98:	ab03      	add	r3, sp, #12
 8007a9a:	9300      	str	r3, [sp, #0]
 8007a9c:	462a      	mov	r2, r5
 8007a9e:	4638      	mov	r0, r7
 8007aa0:	4b06      	ldr	r3, [pc, #24]	; (8007abc <_svfiprintf_r+0x1fc>)
 8007aa2:	a904      	add	r1, sp, #16
 8007aa4:	f7fe fa54 	bl	8005f50 <_printf_i>
 8007aa8:	e7eb      	b.n	8007a82 <_svfiprintf_r+0x1c2>
 8007aaa:	bf00      	nop
 8007aac:	080089d4 	.word	0x080089d4
 8007ab0:	080089da 	.word	0x080089da
 8007ab4:	080089de 	.word	0x080089de
 8007ab8:	08005a19 	.word	0x08005a19
 8007abc:	08007809 	.word	0x08007809

08007ac0 <_sbrk_r>:
 8007ac0:	b538      	push	{r3, r4, r5, lr}
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	4d05      	ldr	r5, [pc, #20]	; (8007adc <_sbrk_r+0x1c>)
 8007ac6:	4604      	mov	r4, r0
 8007ac8:	4608      	mov	r0, r1
 8007aca:	602b      	str	r3, [r5, #0]
 8007acc:	f7fa fa02 	bl	8001ed4 <_sbrk>
 8007ad0:	1c43      	adds	r3, r0, #1
 8007ad2:	d102      	bne.n	8007ada <_sbrk_r+0x1a>
 8007ad4:	682b      	ldr	r3, [r5, #0]
 8007ad6:	b103      	cbz	r3, 8007ada <_sbrk_r+0x1a>
 8007ad8:	6023      	str	r3, [r4, #0]
 8007ada:	bd38      	pop	{r3, r4, r5, pc}
 8007adc:	2000049c 	.word	0x2000049c

08007ae0 <__assert_func>:
 8007ae0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007ae2:	4614      	mov	r4, r2
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	4b09      	ldr	r3, [pc, #36]	; (8007b0c <__assert_func+0x2c>)
 8007ae8:	4605      	mov	r5, r0
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68d8      	ldr	r0, [r3, #12]
 8007aee:	b14c      	cbz	r4, 8007b04 <__assert_func+0x24>
 8007af0:	4b07      	ldr	r3, [pc, #28]	; (8007b10 <__assert_func+0x30>)
 8007af2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007af6:	9100      	str	r1, [sp, #0]
 8007af8:	462b      	mov	r3, r5
 8007afa:	4906      	ldr	r1, [pc, #24]	; (8007b14 <__assert_func+0x34>)
 8007afc:	f000 f80e 	bl	8007b1c <fiprintf>
 8007b00:	f000 faaa 	bl	8008058 <abort>
 8007b04:	4b04      	ldr	r3, [pc, #16]	; (8007b18 <__assert_func+0x38>)
 8007b06:	461c      	mov	r4, r3
 8007b08:	e7f3      	b.n	8007af2 <__assert_func+0x12>
 8007b0a:	bf00      	nop
 8007b0c:	2000001c 	.word	0x2000001c
 8007b10:	080089e5 	.word	0x080089e5
 8007b14:	080089f2 	.word	0x080089f2
 8007b18:	08008a20 	.word	0x08008a20

08007b1c <fiprintf>:
 8007b1c:	b40e      	push	{r1, r2, r3}
 8007b1e:	b503      	push	{r0, r1, lr}
 8007b20:	4601      	mov	r1, r0
 8007b22:	ab03      	add	r3, sp, #12
 8007b24:	4805      	ldr	r0, [pc, #20]	; (8007b3c <fiprintf+0x20>)
 8007b26:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b2a:	6800      	ldr	r0, [r0, #0]
 8007b2c:	9301      	str	r3, [sp, #4]
 8007b2e:	f000 f895 	bl	8007c5c <_vfiprintf_r>
 8007b32:	b002      	add	sp, #8
 8007b34:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b38:	b003      	add	sp, #12
 8007b3a:	4770      	bx	lr
 8007b3c:	2000001c 	.word	0x2000001c

08007b40 <__ascii_mbtowc>:
 8007b40:	b082      	sub	sp, #8
 8007b42:	b901      	cbnz	r1, 8007b46 <__ascii_mbtowc+0x6>
 8007b44:	a901      	add	r1, sp, #4
 8007b46:	b142      	cbz	r2, 8007b5a <__ascii_mbtowc+0x1a>
 8007b48:	b14b      	cbz	r3, 8007b5e <__ascii_mbtowc+0x1e>
 8007b4a:	7813      	ldrb	r3, [r2, #0]
 8007b4c:	600b      	str	r3, [r1, #0]
 8007b4e:	7812      	ldrb	r2, [r2, #0]
 8007b50:	1e10      	subs	r0, r2, #0
 8007b52:	bf18      	it	ne
 8007b54:	2001      	movne	r0, #1
 8007b56:	b002      	add	sp, #8
 8007b58:	4770      	bx	lr
 8007b5a:	4610      	mov	r0, r2
 8007b5c:	e7fb      	b.n	8007b56 <__ascii_mbtowc+0x16>
 8007b5e:	f06f 0001 	mvn.w	r0, #1
 8007b62:	e7f8      	b.n	8007b56 <__ascii_mbtowc+0x16>

08007b64 <memmove>:
 8007b64:	4288      	cmp	r0, r1
 8007b66:	b510      	push	{r4, lr}
 8007b68:	eb01 0402 	add.w	r4, r1, r2
 8007b6c:	d902      	bls.n	8007b74 <memmove+0x10>
 8007b6e:	4284      	cmp	r4, r0
 8007b70:	4623      	mov	r3, r4
 8007b72:	d807      	bhi.n	8007b84 <memmove+0x20>
 8007b74:	1e43      	subs	r3, r0, #1
 8007b76:	42a1      	cmp	r1, r4
 8007b78:	d008      	beq.n	8007b8c <memmove+0x28>
 8007b7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b82:	e7f8      	b.n	8007b76 <memmove+0x12>
 8007b84:	4601      	mov	r1, r0
 8007b86:	4402      	add	r2, r0
 8007b88:	428a      	cmp	r2, r1
 8007b8a:	d100      	bne.n	8007b8e <memmove+0x2a>
 8007b8c:	bd10      	pop	{r4, pc}
 8007b8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b96:	e7f7      	b.n	8007b88 <memmove+0x24>

08007b98 <__malloc_lock>:
 8007b98:	4801      	ldr	r0, [pc, #4]	; (8007ba0 <__malloc_lock+0x8>)
 8007b9a:	f000 bc19 	b.w	80083d0 <__retarget_lock_acquire_recursive>
 8007b9e:	bf00      	nop
 8007ba0:	200004a0 	.word	0x200004a0

08007ba4 <__malloc_unlock>:
 8007ba4:	4801      	ldr	r0, [pc, #4]	; (8007bac <__malloc_unlock+0x8>)
 8007ba6:	f000 bc14 	b.w	80083d2 <__retarget_lock_release_recursive>
 8007baa:	bf00      	nop
 8007bac:	200004a0 	.word	0x200004a0

08007bb0 <_realloc_r>:
 8007bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bb4:	4680      	mov	r8, r0
 8007bb6:	4614      	mov	r4, r2
 8007bb8:	460e      	mov	r6, r1
 8007bba:	b921      	cbnz	r1, 8007bc6 <_realloc_r+0x16>
 8007bbc:	4611      	mov	r1, r2
 8007bbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bc2:	f7ff bdad 	b.w	8007720 <_malloc_r>
 8007bc6:	b92a      	cbnz	r2, 8007bd4 <_realloc_r+0x24>
 8007bc8:	f7ff fd42 	bl	8007650 <_free_r>
 8007bcc:	4625      	mov	r5, r4
 8007bce:	4628      	mov	r0, r5
 8007bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bd4:	f000 fc64 	bl	80084a0 <_malloc_usable_size_r>
 8007bd8:	4284      	cmp	r4, r0
 8007bda:	4607      	mov	r7, r0
 8007bdc:	d802      	bhi.n	8007be4 <_realloc_r+0x34>
 8007bde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007be2:	d812      	bhi.n	8007c0a <_realloc_r+0x5a>
 8007be4:	4621      	mov	r1, r4
 8007be6:	4640      	mov	r0, r8
 8007be8:	f7ff fd9a 	bl	8007720 <_malloc_r>
 8007bec:	4605      	mov	r5, r0
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	d0ed      	beq.n	8007bce <_realloc_r+0x1e>
 8007bf2:	42bc      	cmp	r4, r7
 8007bf4:	4622      	mov	r2, r4
 8007bf6:	4631      	mov	r1, r6
 8007bf8:	bf28      	it	cs
 8007bfa:	463a      	movcs	r2, r7
 8007bfc:	f7ff f984 	bl	8006f08 <memcpy>
 8007c00:	4631      	mov	r1, r6
 8007c02:	4640      	mov	r0, r8
 8007c04:	f7ff fd24 	bl	8007650 <_free_r>
 8007c08:	e7e1      	b.n	8007bce <_realloc_r+0x1e>
 8007c0a:	4635      	mov	r5, r6
 8007c0c:	e7df      	b.n	8007bce <_realloc_r+0x1e>

08007c0e <__sfputc_r>:
 8007c0e:	6893      	ldr	r3, [r2, #8]
 8007c10:	b410      	push	{r4}
 8007c12:	3b01      	subs	r3, #1
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	6093      	str	r3, [r2, #8]
 8007c18:	da07      	bge.n	8007c2a <__sfputc_r+0x1c>
 8007c1a:	6994      	ldr	r4, [r2, #24]
 8007c1c:	42a3      	cmp	r3, r4
 8007c1e:	db01      	blt.n	8007c24 <__sfputc_r+0x16>
 8007c20:	290a      	cmp	r1, #10
 8007c22:	d102      	bne.n	8007c2a <__sfputc_r+0x1c>
 8007c24:	bc10      	pop	{r4}
 8007c26:	f000 b949 	b.w	8007ebc <__swbuf_r>
 8007c2a:	6813      	ldr	r3, [r2, #0]
 8007c2c:	1c58      	adds	r0, r3, #1
 8007c2e:	6010      	str	r0, [r2, #0]
 8007c30:	7019      	strb	r1, [r3, #0]
 8007c32:	4608      	mov	r0, r1
 8007c34:	bc10      	pop	{r4}
 8007c36:	4770      	bx	lr

08007c38 <__sfputs_r>:
 8007c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c3a:	4606      	mov	r6, r0
 8007c3c:	460f      	mov	r7, r1
 8007c3e:	4614      	mov	r4, r2
 8007c40:	18d5      	adds	r5, r2, r3
 8007c42:	42ac      	cmp	r4, r5
 8007c44:	d101      	bne.n	8007c4a <__sfputs_r+0x12>
 8007c46:	2000      	movs	r0, #0
 8007c48:	e007      	b.n	8007c5a <__sfputs_r+0x22>
 8007c4a:	463a      	mov	r2, r7
 8007c4c:	4630      	mov	r0, r6
 8007c4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c52:	f7ff ffdc 	bl	8007c0e <__sfputc_r>
 8007c56:	1c43      	adds	r3, r0, #1
 8007c58:	d1f3      	bne.n	8007c42 <__sfputs_r+0xa>
 8007c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007c5c <_vfiprintf_r>:
 8007c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c60:	460d      	mov	r5, r1
 8007c62:	4614      	mov	r4, r2
 8007c64:	4698      	mov	r8, r3
 8007c66:	4606      	mov	r6, r0
 8007c68:	b09d      	sub	sp, #116	; 0x74
 8007c6a:	b118      	cbz	r0, 8007c74 <_vfiprintf_r+0x18>
 8007c6c:	6983      	ldr	r3, [r0, #24]
 8007c6e:	b90b      	cbnz	r3, 8007c74 <_vfiprintf_r+0x18>
 8007c70:	f000 fb10 	bl	8008294 <__sinit>
 8007c74:	4b89      	ldr	r3, [pc, #548]	; (8007e9c <_vfiprintf_r+0x240>)
 8007c76:	429d      	cmp	r5, r3
 8007c78:	d11b      	bne.n	8007cb2 <_vfiprintf_r+0x56>
 8007c7a:	6875      	ldr	r5, [r6, #4]
 8007c7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c7e:	07d9      	lsls	r1, r3, #31
 8007c80:	d405      	bmi.n	8007c8e <_vfiprintf_r+0x32>
 8007c82:	89ab      	ldrh	r3, [r5, #12]
 8007c84:	059a      	lsls	r2, r3, #22
 8007c86:	d402      	bmi.n	8007c8e <_vfiprintf_r+0x32>
 8007c88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c8a:	f000 fba1 	bl	80083d0 <__retarget_lock_acquire_recursive>
 8007c8e:	89ab      	ldrh	r3, [r5, #12]
 8007c90:	071b      	lsls	r3, r3, #28
 8007c92:	d501      	bpl.n	8007c98 <_vfiprintf_r+0x3c>
 8007c94:	692b      	ldr	r3, [r5, #16]
 8007c96:	b9eb      	cbnz	r3, 8007cd4 <_vfiprintf_r+0x78>
 8007c98:	4629      	mov	r1, r5
 8007c9a:	4630      	mov	r0, r6
 8007c9c:	f000 f96e 	bl	8007f7c <__swsetup_r>
 8007ca0:	b1c0      	cbz	r0, 8007cd4 <_vfiprintf_r+0x78>
 8007ca2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ca4:	07dc      	lsls	r4, r3, #31
 8007ca6:	d50e      	bpl.n	8007cc6 <_vfiprintf_r+0x6a>
 8007ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cac:	b01d      	add	sp, #116	; 0x74
 8007cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cb2:	4b7b      	ldr	r3, [pc, #492]	; (8007ea0 <_vfiprintf_r+0x244>)
 8007cb4:	429d      	cmp	r5, r3
 8007cb6:	d101      	bne.n	8007cbc <_vfiprintf_r+0x60>
 8007cb8:	68b5      	ldr	r5, [r6, #8]
 8007cba:	e7df      	b.n	8007c7c <_vfiprintf_r+0x20>
 8007cbc:	4b79      	ldr	r3, [pc, #484]	; (8007ea4 <_vfiprintf_r+0x248>)
 8007cbe:	429d      	cmp	r5, r3
 8007cc0:	bf08      	it	eq
 8007cc2:	68f5      	ldreq	r5, [r6, #12]
 8007cc4:	e7da      	b.n	8007c7c <_vfiprintf_r+0x20>
 8007cc6:	89ab      	ldrh	r3, [r5, #12]
 8007cc8:	0598      	lsls	r0, r3, #22
 8007cca:	d4ed      	bmi.n	8007ca8 <_vfiprintf_r+0x4c>
 8007ccc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cce:	f000 fb80 	bl	80083d2 <__retarget_lock_release_recursive>
 8007cd2:	e7e9      	b.n	8007ca8 <_vfiprintf_r+0x4c>
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	9309      	str	r3, [sp, #36]	; 0x24
 8007cd8:	2320      	movs	r3, #32
 8007cda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007cde:	2330      	movs	r3, #48	; 0x30
 8007ce0:	f04f 0901 	mov.w	r9, #1
 8007ce4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ce8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007ea8 <_vfiprintf_r+0x24c>
 8007cec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007cf0:	4623      	mov	r3, r4
 8007cf2:	469a      	mov	sl, r3
 8007cf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cf8:	b10a      	cbz	r2, 8007cfe <_vfiprintf_r+0xa2>
 8007cfa:	2a25      	cmp	r2, #37	; 0x25
 8007cfc:	d1f9      	bne.n	8007cf2 <_vfiprintf_r+0x96>
 8007cfe:	ebba 0b04 	subs.w	fp, sl, r4
 8007d02:	d00b      	beq.n	8007d1c <_vfiprintf_r+0xc0>
 8007d04:	465b      	mov	r3, fp
 8007d06:	4622      	mov	r2, r4
 8007d08:	4629      	mov	r1, r5
 8007d0a:	4630      	mov	r0, r6
 8007d0c:	f7ff ff94 	bl	8007c38 <__sfputs_r>
 8007d10:	3001      	adds	r0, #1
 8007d12:	f000 80aa 	beq.w	8007e6a <_vfiprintf_r+0x20e>
 8007d16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d18:	445a      	add	r2, fp
 8007d1a:	9209      	str	r2, [sp, #36]	; 0x24
 8007d1c:	f89a 3000 	ldrb.w	r3, [sl]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	f000 80a2 	beq.w	8007e6a <_vfiprintf_r+0x20e>
 8007d26:	2300      	movs	r3, #0
 8007d28:	f04f 32ff 	mov.w	r2, #4294967295
 8007d2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d30:	f10a 0a01 	add.w	sl, sl, #1
 8007d34:	9304      	str	r3, [sp, #16]
 8007d36:	9307      	str	r3, [sp, #28]
 8007d38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d3c:	931a      	str	r3, [sp, #104]	; 0x68
 8007d3e:	4654      	mov	r4, sl
 8007d40:	2205      	movs	r2, #5
 8007d42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d46:	4858      	ldr	r0, [pc, #352]	; (8007ea8 <_vfiprintf_r+0x24c>)
 8007d48:	f7ff f8d0 	bl	8006eec <memchr>
 8007d4c:	9a04      	ldr	r2, [sp, #16]
 8007d4e:	b9d8      	cbnz	r0, 8007d88 <_vfiprintf_r+0x12c>
 8007d50:	06d1      	lsls	r1, r2, #27
 8007d52:	bf44      	itt	mi
 8007d54:	2320      	movmi	r3, #32
 8007d56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d5a:	0713      	lsls	r3, r2, #28
 8007d5c:	bf44      	itt	mi
 8007d5e:	232b      	movmi	r3, #43	; 0x2b
 8007d60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d64:	f89a 3000 	ldrb.w	r3, [sl]
 8007d68:	2b2a      	cmp	r3, #42	; 0x2a
 8007d6a:	d015      	beq.n	8007d98 <_vfiprintf_r+0x13c>
 8007d6c:	4654      	mov	r4, sl
 8007d6e:	2000      	movs	r0, #0
 8007d70:	f04f 0c0a 	mov.w	ip, #10
 8007d74:	9a07      	ldr	r2, [sp, #28]
 8007d76:	4621      	mov	r1, r4
 8007d78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d7c:	3b30      	subs	r3, #48	; 0x30
 8007d7e:	2b09      	cmp	r3, #9
 8007d80:	d94e      	bls.n	8007e20 <_vfiprintf_r+0x1c4>
 8007d82:	b1b0      	cbz	r0, 8007db2 <_vfiprintf_r+0x156>
 8007d84:	9207      	str	r2, [sp, #28]
 8007d86:	e014      	b.n	8007db2 <_vfiprintf_r+0x156>
 8007d88:	eba0 0308 	sub.w	r3, r0, r8
 8007d8c:	fa09 f303 	lsl.w	r3, r9, r3
 8007d90:	4313      	orrs	r3, r2
 8007d92:	46a2      	mov	sl, r4
 8007d94:	9304      	str	r3, [sp, #16]
 8007d96:	e7d2      	b.n	8007d3e <_vfiprintf_r+0xe2>
 8007d98:	9b03      	ldr	r3, [sp, #12]
 8007d9a:	1d19      	adds	r1, r3, #4
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	9103      	str	r1, [sp, #12]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	bfbb      	ittet	lt
 8007da4:	425b      	neglt	r3, r3
 8007da6:	f042 0202 	orrlt.w	r2, r2, #2
 8007daa:	9307      	strge	r3, [sp, #28]
 8007dac:	9307      	strlt	r3, [sp, #28]
 8007dae:	bfb8      	it	lt
 8007db0:	9204      	strlt	r2, [sp, #16]
 8007db2:	7823      	ldrb	r3, [r4, #0]
 8007db4:	2b2e      	cmp	r3, #46	; 0x2e
 8007db6:	d10c      	bne.n	8007dd2 <_vfiprintf_r+0x176>
 8007db8:	7863      	ldrb	r3, [r4, #1]
 8007dba:	2b2a      	cmp	r3, #42	; 0x2a
 8007dbc:	d135      	bne.n	8007e2a <_vfiprintf_r+0x1ce>
 8007dbe:	9b03      	ldr	r3, [sp, #12]
 8007dc0:	3402      	adds	r4, #2
 8007dc2:	1d1a      	adds	r2, r3, #4
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	9203      	str	r2, [sp, #12]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	bfb8      	it	lt
 8007dcc:	f04f 33ff 	movlt.w	r3, #4294967295
 8007dd0:	9305      	str	r3, [sp, #20]
 8007dd2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007eac <_vfiprintf_r+0x250>
 8007dd6:	2203      	movs	r2, #3
 8007dd8:	4650      	mov	r0, sl
 8007dda:	7821      	ldrb	r1, [r4, #0]
 8007ddc:	f7ff f886 	bl	8006eec <memchr>
 8007de0:	b140      	cbz	r0, 8007df4 <_vfiprintf_r+0x198>
 8007de2:	2340      	movs	r3, #64	; 0x40
 8007de4:	eba0 000a 	sub.w	r0, r0, sl
 8007de8:	fa03 f000 	lsl.w	r0, r3, r0
 8007dec:	9b04      	ldr	r3, [sp, #16]
 8007dee:	3401      	adds	r4, #1
 8007df0:	4303      	orrs	r3, r0
 8007df2:	9304      	str	r3, [sp, #16]
 8007df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007df8:	2206      	movs	r2, #6
 8007dfa:	482d      	ldr	r0, [pc, #180]	; (8007eb0 <_vfiprintf_r+0x254>)
 8007dfc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e00:	f7ff f874 	bl	8006eec <memchr>
 8007e04:	2800      	cmp	r0, #0
 8007e06:	d03f      	beq.n	8007e88 <_vfiprintf_r+0x22c>
 8007e08:	4b2a      	ldr	r3, [pc, #168]	; (8007eb4 <_vfiprintf_r+0x258>)
 8007e0a:	bb1b      	cbnz	r3, 8007e54 <_vfiprintf_r+0x1f8>
 8007e0c:	9b03      	ldr	r3, [sp, #12]
 8007e0e:	3307      	adds	r3, #7
 8007e10:	f023 0307 	bic.w	r3, r3, #7
 8007e14:	3308      	adds	r3, #8
 8007e16:	9303      	str	r3, [sp, #12]
 8007e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e1a:	443b      	add	r3, r7
 8007e1c:	9309      	str	r3, [sp, #36]	; 0x24
 8007e1e:	e767      	b.n	8007cf0 <_vfiprintf_r+0x94>
 8007e20:	460c      	mov	r4, r1
 8007e22:	2001      	movs	r0, #1
 8007e24:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e28:	e7a5      	b.n	8007d76 <_vfiprintf_r+0x11a>
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	f04f 0c0a 	mov.w	ip, #10
 8007e30:	4619      	mov	r1, r3
 8007e32:	3401      	adds	r4, #1
 8007e34:	9305      	str	r3, [sp, #20]
 8007e36:	4620      	mov	r0, r4
 8007e38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e3c:	3a30      	subs	r2, #48	; 0x30
 8007e3e:	2a09      	cmp	r2, #9
 8007e40:	d903      	bls.n	8007e4a <_vfiprintf_r+0x1ee>
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d0c5      	beq.n	8007dd2 <_vfiprintf_r+0x176>
 8007e46:	9105      	str	r1, [sp, #20]
 8007e48:	e7c3      	b.n	8007dd2 <_vfiprintf_r+0x176>
 8007e4a:	4604      	mov	r4, r0
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e52:	e7f0      	b.n	8007e36 <_vfiprintf_r+0x1da>
 8007e54:	ab03      	add	r3, sp, #12
 8007e56:	9300      	str	r3, [sp, #0]
 8007e58:	462a      	mov	r2, r5
 8007e5a:	4630      	mov	r0, r6
 8007e5c:	4b16      	ldr	r3, [pc, #88]	; (8007eb8 <_vfiprintf_r+0x25c>)
 8007e5e:	a904      	add	r1, sp, #16
 8007e60:	f7fd fdda 	bl	8005a18 <_printf_float>
 8007e64:	4607      	mov	r7, r0
 8007e66:	1c78      	adds	r0, r7, #1
 8007e68:	d1d6      	bne.n	8007e18 <_vfiprintf_r+0x1bc>
 8007e6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e6c:	07d9      	lsls	r1, r3, #31
 8007e6e:	d405      	bmi.n	8007e7c <_vfiprintf_r+0x220>
 8007e70:	89ab      	ldrh	r3, [r5, #12]
 8007e72:	059a      	lsls	r2, r3, #22
 8007e74:	d402      	bmi.n	8007e7c <_vfiprintf_r+0x220>
 8007e76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e78:	f000 faab 	bl	80083d2 <__retarget_lock_release_recursive>
 8007e7c:	89ab      	ldrh	r3, [r5, #12]
 8007e7e:	065b      	lsls	r3, r3, #25
 8007e80:	f53f af12 	bmi.w	8007ca8 <_vfiprintf_r+0x4c>
 8007e84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e86:	e711      	b.n	8007cac <_vfiprintf_r+0x50>
 8007e88:	ab03      	add	r3, sp, #12
 8007e8a:	9300      	str	r3, [sp, #0]
 8007e8c:	462a      	mov	r2, r5
 8007e8e:	4630      	mov	r0, r6
 8007e90:	4b09      	ldr	r3, [pc, #36]	; (8007eb8 <_vfiprintf_r+0x25c>)
 8007e92:	a904      	add	r1, sp, #16
 8007e94:	f7fe f85c 	bl	8005f50 <_printf_i>
 8007e98:	e7e4      	b.n	8007e64 <_vfiprintf_r+0x208>
 8007e9a:	bf00      	nop
 8007e9c:	08008b4c 	.word	0x08008b4c
 8007ea0:	08008b6c 	.word	0x08008b6c
 8007ea4:	08008b2c 	.word	0x08008b2c
 8007ea8:	080089d4 	.word	0x080089d4
 8007eac:	080089da 	.word	0x080089da
 8007eb0:	080089de 	.word	0x080089de
 8007eb4:	08005a19 	.word	0x08005a19
 8007eb8:	08007c39 	.word	0x08007c39

08007ebc <__swbuf_r>:
 8007ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ebe:	460e      	mov	r6, r1
 8007ec0:	4614      	mov	r4, r2
 8007ec2:	4605      	mov	r5, r0
 8007ec4:	b118      	cbz	r0, 8007ece <__swbuf_r+0x12>
 8007ec6:	6983      	ldr	r3, [r0, #24]
 8007ec8:	b90b      	cbnz	r3, 8007ece <__swbuf_r+0x12>
 8007eca:	f000 f9e3 	bl	8008294 <__sinit>
 8007ece:	4b21      	ldr	r3, [pc, #132]	; (8007f54 <__swbuf_r+0x98>)
 8007ed0:	429c      	cmp	r4, r3
 8007ed2:	d12b      	bne.n	8007f2c <__swbuf_r+0x70>
 8007ed4:	686c      	ldr	r4, [r5, #4]
 8007ed6:	69a3      	ldr	r3, [r4, #24]
 8007ed8:	60a3      	str	r3, [r4, #8]
 8007eda:	89a3      	ldrh	r3, [r4, #12]
 8007edc:	071a      	lsls	r2, r3, #28
 8007ede:	d52f      	bpl.n	8007f40 <__swbuf_r+0x84>
 8007ee0:	6923      	ldr	r3, [r4, #16]
 8007ee2:	b36b      	cbz	r3, 8007f40 <__swbuf_r+0x84>
 8007ee4:	6923      	ldr	r3, [r4, #16]
 8007ee6:	6820      	ldr	r0, [r4, #0]
 8007ee8:	b2f6      	uxtb	r6, r6
 8007eea:	1ac0      	subs	r0, r0, r3
 8007eec:	6963      	ldr	r3, [r4, #20]
 8007eee:	4637      	mov	r7, r6
 8007ef0:	4283      	cmp	r3, r0
 8007ef2:	dc04      	bgt.n	8007efe <__swbuf_r+0x42>
 8007ef4:	4621      	mov	r1, r4
 8007ef6:	4628      	mov	r0, r5
 8007ef8:	f000 f938 	bl	800816c <_fflush_r>
 8007efc:	bb30      	cbnz	r0, 8007f4c <__swbuf_r+0x90>
 8007efe:	68a3      	ldr	r3, [r4, #8]
 8007f00:	3001      	adds	r0, #1
 8007f02:	3b01      	subs	r3, #1
 8007f04:	60a3      	str	r3, [r4, #8]
 8007f06:	6823      	ldr	r3, [r4, #0]
 8007f08:	1c5a      	adds	r2, r3, #1
 8007f0a:	6022      	str	r2, [r4, #0]
 8007f0c:	701e      	strb	r6, [r3, #0]
 8007f0e:	6963      	ldr	r3, [r4, #20]
 8007f10:	4283      	cmp	r3, r0
 8007f12:	d004      	beq.n	8007f1e <__swbuf_r+0x62>
 8007f14:	89a3      	ldrh	r3, [r4, #12]
 8007f16:	07db      	lsls	r3, r3, #31
 8007f18:	d506      	bpl.n	8007f28 <__swbuf_r+0x6c>
 8007f1a:	2e0a      	cmp	r6, #10
 8007f1c:	d104      	bne.n	8007f28 <__swbuf_r+0x6c>
 8007f1e:	4621      	mov	r1, r4
 8007f20:	4628      	mov	r0, r5
 8007f22:	f000 f923 	bl	800816c <_fflush_r>
 8007f26:	b988      	cbnz	r0, 8007f4c <__swbuf_r+0x90>
 8007f28:	4638      	mov	r0, r7
 8007f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f2c:	4b0a      	ldr	r3, [pc, #40]	; (8007f58 <__swbuf_r+0x9c>)
 8007f2e:	429c      	cmp	r4, r3
 8007f30:	d101      	bne.n	8007f36 <__swbuf_r+0x7a>
 8007f32:	68ac      	ldr	r4, [r5, #8]
 8007f34:	e7cf      	b.n	8007ed6 <__swbuf_r+0x1a>
 8007f36:	4b09      	ldr	r3, [pc, #36]	; (8007f5c <__swbuf_r+0xa0>)
 8007f38:	429c      	cmp	r4, r3
 8007f3a:	bf08      	it	eq
 8007f3c:	68ec      	ldreq	r4, [r5, #12]
 8007f3e:	e7ca      	b.n	8007ed6 <__swbuf_r+0x1a>
 8007f40:	4621      	mov	r1, r4
 8007f42:	4628      	mov	r0, r5
 8007f44:	f000 f81a 	bl	8007f7c <__swsetup_r>
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	d0cb      	beq.n	8007ee4 <__swbuf_r+0x28>
 8007f4c:	f04f 37ff 	mov.w	r7, #4294967295
 8007f50:	e7ea      	b.n	8007f28 <__swbuf_r+0x6c>
 8007f52:	bf00      	nop
 8007f54:	08008b4c 	.word	0x08008b4c
 8007f58:	08008b6c 	.word	0x08008b6c
 8007f5c:	08008b2c 	.word	0x08008b2c

08007f60 <__ascii_wctomb>:
 8007f60:	4603      	mov	r3, r0
 8007f62:	4608      	mov	r0, r1
 8007f64:	b141      	cbz	r1, 8007f78 <__ascii_wctomb+0x18>
 8007f66:	2aff      	cmp	r2, #255	; 0xff
 8007f68:	d904      	bls.n	8007f74 <__ascii_wctomb+0x14>
 8007f6a:	228a      	movs	r2, #138	; 0x8a
 8007f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f70:	601a      	str	r2, [r3, #0]
 8007f72:	4770      	bx	lr
 8007f74:	2001      	movs	r0, #1
 8007f76:	700a      	strb	r2, [r1, #0]
 8007f78:	4770      	bx	lr
	...

08007f7c <__swsetup_r>:
 8007f7c:	4b32      	ldr	r3, [pc, #200]	; (8008048 <__swsetup_r+0xcc>)
 8007f7e:	b570      	push	{r4, r5, r6, lr}
 8007f80:	681d      	ldr	r5, [r3, #0]
 8007f82:	4606      	mov	r6, r0
 8007f84:	460c      	mov	r4, r1
 8007f86:	b125      	cbz	r5, 8007f92 <__swsetup_r+0x16>
 8007f88:	69ab      	ldr	r3, [r5, #24]
 8007f8a:	b913      	cbnz	r3, 8007f92 <__swsetup_r+0x16>
 8007f8c:	4628      	mov	r0, r5
 8007f8e:	f000 f981 	bl	8008294 <__sinit>
 8007f92:	4b2e      	ldr	r3, [pc, #184]	; (800804c <__swsetup_r+0xd0>)
 8007f94:	429c      	cmp	r4, r3
 8007f96:	d10f      	bne.n	8007fb8 <__swsetup_r+0x3c>
 8007f98:	686c      	ldr	r4, [r5, #4]
 8007f9a:	89a3      	ldrh	r3, [r4, #12]
 8007f9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fa0:	0719      	lsls	r1, r3, #28
 8007fa2:	d42c      	bmi.n	8007ffe <__swsetup_r+0x82>
 8007fa4:	06dd      	lsls	r5, r3, #27
 8007fa6:	d411      	bmi.n	8007fcc <__swsetup_r+0x50>
 8007fa8:	2309      	movs	r3, #9
 8007faa:	6033      	str	r3, [r6, #0]
 8007fac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb4:	81a3      	strh	r3, [r4, #12]
 8007fb6:	e03e      	b.n	8008036 <__swsetup_r+0xba>
 8007fb8:	4b25      	ldr	r3, [pc, #148]	; (8008050 <__swsetup_r+0xd4>)
 8007fba:	429c      	cmp	r4, r3
 8007fbc:	d101      	bne.n	8007fc2 <__swsetup_r+0x46>
 8007fbe:	68ac      	ldr	r4, [r5, #8]
 8007fc0:	e7eb      	b.n	8007f9a <__swsetup_r+0x1e>
 8007fc2:	4b24      	ldr	r3, [pc, #144]	; (8008054 <__swsetup_r+0xd8>)
 8007fc4:	429c      	cmp	r4, r3
 8007fc6:	bf08      	it	eq
 8007fc8:	68ec      	ldreq	r4, [r5, #12]
 8007fca:	e7e6      	b.n	8007f9a <__swsetup_r+0x1e>
 8007fcc:	0758      	lsls	r0, r3, #29
 8007fce:	d512      	bpl.n	8007ff6 <__swsetup_r+0x7a>
 8007fd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fd2:	b141      	cbz	r1, 8007fe6 <__swsetup_r+0x6a>
 8007fd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fd8:	4299      	cmp	r1, r3
 8007fda:	d002      	beq.n	8007fe2 <__swsetup_r+0x66>
 8007fdc:	4630      	mov	r0, r6
 8007fde:	f7ff fb37 	bl	8007650 <_free_r>
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	6363      	str	r3, [r4, #52]	; 0x34
 8007fe6:	89a3      	ldrh	r3, [r4, #12]
 8007fe8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007fec:	81a3      	strh	r3, [r4, #12]
 8007fee:	2300      	movs	r3, #0
 8007ff0:	6063      	str	r3, [r4, #4]
 8007ff2:	6923      	ldr	r3, [r4, #16]
 8007ff4:	6023      	str	r3, [r4, #0]
 8007ff6:	89a3      	ldrh	r3, [r4, #12]
 8007ff8:	f043 0308 	orr.w	r3, r3, #8
 8007ffc:	81a3      	strh	r3, [r4, #12]
 8007ffe:	6923      	ldr	r3, [r4, #16]
 8008000:	b94b      	cbnz	r3, 8008016 <__swsetup_r+0x9a>
 8008002:	89a3      	ldrh	r3, [r4, #12]
 8008004:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800800c:	d003      	beq.n	8008016 <__swsetup_r+0x9a>
 800800e:	4621      	mov	r1, r4
 8008010:	4630      	mov	r0, r6
 8008012:	f000 fa05 	bl	8008420 <__smakebuf_r>
 8008016:	89a0      	ldrh	r0, [r4, #12]
 8008018:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800801c:	f010 0301 	ands.w	r3, r0, #1
 8008020:	d00a      	beq.n	8008038 <__swsetup_r+0xbc>
 8008022:	2300      	movs	r3, #0
 8008024:	60a3      	str	r3, [r4, #8]
 8008026:	6963      	ldr	r3, [r4, #20]
 8008028:	425b      	negs	r3, r3
 800802a:	61a3      	str	r3, [r4, #24]
 800802c:	6923      	ldr	r3, [r4, #16]
 800802e:	b943      	cbnz	r3, 8008042 <__swsetup_r+0xc6>
 8008030:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008034:	d1ba      	bne.n	8007fac <__swsetup_r+0x30>
 8008036:	bd70      	pop	{r4, r5, r6, pc}
 8008038:	0781      	lsls	r1, r0, #30
 800803a:	bf58      	it	pl
 800803c:	6963      	ldrpl	r3, [r4, #20]
 800803e:	60a3      	str	r3, [r4, #8]
 8008040:	e7f4      	b.n	800802c <__swsetup_r+0xb0>
 8008042:	2000      	movs	r0, #0
 8008044:	e7f7      	b.n	8008036 <__swsetup_r+0xba>
 8008046:	bf00      	nop
 8008048:	2000001c 	.word	0x2000001c
 800804c:	08008b4c 	.word	0x08008b4c
 8008050:	08008b6c 	.word	0x08008b6c
 8008054:	08008b2c 	.word	0x08008b2c

08008058 <abort>:
 8008058:	2006      	movs	r0, #6
 800805a:	b508      	push	{r3, lr}
 800805c:	f000 fa50 	bl	8008500 <raise>
 8008060:	2001      	movs	r0, #1
 8008062:	f7f9 fec4 	bl	8001dee <_exit>
	...

08008068 <__sflush_r>:
 8008068:	898a      	ldrh	r2, [r1, #12]
 800806a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800806c:	4605      	mov	r5, r0
 800806e:	0710      	lsls	r0, r2, #28
 8008070:	460c      	mov	r4, r1
 8008072:	d457      	bmi.n	8008124 <__sflush_r+0xbc>
 8008074:	684b      	ldr	r3, [r1, #4]
 8008076:	2b00      	cmp	r3, #0
 8008078:	dc04      	bgt.n	8008084 <__sflush_r+0x1c>
 800807a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800807c:	2b00      	cmp	r3, #0
 800807e:	dc01      	bgt.n	8008084 <__sflush_r+0x1c>
 8008080:	2000      	movs	r0, #0
 8008082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008084:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008086:	2e00      	cmp	r6, #0
 8008088:	d0fa      	beq.n	8008080 <__sflush_r+0x18>
 800808a:	2300      	movs	r3, #0
 800808c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008090:	682f      	ldr	r7, [r5, #0]
 8008092:	602b      	str	r3, [r5, #0]
 8008094:	d032      	beq.n	80080fc <__sflush_r+0x94>
 8008096:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008098:	89a3      	ldrh	r3, [r4, #12]
 800809a:	075a      	lsls	r2, r3, #29
 800809c:	d505      	bpl.n	80080aa <__sflush_r+0x42>
 800809e:	6863      	ldr	r3, [r4, #4]
 80080a0:	1ac0      	subs	r0, r0, r3
 80080a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80080a4:	b10b      	cbz	r3, 80080aa <__sflush_r+0x42>
 80080a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080a8:	1ac0      	subs	r0, r0, r3
 80080aa:	2300      	movs	r3, #0
 80080ac:	4602      	mov	r2, r0
 80080ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080b0:	4628      	mov	r0, r5
 80080b2:	6a21      	ldr	r1, [r4, #32]
 80080b4:	47b0      	blx	r6
 80080b6:	1c43      	adds	r3, r0, #1
 80080b8:	89a3      	ldrh	r3, [r4, #12]
 80080ba:	d106      	bne.n	80080ca <__sflush_r+0x62>
 80080bc:	6829      	ldr	r1, [r5, #0]
 80080be:	291d      	cmp	r1, #29
 80080c0:	d82c      	bhi.n	800811c <__sflush_r+0xb4>
 80080c2:	4a29      	ldr	r2, [pc, #164]	; (8008168 <__sflush_r+0x100>)
 80080c4:	40ca      	lsrs	r2, r1
 80080c6:	07d6      	lsls	r6, r2, #31
 80080c8:	d528      	bpl.n	800811c <__sflush_r+0xb4>
 80080ca:	2200      	movs	r2, #0
 80080cc:	6062      	str	r2, [r4, #4]
 80080ce:	6922      	ldr	r2, [r4, #16]
 80080d0:	04d9      	lsls	r1, r3, #19
 80080d2:	6022      	str	r2, [r4, #0]
 80080d4:	d504      	bpl.n	80080e0 <__sflush_r+0x78>
 80080d6:	1c42      	adds	r2, r0, #1
 80080d8:	d101      	bne.n	80080de <__sflush_r+0x76>
 80080da:	682b      	ldr	r3, [r5, #0]
 80080dc:	b903      	cbnz	r3, 80080e0 <__sflush_r+0x78>
 80080de:	6560      	str	r0, [r4, #84]	; 0x54
 80080e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080e2:	602f      	str	r7, [r5, #0]
 80080e4:	2900      	cmp	r1, #0
 80080e6:	d0cb      	beq.n	8008080 <__sflush_r+0x18>
 80080e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080ec:	4299      	cmp	r1, r3
 80080ee:	d002      	beq.n	80080f6 <__sflush_r+0x8e>
 80080f0:	4628      	mov	r0, r5
 80080f2:	f7ff faad 	bl	8007650 <_free_r>
 80080f6:	2000      	movs	r0, #0
 80080f8:	6360      	str	r0, [r4, #52]	; 0x34
 80080fa:	e7c2      	b.n	8008082 <__sflush_r+0x1a>
 80080fc:	6a21      	ldr	r1, [r4, #32]
 80080fe:	2301      	movs	r3, #1
 8008100:	4628      	mov	r0, r5
 8008102:	47b0      	blx	r6
 8008104:	1c41      	adds	r1, r0, #1
 8008106:	d1c7      	bne.n	8008098 <__sflush_r+0x30>
 8008108:	682b      	ldr	r3, [r5, #0]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d0c4      	beq.n	8008098 <__sflush_r+0x30>
 800810e:	2b1d      	cmp	r3, #29
 8008110:	d001      	beq.n	8008116 <__sflush_r+0xae>
 8008112:	2b16      	cmp	r3, #22
 8008114:	d101      	bne.n	800811a <__sflush_r+0xb2>
 8008116:	602f      	str	r7, [r5, #0]
 8008118:	e7b2      	b.n	8008080 <__sflush_r+0x18>
 800811a:	89a3      	ldrh	r3, [r4, #12]
 800811c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008120:	81a3      	strh	r3, [r4, #12]
 8008122:	e7ae      	b.n	8008082 <__sflush_r+0x1a>
 8008124:	690f      	ldr	r7, [r1, #16]
 8008126:	2f00      	cmp	r7, #0
 8008128:	d0aa      	beq.n	8008080 <__sflush_r+0x18>
 800812a:	0793      	lsls	r3, r2, #30
 800812c:	bf18      	it	ne
 800812e:	2300      	movne	r3, #0
 8008130:	680e      	ldr	r6, [r1, #0]
 8008132:	bf08      	it	eq
 8008134:	694b      	ldreq	r3, [r1, #20]
 8008136:	1bf6      	subs	r6, r6, r7
 8008138:	600f      	str	r7, [r1, #0]
 800813a:	608b      	str	r3, [r1, #8]
 800813c:	2e00      	cmp	r6, #0
 800813e:	dd9f      	ble.n	8008080 <__sflush_r+0x18>
 8008140:	4633      	mov	r3, r6
 8008142:	463a      	mov	r2, r7
 8008144:	4628      	mov	r0, r5
 8008146:	6a21      	ldr	r1, [r4, #32]
 8008148:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800814c:	47e0      	blx	ip
 800814e:	2800      	cmp	r0, #0
 8008150:	dc06      	bgt.n	8008160 <__sflush_r+0xf8>
 8008152:	89a3      	ldrh	r3, [r4, #12]
 8008154:	f04f 30ff 	mov.w	r0, #4294967295
 8008158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800815c:	81a3      	strh	r3, [r4, #12]
 800815e:	e790      	b.n	8008082 <__sflush_r+0x1a>
 8008160:	4407      	add	r7, r0
 8008162:	1a36      	subs	r6, r6, r0
 8008164:	e7ea      	b.n	800813c <__sflush_r+0xd4>
 8008166:	bf00      	nop
 8008168:	20400001 	.word	0x20400001

0800816c <_fflush_r>:
 800816c:	b538      	push	{r3, r4, r5, lr}
 800816e:	690b      	ldr	r3, [r1, #16]
 8008170:	4605      	mov	r5, r0
 8008172:	460c      	mov	r4, r1
 8008174:	b913      	cbnz	r3, 800817c <_fflush_r+0x10>
 8008176:	2500      	movs	r5, #0
 8008178:	4628      	mov	r0, r5
 800817a:	bd38      	pop	{r3, r4, r5, pc}
 800817c:	b118      	cbz	r0, 8008186 <_fflush_r+0x1a>
 800817e:	6983      	ldr	r3, [r0, #24]
 8008180:	b90b      	cbnz	r3, 8008186 <_fflush_r+0x1a>
 8008182:	f000 f887 	bl	8008294 <__sinit>
 8008186:	4b14      	ldr	r3, [pc, #80]	; (80081d8 <_fflush_r+0x6c>)
 8008188:	429c      	cmp	r4, r3
 800818a:	d11b      	bne.n	80081c4 <_fflush_r+0x58>
 800818c:	686c      	ldr	r4, [r5, #4]
 800818e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d0ef      	beq.n	8008176 <_fflush_r+0xa>
 8008196:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008198:	07d0      	lsls	r0, r2, #31
 800819a:	d404      	bmi.n	80081a6 <_fflush_r+0x3a>
 800819c:	0599      	lsls	r1, r3, #22
 800819e:	d402      	bmi.n	80081a6 <_fflush_r+0x3a>
 80081a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081a2:	f000 f915 	bl	80083d0 <__retarget_lock_acquire_recursive>
 80081a6:	4628      	mov	r0, r5
 80081a8:	4621      	mov	r1, r4
 80081aa:	f7ff ff5d 	bl	8008068 <__sflush_r>
 80081ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081b0:	4605      	mov	r5, r0
 80081b2:	07da      	lsls	r2, r3, #31
 80081b4:	d4e0      	bmi.n	8008178 <_fflush_r+0xc>
 80081b6:	89a3      	ldrh	r3, [r4, #12]
 80081b8:	059b      	lsls	r3, r3, #22
 80081ba:	d4dd      	bmi.n	8008178 <_fflush_r+0xc>
 80081bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081be:	f000 f908 	bl	80083d2 <__retarget_lock_release_recursive>
 80081c2:	e7d9      	b.n	8008178 <_fflush_r+0xc>
 80081c4:	4b05      	ldr	r3, [pc, #20]	; (80081dc <_fflush_r+0x70>)
 80081c6:	429c      	cmp	r4, r3
 80081c8:	d101      	bne.n	80081ce <_fflush_r+0x62>
 80081ca:	68ac      	ldr	r4, [r5, #8]
 80081cc:	e7df      	b.n	800818e <_fflush_r+0x22>
 80081ce:	4b04      	ldr	r3, [pc, #16]	; (80081e0 <_fflush_r+0x74>)
 80081d0:	429c      	cmp	r4, r3
 80081d2:	bf08      	it	eq
 80081d4:	68ec      	ldreq	r4, [r5, #12]
 80081d6:	e7da      	b.n	800818e <_fflush_r+0x22>
 80081d8:	08008b4c 	.word	0x08008b4c
 80081dc:	08008b6c 	.word	0x08008b6c
 80081e0:	08008b2c 	.word	0x08008b2c

080081e4 <std>:
 80081e4:	2300      	movs	r3, #0
 80081e6:	b510      	push	{r4, lr}
 80081e8:	4604      	mov	r4, r0
 80081ea:	e9c0 3300 	strd	r3, r3, [r0]
 80081ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80081f2:	6083      	str	r3, [r0, #8]
 80081f4:	8181      	strh	r1, [r0, #12]
 80081f6:	6643      	str	r3, [r0, #100]	; 0x64
 80081f8:	81c2      	strh	r2, [r0, #14]
 80081fa:	6183      	str	r3, [r0, #24]
 80081fc:	4619      	mov	r1, r3
 80081fe:	2208      	movs	r2, #8
 8008200:	305c      	adds	r0, #92	; 0x5c
 8008202:	f7fd fb63 	bl	80058cc <memset>
 8008206:	4b05      	ldr	r3, [pc, #20]	; (800821c <std+0x38>)
 8008208:	6224      	str	r4, [r4, #32]
 800820a:	6263      	str	r3, [r4, #36]	; 0x24
 800820c:	4b04      	ldr	r3, [pc, #16]	; (8008220 <std+0x3c>)
 800820e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008210:	4b04      	ldr	r3, [pc, #16]	; (8008224 <std+0x40>)
 8008212:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008214:	4b04      	ldr	r3, [pc, #16]	; (8008228 <std+0x44>)
 8008216:	6323      	str	r3, [r4, #48]	; 0x30
 8008218:	bd10      	pop	{r4, pc}
 800821a:	bf00      	nop
 800821c:	08008539 	.word	0x08008539
 8008220:	0800855b 	.word	0x0800855b
 8008224:	08008593 	.word	0x08008593
 8008228:	080085b7 	.word	0x080085b7

0800822c <_cleanup_r>:
 800822c:	4901      	ldr	r1, [pc, #4]	; (8008234 <_cleanup_r+0x8>)
 800822e:	f000 b8af 	b.w	8008390 <_fwalk_reent>
 8008232:	bf00      	nop
 8008234:	0800816d 	.word	0x0800816d

08008238 <__sfmoreglue>:
 8008238:	2268      	movs	r2, #104	; 0x68
 800823a:	b570      	push	{r4, r5, r6, lr}
 800823c:	1e4d      	subs	r5, r1, #1
 800823e:	4355      	muls	r5, r2
 8008240:	460e      	mov	r6, r1
 8008242:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008246:	f7ff fa6b 	bl	8007720 <_malloc_r>
 800824a:	4604      	mov	r4, r0
 800824c:	b140      	cbz	r0, 8008260 <__sfmoreglue+0x28>
 800824e:	2100      	movs	r1, #0
 8008250:	e9c0 1600 	strd	r1, r6, [r0]
 8008254:	300c      	adds	r0, #12
 8008256:	60a0      	str	r0, [r4, #8]
 8008258:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800825c:	f7fd fb36 	bl	80058cc <memset>
 8008260:	4620      	mov	r0, r4
 8008262:	bd70      	pop	{r4, r5, r6, pc}

08008264 <__sfp_lock_acquire>:
 8008264:	4801      	ldr	r0, [pc, #4]	; (800826c <__sfp_lock_acquire+0x8>)
 8008266:	f000 b8b3 	b.w	80083d0 <__retarget_lock_acquire_recursive>
 800826a:	bf00      	nop
 800826c:	200004a1 	.word	0x200004a1

08008270 <__sfp_lock_release>:
 8008270:	4801      	ldr	r0, [pc, #4]	; (8008278 <__sfp_lock_release+0x8>)
 8008272:	f000 b8ae 	b.w	80083d2 <__retarget_lock_release_recursive>
 8008276:	bf00      	nop
 8008278:	200004a1 	.word	0x200004a1

0800827c <__sinit_lock_acquire>:
 800827c:	4801      	ldr	r0, [pc, #4]	; (8008284 <__sinit_lock_acquire+0x8>)
 800827e:	f000 b8a7 	b.w	80083d0 <__retarget_lock_acquire_recursive>
 8008282:	bf00      	nop
 8008284:	200004a2 	.word	0x200004a2

08008288 <__sinit_lock_release>:
 8008288:	4801      	ldr	r0, [pc, #4]	; (8008290 <__sinit_lock_release+0x8>)
 800828a:	f000 b8a2 	b.w	80083d2 <__retarget_lock_release_recursive>
 800828e:	bf00      	nop
 8008290:	200004a2 	.word	0x200004a2

08008294 <__sinit>:
 8008294:	b510      	push	{r4, lr}
 8008296:	4604      	mov	r4, r0
 8008298:	f7ff fff0 	bl	800827c <__sinit_lock_acquire>
 800829c:	69a3      	ldr	r3, [r4, #24]
 800829e:	b11b      	cbz	r3, 80082a8 <__sinit+0x14>
 80082a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082a4:	f7ff bff0 	b.w	8008288 <__sinit_lock_release>
 80082a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80082ac:	6523      	str	r3, [r4, #80]	; 0x50
 80082ae:	4b13      	ldr	r3, [pc, #76]	; (80082fc <__sinit+0x68>)
 80082b0:	4a13      	ldr	r2, [pc, #76]	; (8008300 <__sinit+0x6c>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80082b6:	42a3      	cmp	r3, r4
 80082b8:	bf08      	it	eq
 80082ba:	2301      	moveq	r3, #1
 80082bc:	4620      	mov	r0, r4
 80082be:	bf08      	it	eq
 80082c0:	61a3      	streq	r3, [r4, #24]
 80082c2:	f000 f81f 	bl	8008304 <__sfp>
 80082c6:	6060      	str	r0, [r4, #4]
 80082c8:	4620      	mov	r0, r4
 80082ca:	f000 f81b 	bl	8008304 <__sfp>
 80082ce:	60a0      	str	r0, [r4, #8]
 80082d0:	4620      	mov	r0, r4
 80082d2:	f000 f817 	bl	8008304 <__sfp>
 80082d6:	2200      	movs	r2, #0
 80082d8:	2104      	movs	r1, #4
 80082da:	60e0      	str	r0, [r4, #12]
 80082dc:	6860      	ldr	r0, [r4, #4]
 80082de:	f7ff ff81 	bl	80081e4 <std>
 80082e2:	2201      	movs	r2, #1
 80082e4:	2109      	movs	r1, #9
 80082e6:	68a0      	ldr	r0, [r4, #8]
 80082e8:	f7ff ff7c 	bl	80081e4 <std>
 80082ec:	2202      	movs	r2, #2
 80082ee:	2112      	movs	r1, #18
 80082f0:	68e0      	ldr	r0, [r4, #12]
 80082f2:	f7ff ff77 	bl	80081e4 <std>
 80082f6:	2301      	movs	r3, #1
 80082f8:	61a3      	str	r3, [r4, #24]
 80082fa:	e7d1      	b.n	80082a0 <__sinit+0xc>
 80082fc:	080087b0 	.word	0x080087b0
 8008300:	0800822d 	.word	0x0800822d

08008304 <__sfp>:
 8008304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008306:	4607      	mov	r7, r0
 8008308:	f7ff ffac 	bl	8008264 <__sfp_lock_acquire>
 800830c:	4b1e      	ldr	r3, [pc, #120]	; (8008388 <__sfp+0x84>)
 800830e:	681e      	ldr	r6, [r3, #0]
 8008310:	69b3      	ldr	r3, [r6, #24]
 8008312:	b913      	cbnz	r3, 800831a <__sfp+0x16>
 8008314:	4630      	mov	r0, r6
 8008316:	f7ff ffbd 	bl	8008294 <__sinit>
 800831a:	3648      	adds	r6, #72	; 0x48
 800831c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008320:	3b01      	subs	r3, #1
 8008322:	d503      	bpl.n	800832c <__sfp+0x28>
 8008324:	6833      	ldr	r3, [r6, #0]
 8008326:	b30b      	cbz	r3, 800836c <__sfp+0x68>
 8008328:	6836      	ldr	r6, [r6, #0]
 800832a:	e7f7      	b.n	800831c <__sfp+0x18>
 800832c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008330:	b9d5      	cbnz	r5, 8008368 <__sfp+0x64>
 8008332:	4b16      	ldr	r3, [pc, #88]	; (800838c <__sfp+0x88>)
 8008334:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008338:	60e3      	str	r3, [r4, #12]
 800833a:	6665      	str	r5, [r4, #100]	; 0x64
 800833c:	f000 f847 	bl	80083ce <__retarget_lock_init_recursive>
 8008340:	f7ff ff96 	bl	8008270 <__sfp_lock_release>
 8008344:	2208      	movs	r2, #8
 8008346:	4629      	mov	r1, r5
 8008348:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800834c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008350:	6025      	str	r5, [r4, #0]
 8008352:	61a5      	str	r5, [r4, #24]
 8008354:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008358:	f7fd fab8 	bl	80058cc <memset>
 800835c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008360:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008364:	4620      	mov	r0, r4
 8008366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008368:	3468      	adds	r4, #104	; 0x68
 800836a:	e7d9      	b.n	8008320 <__sfp+0x1c>
 800836c:	2104      	movs	r1, #4
 800836e:	4638      	mov	r0, r7
 8008370:	f7ff ff62 	bl	8008238 <__sfmoreglue>
 8008374:	4604      	mov	r4, r0
 8008376:	6030      	str	r0, [r6, #0]
 8008378:	2800      	cmp	r0, #0
 800837a:	d1d5      	bne.n	8008328 <__sfp+0x24>
 800837c:	f7ff ff78 	bl	8008270 <__sfp_lock_release>
 8008380:	230c      	movs	r3, #12
 8008382:	603b      	str	r3, [r7, #0]
 8008384:	e7ee      	b.n	8008364 <__sfp+0x60>
 8008386:	bf00      	nop
 8008388:	080087b0 	.word	0x080087b0
 800838c:	ffff0001 	.word	0xffff0001

08008390 <_fwalk_reent>:
 8008390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008394:	4606      	mov	r6, r0
 8008396:	4688      	mov	r8, r1
 8008398:	2700      	movs	r7, #0
 800839a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800839e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80083a2:	f1b9 0901 	subs.w	r9, r9, #1
 80083a6:	d505      	bpl.n	80083b4 <_fwalk_reent+0x24>
 80083a8:	6824      	ldr	r4, [r4, #0]
 80083aa:	2c00      	cmp	r4, #0
 80083ac:	d1f7      	bne.n	800839e <_fwalk_reent+0xe>
 80083ae:	4638      	mov	r0, r7
 80083b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083b4:	89ab      	ldrh	r3, [r5, #12]
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d907      	bls.n	80083ca <_fwalk_reent+0x3a>
 80083ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80083be:	3301      	adds	r3, #1
 80083c0:	d003      	beq.n	80083ca <_fwalk_reent+0x3a>
 80083c2:	4629      	mov	r1, r5
 80083c4:	4630      	mov	r0, r6
 80083c6:	47c0      	blx	r8
 80083c8:	4307      	orrs	r7, r0
 80083ca:	3568      	adds	r5, #104	; 0x68
 80083cc:	e7e9      	b.n	80083a2 <_fwalk_reent+0x12>

080083ce <__retarget_lock_init_recursive>:
 80083ce:	4770      	bx	lr

080083d0 <__retarget_lock_acquire_recursive>:
 80083d0:	4770      	bx	lr

080083d2 <__retarget_lock_release_recursive>:
 80083d2:	4770      	bx	lr

080083d4 <__swhatbuf_r>:
 80083d4:	b570      	push	{r4, r5, r6, lr}
 80083d6:	460e      	mov	r6, r1
 80083d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083dc:	4614      	mov	r4, r2
 80083de:	2900      	cmp	r1, #0
 80083e0:	461d      	mov	r5, r3
 80083e2:	b096      	sub	sp, #88	; 0x58
 80083e4:	da08      	bge.n	80083f8 <__swhatbuf_r+0x24>
 80083e6:	2200      	movs	r2, #0
 80083e8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80083ec:	602a      	str	r2, [r5, #0]
 80083ee:	061a      	lsls	r2, r3, #24
 80083f0:	d410      	bmi.n	8008414 <__swhatbuf_r+0x40>
 80083f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083f6:	e00e      	b.n	8008416 <__swhatbuf_r+0x42>
 80083f8:	466a      	mov	r2, sp
 80083fa:	f000 f903 	bl	8008604 <_fstat_r>
 80083fe:	2800      	cmp	r0, #0
 8008400:	dbf1      	blt.n	80083e6 <__swhatbuf_r+0x12>
 8008402:	9a01      	ldr	r2, [sp, #4]
 8008404:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008408:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800840c:	425a      	negs	r2, r3
 800840e:	415a      	adcs	r2, r3
 8008410:	602a      	str	r2, [r5, #0]
 8008412:	e7ee      	b.n	80083f2 <__swhatbuf_r+0x1e>
 8008414:	2340      	movs	r3, #64	; 0x40
 8008416:	2000      	movs	r0, #0
 8008418:	6023      	str	r3, [r4, #0]
 800841a:	b016      	add	sp, #88	; 0x58
 800841c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008420 <__smakebuf_r>:
 8008420:	898b      	ldrh	r3, [r1, #12]
 8008422:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008424:	079d      	lsls	r5, r3, #30
 8008426:	4606      	mov	r6, r0
 8008428:	460c      	mov	r4, r1
 800842a:	d507      	bpl.n	800843c <__smakebuf_r+0x1c>
 800842c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008430:	6023      	str	r3, [r4, #0]
 8008432:	6123      	str	r3, [r4, #16]
 8008434:	2301      	movs	r3, #1
 8008436:	6163      	str	r3, [r4, #20]
 8008438:	b002      	add	sp, #8
 800843a:	bd70      	pop	{r4, r5, r6, pc}
 800843c:	466a      	mov	r2, sp
 800843e:	ab01      	add	r3, sp, #4
 8008440:	f7ff ffc8 	bl	80083d4 <__swhatbuf_r>
 8008444:	9900      	ldr	r1, [sp, #0]
 8008446:	4605      	mov	r5, r0
 8008448:	4630      	mov	r0, r6
 800844a:	f7ff f969 	bl	8007720 <_malloc_r>
 800844e:	b948      	cbnz	r0, 8008464 <__smakebuf_r+0x44>
 8008450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008454:	059a      	lsls	r2, r3, #22
 8008456:	d4ef      	bmi.n	8008438 <__smakebuf_r+0x18>
 8008458:	f023 0303 	bic.w	r3, r3, #3
 800845c:	f043 0302 	orr.w	r3, r3, #2
 8008460:	81a3      	strh	r3, [r4, #12]
 8008462:	e7e3      	b.n	800842c <__smakebuf_r+0xc>
 8008464:	4b0d      	ldr	r3, [pc, #52]	; (800849c <__smakebuf_r+0x7c>)
 8008466:	62b3      	str	r3, [r6, #40]	; 0x28
 8008468:	89a3      	ldrh	r3, [r4, #12]
 800846a:	6020      	str	r0, [r4, #0]
 800846c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008470:	81a3      	strh	r3, [r4, #12]
 8008472:	9b00      	ldr	r3, [sp, #0]
 8008474:	6120      	str	r0, [r4, #16]
 8008476:	6163      	str	r3, [r4, #20]
 8008478:	9b01      	ldr	r3, [sp, #4]
 800847a:	b15b      	cbz	r3, 8008494 <__smakebuf_r+0x74>
 800847c:	4630      	mov	r0, r6
 800847e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008482:	f000 f8d1 	bl	8008628 <_isatty_r>
 8008486:	b128      	cbz	r0, 8008494 <__smakebuf_r+0x74>
 8008488:	89a3      	ldrh	r3, [r4, #12]
 800848a:	f023 0303 	bic.w	r3, r3, #3
 800848e:	f043 0301 	orr.w	r3, r3, #1
 8008492:	81a3      	strh	r3, [r4, #12]
 8008494:	89a0      	ldrh	r0, [r4, #12]
 8008496:	4305      	orrs	r5, r0
 8008498:	81a5      	strh	r5, [r4, #12]
 800849a:	e7cd      	b.n	8008438 <__smakebuf_r+0x18>
 800849c:	0800822d 	.word	0x0800822d

080084a0 <_malloc_usable_size_r>:
 80084a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084a4:	1f18      	subs	r0, r3, #4
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	bfbc      	itt	lt
 80084aa:	580b      	ldrlt	r3, [r1, r0]
 80084ac:	18c0      	addlt	r0, r0, r3
 80084ae:	4770      	bx	lr

080084b0 <_raise_r>:
 80084b0:	291f      	cmp	r1, #31
 80084b2:	b538      	push	{r3, r4, r5, lr}
 80084b4:	4604      	mov	r4, r0
 80084b6:	460d      	mov	r5, r1
 80084b8:	d904      	bls.n	80084c4 <_raise_r+0x14>
 80084ba:	2316      	movs	r3, #22
 80084bc:	6003      	str	r3, [r0, #0]
 80084be:	f04f 30ff 	mov.w	r0, #4294967295
 80084c2:	bd38      	pop	{r3, r4, r5, pc}
 80084c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80084c6:	b112      	cbz	r2, 80084ce <_raise_r+0x1e>
 80084c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80084cc:	b94b      	cbnz	r3, 80084e2 <_raise_r+0x32>
 80084ce:	4620      	mov	r0, r4
 80084d0:	f000 f830 	bl	8008534 <_getpid_r>
 80084d4:	462a      	mov	r2, r5
 80084d6:	4601      	mov	r1, r0
 80084d8:	4620      	mov	r0, r4
 80084da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084de:	f000 b817 	b.w	8008510 <_kill_r>
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d00a      	beq.n	80084fc <_raise_r+0x4c>
 80084e6:	1c59      	adds	r1, r3, #1
 80084e8:	d103      	bne.n	80084f2 <_raise_r+0x42>
 80084ea:	2316      	movs	r3, #22
 80084ec:	6003      	str	r3, [r0, #0]
 80084ee:	2001      	movs	r0, #1
 80084f0:	e7e7      	b.n	80084c2 <_raise_r+0x12>
 80084f2:	2400      	movs	r4, #0
 80084f4:	4628      	mov	r0, r5
 80084f6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80084fa:	4798      	blx	r3
 80084fc:	2000      	movs	r0, #0
 80084fe:	e7e0      	b.n	80084c2 <_raise_r+0x12>

08008500 <raise>:
 8008500:	4b02      	ldr	r3, [pc, #8]	; (800850c <raise+0xc>)
 8008502:	4601      	mov	r1, r0
 8008504:	6818      	ldr	r0, [r3, #0]
 8008506:	f7ff bfd3 	b.w	80084b0 <_raise_r>
 800850a:	bf00      	nop
 800850c:	2000001c 	.word	0x2000001c

08008510 <_kill_r>:
 8008510:	b538      	push	{r3, r4, r5, lr}
 8008512:	2300      	movs	r3, #0
 8008514:	4d06      	ldr	r5, [pc, #24]	; (8008530 <_kill_r+0x20>)
 8008516:	4604      	mov	r4, r0
 8008518:	4608      	mov	r0, r1
 800851a:	4611      	mov	r1, r2
 800851c:	602b      	str	r3, [r5, #0]
 800851e:	f7f9 fc56 	bl	8001dce <_kill>
 8008522:	1c43      	adds	r3, r0, #1
 8008524:	d102      	bne.n	800852c <_kill_r+0x1c>
 8008526:	682b      	ldr	r3, [r5, #0]
 8008528:	b103      	cbz	r3, 800852c <_kill_r+0x1c>
 800852a:	6023      	str	r3, [r4, #0]
 800852c:	bd38      	pop	{r3, r4, r5, pc}
 800852e:	bf00      	nop
 8008530:	2000049c 	.word	0x2000049c

08008534 <_getpid_r>:
 8008534:	f7f9 bc44 	b.w	8001dc0 <_getpid>

08008538 <__sread>:
 8008538:	b510      	push	{r4, lr}
 800853a:	460c      	mov	r4, r1
 800853c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008540:	f000 f894 	bl	800866c <_read_r>
 8008544:	2800      	cmp	r0, #0
 8008546:	bfab      	itete	ge
 8008548:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800854a:	89a3      	ldrhlt	r3, [r4, #12]
 800854c:	181b      	addge	r3, r3, r0
 800854e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008552:	bfac      	ite	ge
 8008554:	6563      	strge	r3, [r4, #84]	; 0x54
 8008556:	81a3      	strhlt	r3, [r4, #12]
 8008558:	bd10      	pop	{r4, pc}

0800855a <__swrite>:
 800855a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800855e:	461f      	mov	r7, r3
 8008560:	898b      	ldrh	r3, [r1, #12]
 8008562:	4605      	mov	r5, r0
 8008564:	05db      	lsls	r3, r3, #23
 8008566:	460c      	mov	r4, r1
 8008568:	4616      	mov	r6, r2
 800856a:	d505      	bpl.n	8008578 <__swrite+0x1e>
 800856c:	2302      	movs	r3, #2
 800856e:	2200      	movs	r2, #0
 8008570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008574:	f000 f868 	bl	8008648 <_lseek_r>
 8008578:	89a3      	ldrh	r3, [r4, #12]
 800857a:	4632      	mov	r2, r6
 800857c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008580:	81a3      	strh	r3, [r4, #12]
 8008582:	4628      	mov	r0, r5
 8008584:	463b      	mov	r3, r7
 8008586:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800858a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800858e:	f000 b817 	b.w	80085c0 <_write_r>

08008592 <__sseek>:
 8008592:	b510      	push	{r4, lr}
 8008594:	460c      	mov	r4, r1
 8008596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800859a:	f000 f855 	bl	8008648 <_lseek_r>
 800859e:	1c43      	adds	r3, r0, #1
 80085a0:	89a3      	ldrh	r3, [r4, #12]
 80085a2:	bf15      	itete	ne
 80085a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80085a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80085aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80085ae:	81a3      	strheq	r3, [r4, #12]
 80085b0:	bf18      	it	ne
 80085b2:	81a3      	strhne	r3, [r4, #12]
 80085b4:	bd10      	pop	{r4, pc}

080085b6 <__sclose>:
 80085b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085ba:	f000 b813 	b.w	80085e4 <_close_r>
	...

080085c0 <_write_r>:
 80085c0:	b538      	push	{r3, r4, r5, lr}
 80085c2:	4604      	mov	r4, r0
 80085c4:	4608      	mov	r0, r1
 80085c6:	4611      	mov	r1, r2
 80085c8:	2200      	movs	r2, #0
 80085ca:	4d05      	ldr	r5, [pc, #20]	; (80085e0 <_write_r+0x20>)
 80085cc:	602a      	str	r2, [r5, #0]
 80085ce:	461a      	mov	r2, r3
 80085d0:	f7f9 fc34 	bl	8001e3c <_write>
 80085d4:	1c43      	adds	r3, r0, #1
 80085d6:	d102      	bne.n	80085de <_write_r+0x1e>
 80085d8:	682b      	ldr	r3, [r5, #0]
 80085da:	b103      	cbz	r3, 80085de <_write_r+0x1e>
 80085dc:	6023      	str	r3, [r4, #0]
 80085de:	bd38      	pop	{r3, r4, r5, pc}
 80085e0:	2000049c 	.word	0x2000049c

080085e4 <_close_r>:
 80085e4:	b538      	push	{r3, r4, r5, lr}
 80085e6:	2300      	movs	r3, #0
 80085e8:	4d05      	ldr	r5, [pc, #20]	; (8008600 <_close_r+0x1c>)
 80085ea:	4604      	mov	r4, r0
 80085ec:	4608      	mov	r0, r1
 80085ee:	602b      	str	r3, [r5, #0]
 80085f0:	f7f9 fc40 	bl	8001e74 <_close>
 80085f4:	1c43      	adds	r3, r0, #1
 80085f6:	d102      	bne.n	80085fe <_close_r+0x1a>
 80085f8:	682b      	ldr	r3, [r5, #0]
 80085fa:	b103      	cbz	r3, 80085fe <_close_r+0x1a>
 80085fc:	6023      	str	r3, [r4, #0]
 80085fe:	bd38      	pop	{r3, r4, r5, pc}
 8008600:	2000049c 	.word	0x2000049c

08008604 <_fstat_r>:
 8008604:	b538      	push	{r3, r4, r5, lr}
 8008606:	2300      	movs	r3, #0
 8008608:	4d06      	ldr	r5, [pc, #24]	; (8008624 <_fstat_r+0x20>)
 800860a:	4604      	mov	r4, r0
 800860c:	4608      	mov	r0, r1
 800860e:	4611      	mov	r1, r2
 8008610:	602b      	str	r3, [r5, #0]
 8008612:	f7f9 fc3a 	bl	8001e8a <_fstat>
 8008616:	1c43      	adds	r3, r0, #1
 8008618:	d102      	bne.n	8008620 <_fstat_r+0x1c>
 800861a:	682b      	ldr	r3, [r5, #0]
 800861c:	b103      	cbz	r3, 8008620 <_fstat_r+0x1c>
 800861e:	6023      	str	r3, [r4, #0]
 8008620:	bd38      	pop	{r3, r4, r5, pc}
 8008622:	bf00      	nop
 8008624:	2000049c 	.word	0x2000049c

08008628 <_isatty_r>:
 8008628:	b538      	push	{r3, r4, r5, lr}
 800862a:	2300      	movs	r3, #0
 800862c:	4d05      	ldr	r5, [pc, #20]	; (8008644 <_isatty_r+0x1c>)
 800862e:	4604      	mov	r4, r0
 8008630:	4608      	mov	r0, r1
 8008632:	602b      	str	r3, [r5, #0]
 8008634:	f7f9 fc38 	bl	8001ea8 <_isatty>
 8008638:	1c43      	adds	r3, r0, #1
 800863a:	d102      	bne.n	8008642 <_isatty_r+0x1a>
 800863c:	682b      	ldr	r3, [r5, #0]
 800863e:	b103      	cbz	r3, 8008642 <_isatty_r+0x1a>
 8008640:	6023      	str	r3, [r4, #0]
 8008642:	bd38      	pop	{r3, r4, r5, pc}
 8008644:	2000049c 	.word	0x2000049c

08008648 <_lseek_r>:
 8008648:	b538      	push	{r3, r4, r5, lr}
 800864a:	4604      	mov	r4, r0
 800864c:	4608      	mov	r0, r1
 800864e:	4611      	mov	r1, r2
 8008650:	2200      	movs	r2, #0
 8008652:	4d05      	ldr	r5, [pc, #20]	; (8008668 <_lseek_r+0x20>)
 8008654:	602a      	str	r2, [r5, #0]
 8008656:	461a      	mov	r2, r3
 8008658:	f7f9 fc30 	bl	8001ebc <_lseek>
 800865c:	1c43      	adds	r3, r0, #1
 800865e:	d102      	bne.n	8008666 <_lseek_r+0x1e>
 8008660:	682b      	ldr	r3, [r5, #0]
 8008662:	b103      	cbz	r3, 8008666 <_lseek_r+0x1e>
 8008664:	6023      	str	r3, [r4, #0]
 8008666:	bd38      	pop	{r3, r4, r5, pc}
 8008668:	2000049c 	.word	0x2000049c

0800866c <_read_r>:
 800866c:	b538      	push	{r3, r4, r5, lr}
 800866e:	4604      	mov	r4, r0
 8008670:	4608      	mov	r0, r1
 8008672:	4611      	mov	r1, r2
 8008674:	2200      	movs	r2, #0
 8008676:	4d05      	ldr	r5, [pc, #20]	; (800868c <_read_r+0x20>)
 8008678:	602a      	str	r2, [r5, #0]
 800867a:	461a      	mov	r2, r3
 800867c:	f7f9 fbc1 	bl	8001e02 <_read>
 8008680:	1c43      	adds	r3, r0, #1
 8008682:	d102      	bne.n	800868a <_read_r+0x1e>
 8008684:	682b      	ldr	r3, [r5, #0]
 8008686:	b103      	cbz	r3, 800868a <_read_r+0x1e>
 8008688:	6023      	str	r3, [r4, #0]
 800868a:	bd38      	pop	{r3, r4, r5, pc}
 800868c:	2000049c 	.word	0x2000049c

08008690 <_init>:
 8008690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008692:	bf00      	nop
 8008694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008696:	bc08      	pop	{r3}
 8008698:	469e      	mov	lr, r3
 800869a:	4770      	bx	lr

0800869c <_fini>:
 800869c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800869e:	bf00      	nop
 80086a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086a2:	bc08      	pop	{r3}
 80086a4:	469e      	mov	lr, r3
 80086a6:	4770      	bx	lr
