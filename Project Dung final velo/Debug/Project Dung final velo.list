
Project Dung final velo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f64  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08005074  08005074  00015074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800509c  0800509c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  0800509c  0800509c  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800509c  0800509c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800509c  0800509c  0001509c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050a0  080050a0  000150a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080050a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  2000001c  080050c0  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  080050c0  00020298  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c156  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ef9  00000000  00000000  0002c19b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  0002e098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c28  00000000  00000000  0002ed60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180af  00000000  00000000  0002f988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d64a  00000000  00000000  00047a37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b394  00000000  00000000  00055081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0415  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000377c  00000000  00000000  000e0468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000001c 	.word	0x2000001c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800505c 	.word	0x0800505c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000020 	.word	0x20000020
 800014c:	0800505c 	.word	0x0800505c

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__aeabi_d2uiz>:
 8000a54:	004a      	lsls	r2, r1, #1
 8000a56:	d211      	bcs.n	8000a7c <__aeabi_d2uiz+0x28>
 8000a58:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a5c:	d211      	bcs.n	8000a82 <__aeabi_d2uiz+0x2e>
 8000a5e:	d50d      	bpl.n	8000a7c <__aeabi_d2uiz+0x28>
 8000a60:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a68:	d40e      	bmi.n	8000a88 <__aeabi_d2uiz+0x34>
 8000a6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a76:	fa23 f002 	lsr.w	r0, r3, r2
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d102      	bne.n	8000a8e <__aeabi_d2uiz+0x3a>
 8000a88:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8c:	4770      	bx	lr
 8000a8e:	f04f 0000 	mov.w	r0, #0
 8000a92:	4770      	bx	lr

08000a94 <__aeabi_d2f>:
 8000a94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a98:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a9c:	bf24      	itt	cs
 8000a9e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aa2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aa6:	d90d      	bls.n	8000ac4 <__aeabi_d2f+0x30>
 8000aa8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ab4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000abc:	bf08      	it	eq
 8000abe:	f020 0001 	biceq.w	r0, r0, #1
 8000ac2:	4770      	bx	lr
 8000ac4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac8:	d121      	bne.n	8000b0e <__aeabi_d2f+0x7a>
 8000aca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ace:	bfbc      	itt	lt
 8000ad0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ad4:	4770      	bxlt	lr
 8000ad6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ada:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ade:	f1c2 0218 	rsb	r2, r2, #24
 8000ae2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ae6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aea:	fa20 f002 	lsr.w	r0, r0, r2
 8000aee:	bf18      	it	ne
 8000af0:	f040 0001 	orrne.w	r0, r0, #1
 8000af4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000afc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b00:	ea40 000c 	orr.w	r0, r0, ip
 8000b04:	fa23 f302 	lsr.w	r3, r3, r2
 8000b08:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b0c:	e7cc      	b.n	8000aa8 <__aeabi_d2f+0x14>
 8000b0e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b12:	d107      	bne.n	8000b24 <__aeabi_d2f+0x90>
 8000b14:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b18:	bf1e      	ittt	ne
 8000b1a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b1e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b22:	4770      	bxne	lr
 8000b24:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b28:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <__aeabi_frsub>:
 8000b34:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b38:	e002      	b.n	8000b40 <__addsf3>
 8000b3a:	bf00      	nop

08000b3c <__aeabi_fsub>:
 8000b3c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b40 <__addsf3>:
 8000b40:	0042      	lsls	r2, r0, #1
 8000b42:	bf1f      	itttt	ne
 8000b44:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b48:	ea92 0f03 	teqne	r2, r3
 8000b4c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b50:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b54:	d06a      	beq.n	8000c2c <__addsf3+0xec>
 8000b56:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b5a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b5e:	bfc1      	itttt	gt
 8000b60:	18d2      	addgt	r2, r2, r3
 8000b62:	4041      	eorgt	r1, r0
 8000b64:	4048      	eorgt	r0, r1
 8000b66:	4041      	eorgt	r1, r0
 8000b68:	bfb8      	it	lt
 8000b6a:	425b      	neglt	r3, r3
 8000b6c:	2b19      	cmp	r3, #25
 8000b6e:	bf88      	it	hi
 8000b70:	4770      	bxhi	lr
 8000b72:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4240      	negne	r0, r0
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b8a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b8e:	bf18      	it	ne
 8000b90:	4249      	negne	r1, r1
 8000b92:	ea92 0f03 	teq	r2, r3
 8000b96:	d03f      	beq.n	8000c18 <__addsf3+0xd8>
 8000b98:	f1a2 0201 	sub.w	r2, r2, #1
 8000b9c:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba0:	eb10 000c 	adds.w	r0, r0, ip
 8000ba4:	f1c3 0320 	rsb	r3, r3, #32
 8000ba8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bac:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bb0:	d502      	bpl.n	8000bb8 <__addsf3+0x78>
 8000bb2:	4249      	negs	r1, r1
 8000bb4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bbc:	d313      	bcc.n	8000be6 <__addsf3+0xa6>
 8000bbe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bc2:	d306      	bcc.n	8000bd2 <__addsf3+0x92>
 8000bc4:	0840      	lsrs	r0, r0, #1
 8000bc6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bca:	f102 0201 	add.w	r2, r2, #1
 8000bce:	2afe      	cmp	r2, #254	; 0xfe
 8000bd0:	d251      	bcs.n	8000c76 <__addsf3+0x136>
 8000bd2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bda:	bf08      	it	eq
 8000bdc:	f020 0001 	biceq.w	r0, r0, #1
 8000be0:	ea40 0003 	orr.w	r0, r0, r3
 8000be4:	4770      	bx	lr
 8000be6:	0049      	lsls	r1, r1, #1
 8000be8:	eb40 0000 	adc.w	r0, r0, r0
 8000bec:	3a01      	subs	r2, #1
 8000bee:	bf28      	it	cs
 8000bf0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bf4:	d2ed      	bcs.n	8000bd2 <__addsf3+0x92>
 8000bf6:	fab0 fc80 	clz	ip, r0
 8000bfa:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bfe:	ebb2 020c 	subs.w	r2, r2, ip
 8000c02:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c06:	bfaa      	itet	ge
 8000c08:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c0c:	4252      	neglt	r2, r2
 8000c0e:	4318      	orrge	r0, r3
 8000c10:	bfbc      	itt	lt
 8000c12:	40d0      	lsrlt	r0, r2
 8000c14:	4318      	orrlt	r0, r3
 8000c16:	4770      	bx	lr
 8000c18:	f092 0f00 	teq	r2, #0
 8000c1c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c20:	bf06      	itte	eq
 8000c22:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c26:	3201      	addeq	r2, #1
 8000c28:	3b01      	subne	r3, #1
 8000c2a:	e7b5      	b.n	8000b98 <__addsf3+0x58>
 8000c2c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c30:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c34:	bf18      	it	ne
 8000c36:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c3a:	d021      	beq.n	8000c80 <__addsf3+0x140>
 8000c3c:	ea92 0f03 	teq	r2, r3
 8000c40:	d004      	beq.n	8000c4c <__addsf3+0x10c>
 8000c42:	f092 0f00 	teq	r2, #0
 8000c46:	bf08      	it	eq
 8000c48:	4608      	moveq	r0, r1
 8000c4a:	4770      	bx	lr
 8000c4c:	ea90 0f01 	teq	r0, r1
 8000c50:	bf1c      	itt	ne
 8000c52:	2000      	movne	r0, #0
 8000c54:	4770      	bxne	lr
 8000c56:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c5a:	d104      	bne.n	8000c66 <__addsf3+0x126>
 8000c5c:	0040      	lsls	r0, r0, #1
 8000c5e:	bf28      	it	cs
 8000c60:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c64:	4770      	bx	lr
 8000c66:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c6a:	bf3c      	itt	cc
 8000c6c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c70:	4770      	bxcc	lr
 8000c72:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c76:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7e:	4770      	bx	lr
 8000c80:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c84:	bf16      	itet	ne
 8000c86:	4608      	movne	r0, r1
 8000c88:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c8c:	4601      	movne	r1, r0
 8000c8e:	0242      	lsls	r2, r0, #9
 8000c90:	bf06      	itte	eq
 8000c92:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c96:	ea90 0f01 	teqeq	r0, r1
 8000c9a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c9e:	4770      	bx	lr

08000ca0 <__aeabi_ui2f>:
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	e004      	b.n	8000cb0 <__aeabi_i2f+0x8>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_i2f>:
 8000ca8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cac:	bf48      	it	mi
 8000cae:	4240      	negmi	r0, r0
 8000cb0:	ea5f 0c00 	movs.w	ip, r0
 8000cb4:	bf08      	it	eq
 8000cb6:	4770      	bxeq	lr
 8000cb8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cbc:	4601      	mov	r1, r0
 8000cbe:	f04f 0000 	mov.w	r0, #0
 8000cc2:	e01c      	b.n	8000cfe <__aeabi_l2f+0x2a>

08000cc4 <__aeabi_ul2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e00a      	b.n	8000ce8 <__aeabi_l2f+0x14>
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_l2f>:
 8000cd4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ce0:	d502      	bpl.n	8000ce8 <__aeabi_l2f+0x14>
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	ea5f 0c01 	movs.w	ip, r1
 8000cec:	bf02      	ittt	eq
 8000cee:	4684      	moveq	ip, r0
 8000cf0:	4601      	moveq	r1, r0
 8000cf2:	2000      	moveq	r0, #0
 8000cf4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cf8:	bf08      	it	eq
 8000cfa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cfe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d02:	fabc f28c 	clz	r2, ip
 8000d06:	3a08      	subs	r2, #8
 8000d08:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d0c:	db10      	blt.n	8000d30 <__aeabi_l2f+0x5c>
 8000d0e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d12:	4463      	add	r3, ip
 8000d14:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d18:	f1c2 0220 	rsb	r2, r2, #32
 8000d1c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d20:	fa20 f202 	lsr.w	r2, r0, r2
 8000d24:	eb43 0002 	adc.w	r0, r3, r2
 8000d28:	bf08      	it	eq
 8000d2a:	f020 0001 	biceq.w	r0, r0, #1
 8000d2e:	4770      	bx	lr
 8000d30:	f102 0220 	add.w	r2, r2, #32
 8000d34:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d38:	f1c2 0220 	rsb	r2, r2, #32
 8000d3c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d40:	fa21 f202 	lsr.w	r2, r1, r2
 8000d44:	eb43 0002 	adc.w	r0, r3, r2
 8000d48:	bf08      	it	eq
 8000d4a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d4e:	4770      	bx	lr

08000d50 <__gesf2>:
 8000d50:	f04f 3cff 	mov.w	ip, #4294967295
 8000d54:	e006      	b.n	8000d64 <__cmpsf2+0x4>
 8000d56:	bf00      	nop

08000d58 <__lesf2>:
 8000d58:	f04f 0c01 	mov.w	ip, #1
 8000d5c:	e002      	b.n	8000d64 <__cmpsf2+0x4>
 8000d5e:	bf00      	nop

08000d60 <__cmpsf2>:
 8000d60:	f04f 0c01 	mov.w	ip, #1
 8000d64:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d68:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d6c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d74:	bf18      	it	ne
 8000d76:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d7a:	d011      	beq.n	8000da0 <__cmpsf2+0x40>
 8000d7c:	b001      	add	sp, #4
 8000d7e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d82:	bf18      	it	ne
 8000d84:	ea90 0f01 	teqne	r0, r1
 8000d88:	bf58      	it	pl
 8000d8a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d8e:	bf88      	it	hi
 8000d90:	17c8      	asrhi	r0, r1, #31
 8000d92:	bf38      	it	cc
 8000d94:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d98:	bf18      	it	ne
 8000d9a:	f040 0001 	orrne.w	r0, r0, #1
 8000d9e:	4770      	bx	lr
 8000da0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000da4:	d102      	bne.n	8000dac <__cmpsf2+0x4c>
 8000da6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000daa:	d105      	bne.n	8000db8 <__cmpsf2+0x58>
 8000dac:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000db0:	d1e4      	bne.n	8000d7c <__cmpsf2+0x1c>
 8000db2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000db6:	d0e1      	beq.n	8000d7c <__cmpsf2+0x1c>
 8000db8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <__aeabi_cfrcmple>:
 8000dc0:	4684      	mov	ip, r0
 8000dc2:	4608      	mov	r0, r1
 8000dc4:	4661      	mov	r1, ip
 8000dc6:	e7ff      	b.n	8000dc8 <__aeabi_cfcmpeq>

08000dc8 <__aeabi_cfcmpeq>:
 8000dc8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000dca:	f7ff ffc9 	bl	8000d60 <__cmpsf2>
 8000dce:	2800      	cmp	r0, #0
 8000dd0:	bf48      	it	mi
 8000dd2:	f110 0f00 	cmnmi.w	r0, #0
 8000dd6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000dd8 <__aeabi_fcmpeq>:
 8000dd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ddc:	f7ff fff4 	bl	8000dc8 <__aeabi_cfcmpeq>
 8000de0:	bf0c      	ite	eq
 8000de2:	2001      	moveq	r0, #1
 8000de4:	2000      	movne	r0, #0
 8000de6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dea:	bf00      	nop

08000dec <__aeabi_fcmplt>:
 8000dec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000df0:	f7ff ffea 	bl	8000dc8 <__aeabi_cfcmpeq>
 8000df4:	bf34      	ite	cc
 8000df6:	2001      	movcc	r0, #1
 8000df8:	2000      	movcs	r0, #0
 8000dfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dfe:	bf00      	nop

08000e00 <__aeabi_fcmple>:
 8000e00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e04:	f7ff ffe0 	bl	8000dc8 <__aeabi_cfcmpeq>
 8000e08:	bf94      	ite	ls
 8000e0a:	2001      	movls	r0, #1
 8000e0c:	2000      	movhi	r0, #0
 8000e0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e12:	bf00      	nop

08000e14 <__aeabi_fcmpge>:
 8000e14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e18:	f7ff ffd2 	bl	8000dc0 <__aeabi_cfrcmple>
 8000e1c:	bf94      	ite	ls
 8000e1e:	2001      	movls	r0, #1
 8000e20:	2000      	movhi	r0, #0
 8000e22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e26:	bf00      	nop

08000e28 <__aeabi_fcmpgt>:
 8000e28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e2c:	f7ff ffc8 	bl	8000dc0 <__aeabi_cfrcmple>
 8000e30:	bf34      	ite	cc
 8000e32:	2001      	movcc	r0, #1
 8000e34:	2000      	movcs	r0, #0
 8000e36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e3a:	bf00      	nop

08000e3c <__aeabi_f2uiz>:
 8000e3c:	0042      	lsls	r2, r0, #1
 8000e3e:	d20e      	bcs.n	8000e5e <__aeabi_f2uiz+0x22>
 8000e40:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e44:	d30b      	bcc.n	8000e5e <__aeabi_f2uiz+0x22>
 8000e46:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e4a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e4e:	d409      	bmi.n	8000e64 <__aeabi_f2uiz+0x28>
 8000e50:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e58:	fa23 f002 	lsr.w	r0, r3, r2
 8000e5c:	4770      	bx	lr
 8000e5e:	f04f 0000 	mov.w	r0, #0
 8000e62:	4770      	bx	lr
 8000e64:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e68:	d101      	bne.n	8000e6e <__aeabi_f2uiz+0x32>
 8000e6a:	0242      	lsls	r2, r0, #9
 8000e6c:	d102      	bne.n	8000e74 <__aeabi_f2uiz+0x38>
 8000e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8000e72:	4770      	bx	lr
 8000e74:	f04f 0000 	mov.w	r0, #0
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <BUTTON_ReadPin>:
#include "BUTTON.h"
// (FINAL x3)

// ************************** Low Level Layer *****************************************************//
static ButtonState BUTTON_ReadPin(Button *Button) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  return HAL_GPIO_ReadPin(Button->Port, Button->Pin);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	889b      	ldrh	r3, [r3, #4]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4610      	mov	r0, r2
 8000e90:	f002 f966 	bl	8003160 <HAL_GPIO_ReadPin>
 8000e94:	4603      	mov	r3, r0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <buttonInit>:
// ************************** High Level Layer *****************************************************//
void buttonInit(Button *Button, GPIO_TypeDef *BUTTON_PORT, uint16_t BUTTON_Pin) {
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b084      	sub	sp, #16
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	60f8      	str	r0, [r7, #12]
 8000ea6:	60b9      	str	r1, [r7, #8]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	80fb      	strh	r3, [r7, #6]
  Button->Port = BUTTON_PORT;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	68ba      	ldr	r2, [r7, #8]
 8000eb0:	601a      	str	r2, [r3, #0]
  Button->Pin = BUTTON_Pin;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	88fa      	ldrh	r2, [r7, #6]
 8000eb6:	809a      	strh	r2, [r3, #4]

  Button->state = BUTTON_ReadPin(Button);
 8000eb8:	68f8      	ldr	r0, [r7, #12]
 8000eba:	f7ff ffdf 	bl	8000e7c <BUTTON_ReadPin>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	71da      	strb	r2, [r3, #7]
  Button->preState = Button->state;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	79da      	ldrb	r2, [r3, #7]
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	719a      	strb	r2, [r3, #6]
  Button->timeIn = HAL_GetTick();
 8000ece:	f001 fdc9 	bl	8002a64 <HAL_GetTick>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	609a      	str	r2, [r3, #8]
  Button->hasChanged = false;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2200      	movs	r2, #0
 8000edc:	741a      	strb	r2, [r3, #16]
  Button->_change = false;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	745a      	strb	r2, [r3, #17]
}
 8000ee4:	bf00      	nop
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <buttonRead>:

ButtonState buttonRead(Button *Button) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  ButtonState curState = BUTTON_ReadPin(Button);
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff ffc1 	bl	8000e7c <BUTTON_ReadPin>
 8000efa:	4603      	mov	r3, r0
 8000efc:	73fb      	strb	r3, [r7, #15]
  uint32_t now = HAL_GetTick();
 8000efe:	f001 fdb1 	bl	8002a64 <HAL_GetTick>
 8000f02:	60b8      	str	r0, [r7, #8]
  if (curState != Button->state) {
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	79db      	ldrb	r3, [r3, #7]
 8000f08:	7bfa      	ldrb	r2, [r7, #15]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d026      	beq.n	8000f5c <buttonRead+0x70>
	if (Button->_change == false)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	7c5b      	ldrb	r3, [r3, #17]
 8000f12:	f083 0301 	eor.w	r3, r3, #1
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d005      	beq.n	8000f28 <buttonRead+0x3c>
	{
	  Button->timeIn = now;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	609a      	str	r2, [r3, #8]
	  Button->_change = true;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2201      	movs	r2, #1
 8000f26:	745a      	strb	r2, [r3, #17]
	}
	Button->timeDelta = now - Button->timeIn;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	68ba      	ldr	r2, [r7, #8]
 8000f2e:	1ad2      	subs	r2, r2, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	60da      	str	r2, [r3, #12]
	if (Button->timeDelta > DEBOUND_TIME) {
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	2b32      	cmp	r3, #50	; 0x32
 8000f3a:	d917      	bls.n	8000f6c <buttonRead+0x80>
	  Button->state = curState;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	7bfa      	ldrb	r2, [r7, #15]
 8000f40:	71da      	strb	r2, [r3, #7]
	  Button->timeDelta = 0;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	60da      	str	r2, [r3, #12]
	  Button->timeIn = now;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	609a      	str	r2, [r3, #8]
	  Button->_change = false;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2200      	movs	r2, #0
 8000f52:	745a      	strb	r2, [r3, #17]
	  Button->hasChanged = true;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2201      	movs	r2, #1
 8000f58:	741a      	strb	r2, [r3, #16]
 8000f5a:	e007      	b.n	8000f6c <buttonRead+0x80>
	}
  } else if (curState == Button->state)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	79db      	ldrb	r3, [r3, #7]
 8000f60:	7bfa      	ldrb	r2, [r7, #15]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d102      	bne.n	8000f6c <buttonRead+0x80>
  {
	Button->_change = false;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	745a      	strb	r2, [r3, #17]
  }
  return Button->state;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	79db      	ldrb	r3, [r3, #7]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f7c:	f001 fd1a 	bl	80029b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f80:	f000 f830 	bl	8000fe4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f84:	f000 fa08 	bl	8001398 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000f88:	f000 f872 	bl	8001070 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f8c:	f000 f8c8 	bl	8001120 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f90:	f000 f91a 	bl	80011c8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f94:	f000 f97c 	bl	8001290 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000f98:	f000 f9d4 	bl	8001344 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  start_up();
 8000f9c:	f000 fec6 	bl	8001d2c <start_up>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	state = buttonRead(&SW_Mode);
 8000fa0:	480e      	ldr	r0, [pc, #56]	; (8000fdc <main+0x64>)
 8000fa2:	f7ff ffa3 	bl	8000eec <buttonRead>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <main+0x68>)
 8000fac:	701a      	strb	r2, [r3, #0]
	if (SW_Mode.hasChanged) {
 8000fae:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <main+0x64>)
 8000fb0:	7c1b      	ldrb	r3, [r3, #16]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d00f      	beq.n	8000fd6 <main+0x5e>
	  SW_Mode.hasChanged = false;
 8000fb6:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <main+0x64>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	741a      	strb	r2, [r3, #16]
	  if (state == IDLE) {
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <main+0x68>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d102      	bne.n	8000fca <main+0x52>
		active_idle();
 8000fc4:	f000 ff52 	bl	8001e6c <active_idle>
 8000fc8:	e005      	b.n	8000fd6 <main+0x5e>
	  } else if (state == RUN) {
 8000fca:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <main+0x68>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d101      	bne.n	8000fd6 <main+0x5e>
		active_run();
 8000fd2:	f000 ff6b 	bl	8001eac <active_run>
	  }
	}
	apply_state();
 8000fd6:	f001 fb7f 	bl	80026d8 <apply_state>
	state = buttonRead(&SW_Mode);
 8000fda:	e7e1      	b.n	8000fa0 <main+0x28>
 8000fdc:	200001c8 	.word	0x200001c8
 8000fe0:	20000204 	.word	0x20000204

08000fe4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b090      	sub	sp, #64	; 0x40
 8000fe8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fea:	f107 0318 	add.w	r3, r7, #24
 8000fee:	2228      	movs	r2, #40	; 0x28
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f004 f82a 	bl	800504c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff8:	1d3b      	adds	r3, r7, #4
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
 8001004:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001006:	2301      	movs	r3, #1
 8001008:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800100a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800100e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001010:	2300      	movs	r3, #0
 8001012:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001014:	2301      	movs	r3, #1
 8001016:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001018:	2302      	movs	r3, #2
 800101a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800101c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001020:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001022:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001026:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001028:	f107 0318 	add.w	r3, r7, #24
 800102c:	4618      	mov	r0, r3
 800102e:	f002 f8f7 	bl	8003220 <HAL_RCC_OscConfig>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001038:	f000 fa76 	bl	8001528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103c:	230f      	movs	r3, #15
 800103e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001040:	2302      	movs	r3, #2
 8001042:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001044:	2300      	movs	r3, #0
 8001046:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001048:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800104c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	2101      	movs	r1, #1
 8001056:	4618      	mov	r0, r3
 8001058:	f002 fb64 	bl	8003724 <HAL_RCC_ClockConfig>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001062:	f000 fa61 	bl	8001528 <Error_Handler>
  }
}
 8001066:	bf00      	nop
 8001068:	3740      	adds	r7, #64	; 0x40
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08c      	sub	sp, #48	; 0x30
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001076:	f107 030c 	add.w	r3, r7, #12
 800107a:	2224      	movs	r2, #36	; 0x24
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f003 ffe4 	bl	800504c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800108c:	4b22      	ldr	r3, [pc, #136]	; (8001118 <MX_TIM1_Init+0xa8>)
 800108e:	4a23      	ldr	r2, [pc, #140]	; (800111c <MX_TIM1_Init+0xac>)
 8001090:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001092:	4b21      	ldr	r3, [pc, #132]	; (8001118 <MX_TIM1_Init+0xa8>)
 8001094:	2200      	movs	r2, #0
 8001096:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001098:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <MX_TIM1_Init+0xa8>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800109e:	4b1e      	ldr	r3, [pc, #120]	; (8001118 <MX_TIM1_Init+0xa8>)
 80010a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a6:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <MX_TIM1_Init+0xa8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010ac:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <MX_TIM1_Init+0xa8>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010b2:	4b19      	ldr	r3, [pc, #100]	; (8001118 <MX_TIM1_Init+0xa8>)
 80010b4:	2280      	movs	r2, #128	; 0x80
 80010b6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80010b8:	2303      	movs	r3, #3
 80010ba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010bc:	2300      	movs	r3, #0
 80010be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010c0:	2301      	movs	r3, #1
 80010c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80010c8:	230a      	movs	r3, #10
 80010ca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010cc:	2300      	movs	r3, #0
 80010ce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010d0:	2301      	movs	r3, #1
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80010d8:	230a      	movs	r3, #10
 80010da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	4619      	mov	r1, r3
 80010e2:	480d      	ldr	r0, [pc, #52]	; (8001118 <MX_TIM1_Init+0xa8>)
 80010e4:	f002 fdfa 	bl	8003cdc <HAL_TIM_Encoder_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80010ee:	f000 fa1b 	bl	8001528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f2:	2300      	movs	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	4619      	mov	r1, r3
 80010fe:	4806      	ldr	r0, [pc, #24]	; (8001118 <MX_TIM1_Init+0xa8>)
 8001100:	f003 fb14 	bl	800472c <HAL_TIMEx_MasterConfigSynchronization>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800110a:	f000 fa0d 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800110e:	bf00      	nop
 8001110:	3730      	adds	r7, #48	; 0x30
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000038 	.word	0x20000038
 800111c:	40012c00 	.word	0x40012c00

08001120 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08c      	sub	sp, #48	; 0x30
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001126:	f107 030c 	add.w	r3, r7, #12
 800112a:	2224      	movs	r2, #36	; 0x24
 800112c:	2100      	movs	r1, #0
 800112e:	4618      	mov	r0, r3
 8001130:	f003 ff8c 	bl	800504c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800113c:	4b21      	ldr	r3, [pc, #132]	; (80011c4 <MX_TIM2_Init+0xa4>)
 800113e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001142:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001144:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <MX_TIM2_Init+0xa4>)
 8001146:	2200      	movs	r2, #0
 8001148:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114a:	4b1e      	ldr	r3, [pc, #120]	; (80011c4 <MX_TIM2_Init+0xa4>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001150:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <MX_TIM2_Init+0xa4>)
 8001152:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001156:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001158:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <MX_TIM2_Init+0xa4>)
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800115e:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <MX_TIM2_Init+0xa4>)
 8001160:	2280      	movs	r2, #128	; 0x80
 8001162:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001164:	2303      	movs	r3, #3
 8001166:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001168:	2300      	movs	r3, #0
 800116a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800116c:	2301      	movs	r3, #1
 800116e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001170:	2300      	movs	r3, #0
 8001172:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 8001174:	2301      	movs	r3, #1
 8001176:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001178:	2300      	movs	r3, #0
 800117a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800117c:	2301      	movs	r3, #1
 800117e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001180:	2300      	movs	r3, #0
 8001182:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 8001184:	2301      	movs	r3, #1
 8001186:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	4619      	mov	r1, r3
 800118e:	480d      	ldr	r0, [pc, #52]	; (80011c4 <MX_TIM2_Init+0xa4>)
 8001190:	f002 fda4 	bl	8003cdc <HAL_TIM_Encoder_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800119a:	f000 f9c5 	bl	8001528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800119e:	2300      	movs	r3, #0
 80011a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a2:	2300      	movs	r3, #0
 80011a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	4619      	mov	r1, r3
 80011aa:	4806      	ldr	r0, [pc, #24]	; (80011c4 <MX_TIM2_Init+0xa4>)
 80011ac:	f003 fabe 	bl	800472c <HAL_TIMEx_MasterConfigSynchronization>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80011b6:	f000 f9b7 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011ba:	bf00      	nop
 80011bc:	3730      	adds	r7, #48	; 0x30
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000080 	.word	0x20000080

080011c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	; 0x28
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ce:	f107 0320 	add.w	r3, r7, #32
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
 80011e4:	611a      	str	r2, [r3, #16]
 80011e6:	615a      	str	r2, [r3, #20]
 80011e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011ea:	4b27      	ldr	r3, [pc, #156]	; (8001288 <MX_TIM3_Init+0xc0>)
 80011ec:	4a27      	ldr	r2, [pc, #156]	; (800128c <MX_TIM3_Init+0xc4>)
 80011ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48;
 80011f0:	4b25      	ldr	r3, [pc, #148]	; (8001288 <MX_TIM3_Init+0xc0>)
 80011f2:	2230      	movs	r2, #48	; 0x30
 80011f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f6:	4b24      	ldr	r3, [pc, #144]	; (8001288 <MX_TIM3_Init+0xc0>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 80011fc:	4b22      	ldr	r3, [pc, #136]	; (8001288 <MX_TIM3_Init+0xc0>)
 80011fe:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001202:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001204:	4b20      	ldr	r3, [pc, #128]	; (8001288 <MX_TIM3_Init+0xc0>)
 8001206:	2200      	movs	r2, #0
 8001208:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800120a:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <MX_TIM3_Init+0xc0>)
 800120c:	2280      	movs	r2, #128	; 0x80
 800120e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001210:	481d      	ldr	r0, [pc, #116]	; (8001288 <MX_TIM3_Init+0xc0>)
 8001212:	f002 fc71 	bl	8003af8 <HAL_TIM_PWM_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800121c:	f000 f984 	bl	8001528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001220:	2300      	movs	r3, #0
 8001222:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001224:	2300      	movs	r3, #0
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001228:	f107 0320 	add.w	r3, r7, #32
 800122c:	4619      	mov	r1, r3
 800122e:	4816      	ldr	r0, [pc, #88]	; (8001288 <MX_TIM3_Init+0xc0>)
 8001230:	f003 fa7c 	bl	800472c <HAL_TIMEx_MasterConfigSynchronization>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800123a:	f000 f975 	bl	8001528 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800123e:	2360      	movs	r3, #96	; 0x60
 8001240:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2200      	movs	r2, #0
 8001252:	4619      	mov	r1, r3
 8001254:	480c      	ldr	r0, [pc, #48]	; (8001288 <MX_TIM3_Init+0xc0>)
 8001256:	f002 ff79 	bl	800414c <HAL_TIM_PWM_ConfigChannel>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001260:	f000 f962 	bl	8001528 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	2204      	movs	r2, #4
 8001268:	4619      	mov	r1, r3
 800126a:	4807      	ldr	r0, [pc, #28]	; (8001288 <MX_TIM3_Init+0xc0>)
 800126c:	f002 ff6e 	bl	800414c <HAL_TIM_PWM_ConfigChannel>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001276:	f000 f957 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800127a:	4803      	ldr	r0, [pc, #12]	; (8001288 <MX_TIM3_Init+0xc0>)
 800127c:	f000 fa30 	bl	80016e0 <HAL_TIM_MspPostInit>

}
 8001280:	bf00      	nop
 8001282:	3728      	adds	r7, #40	; 0x28
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	200000c8 	.word	0x200000c8
 800128c:	40000400 	.word	0x40000400

08001290 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	; 0x28
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001296:	f107 0320 	add.w	r3, r7, #32
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
 80012ac:	611a      	str	r2, [r3, #16]
 80012ae:	615a      	str	r2, [r3, #20]
 80012b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012b2:	4b22      	ldr	r3, [pc, #136]	; (800133c <MX_TIM4_Init+0xac>)
 80012b4:	4a22      	ldr	r2, [pc, #136]	; (8001340 <MX_TIM4_Init+0xb0>)
 80012b6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48;
 80012b8:	4b20      	ldr	r3, [pc, #128]	; (800133c <MX_TIM4_Init+0xac>)
 80012ba:	2230      	movs	r2, #48	; 0x30
 80012bc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012be:	4b1f      	ldr	r3, [pc, #124]	; (800133c <MX_TIM4_Init+0xac>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80012c4:	4b1d      	ldr	r3, [pc, #116]	; (800133c <MX_TIM4_Init+0xac>)
 80012c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012ca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012cc:	4b1b      	ldr	r3, [pc, #108]	; (800133c <MX_TIM4_Init+0xac>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012d2:	4b1a      	ldr	r3, [pc, #104]	; (800133c <MX_TIM4_Init+0xac>)
 80012d4:	2280      	movs	r2, #128	; 0x80
 80012d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80012d8:	4818      	ldr	r0, [pc, #96]	; (800133c <MX_TIM4_Init+0xac>)
 80012da:	f002 fc0d 	bl	8003af8 <HAL_TIM_PWM_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80012e4:	f000 f920 	bl	8001528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e8:	2300      	movs	r3, #0
 80012ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012f0:	f107 0320 	add.w	r3, r7, #32
 80012f4:	4619      	mov	r1, r3
 80012f6:	4811      	ldr	r0, [pc, #68]	; (800133c <MX_TIM4_Init+0xac>)
 80012f8:	f003 fa18 	bl	800472c <HAL_TIMEx_MasterConfigSynchronization>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001302:	f000 f911 	bl	8001528 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001306:	2360      	movs	r3, #96	; 0x60
 8001308:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	2204      	movs	r2, #4
 800131a:	4619      	mov	r1, r3
 800131c:	4807      	ldr	r0, [pc, #28]	; (800133c <MX_TIM4_Init+0xac>)
 800131e:	f002 ff15 	bl	800414c <HAL_TIM_PWM_ConfigChannel>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001328:	f000 f8fe 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800132c:	4803      	ldr	r0, [pc, #12]	; (800133c <MX_TIM4_Init+0xac>)
 800132e:	f000 f9d7 	bl	80016e0 <HAL_TIM_MspPostInit>

}
 8001332:	bf00      	nop
 8001334:	3728      	adds	r7, #40	; 0x28
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000110 	.word	0x20000110
 8001340:	40000800 	.word	0x40000800

08001344 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 800134a:	4a12      	ldr	r2, [pc, #72]	; (8001394 <MX_USART2_UART_Init+0x50>)
 800134c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800134e:	4b10      	ldr	r3, [pc, #64]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001350:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001354:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 800136a:	220c      	movs	r2, #12
 800136c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001376:	2200      	movs	r2, #0
 8001378:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 800137c:	f003 fa46 	bl	800480c <HAL_UART_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001386:	f000 f8cf 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000158 	.word	0x20000158
 8001394:	40004400 	.word	0x40004400

08001398 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139e:	f107 0310 	add.w	r3, r7, #16
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ac:	4b59      	ldr	r3, [pc, #356]	; (8001514 <MX_GPIO_Init+0x17c>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	4a58      	ldr	r2, [pc, #352]	; (8001514 <MX_GPIO_Init+0x17c>)
 80013b2:	f043 0310 	orr.w	r3, r3, #16
 80013b6:	6193      	str	r3, [r2, #24]
 80013b8:	4b56      	ldr	r3, [pc, #344]	; (8001514 <MX_GPIO_Init+0x17c>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	f003 0310 	and.w	r3, r3, #16
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013c4:	4b53      	ldr	r3, [pc, #332]	; (8001514 <MX_GPIO_Init+0x17c>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	4a52      	ldr	r2, [pc, #328]	; (8001514 <MX_GPIO_Init+0x17c>)
 80013ca:	f043 0320 	orr.w	r3, r3, #32
 80013ce:	6193      	str	r3, [r2, #24]
 80013d0:	4b50      	ldr	r3, [pc, #320]	; (8001514 <MX_GPIO_Init+0x17c>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	f003 0320 	and.w	r3, r3, #32
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013dc:	4b4d      	ldr	r3, [pc, #308]	; (8001514 <MX_GPIO_Init+0x17c>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	4a4c      	ldr	r2, [pc, #304]	; (8001514 <MX_GPIO_Init+0x17c>)
 80013e2:	f043 0304 	orr.w	r3, r3, #4
 80013e6:	6193      	str	r3, [r2, #24]
 80013e8:	4b4a      	ldr	r3, [pc, #296]	; (8001514 <MX_GPIO_Init+0x17c>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	607b      	str	r3, [r7, #4]
 80013f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f4:	4b47      	ldr	r3, [pc, #284]	; (8001514 <MX_GPIO_Init+0x17c>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	4a46      	ldr	r2, [pc, #280]	; (8001514 <MX_GPIO_Init+0x17c>)
 80013fa:	f043 0308 	orr.w	r3, r3, #8
 80013fe:	6193      	str	r3, [r2, #24]
 8001400:	4b44      	ldr	r3, [pc, #272]	; (8001514 <MX_GPIO_Init+0x17c>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	f003 0308 	and.w	r3, r3, #8
 8001408:	603b      	str	r3, [r7, #0]
 800140a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Y_Pin|LED_G_Pin, GPIO_PIN_RESET);
 800140c:	2200      	movs	r2, #0
 800140e:	2130      	movs	r1, #48	; 0x30
 8001410:	4841      	ldr	r0, [pc, #260]	; (8001518 <MX_GPIO_Init+0x180>)
 8001412:	f001 febc 	bl	800318e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_EN_Pin|M2_R_Pin|M2_L_Pin, GPIO_PIN_RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800141c:	483f      	ldr	r0, [pc, #252]	; (800151c <MX_GPIO_Init+0x184>)
 800141e:	f001 feb6 	bl	800318e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001422:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001426:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001428:	2303      	movs	r3, #3
 800142a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800142c:	f107 0310 	add.w	r3, r7, #16
 8001430:	4619      	mov	r1, r3
 8001432:	483b      	ldr	r0, [pc, #236]	; (8001520 <MX_GPIO_Init+0x188>)
 8001434:	f001 fd10 	bl	8002e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Y_Pin LED_G_Pin */
  GPIO_InitStruct.Pin = LED_Y_Pin|LED_G_Pin;
 8001438:	2330      	movs	r3, #48	; 0x30
 800143a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143c:	2301      	movs	r3, #1
 800143e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2302      	movs	r3, #2
 8001446:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001448:	f107 0310 	add.w	r3, r7, #16
 800144c:	4619      	mov	r1, r3
 800144e:	4832      	ldr	r0, [pc, #200]	; (8001518 <MX_GPIO_Init+0x180>)
 8001450:	f001 fd02 	bl	8002e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_STOP_Pin BTN_START_Pin MODE_SW_Pin LVL_SW1_Pin
                           LVL_SW2_Pin */
  GPIO_InitStruct.Pin = BTN_STOP_Pin|BTN_START_Pin|MODE_SW_Pin|LVL_SW1_Pin
 8001454:	f240 431b 	movw	r3, #1051	; 0x41b
 8001458:	613b      	str	r3, [r7, #16]
                          |LVL_SW2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800145e:	2301      	movs	r3, #1
 8001460:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001462:	f107 0310 	add.w	r3, r7, #16
 8001466:	4619      	mov	r1, r3
 8001468:	482c      	ldr	r0, [pc, #176]	; (800151c <MX_GPIO_Init+0x184>)
 800146a:	f001 fcf5 	bl	8002e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB11 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 800146e:	f640 3304 	movw	r3, #2820	; 0xb04
 8001472:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001474:	2303      	movs	r3, #3
 8001476:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001478:	f107 0310 	add.w	r3, r7, #16
 800147c:	4619      	mov	r1, r3
 800147e:	4827      	ldr	r0, [pc, #156]	; (800151c <MX_GPIO_Init+0x184>)
 8001480:	f001 fcea 	bl	8002e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LMS_M_Pin */
  GPIO_InitStruct.Pin = LMS_M_Pin;
 8001484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001488:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800148a:	4b26      	ldr	r3, [pc, #152]	; (8001524 <MX_GPIO_Init+0x18c>)
 800148c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800148e:	2301      	movs	r3, #1
 8001490:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LMS_M_GPIO_Port, &GPIO_InitStruct);
 8001492:	f107 0310 	add.w	r3, r7, #16
 8001496:	4619      	mov	r1, r3
 8001498:	4820      	ldr	r0, [pc, #128]	; (800151c <MX_GPIO_Init+0x184>)
 800149a:	f001 fcdd 	bl	8002e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_EN_Pin M2_R_Pin M2_L_Pin */
  GPIO_InitStruct.Pin = M1_EN_Pin|M2_R_Pin|M2_L_Pin;
 800149e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80014a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a4:	2301      	movs	r3, #1
 80014a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ac:	2302      	movs	r3, #2
 80014ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b0:	f107 0310 	add.w	r3, r7, #16
 80014b4:	4619      	mov	r1, r3
 80014b6:	4819      	ldr	r0, [pc, #100]	; (800151c <MX_GPIO_Init+0x184>)
 80014b8:	f001 fcce 	bl	8002e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 80014bc:	f44f 431c 	mov.w	r3, #39936	; 0x9c00
 80014c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014c2:	2303      	movs	r3, #3
 80014c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c6:	f107 0310 	add.w	r3, r7, #16
 80014ca:	4619      	mov	r1, r3
 80014cc:	4812      	ldr	r0, [pc, #72]	; (8001518 <MX_GPIO_Init+0x180>)
 80014ce:	f001 fcc3 	bl	8002e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LMS_E_Pin LMS_B_Pin */
  GPIO_InitStruct.Pin = LMS_E_Pin|LMS_B_Pin;
 80014d2:	2360      	movs	r3, #96	; 0x60
 80014d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80014d6:	4b13      	ldr	r3, [pc, #76]	; (8001524 <MX_GPIO_Init+0x18c>)
 80014d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014de:	f107 0310 	add.w	r3, r7, #16
 80014e2:	4619      	mov	r1, r3
 80014e4:	480d      	ldr	r0, [pc, #52]	; (800151c <MX_GPIO_Init+0x184>)
 80014e6:	f001 fcb7 	bl	8002e58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2102      	movs	r1, #2
 80014ee:	2017      	movs	r0, #23
 80014f0:	f001 fbbd 	bl	8002c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80014f4:	2017      	movs	r0, #23
 80014f6:	f001 fbd6 	bl	8002ca6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2102      	movs	r1, #2
 80014fe:	2028      	movs	r0, #40	; 0x28
 8001500:	f001 fbb5 	bl	8002c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001504:	2028      	movs	r0, #40	; 0x28
 8001506:	f001 fbce 	bl	8002ca6 <HAL_NVIC_EnableIRQ>

}
 800150a:	bf00      	nop
 800150c:	3720      	adds	r7, #32
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40021000 	.word	0x40021000
 8001518:	40010800 	.word	0x40010800
 800151c:	40010c00 	.word	0x40010c00
 8001520:	40011000 	.word	0x40011000
 8001524:	10310000 	.word	0x10310000

08001528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800152c:	b672      	cpsid	i
}
 800152e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001530:	e7fe      	b.n	8001530 <Error_Handler+0x8>
	...

08001534 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <HAL_MspInit+0x5c>)
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	4a14      	ldr	r2, [pc, #80]	; (8001590 <HAL_MspInit+0x5c>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6193      	str	r3, [r2, #24]
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <HAL_MspInit+0x5c>)
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001552:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <HAL_MspInit+0x5c>)
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	4a0e      	ldr	r2, [pc, #56]	; (8001590 <HAL_MspInit+0x5c>)
 8001558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800155c:	61d3      	str	r3, [r2, #28]
 800155e:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <HAL_MspInit+0x5c>)
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800156a:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <HAL_MspInit+0x60>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	4a04      	ldr	r2, [pc, #16]	; (8001594 <HAL_MspInit+0x60>)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001586:	bf00      	nop
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr
 8001590:	40021000 	.word	0x40021000
 8001594:	40010000 	.word	0x40010000

08001598 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	; 0x28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0318 	add.w	r3, r7, #24
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a2b      	ldr	r2, [pc, #172]	; (8001660 <HAL_TIM_Encoder_MspInit+0xc8>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d125      	bne.n	8001604 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015b8:	4b2a      	ldr	r3, [pc, #168]	; (8001664 <HAL_TIM_Encoder_MspInit+0xcc>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	4a29      	ldr	r2, [pc, #164]	; (8001664 <HAL_TIM_Encoder_MspInit+0xcc>)
 80015be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015c2:	6193      	str	r3, [r2, #24]
 80015c4:	4b27      	ldr	r3, [pc, #156]	; (8001664 <HAL_TIM_Encoder_MspInit+0xcc>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015cc:	617b      	str	r3, [r7, #20]
 80015ce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d0:	4b24      	ldr	r3, [pc, #144]	; (8001664 <HAL_TIM_Encoder_MspInit+0xcc>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	4a23      	ldr	r2, [pc, #140]	; (8001664 <HAL_TIM_Encoder_MspInit+0xcc>)
 80015d6:	f043 0304 	orr.w	r3, r3, #4
 80015da:	6193      	str	r3, [r2, #24]
 80015dc:	4b21      	ldr	r3, [pc, #132]	; (8001664 <HAL_TIM_Encoder_MspInit+0xcc>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ECD1A_Pin|ECD1B_Pin;
 80015e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f6:	f107 0318 	add.w	r3, r7, #24
 80015fa:	4619      	mov	r1, r3
 80015fc:	481a      	ldr	r0, [pc, #104]	; (8001668 <HAL_TIM_Encoder_MspInit+0xd0>)
 80015fe:	f001 fc2b 	bl	8002e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001602:	e028      	b.n	8001656 <HAL_TIM_Encoder_MspInit+0xbe>
  else if(htim_encoder->Instance==TIM2)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800160c:	d123      	bne.n	8001656 <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	4a14      	ldr	r2, [pc, #80]	; (8001664 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	61d3      	str	r3, [r2, #28]
 800161a:	4b12      	ldr	r3, [pc, #72]	; (8001664 <HAL_TIM_Encoder_MspInit+0xcc>)
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001626:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	4a0e      	ldr	r2, [pc, #56]	; (8001664 <HAL_TIM_Encoder_MspInit+0xcc>)
 800162c:	f043 0304 	orr.w	r3, r3, #4
 8001630:	6193      	str	r3, [r2, #24]
 8001632:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	f003 0304 	and.w	r3, r3, #4
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ECD2A_Pin|ECD2B_Pin;
 800163e:	2303      	movs	r3, #3
 8001640:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164a:	f107 0318 	add.w	r3, r7, #24
 800164e:	4619      	mov	r1, r3
 8001650:	4805      	ldr	r0, [pc, #20]	; (8001668 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001652:	f001 fc01 	bl	8002e58 <HAL_GPIO_Init>
}
 8001656:	bf00      	nop
 8001658:	3728      	adds	r7, #40	; 0x28
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40012c00 	.word	0x40012c00
 8001664:	40021000 	.word	0x40021000
 8001668:	40010800 	.word	0x40010800

0800166c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a16      	ldr	r2, [pc, #88]	; (80016d4 <HAL_TIM_PWM_MspInit+0x68>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d10c      	bne.n	8001698 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800167e:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <HAL_TIM_PWM_MspInit+0x6c>)
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	4a15      	ldr	r2, [pc, #84]	; (80016d8 <HAL_TIM_PWM_MspInit+0x6c>)
 8001684:	f043 0302 	orr.w	r3, r3, #2
 8001688:	61d3      	str	r3, [r2, #28]
 800168a:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <HAL_TIM_PWM_MspInit+0x6c>)
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001696:	e018      	b.n	80016ca <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM4)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a0f      	ldr	r2, [pc, #60]	; (80016dc <HAL_TIM_PWM_MspInit+0x70>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d113      	bne.n	80016ca <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016a2:	4b0d      	ldr	r3, [pc, #52]	; (80016d8 <HAL_TIM_PWM_MspInit+0x6c>)
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	4a0c      	ldr	r2, [pc, #48]	; (80016d8 <HAL_TIM_PWM_MspInit+0x6c>)
 80016a8:	f043 0304 	orr.w	r3, r3, #4
 80016ac:	61d3      	str	r3, [r2, #28]
 80016ae:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <HAL_TIM_PWM_MspInit+0x6c>)
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2101      	movs	r1, #1
 80016be:	201e      	movs	r0, #30
 80016c0:	f001 fad5 	bl	8002c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80016c4:	201e      	movs	r0, #30
 80016c6:	f001 faee 	bl	8002ca6 <HAL_NVIC_EnableIRQ>
}
 80016ca:	bf00      	nop
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40000400 	.word	0x40000400
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40000800 	.word	0x40000800

080016e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 0310 	add.w	r3, r7, #16
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a1e      	ldr	r2, [pc, #120]	; (8001774 <HAL_TIM_MspPostInit+0x94>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d118      	bne.n	8001732 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001700:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <HAL_TIM_MspPostInit+0x98>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	4a1c      	ldr	r2, [pc, #112]	; (8001778 <HAL_TIM_MspPostInit+0x98>)
 8001706:	f043 0304 	orr.w	r3, r3, #4
 800170a:	6193      	str	r3, [r2, #24]
 800170c:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <HAL_TIM_MspPostInit+0x98>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWM1_F_Pin|PWM1_B_Pin;
 8001718:	23c0      	movs	r3, #192	; 0xc0
 800171a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	2302      	movs	r3, #2
 800171e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001720:	2302      	movs	r3, #2
 8001722:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001724:	f107 0310 	add.w	r3, r7, #16
 8001728:	4619      	mov	r1, r3
 800172a:	4814      	ldr	r0, [pc, #80]	; (800177c <HAL_TIM_MspPostInit+0x9c>)
 800172c:	f001 fb94 	bl	8002e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001730:	e01c      	b.n	800176c <HAL_TIM_MspPostInit+0x8c>
  else if(htim->Instance==TIM4)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a12      	ldr	r2, [pc, #72]	; (8001780 <HAL_TIM_MspPostInit+0xa0>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d117      	bne.n	800176c <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800173c:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <HAL_TIM_MspPostInit+0x98>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	4a0d      	ldr	r2, [pc, #52]	; (8001778 <HAL_TIM_MspPostInit+0x98>)
 8001742:	f043 0308 	orr.w	r3, r3, #8
 8001746:	6193      	str	r3, [r2, #24]
 8001748:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <HAL_TIM_MspPostInit+0x98>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	f003 0308 	and.w	r3, r3, #8
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM2_Pin;
 8001754:	2380      	movs	r3, #128	; 0x80
 8001756:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001758:	2302      	movs	r3, #2
 800175a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175c:	2302      	movs	r3, #2
 800175e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM2_GPIO_Port, &GPIO_InitStruct);
 8001760:	f107 0310 	add.w	r3, r7, #16
 8001764:	4619      	mov	r1, r3
 8001766:	4807      	ldr	r0, [pc, #28]	; (8001784 <HAL_TIM_MspPostInit+0xa4>)
 8001768:	f001 fb76 	bl	8002e58 <HAL_GPIO_Init>
}
 800176c:	bf00      	nop
 800176e:	3720      	adds	r7, #32
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40000400 	.word	0x40000400
 8001778:	40021000 	.word	0x40021000
 800177c:	40010800 	.word	0x40010800
 8001780:	40000800 	.word	0x40000800
 8001784:	40010c00 	.word	0x40010c00

08001788 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b088      	sub	sp, #32
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 0310 	add.w	r3, r7, #16
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a1f      	ldr	r2, [pc, #124]	; (8001820 <HAL_UART_MspInit+0x98>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d137      	bne.n	8001818 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017a8:	4b1e      	ldr	r3, [pc, #120]	; (8001824 <HAL_UART_MspInit+0x9c>)
 80017aa:	69db      	ldr	r3, [r3, #28]
 80017ac:	4a1d      	ldr	r2, [pc, #116]	; (8001824 <HAL_UART_MspInit+0x9c>)
 80017ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b2:	61d3      	str	r3, [r2, #28]
 80017b4:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <HAL_UART_MspInit+0x9c>)
 80017b6:	69db      	ldr	r3, [r3, #28]
 80017b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c0:	4b18      	ldr	r3, [pc, #96]	; (8001824 <HAL_UART_MspInit+0x9c>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	4a17      	ldr	r2, [pc, #92]	; (8001824 <HAL_UART_MspInit+0x9c>)
 80017c6:	f043 0304 	orr.w	r3, r3, #4
 80017ca:	6193      	str	r3, [r2, #24]
 80017cc:	4b15      	ldr	r3, [pc, #84]	; (8001824 <HAL_UART_MspInit+0x9c>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017d8:	2304      	movs	r3, #4
 80017da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017dc:	2302      	movs	r3, #2
 80017de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017e0:	2303      	movs	r3, #3
 80017e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e4:	f107 0310 	add.w	r3, r7, #16
 80017e8:	4619      	mov	r1, r3
 80017ea:	480f      	ldr	r0, [pc, #60]	; (8001828 <HAL_UART_MspInit+0xa0>)
 80017ec:	f001 fb34 	bl	8002e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017f0:	2308      	movs	r3, #8
 80017f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fc:	f107 0310 	add.w	r3, r7, #16
 8001800:	4619      	mov	r1, r3
 8001802:	4809      	ldr	r0, [pc, #36]	; (8001828 <HAL_UART_MspInit+0xa0>)
 8001804:	f001 fb28 	bl	8002e58 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8001808:	2200      	movs	r2, #0
 800180a:	2103      	movs	r1, #3
 800180c:	2026      	movs	r0, #38	; 0x26
 800180e:	f001 fa2e 	bl	8002c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001812:	2026      	movs	r0, #38	; 0x26
 8001814:	f001 fa47 	bl	8002ca6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001818:	bf00      	nop
 800181a:	3720      	adds	r7, #32
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40004400 	.word	0x40004400
 8001824:	40021000 	.word	0x40021000
 8001828:	40010800 	.word	0x40010800

0800182c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001830:	e7fe      	b.n	8001830 <NMI_Handler+0x4>

08001832 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001836:	e7fe      	b.n	8001836 <HardFault_Handler+0x4>

08001838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800183c:	e7fe      	b.n	800183c <MemManage_Handler+0x4>

0800183e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001842:	e7fe      	b.n	8001842 <BusFault_Handler+0x4>

08001844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <UsageFault_Handler+0x4>

0800184a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr

08001856 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr

08001862 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	46bd      	mov	sp, r7
 800186a:	bc80      	pop	{r7}
 800186c:	4770      	bx	lr

0800186e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001872:	f001 f8e5 	bl	8002a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}

0800187a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LMS_E_Pin);
 800187e:	2020      	movs	r0, #32
 8001880:	f001 fcb6 	bl	80031f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LMS_B_Pin);
 8001884:	2040      	movs	r0, #64	; 0x40
 8001886:	f001 fcb3 	bl	80031f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001894:	4802      	ldr	r0, [pc, #8]	; (80018a0 <TIM4_IRQHandler+0x10>)
 8001896:	f002 fb51 	bl	8003f3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000110 	.word	0x20000110

080018a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018a8:	4802      	ldr	r0, [pc, #8]	; (80018b4 <USART2_IRQHandler+0x10>)
 80018aa:	f002 fffd 	bl	80048a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000158 	.word	0x20000158

080018b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LMS_M_Pin);
 80018bc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80018c0:	f001 fc96 	bl	80031f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <MAP>:
bool FLAG_completeRun = false;
u8 preLevel = 0;

/*===================================================*/
uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax,
	uint32_t au32_OUTmin, uint32_t au32_OUTmax) {
 80018d4:	b5b0      	push	{r4, r5, r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
 80018e0:	603b      	str	r3, [r7, #0]
  uint32_t val = au32_IN - au32_INmin;
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	617b      	str	r3, [r7, #20]
  val = val * (au32_OUTmax - au32_OUTmin);
 80018ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	1ad2      	subs	r2, r2, r3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	fb02 f303 	mul.w	r3, r2, r3
 80018f6:	617b      	str	r3, [r7, #20]
  val = val / (1.0 * (au32_INmax - au32_INmin));
 80018f8:	6978      	ldr	r0, [r7, #20]
 80018fa:	f7fe fe1f 	bl	800053c <__aeabi_ui2d>
 80018fe:	4604      	mov	r4, r0
 8001900:	460d      	mov	r5, r1
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fe17 	bl	800053c <__aeabi_ui2d>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4620      	mov	r0, r4
 8001914:	4629      	mov	r1, r5
 8001916:	f7fe ffb5 	bl	8000884 <__aeabi_ddiv>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	f7ff f897 	bl	8000a54 <__aeabi_d2uiz>
 8001926:	4603      	mov	r3, r0
 8001928:	617b      	str	r3, [r7, #20]
  val = val + au32_OUTmin;
 800192a:	697a      	ldr	r2, [r7, #20]
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	4413      	add	r3, r2
 8001930:	617b      	str	r3, [r7, #20]
  return val;
 8001932:	697b      	ldr	r3, [r7, #20]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bdb0      	pop	{r4, r5, r7, pc}

0800193c <set_motor_velo>:

void set_motor_velo(u8 id, s16 val) {
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	460a      	mov	r2, r1
 8001946:	71fb      	strb	r3, [r7, #7]
 8001948:	4613      	mov	r3, r2
 800194a:	80bb      	strh	r3, [r7, #4]
  switch (id) {
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d002      	beq.n	8001958 <set_motor_velo+0x1c>
 8001952:	2b02      	cmp	r3, #2
 8001954:	d009      	beq.n	800196a <set_motor_velo+0x2e>
	break;
  case 2:
	M2_vref = val;
	break;
  }
}
 8001956:	e011      	b.n	800197c <set_motor_velo+0x40>
	M1_vref = val;
 8001958:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff f9a3 	bl	8000ca8 <__aeabi_i2f>
 8001962:	4603      	mov	r3, r0
 8001964:	4a07      	ldr	r2, [pc, #28]	; (8001984 <set_motor_velo+0x48>)
 8001966:	6013      	str	r3, [r2, #0]
	break;
 8001968:	e008      	b.n	800197c <set_motor_velo+0x40>
	M2_vref = val;
 800196a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff f99a 	bl	8000ca8 <__aeabi_i2f>
 8001974:	4603      	mov	r3, r0
 8001976:	4a04      	ldr	r2, [pc, #16]	; (8001988 <set_motor_velo+0x4c>)
 8001978:	6013      	str	r3, [r2, #0]
	break;
 800197a:	bf00      	nop
}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	2000024c 	.word	0x2000024c
 8001988:	20000250 	.word	0x20000250

0800198c <set_motor>:
void set_motor(u8 id, s8 dir, u16 val) {
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af02      	add	r7, sp, #8
 8001992:	4603      	mov	r3, r0
 8001994:	71fb      	strb	r3, [r7, #7]
 8001996:	460b      	mov	r3, r1
 8001998:	71bb      	strb	r3, [r7, #6]
 800199a:	4613      	mov	r3, r2
 800199c:	80bb      	strh	r3, [r7, #4]
  u16 pwm;
  switch (id) {
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d002      	beq.n	80019aa <set_motor+0x1e>
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d04d      	beq.n	8001a44 <set_motor+0xb8>
	  HAL_GPIO_WritePin(M2_R_GPIO_Port, M2_R_Pin, GPIO_PIN_RESET);
	  TIM4->CCR2 = 999;
	}
	break;
  default:
	return;
 80019a8:	e0b6      	b.n	8001b18 <set_motor+0x18c>
	pwm = MAP(val, 0, 1000, 0, 499);
 80019aa:	88b8      	ldrh	r0, [r7, #4]
 80019ac:	f240 13f3 	movw	r3, #499	; 0x1f3
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	2300      	movs	r3, #0
 80019b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019b8:	2100      	movs	r1, #0
 80019ba:	f7ff ff8b 	bl	80018d4 <MAP>
 80019be:	4603      	mov	r3, r0
 80019c0:	81fb      	strh	r3, [r7, #14]
	if (dir == 1) {
 80019c2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d10c      	bne.n	80019e4 <set_motor+0x58>
	  HAL_GPIO_WritePin(M1_EN_GPIO_Port, M1_EN_Pin, GPIO_PIN_SET);
 80019ca:	2201      	movs	r2, #1
 80019cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019d0:	4853      	ldr	r0, [pc, #332]	; (8001b20 <set_motor+0x194>)
 80019d2:	f001 fbdc 	bl	800318e <HAL_GPIO_WritePin>
	  TIM3->CCR1 = pwm;
 80019d6:	4a53      	ldr	r2, [pc, #332]	; (8001b24 <set_motor+0x198>)
 80019d8:	89fb      	ldrh	r3, [r7, #14]
 80019da:	6353      	str	r3, [r2, #52]	; 0x34
	  TIM3->CCR2 = 0;
 80019dc:	4b51      	ldr	r3, [pc, #324]	; (8001b24 <set_motor+0x198>)
 80019de:	2200      	movs	r2, #0
 80019e0:	639a      	str	r2, [r3, #56]	; 0x38
	break;
 80019e2:	e099      	b.n	8001b18 <set_motor+0x18c>
	} else if (dir == -1) {
 80019e4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80019e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ec:	d10c      	bne.n	8001a08 <set_motor+0x7c>
	  HAL_GPIO_WritePin(M1_EN_GPIO_Port, M1_EN_Pin, GPIO_PIN_SET);
 80019ee:	2201      	movs	r2, #1
 80019f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019f4:	484a      	ldr	r0, [pc, #296]	; (8001b20 <set_motor+0x194>)
 80019f6:	f001 fbca 	bl	800318e <HAL_GPIO_WritePin>
	  TIM3->CCR2 = pwm;
 80019fa:	4a4a      	ldr	r2, [pc, #296]	; (8001b24 <set_motor+0x198>)
 80019fc:	89fb      	ldrh	r3, [r7, #14]
 80019fe:	6393      	str	r3, [r2, #56]	; 0x38
	  TIM3->CCR1 = 0;
 8001a00:	4b48      	ldr	r3, [pc, #288]	; (8001b24 <set_motor+0x198>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	635a      	str	r2, [r3, #52]	; 0x34
	break;
 8001a06:	e087      	b.n	8001b18 <set_motor+0x18c>
	} else if (dir == 0) //Freely run
 8001a08:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d10c      	bne.n	8001a2a <set_motor+0x9e>
	  HAL_GPIO_WritePin(M1_EN_GPIO_Port, M1_EN_Pin, GPIO_PIN_RESET);
 8001a10:	2200      	movs	r2, #0
 8001a12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a16:	4842      	ldr	r0, [pc, #264]	; (8001b20 <set_motor+0x194>)
 8001a18:	f001 fbb9 	bl	800318e <HAL_GPIO_WritePin>
	  TIM3->CCR1 = 0;
 8001a1c:	4b41      	ldr	r3, [pc, #260]	; (8001b24 <set_motor+0x198>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM3->CCR2 = 0;
 8001a22:	4b40      	ldr	r3, [pc, #256]	; (8001b24 <set_motor+0x198>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	639a      	str	r2, [r3, #56]	; 0x38
	break;
 8001a28:	e076      	b.n	8001b18 <set_motor+0x18c>
	  HAL_GPIO_WritePin(M1_EN_GPIO_Port, M1_EN_Pin, GPIO_PIN_SET);
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a30:	483b      	ldr	r0, [pc, #236]	; (8001b20 <set_motor+0x194>)
 8001a32:	f001 fbac 	bl	800318e <HAL_GPIO_WritePin>
	  TIM3->CCR2 = 0;
 8001a36:	4b3b      	ldr	r3, [pc, #236]	; (8001b24 <set_motor+0x198>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM3->CCR1 = 0;
 8001a3c:	4b39      	ldr	r3, [pc, #228]	; (8001b24 <set_motor+0x198>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	635a      	str	r2, [r3, #52]	; 0x34
	break;
 8001a42:	e069      	b.n	8001b18 <set_motor+0x18c>
	pwm = MAP(val, 0, 1000, 0, 999);
 8001a44:	88b8      	ldrh	r0, [r7, #4]
 8001a46:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a52:	2100      	movs	r1, #0
 8001a54:	f7ff ff3e 	bl	80018d4 <MAP>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	81fb      	strh	r3, [r7, #14]
	if (dir == -1 && BEGIN_REACH == false) {
 8001a5c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a64:	d116      	bne.n	8001a94 <set_motor+0x108>
 8001a66:	4b30      	ldr	r3, [pc, #192]	; (8001b28 <set_motor+0x19c>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	f083 0301 	eor.w	r3, r3, #1
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d00f      	beq.n	8001a94 <set_motor+0x108>
	  HAL_GPIO_WritePin(M2_L_GPIO_Port, M2_L_Pin, GPIO_PIN_SET);
 8001a74:	2201      	movs	r2, #1
 8001a76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a7a:	4829      	ldr	r0, [pc, #164]	; (8001b20 <set_motor+0x194>)
 8001a7c:	f001 fb87 	bl	800318e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M2_R_GPIO_Port, M2_R_Pin, GPIO_PIN_RESET);
 8001a80:	2200      	movs	r2, #0
 8001a82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a86:	4826      	ldr	r0, [pc, #152]	; (8001b20 <set_motor+0x194>)
 8001a88:	f001 fb81 	bl	800318e <HAL_GPIO_WritePin>
	  TIM4->CCR2 = pwm;
 8001a8c:	4a27      	ldr	r2, [pc, #156]	; (8001b2c <set_motor+0x1a0>)
 8001a8e:	89fb      	ldrh	r3, [r7, #14]
 8001a90:	6393      	str	r3, [r2, #56]	; 0x38
 8001a92:	e040      	b.n	8001b16 <set_motor+0x18a>
	} else if (dir == 1 && END_REACH == false) {
 8001a94:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d116      	bne.n	8001aca <set_motor+0x13e>
 8001a9c:	4b24      	ldr	r3, [pc, #144]	; (8001b30 <set_motor+0x1a4>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	f083 0301 	eor.w	r3, r3, #1
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00f      	beq.n	8001aca <set_motor+0x13e>
	  HAL_GPIO_WritePin(M2_L_GPIO_Port, M2_L_Pin, GPIO_PIN_RESET);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ab0:	481b      	ldr	r0, [pc, #108]	; (8001b20 <set_motor+0x194>)
 8001ab2:	f001 fb6c 	bl	800318e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M2_R_GPIO_Port, M2_R_Pin, GPIO_PIN_SET);
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001abc:	4818      	ldr	r0, [pc, #96]	; (8001b20 <set_motor+0x194>)
 8001abe:	f001 fb66 	bl	800318e <HAL_GPIO_WritePin>
	  TIM4->CCR2 = pwm;
 8001ac2:	4a1a      	ldr	r2, [pc, #104]	; (8001b2c <set_motor+0x1a0>)
 8001ac4:	89fb      	ldrh	r3, [r7, #14]
 8001ac6:	6393      	str	r3, [r2, #56]	; 0x38
 8001ac8:	e025      	b.n	8001b16 <set_motor+0x18a>
	} else if (dir == -2) //Freely run
 8001aca:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001ace:	f113 0f02 	cmn.w	r3, #2
 8001ad2:	d10f      	bne.n	8001af4 <set_motor+0x168>
	  TIM4->CCR2 = 0;
 8001ad4:	4b15      	ldr	r3, [pc, #84]	; (8001b2c <set_motor+0x1a0>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	639a      	str	r2, [r3, #56]	; 0x38
	  HAL_GPIO_WritePin(M2_L_GPIO_Port, M2_L_Pin, GPIO_PIN_RESET);
 8001ada:	2200      	movs	r2, #0
 8001adc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ae0:	480f      	ldr	r0, [pc, #60]	; (8001b20 <set_motor+0x194>)
 8001ae2:	f001 fb54 	bl	800318e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M2_R_GPIO_Port, M2_R_Pin, GPIO_PIN_RESET);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001aec:	480c      	ldr	r0, [pc, #48]	; (8001b20 <set_motor+0x194>)
 8001aee:	f001 fb4e 	bl	800318e <HAL_GPIO_WritePin>
	break;
 8001af2:	e010      	b.n	8001b16 <set_motor+0x18a>
	  HAL_GPIO_WritePin(M2_L_GPIO_Port, M2_L_Pin, GPIO_PIN_RESET);
 8001af4:	2200      	movs	r2, #0
 8001af6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001afa:	4809      	ldr	r0, [pc, #36]	; (8001b20 <set_motor+0x194>)
 8001afc:	f001 fb47 	bl	800318e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M2_R_GPIO_Port, M2_R_Pin, GPIO_PIN_RESET);
 8001b00:	2200      	movs	r2, #0
 8001b02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b06:	4806      	ldr	r0, [pc, #24]	; (8001b20 <set_motor+0x194>)
 8001b08:	f001 fb41 	bl	800318e <HAL_GPIO_WritePin>
	  TIM4->CCR2 = 999;
 8001b0c:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <set_motor+0x1a0>)
 8001b0e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b12:	639a      	str	r2, [r3, #56]	; 0x38
	break;
 8001b14:	e7ff      	b.n	8001b16 <set_motor+0x18a>
 8001b16:	bf00      	nop
  }
}
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40010c00 	.word	0x40010c00
 8001b24:	40000400 	.word	0x40000400
 8001b28:	2000019d 	.word	0x2000019d
 8001b2c:	40000800 	.word	0x40000800
 8001b30:	2000019c 	.word	0x2000019c

08001b34 <lightLED>:

void lightLED(bool yellow, bool green) {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	460a      	mov	r2, r1
 8001b3e:	71fb      	strb	r3, [r7, #7]
 8001b40:	4613      	mov	r3, r2
 8001b42:	71bb      	strb	r3, [r7, #6]
  if (yellow) {
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d005      	beq.n	8001b56 <lightLED+0x22>
	HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, GPIO_PIN_SET);
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	2110      	movs	r1, #16
 8001b4e:	4813      	ldr	r0, [pc, #76]	; (8001b9c <lightLED+0x68>)
 8001b50:	f001 fb1d 	bl	800318e <HAL_GPIO_WritePin>
 8001b54:	e00a      	b.n	8001b6c <lightLED+0x38>
  } else if (yellow == false) {
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	f083 0301 	eor.w	r3, r3, #1
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d004      	beq.n	8001b6c <lightLED+0x38>
	HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, GPIO_PIN_RESET);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2110      	movs	r1, #16
 8001b66:	480d      	ldr	r0, [pc, #52]	; (8001b9c <lightLED+0x68>)
 8001b68:	f001 fb11 	bl	800318e <HAL_GPIO_WritePin>
  }

  if (green) {
 8001b6c:	79bb      	ldrb	r3, [r7, #6]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d005      	beq.n	8001b7e <lightLED+0x4a>
	HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8001b72:	2201      	movs	r2, #1
 8001b74:	2120      	movs	r1, #32
 8001b76:	4809      	ldr	r0, [pc, #36]	; (8001b9c <lightLED+0x68>)
 8001b78:	f001 fb09 	bl	800318e <HAL_GPIO_WritePin>
  } else if (green == false) {
	HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
  }
}
 8001b7c:	e00a      	b.n	8001b94 <lightLED+0x60>
  } else if (green == false) {
 8001b7e:	79bb      	ldrb	r3, [r7, #6]
 8001b80:	f083 0301 	eor.w	r3, r3, #1
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d004      	beq.n	8001b94 <lightLED+0x60>
	HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2120      	movs	r1, #32
 8001b8e:	4803      	ldr	r0, [pc, #12]	; (8001b9c <lightLED+0x68>)
 8001b90:	f001 fafd 	bl	800318e <HAL_GPIO_WritePin>
}
 8001b94:	bf00      	nop
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40010800 	.word	0x40010800

08001ba0 <HAL_GPIO_EXTI_Callback>:
bool FLAG_startPointSet = false;
bool FLAG_midInTime = false;
u32 midInTime = 0;
u32 midDelta = 0;
bool FLAG_midOutTime = false;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == LMS_B_Pin) {
 8001baa:	88fb      	ldrh	r3, [r7, #6]
 8001bac:	2b40      	cmp	r3, #64	; 0x40
 8001bae:	d11a      	bne.n	8001be6 <HAL_GPIO_EXTI_Callback+0x46>
	if (HAL_GPIO_ReadPin(LMS_B_GPIO_Port, LMS_B_Pin) == GPIO_PIN_SET) {
 8001bb0:	2140      	movs	r1, #64	; 0x40
 8001bb2:	484f      	ldr	r0, [pc, #316]	; (8001cf0 <HAL_GPIO_EXTI_Callback+0x150>)
 8001bb4:	f001 fad4 	bl	8003160 <HAL_GPIO_ReadPin>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d103      	bne.n	8001bc6 <HAL_GPIO_EXTI_Callback+0x26>
	  BEGIN_REACH = false;
 8001bbe:	4b4d      	ldr	r3, [pc, #308]	; (8001cf4 <HAL_GPIO_EXTI_Callback+0x154>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	701a      	strb	r2, [r3, #0]
 8001bc4:	e091      	b.n	8001cea <HAL_GPIO_EXTI_Callback+0x14a>
	} else {
	  BEGIN_REACH = true;
 8001bc6:	4b4b      	ldr	r3, [pc, #300]	; (8001cf4 <HAL_GPIO_EXTI_Callback+0x154>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	701a      	strb	r2, [r3, #0]
	  if (M2_dir == -1)
 8001bcc:	4b4a      	ldr	r3, [pc, #296]	; (8001cf8 <HAL_GPIO_EXTI_Callback+0x158>)
 8001bce:	f993 3000 	ldrsb.w	r3, [r3]
 8001bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd6:	f040 8088 	bne.w	8001cea <HAL_GPIO_EXTI_Callback+0x14a>
		set_motor(2, 0, 0);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2100      	movs	r1, #0
 8001bde:	2002      	movs	r0, #2
 8001be0:	f7ff fed4 	bl	800198c <set_motor>
 8001be4:	e081      	b.n	8001cea <HAL_GPIO_EXTI_Callback+0x14a>
	}
  } else if (GPIO_Pin == LMS_E_Pin) {
 8001be6:	88fb      	ldrh	r3, [r7, #6]
 8001be8:	2b20      	cmp	r3, #32
 8001bea:	d118      	bne.n	8001c1e <HAL_GPIO_EXTI_Callback+0x7e>
	if (HAL_GPIO_ReadPin(LMS_E_GPIO_Port, LMS_E_Pin) == GPIO_PIN_SET) {
 8001bec:	2120      	movs	r1, #32
 8001bee:	4840      	ldr	r0, [pc, #256]	; (8001cf0 <HAL_GPIO_EXTI_Callback+0x150>)
 8001bf0:	f001 fab6 	bl	8003160 <HAL_GPIO_ReadPin>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d103      	bne.n	8001c02 <HAL_GPIO_EXTI_Callback+0x62>
	  END_REACH = false;
 8001bfa:	4b40      	ldr	r3, [pc, #256]	; (8001cfc <HAL_GPIO_EXTI_Callback+0x15c>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	701a      	strb	r2, [r3, #0]
 8001c00:	e073      	b.n	8001cea <HAL_GPIO_EXTI_Callback+0x14a>
	} else {
	  END_REACH = true;
 8001c02:	4b3e      	ldr	r3, [pc, #248]	; (8001cfc <HAL_GPIO_EXTI_Callback+0x15c>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	701a      	strb	r2, [r3, #0]
	  if (M2_dir == 1)
 8001c08:	4b3b      	ldr	r3, [pc, #236]	; (8001cf8 <HAL_GPIO_EXTI_Callback+0x158>)
 8001c0a:	f993 3000 	ldrsb.w	r3, [r3]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d16b      	bne.n	8001cea <HAL_GPIO_EXTI_Callback+0x14a>
		set_motor(2, 0, 0);
 8001c12:	2200      	movs	r2, #0
 8001c14:	2100      	movs	r1, #0
 8001c16:	2002      	movs	r0, #2
 8001c18:	f7ff feb8 	bl	800198c <set_motor>
 8001c1c:	e065      	b.n	8001cea <HAL_GPIO_EXTI_Callback+0x14a>
	}
  } else if (GPIO_Pin == LMS_M_Pin) {
 8001c1e:	88fb      	ldrh	r3, [r7, #6]
 8001c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c24:	d160      	bne.n	8001ce8 <HAL_GPIO_EXTI_Callback+0x148>
	if (HAL_GPIO_ReadPin(LMS_M_GPIO_Port, LMS_M_Pin) == GPIO_PIN_SET) {
 8001c26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c2a:	4831      	ldr	r0, [pc, #196]	; (8001cf0 <HAL_GPIO_EXTI_Callback+0x150>)
 8001c2c:	f001 fa98 	bl	8003160 <HAL_GPIO_ReadPin>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d142      	bne.n	8001cbc <HAL_GPIO_EXTI_Callback+0x11c>
	  MID_REACH = false;
 8001c36:	4b32      	ldr	r3, [pc, #200]	; (8001d00 <HAL_GPIO_EXTI_Callback+0x160>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	701a      	strb	r2, [r3, #0]
	  FLAG_midInTime = false;
 8001c3c:	4b31      	ldr	r3, [pc, #196]	; (8001d04 <HAL_GPIO_EXTI_Callback+0x164>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	701a      	strb	r2, [r3, #0]
	  if (FLAG_midOutTime == false) {
 8001c42:	4b31      	ldr	r3, [pc, #196]	; (8001d08 <HAL_GPIO_EXTI_Callback+0x168>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	f083 0301 	eor.w	r3, r3, #1
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d04c      	beq.n	8001cea <HAL_GPIO_EXTI_Callback+0x14a>
		FLAG_midOutTime = true;
 8001c50:	4b2d      	ldr	r3, [pc, #180]	; (8001d08 <HAL_GPIO_EXTI_Callback+0x168>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	701a      	strb	r2, [r3, #0]
		u32 now_midOut = HAL_GetTick();
 8001c56:	f000 ff05 	bl	8002a64 <HAL_GetTick>
 8001c5a:	60f8      	str	r0, [r7, #12]
		midDelta = now_midOut - midInTime;
 8001c5c:	4b2b      	ldr	r3, [pc, #172]	; (8001d0c <HAL_GPIO_EXTI_Callback+0x16c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	4a2a      	ldr	r2, [pc, #168]	; (8001d10 <HAL_GPIO_EXTI_Callback+0x170>)
 8001c66:	6013      	str	r3, [r2, #0]
		midInTime = now_midOut;
 8001c68:	4a28      	ldr	r2, [pc, #160]	; (8001d0c <HAL_GPIO_EXTI_Callback+0x16c>)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6013      	str	r3, [r2, #0]
		if (midDelta > 3000) {
 8001c6e:	4b28      	ldr	r3, [pc, #160]	; (8001d10 <HAL_GPIO_EXTI_Callback+0x170>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d905      	bls.n	8001c86 <HAL_GPIO_EXTI_Callback+0xe6>
		  FLAG_startPointSet = false;
 8001c7a:	4b26      	ldr	r3, [pc, #152]	; (8001d14 <HAL_GPIO_EXTI_Callback+0x174>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	701a      	strb	r2, [r3, #0]
		  midDelta = 0;
 8001c80:	4b23      	ldr	r3, [pc, #140]	; (8001d10 <HAL_GPIO_EXTI_Callback+0x170>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
		}

		if ((FLAG_startPointSet == false) && (FLAG_runMotor == true)) {
 8001c86:	4b23      	ldr	r3, [pc, #140]	; (8001d14 <HAL_GPIO_EXTI_Callback+0x174>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	f083 0301 	eor.w	r3, r3, #1
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d02a      	beq.n	8001cea <HAL_GPIO_EXTI_Callback+0x14a>
 8001c94:	4b20      	ldr	r3, [pc, #128]	; (8001d18 <HAL_GPIO_EXTI_Callback+0x178>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d026      	beq.n	8001cea <HAL_GPIO_EXTI_Callback+0x14a>
		  M2_travel_StartPoint = M2_x;
 8001c9c:	4b1f      	ldr	r3, [pc, #124]	; (8001d1c <HAL_GPIO_EXTI_Callback+0x17c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a1f      	ldr	r2, [pc, #124]	; (8001d20 <HAL_GPIO_EXTI_Callback+0x180>)
 8001ca2:	6013      	str	r3, [r2, #0]
		  M2_travel = 0;
 8001ca4:	4b1f      	ldr	r3, [pc, #124]	; (8001d24 <HAL_GPIO_EXTI_Callback+0x184>)
 8001ca6:	f04f 0200 	mov.w	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
		  M1_travel = 0;
 8001cac:	4b1e      	ldr	r3, [pc, #120]	; (8001d28 <HAL_GPIO_EXTI_Callback+0x188>)
 8001cae:	f04f 0200 	mov.w	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
		  FLAG_startPointSet = true;
 8001cb4:	4b17      	ldr	r3, [pc, #92]	; (8001d14 <HAL_GPIO_EXTI_Callback+0x174>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	701a      	strb	r2, [r3, #0]
 8001cba:	e016      	b.n	8001cea <HAL_GPIO_EXTI_Callback+0x14a>
		}
	  }
	} else {
	  MID_REACH = true;
 8001cbc:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <HAL_GPIO_EXTI_Callback+0x160>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	701a      	strb	r2, [r3, #0]
	  FLAG_midOutTime = false;
 8001cc2:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <HAL_GPIO_EXTI_Callback+0x168>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	701a      	strb	r2, [r3, #0]
	  if (FLAG_midInTime == false) {
 8001cc8:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <HAL_GPIO_EXTI_Callback+0x164>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	f083 0301 	eor.w	r3, r3, #1
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d009      	beq.n	8001cea <HAL_GPIO_EXTI_Callback+0x14a>
		FLAG_midInTime = true;
 8001cd6:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <HAL_GPIO_EXTI_Callback+0x164>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	701a      	strb	r2, [r3, #0]
		midInTime = HAL_GetTick();
 8001cdc:	f000 fec2 	bl	8002a64 <HAL_GetTick>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <HAL_GPIO_EXTI_Callback+0x16c>)
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	e000      	b.n	8001cea <HAL_GPIO_EXTI_Callback+0x14a>
	  }
	}
  } else
	return;
 8001ce8:	bf00      	nop
}
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40010c00 	.word	0x40010c00
 8001cf4:	2000019d 	.word	0x2000019d
 8001cf8:	20000210 	.word	0x20000210
 8001cfc:	2000019c 	.word	0x2000019c
 8001d00:	2000019e 	.word	0x2000019e
 8001d04:	20000275 	.word	0x20000275
 8001d08:	20000280 	.word	0x20000280
 8001d0c:	20000278 	.word	0x20000278
 8001d10:	2000027c 	.word	0x2000027c
 8001d14:	20000274 	.word	0x20000274
 8001d18:	20000248 	.word	0x20000248
 8001d1c:	20000230 	.word	0x20000230
 8001d20:	20000244 	.word	0x20000244
 8001d24:	20000234 	.word	0x20000234
 8001d28:	20000238 	.word	0x20000238

08001d2c <start_up>:

void start_up() {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001d30:	213c      	movs	r1, #60	; 0x3c
 8001d32:	4832      	ldr	r0, [pc, #200]	; (8001dfc <start_up+0xd0>)
 8001d34:	f002 f874 	bl	8003e20 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001d38:	213c      	movs	r1, #60	; 0x3c
 8001d3a:	4831      	ldr	r0, [pc, #196]	; (8001e00 <start_up+0xd4>)
 8001d3c:	f002 f870 	bl	8003e20 <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start_IT(&htim4);
 8001d40:	4830      	ldr	r0, [pc, #192]	; (8001e04 <start_up+0xd8>)
 8001d42:	f001 fe87 	bl	8003a54 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001d46:	2100      	movs	r1, #0
 8001d48:	482f      	ldr	r0, [pc, #188]	; (8001e08 <start_up+0xdc>)
 8001d4a:	f001 ff25 	bl	8003b98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001d4e:	2104      	movs	r1, #4
 8001d50:	482d      	ldr	r0, [pc, #180]	; (8001e08 <start_up+0xdc>)
 8001d52:	f001 ff21 	bl	8003b98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001d56:	2104      	movs	r1, #4
 8001d58:	482a      	ldr	r0, [pc, #168]	; (8001e04 <start_up+0xd8>)
 8001d5a:	f001 ff1d 	bl	8003b98 <HAL_TIM_PWM_Start>

  buttonInit(&BTN_Start, BTN_START_GPIO_Port, BTN_START_Pin);
 8001d5e:	2202      	movs	r2, #2
 8001d60:	492a      	ldr	r1, [pc, #168]	; (8001e0c <start_up+0xe0>)
 8001d62:	482b      	ldr	r0, [pc, #172]	; (8001e10 <start_up+0xe4>)
 8001d64:	f7ff f89b 	bl	8000e9e <buttonInit>
  buttonInit(&BTN_Stop, BTN_STOP_GPIO_Port, BTN_STOP_Pin);
 8001d68:	2201      	movs	r2, #1
 8001d6a:	4928      	ldr	r1, [pc, #160]	; (8001e0c <start_up+0xe0>)
 8001d6c:	4829      	ldr	r0, [pc, #164]	; (8001e14 <start_up+0xe8>)
 8001d6e:	f7ff f896 	bl	8000e9e <buttonInit>
  buttonInit(&SW_Mode, MODE_SW_GPIO_Port, MODE_SW_Pin);
 8001d72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d76:	4925      	ldr	r1, [pc, #148]	; (8001e0c <start_up+0xe0>)
 8001d78:	4827      	ldr	r0, [pc, #156]	; (8001e18 <start_up+0xec>)
 8001d7a:	f7ff f890 	bl	8000e9e <buttonInit>
  buttonInit(&SW_Lvl1, LVL_SW1_GPIO_Port, LVL_SW1_Pin);
 8001d7e:	2208      	movs	r2, #8
 8001d80:	4922      	ldr	r1, [pc, #136]	; (8001e0c <start_up+0xe0>)
 8001d82:	4826      	ldr	r0, [pc, #152]	; (8001e1c <start_up+0xf0>)
 8001d84:	f7ff f88b 	bl	8000e9e <buttonInit>
  buttonInit(&SW_Lvl2, LVL_SW2_GPIO_Port, LVL_SW2_Pin);
 8001d88:	2210      	movs	r2, #16
 8001d8a:	4920      	ldr	r1, [pc, #128]	; (8001e0c <start_up+0xe0>)
 8001d8c:	4824      	ldr	r0, [pc, #144]	; (8001e20 <start_up+0xf4>)
 8001d8e:	f7ff f886 	bl	8000e9e <buttonInit>

  state = buttonRead(&SW_Mode);
 8001d92:	4821      	ldr	r0, [pc, #132]	; (8001e18 <start_up+0xec>)
 8001d94:	f7ff f8aa 	bl	8000eec <buttonRead>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	4b21      	ldr	r3, [pc, #132]	; (8001e24 <start_up+0xf8>)
 8001d9e:	701a      	strb	r2, [r3, #0]
  if (state == IDLE)
 8001da0:	4b20      	ldr	r3, [pc, #128]	; (8001e24 <start_up+0xf8>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d102      	bne.n	8001dae <start_up+0x82>
	active_idle();
 8001da8:	f000 f860 	bl	8001e6c <active_idle>
 8001dac:	e005      	b.n	8001dba <start_up+0x8e>
  else if (state == RUN)
 8001dae:	4b1d      	ldr	r3, [pc, #116]	; (8001e24 <start_up+0xf8>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <start_up+0x8e>
	active_run();
 8001db6:	f000 f879 	bl	8001eac <active_run>

  if (HAL_GPIO_ReadPin(LMS_B_GPIO_Port, LMS_B_Pin) == GPIO_PIN_RESET) {
 8001dba:	2140      	movs	r1, #64	; 0x40
 8001dbc:	4813      	ldr	r0, [pc, #76]	; (8001e0c <start_up+0xe0>)
 8001dbe:	f001 f9cf 	bl	8003160 <HAL_GPIO_ReadPin>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d102      	bne.n	8001dce <start_up+0xa2>
	BEGIN_REACH = true;
 8001dc8:	4b17      	ldr	r3, [pc, #92]	; (8001e28 <start_up+0xfc>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	701a      	strb	r2, [r3, #0]
  }
  if (HAL_GPIO_ReadPin(LMS_E_GPIO_Port, LMS_E_Pin) == GPIO_PIN_RESET) {
 8001dce:	2120      	movs	r1, #32
 8001dd0:	480e      	ldr	r0, [pc, #56]	; (8001e0c <start_up+0xe0>)
 8001dd2:	f001 f9c5 	bl	8003160 <HAL_GPIO_ReadPin>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d102      	bne.n	8001de2 <start_up+0xb6>
	END_REACH = true;
 8001ddc:	4b13      	ldr	r3, [pc, #76]	; (8001e2c <start_up+0x100>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	701a      	strb	r2, [r3, #0]
  }
  if (HAL_GPIO_ReadPin(LMS_M_GPIO_Port, LMS_M_Pin) == GPIO_PIN_RESET) {
 8001de2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001de6:	4809      	ldr	r0, [pc, #36]	; (8001e0c <start_up+0xe0>)
 8001de8:	f001 f9ba 	bl	8003160 <HAL_GPIO_ReadPin>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d102      	bne.n	8001df8 <start_up+0xcc>
	MID_REACH = true;
 8001df2:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <start_up+0x104>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	701a      	strb	r2, [r3, #0]
  }
}
 8001df8:	bf00      	nop
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20000038 	.word	0x20000038
 8001e00:	20000080 	.word	0x20000080
 8001e04:	20000110 	.word	0x20000110
 8001e08:	200000c8 	.word	0x200000c8
 8001e0c:	40010c00 	.word	0x40010c00
 8001e10:	200001a0 	.word	0x200001a0
 8001e14:	200001b4 	.word	0x200001b4
 8001e18:	200001c8 	.word	0x200001c8
 8001e1c:	200001dc 	.word	0x200001dc
 8001e20:	200001f0 	.word	0x200001f0
 8001e24:	20000204 	.word	0x20000204
 8001e28:	2000019d 	.word	0x2000019d
 8001e2c:	2000019c 	.word	0x2000019c
 8001e30:	2000019e 	.word	0x2000019e

08001e34 <stop_motor>:
void stop_motor(bool motor1, bool motor2) {
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	460a      	mov	r2, r1
 8001e3e:	71fb      	strb	r3, [r7, #7]
 8001e40:	4613      	mov	r3, r2
 8001e42:	71bb      	strb	r3, [r7, #6]
  if (motor1) {
 8001e44:	79fb      	ldrb	r3, [r7, #7]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d004      	beq.n	8001e54 <stop_motor+0x20>
	set_motor(1, 0, 0);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	2001      	movs	r0, #1
 8001e50:	f7ff fd9c 	bl	800198c <set_motor>
  }
  if (motor2) {
 8001e54:	79bb      	ldrb	r3, [r7, #6]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d004      	beq.n	8001e64 <stop_motor+0x30>
	set_motor(2, 0, 0);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	2002      	movs	r0, #2
 8001e60:	f7ff fd94 	bl	800198c <set_motor>
  }
}
 8001e64:	bf00      	nop
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <active_idle>:
void active_idle() {
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  stop_motor(1, 1);
 8001e70:	2101      	movs	r1, #1
 8001e72:	2001      	movs	r0, #1
 8001e74:	f7ff ffde 	bl	8001e34 <stop_motor>
  if (RUN_MODE == true) {
 8001e78:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <active_idle+0x34>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d002      	beq.n	8001e86 <active_idle+0x1a>
	RUN_MODE = false;
 8001e80:	4b07      	ldr	r3, [pc, #28]	; (8001ea0 <active_idle+0x34>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	701a      	strb	r2, [r3, #0]
  }
  IDLE_MODE = true;
 8001e86:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <active_idle+0x38>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	701a      	strb	r2, [r3, #0]
  lightLED(1, 0);
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	2001      	movs	r0, #1
 8001e90:	f7ff fe50 	bl	8001b34 <lightLED>
  FLAG_returnHome = false;
 8001e94:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <active_idle+0x3c>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	701a      	strb	r2, [r3, #0]
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000205 	.word	0x20000205
 8001ea4:	20000206 	.word	0x20000206
 8001ea8:	20000208 	.word	0x20000208

08001eac <active_run>:
void active_run() {
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  stop_motor(1, 1);
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	2001      	movs	r0, #1
 8001eb4:	f7ff ffbe 	bl	8001e34 <stop_motor>
  if (IDLE_MODE == true) {
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <active_run+0x40>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d002      	beq.n	8001ec6 <active_run+0x1a>
	IDLE_MODE = false;
 8001ec0:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <active_run+0x40>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	701a      	strb	r2, [r3, #0]
  }
  RUN_MODE = true;
 8001ec6:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <active_run+0x44>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	701a      	strb	r2, [r3, #0]
  lightLED(0, 1);
 8001ecc:	2101      	movs	r1, #1
 8001ece:	2000      	movs	r0, #0
 8001ed0:	f7ff fe30 	bl	8001b34 <lightLED>
  FLAG_runMotor = false;
 8001ed4:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <active_run+0x48>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	701a      	strb	r2, [r3, #0]

  FLAG_completeRun = false;
 8001eda:	4b07      	ldr	r3, [pc, #28]	; (8001ef8 <active_run+0x4c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	701a      	strb	r2, [r3, #0]
  preLevel = level;
 8001ee0:	4b06      	ldr	r3, [pc, #24]	; (8001efc <active_run+0x50>)
 8001ee2:	781a      	ldrb	r2, [r3, #0]
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <active_run+0x54>)
 8001ee6:	701a      	strb	r2, [r3, #0]
}
 8001ee8:	bf00      	nop
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20000206 	.word	0x20000206
 8001ef0:	20000205 	.word	0x20000205
 8001ef4:	20000248 	.word	0x20000248
 8001ef8:	20000272 	.word	0x20000272
 8001efc:	20000207 	.word	0x20000207
 8001f00:	20000273 	.word	0x20000273

08001f04 <check_button>:

void check_button() {
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  BTN_Start_state = buttonRead(&BTN_Start);
 8001f08:	481c      	ldr	r0, [pc, #112]	; (8001f7c <check_button+0x78>)
 8001f0a:	f7fe ffef 	bl	8000eec <buttonRead>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	461a      	mov	r2, r3
 8001f12:	4b1b      	ldr	r3, [pc, #108]	; (8001f80 <check_button+0x7c>)
 8001f14:	701a      	strb	r2, [r3, #0]
  BTN_Stop_state = buttonRead(&BTN_Stop);
 8001f16:	481b      	ldr	r0, [pc, #108]	; (8001f84 <check_button+0x80>)
 8001f18:	f7fe ffe8 	bl	8000eec <buttonRead>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	461a      	mov	r2, r3
 8001f20:	4b19      	ldr	r3, [pc, #100]	; (8001f88 <check_button+0x84>)
 8001f22:	701a      	strb	r2, [r3, #0]

  SW_Lvl1_state = buttonRead(&SW_Lvl1);
 8001f24:	4819      	ldr	r0, [pc, #100]	; (8001f8c <check_button+0x88>)
 8001f26:	f7fe ffe1 	bl	8000eec <buttonRead>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	4b18      	ldr	r3, [pc, #96]	; (8001f90 <check_button+0x8c>)
 8001f30:	701a      	strb	r2, [r3, #0]
  SW_Lvl2_state = buttonRead(&SW_Lvl2);
 8001f32:	4818      	ldr	r0, [pc, #96]	; (8001f94 <check_button+0x90>)
 8001f34:	f7fe ffda 	bl	8000eec <buttonRead>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	4b16      	ldr	r3, [pc, #88]	; (8001f98 <check_button+0x94>)
 8001f3e:	701a      	strb	r2, [r3, #0]

  if (SW_Lvl1_state == BTN_SET && SW_Lvl2_state == BTN_SET) {
 8001f40:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <check_button+0x8c>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d107      	bne.n	8001f58 <check_button+0x54>
 8001f48:	4b13      	ldr	r3, [pc, #76]	; (8001f98 <check_button+0x94>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d103      	bne.n	8001f58 <check_button+0x54>
	level = 1;
 8001f50:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <check_button+0x98>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	701a      	strb	r2, [r3, #0]
  } else if (SW_Lvl1_state == BTN_RESET) {
	level = 0;
  } else if (SW_Lvl2_state == BTN_RESET) {
	level = 2;
  }
}
 8001f56:	e00e      	b.n	8001f76 <check_button+0x72>
  } else if (SW_Lvl1_state == BTN_RESET) {
 8001f58:	4b0d      	ldr	r3, [pc, #52]	; (8001f90 <check_button+0x8c>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d103      	bne.n	8001f68 <check_button+0x64>
	level = 0;
 8001f60:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <check_button+0x98>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	701a      	strb	r2, [r3, #0]
}
 8001f66:	e006      	b.n	8001f76 <check_button+0x72>
  } else if (SW_Lvl2_state == BTN_RESET) {
 8001f68:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <check_button+0x94>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d102      	bne.n	8001f76 <check_button+0x72>
	level = 2;
 8001f70:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <check_button+0x98>)
 8001f72:	2202      	movs	r2, #2
 8001f74:	701a      	strb	r2, [r3, #0]
}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	200001a0 	.word	0x200001a0
 8001f80:	20000004 	.word	0x20000004
 8001f84:	200001b4 	.word	0x200001b4
 8001f88:	20000005 	.word	0x20000005
 8001f8c:	200001dc 	.word	0x200001dc
 8001f90:	20000006 	.word	0x20000006
 8001f94:	200001f0 	.word	0x200001f0
 8001f98:	20000007 	.word	0x20000007
 8001f9c:	20000207 	.word	0x20000207

08001fa0 <flash_LED>:

void flash_LED(u8 id, u16 interval) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	460a      	mov	r2, r1
 8001faa:	71fb      	strb	r3, [r7, #7]
 8001fac:	4613      	mov	r3, r2
 8001fae:	80bb      	strh	r3, [r7, #4]
  static u32 last_Y = 0, last_G = 0;
  u32 now = HAL_GetTick();
 8001fb0:	f000 fd58 	bl	8002a64 <HAL_GetTick>
 8001fb4:	60f8      	str	r0, [r7, #12]
  switch (id) {
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d002      	beq.n	8001fc2 <flash_LED+0x22>
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d00f      	beq.n	8001fe0 <flash_LED+0x40>
	  HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
	  last_G = now;
	}
	break;
  }
}
 8001fc0:	e020      	b.n	8002004 <flash_LED+0x64>
	if ((now - last_Y) > interval) {
 8001fc2:	4b12      	ldr	r3, [pc, #72]	; (800200c <flash_LED+0x6c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	1ad2      	subs	r2, r2, r3
 8001fca:	88bb      	ldrh	r3, [r7, #4]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d916      	bls.n	8001ffe <flash_LED+0x5e>
	  HAL_GPIO_TogglePin(LED_Y_GPIO_Port, LED_Y_Pin);
 8001fd0:	2110      	movs	r1, #16
 8001fd2:	480f      	ldr	r0, [pc, #60]	; (8002010 <flash_LED+0x70>)
 8001fd4:	f001 f8f3 	bl	80031be <HAL_GPIO_TogglePin>
	  last_Y = now;
 8001fd8:	4a0c      	ldr	r2, [pc, #48]	; (800200c <flash_LED+0x6c>)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6013      	str	r3, [r2, #0]
	break;
 8001fde:	e00e      	b.n	8001ffe <flash_LED+0x5e>
	if ((now - last_G) > interval) {
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <flash_LED+0x74>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	1ad2      	subs	r2, r2, r3
 8001fe8:	88bb      	ldrh	r3, [r7, #4]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d909      	bls.n	8002002 <flash_LED+0x62>
	  HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8001fee:	2120      	movs	r1, #32
 8001ff0:	4807      	ldr	r0, [pc, #28]	; (8002010 <flash_LED+0x70>)
 8001ff2:	f001 f8e4 	bl	80031be <HAL_GPIO_TogglePin>
	  last_G = now;
 8001ff6:	4a07      	ldr	r2, [pc, #28]	; (8002014 <flash_LED+0x74>)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6013      	str	r3, [r2, #0]
	break;
 8001ffc:	e001      	b.n	8002002 <flash_LED+0x62>
	break;
 8001ffe:	bf00      	nop
 8002000:	e000      	b.n	8002004 <flash_LED+0x64>
	break;
 8002002:	bf00      	nop
}
 8002004:	bf00      	nop
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	2000028c 	.word	0x2000028c
 8002010:	40010800 	.word	0x40010800
 8002014:	20000290 	.word	0x20000290

08002018 <return_home>:
bool FLAG_returnFineRev = false;
void return_home() {
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
  if (FLAG_returnFast) {
 800201e:	4b39      	ldr	r3, [pc, #228]	; (8002104 <return_home+0xec>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d021      	beq.n	800206a <return_home+0x52>
	if (BEGIN_REACH) {
 8002026:	4b38      	ldr	r3, [pc, #224]	; (8002108 <return_home+0xf0>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d010      	beq.n	8002050 <return_home+0x38>
	  FLAG_returnFast = false;
 800202e:	4b35      	ldr	r3, [pc, #212]	; (8002104 <return_home+0xec>)
 8002030:	2200      	movs	r2, #0
 8002032:	701a      	strb	r2, [r3, #0]
	  FLAG_returnFine = true;
 8002034:	4b35      	ldr	r3, [pc, #212]	; (800210c <return_home+0xf4>)
 8002036:	2201      	movs	r2, #1
 8002038:	701a      	strb	r2, [r3, #0]
	  TS_returnFine = HAL_GetTick();
 800203a:	f000 fd13 	bl	8002a64 <HAL_GetTick>
 800203e:	4603      	mov	r3, r0
 8002040:	4a33      	ldr	r2, [pc, #204]	; (8002110 <return_home+0xf8>)
 8002042:	6013      	str	r3, [r2, #0]
	  set_motor(2, 0, 0);
 8002044:	2200      	movs	r2, #0
 8002046:	2100      	movs	r1, #0
 8002048:	2002      	movs	r0, #2
 800204a:	f7ff fc9f 	bl	800198c <set_motor>
	  return;
 800204e:	e056      	b.n	80020fe <return_home+0xe6>
	}
	set_motor(2, -1, 1000);
 8002050:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002054:	f04f 31ff 	mov.w	r1, #4294967295
 8002058:	2002      	movs	r0, #2
 800205a:	f7ff fc97 	bl	800198c <set_motor>
	FLAG_returnFine = false;
 800205e:	4b2b      	ldr	r3, [pc, #172]	; (800210c <return_home+0xf4>)
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
	FLAG_returnFineRev = false;
 8002064:	4b2b      	ldr	r3, [pc, #172]	; (8002114 <return_home+0xfc>)
 8002066:	2200      	movs	r2, #0
 8002068:	701a      	strb	r2, [r3, #0]
  }
  if (FLAG_returnFine) {
 800206a:	4b28      	ldr	r3, [pc, #160]	; (800210c <return_home+0xf4>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d01c      	beq.n	80020ac <return_home+0x94>
	u32 deltaTime = HAL_GetTick() - TS_returnFine;
 8002072:	f000 fcf7 	bl	8002a64 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	4b25      	ldr	r3, [pc, #148]	; (8002110 <return_home+0xf8>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	607b      	str	r3, [r7, #4]

	if (deltaTime > 2000) {
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002086:	d90b      	bls.n	80020a0 <return_home+0x88>
	  FLAG_returnFineRev = true;
 8002088:	4b22      	ldr	r3, [pc, #136]	; (8002114 <return_home+0xfc>)
 800208a:	2201      	movs	r2, #1
 800208c:	701a      	strb	r2, [r3, #0]
	  FLAG_returnFine = false;
 800208e:	4b1f      	ldr	r3, [pc, #124]	; (800210c <return_home+0xf4>)
 8002090:	2200      	movs	r2, #0
 8002092:	701a      	strb	r2, [r3, #0]
	  set_motor(2, 0, 0);
 8002094:	2200      	movs	r2, #0
 8002096:	2100      	movs	r1, #0
 8002098:	2002      	movs	r0, #2
 800209a:	f7ff fc77 	bl	800198c <set_motor>
	  return;
 800209e:	e02e      	b.n	80020fe <return_home+0xe6>
	}
	set_motor(2, 1, 1000);
 80020a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020a4:	2101      	movs	r1, #1
 80020a6:	2002      	movs	r0, #2
 80020a8:	f7ff fc70 	bl	800198c <set_motor>
  }
  if (FLAG_returnFineRev) {
 80020ac:	4b19      	ldr	r3, [pc, #100]	; (8002114 <return_home+0xfc>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d024      	beq.n	80020fe <return_home+0xe6>
	if (BEGIN_REACH) {
 80020b4:	4b14      	ldr	r3, [pc, #80]	; (8002108 <return_home+0xf0>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d019      	beq.n	80020f0 <return_home+0xd8>
	  set_motor(2, 0, 0);
 80020bc:	2200      	movs	r2, #0
 80020be:	2100      	movs	r1, #0
 80020c0:	2002      	movs	r0, #2
 80020c2:	f7ff fc63 	bl	800198c <set_motor>
	  FLAG_returnHome = false;
 80020c6:	4b14      	ldr	r3, [pc, #80]	; (8002118 <return_home+0x100>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	701a      	strb	r2, [r3, #0]
	  FLAG_startPointSet = false;
 80020cc:	4b13      	ldr	r3, [pc, #76]	; (800211c <return_home+0x104>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	701a      	strb	r2, [r3, #0]
	  HAL_NVIC_DisableIRQ(TIM4_IRQn);
 80020d2:	201e      	movs	r0, #30
 80020d4:	f000 fdf5 	bl	8002cc2 <HAL_NVIC_DisableIRQ>
	  M2_x = 0;
 80020d8:	4b11      	ldr	r3, [pc, #68]	; (8002120 <return_home+0x108>)
 80020da:	f04f 0200 	mov.w	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
	  M2_travel = 0;
 80020e0:	4b10      	ldr	r3, [pc, #64]	; (8002124 <return_home+0x10c>)
 80020e2:	f04f 0200 	mov.w	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
	  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80020e8:	201e      	movs	r0, #30
 80020ea:	f000 fddc 	bl	8002ca6 <HAL_NVIC_EnableIRQ>
	  return;
 80020ee:	e006      	b.n	80020fe <return_home+0xe6>
	}
	set_motor(2, -1, 800);
 80020f0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80020f4:	f04f 31ff 	mov.w	r1, #4294967295
 80020f8:	2002      	movs	r0, #2
 80020fa:	f7ff fc47 	bl	800198c <set_motor>
  }
}
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	2000023c 	.word	0x2000023c
 8002108:	2000019d 	.word	0x2000019d
 800210c:	2000023d 	.word	0x2000023d
 8002110:	20000240 	.word	0x20000240
 8002114:	20000281 	.word	0x20000281
 8002118:	20000208 	.word	0x20000208
 800211c:	20000274 	.word	0x20000274
 8002120:	20000230 	.word	0x20000230
 8002124:	20000234 	.word	0x20000234

08002128 <HAL_TIM_PeriodElapsedCallback>:

s32 delta_E1 = 0, delta_E2 = 0;
u8 deltaT = 20; //ms
float M1_pwm = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002128:	b5b0      	push	{r4, r5, r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4) {
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a25      	ldr	r2, [pc, #148]	; (80021cc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002136:	4293      	cmp	r3, r2
 8002138:	f040 8236 	bne.w	80025a8 <HAL_TIM_PeriodElapsedCallback+0x480>
	tick_count = tick_count + 1;
 800213c:	4b24      	ldr	r3, [pc, #144]	; (80021d0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	3301      	adds	r3, #1
 8002142:	4a23      	ldr	r2, [pc, #140]	; (80021d0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002144:	6013      	str	r3, [r2, #0]
	if (tick_count >= deltaT) {
 8002146:	4b23      	ldr	r3, [pc, #140]	; (80021d4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	461a      	mov	r2, r3
 800214c:	4b20      	ldr	r3, [pc, #128]	; (80021d0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	429a      	cmp	r2, r3
 8002152:	f200 8229 	bhi.w	80025a8 <HAL_TIM_PeriodElapsedCallback+0x480>
	  //50 ms
	  tick_count = 0;
 8002156:	4b1e      	ldr	r3, [pc, #120]	; (80021d0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
	  {
		now_E1 = TIM1->CNT;
 800215c:	4b1e      	ldr	r3, [pc, #120]	; (80021d8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800215e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002160:	461a      	mov	r2, r3
 8002162:	4b1e      	ldr	r3, [pc, #120]	; (80021dc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002164:	601a      	str	r2, [r3, #0]
		now_E2 = TIM2->CNT;
 8002166:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	461a      	mov	r2, r3
 800216e:	4b1c      	ldr	r3, [pc, #112]	; (80021e0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002170:	601a      	str	r2, [r3, #0]

		s32 delta_E1 = now_E1 - pre_E1;
 8002172:	4b1a      	ldr	r3, [pc, #104]	; (80021dc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	461a      	mov	r2, r3
 8002178:	4b1a      	ldr	r3, [pc, #104]	; (80021e4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	617b      	str	r3, [r7, #20]
		s32 delta_E2 = now_E2 - pre_E2;
 8002180:	4b17      	ldr	r3, [pc, #92]	; (80021e0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	461a      	mov	r2, r3
 8002186:	4b18      	ldr	r3, [pc, #96]	; (80021e8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	613b      	str	r3, [r7, #16]

		if (delta_E1 < -3000) // now = 5, pre = 65530
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	4a16      	ldr	r2, [pc, #88]	; (80021ec <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002192:	4293      	cmp	r3, r2
 8002194:	da05      	bge.n	80021a2 <HAL_TIM_PeriodElapsedCallback+0x7a>
		  delta_E1 = delta_E1 + 0xFFFF;
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800219c:	33ff      	adds	r3, #255	; 0xff
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	e009      	b.n	80021b6 <HAL_TIM_PeriodElapsedCallback+0x8e>
		else if (delta_E1 > 3000) // now = 65535, pre = 5
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80021a8:	4293      	cmp	r3, r2
 80021aa:	dd04      	ble.n	80021b6 <HAL_TIM_PeriodElapsedCallback+0x8e>
		  delta_E1 = delta_E1 - 0xFFFF;
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80021b2:	3bff      	subs	r3, #255	; 0xff
 80021b4:	617b      	str	r3, [r7, #20]

		if (delta_E2 < -3000) // now = 5, pre = 65530
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	4a0c      	ldr	r2, [pc, #48]	; (80021ec <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	da18      	bge.n	80021f0 <HAL_TIM_PeriodElapsedCallback+0xc8>
		  delta_E2 = delta_E2 + 0xFFFF;
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80021c4:	33ff      	adds	r3, #255	; 0xff
 80021c6:	613b      	str	r3, [r7, #16]
 80021c8:	e01c      	b.n	8002204 <HAL_TIM_PeriodElapsedCallback+0xdc>
 80021ca:	bf00      	nop
 80021cc:	40000800 	.word	0x40000800
 80021d0:	20000214 	.word	0x20000214
 80021d4:	20000010 	.word	0x20000010
 80021d8:	40012c00 	.word	0x40012c00
 80021dc:	20000220 	.word	0x20000220
 80021e0:	20000224 	.word	0x20000224
 80021e4:	20000228 	.word	0x20000228
 80021e8:	2000022c 	.word	0x2000022c
 80021ec:	fffff448 	.word	0xfffff448
		else if (delta_E2 > 3000) // now = 65535, pre = 5
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80021f6:	4293      	cmp	r3, r2
 80021f8:	dd04      	ble.n	8002204 <HAL_TIM_PeriodElapsedCallback+0xdc>
		  delta_E2 = delta_E2 - 0xFFFF;
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8002200:	3bff      	subs	r3, #255	; 0xff
 8002202:	613b      	str	r3, [r7, #16]

		// (ticks/s*60)/(ticks/mRev*mRev/outRev) = outRev/min
		M1_velo = (delta_E1 * (1000 / deltaT) * 60.0)
 8002204:	4bb4      	ldr	r3, [pc, #720]	; (80024d8 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	461a      	mov	r2, r3
 800220a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800220e:	fb93 f3f2 	sdiv	r3, r3, r2
 8002212:	697a      	ldr	r2, [r7, #20]
 8002214:	fb02 f303 	mul.w	r3, r2, r3
 8002218:	4618      	mov	r0, r3
 800221a:	f7fe f99f 	bl	800055c <__aeabi_i2d>
 800221e:	f04f 0200 	mov.w	r2, #0
 8002222:	4bae      	ldr	r3, [pc, #696]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8002224:	f7fe fa04 	bl	8000630 <__aeabi_dmul>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	4610      	mov	r0, r2
 800222e:	4619      	mov	r1, r3
			/ (1.0 * M1_PulsePerRev * M1_GearRatio);
 8002230:	a3a3      	add	r3, pc, #652	; (adr r3, 80024c0 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8002232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002236:	f7fe fb25 	bl	8000884 <__aeabi_ddiv>
 800223a:	4602      	mov	r2, r0
 800223c:	460b      	mov	r3, r1
 800223e:	4610      	mov	r0, r2
 8002240:	4619      	mov	r1, r3
 8002242:	f7fe fc27 	bl	8000a94 <__aeabi_d2f>
 8002246:	4603      	mov	r3, r0
		M1_velo = (delta_E1 * (1000 / deltaT) * 60.0)
 8002248:	4aa5      	ldr	r2, [pc, #660]	; (80024e0 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 800224a:	6013      	str	r3, [r2, #0]
		M2_velo = (delta_E2 * (1000 / deltaT) * 60.0)
 800224c:	4ba2      	ldr	r3, [pc, #648]	; (80024d8 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	461a      	mov	r2, r3
 8002252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002256:	fb93 f3f2 	sdiv	r3, r3, r2
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	fb02 f303 	mul.w	r3, r2, r3
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe f97b 	bl	800055c <__aeabi_i2d>
 8002266:	f04f 0200 	mov.w	r2, #0
 800226a:	4b9c      	ldr	r3, [pc, #624]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 800226c:	f7fe f9e0 	bl	8000630 <__aeabi_dmul>
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	4610      	mov	r0, r2
 8002276:	4619      	mov	r1, r3
			/ (1.0 * M2_PulsePerRev * M2_GearRatio);
 8002278:	f04f 0200 	mov.w	r2, #0
 800227c:	4b99      	ldr	r3, [pc, #612]	; (80024e4 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 800227e:	f7fe fb01 	bl	8000884 <__aeabi_ddiv>
 8002282:	4602      	mov	r2, r0
 8002284:	460b      	mov	r3, r1
 8002286:	4610      	mov	r0, r2
 8002288:	4619      	mov	r1, r3
 800228a:	f7fe fc03 	bl	8000a94 <__aeabi_d2f>
 800228e:	4603      	mov	r3, r0
		M2_velo = (delta_E2 * (1000 / deltaT) * 60.0)
 8002290:	4a95      	ldr	r2, [pc, #596]	; (80024e8 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8002292:	6013      	str	r3, [r2, #0]

		// pulse/(pulse/rev*rev/Outrev) = OutRev *pitch = mm
		M2_x = M2_x
			+ delta_E2 * M2_visme_pitch * 1.0
 8002294:	4b95      	ldr	r3, [pc, #596]	; (80024ec <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f7fe f971 	bl	8000580 <__aeabi_f2d>
 800229e:	4604      	mov	r4, r0
 80022a0:	460d      	mov	r5, r1
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fe f958 	bl	800055c <__aeabi_i2d>
				/ (1.0 * M2_PulsePerRev * M2_GearRatio);
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	4b8c      	ldr	r3, [pc, #560]	; (80024e4 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 80022b2:	f7fe fae7 	bl	8000884 <__aeabi_ddiv>
 80022b6:	4602      	mov	r2, r0
 80022b8:	460b      	mov	r3, r1
			+ delta_E2 * M2_visme_pitch * 1.0
 80022ba:	4620      	mov	r0, r4
 80022bc:	4629      	mov	r1, r5
 80022be:	f7fe f801 	bl	80002c4 <__adddf3>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4610      	mov	r0, r2
 80022c8:	4619      	mov	r1, r3
 80022ca:	f7fe fbe3 	bl	8000a94 <__aeabi_d2f>
 80022ce:	4603      	mov	r3, r0
		M2_x = M2_x
 80022d0:	4a86      	ldr	r2, [pc, #536]	; (80024ec <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 80022d2:	6013      	str	r3, [r2, #0]

		pre_E1 = now_E1;
 80022d4:	4b86      	ldr	r3, [pc, #536]	; (80024f0 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	461a      	mov	r2, r3
 80022da:	4b86      	ldr	r3, [pc, #536]	; (80024f4 <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 80022dc:	601a      	str	r2, [r3, #0]
		pre_E2 = now_E2;
 80022de:	4b86      	ldr	r3, [pc, #536]	; (80024f8 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	4b85      	ldr	r3, [pc, #532]	; (80024fc <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 80022e6:	601a      	str	r2, [r3, #0]

		u32 delta_E2_abs = abs(delta_E2);
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	bfb8      	it	lt
 80022ee:	425b      	neglt	r3, r3
 80022f0:	60fb      	str	r3, [r7, #12]
		M2_travel = M2_travel
			+ (delta_E2_abs * M2_visme_pitch * 1.0)
 80022f2:	4b83      	ldr	r3, [pc, #524]	; (8002500 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fe f942 	bl	8000580 <__aeabi_f2d>
 80022fc:	4604      	mov	r4, r0
 80022fe:	460d      	mov	r5, r1
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe f919 	bl	800053c <__aeabi_ui2d>
				/ (1.0 * M2_PulsePerRev * M2_GearRatio);
 800230a:	f04f 0200 	mov.w	r2, #0
 800230e:	4b75      	ldr	r3, [pc, #468]	; (80024e4 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8002310:	f7fe fab8 	bl	8000884 <__aeabi_ddiv>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
			+ (delta_E2_abs * M2_visme_pitch * 1.0)
 8002318:	4620      	mov	r0, r4
 800231a:	4629      	mov	r1, r5
 800231c:	f7fd ffd2 	bl	80002c4 <__adddf3>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4610      	mov	r0, r2
 8002326:	4619      	mov	r1, r3
 8002328:	f7fe fbb4 	bl	8000a94 <__aeabi_d2f>
 800232c:	4603      	mov	r3, r0
		M2_travel = M2_travel
 800232e:	4a74      	ldr	r2, [pc, #464]	; (8002500 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 8002330:	6013      	str	r3, [r2, #0]
		M1_travel = M1_travel
			+ delta_E1 * 1.0 / (1.0 * M1_PulsePerRev * M1_GearRatio);
 8002332:	4b74      	ldr	r3, [pc, #464]	; (8002504 <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f7fe f922 	bl	8000580 <__aeabi_f2d>
 800233c:	4604      	mov	r4, r0
 800233e:	460d      	mov	r5, r1
 8002340:	6978      	ldr	r0, [r7, #20]
 8002342:	f7fe f90b 	bl	800055c <__aeabi_i2d>
 8002346:	a35e      	add	r3, pc, #376	; (adr r3, 80024c0 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8002348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234c:	f7fe fa9a 	bl	8000884 <__aeabi_ddiv>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4620      	mov	r0, r4
 8002356:	4629      	mov	r1, r5
 8002358:	f7fd ffb4 	bl	80002c4 <__adddf3>
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	4610      	mov	r0, r2
 8002362:	4619      	mov	r1, r3
 8002364:	f7fe fb96 	bl	8000a94 <__aeabi_d2f>
 8002368:	4603      	mov	r3, r0
		M1_travel = M1_travel
 800236a:	4a66      	ldr	r2, [pc, #408]	; (8002504 <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 800236c:	6013      	str	r3, [r2, #0]

		M1_velo_filt = -0.222 * M1_velo_filt + 0.611 * M1_velo
 800236e:	4b66      	ldr	r3, [pc, #408]	; (8002508 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe f904 	bl	8000580 <__aeabi_f2d>
 8002378:	a353      	add	r3, pc, #332	; (adr r3, 80024c8 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 800237a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800237e:	f7fe f957 	bl	8000630 <__aeabi_dmul>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	4614      	mov	r4, r2
 8002388:	461d      	mov	r5, r3
 800238a:	4b55      	ldr	r3, [pc, #340]	; (80024e0 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7fe f8f6 	bl	8000580 <__aeabi_f2d>
 8002394:	a34e      	add	r3, pc, #312	; (adr r3, 80024d0 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8002396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239a:	f7fe f949 	bl	8000630 <__aeabi_dmul>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4620      	mov	r0, r4
 80023a4:	4629      	mov	r1, r5
 80023a6:	f7fd ff8d 	bl	80002c4 <__adddf3>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4614      	mov	r4, r2
 80023b0:	461d      	mov	r5, r3
			+ 0.611 * M1_preVelo;
 80023b2:	4b56      	ldr	r3, [pc, #344]	; (800250c <HAL_TIM_PeriodElapsedCallback+0x3e4>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe f8e2 	bl	8000580 <__aeabi_f2d>
 80023bc:	a344      	add	r3, pc, #272	; (adr r3, 80024d0 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 80023be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c2:	f7fe f935 	bl	8000630 <__aeabi_dmul>
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	4620      	mov	r0, r4
 80023cc:	4629      	mov	r1, r5
 80023ce:	f7fd ff79 	bl	80002c4 <__adddf3>
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	4610      	mov	r0, r2
 80023d8:	4619      	mov	r1, r3
 80023da:	f7fe fb5b 	bl	8000a94 <__aeabi_d2f>
 80023de:	4603      	mov	r3, r0
		M1_velo_filt = -0.222 * M1_velo_filt + 0.611 * M1_velo
 80023e0:	4a49      	ldr	r2, [pc, #292]	; (8002508 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 80023e2:	6013      	str	r3, [r2, #0]
		M1_preVelo = M1_velo;
 80023e4:	4b3e      	ldr	r3, [pc, #248]	; (80024e0 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a48      	ldr	r2, [pc, #288]	; (800250c <HAL_TIM_PeriodElapsedCallback+0x3e4>)
 80023ea:	6013      	str	r3, [r2, #0]

		M1_velo_e = M1_vref - M1_velo_filt;
 80023ec:	4b48      	ldr	r3, [pc, #288]	; (8002510 <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a45      	ldr	r2, [pc, #276]	; (8002508 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 80023f2:	6812      	ldr	r2, [r2, #0]
 80023f4:	4611      	mov	r1, r2
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fe fba0 	bl	8000b3c <__aeabi_fsub>
 80023fc:	4603      	mov	r3, r0
 80023fe:	461a      	mov	r2, r3
 8002400:	4b44      	ldr	r3, [pc, #272]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 8002402:	601a      	str	r2, [r3, #0]
		M1_velo_eint = M1_velo_eint + M1_velo_e * deltaT / 1000.0;
 8002404:	4b44      	ldr	r3, [pc, #272]	; (8002518 <HAL_TIM_PeriodElapsedCallback+0x3f0>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7fe f8b9 	bl	8000580 <__aeabi_f2d>
 800240e:	4604      	mov	r4, r0
 8002410:	460d      	mov	r5, r1
 8002412:	4b31      	ldr	r3, [pc, #196]	; (80024d8 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f7fe fc46 	bl	8000ca8 <__aeabi_i2f>
 800241c:	4602      	mov	r2, r0
 800241e:	4b3d      	ldr	r3, [pc, #244]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4619      	mov	r1, r3
 8002424:	4610      	mov	r0, r2
 8002426:	f7fd fe93 	bl	8000150 <__aeabi_fmul>
 800242a:	4603      	mov	r3, r0
 800242c:	4618      	mov	r0, r3
 800242e:	f7fe f8a7 	bl	8000580 <__aeabi_f2d>
 8002432:	f04f 0200 	mov.w	r2, #0
 8002436:	4b39      	ldr	r3, [pc, #228]	; (800251c <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 8002438:	f7fe fa24 	bl	8000884 <__aeabi_ddiv>
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	4620      	mov	r0, r4
 8002442:	4629      	mov	r1, r5
 8002444:	f7fd ff3e 	bl	80002c4 <__adddf3>
 8002448:	4602      	mov	r2, r0
 800244a:	460b      	mov	r3, r1
 800244c:	4610      	mov	r0, r2
 800244e:	4619      	mov	r1, r3
 8002450:	f7fe fb20 	bl	8000a94 <__aeabi_d2f>
 8002454:	4603      	mov	r3, r0
 8002456:	4a30      	ldr	r2, [pc, #192]	; (8002518 <HAL_TIM_PeriodElapsedCallback+0x3f0>)
 8002458:	6013      	str	r3, [r2, #0]
		M1_u = M1_Kp * M1_velo_e + M1_Ki * M1_velo_eint;
 800245a:	4b31      	ldr	r3, [pc, #196]	; (8002520 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a2d      	ldr	r2, [pc, #180]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 8002460:	6812      	ldr	r2, [r2, #0]
 8002462:	4611      	mov	r1, r2
 8002464:	4618      	mov	r0, r3
 8002466:	f7fd fe73 	bl	8000150 <__aeabi_fmul>
 800246a:	4603      	mov	r3, r0
 800246c:	461c      	mov	r4, r3
 800246e:	4b2d      	ldr	r3, [pc, #180]	; (8002524 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a29      	ldr	r2, [pc, #164]	; (8002518 <HAL_TIM_PeriodElapsedCallback+0x3f0>)
 8002474:	6812      	ldr	r2, [r2, #0]
 8002476:	4611      	mov	r1, r2
 8002478:	4618      	mov	r0, r3
 800247a:	f7fd fe69 	bl	8000150 <__aeabi_fmul>
 800247e:	4603      	mov	r3, r0
 8002480:	4619      	mov	r1, r3
 8002482:	4620      	mov	r0, r4
 8002484:	f7fe fb5c 	bl	8000b40 <__addsf3>
 8002488:	4603      	mov	r3, r0
 800248a:	461a      	mov	r2, r3
 800248c:	4b26      	ldr	r3, [pc, #152]	; (8002528 <HAL_TIM_PeriodElapsedCallback+0x400>)
 800248e:	601a      	str	r2, [r3, #0]
		M1_velo_preE = M1_velo_e;
 8002490:	4b20      	ldr	r3, [pc, #128]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a25      	ldr	r2, [pc, #148]	; (800252c <HAL_TIM_PeriodElapsedCallback+0x404>)
 8002496:	6013      	str	r3, [r2, #0]
		M1_pwm = fabsf(M1_u);
 8002498:	4b23      	ldr	r3, [pc, #140]	; (8002528 <HAL_TIM_PeriodElapsedCallback+0x400>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024a0:	4a23      	ldr	r2, [pc, #140]	; (8002530 <HAL_TIM_PeriodElapsedCallback+0x408>)
 80024a2:	6013      	str	r3, [r2, #0]
		if (M1_pwm > 1000.0)
 80024a4:	4b22      	ldr	r3, [pc, #136]	; (8002530 <HAL_TIM_PeriodElapsedCallback+0x408>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4922      	ldr	r1, [pc, #136]	; (8002534 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fe fcbc 	bl	8000e28 <__aeabi_fcmpgt>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d040      	beq.n	8002538 <HAL_TIM_PeriodElapsedCallback+0x410>
		  M1_pwm = 1000.0;
 80024b6:	4b1e      	ldr	r3, [pc, #120]	; (8002530 <HAL_TIM_PeriodElapsedCallback+0x408>)
 80024b8:	4a1e      	ldr	r2, [pc, #120]	; (8002534 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	e04a      	b.n	8002554 <HAL_TIM_PeriodElapsedCallback+0x42c>
 80024be:	bf00      	nop
 80024c0:	00000000 	.word	0x00000000
 80024c4:	40a77000 	.word	0x40a77000
 80024c8:	f9db22d1 	.word	0xf9db22d1
 80024cc:	bfcc6a7e 	.word	0xbfcc6a7e
 80024d0:	df3b645a 	.word	0xdf3b645a
 80024d4:	3fe38d4f 	.word	0x3fe38d4f
 80024d8:	20000010 	.word	0x20000010
 80024dc:	404e0000 	.word	0x404e0000
 80024e0:	20000218 	.word	0x20000218
 80024e4:	409e0000 	.word	0x409e0000
 80024e8:	2000021c 	.word	0x2000021c
 80024ec:	20000230 	.word	0x20000230
 80024f0:	20000220 	.word	0x20000220
 80024f4:	20000228 	.word	0x20000228
 80024f8:	20000224 	.word	0x20000224
 80024fc:	2000022c 	.word	0x2000022c
 8002500:	20000234 	.word	0x20000234
 8002504:	20000238 	.word	0x20000238
 8002508:	20000254 	.word	0x20000254
 800250c:	20000258 	.word	0x20000258
 8002510:	2000024c 	.word	0x2000024c
 8002514:	20000268 	.word	0x20000268
 8002518:	2000025c 	.word	0x2000025c
 800251c:	408f4000 	.word	0x408f4000
 8002520:	20000008 	.word	0x20000008
 8002524:	2000000c 	.word	0x2000000c
 8002528:	20000264 	.word	0x20000264
 800252c:	2000026c 	.word	0x2000026c
 8002530:	20000284 	.word	0x20000284
 8002534:	447a0000 	.word	0x447a0000
		else if (M1_pwm < 0)
 8002538:	4b1d      	ldr	r3, [pc, #116]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x488>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f04f 0100 	mov.w	r1, #0
 8002540:	4618      	mov	r0, r3
 8002542:	f7fe fc53 	bl	8000dec <__aeabi_fcmplt>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <HAL_TIM_PeriodElapsedCallback+0x42c>
		  M1_pwm = 0;
 800254c:	4b18      	ldr	r3, [pc, #96]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x488>)
 800254e:	f04f 0200 	mov.w	r2, #0
 8002552:	601a      	str	r2, [r3, #0]

		if (M1_u < 0)
 8002554:	4b17      	ldr	r3, [pc, #92]	; (80025b4 <HAL_TIM_PeriodElapsedCallback+0x48c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f04f 0100 	mov.w	r1, #0
 800255c:	4618      	mov	r0, r3
 800255e:	f7fe fc45 	bl	8000dec <__aeabi_fcmplt>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <HAL_TIM_PeriodElapsedCallback+0x448>
		  M1_dir = 1;
 8002568:	4b13      	ldr	r3, [pc, #76]	; (80025b8 <HAL_TIM_PeriodElapsedCallback+0x490>)
 800256a:	2201      	movs	r2, #1
 800256c:	701a      	strb	r2, [r3, #0]
 800256e:	e002      	b.n	8002576 <HAL_TIM_PeriodElapsedCallback+0x44e>
		else
		  M1_dir = -1;
 8002570:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <HAL_TIM_PeriodElapsedCallback+0x490>)
 8002572:	22ff      	movs	r2, #255	; 0xff
 8002574:	701a      	strb	r2, [r3, #0]

		if (FLAG_runMotor) {
 8002576:	4b11      	ldr	r3, [pc, #68]	; (80025bc <HAL_TIM_PeriodElapsedCallback+0x494>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00f      	beq.n	800259e <HAL_TIM_PeriodElapsedCallback+0x476>
		  set_motor(1, M1_dir, M1_pwm);
 800257e:	4b0e      	ldr	r3, [pc, #56]	; (80025b8 <HAL_TIM_PeriodElapsedCallback+0x490>)
 8002580:	f993 4000 	ldrsb.w	r4, [r3]
 8002584:	4b0a      	ldr	r3, [pc, #40]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f7fe fc57 	bl	8000e3c <__aeabi_f2uiz>
 800258e:	4603      	mov	r3, r0
 8002590:	b29b      	uxth	r3, r3
 8002592:	461a      	mov	r2, r3
 8002594:	4621      	mov	r1, r4
 8002596:	2001      	movs	r0, #1
 8002598:	f7ff f9f8 	bl	800198c <set_motor>
		} else
		  set_motor(1, 0, 0);
	  }
	}
  }
}
 800259c:	e004      	b.n	80025a8 <HAL_TIM_PeriodElapsedCallback+0x480>
		  set_motor(1, 0, 0);
 800259e:	2200      	movs	r2, #0
 80025a0:	2100      	movs	r1, #0
 80025a2:	2001      	movs	r0, #1
 80025a4:	f7ff f9f2 	bl	800198c <set_motor>
}
 80025a8:	bf00      	nop
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bdb0      	pop	{r4, r5, r7, pc}
 80025b0:	20000284 	.word	0x20000284
 80025b4:	20000264 	.word	0x20000264
 80025b8:	20000260 	.word	0x20000260
 80025bc:	20000248 	.word	0x20000248

080025c0 <run_motor>:

void run_motor() {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0

  if (M1_travel >= M1_toRotate) {
 80025c4:	4b3b      	ldr	r3, [pc, #236]	; (80026b4 <run_motor+0xf4>)
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7fe fb6d 	bl	8000ca8 <__aeabi_i2f>
 80025ce:	4602      	mov	r2, r0
 80025d0:	4b39      	ldr	r3, [pc, #228]	; (80026b8 <run_motor+0xf8>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4619      	mov	r1, r3
 80025d6:	4610      	mov	r0, r2
 80025d8:	f7fe fc12 	bl	8000e00 <__aeabi_fcmple>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d019      	beq.n	8002616 <run_motor+0x56>
	set_motor(2, 0, 0);
 80025e2:	2200      	movs	r2, #0
 80025e4:	2100      	movs	r1, #0
 80025e6:	2002      	movs	r0, #2
 80025e8:	f7ff f9d0 	bl	800198c <set_motor>
	set_motor_velo(1, 0);
 80025ec:	2100      	movs	r1, #0
 80025ee:	2001      	movs	r0, #1
 80025f0:	f7ff f9a4 	bl	800193c <set_motor_velo>
	set_motor(1, 0, 0);
 80025f4:	2200      	movs	r2, #0
 80025f6:	2100      	movs	r1, #0
 80025f8:	2001      	movs	r0, #1
 80025fa:	f7ff f9c7 	bl	800198c <set_motor>
	flash_LED(LED_G, 300);
 80025fe:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002602:	2001      	movs	r0, #1
 8002604:	f7ff fccc 	bl	8001fa0 <flash_LED>
	FLAG_completeRun = true;
 8002608:	4b2c      	ldr	r3, [pc, #176]	; (80026bc <run_motor+0xfc>)
 800260a:	2201      	movs	r2, #1
 800260c:	701a      	strb	r2, [r3, #0]
	FLAG_runMotor = false;
 800260e:	4b2c      	ldr	r3, [pc, #176]	; (80026c0 <run_motor+0x100>)
 8002610:	2200      	movs	r2, #0
 8002612:	701a      	strb	r2, [r3, #0]
	return;
 8002614:	e04d      	b.n	80026b2 <run_motor+0xf2>
  } else if (M2_dir == 1) {
 8002616:	4b2b      	ldr	r3, [pc, #172]	; (80026c4 <run_motor+0x104>)
 8002618:	f993 3000 	ldrsb.w	r3, [r3]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d109      	bne.n	8002634 <run_motor+0x74>
	set_motor(2, M2_dir, 1000);
 8002620:	4b28      	ldr	r3, [pc, #160]	; (80026c4 <run_motor+0x104>)
 8002622:	f993 3000 	ldrsb.w	r3, [r3]
 8002626:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800262a:	4619      	mov	r1, r3
 800262c:	2002      	movs	r0, #2
 800262e:	f7ff f9ad 	bl	800198c <set_motor>
 8002632:	e00e      	b.n	8002652 <run_motor+0x92>
  } else if (M2_dir == -1) {
 8002634:	4b23      	ldr	r3, [pc, #140]	; (80026c4 <run_motor+0x104>)
 8002636:	f993 3000 	ldrsb.w	r3, [r3]
 800263a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263e:	d108      	bne.n	8002652 <run_motor+0x92>
	set_motor(2, M2_dir, 1000);
 8002640:	4b20      	ldr	r3, [pc, #128]	; (80026c4 <run_motor+0x104>)
 8002642:	f993 3000 	ldrsb.w	r3, [r3]
 8002646:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800264a:	4619      	mov	r1, r3
 800264c:	2002      	movs	r0, #2
 800264e:	f7ff f99d 	bl	800198c <set_motor>
  }
  set_motor_velo(1, 40);
 8002652:	2128      	movs	r1, #40	; 0x28
 8002654:	2001      	movs	r0, #1
 8002656:	f7ff f971 	bl	800193c <set_motor_velo>
  if (M2_dir == 1 && M2_x >= travelLength) {
 800265a:	4b1a      	ldr	r3, [pc, #104]	; (80026c4 <run_motor+0x104>)
 800265c:	f993 3000 	ldrsb.w	r3, [r3]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d10c      	bne.n	800267e <run_motor+0xbe>
 8002664:	4b18      	ldr	r3, [pc, #96]	; (80026c8 <run_motor+0x108>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4918      	ldr	r1, [pc, #96]	; (80026cc <run_motor+0x10c>)
 800266a:	4618      	mov	r0, r3
 800266c:	f7fe fbd2 	bl	8000e14 <__aeabi_fcmpge>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <run_motor+0xbe>
	M2_dir = -1;
 8002676:	4b13      	ldr	r3, [pc, #76]	; (80026c4 <run_motor+0x104>)
 8002678:	22ff      	movs	r2, #255	; 0xff
 800267a:	701a      	strb	r2, [r3, #0]
 800267c:	e019      	b.n	80026b2 <run_motor+0xf2>
  } else if (M2_dir == -1 && M2_x <= (M2_travel_StartPoint + 5)) {
 800267e:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <run_motor+0x104>)
 8002680:	f993 3000 	ldrsb.w	r3, [r3]
 8002684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002688:	d113      	bne.n	80026b2 <run_motor+0xf2>
 800268a:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <run_motor+0x110>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4911      	ldr	r1, [pc, #68]	; (80026d4 <run_motor+0x114>)
 8002690:	4618      	mov	r0, r3
 8002692:	f7fe fa55 	bl	8000b40 <__addsf3>
 8002696:	4603      	mov	r3, r0
 8002698:	461a      	mov	r2, r3
 800269a:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <run_motor+0x108>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4619      	mov	r1, r3
 80026a0:	4610      	mov	r0, r2
 80026a2:	f7fe fbb7 	bl	8000e14 <__aeabi_fcmpge>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d002      	beq.n	80026b2 <run_motor+0xf2>
	M2_dir = 1;
 80026ac:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <run_motor+0x104>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	701a      	strb	r2, [r3, #0]
  }
}
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	20000270 	.word	0x20000270
 80026b8:	20000238 	.word	0x20000238
 80026bc:	20000272 	.word	0x20000272
 80026c0:	20000248 	.word	0x20000248
 80026c4:	20000210 	.word	0x20000210
 80026c8:	20000230 	.word	0x20000230
 80026cc:	437a0000 	.word	0x437a0000
 80026d0:	20000244 	.word	0x20000244
 80026d4:	40a00000 	.word	0x40a00000

080026d8 <apply_state>:

bool FLAG_notHome = false;
void apply_state() {
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  check_button();
 80026dc:	f7ff fc12 	bl	8001f04 <check_button>
  if (IDLE_MODE) {
 80026e0:	4b8b      	ldr	r3, [pc, #556]	; (8002910 <apply_state+0x238>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d024      	beq.n	8002732 <apply_state+0x5a>
	if (BTN_Stop_state == BTN_RESET) {
 80026e8:	4b8a      	ldr	r3, [pc, #552]	; (8002914 <apply_state+0x23c>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d107      	bne.n	8002700 <apply_state+0x28>
	  FLAG_returnHome = false;
 80026f0:	4b89      	ldr	r3, [pc, #548]	; (8002918 <apply_state+0x240>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	701a      	strb	r2, [r3, #0]
	  set_motor(2, 0, 0);
 80026f6:	2200      	movs	r2, #0
 80026f8:	2100      	movs	r1, #0
 80026fa:	2002      	movs	r0, #2
 80026fc:	f7ff f946 	bl	800198c <set_motor>
	}
	if (BTN_Start_state == BTN_RESET && BEGIN_REACH == false) {
 8002700:	4b86      	ldr	r3, [pc, #536]	; (800291c <apply_state+0x244>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10c      	bne.n	8002722 <apply_state+0x4a>
 8002708:	4b85      	ldr	r3, [pc, #532]	; (8002920 <apply_state+0x248>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	f083 0301 	eor.w	r3, r3, #1
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d005      	beq.n	8002722 <apply_state+0x4a>
	  FLAG_returnHome = true;
 8002716:	4b80      	ldr	r3, [pc, #512]	; (8002918 <apply_state+0x240>)
 8002718:	2201      	movs	r2, #1
 800271a:	701a      	strb	r2, [r3, #0]
	  FLAG_returnFast = true;
 800271c:	4b81      	ldr	r3, [pc, #516]	; (8002924 <apply_state+0x24c>)
 800271e:	2201      	movs	r2, #1
 8002720:	701a      	strb	r2, [r3, #0]
	}

	if (FLAG_returnHome) {
 8002722:	4b7d      	ldr	r3, [pc, #500]	; (8002918 <apply_state+0x240>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 80f1 	beq.w	800290e <apply_state+0x236>
	  return_home();
 800272c:	f7ff fc74 	bl	8002018 <return_home>
 8002730:	e0ed      	b.n	800290e <apply_state+0x236>
	}
  } else if (RUN_MODE) {
 8002732:	4b7d      	ldr	r3, [pc, #500]	; (8002928 <apply_state+0x250>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 80e9 	beq.w	800290e <apply_state+0x236>
	if (preLevel != level) {
 800273c:	4b7b      	ldr	r3, [pc, #492]	; (800292c <apply_state+0x254>)
 800273e:	781a      	ldrb	r2, [r3, #0]
 8002740:	4b7b      	ldr	r3, [pc, #492]	; (8002930 <apply_state+0x258>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d001      	beq.n	800274c <apply_state+0x74>
	  active_run();
 8002748:	f7ff fbb0 	bl	8001eac <active_run>
	}
	FLAG_returnHome = false;
 800274c:	4b72      	ldr	r3, [pc, #456]	; (8002918 <apply_state+0x240>)
 800274e:	2200      	movs	r2, #0
 8002750:	701a      	strb	r2, [r3, #0]

	if (level != 0 && FLAG_runMotor == true) {
 8002752:	4b77      	ldr	r3, [pc, #476]	; (8002930 <apply_state+0x258>)
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00a      	beq.n	8002770 <apply_state+0x98>
 800275a:	4b76      	ldr	r3, [pc, #472]	; (8002934 <apply_state+0x25c>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d006      	beq.n	8002770 <apply_state+0x98>
	  run_motor();
 8002762:	f7ff ff2d 	bl	80025c0 <run_motor>
	  lightLED(0, 1);
 8002766:	2101      	movs	r1, #1
 8002768:	2000      	movs	r0, #0
 800276a:	f7ff f9e3 	bl	8001b34 <lightLED>
 800276e:	e00e      	b.n	800278e <apply_state+0xb6>
	} else if (level != 0 && !FLAG_runMotor)
 8002770:	4b6f      	ldr	r3, [pc, #444]	; (8002930 <apply_state+0x258>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00a      	beq.n	800278e <apply_state+0xb6>
 8002778:	4b6e      	ldr	r3, [pc, #440]	; (8002934 <apply_state+0x25c>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	f083 0301 	eor.w	r3, r3, #1
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <apply_state+0xb6>
	  stop_motor(1, 1);
 8002786:	2101      	movs	r1, #1
 8002788:	2001      	movs	r0, #1
 800278a:	f7ff fb53 	bl	8001e34 <stop_motor>
	if (level != 0 && BTN_Stop_state == BTN_RESET) {
 800278e:	4b68      	ldr	r3, [pc, #416]	; (8002930 <apply_state+0x258>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00d      	beq.n	80027b2 <apply_state+0xda>
 8002796:	4b5f      	ldr	r3, [pc, #380]	; (8002914 <apply_state+0x23c>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d109      	bne.n	80027b2 <apply_state+0xda>
	  FLAG_runMotor = false;
 800279e:	4b65      	ldr	r3, [pc, #404]	; (8002934 <apply_state+0x25c>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	701a      	strb	r2, [r3, #0]
	  FLAG_completeRun = false;
 80027a4:	4b64      	ldr	r3, [pc, #400]	; (8002938 <apply_state+0x260>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	701a      	strb	r2, [r3, #0]
	  stop_motor(1, 1);
 80027aa:	2101      	movs	r1, #1
 80027ac:	2001      	movs	r0, #1
 80027ae:	f7ff fb41 	bl	8001e34 <stop_motor>
	}

	if (FLAG_completeRun == true) {
 80027b2:	4b61      	ldr	r3, [pc, #388]	; (8002938 <apply_state+0x260>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d005      	beq.n	80027c6 <apply_state+0xee>
	  flash_LED(LED_G, 800);
 80027ba:	f44f 7148 	mov.w	r1, #800	; 0x320
 80027be:	2001      	movs	r0, #1
 80027c0:	f7ff fbee 	bl	8001fa0 <flash_LED>
	  return;
 80027c4:	e0a3      	b.n	800290e <apply_state+0x236>
	}
	if (!FLAG_notHome) {
 80027c6:	4b5d      	ldr	r3, [pc, #372]	; (800293c <apply_state+0x264>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	f083 0301 	eor.w	r3, r3, #1
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d038      	beq.n	8002846 <apply_state+0x16e>
	  if (level == 1) {
 80027d4:	4b56      	ldr	r3, [pc, #344]	; (8002930 <apply_state+0x258>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d106      	bne.n	80027ea <apply_state+0x112>
		distanceToGo = 2000;
 80027dc:	4b58      	ldr	r3, [pc, #352]	; (8002940 <apply_state+0x268>)
 80027de:	4a59      	ldr	r2, [pc, #356]	; (8002944 <apply_state+0x26c>)
 80027e0:	601a      	str	r2, [r3, #0]
		M1_toRotate = 42;
 80027e2:	4b59      	ldr	r3, [pc, #356]	; (8002948 <apply_state+0x270>)
 80027e4:	222a      	movs	r2, #42	; 0x2a
 80027e6:	801a      	strh	r2, [r3, #0]
 80027e8:	e009      	b.n	80027fe <apply_state+0x126>
	  } else if (level == 2) {
 80027ea:	4b51      	ldr	r3, [pc, #324]	; (8002930 <apply_state+0x258>)
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d105      	bne.n	80027fe <apply_state+0x126>
		distanceToGo = 4000;
 80027f2:	4b53      	ldr	r3, [pc, #332]	; (8002940 <apply_state+0x268>)
 80027f4:	4a55      	ldr	r2, [pc, #340]	; (800294c <apply_state+0x274>)
 80027f6:	601a      	str	r2, [r3, #0]
		M1_toRotate = 84;
 80027f8:	4b53      	ldr	r3, [pc, #332]	; (8002948 <apply_state+0x270>)
 80027fa:	2254      	movs	r2, #84	; 0x54
 80027fc:	801a      	strh	r2, [r3, #0]
	  }
	  if (BTN_Stop_state == BTN_RESET) {
 80027fe:	4b45      	ldr	r3, [pc, #276]	; (8002914 <apply_state+0x23c>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d103      	bne.n	800280e <apply_state+0x136>
		FLAG_runMotor = false;
 8002806:	4b4b      	ldr	r3, [pc, #300]	; (8002934 <apply_state+0x25c>)
 8002808:	2200      	movs	r2, #0
 800280a:	701a      	strb	r2, [r3, #0]
 800280c:	e01b      	b.n	8002846 <apply_state+0x16e>
//		stop_motor(1, 1);
	  } else if (BTN_Start_state == BTN_RESET && !FLAG_runMotor) {
 800280e:	4b43      	ldr	r3, [pc, #268]	; (800291c <apply_state+0x244>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d117      	bne.n	8002846 <apply_state+0x16e>
 8002816:	4b47      	ldr	r3, [pc, #284]	; (8002934 <apply_state+0x25c>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	f083 0301 	eor.w	r3, r3, #1
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b00      	cmp	r3, #0
 8002822:	d010      	beq.n	8002846 <apply_state+0x16e>
		FLAG_runMotor = true;
 8002824:	4b43      	ldr	r3, [pc, #268]	; (8002934 <apply_state+0x25c>)
 8002826:	2201      	movs	r2, #1
 8002828:	701a      	strb	r2, [r3, #0]
		M2_travel_StartPoint = 40;
 800282a:	4b49      	ldr	r3, [pc, #292]	; (8002950 <apply_state+0x278>)
 800282c:	4a49      	ldr	r2, [pc, #292]	; (8002954 <apply_state+0x27c>)
 800282e:	601a      	str	r2, [r3, #0]
		M2_dir = 1;
 8002830:	4b49      	ldr	r3, [pc, #292]	; (8002958 <apply_state+0x280>)
 8002832:	2201      	movs	r2, #1
 8002834:	701a      	strb	r2, [r3, #0]
		M1_travel = 0;
 8002836:	4b49      	ldr	r3, [pc, #292]	; (800295c <apply_state+0x284>)
 8002838:	f04f 0200 	mov.w	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
		M1_velo_eint = 0;
 800283e:	4b48      	ldr	r3, [pc, #288]	; (8002960 <apply_state+0x288>)
 8002840:	f04f 0200 	mov.w	r2, #0
 8002844:	601a      	str	r2, [r3, #0]
	  }
	}

	switch (level) {
 8002846:	4b3a      	ldr	r3, [pc, #232]	; (8002930 <apply_state+0x258>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d005      	beq.n	800285a <apply_state+0x182>
 800284e:	2b00      	cmp	r3, #0
 8002850:	db5d      	blt.n	800290e <apply_state+0x236>
 8002852:	3b01      	subs	r3, #1
 8002854:	2b01      	cmp	r3, #1
 8002856:	d85a      	bhi.n	800290e <apply_state+0x236>
 8002858:	e02f      	b.n	80028ba <apply_state+0x1e2>
	case 0:
	  lightLED(0, 1);
 800285a:	2101      	movs	r1, #1
 800285c:	2000      	movs	r0, #0
 800285e:	f7ff f969 	bl	8001b34 <lightLED>
	  if (BTN_Start_state == BTN_RESET && END_REACH == false) {
 8002862:	4b2e      	ldr	r3, [pc, #184]	; (800291c <apply_state+0x244>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10d      	bne.n	8002886 <apply_state+0x1ae>
 800286a:	4b3e      	ldr	r3, [pc, #248]	; (8002964 <apply_state+0x28c>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	f083 0301 	eor.w	r3, r3, #1
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	d006      	beq.n	8002886 <apply_state+0x1ae>
		set_motor(2, 1, 1000);
 8002878:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800287c:	2101      	movs	r1, #1
 800287e:	2002      	movs	r0, #2
 8002880:	f7ff f884 	bl	800198c <set_motor>
 8002884:	e018      	b.n	80028b8 <apply_state+0x1e0>
	  } else if (BTN_Stop_state == BTN_RESET && BEGIN_REACH == false) {
 8002886:	4b23      	ldr	r3, [pc, #140]	; (8002914 <apply_state+0x23c>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10e      	bne.n	80028ac <apply_state+0x1d4>
 800288e:	4b24      	ldr	r3, [pc, #144]	; (8002920 <apply_state+0x248>)
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	f083 0301 	eor.w	r3, r3, #1
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	d007      	beq.n	80028ac <apply_state+0x1d4>
		set_motor(2, -1, 1000);
 800289c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028a0:	f04f 31ff 	mov.w	r1, #4294967295
 80028a4:	2002      	movs	r0, #2
 80028a6:	f7ff f871 	bl	800198c <set_motor>
 80028aa:	e005      	b.n	80028b8 <apply_state+0x1e0>
	  } else {
		set_motor(2, 0, 0);
 80028ac:	2200      	movs	r2, #0
 80028ae:	2100      	movs	r1, #0
 80028b0:	2002      	movs	r0, #2
 80028b2:	f7ff f86b 	bl	800198c <set_motor>
	  }
	  return;
 80028b6:	e02a      	b.n	800290e <apply_state+0x236>
 80028b8:	e029      	b.n	800290e <apply_state+0x236>
	  break;
	case 1:
	case 2:
	  if (!BEGIN_REACH && !FLAG_runMotor) {
 80028ba:	4b19      	ldr	r3, [pc, #100]	; (8002920 <apply_state+0x248>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	f083 0301 	eor.w	r3, r3, #1
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00f      	beq.n	80028e8 <apply_state+0x210>
 80028c8:	4b1a      	ldr	r3, [pc, #104]	; (8002934 <apply_state+0x25c>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	f083 0301 	eor.w	r3, r3, #1
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d008      	beq.n	80028e8 <apply_state+0x210>
		flash_LED(LED_G, 500);
 80028d6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80028da:	2001      	movs	r0, #1
 80028dc:	f7ff fb60 	bl	8001fa0 <flash_LED>
		FLAG_notHome = true;
 80028e0:	4b16      	ldr	r3, [pc, #88]	; (800293c <apply_state+0x264>)
 80028e2:	2201      	movs	r2, #1
 80028e4:	701a      	strb	r2, [r3, #0]
		return;
 80028e6:	e012      	b.n	800290e <apply_state+0x236>
	  } else if (BEGIN_REACH && !FLAG_runMotor) {
 80028e8:	4b0d      	ldr	r3, [pc, #52]	; (8002920 <apply_state+0x248>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00d      	beq.n	800290c <apply_state+0x234>
 80028f0:	4b10      	ldr	r3, [pc, #64]	; (8002934 <apply_state+0x25c>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	f083 0301 	eor.w	r3, r3, #1
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d006      	beq.n	800290c <apply_state+0x234>
		FLAG_notHome = false;
 80028fe:	4b0f      	ldr	r3, [pc, #60]	; (800293c <apply_state+0x264>)
 8002900:	2200      	movs	r2, #0
 8002902:	701a      	strb	r2, [r3, #0]
		lightLED(0, 1);
 8002904:	2101      	movs	r1, #1
 8002906:	2000      	movs	r0, #0
 8002908:	f7ff f914 	bl	8001b34 <lightLED>
	  }
	  break;
 800290c:	bf00      	nop
	}
  }
}
 800290e:	bd80      	pop	{r7, pc}
 8002910:	20000206 	.word	0x20000206
 8002914:	20000005 	.word	0x20000005
 8002918:	20000208 	.word	0x20000208
 800291c:	20000004 	.word	0x20000004
 8002920:	2000019d 	.word	0x2000019d
 8002924:	2000023c 	.word	0x2000023c
 8002928:	20000205 	.word	0x20000205
 800292c:	20000273 	.word	0x20000273
 8002930:	20000207 	.word	0x20000207
 8002934:	20000248 	.word	0x20000248
 8002938:	20000272 	.word	0x20000272
 800293c:	20000288 	.word	0x20000288
 8002940:	2000020c 	.word	0x2000020c
 8002944:	44fa0000 	.word	0x44fa0000
 8002948:	20000270 	.word	0x20000270
 800294c:	457a0000 	.word	0x457a0000
 8002950:	20000244 	.word	0x20000244
 8002954:	42200000 	.word	0x42200000
 8002958:	20000210 	.word	0x20000210
 800295c:	20000238 	.word	0x20000238
 8002960:	2000025c 	.word	0x2000025c
 8002964:	2000019c 	.word	0x2000019c

08002968 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002968:	480c      	ldr	r0, [pc, #48]	; (800299c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800296a:	490d      	ldr	r1, [pc, #52]	; (80029a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800296c:	4a0d      	ldr	r2, [pc, #52]	; (80029a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800296e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002970:	e002      	b.n	8002978 <LoopCopyDataInit>

08002972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002976:	3304      	adds	r3, #4

08002978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800297a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800297c:	d3f9      	bcc.n	8002972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800297e:	4a0a      	ldr	r2, [pc, #40]	; (80029a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002980:	4c0a      	ldr	r4, [pc, #40]	; (80029ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8002982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002984:	e001      	b.n	800298a <LoopFillZerobss>

08002986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002988:	3204      	adds	r2, #4

0800298a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800298a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800298c:	d3fb      	bcc.n	8002986 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800298e:	f7fe ff9b 	bl	80018c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002992:	f002 fb37 	bl	8005004 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002996:	f7fe faef 	bl	8000f78 <main>
  bx lr
 800299a:	4770      	bx	lr
  ldr r0, =_sdata
 800299c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029a0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80029a4:	080050a4 	.word	0x080050a4
  ldr r2, =_sbss
 80029a8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80029ac:	20000298 	.word	0x20000298

080029b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029b0:	e7fe      	b.n	80029b0 <ADC1_2_IRQHandler>
	...

080029b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029b8:	4b08      	ldr	r3, [pc, #32]	; (80029dc <HAL_Init+0x28>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a07      	ldr	r2, [pc, #28]	; (80029dc <HAL_Init+0x28>)
 80029be:	f043 0310 	orr.w	r3, r3, #16
 80029c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029c4:	2003      	movs	r0, #3
 80029c6:	f000 f947 	bl	8002c58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029ca:	200f      	movs	r0, #15
 80029cc:	f000 f808 	bl	80029e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029d0:	f7fe fdb0 	bl	8001534 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40022000 	.word	0x40022000

080029e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029e8:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <HAL_InitTick+0x54>)
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	4b12      	ldr	r3, [pc, #72]	; (8002a38 <HAL_InitTick+0x58>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	4619      	mov	r1, r3
 80029f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80029fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 f96d 	bl	8002cde <HAL_SYSTICK_Config>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e00e      	b.n	8002a2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b0f      	cmp	r3, #15
 8002a12:	d80a      	bhi.n	8002a2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a14:	2200      	movs	r2, #0
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	f04f 30ff 	mov.w	r0, #4294967295
 8002a1c:	f000 f927 	bl	8002c6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a20:	4a06      	ldr	r2, [pc, #24]	; (8002a3c <HAL_InitTick+0x5c>)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
 8002a28:	e000      	b.n	8002a2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	20000000 	.word	0x20000000
 8002a38:	20000018 	.word	0x20000018
 8002a3c:	20000014 	.word	0x20000014

08002a40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a44:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <HAL_IncTick+0x1c>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	461a      	mov	r2, r3
 8002a4a:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <HAL_IncTick+0x20>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4413      	add	r3, r2
 8002a50:	4a03      	ldr	r2, [pc, #12]	; (8002a60 <HAL_IncTick+0x20>)
 8002a52:	6013      	str	r3, [r2, #0]
}
 8002a54:	bf00      	nop
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr
 8002a5c:	20000018 	.word	0x20000018
 8002a60:	20000294 	.word	0x20000294

08002a64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  return uwTick;
 8002a68:	4b02      	ldr	r3, [pc, #8]	; (8002a74 <HAL_GetTick+0x10>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr
 8002a74:	20000294 	.word	0x20000294

08002a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a88:	4b0c      	ldr	r3, [pc, #48]	; (8002abc <__NVIC_SetPriorityGrouping+0x44>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a94:	4013      	ands	r3, r2
 8002a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aaa:	4a04      	ldr	r2, [pc, #16]	; (8002abc <__NVIC_SetPriorityGrouping+0x44>)
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	60d3      	str	r3, [r2, #12]
}
 8002ab0:	bf00      	nop
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bc80      	pop	{r7}
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	e000ed00 	.word	0xe000ed00

08002ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ac4:	4b04      	ldr	r3, [pc, #16]	; (8002ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	0a1b      	lsrs	r3, r3, #8
 8002aca:	f003 0307 	and.w	r3, r3, #7
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	e000ed00 	.word	0xe000ed00

08002adc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	db0b      	blt.n	8002b06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aee:	79fb      	ldrb	r3, [r7, #7]
 8002af0:	f003 021f 	and.w	r2, r3, #31
 8002af4:	4906      	ldr	r1, [pc, #24]	; (8002b10 <__NVIC_EnableIRQ+0x34>)
 8002af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afa:	095b      	lsrs	r3, r3, #5
 8002afc:	2001      	movs	r0, #1
 8002afe:	fa00 f202 	lsl.w	r2, r0, r2
 8002b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr
 8002b10:	e000e100 	.word	0xe000e100

08002b14 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	db12      	blt.n	8002b4c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	f003 021f 	and.w	r2, r3, #31
 8002b2c:	490a      	ldr	r1, [pc, #40]	; (8002b58 <__NVIC_DisableIRQ+0x44>)
 8002b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b32:	095b      	lsrs	r3, r3, #5
 8002b34:	2001      	movs	r0, #1
 8002b36:	fa00 f202 	lsl.w	r2, r0, r2
 8002b3a:	3320      	adds	r3, #32
 8002b3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002b40:	f3bf 8f4f 	dsb	sy
}
 8002b44:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002b46:	f3bf 8f6f 	isb	sy
}
 8002b4a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	e000e100 	.word	0xe000e100

08002b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4603      	mov	r3, r0
 8002b64:	6039      	str	r1, [r7, #0]
 8002b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	db0a      	blt.n	8002b86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	490c      	ldr	r1, [pc, #48]	; (8002ba8 <__NVIC_SetPriority+0x4c>)
 8002b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7a:	0112      	lsls	r2, r2, #4
 8002b7c:	b2d2      	uxtb	r2, r2
 8002b7e:	440b      	add	r3, r1
 8002b80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b84:	e00a      	b.n	8002b9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	4908      	ldr	r1, [pc, #32]	; (8002bac <__NVIC_SetPriority+0x50>)
 8002b8c:	79fb      	ldrb	r3, [r7, #7]
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	3b04      	subs	r3, #4
 8002b94:	0112      	lsls	r2, r2, #4
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	440b      	add	r3, r1
 8002b9a:	761a      	strb	r2, [r3, #24]
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bc80      	pop	{r7}
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	e000e100 	.word	0xe000e100
 8002bac:	e000ed00 	.word	0xe000ed00

08002bb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b089      	sub	sp, #36	; 0x24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f003 0307 	and.w	r3, r3, #7
 8002bc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	f1c3 0307 	rsb	r3, r3, #7
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	bf28      	it	cs
 8002bce:	2304      	movcs	r3, #4
 8002bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	2b06      	cmp	r3, #6
 8002bd8:	d902      	bls.n	8002be0 <NVIC_EncodePriority+0x30>
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	3b03      	subs	r3, #3
 8002bde:	e000      	b.n	8002be2 <NVIC_EncodePriority+0x32>
 8002be0:	2300      	movs	r3, #0
 8002be2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be4:	f04f 32ff 	mov.w	r2, #4294967295
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	43da      	mvns	r2, r3
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	401a      	ands	r2, r3
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002c02:	43d9      	mvns	r1, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c08:	4313      	orrs	r3, r2
         );
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3724      	adds	r7, #36	; 0x24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr

08002c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c24:	d301      	bcc.n	8002c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c26:	2301      	movs	r3, #1
 8002c28:	e00f      	b.n	8002c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c2a:	4a0a      	ldr	r2, [pc, #40]	; (8002c54 <SysTick_Config+0x40>)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c32:	210f      	movs	r1, #15
 8002c34:	f04f 30ff 	mov.w	r0, #4294967295
 8002c38:	f7ff ff90 	bl	8002b5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c3c:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <SysTick_Config+0x40>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c42:	4b04      	ldr	r3, [pc, #16]	; (8002c54 <SysTick_Config+0x40>)
 8002c44:	2207      	movs	r2, #7
 8002c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	e000e010 	.word	0xe000e010

08002c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f7ff ff09 	bl	8002a78 <__NVIC_SetPriorityGrouping>
}
 8002c66:	bf00      	nop
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b086      	sub	sp, #24
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	4603      	mov	r3, r0
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	607a      	str	r2, [r7, #4]
 8002c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c80:	f7ff ff1e 	bl	8002ac0 <__NVIC_GetPriorityGrouping>
 8002c84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	68b9      	ldr	r1, [r7, #8]
 8002c8a:	6978      	ldr	r0, [r7, #20]
 8002c8c:	f7ff ff90 	bl	8002bb0 <NVIC_EncodePriority>
 8002c90:	4602      	mov	r2, r0
 8002c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c96:	4611      	mov	r1, r2
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff ff5f 	bl	8002b5c <__NVIC_SetPriority>
}
 8002c9e:	bf00      	nop
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b082      	sub	sp, #8
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	4603      	mov	r3, r0
 8002cae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff ff11 	bl	8002adc <__NVIC_EnableIRQ>
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b082      	sub	sp, #8
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	4603      	mov	r3, r0
 8002cca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff ff1f 	bl	8002b14 <__NVIC_DisableIRQ>
}
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b082      	sub	sp, #8
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7ff ff94 	bl	8002c14 <SysTick_Config>
 8002cec:	4603      	mov	r3, r0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b085      	sub	sp, #20
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d008      	beq.n	8002d1e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2204      	movs	r2, #4
 8002d10:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e020      	b.n	8002d60 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 020e 	bic.w	r2, r2, #14
 8002d2c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0201 	bic.w	r2, r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d46:	2101      	movs	r1, #1
 8002d48:	fa01 f202 	lsl.w	r2, r1, r2
 8002d4c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr
	...

08002d6c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d74:	2300      	movs	r3, #0
 8002d76:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d005      	beq.n	8002d8e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2204      	movs	r2, #4
 8002d86:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	73fb      	strb	r3, [r7, #15]
 8002d8c:	e051      	b.n	8002e32 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 020e 	bic.w	r2, r2, #14
 8002d9c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 0201 	bic.w	r2, r2, #1
 8002dac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a22      	ldr	r2, [pc, #136]	; (8002e3c <HAL_DMA_Abort_IT+0xd0>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d029      	beq.n	8002e0c <HAL_DMA_Abort_IT+0xa0>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a20      	ldr	r2, [pc, #128]	; (8002e40 <HAL_DMA_Abort_IT+0xd4>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d022      	beq.n	8002e08 <HAL_DMA_Abort_IT+0x9c>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a1f      	ldr	r2, [pc, #124]	; (8002e44 <HAL_DMA_Abort_IT+0xd8>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d01a      	beq.n	8002e02 <HAL_DMA_Abort_IT+0x96>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a1d      	ldr	r2, [pc, #116]	; (8002e48 <HAL_DMA_Abort_IT+0xdc>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d012      	beq.n	8002dfc <HAL_DMA_Abort_IT+0x90>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a1c      	ldr	r2, [pc, #112]	; (8002e4c <HAL_DMA_Abort_IT+0xe0>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d00a      	beq.n	8002df6 <HAL_DMA_Abort_IT+0x8a>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a1a      	ldr	r2, [pc, #104]	; (8002e50 <HAL_DMA_Abort_IT+0xe4>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d102      	bne.n	8002df0 <HAL_DMA_Abort_IT+0x84>
 8002dea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002dee:	e00e      	b.n	8002e0e <HAL_DMA_Abort_IT+0xa2>
 8002df0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002df4:	e00b      	b.n	8002e0e <HAL_DMA_Abort_IT+0xa2>
 8002df6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dfa:	e008      	b.n	8002e0e <HAL_DMA_Abort_IT+0xa2>
 8002dfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e00:	e005      	b.n	8002e0e <HAL_DMA_Abort_IT+0xa2>
 8002e02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e06:	e002      	b.n	8002e0e <HAL_DMA_Abort_IT+0xa2>
 8002e08:	2310      	movs	r3, #16
 8002e0a:	e000      	b.n	8002e0e <HAL_DMA_Abort_IT+0xa2>
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	4a11      	ldr	r2, [pc, #68]	; (8002e54 <HAL_DMA_Abort_IT+0xe8>)
 8002e10:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	4798      	blx	r3
    } 
  }
  return status;
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40020008 	.word	0x40020008
 8002e40:	4002001c 	.word	0x4002001c
 8002e44:	40020030 	.word	0x40020030
 8002e48:	40020044 	.word	0x40020044
 8002e4c:	40020058 	.word	0x40020058
 8002e50:	4002006c 	.word	0x4002006c
 8002e54:	40020000 	.word	0x40020000

08002e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b08b      	sub	sp, #44	; 0x2c
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e62:	2300      	movs	r3, #0
 8002e64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e66:	2300      	movs	r3, #0
 8002e68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e6a:	e169      	b.n	8003140 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	69fa      	ldr	r2, [r7, #28]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	f040 8158 	bne.w	800313a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	4a9a      	ldr	r2, [pc, #616]	; (80030f8 <HAL_GPIO_Init+0x2a0>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d05e      	beq.n	8002f52 <HAL_GPIO_Init+0xfa>
 8002e94:	4a98      	ldr	r2, [pc, #608]	; (80030f8 <HAL_GPIO_Init+0x2a0>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d875      	bhi.n	8002f86 <HAL_GPIO_Init+0x12e>
 8002e9a:	4a98      	ldr	r2, [pc, #608]	; (80030fc <HAL_GPIO_Init+0x2a4>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d058      	beq.n	8002f52 <HAL_GPIO_Init+0xfa>
 8002ea0:	4a96      	ldr	r2, [pc, #600]	; (80030fc <HAL_GPIO_Init+0x2a4>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d86f      	bhi.n	8002f86 <HAL_GPIO_Init+0x12e>
 8002ea6:	4a96      	ldr	r2, [pc, #600]	; (8003100 <HAL_GPIO_Init+0x2a8>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d052      	beq.n	8002f52 <HAL_GPIO_Init+0xfa>
 8002eac:	4a94      	ldr	r2, [pc, #592]	; (8003100 <HAL_GPIO_Init+0x2a8>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d869      	bhi.n	8002f86 <HAL_GPIO_Init+0x12e>
 8002eb2:	4a94      	ldr	r2, [pc, #592]	; (8003104 <HAL_GPIO_Init+0x2ac>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d04c      	beq.n	8002f52 <HAL_GPIO_Init+0xfa>
 8002eb8:	4a92      	ldr	r2, [pc, #584]	; (8003104 <HAL_GPIO_Init+0x2ac>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d863      	bhi.n	8002f86 <HAL_GPIO_Init+0x12e>
 8002ebe:	4a92      	ldr	r2, [pc, #584]	; (8003108 <HAL_GPIO_Init+0x2b0>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d046      	beq.n	8002f52 <HAL_GPIO_Init+0xfa>
 8002ec4:	4a90      	ldr	r2, [pc, #576]	; (8003108 <HAL_GPIO_Init+0x2b0>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d85d      	bhi.n	8002f86 <HAL_GPIO_Init+0x12e>
 8002eca:	2b12      	cmp	r3, #18
 8002ecc:	d82a      	bhi.n	8002f24 <HAL_GPIO_Init+0xcc>
 8002ece:	2b12      	cmp	r3, #18
 8002ed0:	d859      	bhi.n	8002f86 <HAL_GPIO_Init+0x12e>
 8002ed2:	a201      	add	r2, pc, #4	; (adr r2, 8002ed8 <HAL_GPIO_Init+0x80>)
 8002ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed8:	08002f53 	.word	0x08002f53
 8002edc:	08002f2d 	.word	0x08002f2d
 8002ee0:	08002f3f 	.word	0x08002f3f
 8002ee4:	08002f81 	.word	0x08002f81
 8002ee8:	08002f87 	.word	0x08002f87
 8002eec:	08002f87 	.word	0x08002f87
 8002ef0:	08002f87 	.word	0x08002f87
 8002ef4:	08002f87 	.word	0x08002f87
 8002ef8:	08002f87 	.word	0x08002f87
 8002efc:	08002f87 	.word	0x08002f87
 8002f00:	08002f87 	.word	0x08002f87
 8002f04:	08002f87 	.word	0x08002f87
 8002f08:	08002f87 	.word	0x08002f87
 8002f0c:	08002f87 	.word	0x08002f87
 8002f10:	08002f87 	.word	0x08002f87
 8002f14:	08002f87 	.word	0x08002f87
 8002f18:	08002f87 	.word	0x08002f87
 8002f1c:	08002f35 	.word	0x08002f35
 8002f20:	08002f49 	.word	0x08002f49
 8002f24:	4a79      	ldr	r2, [pc, #484]	; (800310c <HAL_GPIO_Init+0x2b4>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d013      	beq.n	8002f52 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f2a:	e02c      	b.n	8002f86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	623b      	str	r3, [r7, #32]
          break;
 8002f32:	e029      	b.n	8002f88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	3304      	adds	r3, #4
 8002f3a:	623b      	str	r3, [r7, #32]
          break;
 8002f3c:	e024      	b.n	8002f88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	3308      	adds	r3, #8
 8002f44:	623b      	str	r3, [r7, #32]
          break;
 8002f46:	e01f      	b.n	8002f88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	330c      	adds	r3, #12
 8002f4e:	623b      	str	r3, [r7, #32]
          break;
 8002f50:	e01a      	b.n	8002f88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d102      	bne.n	8002f60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f5a:	2304      	movs	r3, #4
 8002f5c:	623b      	str	r3, [r7, #32]
          break;
 8002f5e:	e013      	b.n	8002f88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d105      	bne.n	8002f74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f68:	2308      	movs	r3, #8
 8002f6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	69fa      	ldr	r2, [r7, #28]
 8002f70:	611a      	str	r2, [r3, #16]
          break;
 8002f72:	e009      	b.n	8002f88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f74:	2308      	movs	r3, #8
 8002f76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	69fa      	ldr	r2, [r7, #28]
 8002f7c:	615a      	str	r2, [r3, #20]
          break;
 8002f7e:	e003      	b.n	8002f88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f80:	2300      	movs	r3, #0
 8002f82:	623b      	str	r3, [r7, #32]
          break;
 8002f84:	e000      	b.n	8002f88 <HAL_GPIO_Init+0x130>
          break;
 8002f86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	2bff      	cmp	r3, #255	; 0xff
 8002f8c:	d801      	bhi.n	8002f92 <HAL_GPIO_Init+0x13a>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	e001      	b.n	8002f96 <HAL_GPIO_Init+0x13e>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	3304      	adds	r3, #4
 8002f96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	2bff      	cmp	r3, #255	; 0xff
 8002f9c:	d802      	bhi.n	8002fa4 <HAL_GPIO_Init+0x14c>
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	e002      	b.n	8002faa <HAL_GPIO_Init+0x152>
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa6:	3b08      	subs	r3, #8
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	210f      	movs	r1, #15
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	401a      	ands	r2, r3
 8002fbc:	6a39      	ldr	r1, [r7, #32]
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 80b1 	beq.w	800313a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002fd8:	4b4d      	ldr	r3, [pc, #308]	; (8003110 <HAL_GPIO_Init+0x2b8>)
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	4a4c      	ldr	r2, [pc, #304]	; (8003110 <HAL_GPIO_Init+0x2b8>)
 8002fde:	f043 0301 	orr.w	r3, r3, #1
 8002fe2:	6193      	str	r3, [r2, #24]
 8002fe4:	4b4a      	ldr	r3, [pc, #296]	; (8003110 <HAL_GPIO_Init+0x2b8>)
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	60bb      	str	r3, [r7, #8]
 8002fee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ff0:	4a48      	ldr	r2, [pc, #288]	; (8003114 <HAL_GPIO_Init+0x2bc>)
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff4:	089b      	lsrs	r3, r3, #2
 8002ff6:	3302      	adds	r3, #2
 8002ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ffc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	f003 0303 	and.w	r3, r3, #3
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	220f      	movs	r2, #15
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	43db      	mvns	r3, r3
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	4013      	ands	r3, r2
 8003012:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a40      	ldr	r2, [pc, #256]	; (8003118 <HAL_GPIO_Init+0x2c0>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d013      	beq.n	8003044 <HAL_GPIO_Init+0x1ec>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a3f      	ldr	r2, [pc, #252]	; (800311c <HAL_GPIO_Init+0x2c4>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d00d      	beq.n	8003040 <HAL_GPIO_Init+0x1e8>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a3e      	ldr	r2, [pc, #248]	; (8003120 <HAL_GPIO_Init+0x2c8>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d007      	beq.n	800303c <HAL_GPIO_Init+0x1e4>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a3d      	ldr	r2, [pc, #244]	; (8003124 <HAL_GPIO_Init+0x2cc>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d101      	bne.n	8003038 <HAL_GPIO_Init+0x1e0>
 8003034:	2303      	movs	r3, #3
 8003036:	e006      	b.n	8003046 <HAL_GPIO_Init+0x1ee>
 8003038:	2304      	movs	r3, #4
 800303a:	e004      	b.n	8003046 <HAL_GPIO_Init+0x1ee>
 800303c:	2302      	movs	r3, #2
 800303e:	e002      	b.n	8003046 <HAL_GPIO_Init+0x1ee>
 8003040:	2301      	movs	r3, #1
 8003042:	e000      	b.n	8003046 <HAL_GPIO_Init+0x1ee>
 8003044:	2300      	movs	r3, #0
 8003046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003048:	f002 0203 	and.w	r2, r2, #3
 800304c:	0092      	lsls	r2, r2, #2
 800304e:	4093      	lsls	r3, r2
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	4313      	orrs	r3, r2
 8003054:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003056:	492f      	ldr	r1, [pc, #188]	; (8003114 <HAL_GPIO_Init+0x2bc>)
 8003058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305a:	089b      	lsrs	r3, r3, #2
 800305c:	3302      	adds	r3, #2
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d006      	beq.n	800307e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003070:	4b2d      	ldr	r3, [pc, #180]	; (8003128 <HAL_GPIO_Init+0x2d0>)
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	492c      	ldr	r1, [pc, #176]	; (8003128 <HAL_GPIO_Init+0x2d0>)
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	4313      	orrs	r3, r2
 800307a:	600b      	str	r3, [r1, #0]
 800307c:	e006      	b.n	800308c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800307e:	4b2a      	ldr	r3, [pc, #168]	; (8003128 <HAL_GPIO_Init+0x2d0>)
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	43db      	mvns	r3, r3
 8003086:	4928      	ldr	r1, [pc, #160]	; (8003128 <HAL_GPIO_Init+0x2d0>)
 8003088:	4013      	ands	r3, r2
 800308a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d006      	beq.n	80030a6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003098:	4b23      	ldr	r3, [pc, #140]	; (8003128 <HAL_GPIO_Init+0x2d0>)
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	4922      	ldr	r1, [pc, #136]	; (8003128 <HAL_GPIO_Init+0x2d0>)
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	604b      	str	r3, [r1, #4]
 80030a4:	e006      	b.n	80030b4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80030a6:	4b20      	ldr	r3, [pc, #128]	; (8003128 <HAL_GPIO_Init+0x2d0>)
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	43db      	mvns	r3, r3
 80030ae:	491e      	ldr	r1, [pc, #120]	; (8003128 <HAL_GPIO_Init+0x2d0>)
 80030b0:	4013      	ands	r3, r2
 80030b2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d006      	beq.n	80030ce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80030c0:	4b19      	ldr	r3, [pc, #100]	; (8003128 <HAL_GPIO_Init+0x2d0>)
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	4918      	ldr	r1, [pc, #96]	; (8003128 <HAL_GPIO_Init+0x2d0>)
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	608b      	str	r3, [r1, #8]
 80030cc:	e006      	b.n	80030dc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80030ce:	4b16      	ldr	r3, [pc, #88]	; (8003128 <HAL_GPIO_Init+0x2d0>)
 80030d0:	689a      	ldr	r2, [r3, #8]
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	43db      	mvns	r3, r3
 80030d6:	4914      	ldr	r1, [pc, #80]	; (8003128 <HAL_GPIO_Init+0x2d0>)
 80030d8:	4013      	ands	r3, r2
 80030da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d021      	beq.n	800312c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80030e8:	4b0f      	ldr	r3, [pc, #60]	; (8003128 <HAL_GPIO_Init+0x2d0>)
 80030ea:	68da      	ldr	r2, [r3, #12]
 80030ec:	490e      	ldr	r1, [pc, #56]	; (8003128 <HAL_GPIO_Init+0x2d0>)
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	60cb      	str	r3, [r1, #12]
 80030f4:	e021      	b.n	800313a <HAL_GPIO_Init+0x2e2>
 80030f6:	bf00      	nop
 80030f8:	10320000 	.word	0x10320000
 80030fc:	10310000 	.word	0x10310000
 8003100:	10220000 	.word	0x10220000
 8003104:	10210000 	.word	0x10210000
 8003108:	10120000 	.word	0x10120000
 800310c:	10110000 	.word	0x10110000
 8003110:	40021000 	.word	0x40021000
 8003114:	40010000 	.word	0x40010000
 8003118:	40010800 	.word	0x40010800
 800311c:	40010c00 	.word	0x40010c00
 8003120:	40011000 	.word	0x40011000
 8003124:	40011400 	.word	0x40011400
 8003128:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800312c:	4b0b      	ldr	r3, [pc, #44]	; (800315c <HAL_GPIO_Init+0x304>)
 800312e:	68da      	ldr	r2, [r3, #12]
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	43db      	mvns	r3, r3
 8003134:	4909      	ldr	r1, [pc, #36]	; (800315c <HAL_GPIO_Init+0x304>)
 8003136:	4013      	ands	r3, r2
 8003138:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	3301      	adds	r3, #1
 800313e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	fa22 f303 	lsr.w	r3, r2, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	f47f ae8e 	bne.w	8002e6c <HAL_GPIO_Init+0x14>
  }
}
 8003150:	bf00      	nop
 8003152:	bf00      	nop
 8003154:	372c      	adds	r7, #44	; 0x2c
 8003156:	46bd      	mov	sp, r7
 8003158:	bc80      	pop	{r7}
 800315a:	4770      	bx	lr
 800315c:	40010400 	.word	0x40010400

08003160 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	460b      	mov	r3, r1
 800316a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	887b      	ldrh	r3, [r7, #2]
 8003172:	4013      	ands	r3, r2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d002      	beq.n	800317e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003178:	2301      	movs	r3, #1
 800317a:	73fb      	strb	r3, [r7, #15]
 800317c:	e001      	b.n	8003182 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800317e:	2300      	movs	r3, #0
 8003180:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003182:	7bfb      	ldrb	r3, [r7, #15]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3714      	adds	r7, #20
 8003188:	46bd      	mov	sp, r7
 800318a:	bc80      	pop	{r7}
 800318c:	4770      	bx	lr

0800318e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800318e:	b480      	push	{r7}
 8003190:	b083      	sub	sp, #12
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
 8003196:	460b      	mov	r3, r1
 8003198:	807b      	strh	r3, [r7, #2]
 800319a:	4613      	mov	r3, r2
 800319c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800319e:	787b      	ldrb	r3, [r7, #1]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031a4:	887a      	ldrh	r2, [r7, #2]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80031aa:	e003      	b.n	80031b4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031ac:	887b      	ldrh	r3, [r7, #2]
 80031ae:	041a      	lsls	r2, r3, #16
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	611a      	str	r2, [r3, #16]
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bc80      	pop	{r7}
 80031bc:	4770      	bx	lr

080031be <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031be:	b480      	push	{r7}
 80031c0:	b085      	sub	sp, #20
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
 80031c6:	460b      	mov	r3, r1
 80031c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031d0:	887a      	ldrh	r2, [r7, #2]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	4013      	ands	r3, r2
 80031d6:	041a      	lsls	r2, r3, #16
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	43d9      	mvns	r1, r3
 80031dc:	887b      	ldrh	r3, [r7, #2]
 80031de:	400b      	ands	r3, r1
 80031e0:	431a      	orrs	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	611a      	str	r2, [r3, #16]
}
 80031e6:	bf00      	nop
 80031e8:	3714      	adds	r7, #20
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr

080031f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	4603      	mov	r3, r0
 80031f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80031fa:	4b08      	ldr	r3, [pc, #32]	; (800321c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031fc:	695a      	ldr	r2, [r3, #20]
 80031fe:	88fb      	ldrh	r3, [r7, #6]
 8003200:	4013      	ands	r3, r2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d006      	beq.n	8003214 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003206:	4a05      	ldr	r2, [pc, #20]	; (800321c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003208:	88fb      	ldrh	r3, [r7, #6]
 800320a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800320c:	88fb      	ldrh	r3, [r7, #6]
 800320e:	4618      	mov	r0, r3
 8003210:	f7fe fcc6 	bl	8001ba0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003214:	bf00      	nop
 8003216:	3708      	adds	r7, #8
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40010400 	.word	0x40010400

08003220 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e272      	b.n	8003718 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 8087 	beq.w	800334e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003240:	4b92      	ldr	r3, [pc, #584]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f003 030c 	and.w	r3, r3, #12
 8003248:	2b04      	cmp	r3, #4
 800324a:	d00c      	beq.n	8003266 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800324c:	4b8f      	ldr	r3, [pc, #572]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f003 030c 	and.w	r3, r3, #12
 8003254:	2b08      	cmp	r3, #8
 8003256:	d112      	bne.n	800327e <HAL_RCC_OscConfig+0x5e>
 8003258:	4b8c      	ldr	r3, [pc, #560]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003264:	d10b      	bne.n	800327e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003266:	4b89      	ldr	r3, [pc, #548]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d06c      	beq.n	800334c <HAL_RCC_OscConfig+0x12c>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d168      	bne.n	800334c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e24c      	b.n	8003718 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003286:	d106      	bne.n	8003296 <HAL_RCC_OscConfig+0x76>
 8003288:	4b80      	ldr	r3, [pc, #512]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a7f      	ldr	r2, [pc, #508]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 800328e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003292:	6013      	str	r3, [r2, #0]
 8003294:	e02e      	b.n	80032f4 <HAL_RCC_OscConfig+0xd4>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10c      	bne.n	80032b8 <HAL_RCC_OscConfig+0x98>
 800329e:	4b7b      	ldr	r3, [pc, #492]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a7a      	ldr	r2, [pc, #488]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	4b78      	ldr	r3, [pc, #480]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a77      	ldr	r2, [pc, #476]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	e01d      	b.n	80032f4 <HAL_RCC_OscConfig+0xd4>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032c0:	d10c      	bne.n	80032dc <HAL_RCC_OscConfig+0xbc>
 80032c2:	4b72      	ldr	r3, [pc, #456]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a71      	ldr	r2, [pc, #452]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	4b6f      	ldr	r3, [pc, #444]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a6e      	ldr	r2, [pc, #440]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	e00b      	b.n	80032f4 <HAL_RCC_OscConfig+0xd4>
 80032dc:	4b6b      	ldr	r3, [pc, #428]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a6a      	ldr	r2, [pc, #424]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032e6:	6013      	str	r3, [r2, #0]
 80032e8:	4b68      	ldr	r3, [pc, #416]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a67      	ldr	r2, [pc, #412]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d013      	beq.n	8003324 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fc:	f7ff fbb2 	bl	8002a64 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003304:	f7ff fbae 	bl	8002a64 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b64      	cmp	r3, #100	; 0x64
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e200      	b.n	8003718 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003316:	4b5d      	ldr	r3, [pc, #372]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0f0      	beq.n	8003304 <HAL_RCC_OscConfig+0xe4>
 8003322:	e014      	b.n	800334e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003324:	f7ff fb9e 	bl	8002a64 <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800332c:	f7ff fb9a 	bl	8002a64 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b64      	cmp	r3, #100	; 0x64
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e1ec      	b.n	8003718 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800333e:	4b53      	ldr	r3, [pc, #332]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1f0      	bne.n	800332c <HAL_RCC_OscConfig+0x10c>
 800334a:	e000      	b.n	800334e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800334c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d063      	beq.n	8003422 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800335a:	4b4c      	ldr	r3, [pc, #304]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f003 030c 	and.w	r3, r3, #12
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00b      	beq.n	800337e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003366:	4b49      	ldr	r3, [pc, #292]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f003 030c 	and.w	r3, r3, #12
 800336e:	2b08      	cmp	r3, #8
 8003370:	d11c      	bne.n	80033ac <HAL_RCC_OscConfig+0x18c>
 8003372:	4b46      	ldr	r3, [pc, #280]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d116      	bne.n	80033ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800337e:	4b43      	ldr	r3, [pc, #268]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d005      	beq.n	8003396 <HAL_RCC_OscConfig+0x176>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d001      	beq.n	8003396 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e1c0      	b.n	8003718 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003396:	4b3d      	ldr	r3, [pc, #244]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	4939      	ldr	r1, [pc, #228]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033aa:	e03a      	b.n	8003422 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d020      	beq.n	80033f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033b4:	4b36      	ldr	r3, [pc, #216]	; (8003490 <HAL_RCC_OscConfig+0x270>)
 80033b6:	2201      	movs	r2, #1
 80033b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ba:	f7ff fb53 	bl	8002a64 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033c2:	f7ff fb4f 	bl	8002a64 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e1a1      	b.n	8003718 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d4:	4b2d      	ldr	r3, [pc, #180]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0f0      	beq.n	80033c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e0:	4b2a      	ldr	r3, [pc, #168]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	4927      	ldr	r1, [pc, #156]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	600b      	str	r3, [r1, #0]
 80033f4:	e015      	b.n	8003422 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033f6:	4b26      	ldr	r3, [pc, #152]	; (8003490 <HAL_RCC_OscConfig+0x270>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fc:	f7ff fb32 	bl	8002a64 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003404:	f7ff fb2e 	bl	8002a64 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e180      	b.n	8003718 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003416:	4b1d      	ldr	r3, [pc, #116]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1f0      	bne.n	8003404 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	2b00      	cmp	r3, #0
 800342c:	d03a      	beq.n	80034a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d019      	beq.n	800346a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003436:	4b17      	ldr	r3, [pc, #92]	; (8003494 <HAL_RCC_OscConfig+0x274>)
 8003438:	2201      	movs	r2, #1
 800343a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800343c:	f7ff fb12 	bl	8002a64 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003444:	f7ff fb0e 	bl	8002a64 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e160      	b.n	8003718 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003456:	4b0d      	ldr	r3, [pc, #52]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0f0      	beq.n	8003444 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003462:	2001      	movs	r0, #1
 8003464:	f000 fad8 	bl	8003a18 <RCC_Delay>
 8003468:	e01c      	b.n	80034a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800346a:	4b0a      	ldr	r3, [pc, #40]	; (8003494 <HAL_RCC_OscConfig+0x274>)
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003470:	f7ff faf8 	bl	8002a64 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003476:	e00f      	b.n	8003498 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003478:	f7ff faf4 	bl	8002a64 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d908      	bls.n	8003498 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e146      	b.n	8003718 <HAL_RCC_OscConfig+0x4f8>
 800348a:	bf00      	nop
 800348c:	40021000 	.word	0x40021000
 8003490:	42420000 	.word	0x42420000
 8003494:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003498:	4b92      	ldr	r3, [pc, #584]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1e9      	bne.n	8003478 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 80a6 	beq.w	80035fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034b2:	2300      	movs	r3, #0
 80034b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034b6:	4b8b      	ldr	r3, [pc, #556]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10d      	bne.n	80034de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034c2:	4b88      	ldr	r3, [pc, #544]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	4a87      	ldr	r2, [pc, #540]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 80034c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034cc:	61d3      	str	r3, [r2, #28]
 80034ce:	4b85      	ldr	r3, [pc, #532]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d6:	60bb      	str	r3, [r7, #8]
 80034d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034da:	2301      	movs	r3, #1
 80034dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034de:	4b82      	ldr	r3, [pc, #520]	; (80036e8 <HAL_RCC_OscConfig+0x4c8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d118      	bne.n	800351c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034ea:	4b7f      	ldr	r3, [pc, #508]	; (80036e8 <HAL_RCC_OscConfig+0x4c8>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a7e      	ldr	r2, [pc, #504]	; (80036e8 <HAL_RCC_OscConfig+0x4c8>)
 80034f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034f6:	f7ff fab5 	bl	8002a64 <HAL_GetTick>
 80034fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034fc:	e008      	b.n	8003510 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034fe:	f7ff fab1 	bl	8002a64 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b64      	cmp	r3, #100	; 0x64
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e103      	b.n	8003718 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003510:	4b75      	ldr	r3, [pc, #468]	; (80036e8 <HAL_RCC_OscConfig+0x4c8>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0f0      	beq.n	80034fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d106      	bne.n	8003532 <HAL_RCC_OscConfig+0x312>
 8003524:	4b6f      	ldr	r3, [pc, #444]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	4a6e      	ldr	r2, [pc, #440]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 800352a:	f043 0301 	orr.w	r3, r3, #1
 800352e:	6213      	str	r3, [r2, #32]
 8003530:	e02d      	b.n	800358e <HAL_RCC_OscConfig+0x36e>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10c      	bne.n	8003554 <HAL_RCC_OscConfig+0x334>
 800353a:	4b6a      	ldr	r3, [pc, #424]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	4a69      	ldr	r2, [pc, #420]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 8003540:	f023 0301 	bic.w	r3, r3, #1
 8003544:	6213      	str	r3, [r2, #32]
 8003546:	4b67      	ldr	r3, [pc, #412]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	4a66      	ldr	r2, [pc, #408]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 800354c:	f023 0304 	bic.w	r3, r3, #4
 8003550:	6213      	str	r3, [r2, #32]
 8003552:	e01c      	b.n	800358e <HAL_RCC_OscConfig+0x36e>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	2b05      	cmp	r3, #5
 800355a:	d10c      	bne.n	8003576 <HAL_RCC_OscConfig+0x356>
 800355c:	4b61      	ldr	r3, [pc, #388]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	4a60      	ldr	r2, [pc, #384]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 8003562:	f043 0304 	orr.w	r3, r3, #4
 8003566:	6213      	str	r3, [r2, #32]
 8003568:	4b5e      	ldr	r3, [pc, #376]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	4a5d      	ldr	r2, [pc, #372]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	6213      	str	r3, [r2, #32]
 8003574:	e00b      	b.n	800358e <HAL_RCC_OscConfig+0x36e>
 8003576:	4b5b      	ldr	r3, [pc, #364]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	4a5a      	ldr	r2, [pc, #360]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 800357c:	f023 0301 	bic.w	r3, r3, #1
 8003580:	6213      	str	r3, [r2, #32]
 8003582:	4b58      	ldr	r3, [pc, #352]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	4a57      	ldr	r2, [pc, #348]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 8003588:	f023 0304 	bic.w	r3, r3, #4
 800358c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d015      	beq.n	80035c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003596:	f7ff fa65 	bl	8002a64 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800359c:	e00a      	b.n	80035b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800359e:	f7ff fa61 	bl	8002a64 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e0b1      	b.n	8003718 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b4:	4b4b      	ldr	r3, [pc, #300]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0ee      	beq.n	800359e <HAL_RCC_OscConfig+0x37e>
 80035c0:	e014      	b.n	80035ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c2:	f7ff fa4f 	bl	8002a64 <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035c8:	e00a      	b.n	80035e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ca:	f7ff fa4b 	bl	8002a64 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d8:	4293      	cmp	r3, r2
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e09b      	b.n	8003718 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035e0:	4b40      	ldr	r3, [pc, #256]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1ee      	bne.n	80035ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035ec:	7dfb      	ldrb	r3, [r7, #23]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d105      	bne.n	80035fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035f2:	4b3c      	ldr	r3, [pc, #240]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	4a3b      	ldr	r2, [pc, #236]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 80035f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 8087 	beq.w	8003716 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003608:	4b36      	ldr	r3, [pc, #216]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f003 030c 	and.w	r3, r3, #12
 8003610:	2b08      	cmp	r3, #8
 8003612:	d061      	beq.n	80036d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	2b02      	cmp	r3, #2
 800361a:	d146      	bne.n	80036aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800361c:	4b33      	ldr	r3, [pc, #204]	; (80036ec <HAL_RCC_OscConfig+0x4cc>)
 800361e:	2200      	movs	r2, #0
 8003620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003622:	f7ff fa1f 	bl	8002a64 <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003628:	e008      	b.n	800363c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800362a:	f7ff fa1b 	bl	8002a64 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e06d      	b.n	8003718 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800363c:	4b29      	ldr	r3, [pc, #164]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1f0      	bne.n	800362a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003650:	d108      	bne.n	8003664 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003652:	4b24      	ldr	r3, [pc, #144]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	4921      	ldr	r1, [pc, #132]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 8003660:	4313      	orrs	r3, r2
 8003662:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003664:	4b1f      	ldr	r3, [pc, #124]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a19      	ldr	r1, [r3, #32]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	430b      	orrs	r3, r1
 8003676:	491b      	ldr	r1, [pc, #108]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 8003678:	4313      	orrs	r3, r2
 800367a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800367c:	4b1b      	ldr	r3, [pc, #108]	; (80036ec <HAL_RCC_OscConfig+0x4cc>)
 800367e:	2201      	movs	r2, #1
 8003680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003682:	f7ff f9ef 	bl	8002a64 <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800368a:	f7ff f9eb 	bl	8002a64 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e03d      	b.n	8003718 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800369c:	4b11      	ldr	r3, [pc, #68]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0f0      	beq.n	800368a <HAL_RCC_OscConfig+0x46a>
 80036a8:	e035      	b.n	8003716 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036aa:	4b10      	ldr	r3, [pc, #64]	; (80036ec <HAL_RCC_OscConfig+0x4cc>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b0:	f7ff f9d8 	bl	8002a64 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b8:	f7ff f9d4 	bl	8002a64 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e026      	b.n	8003718 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ca:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <HAL_RCC_OscConfig+0x4c4>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1f0      	bne.n	80036b8 <HAL_RCC_OscConfig+0x498>
 80036d6:	e01e      	b.n	8003716 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d107      	bne.n	80036f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e019      	b.n	8003718 <HAL_RCC_OscConfig+0x4f8>
 80036e4:	40021000 	.word	0x40021000
 80036e8:	40007000 	.word	0x40007000
 80036ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036f0:	4b0b      	ldr	r3, [pc, #44]	; (8003720 <HAL_RCC_OscConfig+0x500>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	429a      	cmp	r2, r3
 8003702:	d106      	bne.n	8003712 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800370e:	429a      	cmp	r2, r3
 8003710:	d001      	beq.n	8003716 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e000      	b.n	8003718 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3718      	adds	r7, #24
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40021000 	.word	0x40021000

08003724 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e0d0      	b.n	80038da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003738:	4b6a      	ldr	r3, [pc, #424]	; (80038e4 <HAL_RCC_ClockConfig+0x1c0>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	429a      	cmp	r2, r3
 8003744:	d910      	bls.n	8003768 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003746:	4b67      	ldr	r3, [pc, #412]	; (80038e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f023 0207 	bic.w	r2, r3, #7
 800374e:	4965      	ldr	r1, [pc, #404]	; (80038e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	4313      	orrs	r3, r2
 8003754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003756:	4b63      	ldr	r3, [pc, #396]	; (80038e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	429a      	cmp	r2, r3
 8003762:	d001      	beq.n	8003768 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e0b8      	b.n	80038da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d020      	beq.n	80037b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b00      	cmp	r3, #0
 800377e:	d005      	beq.n	800378c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003780:	4b59      	ldr	r3, [pc, #356]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	4a58      	ldr	r2, [pc, #352]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003786:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800378a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0308 	and.w	r3, r3, #8
 8003794:	2b00      	cmp	r3, #0
 8003796:	d005      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003798:	4b53      	ldr	r3, [pc, #332]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	4a52      	ldr	r2, [pc, #328]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 800379e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80037a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037a4:	4b50      	ldr	r3, [pc, #320]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	494d      	ldr	r1, [pc, #308]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d040      	beq.n	8003844 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d107      	bne.n	80037da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ca:	4b47      	ldr	r3, [pc, #284]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d115      	bne.n	8003802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e07f      	b.n	80038da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d107      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037e2:	4b41      	ldr	r3, [pc, #260]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d109      	bne.n	8003802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e073      	b.n	80038da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f2:	4b3d      	ldr	r3, [pc, #244]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e06b      	b.n	80038da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003802:	4b39      	ldr	r3, [pc, #228]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f023 0203 	bic.w	r2, r3, #3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	4936      	ldr	r1, [pc, #216]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003810:	4313      	orrs	r3, r2
 8003812:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003814:	f7ff f926 	bl	8002a64 <HAL_GetTick>
 8003818:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800381a:	e00a      	b.n	8003832 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800381c:	f7ff f922 	bl	8002a64 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	f241 3288 	movw	r2, #5000	; 0x1388
 800382a:	4293      	cmp	r3, r2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e053      	b.n	80038da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003832:	4b2d      	ldr	r3, [pc, #180]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f003 020c 	and.w	r2, r3, #12
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	429a      	cmp	r2, r3
 8003842:	d1eb      	bne.n	800381c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003844:	4b27      	ldr	r3, [pc, #156]	; (80038e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	429a      	cmp	r2, r3
 8003850:	d210      	bcs.n	8003874 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003852:	4b24      	ldr	r3, [pc, #144]	; (80038e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f023 0207 	bic.w	r2, r3, #7
 800385a:	4922      	ldr	r1, [pc, #136]	; (80038e4 <HAL_RCC_ClockConfig+0x1c0>)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	4313      	orrs	r3, r2
 8003860:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003862:	4b20      	ldr	r3, [pc, #128]	; (80038e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0307 	and.w	r3, r3, #7
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	429a      	cmp	r2, r3
 800386e:	d001      	beq.n	8003874 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e032      	b.n	80038da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b00      	cmp	r3, #0
 800387e:	d008      	beq.n	8003892 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003880:	4b19      	ldr	r3, [pc, #100]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	4916      	ldr	r1, [pc, #88]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 800388e:	4313      	orrs	r3, r2
 8003890:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0308 	and.w	r3, r3, #8
 800389a:	2b00      	cmp	r3, #0
 800389c:	d009      	beq.n	80038b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800389e:	4b12      	ldr	r3, [pc, #72]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	490e      	ldr	r1, [pc, #56]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038b2:	f000 f821 	bl	80038f8 <HAL_RCC_GetSysClockFreq>
 80038b6:	4602      	mov	r2, r0
 80038b8:	4b0b      	ldr	r3, [pc, #44]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	091b      	lsrs	r3, r3, #4
 80038be:	f003 030f 	and.w	r3, r3, #15
 80038c2:	490a      	ldr	r1, [pc, #40]	; (80038ec <HAL_RCC_ClockConfig+0x1c8>)
 80038c4:	5ccb      	ldrb	r3, [r1, r3]
 80038c6:	fa22 f303 	lsr.w	r3, r2, r3
 80038ca:	4a09      	ldr	r2, [pc, #36]	; (80038f0 <HAL_RCC_ClockConfig+0x1cc>)
 80038cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038ce:	4b09      	ldr	r3, [pc, #36]	; (80038f4 <HAL_RCC_ClockConfig+0x1d0>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff f884 	bl	80029e0 <HAL_InitTick>

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	40022000 	.word	0x40022000
 80038e8:	40021000 	.word	0x40021000
 80038ec:	08005084 	.word	0x08005084
 80038f0:	20000000 	.word	0x20000000
 80038f4:	20000014 	.word	0x20000014

080038f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038f8:	b490      	push	{r4, r7}
 80038fa:	b08a      	sub	sp, #40	; 0x28
 80038fc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80038fe:	4b29      	ldr	r3, [pc, #164]	; (80039a4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003900:	1d3c      	adds	r4, r7, #4
 8003902:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003904:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003908:	f240 2301 	movw	r3, #513	; 0x201
 800390c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800390e:	2300      	movs	r3, #0
 8003910:	61fb      	str	r3, [r7, #28]
 8003912:	2300      	movs	r3, #0
 8003914:	61bb      	str	r3, [r7, #24]
 8003916:	2300      	movs	r3, #0
 8003918:	627b      	str	r3, [r7, #36]	; 0x24
 800391a:	2300      	movs	r3, #0
 800391c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800391e:	2300      	movs	r3, #0
 8003920:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003922:	4b21      	ldr	r3, [pc, #132]	; (80039a8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	f003 030c 	and.w	r3, r3, #12
 800392e:	2b04      	cmp	r3, #4
 8003930:	d002      	beq.n	8003938 <HAL_RCC_GetSysClockFreq+0x40>
 8003932:	2b08      	cmp	r3, #8
 8003934:	d003      	beq.n	800393e <HAL_RCC_GetSysClockFreq+0x46>
 8003936:	e02b      	b.n	8003990 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003938:	4b1c      	ldr	r3, [pc, #112]	; (80039ac <HAL_RCC_GetSysClockFreq+0xb4>)
 800393a:	623b      	str	r3, [r7, #32]
      break;
 800393c:	e02b      	b.n	8003996 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	0c9b      	lsrs	r3, r3, #18
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	3328      	adds	r3, #40	; 0x28
 8003948:	443b      	add	r3, r7
 800394a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800394e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d012      	beq.n	8003980 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800395a:	4b13      	ldr	r3, [pc, #76]	; (80039a8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	0c5b      	lsrs	r3, r3, #17
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	3328      	adds	r3, #40	; 0x28
 8003966:	443b      	add	r3, r7
 8003968:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800396c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	4a0e      	ldr	r2, [pc, #56]	; (80039ac <HAL_RCC_GetSysClockFreq+0xb4>)
 8003972:	fb03 f202 	mul.w	r2, r3, r2
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	fbb2 f3f3 	udiv	r3, r2, r3
 800397c:	627b      	str	r3, [r7, #36]	; 0x24
 800397e:	e004      	b.n	800398a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	4a0b      	ldr	r2, [pc, #44]	; (80039b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003984:	fb02 f303 	mul.w	r3, r2, r3
 8003988:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	623b      	str	r3, [r7, #32]
      break;
 800398e:	e002      	b.n	8003996 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003990:	4b06      	ldr	r3, [pc, #24]	; (80039ac <HAL_RCC_GetSysClockFreq+0xb4>)
 8003992:	623b      	str	r3, [r7, #32]
      break;
 8003994:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003996:	6a3b      	ldr	r3, [r7, #32]
}
 8003998:	4618      	mov	r0, r3
 800399a:	3728      	adds	r7, #40	; 0x28
 800399c:	46bd      	mov	sp, r7
 800399e:	bc90      	pop	{r4, r7}
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	08005074 	.word	0x08005074
 80039a8:	40021000 	.word	0x40021000
 80039ac:	007a1200 	.word	0x007a1200
 80039b0:	003d0900 	.word	0x003d0900

080039b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039b8:	4b02      	ldr	r3, [pc, #8]	; (80039c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80039ba:	681b      	ldr	r3, [r3, #0]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	46bd      	mov	sp, r7
 80039c0:	bc80      	pop	{r7}
 80039c2:	4770      	bx	lr
 80039c4:	20000000 	.word	0x20000000

080039c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039cc:	f7ff fff2 	bl	80039b4 <HAL_RCC_GetHCLKFreq>
 80039d0:	4602      	mov	r2, r0
 80039d2:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	0a1b      	lsrs	r3, r3, #8
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	4903      	ldr	r1, [pc, #12]	; (80039ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80039de:	5ccb      	ldrb	r3, [r1, r3]
 80039e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40021000 	.word	0x40021000
 80039ec:	08005094 	.word	0x08005094

080039f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039f4:	f7ff ffde 	bl	80039b4 <HAL_RCC_GetHCLKFreq>
 80039f8:	4602      	mov	r2, r0
 80039fa:	4b05      	ldr	r3, [pc, #20]	; (8003a10 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	0adb      	lsrs	r3, r3, #11
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	4903      	ldr	r1, [pc, #12]	; (8003a14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a06:	5ccb      	ldrb	r3, [r1, r3]
 8003a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	40021000 	.word	0x40021000
 8003a14:	08005094 	.word	0x08005094

08003a18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a20:	4b0a      	ldr	r3, [pc, #40]	; (8003a4c <RCC_Delay+0x34>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a0a      	ldr	r2, [pc, #40]	; (8003a50 <RCC_Delay+0x38>)
 8003a26:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2a:	0a5b      	lsrs	r3, r3, #9
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	fb02 f303 	mul.w	r3, r2, r3
 8003a32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a34:	bf00      	nop
  }
  while (Delay --);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	1e5a      	subs	r2, r3, #1
 8003a3a:	60fa      	str	r2, [r7, #12]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1f9      	bne.n	8003a34 <RCC_Delay+0x1c>
}
 8003a40:	bf00      	nop
 8003a42:	bf00      	nop
 8003a44:	3714      	adds	r7, #20
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr
 8003a4c:	20000000 	.word	0x20000000
 8003a50:	10624dd3 	.word	0x10624dd3

08003a54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d001      	beq.n	8003a6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e03a      	b.n	8003ae2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68da      	ldr	r2, [r3, #12]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f042 0201 	orr.w	r2, r2, #1
 8003a82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a18      	ldr	r2, [pc, #96]	; (8003aec <HAL_TIM_Base_Start_IT+0x98>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d00e      	beq.n	8003aac <HAL_TIM_Base_Start_IT+0x58>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a96:	d009      	beq.n	8003aac <HAL_TIM_Base_Start_IT+0x58>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a14      	ldr	r2, [pc, #80]	; (8003af0 <HAL_TIM_Base_Start_IT+0x9c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d004      	beq.n	8003aac <HAL_TIM_Base_Start_IT+0x58>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a13      	ldr	r2, [pc, #76]	; (8003af4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d111      	bne.n	8003ad0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2b06      	cmp	r3, #6
 8003abc:	d010      	beq.n	8003ae0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f042 0201 	orr.w	r2, r2, #1
 8003acc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ace:	e007      	b.n	8003ae0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f042 0201 	orr.w	r2, r2, #1
 8003ade:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bc80      	pop	{r7}
 8003aea:	4770      	bx	lr
 8003aec:	40012c00 	.word	0x40012c00
 8003af0:	40000400 	.word	0x40000400
 8003af4:	40000800 	.word	0x40000800

08003af8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e041      	b.n	8003b8e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d106      	bne.n	8003b24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7fd fda4 	bl	800166c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2202      	movs	r2, #2
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3304      	adds	r3, #4
 8003b34:	4619      	mov	r1, r3
 8003b36:	4610      	mov	r0, r2
 8003b38:	f000 fbea 	bl	8004310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
	...

08003b98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d109      	bne.n	8003bbc <HAL_TIM_PWM_Start+0x24>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	bf14      	ite	ne
 8003bb4:	2301      	movne	r3, #1
 8003bb6:	2300      	moveq	r3, #0
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	e022      	b.n	8003c02 <HAL_TIM_PWM_Start+0x6a>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d109      	bne.n	8003bd6 <HAL_TIM_PWM_Start+0x3e>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	bf14      	ite	ne
 8003bce:	2301      	movne	r3, #1
 8003bd0:	2300      	moveq	r3, #0
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	e015      	b.n	8003c02 <HAL_TIM_PWM_Start+0x6a>
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d109      	bne.n	8003bf0 <HAL_TIM_PWM_Start+0x58>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	bf14      	ite	ne
 8003be8:	2301      	movne	r3, #1
 8003bea:	2300      	moveq	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	e008      	b.n	8003c02 <HAL_TIM_PWM_Start+0x6a>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	bf14      	ite	ne
 8003bfc:	2301      	movne	r3, #1
 8003bfe:	2300      	moveq	r3, #0
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e05e      	b.n	8003cc8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d104      	bne.n	8003c1a <HAL_TIM_PWM_Start+0x82>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c18:	e013      	b.n	8003c42 <HAL_TIM_PWM_Start+0xaa>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d104      	bne.n	8003c2a <HAL_TIM_PWM_Start+0x92>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c28:	e00b      	b.n	8003c42 <HAL_TIM_PWM_Start+0xaa>
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d104      	bne.n	8003c3a <HAL_TIM_PWM_Start+0xa2>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c38:	e003      	b.n	8003c42 <HAL_TIM_PWM_Start+0xaa>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2201      	movs	r2, #1
 8003c48:	6839      	ldr	r1, [r7, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 fd4a 	bl	80046e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a1e      	ldr	r2, [pc, #120]	; (8003cd0 <HAL_TIM_PWM_Start+0x138>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d107      	bne.n	8003c6a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a18      	ldr	r2, [pc, #96]	; (8003cd0 <HAL_TIM_PWM_Start+0x138>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d00e      	beq.n	8003c92 <HAL_TIM_PWM_Start+0xfa>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c7c:	d009      	beq.n	8003c92 <HAL_TIM_PWM_Start+0xfa>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a14      	ldr	r2, [pc, #80]	; (8003cd4 <HAL_TIM_PWM_Start+0x13c>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d004      	beq.n	8003c92 <HAL_TIM_PWM_Start+0xfa>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a12      	ldr	r2, [pc, #72]	; (8003cd8 <HAL_TIM_PWM_Start+0x140>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d111      	bne.n	8003cb6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2b06      	cmp	r3, #6
 8003ca2:	d010      	beq.n	8003cc6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0201 	orr.w	r2, r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb4:	e007      	b.n	8003cc6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f042 0201 	orr.w	r2, r2, #1
 8003cc4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40012c00 	.word	0x40012c00
 8003cd4:	40000400 	.word	0x40000400
 8003cd8:	40000800 	.word	0x40000800

08003cdc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d101      	bne.n	8003cf0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e093      	b.n	8003e18 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d106      	bne.n	8003d0a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f7fd fc47 	bl	8001598 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2202      	movs	r2, #2
 8003d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6812      	ldr	r2, [r2, #0]
 8003d1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d20:	f023 0307 	bic.w	r3, r3, #7
 8003d24:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	3304      	adds	r3, #4
 8003d2e:	4619      	mov	r1, r3
 8003d30:	4610      	mov	r0, r2
 8003d32:	f000 faed 	bl	8004310 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d5e:	f023 0303 	bic.w	r3, r3, #3
 8003d62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	021b      	lsls	r3, r3, #8
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003d7c:	f023 030c 	bic.w	r3, r3, #12
 8003d80:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	68da      	ldr	r2, [r3, #12]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	021b      	lsls	r3, r3, #8
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	011a      	lsls	r2, r3, #4
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	031b      	lsls	r3, r3, #12
 8003dac:	4313      	orrs	r3, r2
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003dba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3718      	adds	r7, #24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e30:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e38:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e40:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003e48:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d110      	bne.n	8003e72 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e50:	7bfb      	ldrb	r3, [r7, #15]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d102      	bne.n	8003e5c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e56:	7b7b      	ldrb	r3, [r7, #13]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d001      	beq.n	8003e60 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e069      	b.n	8003f34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2202      	movs	r2, #2
 8003e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e70:	e031      	b.n	8003ed6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	2b04      	cmp	r3, #4
 8003e76:	d110      	bne.n	8003e9a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e78:	7bbb      	ldrb	r3, [r7, #14]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d102      	bne.n	8003e84 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e7e:	7b3b      	ldrb	r3, [r7, #12]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d001      	beq.n	8003e88 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e055      	b.n	8003f34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2202      	movs	r2, #2
 8003e94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e98:	e01d      	b.n	8003ed6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e9a:	7bfb      	ldrb	r3, [r7, #15]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d108      	bne.n	8003eb2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ea0:	7bbb      	ldrb	r3, [r7, #14]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d105      	bne.n	8003eb2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ea6:	7b7b      	ldrb	r3, [r7, #13]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d102      	bne.n	8003eb2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003eac:	7b3b      	ldrb	r3, [r7, #12]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d001      	beq.n	8003eb6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e03e      	b.n	8003f34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2202      	movs	r2, #2
 8003eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2202      	movs	r2, #2
 8003eca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2202      	movs	r2, #2
 8003ed2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d003      	beq.n	8003ee4 <HAL_TIM_Encoder_Start+0xc4>
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	d008      	beq.n	8003ef4 <HAL_TIM_Encoder_Start+0xd4>
 8003ee2:	e00f      	b.n	8003f04 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	2100      	movs	r1, #0
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 fbf9 	bl	80046e4 <TIM_CCxChannelCmd>
      break;
 8003ef2:	e016      	b.n	8003f22 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	2104      	movs	r1, #4
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 fbf1 	bl	80046e4 <TIM_CCxChannelCmd>
      break;
 8003f02:	e00e      	b.n	8003f22 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 fbe9 	bl	80046e4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2201      	movs	r2, #1
 8003f18:	2104      	movs	r1, #4
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 fbe2 	bl	80046e4 <TIM_CCxChannelCmd>
      break;
 8003f20:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f042 0201 	orr.w	r2, r2, #1
 8003f30:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d122      	bne.n	8003f98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d11b      	bne.n	8003f98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f06f 0202 	mvn.w	r2, #2
 8003f68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	f003 0303 	and.w	r3, r3, #3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f9ab 	bl	80042da <HAL_TIM_IC_CaptureCallback>
 8003f84:	e005      	b.n	8003f92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f99e 	bl	80042c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 f9ad 	bl	80042ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	f003 0304 	and.w	r3, r3, #4
 8003fa2:	2b04      	cmp	r3, #4
 8003fa4:	d122      	bne.n	8003fec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	f003 0304 	and.w	r3, r3, #4
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d11b      	bne.n	8003fec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f06f 0204 	mvn.w	r2, #4
 8003fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f981 	bl	80042da <HAL_TIM_IC_CaptureCallback>
 8003fd8:	e005      	b.n	8003fe6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f974 	bl	80042c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 f983 	bl	80042ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	f003 0308 	and.w	r3, r3, #8
 8003ff6:	2b08      	cmp	r3, #8
 8003ff8:	d122      	bne.n	8004040 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	f003 0308 	and.w	r3, r3, #8
 8004004:	2b08      	cmp	r3, #8
 8004006:	d11b      	bne.n	8004040 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f06f 0208 	mvn.w	r2, #8
 8004010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2204      	movs	r2, #4
 8004016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f957 	bl	80042da <HAL_TIM_IC_CaptureCallback>
 800402c:	e005      	b.n	800403a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f94a 	bl	80042c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 f959 	bl	80042ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	f003 0310 	and.w	r3, r3, #16
 800404a:	2b10      	cmp	r3, #16
 800404c:	d122      	bne.n	8004094 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	f003 0310 	and.w	r3, r3, #16
 8004058:	2b10      	cmp	r3, #16
 800405a:	d11b      	bne.n	8004094 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f06f 0210 	mvn.w	r2, #16
 8004064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2208      	movs	r2, #8
 800406a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f92d 	bl	80042da <HAL_TIM_IC_CaptureCallback>
 8004080:	e005      	b.n	800408e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f920 	bl	80042c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 f92f 	bl	80042ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d10e      	bne.n	80040c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d107      	bne.n	80040c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f06f 0201 	mvn.w	r2, #1
 80040b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7fe f834 	bl	8002128 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ca:	2b80      	cmp	r3, #128	; 0x80
 80040cc:	d10e      	bne.n	80040ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d8:	2b80      	cmp	r3, #128	; 0x80
 80040da:	d107      	bne.n	80040ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 fb87 	bl	80047fa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f6:	2b40      	cmp	r3, #64	; 0x40
 80040f8:	d10e      	bne.n	8004118 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004104:	2b40      	cmp	r3, #64	; 0x40
 8004106:	d107      	bne.n	8004118 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f8f3 	bl	80042fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	f003 0320 	and.w	r3, r3, #32
 8004122:	2b20      	cmp	r3, #32
 8004124:	d10e      	bne.n	8004144 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f003 0320 	and.w	r3, r3, #32
 8004130:	2b20      	cmp	r3, #32
 8004132:	d107      	bne.n	8004144 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f06f 0220 	mvn.w	r2, #32
 800413c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 fb52 	bl	80047e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004144:	bf00      	nop
 8004146:	3708      	adds	r7, #8
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800415e:	2b01      	cmp	r3, #1
 8004160:	d101      	bne.n	8004166 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004162:	2302      	movs	r3, #2
 8004164:	e0ac      	b.n	80042c0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b0c      	cmp	r3, #12
 8004172:	f200 809f 	bhi.w	80042b4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004176:	a201      	add	r2, pc, #4	; (adr r2, 800417c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417c:	080041b1 	.word	0x080041b1
 8004180:	080042b5 	.word	0x080042b5
 8004184:	080042b5 	.word	0x080042b5
 8004188:	080042b5 	.word	0x080042b5
 800418c:	080041f1 	.word	0x080041f1
 8004190:	080042b5 	.word	0x080042b5
 8004194:	080042b5 	.word	0x080042b5
 8004198:	080042b5 	.word	0x080042b5
 800419c:	08004233 	.word	0x08004233
 80041a0:	080042b5 	.word	0x080042b5
 80041a4:	080042b5 	.word	0x080042b5
 80041a8:	080042b5 	.word	0x080042b5
 80041ac:	08004273 	.word	0x08004273
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68b9      	ldr	r1, [r7, #8]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f000 f90c 	bl	80043d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	699a      	ldr	r2, [r3, #24]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0208 	orr.w	r2, r2, #8
 80041ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	699a      	ldr	r2, [r3, #24]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0204 	bic.w	r2, r2, #4
 80041da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6999      	ldr	r1, [r3, #24]
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	691a      	ldr	r2, [r3, #16]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	619a      	str	r2, [r3, #24]
      break;
 80041ee:	e062      	b.n	80042b6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68b9      	ldr	r1, [r7, #8]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 f952 	bl	80044a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	699a      	ldr	r2, [r3, #24]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800420a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699a      	ldr	r2, [r3, #24]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800421a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6999      	ldr	r1, [r3, #24]
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	021a      	lsls	r2, r3, #8
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	619a      	str	r2, [r3, #24]
      break;
 8004230:	e041      	b.n	80042b6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68b9      	ldr	r1, [r7, #8]
 8004238:	4618      	mov	r0, r3
 800423a:	f000 f99b 	bl	8004574 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	69da      	ldr	r2, [r3, #28]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f042 0208 	orr.w	r2, r2, #8
 800424c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	69da      	ldr	r2, [r3, #28]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 0204 	bic.w	r2, r2, #4
 800425c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	69d9      	ldr	r1, [r3, #28]
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	691a      	ldr	r2, [r3, #16]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	430a      	orrs	r2, r1
 800426e:	61da      	str	r2, [r3, #28]
      break;
 8004270:	e021      	b.n	80042b6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68b9      	ldr	r1, [r7, #8]
 8004278:	4618      	mov	r0, r3
 800427a:	f000 f9e5 	bl	8004648 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	69da      	ldr	r2, [r3, #28]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800428c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	69da      	ldr	r2, [r3, #28]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800429c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	69d9      	ldr	r1, [r3, #28]
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	021a      	lsls	r2, r3, #8
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	61da      	str	r2, [r3, #28]
      break;
 80042b2:	e000      	b.n	80042b6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80042b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bc80      	pop	{r7}
 80042d8:	4770      	bx	lr

080042da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042e2:	bf00      	nop
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bc80      	pop	{r7}
 80042ea:	4770      	bx	lr

080042ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bc80      	pop	{r7}
 80042fc:	4770      	bx	lr

080042fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042fe:	b480      	push	{r7}
 8004300:	b083      	sub	sp, #12
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004306:	bf00      	nop
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	bc80      	pop	{r7}
 800430e:	4770      	bx	lr

08004310 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a29      	ldr	r2, [pc, #164]	; (80043c8 <TIM_Base_SetConfig+0xb8>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d00b      	beq.n	8004340 <TIM_Base_SetConfig+0x30>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800432e:	d007      	beq.n	8004340 <TIM_Base_SetConfig+0x30>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a26      	ldr	r2, [pc, #152]	; (80043cc <TIM_Base_SetConfig+0xbc>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d003      	beq.n	8004340 <TIM_Base_SetConfig+0x30>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a25      	ldr	r2, [pc, #148]	; (80043d0 <TIM_Base_SetConfig+0xc0>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d108      	bne.n	8004352 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004346:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	4313      	orrs	r3, r2
 8004350:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a1c      	ldr	r2, [pc, #112]	; (80043c8 <TIM_Base_SetConfig+0xb8>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d00b      	beq.n	8004372 <TIM_Base_SetConfig+0x62>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004360:	d007      	beq.n	8004372 <TIM_Base_SetConfig+0x62>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a19      	ldr	r2, [pc, #100]	; (80043cc <TIM_Base_SetConfig+0xbc>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d003      	beq.n	8004372 <TIM_Base_SetConfig+0x62>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a18      	ldr	r2, [pc, #96]	; (80043d0 <TIM_Base_SetConfig+0xc0>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d108      	bne.n	8004384 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004378:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	4313      	orrs	r3, r2
 8004382:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	4313      	orrs	r3, r2
 8004390:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	689a      	ldr	r2, [r3, #8]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a07      	ldr	r2, [pc, #28]	; (80043c8 <TIM_Base_SetConfig+0xb8>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d103      	bne.n	80043b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	691a      	ldr	r2, [r3, #16]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	615a      	str	r2, [r3, #20]
}
 80043be:	bf00      	nop
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bc80      	pop	{r7}
 80043c6:	4770      	bx	lr
 80043c8:	40012c00 	.word	0x40012c00
 80043cc:	40000400 	.word	0x40000400
 80043d0:	40000800 	.word	0x40000800

080043d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b087      	sub	sp, #28
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	f023 0201 	bic.w	r2, r3, #1
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f023 0303 	bic.w	r3, r3, #3
 800440a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	4313      	orrs	r3, r2
 8004414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f023 0302 	bic.w	r3, r3, #2
 800441c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	4313      	orrs	r3, r2
 8004426:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a1c      	ldr	r2, [pc, #112]	; (800449c <TIM_OC1_SetConfig+0xc8>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d10c      	bne.n	800444a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	f023 0308 	bic.w	r3, r3, #8
 8004436:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	4313      	orrs	r3, r2
 8004440:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f023 0304 	bic.w	r3, r3, #4
 8004448:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a13      	ldr	r2, [pc, #76]	; (800449c <TIM_OC1_SetConfig+0xc8>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d111      	bne.n	8004476 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004458:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004460:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	4313      	orrs	r3, r2
 800446a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	4313      	orrs	r3, r2
 8004474:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	621a      	str	r2, [r3, #32]
}
 8004490:	bf00      	nop
 8004492:	371c      	adds	r7, #28
 8004494:	46bd      	mov	sp, r7
 8004496:	bc80      	pop	{r7}
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	40012c00 	.word	0x40012c00

080044a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b087      	sub	sp, #28
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	f023 0210 	bic.w	r2, r3, #16
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	021b      	lsls	r3, r3, #8
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f023 0320 	bic.w	r3, r3, #32
 80044ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	011b      	lsls	r3, r3, #4
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a1d      	ldr	r2, [pc, #116]	; (8004570 <TIM_OC2_SetConfig+0xd0>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d10d      	bne.n	800451c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004506:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	011b      	lsls	r3, r3, #4
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	4313      	orrs	r3, r2
 8004512:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800451a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a14      	ldr	r2, [pc, #80]	; (8004570 <TIM_OC2_SetConfig+0xd0>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d113      	bne.n	800454c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800452a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004532:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	695b      	ldr	r3, [r3, #20]
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	4313      	orrs	r3, r2
 800453e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	4313      	orrs	r3, r2
 800454a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	621a      	str	r2, [r3, #32]
}
 8004566:	bf00      	nop
 8004568:	371c      	adds	r7, #28
 800456a:	46bd      	mov	sp, r7
 800456c:	bc80      	pop	{r7}
 800456e:	4770      	bx	lr
 8004570:	40012c00 	.word	0x40012c00

08004574 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004574:	b480      	push	{r7}
 8004576:	b087      	sub	sp, #28
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f023 0303 	bic.w	r3, r3, #3
 80045aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	021b      	lsls	r3, r3, #8
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a1d      	ldr	r2, [pc, #116]	; (8004644 <TIM_OC3_SetConfig+0xd0>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d10d      	bne.n	80045ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	021b      	lsls	r3, r3, #8
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a14      	ldr	r2, [pc, #80]	; (8004644 <TIM_OC3_SetConfig+0xd0>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d113      	bne.n	800461e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004604:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	011b      	lsls	r3, r3, #4
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	4313      	orrs	r3, r2
 8004610:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	011b      	lsls	r3, r3, #4
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	4313      	orrs	r3, r2
 800461c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	621a      	str	r2, [r3, #32]
}
 8004638:	bf00      	nop
 800463a:	371c      	adds	r7, #28
 800463c:	46bd      	mov	sp, r7
 800463e:	bc80      	pop	{r7}
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	40012c00 	.word	0x40012c00

08004648 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004648:	b480      	push	{r7}
 800464a:	b087      	sub	sp, #28
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800467e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	021b      	lsls	r3, r3, #8
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	4313      	orrs	r3, r2
 800468a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004692:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	031b      	lsls	r3, r3, #12
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	4313      	orrs	r3, r2
 800469e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a0f      	ldr	r2, [pc, #60]	; (80046e0 <TIM_OC4_SetConfig+0x98>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d109      	bne.n	80046bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	019b      	lsls	r3, r3, #6
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	621a      	str	r2, [r3, #32]
}
 80046d6:	bf00      	nop
 80046d8:	371c      	adds	r7, #28
 80046da:	46bd      	mov	sp, r7
 80046dc:	bc80      	pop	{r7}
 80046de:	4770      	bx	lr
 80046e0:	40012c00 	.word	0x40012c00

080046e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b087      	sub	sp, #28
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	f003 031f 	and.w	r3, r3, #31
 80046f6:	2201      	movs	r2, #1
 80046f8:	fa02 f303 	lsl.w	r3, r2, r3
 80046fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6a1a      	ldr	r2, [r3, #32]
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	43db      	mvns	r3, r3
 8004706:	401a      	ands	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6a1a      	ldr	r2, [r3, #32]
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	f003 031f 	and.w	r3, r3, #31
 8004716:	6879      	ldr	r1, [r7, #4]
 8004718:	fa01 f303 	lsl.w	r3, r1, r3
 800471c:	431a      	orrs	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	621a      	str	r2, [r3, #32]
}
 8004722:	bf00      	nop
 8004724:	371c      	adds	r7, #28
 8004726:	46bd      	mov	sp, r7
 8004728:	bc80      	pop	{r7}
 800472a:	4770      	bx	lr

0800472c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800473c:	2b01      	cmp	r3, #1
 800473e:	d101      	bne.n	8004744 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004740:	2302      	movs	r3, #2
 8004742:	e046      	b.n	80047d2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2202      	movs	r2, #2
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800476a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	4313      	orrs	r3, r2
 8004774:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a16      	ldr	r2, [pc, #88]	; (80047dc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d00e      	beq.n	80047a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004790:	d009      	beq.n	80047a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a12      	ldr	r2, [pc, #72]	; (80047e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d004      	beq.n	80047a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a10      	ldr	r2, [pc, #64]	; (80047e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d10c      	bne.n	80047c0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3714      	adds	r7, #20
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bc80      	pop	{r7}
 80047da:	4770      	bx	lr
 80047dc:	40012c00 	.word	0x40012c00
 80047e0:	40000400 	.word	0x40000400
 80047e4:	40000800 	.word	0x40000800

080047e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bc80      	pop	{r7}
 80047f8:	4770      	bx	lr

080047fa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b083      	sub	sp, #12
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004802:	bf00      	nop
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	bc80      	pop	{r7}
 800480a:	4770      	bx	lr

0800480c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e03f      	b.n	800489e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d106      	bne.n	8004838 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7fc ffa8 	bl	8001788 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2224      	movs	r2, #36	; 0x24
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800484e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 fb49 	bl	8004ee8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	691a      	ldr	r2, [r3, #16]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004864:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	695a      	ldr	r2, [r3, #20]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004874:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68da      	ldr	r2, [r3, #12]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004884:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2220      	movs	r2, #32
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2220      	movs	r2, #32
 8004898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
	...

080048a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b08a      	sub	sp, #40	; 0x28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80048c8:	2300      	movs	r3, #0
 80048ca:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d2:	f003 030f 	and.w	r3, r3, #15
 80048d6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d10d      	bne.n	80048fa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e0:	f003 0320 	and.w	r3, r3, #32
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d008      	beq.n	80048fa <HAL_UART_IRQHandler+0x52>
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	f003 0320 	and.w	r3, r3, #32
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d003      	beq.n	80048fa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 fa4f 	bl	8004d96 <UART_Receive_IT>
      return;
 80048f8:	e17b      	b.n	8004bf2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 80b1 	beq.w	8004a64 <HAL_UART_IRQHandler+0x1bc>
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	2b00      	cmp	r3, #0
 800490a:	d105      	bne.n	8004918 <HAL_UART_IRQHandler+0x70>
 800490c:	6a3b      	ldr	r3, [r7, #32]
 800490e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004912:	2b00      	cmp	r3, #0
 8004914:	f000 80a6 	beq.w	8004a64 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00a      	beq.n	8004938 <HAL_UART_IRQHandler+0x90>
 8004922:	6a3b      	ldr	r3, [r7, #32]
 8004924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004928:	2b00      	cmp	r3, #0
 800492a:	d005      	beq.n	8004938 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004930:	f043 0201 	orr.w	r2, r3, #1
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493a:	f003 0304 	and.w	r3, r3, #4
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00a      	beq.n	8004958 <HAL_UART_IRQHandler+0xb0>
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	2b00      	cmp	r3, #0
 800494a:	d005      	beq.n	8004958 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004950:	f043 0202 	orr.w	r2, r3, #2
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00a      	beq.n	8004978 <HAL_UART_IRQHandler+0xd0>
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	2b00      	cmp	r3, #0
 800496a:	d005      	beq.n	8004978 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004970:	f043 0204 	orr.w	r2, r3, #4
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497a:	f003 0308 	and.w	r3, r3, #8
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00f      	beq.n	80049a2 <HAL_UART_IRQHandler+0xfa>
 8004982:	6a3b      	ldr	r3, [r7, #32]
 8004984:	f003 0320 	and.w	r3, r3, #32
 8004988:	2b00      	cmp	r3, #0
 800498a:	d104      	bne.n	8004996 <HAL_UART_IRQHandler+0xee>
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	d005      	beq.n	80049a2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499a:	f043 0208 	orr.w	r2, r3, #8
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f000 811e 	beq.w	8004be8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ae:	f003 0320 	and.w	r3, r3, #32
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d007      	beq.n	80049c6 <HAL_UART_IRQHandler+0x11e>
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	f003 0320 	and.w	r3, r3, #32
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d002      	beq.n	80049c6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f9e8 	bl	8004d96 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	bf14      	ite	ne
 80049d4:	2301      	movne	r3, #1
 80049d6:	2300      	moveq	r3, #0
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e0:	f003 0308 	and.w	r3, r3, #8
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d102      	bne.n	80049ee <HAL_UART_IRQHandler+0x146>
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d031      	beq.n	8004a52 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f92a 	bl	8004c48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d023      	beq.n	8004a4a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	695a      	ldr	r2, [r3, #20]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a10:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d013      	beq.n	8004a42 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1e:	4a76      	ldr	r2, [pc, #472]	; (8004bf8 <HAL_UART_IRQHandler+0x350>)
 8004a20:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7fe f9a0 	bl	8002d6c <HAL_DMA_Abort_IT>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d016      	beq.n	8004a60 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a3c:	4610      	mov	r0, r2
 8004a3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a40:	e00e      	b.n	8004a60 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f8ec 	bl	8004c20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a48:	e00a      	b.n	8004a60 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f8e8 	bl	8004c20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a50:	e006      	b.n	8004a60 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f8e4 	bl	8004c20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004a5e:	e0c3      	b.n	8004be8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a60:	bf00      	nop
    return;
 8004a62:	e0c1      	b.n	8004be8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	f040 80a1 	bne.w	8004bb0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	f003 0310 	and.w	r3, r3, #16
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f000 809b 	beq.w	8004bb0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004a7a:	6a3b      	ldr	r3, [r7, #32]
 8004a7c:	f003 0310 	and.w	r3, r3, #16
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f000 8095 	beq.w	8004bb0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a86:	2300      	movs	r3, #0
 8004a88:	60fb      	str	r3, [r7, #12]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	60fb      	str	r3, [r7, #12]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	60fb      	str	r3, [r7, #12]
 8004a9a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d04e      	beq.n	8004b48 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004ab4:	8a3b      	ldrh	r3, [r7, #16]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f000 8098 	beq.w	8004bec <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ac0:	8a3a      	ldrh	r2, [r7, #16]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	f080 8092 	bcs.w	8004bec <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	8a3a      	ldrh	r2, [r7, #16]
 8004acc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	2b20      	cmp	r3, #32
 8004ad6:	d02b      	beq.n	8004b30 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68da      	ldr	r2, [r3, #12]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ae6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	695a      	ldr	r2, [r3, #20]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 0201 	bic.w	r2, r2, #1
 8004af6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	695a      	ldr	r2, [r3, #20]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b06:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68da      	ldr	r2, [r3, #12]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 0210 	bic.w	r2, r2, #16
 8004b24:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fe f8e3 	bl	8002cf6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	4619      	mov	r1, r3
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f876 	bl	8004c32 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004b46:	e051      	b.n	8004bec <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d047      	beq.n	8004bf0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004b60:	8a7b      	ldrh	r3, [r7, #18]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d044      	beq.n	8004bf0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68da      	ldr	r2, [r3, #12]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004b74:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	695a      	ldr	r2, [r3, #20]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 0201 	bic.w	r2, r2, #1
 8004b84:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68da      	ldr	r2, [r3, #12]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f022 0210 	bic.w	r2, r2, #16
 8004ba2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ba4:	8a7b      	ldrh	r3, [r7, #18]
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 f842 	bl	8004c32 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004bae:	e01f      	b.n	8004bf0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d008      	beq.n	8004bcc <HAL_UART_IRQHandler+0x324>
 8004bba:	6a3b      	ldr	r3, [r7, #32]
 8004bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d003      	beq.n	8004bcc <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f87f 	bl	8004cc8 <UART_Transmit_IT>
    return;
 8004bca:	e012      	b.n	8004bf2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00d      	beq.n	8004bf2 <HAL_UART_IRQHandler+0x34a>
 8004bd6:	6a3b      	ldr	r3, [r7, #32]
 8004bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d008      	beq.n	8004bf2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 f8c0 	bl	8004d66 <UART_EndTransmit_IT>
    return;
 8004be6:	e004      	b.n	8004bf2 <HAL_UART_IRQHandler+0x34a>
    return;
 8004be8:	bf00      	nop
 8004bea:	e002      	b.n	8004bf2 <HAL_UART_IRQHandler+0x34a>
      return;
 8004bec:	bf00      	nop
 8004bee:	e000      	b.n	8004bf2 <HAL_UART_IRQHandler+0x34a>
      return;
 8004bf0:	bf00      	nop
  }
}
 8004bf2:	3728      	adds	r7, #40	; 0x28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	08004ca1 	.word	0x08004ca1

08004bfc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bc80      	pop	{r7}
 8004c0c:	4770      	bx	lr

08004c0e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b083      	sub	sp, #12
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004c16:	bf00      	nop
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bc80      	pop	{r7}
 8004c1e:	4770      	bx	lr

08004c20 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bc80      	pop	{r7}
 8004c30:	4770      	bx	lr

08004c32 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c32:	b480      	push	{r7}
 8004c34:	b083      	sub	sp, #12
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c3e:	bf00      	nop
 8004c40:	370c      	adds	r7, #12
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bc80      	pop	{r7}
 8004c46:	4770      	bx	lr

08004c48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68da      	ldr	r2, [r3, #12]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004c5e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	695a      	ldr	r2, [r3, #20]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f022 0201 	bic.w	r2, r2, #1
 8004c6e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d107      	bne.n	8004c88 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68da      	ldr	r2, [r3, #12]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 0210 	bic.w	r2, r2, #16
 8004c86:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004c96:	bf00      	nop
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bc80      	pop	{r7}
 8004c9e:	4770      	bx	lr

08004ca0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f7ff ffb0 	bl	8004c20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cc0:	bf00      	nop
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b21      	cmp	r3, #33	; 0x21
 8004cda:	d13e      	bne.n	8004d5a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce4:	d114      	bne.n	8004d10 <UART_Transmit_IT+0x48>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d110      	bne.n	8004d10 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	881b      	ldrh	r3, [r3, #0]
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d02:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	1c9a      	adds	r2, r3, #2
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	621a      	str	r2, [r3, #32]
 8004d0e:	e008      	b.n	8004d22 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	1c59      	adds	r1, r3, #1
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	6211      	str	r1, [r2, #32]
 8004d1a:	781a      	ldrb	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	4619      	mov	r1, r3
 8004d30:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10f      	bne.n	8004d56 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68da      	ldr	r2, [r3, #12]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d44:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68da      	ldr	r2, [r3, #12]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d54:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d56:	2300      	movs	r3, #0
 8004d58:	e000      	b.n	8004d5c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d5a:	2302      	movs	r3, #2
  }
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3714      	adds	r7, #20
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bc80      	pop	{r7}
 8004d64:	4770      	bx	lr

08004d66 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b082      	sub	sp, #8
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68da      	ldr	r2, [r3, #12]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d7c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2220      	movs	r2, #32
 8004d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7ff ff38 	bl	8004bfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3708      	adds	r7, #8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b086      	sub	sp, #24
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b22      	cmp	r3, #34	; 0x22
 8004da8:	f040 8099 	bne.w	8004ede <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004db4:	d117      	bne.n	8004de6 <UART_Receive_IT+0x50>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d113      	bne.n	8004de6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dde:	1c9a      	adds	r2, r3, #2
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	629a      	str	r2, [r3, #40]	; 0x28
 8004de4:	e026      	b.n	8004e34 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dea:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004dec:	2300      	movs	r3, #0
 8004dee:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df8:	d007      	beq.n	8004e0a <UART_Receive_IT+0x74>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10a      	bne.n	8004e18 <UART_Receive_IT+0x82>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d106      	bne.n	8004e18 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	b2da      	uxtb	r2, r3
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	701a      	strb	r2, [r3, #0]
 8004e16:	e008      	b.n	8004e2a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e24:	b2da      	uxtb	r2, r3
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e2e:	1c5a      	adds	r2, r3, #1
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	4619      	mov	r1, r3
 8004e42:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d148      	bne.n	8004eda <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68da      	ldr	r2, [r3, #12]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0220 	bic.w	r2, r2, #32
 8004e56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68da      	ldr	r2, [r3, #12]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	695a      	ldr	r2, [r3, #20]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 0201 	bic.w	r2, r2, #1
 8004e76:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d123      	bne.n	8004ed0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0210 	bic.w	r2, r2, #16
 8004e9c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0310 	and.w	r3, r3, #16
 8004ea8:	2b10      	cmp	r3, #16
 8004eaa:	d10a      	bne.n	8004ec2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004eac:	2300      	movs	r3, #0
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	60fb      	str	r3, [r7, #12]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f7ff feb2 	bl	8004c32 <HAL_UARTEx_RxEventCallback>
 8004ece:	e002      	b.n	8004ed6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f7ff fe9c 	bl	8004c0e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	e002      	b.n	8004ee0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004eda:	2300      	movs	r3, #0
 8004edc:	e000      	b.n	8004ee0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004ede:	2302      	movs	r3, #2
  }
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3718      	adds	r7, #24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68da      	ldr	r2, [r3, #12]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	689a      	ldr	r2, [r3, #8]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	431a      	orrs	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004f22:	f023 030c 	bic.w	r3, r3, #12
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	6812      	ldr	r2, [r2, #0]
 8004f2a:	68b9      	ldr	r1, [r7, #8]
 8004f2c:	430b      	orrs	r3, r1
 8004f2e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	699a      	ldr	r2, [r3, #24]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a2c      	ldr	r2, [pc, #176]	; (8004ffc <UART_SetConfig+0x114>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d103      	bne.n	8004f58 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004f50:	f7fe fd4e 	bl	80039f0 <HAL_RCC_GetPCLK2Freq>
 8004f54:	60f8      	str	r0, [r7, #12]
 8004f56:	e002      	b.n	8004f5e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004f58:	f7fe fd36 	bl	80039c8 <HAL_RCC_GetPCLK1Freq>
 8004f5c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	4613      	mov	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	4413      	add	r3, r2
 8004f66:	009a      	lsls	r2, r3, #2
 8004f68:	441a      	add	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f74:	4a22      	ldr	r2, [pc, #136]	; (8005000 <UART_SetConfig+0x118>)
 8004f76:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7a:	095b      	lsrs	r3, r3, #5
 8004f7c:	0119      	lsls	r1, r3, #4
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	4613      	mov	r3, r2
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4413      	add	r3, r2
 8004f86:	009a      	lsls	r2, r3, #2
 8004f88:	441a      	add	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f94:	4b1a      	ldr	r3, [pc, #104]	; (8005000 <UART_SetConfig+0x118>)
 8004f96:	fba3 0302 	umull	r0, r3, r3, r2
 8004f9a:	095b      	lsrs	r3, r3, #5
 8004f9c:	2064      	movs	r0, #100	; 0x64
 8004f9e:	fb00 f303 	mul.w	r3, r0, r3
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	011b      	lsls	r3, r3, #4
 8004fa6:	3332      	adds	r3, #50	; 0x32
 8004fa8:	4a15      	ldr	r2, [pc, #84]	; (8005000 <UART_SetConfig+0x118>)
 8004faa:	fba2 2303 	umull	r2, r3, r2, r3
 8004fae:	095b      	lsrs	r3, r3, #5
 8004fb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fb4:	4419      	add	r1, r3
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	4413      	add	r3, r2
 8004fbe:	009a      	lsls	r2, r3, #2
 8004fc0:	441a      	add	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fcc:	4b0c      	ldr	r3, [pc, #48]	; (8005000 <UART_SetConfig+0x118>)
 8004fce:	fba3 0302 	umull	r0, r3, r3, r2
 8004fd2:	095b      	lsrs	r3, r3, #5
 8004fd4:	2064      	movs	r0, #100	; 0x64
 8004fd6:	fb00 f303 	mul.w	r3, r0, r3
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	011b      	lsls	r3, r3, #4
 8004fde:	3332      	adds	r3, #50	; 0x32
 8004fe0:	4a07      	ldr	r2, [pc, #28]	; (8005000 <UART_SetConfig+0x118>)
 8004fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe6:	095b      	lsrs	r3, r3, #5
 8004fe8:	f003 020f 	and.w	r2, r3, #15
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	440a      	add	r2, r1
 8004ff2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004ff4:	bf00      	nop
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	40013800 	.word	0x40013800
 8005000:	51eb851f 	.word	0x51eb851f

08005004 <__libc_init_array>:
 8005004:	b570      	push	{r4, r5, r6, lr}
 8005006:	2600      	movs	r6, #0
 8005008:	4d0c      	ldr	r5, [pc, #48]	; (800503c <__libc_init_array+0x38>)
 800500a:	4c0d      	ldr	r4, [pc, #52]	; (8005040 <__libc_init_array+0x3c>)
 800500c:	1b64      	subs	r4, r4, r5
 800500e:	10a4      	asrs	r4, r4, #2
 8005010:	42a6      	cmp	r6, r4
 8005012:	d109      	bne.n	8005028 <__libc_init_array+0x24>
 8005014:	f000 f822 	bl	800505c <_init>
 8005018:	2600      	movs	r6, #0
 800501a:	4d0a      	ldr	r5, [pc, #40]	; (8005044 <__libc_init_array+0x40>)
 800501c:	4c0a      	ldr	r4, [pc, #40]	; (8005048 <__libc_init_array+0x44>)
 800501e:	1b64      	subs	r4, r4, r5
 8005020:	10a4      	asrs	r4, r4, #2
 8005022:	42a6      	cmp	r6, r4
 8005024:	d105      	bne.n	8005032 <__libc_init_array+0x2e>
 8005026:	bd70      	pop	{r4, r5, r6, pc}
 8005028:	f855 3b04 	ldr.w	r3, [r5], #4
 800502c:	4798      	blx	r3
 800502e:	3601      	adds	r6, #1
 8005030:	e7ee      	b.n	8005010 <__libc_init_array+0xc>
 8005032:	f855 3b04 	ldr.w	r3, [r5], #4
 8005036:	4798      	blx	r3
 8005038:	3601      	adds	r6, #1
 800503a:	e7f2      	b.n	8005022 <__libc_init_array+0x1e>
 800503c:	0800509c 	.word	0x0800509c
 8005040:	0800509c 	.word	0x0800509c
 8005044:	0800509c 	.word	0x0800509c
 8005048:	080050a0 	.word	0x080050a0

0800504c <memset>:
 800504c:	4603      	mov	r3, r0
 800504e:	4402      	add	r2, r0
 8005050:	4293      	cmp	r3, r2
 8005052:	d100      	bne.n	8005056 <memset+0xa>
 8005054:	4770      	bx	lr
 8005056:	f803 1b01 	strb.w	r1, [r3], #1
 800505a:	e7f9      	b.n	8005050 <memset+0x4>

0800505c <_init>:
 800505c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800505e:	bf00      	nop
 8005060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005062:	bc08      	pop	{r3}
 8005064:	469e      	mov	lr, r3
 8005066:	4770      	bx	lr

08005068 <_fini>:
 8005068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800506a:	bf00      	nop
 800506c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800506e:	bc08      	pop	{r3}
 8005070:	469e      	mov	lr, r3
 8005072:	4770      	bx	lr
