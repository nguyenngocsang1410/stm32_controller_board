
Re_Project_Glove_Cut.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006074  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08006184  08006184  00016184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062a0  080062a0  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  080062a0  080062a0  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080062a0  080062a0  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062a0  080062a0  000162a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062a4  080062a4  000162a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080062a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  20000090  08006334  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  08006334  00020310  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e4ec  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024cb  00000000  00000000  0002e5a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  00030a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e40  00000000  00000000  00031988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018aca  00000000  00000000  000327c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010df5  00000000  00000000  0004b292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c675  00000000  00000000  0005c087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e86fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045d8  00000000  00000000  000e874c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000090 	.word	0x20000090
 800012c:	00000000 	.word	0x00000000
 8000130:	0800616c 	.word	0x0800616c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000094 	.word	0x20000094
 800014c:	0800616c 	.word	0x0800616c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_d2f>:
 800093c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000944:	bf24      	itt	cs
 8000946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800094a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800094e:	d90d      	bls.n	800096c <__aeabi_d2f+0x30>
 8000950:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800095c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000964:	bf08      	it	eq
 8000966:	f020 0001 	biceq.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000970:	d121      	bne.n	80009b6 <__aeabi_d2f+0x7a>
 8000972:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000976:	bfbc      	itt	lt
 8000978:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800097c:	4770      	bxlt	lr
 800097e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000982:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000986:	f1c2 0218 	rsb	r2, r2, #24
 800098a:	f1c2 0c20 	rsb	ip, r2, #32
 800098e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000992:	fa20 f002 	lsr.w	r0, r0, r2
 8000996:	bf18      	it	ne
 8000998:	f040 0001 	orrne.w	r0, r0, #1
 800099c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a8:	ea40 000c 	orr.w	r0, r0, ip
 80009ac:	fa23 f302 	lsr.w	r3, r3, r2
 80009b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b4:	e7cc      	b.n	8000950 <__aeabi_d2f+0x14>
 80009b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ba:	d107      	bne.n	80009cc <__aeabi_d2f+0x90>
 80009bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009c0:	bf1e      	ittt	ne
 80009c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ca:	4770      	bxne	lr
 80009cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_frsub>:
 80009dc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009e0:	e002      	b.n	80009e8 <__addsf3>
 80009e2:	bf00      	nop

080009e4 <__aeabi_fsub>:
 80009e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009e8 <__addsf3>:
 80009e8:	0042      	lsls	r2, r0, #1
 80009ea:	bf1f      	itttt	ne
 80009ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009f0:	ea92 0f03 	teqne	r2, r3
 80009f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009fc:	d06a      	beq.n	8000ad4 <__addsf3+0xec>
 80009fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a06:	bfc1      	itttt	gt
 8000a08:	18d2      	addgt	r2, r2, r3
 8000a0a:	4041      	eorgt	r1, r0
 8000a0c:	4048      	eorgt	r0, r1
 8000a0e:	4041      	eorgt	r1, r0
 8000a10:	bfb8      	it	lt
 8000a12:	425b      	neglt	r3, r3
 8000a14:	2b19      	cmp	r3, #25
 8000a16:	bf88      	it	hi
 8000a18:	4770      	bxhi	lr
 8000a1a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a2e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4249      	negne	r1, r1
 8000a3a:	ea92 0f03 	teq	r2, r3
 8000a3e:	d03f      	beq.n	8000ac0 <__addsf3+0xd8>
 8000a40:	f1a2 0201 	sub.w	r2, r2, #1
 8000a44:	fa41 fc03 	asr.w	ip, r1, r3
 8000a48:	eb10 000c 	adds.w	r0, r0, ip
 8000a4c:	f1c3 0320 	rsb	r3, r3, #32
 8000a50:	fa01 f103 	lsl.w	r1, r1, r3
 8000a54:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a58:	d502      	bpl.n	8000a60 <__addsf3+0x78>
 8000a5a:	4249      	negs	r1, r1
 8000a5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a64:	d313      	bcc.n	8000a8e <__addsf3+0xa6>
 8000a66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a6a:	d306      	bcc.n	8000a7a <__addsf3+0x92>
 8000a6c:	0840      	lsrs	r0, r0, #1
 8000a6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a72:	f102 0201 	add.w	r2, r2, #1
 8000a76:	2afe      	cmp	r2, #254	; 0xfe
 8000a78:	d251      	bcs.n	8000b1e <__addsf3+0x136>
 8000a7a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a82:	bf08      	it	eq
 8000a84:	f020 0001 	biceq.w	r0, r0, #1
 8000a88:	ea40 0003 	orr.w	r0, r0, r3
 8000a8c:	4770      	bx	lr
 8000a8e:	0049      	lsls	r1, r1, #1
 8000a90:	eb40 0000 	adc.w	r0, r0, r0
 8000a94:	3a01      	subs	r2, #1
 8000a96:	bf28      	it	cs
 8000a98:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a9c:	d2ed      	bcs.n	8000a7a <__addsf3+0x92>
 8000a9e:	fab0 fc80 	clz	ip, r0
 8000aa2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000aa6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aaa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aae:	bfaa      	itet	ge
 8000ab0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ab4:	4252      	neglt	r2, r2
 8000ab6:	4318      	orrge	r0, r3
 8000ab8:	bfbc      	itt	lt
 8000aba:	40d0      	lsrlt	r0, r2
 8000abc:	4318      	orrlt	r0, r3
 8000abe:	4770      	bx	lr
 8000ac0:	f092 0f00 	teq	r2, #0
 8000ac4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ac8:	bf06      	itte	eq
 8000aca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ace:	3201      	addeq	r2, #1
 8000ad0:	3b01      	subne	r3, #1
 8000ad2:	e7b5      	b.n	8000a40 <__addsf3+0x58>
 8000ad4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ad8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000adc:	bf18      	it	ne
 8000ade:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae2:	d021      	beq.n	8000b28 <__addsf3+0x140>
 8000ae4:	ea92 0f03 	teq	r2, r3
 8000ae8:	d004      	beq.n	8000af4 <__addsf3+0x10c>
 8000aea:	f092 0f00 	teq	r2, #0
 8000aee:	bf08      	it	eq
 8000af0:	4608      	moveq	r0, r1
 8000af2:	4770      	bx	lr
 8000af4:	ea90 0f01 	teq	r0, r1
 8000af8:	bf1c      	itt	ne
 8000afa:	2000      	movne	r0, #0
 8000afc:	4770      	bxne	lr
 8000afe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b02:	d104      	bne.n	8000b0e <__addsf3+0x126>
 8000b04:	0040      	lsls	r0, r0, #1
 8000b06:	bf28      	it	cs
 8000b08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b0c:	4770      	bx	lr
 8000b0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b12:	bf3c      	itt	cc
 8000b14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b18:	4770      	bxcc	lr
 8000b1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b26:	4770      	bx	lr
 8000b28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b2c:	bf16      	itet	ne
 8000b2e:	4608      	movne	r0, r1
 8000b30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b34:	4601      	movne	r1, r0
 8000b36:	0242      	lsls	r2, r0, #9
 8000b38:	bf06      	itte	eq
 8000b3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b3e:	ea90 0f01 	teqeq	r0, r1
 8000b42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_ui2f>:
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	e004      	b.n	8000b58 <__aeabi_i2f+0x8>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_i2f>:
 8000b50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b54:	bf48      	it	mi
 8000b56:	4240      	negmi	r0, r0
 8000b58:	ea5f 0c00 	movs.w	ip, r0
 8000b5c:	bf08      	it	eq
 8000b5e:	4770      	bxeq	lr
 8000b60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b64:	4601      	mov	r1, r0
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	e01c      	b.n	8000ba6 <__aeabi_l2f+0x2a>

08000b6c <__aeabi_ul2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	e00a      	b.n	8000b90 <__aeabi_l2f+0x14>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_l2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b88:	d502      	bpl.n	8000b90 <__aeabi_l2f+0x14>
 8000b8a:	4240      	negs	r0, r0
 8000b8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b90:	ea5f 0c01 	movs.w	ip, r1
 8000b94:	bf02      	ittt	eq
 8000b96:	4684      	moveq	ip, r0
 8000b98:	4601      	moveq	r1, r0
 8000b9a:	2000      	moveq	r0, #0
 8000b9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000baa:	fabc f28c 	clz	r2, ip
 8000bae:	3a08      	subs	r2, #8
 8000bb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bb4:	db10      	blt.n	8000bd8 <__aeabi_l2f+0x5c>
 8000bb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bba:	4463      	add	r3, ip
 8000bbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bc0:	f1c2 0220 	rsb	r2, r2, #32
 8000bc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bcc:	eb43 0002 	adc.w	r0, r3, r2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f102 0220 	add.w	r2, r2, #32
 8000bdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000be0:	f1c2 0220 	rsb	r2, r2, #32
 8000be4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000be8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bec:	eb43 0002 	adc.w	r0, r3, r2
 8000bf0:	bf08      	it	eq
 8000bf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_fmul>:
 8000bf8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c00:	bf1e      	ittt	ne
 8000c02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c06:	ea92 0f0c 	teqne	r2, ip
 8000c0a:	ea93 0f0c 	teqne	r3, ip
 8000c0e:	d06f      	beq.n	8000cf0 <__aeabi_fmul+0xf8>
 8000c10:	441a      	add	r2, r3
 8000c12:	ea80 0c01 	eor.w	ip, r0, r1
 8000c16:	0240      	lsls	r0, r0, #9
 8000c18:	bf18      	it	ne
 8000c1a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c1e:	d01e      	beq.n	8000c5e <__aeabi_fmul+0x66>
 8000c20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c24:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c28:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c2c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c34:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c38:	bf3e      	ittt	cc
 8000c3a:	0049      	lslcc	r1, r1, #1
 8000c3c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c40:	005b      	lslcc	r3, r3, #1
 8000c42:	ea40 0001 	orr.w	r0, r0, r1
 8000c46:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c4a:	2afd      	cmp	r2, #253	; 0xfd
 8000c4c:	d81d      	bhi.n	8000c8a <__aeabi_fmul+0x92>
 8000c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c56:	bf08      	it	eq
 8000c58:	f020 0001 	biceq.w	r0, r0, #1
 8000c5c:	4770      	bx	lr
 8000c5e:	f090 0f00 	teq	r0, #0
 8000c62:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c66:	bf08      	it	eq
 8000c68:	0249      	lsleq	r1, r1, #9
 8000c6a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c6e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c72:	3a7f      	subs	r2, #127	; 0x7f
 8000c74:	bfc2      	ittt	gt
 8000c76:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c7a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c7e:	4770      	bxgt	lr
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	dc5d      	bgt.n	8000d48 <__aeabi_fmul+0x150>
 8000c8c:	f112 0f19 	cmn.w	r2, #25
 8000c90:	bfdc      	itt	le
 8000c92:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c96:	4770      	bxle	lr
 8000c98:	f1c2 0200 	rsb	r2, r2, #0
 8000c9c:	0041      	lsls	r1, r0, #1
 8000c9e:	fa21 f102 	lsr.w	r1, r1, r2
 8000ca2:	f1c2 0220 	rsb	r2, r2, #32
 8000ca6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000caa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cae:	f140 0000 	adc.w	r0, r0, #0
 8000cb2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cb6:	bf08      	it	eq
 8000cb8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cbc:	4770      	bx	lr
 8000cbe:	f092 0f00 	teq	r2, #0
 8000cc2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cc6:	bf02      	ittt	eq
 8000cc8:	0040      	lsleq	r0, r0, #1
 8000cca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cce:	3a01      	subeq	r2, #1
 8000cd0:	d0f9      	beq.n	8000cc6 <__aeabi_fmul+0xce>
 8000cd2:	ea40 000c 	orr.w	r0, r0, ip
 8000cd6:	f093 0f00 	teq	r3, #0
 8000cda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cde:	bf02      	ittt	eq
 8000ce0:	0049      	lsleq	r1, r1, #1
 8000ce2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ce6:	3b01      	subeq	r3, #1
 8000ce8:	d0f9      	beq.n	8000cde <__aeabi_fmul+0xe6>
 8000cea:	ea41 010c 	orr.w	r1, r1, ip
 8000cee:	e78f      	b.n	8000c10 <__aeabi_fmul+0x18>
 8000cf0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cf4:	ea92 0f0c 	teq	r2, ip
 8000cf8:	bf18      	it	ne
 8000cfa:	ea93 0f0c 	teqne	r3, ip
 8000cfe:	d00a      	beq.n	8000d16 <__aeabi_fmul+0x11e>
 8000d00:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d04:	bf18      	it	ne
 8000d06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d0a:	d1d8      	bne.n	8000cbe <__aeabi_fmul+0xc6>
 8000d0c:	ea80 0001 	eor.w	r0, r0, r1
 8000d10:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d14:	4770      	bx	lr
 8000d16:	f090 0f00 	teq	r0, #0
 8000d1a:	bf17      	itett	ne
 8000d1c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d20:	4608      	moveq	r0, r1
 8000d22:	f091 0f00 	teqne	r1, #0
 8000d26:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d2a:	d014      	beq.n	8000d56 <__aeabi_fmul+0x15e>
 8000d2c:	ea92 0f0c 	teq	r2, ip
 8000d30:	d101      	bne.n	8000d36 <__aeabi_fmul+0x13e>
 8000d32:	0242      	lsls	r2, r0, #9
 8000d34:	d10f      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d36:	ea93 0f0c 	teq	r3, ip
 8000d3a:	d103      	bne.n	8000d44 <__aeabi_fmul+0x14c>
 8000d3c:	024b      	lsls	r3, r1, #9
 8000d3e:	bf18      	it	ne
 8000d40:	4608      	movne	r0, r1
 8000d42:	d108      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d44:	ea80 0001 	eor.w	r0, r0, r1
 8000d48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d54:	4770      	bx	lr
 8000d56:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d5a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_fdiv>:
 8000d60:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d68:	bf1e      	ittt	ne
 8000d6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d6e:	ea92 0f0c 	teqne	r2, ip
 8000d72:	ea93 0f0c 	teqne	r3, ip
 8000d76:	d069      	beq.n	8000e4c <__aeabi_fdiv+0xec>
 8000d78:	eba2 0203 	sub.w	r2, r2, r3
 8000d7c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d80:	0249      	lsls	r1, r1, #9
 8000d82:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d86:	d037      	beq.n	8000df8 <__aeabi_fdiv+0x98>
 8000d88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d8c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	bf38      	it	cc
 8000d9c:	005b      	lslcc	r3, r3, #1
 8000d9e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000da2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000da6:	428b      	cmp	r3, r1
 8000da8:	bf24      	itt	cs
 8000daa:	1a5b      	subcs	r3, r3, r1
 8000dac:	ea40 000c 	orrcs.w	r0, r0, ip
 8000db0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000db4:	bf24      	itt	cs
 8000db6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dbe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dc2:	bf24      	itt	cs
 8000dc4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dc8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dcc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dd0:	bf24      	itt	cs
 8000dd2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dd6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dda:	011b      	lsls	r3, r3, #4
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000de2:	d1e0      	bne.n	8000da6 <__aeabi_fdiv+0x46>
 8000de4:	2afd      	cmp	r2, #253	; 0xfd
 8000de6:	f63f af50 	bhi.w	8000c8a <__aeabi_fmul+0x92>
 8000dea:	428b      	cmp	r3, r1
 8000dec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df0:	bf08      	it	eq
 8000df2:	f020 0001 	biceq.w	r0, r0, #1
 8000df6:	4770      	bx	lr
 8000df8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dfc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e00:	327f      	adds	r2, #127	; 0x7f
 8000e02:	bfc2      	ittt	gt
 8000e04:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0c:	4770      	bxgt	lr
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e12:	f04f 0300 	mov.w	r3, #0
 8000e16:	3a01      	subs	r2, #1
 8000e18:	e737      	b.n	8000c8a <__aeabi_fmul+0x92>
 8000e1a:	f092 0f00 	teq	r2, #0
 8000e1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e22:	bf02      	ittt	eq
 8000e24:	0040      	lsleq	r0, r0, #1
 8000e26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e2a:	3a01      	subeq	r2, #1
 8000e2c:	d0f9      	beq.n	8000e22 <__aeabi_fdiv+0xc2>
 8000e2e:	ea40 000c 	orr.w	r0, r0, ip
 8000e32:	f093 0f00 	teq	r3, #0
 8000e36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0049      	lsleq	r1, r1, #1
 8000e3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e42:	3b01      	subeq	r3, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fdiv+0xda>
 8000e46:	ea41 010c 	orr.w	r1, r1, ip
 8000e4a:	e795      	b.n	8000d78 <__aeabi_fdiv+0x18>
 8000e4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e50:	ea92 0f0c 	teq	r2, ip
 8000e54:	d108      	bne.n	8000e68 <__aeabi_fdiv+0x108>
 8000e56:	0242      	lsls	r2, r0, #9
 8000e58:	f47f af7d 	bne.w	8000d56 <__aeabi_fmul+0x15e>
 8000e5c:	ea93 0f0c 	teq	r3, ip
 8000e60:	f47f af70 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e776      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e68:	ea93 0f0c 	teq	r3, ip
 8000e6c:	d104      	bne.n	8000e78 <__aeabi_fdiv+0x118>
 8000e6e:	024b      	lsls	r3, r1, #9
 8000e70:	f43f af4c 	beq.w	8000d0c <__aeabi_fmul+0x114>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e76e      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e78:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e7c:	bf18      	it	ne
 8000e7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e82:	d1ca      	bne.n	8000e1a <__aeabi_fdiv+0xba>
 8000e84:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e88:	f47f af5c 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e8c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e90:	f47f af3c 	bne.w	8000d0c <__aeabi_fmul+0x114>
 8000e94:	e75f      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e96:	bf00      	nop

08000e98 <__gesf2>:
 8000e98:	f04f 3cff 	mov.w	ip, #4294967295
 8000e9c:	e006      	b.n	8000eac <__cmpsf2+0x4>
 8000e9e:	bf00      	nop

08000ea0 <__lesf2>:
 8000ea0:	f04f 0c01 	mov.w	ip, #1
 8000ea4:	e002      	b.n	8000eac <__cmpsf2+0x4>
 8000ea6:	bf00      	nop

08000ea8 <__cmpsf2>:
 8000ea8:	f04f 0c01 	mov.w	ip, #1
 8000eac:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000eb0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000eb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000eb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ebc:	bf18      	it	ne
 8000ebe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ec2:	d011      	beq.n	8000ee8 <__cmpsf2+0x40>
 8000ec4:	b001      	add	sp, #4
 8000ec6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eca:	bf18      	it	ne
 8000ecc:	ea90 0f01 	teqne	r0, r1
 8000ed0:	bf58      	it	pl
 8000ed2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ed6:	bf88      	it	hi
 8000ed8:	17c8      	asrhi	r0, r1, #31
 8000eda:	bf38      	it	cc
 8000edc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ee0:	bf18      	it	ne
 8000ee2:	f040 0001 	orrne.w	r0, r0, #1
 8000ee6:	4770      	bx	lr
 8000ee8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eec:	d102      	bne.n	8000ef4 <__cmpsf2+0x4c>
 8000eee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ef2:	d105      	bne.n	8000f00 <__cmpsf2+0x58>
 8000ef4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ef8:	d1e4      	bne.n	8000ec4 <__cmpsf2+0x1c>
 8000efa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000efe:	d0e1      	beq.n	8000ec4 <__cmpsf2+0x1c>
 8000f00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <__aeabi_cfrcmple>:
 8000f08:	4684      	mov	ip, r0
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	4661      	mov	r1, ip
 8000f0e:	e7ff      	b.n	8000f10 <__aeabi_cfcmpeq>

08000f10 <__aeabi_cfcmpeq>:
 8000f10:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f12:	f7ff ffc9 	bl	8000ea8 <__cmpsf2>
 8000f16:	2800      	cmp	r0, #0
 8000f18:	bf48      	it	mi
 8000f1a:	f110 0f00 	cmnmi.w	r0, #0
 8000f1e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f20 <__aeabi_fcmpeq>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff fff4 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f28:	bf0c      	ite	eq
 8000f2a:	2001      	moveq	r0, #1
 8000f2c:	2000      	movne	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_fcmplt>:
 8000f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f38:	f7ff ffea 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f3c:	bf34      	ite	cc
 8000f3e:	2001      	movcc	r0, #1
 8000f40:	2000      	movcs	r0, #0
 8000f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f46:	bf00      	nop

08000f48 <__aeabi_fcmple>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff ffe0 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f50:	bf94      	ite	ls
 8000f52:	2001      	movls	r0, #1
 8000f54:	2000      	movhi	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_fcmpge>:
 8000f5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f60:	f7ff ffd2 	bl	8000f08 <__aeabi_cfrcmple>
 8000f64:	bf94      	ite	ls
 8000f66:	2001      	movls	r0, #1
 8000f68:	2000      	movhi	r0, #0
 8000f6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6e:	bf00      	nop

08000f70 <__aeabi_fcmpgt>:
 8000f70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f74:	f7ff ffc8 	bl	8000f08 <__aeabi_cfrcmple>
 8000f78:	bf34      	ite	cc
 8000f7a:	2001      	movcc	r0, #1
 8000f7c:	2000      	movcs	r0, #0
 8000f7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f82:	bf00      	nop

08000f84 <__aeabi_f2iz>:
 8000f84:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f88:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f8c:	d30f      	bcc.n	8000fae <__aeabi_f2iz+0x2a>
 8000f8e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f96:	d90d      	bls.n	8000fb4 <__aeabi_f2iz+0x30>
 8000f98:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fa0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fa4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa8:	bf18      	it	ne
 8000faa:	4240      	negne	r0, r0
 8000fac:	4770      	bx	lr
 8000fae:	f04f 0000 	mov.w	r0, #0
 8000fb2:	4770      	bx	lr
 8000fb4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fb8:	d101      	bne.n	8000fbe <__aeabi_f2iz+0x3a>
 8000fba:	0242      	lsls	r2, r0, #9
 8000fbc:	d105      	bne.n	8000fca <__aeabi_f2iz+0x46>
 8000fbe:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fc2:	bf08      	it	eq
 8000fc4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fc8:	4770      	bx	lr
 8000fca:	f04f 0000 	mov.w	r0, #0
 8000fce:	4770      	bx	lr

08000fd0 <__aeabi_f2ulz>:
 8000fd0:	b5d0      	push	{r4, r6, r7, lr}
 8000fd2:	f7ff fa21 	bl	8000418 <__aeabi_f2d>
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <__aeabi_f2ulz+0x38>)
 8000fda:	4606      	mov	r6, r0
 8000fdc:	460f      	mov	r7, r1
 8000fde:	f7ff fa73 	bl	80004c8 <__aeabi_dmul>
 8000fe2:	f000 f815 	bl	8001010 <__aeabi_d2uiz>
 8000fe6:	4604      	mov	r4, r0
 8000fe8:	f7ff f9f4 	bl	80003d4 <__aeabi_ui2d>
 8000fec:	2200      	movs	r2, #0
 8000fee:	4b07      	ldr	r3, [pc, #28]	; (800100c <__aeabi_f2ulz+0x3c>)
 8000ff0:	f7ff fa6a 	bl	80004c8 <__aeabi_dmul>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	4630      	mov	r0, r6
 8000ffa:	4639      	mov	r1, r7
 8000ffc:	f7ff f8ac 	bl	8000158 <__aeabi_dsub>
 8001000:	f000 f806 	bl	8001010 <__aeabi_d2uiz>
 8001004:	4621      	mov	r1, r4
 8001006:	bdd0      	pop	{r4, r6, r7, pc}
 8001008:	3df00000 	.word	0x3df00000
 800100c:	41f00000 	.word	0x41f00000

08001010 <__aeabi_d2uiz>:
 8001010:	004a      	lsls	r2, r1, #1
 8001012:	d211      	bcs.n	8001038 <__aeabi_d2uiz+0x28>
 8001014:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8001018:	d211      	bcs.n	800103e <__aeabi_d2uiz+0x2e>
 800101a:	d50d      	bpl.n	8001038 <__aeabi_d2uiz+0x28>
 800101c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8001020:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001024:	d40e      	bmi.n	8001044 <__aeabi_d2uiz+0x34>
 8001026:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800102a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800102e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001032:	fa23 f002 	lsr.w	r0, r3, r2
 8001036:	4770      	bx	lr
 8001038:	f04f 0000 	mov.w	r0, #0
 800103c:	4770      	bx	lr
 800103e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001042:	d102      	bne.n	800104a <__aeabi_d2uiz+0x3a>
 8001044:	f04f 30ff 	mov.w	r0, #4294967295
 8001048:	4770      	bx	lr
 800104a:	f04f 0000 	mov.w	r0, #0
 800104e:	4770      	bx	lr

08001050 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001054:	f001 ff3a 	bl	8002ecc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001058:	f000 f813 	bl	8001082 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800105c:	f000 fa1c 	bl	8001498 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001060:	f000 f8a6 	bl	80011b0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001064:	f000 f950 	bl	8001308 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001068:	f000 f9b2 	bl	80013d0 <MX_TIM4_Init>
  MX_I2C2_Init();
 800106c:	f000 f872 	bl	8001154 <MX_I2C2_Init>
  MX_TIM2_Init();
 8001070:	f000 f8f6 	bl	8001260 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001074:	f000 f84a 	bl	800110c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  start_up();
 8001078:	f000 feb6 	bl	8001de8 <start_up>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	main_loop();
 800107c:	f000 ffa2 	bl	8001fc4 <main_loop>
 8001080:	e7fc      	b.n	800107c <main+0x2c>

08001082 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b090      	sub	sp, #64	; 0x40
 8001086:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001088:	f107 0318 	add.w	r3, r7, #24
 800108c:	2228      	movs	r2, #40	; 0x28
 800108e:	2100      	movs	r1, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f004 fbe9 	bl	8005868 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010a4:	2301      	movs	r3, #1
 80010a6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010ac:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010ae:	2300      	movs	r3, #0
 80010b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010b2:	2301      	movs	r3, #1
 80010b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b6:	2302      	movs	r3, #2
 80010b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80010c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80010c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c6:	f107 0318 	add.w	r3, r7, #24
 80010ca:	4618      	mov	r0, r3
 80010cc:	f003 f8c0 	bl	8004250 <HAL_RCC_OscConfig>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <SystemClock_Config+0x58>
  {
    Error_Handler();
 80010d6:	f000 faa3 	bl	8001620 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010da:	230f      	movs	r3, #15
 80010dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010de:	2302      	movs	r3, #2
 80010e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	2101      	movs	r1, #1
 80010f4:	4618      	mov	r0, r3
 80010f6:	f003 fb2d 	bl	8004754 <HAL_RCC_ClockConfig>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001100:	f000 fa8e 	bl	8001620 <Error_Handler>
  }
}
 8001104:	bf00      	nop
 8001106:	3740      	adds	r7, #64	; 0x40
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* TIM4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8001110:	2200      	movs	r2, #0
 8001112:	2101      	movs	r1, #1
 8001114:	201e      	movs	r0, #30
 8001116:	f002 f836 	bl	8003186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800111a:	201e      	movs	r0, #30
 800111c:	f002 f84f 	bl	80031be <HAL_NVIC_EnableIRQ>
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 8001120:	2200      	movs	r2, #0
 8001122:	2102      	movs	r1, #2
 8001124:	2009      	movs	r0, #9
 8001126:	f002 f82e 	bl	8003186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800112a:	2009      	movs	r0, #9
 800112c:	f002 f847 	bl	80031be <HAL_NVIC_EnableIRQ>
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 8001130:	2200      	movs	r2, #0
 8001132:	2102      	movs	r1, #2
 8001134:	200a      	movs	r0, #10
 8001136:	f002 f826 	bl	8003186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800113a:	200a      	movs	r0, #10
 800113c:	f002 f83f 	bl	80031be <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8001140:	2200      	movs	r2, #0
 8001142:	2102      	movs	r1, #2
 8001144:	2017      	movs	r0, #23
 8001146:	f002 f81e 	bl	8003186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800114a:	2017      	movs	r0, #23
 800114c:	f002 f837 	bl	80031be <HAL_NVIC_EnableIRQ>
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}

08001154 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001158:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <MX_I2C2_Init+0x50>)
 800115a:	4a13      	ldr	r2, [pc, #76]	; (80011a8 <MX_I2C2_Init+0x54>)
 800115c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <MX_I2C2_Init+0x50>)
 8001160:	4a12      	ldr	r2, [pc, #72]	; (80011ac <MX_I2C2_Init+0x58>)
 8001162:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001164:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <MX_I2C2_Init+0x50>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <MX_I2C2_Init+0x50>)
 800116c:	2200      	movs	r2, #0
 800116e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <MX_I2C2_Init+0x50>)
 8001172:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001176:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001178:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <MX_I2C2_Init+0x50>)
 800117a:	2200      	movs	r2, #0
 800117c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <MX_I2C2_Init+0x50>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001184:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <MX_I2C2_Init+0x50>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <MX_I2C2_Init+0x50>)
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001190:	4804      	ldr	r0, [pc, #16]	; (80011a4 <MX_I2C2_Init+0x50>)
 8001192:	f002 fc13 	bl	80039bc <HAL_I2C_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800119c:	f000 fa40 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	200000ac 	.word	0x200000ac
 80011a8:	40005800 	.word	0x40005800
 80011ac:	000186a0 	.word	0x000186a0

080011b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08c      	sub	sp, #48	; 0x30
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011b6:	f107 030c 	add.w	r3, r7, #12
 80011ba:	2224      	movs	r2, #36	; 0x24
 80011bc:	2100      	movs	r1, #0
 80011be:	4618      	mov	r0, r3
 80011c0:	f004 fb52 	bl	8005868 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011cc:	4b22      	ldr	r3, [pc, #136]	; (8001258 <MX_TIM1_Init+0xa8>)
 80011ce:	4a23      	ldr	r2, [pc, #140]	; (800125c <MX_TIM1_Init+0xac>)
 80011d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011d2:	4b21      	ldr	r3, [pc, #132]	; (8001258 <MX_TIM1_Init+0xa8>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d8:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <MX_TIM1_Init+0xa8>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011de:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <MX_TIM1_Init+0xa8>)
 80011e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e6:	4b1c      	ldr	r3, [pc, #112]	; (8001258 <MX_TIM1_Init+0xa8>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011ec:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <MX_TIM1_Init+0xa8>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011f2:	4b19      	ldr	r3, [pc, #100]	; (8001258 <MX_TIM1_Init+0xa8>)
 80011f4:	2280      	movs	r2, #128	; 0x80
 80011f6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011f8:	2303      	movs	r3, #3
 80011fa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011fc:	2300      	movs	r3, #0
 80011fe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001200:	2301      	movs	r3, #1
 8001202:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001204:	2300      	movs	r3, #0
 8001206:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001208:	230a      	movs	r3, #10
 800120a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800120c:	2300      	movs	r3, #0
 800120e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001210:	2301      	movs	r3, #1
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001214:	2300      	movs	r3, #0
 8001216:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001218:	230a      	movs	r3, #10
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800121c:	f107 030c 	add.w	r3, r7, #12
 8001220:	4619      	mov	r1, r3
 8001222:	480d      	ldr	r0, [pc, #52]	; (8001258 <MX_TIM1_Init+0xa8>)
 8001224:	f003 fd5e 	bl	8004ce4 <HAL_TIM_Encoder_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800122e:	f000 f9f7 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001232:	2300      	movs	r3, #0
 8001234:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	4619      	mov	r1, r3
 800123e:	4806      	ldr	r0, [pc, #24]	; (8001258 <MX_TIM1_Init+0xa8>)
 8001240:	f004 fa78 	bl	8005734 <HAL_TIMEx_MasterConfigSynchronization>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800124a:	f000 f9e9 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800124e:	bf00      	nop
 8001250:	3730      	adds	r7, #48	; 0x30
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000100 	.word	0x20000100
 800125c:	40012c00 	.word	0x40012c00

08001260 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08c      	sub	sp, #48	; 0x30
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001266:	f107 030c 	add.w	r3, r7, #12
 800126a:	2224      	movs	r2, #36	; 0x24
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f004 fafa 	bl	8005868 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800127c:	4b21      	ldr	r3, [pc, #132]	; (8001304 <MX_TIM2_Init+0xa4>)
 800127e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001282:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001284:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <MX_TIM2_Init+0xa4>)
 8001286:	2200      	movs	r2, #0
 8001288:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128a:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <MX_TIM2_Init+0xa4>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001290:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <MX_TIM2_Init+0xa4>)
 8001292:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001296:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001298:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <MX_TIM2_Init+0xa4>)
 800129a:	2200      	movs	r2, #0
 800129c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129e:	4b19      	ldr	r3, [pc, #100]	; (8001304 <MX_TIM2_Init+0xa4>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80012a4:	2301      	movs	r3, #1
 80012a6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012a8:	2300      	movs	r3, #0
 80012aa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012ac:	2301      	movs	r3, #1
 80012ae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80012b4:	230a      	movs	r3, #10
 80012b6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012bc:	2301      	movs	r3, #1
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80012c4:	230a      	movs	r3, #10
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	4619      	mov	r1, r3
 80012ce:	480d      	ldr	r0, [pc, #52]	; (8001304 <MX_TIM2_Init+0xa4>)
 80012d0:	f003 fd08 	bl	8004ce4 <HAL_TIM_Encoder_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80012da:	f000 f9a1 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	4619      	mov	r1, r3
 80012ea:	4806      	ldr	r0, [pc, #24]	; (8001304 <MX_TIM2_Init+0xa4>)
 80012ec:	f004 fa22 	bl	8005734 <HAL_TIMEx_MasterConfigSynchronization>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80012f6:	f000 f993 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012fa:	bf00      	nop
 80012fc:	3730      	adds	r7, #48	; 0x30
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000148 	.word	0x20000148

08001308 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800130e:	f107 0320 	add.w	r3, r7, #32
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
 8001324:	611a      	str	r2, [r3, #16]
 8001326:	615a      	str	r2, [r3, #20]
 8001328:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800132a:	4b27      	ldr	r3, [pc, #156]	; (80013c8 <MX_TIM3_Init+0xc0>)
 800132c:	4a27      	ldr	r2, [pc, #156]	; (80013cc <MX_TIM3_Init+0xc4>)
 800132e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48;
 8001330:	4b25      	ldr	r3, [pc, #148]	; (80013c8 <MX_TIM3_Init+0xc0>)
 8001332:	2230      	movs	r2, #48	; 0x30
 8001334:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001336:	4b24      	ldr	r3, [pc, #144]	; (80013c8 <MX_TIM3_Init+0xc0>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 800133c:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <MX_TIM3_Init+0xc0>)
 800133e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001342:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001344:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <MX_TIM3_Init+0xc0>)
 8001346:	2200      	movs	r2, #0
 8001348:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800134a:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <MX_TIM3_Init+0xc0>)
 800134c:	2280      	movs	r2, #128	; 0x80
 800134e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001350:	481d      	ldr	r0, [pc, #116]	; (80013c8 <MX_TIM3_Init+0xc0>)
 8001352:	f003 fbd5 	bl	8004b00 <HAL_TIM_PWM_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800135c:	f000 f960 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001360:	2300      	movs	r3, #0
 8001362:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001364:	2300      	movs	r3, #0
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001368:	f107 0320 	add.w	r3, r7, #32
 800136c:	4619      	mov	r1, r3
 800136e:	4816      	ldr	r0, [pc, #88]	; (80013c8 <MX_TIM3_Init+0xc0>)
 8001370:	f004 f9e0 	bl	8005734 <HAL_TIMEx_MasterConfigSynchronization>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800137a:	f000 f951 	bl	8001620 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800137e:	2360      	movs	r3, #96	; 0x60
 8001380:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	2200      	movs	r2, #0
 8001392:	4619      	mov	r1, r3
 8001394:	480c      	ldr	r0, [pc, #48]	; (80013c8 <MX_TIM3_Init+0xc0>)
 8001396:	f003 fedd 	bl	8005154 <HAL_TIM_PWM_ConfigChannel>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80013a0:	f000 f93e 	bl	8001620 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	2204      	movs	r2, #4
 80013a8:	4619      	mov	r1, r3
 80013aa:	4807      	ldr	r0, [pc, #28]	; (80013c8 <MX_TIM3_Init+0xc0>)
 80013ac:	f003 fed2 	bl	8005154 <HAL_TIM_PWM_ConfigChannel>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80013b6:	f000 f933 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013ba:	4803      	ldr	r0, [pc, #12]	; (80013c8 <MX_TIM3_Init+0xc0>)
 80013bc:	f000 fa44 	bl	8001848 <HAL_TIM_MspPostInit>

}
 80013c0:	bf00      	nop
 80013c2:	3728      	adds	r7, #40	; 0x28
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000190 	.word	0x20000190
 80013cc:	40000400 	.word	0x40000400

080013d0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08a      	sub	sp, #40	; 0x28
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d6:	f107 0320 	add.w	r3, r7, #32
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
 80013ec:	611a      	str	r2, [r3, #16]
 80013ee:	615a      	str	r2, [r3, #20]
 80013f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013f2:	4b27      	ldr	r3, [pc, #156]	; (8001490 <MX_TIM4_Init+0xc0>)
 80013f4:	4a27      	ldr	r2, [pc, #156]	; (8001494 <MX_TIM4_Init+0xc4>)
 80013f6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48;
 80013f8:	4b25      	ldr	r3, [pc, #148]	; (8001490 <MX_TIM4_Init+0xc0>)
 80013fa:	2230      	movs	r2, #48	; 0x30
 80013fc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fe:	4b24      	ldr	r3, [pc, #144]	; (8001490 <MX_TIM4_Init+0xc0>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001404:	4b22      	ldr	r3, [pc, #136]	; (8001490 <MX_TIM4_Init+0xc0>)
 8001406:	f240 32e7 	movw	r2, #999	; 0x3e7
 800140a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800140c:	4b20      	ldr	r3, [pc, #128]	; (8001490 <MX_TIM4_Init+0xc0>)
 800140e:	2200      	movs	r2, #0
 8001410:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001412:	4b1f      	ldr	r3, [pc, #124]	; (8001490 <MX_TIM4_Init+0xc0>)
 8001414:	2280      	movs	r2, #128	; 0x80
 8001416:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001418:	481d      	ldr	r0, [pc, #116]	; (8001490 <MX_TIM4_Init+0xc0>)
 800141a:	f003 fb71 	bl	8004b00 <HAL_TIM_PWM_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001424:	f000 f8fc 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001428:	2300      	movs	r3, #0
 800142a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800142c:	2300      	movs	r3, #0
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001430:	f107 0320 	add.w	r3, r7, #32
 8001434:	4619      	mov	r1, r3
 8001436:	4816      	ldr	r0, [pc, #88]	; (8001490 <MX_TIM4_Init+0xc0>)
 8001438:	f004 f97c 	bl	8005734 <HAL_TIMEx_MasterConfigSynchronization>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001442:	f000 f8ed 	bl	8001620 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001446:	2360      	movs	r3, #96	; 0x60
 8001448:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	2204      	movs	r2, #4
 800145a:	4619      	mov	r1, r3
 800145c:	480c      	ldr	r0, [pc, #48]	; (8001490 <MX_TIM4_Init+0xc0>)
 800145e:	f003 fe79 	bl	8005154 <HAL_TIM_PWM_ConfigChannel>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001468:	f000 f8da 	bl	8001620 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	2208      	movs	r2, #8
 8001470:	4619      	mov	r1, r3
 8001472:	4807      	ldr	r0, [pc, #28]	; (8001490 <MX_TIM4_Init+0xc0>)
 8001474:	f003 fe6e 	bl	8005154 <HAL_TIM_PWM_ConfigChannel>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800147e:	f000 f8cf 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001482:	4803      	ldr	r0, [pc, #12]	; (8001490 <MX_TIM4_Init+0xc0>)
 8001484:	f000 f9e0 	bl	8001848 <HAL_TIM_MspPostInit>

}
 8001488:	bf00      	nop
 800148a:	3728      	adds	r7, #40	; 0x28
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	200001d8 	.word	0x200001d8
 8001494:	40000800 	.word	0x40000800

08001498 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149e:	f107 0310 	add.w	r3, r7, #16
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ac:	4b57      	ldr	r3, [pc, #348]	; (800160c <MX_GPIO_Init+0x174>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	4a56      	ldr	r2, [pc, #344]	; (800160c <MX_GPIO_Init+0x174>)
 80014b2:	f043 0310 	orr.w	r3, r3, #16
 80014b6:	6193      	str	r3, [r2, #24]
 80014b8:	4b54      	ldr	r3, [pc, #336]	; (800160c <MX_GPIO_Init+0x174>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	f003 0310 	and.w	r3, r3, #16
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c4:	4b51      	ldr	r3, [pc, #324]	; (800160c <MX_GPIO_Init+0x174>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	4a50      	ldr	r2, [pc, #320]	; (800160c <MX_GPIO_Init+0x174>)
 80014ca:	f043 0320 	orr.w	r3, r3, #32
 80014ce:	6193      	str	r3, [r2, #24]
 80014d0:	4b4e      	ldr	r3, [pc, #312]	; (800160c <MX_GPIO_Init+0x174>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	f003 0320 	and.w	r3, r3, #32
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014dc:	4b4b      	ldr	r3, [pc, #300]	; (800160c <MX_GPIO_Init+0x174>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	4a4a      	ldr	r2, [pc, #296]	; (800160c <MX_GPIO_Init+0x174>)
 80014e2:	f043 0304 	orr.w	r3, r3, #4
 80014e6:	6193      	str	r3, [r2, #24]
 80014e8:	4b48      	ldr	r3, [pc, #288]	; (800160c <MX_GPIO_Init+0x174>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	f003 0304 	and.w	r3, r3, #4
 80014f0:	607b      	str	r3, [r7, #4]
 80014f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f4:	4b45      	ldr	r3, [pc, #276]	; (800160c <MX_GPIO_Init+0x174>)
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	4a44      	ldr	r2, [pc, #272]	; (800160c <MX_GPIO_Init+0x174>)
 80014fa:	f043 0308 	orr.w	r3, r3, #8
 80014fe:	6193      	str	r3, [r2, #24]
 8001500:	4b42      	ldr	r3, [pc, #264]	; (800160c <MX_GPIO_Init+0x174>)
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	f003 0308 	and.w	r3, r3, #8
 8001508:	603b      	str	r3, [r7, #0]
 800150a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Y10_Pin|Y11_Pin|Y7_Pin, GPIO_PIN_RESET);
 800150c:	2200      	movs	r2, #0
 800150e:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8001512:	483f      	ldr	r0, [pc, #252]	; (8001610 <MX_GPIO_Init+0x178>)
 8001514:	f002 fa09 	bl	800392a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Y3_Pin|Y4_Pin|Y5_Pin|Y6_Pin, GPIO_PIN_RESET);
 8001518:	2200      	movs	r2, #0
 800151a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800151e:	483d      	ldr	r0, [pc, #244]	; (8001614 <MX_GPIO_Init+0x17c>)
 8001520:	f002 fa03 	bl	800392a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001524:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001528:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800152a:	2303      	movs	r3, #3
 800152c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800152e:	f107 0310 	add.w	r3, r7, #16
 8001532:	4619      	mov	r1, r3
 8001534:	4838      	ldr	r0, [pc, #224]	; (8001618 <MX_GPIO_Init+0x180>)
 8001536:	f002 f85d 	bl	80035f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_12;
 800153a:	f641 030c 	movw	r3, #6156	; 0x180c
 800153e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001540:	2303      	movs	r3, #3
 8001542:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001544:	f107 0310 	add.w	r3, r7, #16
 8001548:	4619      	mov	r1, r3
 800154a:	4831      	ldr	r0, [pc, #196]	; (8001610 <MX_GPIO_Init+0x178>)
 800154c:	f002 f852 	bl	80035f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Y10_Pin Y11_Pin Y7_Pin */
  GPIO_InitStruct.Pin = Y10_Pin|Y11_Pin|Y7_Pin;
 8001550:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8001554:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001556:	2301      	movs	r3, #1
 8001558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2302      	movs	r3, #2
 8001560:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001562:	f107 0310 	add.w	r3, r7, #16
 8001566:	4619      	mov	r1, r3
 8001568:	4829      	ldr	r0, [pc, #164]	; (8001610 <MX_GPIO_Init+0x178>)
 800156a:	f002 f843 	bl	80035f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : X0_Pin X1_Pin X7_Pin */
  GPIO_InitStruct.Pin = X0_Pin|X1_Pin|X7_Pin;
 800156e:	f240 2303 	movw	r3, #515	; 0x203
 8001572:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001578:	2301      	movs	r3, #1
 800157a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157c:	f107 0310 	add.w	r3, r7, #16
 8001580:	4619      	mov	r1, r3
 8001582:	4824      	ldr	r0, [pc, #144]	; (8001614 <MX_GPIO_Init+0x17c>)
 8001584:	f002 f836 	bl	80035f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001588:	2304      	movs	r3, #4
 800158a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800158c:	2303      	movs	r3, #3
 800158e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001590:	f107 0310 	add.w	r3, r7, #16
 8001594:	4619      	mov	r1, r3
 8001596:	481f      	ldr	r0, [pc, #124]	; (8001614 <MX_GPIO_Init+0x17c>)
 8001598:	f002 f82c 	bl	80035f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Y3_Pin Y4_Pin Y5_Pin Y6_Pin */
  GPIO_InitStruct.Pin = Y3_Pin|Y4_Pin|Y5_Pin|Y6_Pin;
 800159c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80015a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a2:	2301      	movs	r3, #1
 80015a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	2302      	movs	r3, #2
 80015ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ae:	f107 0310 	add.w	r3, r7, #16
 80015b2:	4619      	mov	r1, r3
 80015b4:	4817      	ldr	r0, [pc, #92]	; (8001614 <MX_GPIO_Init+0x17c>)
 80015b6:	f002 f81d 	bl	80035f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : X2_Pin */
  GPIO_InitStruct.Pin = X2_Pin;
 80015ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015c4:	2301      	movs	r3, #1
 80015c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(X2_GPIO_Port, &GPIO_InitStruct);
 80015c8:	f107 0310 	add.w	r3, r7, #16
 80015cc:	4619      	mov	r1, r3
 80015ce:	4810      	ldr	r0, [pc, #64]	; (8001610 <MX_GPIO_Init+0x178>)
 80015d0:	f002 f810 	bl	80035f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : X3_Pin X4_Pin X5_Pin */
  GPIO_InitStruct.Pin = X3_Pin|X4_Pin|X5_Pin;
 80015d4:	2338      	movs	r3, #56	; 0x38
 80015d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80015d8:	4b10      	ldr	r3, [pc, #64]	; (800161c <MX_GPIO_Init+0x184>)
 80015da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015dc:	2301      	movs	r3, #1
 80015de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e0:	f107 0310 	add.w	r3, r7, #16
 80015e4:	4619      	mov	r1, r3
 80015e6:	480b      	ldr	r0, [pc, #44]	; (8001614 <MX_GPIO_Init+0x17c>)
 80015e8:	f002 f804 	bl	80035f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : X6_Pin */
  GPIO_InitStruct.Pin = X6_Pin;
 80015ec:	2340      	movs	r3, #64	; 0x40
 80015ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(X6_GPIO_Port, &GPIO_InitStruct);
 80015f8:	f107 0310 	add.w	r3, r7, #16
 80015fc:	4619      	mov	r1, r3
 80015fe:	4805      	ldr	r0, [pc, #20]	; (8001614 <MX_GPIO_Init+0x17c>)
 8001600:	f001 fff8 	bl	80035f4 <HAL_GPIO_Init>

}
 8001604:	bf00      	nop
 8001606:	3720      	adds	r7, #32
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40021000 	.word	0x40021000
 8001610:	40010800 	.word	0x40010800
 8001614:	40010c00 	.word	0x40010c00
 8001618:	40011000 	.word	0x40011000
 800161c:	10310000 	.word	0x10310000

08001620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001624:	b672      	cpsid	i
}
 8001626:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001628:	e7fe      	b.n	8001628 <Error_Handler+0x8>
	...

0800162c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <HAL_MspInit+0x5c>)
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	4a14      	ldr	r2, [pc, #80]	; (8001688 <HAL_MspInit+0x5c>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6193      	str	r3, [r2, #24]
 800163e:	4b12      	ldr	r3, [pc, #72]	; (8001688 <HAL_MspInit+0x5c>)
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800164a:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <HAL_MspInit+0x5c>)
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	4a0e      	ldr	r2, [pc, #56]	; (8001688 <HAL_MspInit+0x5c>)
 8001650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001654:	61d3      	str	r3, [r2, #28]
 8001656:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <HAL_MspInit+0x5c>)
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165e:	607b      	str	r3, [r7, #4]
 8001660:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001662:	4b0a      	ldr	r3, [pc, #40]	; (800168c <HAL_MspInit+0x60>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	4a04      	ldr	r2, [pc, #16]	; (800168c <HAL_MspInit+0x60>)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800167e:	bf00      	nop
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr
 8001688:	40021000 	.word	0x40021000
 800168c:	40010000 	.word	0x40010000

08001690 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 0310 	add.w	r3, r7, #16
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a16      	ldr	r2, [pc, #88]	; (8001704 <HAL_I2C_MspInit+0x74>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d124      	bne.n	80016fa <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b0:	4b15      	ldr	r3, [pc, #84]	; (8001708 <HAL_I2C_MspInit+0x78>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	4a14      	ldr	r2, [pc, #80]	; (8001708 <HAL_I2C_MspInit+0x78>)
 80016b6:	f043 0308 	orr.w	r3, r3, #8
 80016ba:	6193      	str	r3, [r2, #24]
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <HAL_I2C_MspInit+0x78>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	f003 0308 	and.w	r3, r3, #8
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 80016c8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ce:	2312      	movs	r3, #18
 80016d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016d2:	2303      	movs	r3, #3
 80016d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d6:	f107 0310 	add.w	r3, r7, #16
 80016da:	4619      	mov	r1, r3
 80016dc:	480b      	ldr	r0, [pc, #44]	; (800170c <HAL_I2C_MspInit+0x7c>)
 80016de:	f001 ff89 	bl	80035f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016e2:	4b09      	ldr	r3, [pc, #36]	; (8001708 <HAL_I2C_MspInit+0x78>)
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	4a08      	ldr	r2, [pc, #32]	; (8001708 <HAL_I2C_MspInit+0x78>)
 80016e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016ec:	61d3      	str	r3, [r2, #28]
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <HAL_I2C_MspInit+0x78>)
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80016fa:	bf00      	nop
 80016fc:	3720      	adds	r7, #32
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40005800 	.word	0x40005800
 8001708:	40021000 	.word	0x40021000
 800170c:	40010c00 	.word	0x40010c00

08001710 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08a      	sub	sp, #40	; 0x28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 0318 	add.w	r3, r7, #24
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a2b      	ldr	r2, [pc, #172]	; (80017d8 <HAL_TIM_Encoder_MspInit+0xc8>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d125      	bne.n	800177c <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001730:	4b2a      	ldr	r3, [pc, #168]	; (80017dc <HAL_TIM_Encoder_MspInit+0xcc>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	4a29      	ldr	r2, [pc, #164]	; (80017dc <HAL_TIM_Encoder_MspInit+0xcc>)
 8001736:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800173a:	6193      	str	r3, [r2, #24]
 800173c:	4b27      	ldr	r3, [pc, #156]	; (80017dc <HAL_TIM_Encoder_MspInit+0xcc>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001748:	4b24      	ldr	r3, [pc, #144]	; (80017dc <HAL_TIM_Encoder_MspInit+0xcc>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	4a23      	ldr	r2, [pc, #140]	; (80017dc <HAL_TIM_Encoder_MspInit+0xcc>)
 800174e:	f043 0304 	orr.w	r3, r3, #4
 8001752:	6193      	str	r3, [r2, #24]
 8001754:	4b21      	ldr	r3, [pc, #132]	; (80017dc <HAL_TIM_Encoder_MspInit+0xcc>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	613b      	str	r3, [r7, #16]
 800175e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ECD_1A_Pin|ECD_1B_Pin;
 8001760:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176e:	f107 0318 	add.w	r3, r7, #24
 8001772:	4619      	mov	r1, r3
 8001774:	481a      	ldr	r0, [pc, #104]	; (80017e0 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001776:	f001 ff3d 	bl	80035f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800177a:	e028      	b.n	80017ce <HAL_TIM_Encoder_MspInit+0xbe>
  else if(htim_encoder->Instance==TIM2)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001784:	d123      	bne.n	80017ce <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <HAL_TIM_Encoder_MspInit+0xcc>)
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	4a14      	ldr	r2, [pc, #80]	; (80017dc <HAL_TIM_Encoder_MspInit+0xcc>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	61d3      	str	r3, [r2, #28]
 8001792:	4b12      	ldr	r3, [pc, #72]	; (80017dc <HAL_TIM_Encoder_MspInit+0xcc>)
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179e:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <HAL_TIM_Encoder_MspInit+0xcc>)
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	4a0e      	ldr	r2, [pc, #56]	; (80017dc <HAL_TIM_Encoder_MspInit+0xcc>)
 80017a4:	f043 0304 	orr.w	r3, r3, #4
 80017a8:	6193      	str	r3, [r2, #24]
 80017aa:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <HAL_TIM_Encoder_MspInit+0xcc>)
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ECD_2A_Pin|ECD_2B_Pin;
 80017b6:	2303      	movs	r3, #3
 80017b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c2:	f107 0318 	add.w	r3, r7, #24
 80017c6:	4619      	mov	r1, r3
 80017c8:	4805      	ldr	r0, [pc, #20]	; (80017e0 <HAL_TIM_Encoder_MspInit+0xd0>)
 80017ca:	f001 ff13 	bl	80035f4 <HAL_GPIO_Init>
}
 80017ce:	bf00      	nop
 80017d0:	3728      	adds	r7, #40	; 0x28
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40012c00 	.word	0x40012c00
 80017dc:	40021000 	.word	0x40021000
 80017e0:	40010800 	.word	0x40010800

080017e4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a12      	ldr	r2, [pc, #72]	; (800183c <HAL_TIM_PWM_MspInit+0x58>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d10c      	bne.n	8001810 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017f6:	4b12      	ldr	r3, [pc, #72]	; (8001840 <HAL_TIM_PWM_MspInit+0x5c>)
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	4a11      	ldr	r2, [pc, #68]	; (8001840 <HAL_TIM_PWM_MspInit+0x5c>)
 80017fc:	f043 0302 	orr.w	r3, r3, #2
 8001800:	61d3      	str	r3, [r2, #28]
 8001802:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <HAL_TIM_PWM_MspInit+0x5c>)
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800180e:	e010      	b.n	8001832 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a0b      	ldr	r2, [pc, #44]	; (8001844 <HAL_TIM_PWM_MspInit+0x60>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d10b      	bne.n	8001832 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_TIM_PWM_MspInit+0x5c>)
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	4a08      	ldr	r2, [pc, #32]	; (8001840 <HAL_TIM_PWM_MspInit+0x5c>)
 8001820:	f043 0304 	orr.w	r3, r3, #4
 8001824:	61d3      	str	r3, [r2, #28]
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_TIM_PWM_MspInit+0x5c>)
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	f003 0304 	and.w	r3, r3, #4
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	68bb      	ldr	r3, [r7, #8]
}
 8001832:	bf00      	nop
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	40000400 	.word	0x40000400
 8001840:	40021000 	.word	0x40021000
 8001844:	40000800 	.word	0x40000800

08001848 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b088      	sub	sp, #32
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f107 0310 	add.w	r3, r7, #16
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a1f      	ldr	r2, [pc, #124]	; (80018e0 <HAL_TIM_MspPostInit+0x98>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d118      	bne.n	800189a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001868:	4b1e      	ldr	r3, [pc, #120]	; (80018e4 <HAL_TIM_MspPostInit+0x9c>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	4a1d      	ldr	r2, [pc, #116]	; (80018e4 <HAL_TIM_MspPostInit+0x9c>)
 800186e:	f043 0304 	orr.w	r3, r3, #4
 8001872:	6193      	str	r3, [r2, #24]
 8001874:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <HAL_TIM_MspPostInit+0x9c>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWM_1A_Pin|PWM_1B_Pin;
 8001880:	23c0      	movs	r3, #192	; 0xc0
 8001882:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001884:	2302      	movs	r3, #2
 8001886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	2302      	movs	r3, #2
 800188a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188c:	f107 0310 	add.w	r3, r7, #16
 8001890:	4619      	mov	r1, r3
 8001892:	4815      	ldr	r0, [pc, #84]	; (80018e8 <HAL_TIM_MspPostInit+0xa0>)
 8001894:	f001 feae 	bl	80035f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001898:	e01d      	b.n	80018d6 <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM4)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a13      	ldr	r2, [pc, #76]	; (80018ec <HAL_TIM_MspPostInit+0xa4>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d118      	bne.n	80018d6 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a4:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <HAL_TIM_MspPostInit+0x9c>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	4a0e      	ldr	r2, [pc, #56]	; (80018e4 <HAL_TIM_MspPostInit+0x9c>)
 80018aa:	f043 0308 	orr.w	r3, r3, #8
 80018ae:	6193      	str	r3, [r2, #24]
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <HAL_TIM_MspPostInit+0x9c>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	f003 0308 	and.w	r3, r3, #8
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_2A_Pin|PWM_2B_Pin;
 80018bc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80018c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c2:	2302      	movs	r3, #2
 80018c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c6:	2302      	movs	r3, #2
 80018c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ca:	f107 0310 	add.w	r3, r7, #16
 80018ce:	4619      	mov	r1, r3
 80018d0:	4807      	ldr	r0, [pc, #28]	; (80018f0 <HAL_TIM_MspPostInit+0xa8>)
 80018d2:	f001 fe8f 	bl	80035f4 <HAL_GPIO_Init>
}
 80018d6:	bf00      	nop
 80018d8:	3720      	adds	r7, #32
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40000400 	.word	0x40000400
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40010800 	.word	0x40010800
 80018ec:	40000800 	.word	0x40000800
 80018f0:	40010c00 	.word	0x40010c00

080018f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) {
 80018f8:	e7fe      	b.n	80018f8 <NMI_Handler+0x4>

080018fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018fe:	e7fe      	b.n	80018fe <HardFault_Handler+0x4>

08001900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001904:	e7fe      	b.n	8001904 <MemManage_Handler+0x4>

08001906 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800190a:	e7fe      	b.n	800190a <BusFault_Handler+0x4>

0800190c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001910:	e7fe      	b.n	8001910 <UsageFault_Handler+0x4>

08001912 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	46bd      	mov	sp, r7
 800191a:	bc80      	pop	{r7}
 800191c:	4770      	bx	lr

0800191e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr

0800192a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr

08001936 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800193a:	f001 fb0d 	bl	8002f58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}

08001942 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(X3_Pin);
 8001946:	2008      	movs	r0, #8
 8001948:	f002 f820 	bl	800398c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}

08001950 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(X4_Pin);
 8001954:	2010      	movs	r0, #16
 8001956:	f002 f819 	bl	800398c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}

0800195e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(X5_Pin);
 8001962:	2020      	movs	r0, #32
 8001964:	f002 f812 	bl	800398c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001968:	bf00      	nop
 800196a:	bd80      	pop	{r7, pc}

0800196c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001970:	4802      	ldr	r0, [pc, #8]	; (800197c <TIM4_IRQHandler+0x10>)
 8001972:	f003 fae7 	bl	8004f44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	200001d8 	.word	0x200001d8

08001980 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001988:	4a14      	ldr	r2, [pc, #80]	; (80019dc <_sbrk+0x5c>)
 800198a:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <_sbrk+0x60>)
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001994:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <_sbrk+0x64>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d102      	bne.n	80019a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800199c:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <_sbrk+0x64>)
 800199e:	4a12      	ldr	r2, [pc, #72]	; (80019e8 <_sbrk+0x68>)
 80019a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019a2:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <_sbrk+0x64>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4413      	add	r3, r2
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d207      	bcs.n	80019c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019b0:	f003 ff30 	bl	8005814 <__errno>
 80019b4:	4603      	mov	r3, r0
 80019b6:	220c      	movs	r2, #12
 80019b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295
 80019be:	e009      	b.n	80019d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019c0:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <_sbrk+0x64>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019c6:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <_sbrk+0x64>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	4a05      	ldr	r2, [pc, #20]	; (80019e4 <_sbrk+0x64>)
 80019d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019d2:	68fb      	ldr	r3, [r7, #12]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20005000 	.word	0x20005000
 80019e0:	00000400 	.word	0x00000400
 80019e4:	20000220 	.word	0x20000220
 80019e8:	20000310 	.word	0x20000310

080019ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr

080019f8 <BUTTON_ReadPin>:
#include "BUTTON.h"
// (FINAL x3)

// ************************** Low Level Layer *****************************************************//
static ButtonState BUTTON_ReadPin(Button *Button) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  return HAL_GPIO_ReadPin(Button->Port, Button->Pin);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	889b      	ldrh	r3, [r3, #4]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	f001 ff76 	bl	80038fc <HAL_GPIO_ReadPin>
 8001a10:	4603      	mov	r3, r0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <buttonInit>:
// ************************** High Level Layer *****************************************************//
void buttonInit(Button *Button, GPIO_TypeDef *BUTTON_PORT, uint16_t BUTTON_Pin) {
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b084      	sub	sp, #16
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	60f8      	str	r0, [r7, #12]
 8001a22:	60b9      	str	r1, [r7, #8]
 8001a24:	4613      	mov	r3, r2
 8001a26:	80fb      	strh	r3, [r7, #6]
  Button->Port = BUTTON_PORT;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	601a      	str	r2, [r3, #0]
  Button->Pin = BUTTON_Pin;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	88fa      	ldrh	r2, [r7, #6]
 8001a32:	809a      	strh	r2, [r3, #4]

  Button->state = BUTTON_ReadPin(Button);
 8001a34:	68f8      	ldr	r0, [r7, #12]
 8001a36:	f7ff ffdf 	bl	80019f8 <BUTTON_ReadPin>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	71da      	strb	r2, [r3, #7]
  Button->preState = Button->state;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	79da      	ldrb	r2, [r3, #7]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	719a      	strb	r2, [r3, #6]
  Button->timeIn = HAL_GetTick();
 8001a4a:	f001 fa97 	bl	8002f7c <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	609a      	str	r2, [r3, #8]
  Button->hasChanged = false;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2200      	movs	r2, #0
 8001a58:	741a      	strb	r2, [r3, #16]
  Button->_change = false;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	745a      	strb	r2, [r3, #17]
}
 8001a60:	bf00      	nop
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <CLCD_Delay>:
******************************************************************************************************************/
#include "CLCD_I2C.h"

//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f001 fa8b 	bl	8002f90 <HAL_Delay>
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b086      	sub	sp, #24
 8001a86:	af02      	add	r7, sp, #8
 8001a88:	6078      	str	r0, [r7, #4]
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	70fb      	strb	r3, [r7, #3]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 8001a92:	78fb      	ldrb	r3, [r7, #3]
 8001a94:	f023 030f 	bic.w	r3, r3, #15
 8001a98:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 8001a9a:	78fb      	ldrb	r3, [r7, #3]
 8001a9c:	011b      	lsls	r3, r3, #4
 8001a9e:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	7adb      	ldrb	r3, [r3, #11]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d007      	beq.n	8001ab8 <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT; 
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
 8001aaa:	f043 0308 	orr.w	r3, r3, #8
 8001aae:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT; 
 8001ab0:	7bbb      	ldrb	r3, [r7, #14]
 8001ab2:	f043 0308 	orr.w	r3, r3, #8
 8001ab6:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 8001ab8:	78bb      	ldrb	r3, [r7, #2]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d108      	bne.n	8001ad0 <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 8001ac6:	7bbb      	ldrb	r3, [r7, #14]
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	73bb      	strb	r3, [r7, #14]
 8001ace:	e00a      	b.n	8001ae6 <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 8001ad0:	78bb      	ldrb	r3, [r7, #2]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d107      	bne.n	8001ae6 <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
 8001ad8:	f023 0301 	bic.w	r3, r3, #1
 8001adc:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 8001ade:	7bbb      	ldrb	r3, [r7, #14]
 8001ae0:	f023 0301 	bic.w	r3, r3, #1
 8001ae4:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 8001ae6:	7bfb      	ldrb	r3, [r7, #15]
 8001ae8:	f043 0304 	orr.w	r3, r3, #4
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 8001af0:	2001      	movs	r0, #1
 8001af2:	f7ff ffb9 	bl	8001a68 <CLCD_Delay>
	Data_I2C[1] = Data_H;
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
 8001af8:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 8001afa:	7bbb      	ldrb	r3, [r7, #14]
 8001afc:	f043 0304 	orr.w	r3, r3, #4
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 8001b04:	2001      	movs	r0, #1
 8001b06:	f7ff ffaf 	bl	8001a68 <CLCD_Delay>
	Data_I2C[3] = Data_L;
 8001b0a:	7bbb      	ldrb	r3, [r7, #14]
 8001b0c:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6818      	ldr	r0, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	791b      	ldrb	r3, [r3, #4]
 8001b16:	b299      	uxth	r1, r3
 8001b18:	f107 0208 	add.w	r2, r7, #8
 8001b1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	2304      	movs	r3, #4
 8001b24:	f002 f88e 	bl	8003c44 <HAL_I2C_Master_Transmit>
}
 8001b28:	bf00      	nop
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <CLCD_I2C_Init>:


//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	4611      	mov	r1, r2
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	460b      	mov	r3, r1
 8001b40:	71fb      	strb	r3, [r7, #7]
 8001b42:	4613      	mov	r3, r2
 8001b44:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	68ba      	ldr	r2, [r7, #8]
 8001b4a:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	79fa      	ldrb	r2, [r7, #7]
 8001b50:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	79ba      	ldrb	r2, [r7, #6]
 8001b56:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	7e3a      	ldrb	r2, [r7, #24]
 8001b5c:	719a      	strb	r2, [r3, #6]
	
	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2228      	movs	r2, #40	; 0x28
 8001b62:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2206      	movs	r2, #6
 8001b68:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	220c      	movs	r2, #12
 8001b6e:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2214      	movs	r2, #20
 8001b74:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2208      	movs	r2, #8
 8001b7a:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 8001b7c:	2032      	movs	r0, #50	; 0x32
 8001b7e:	f7ff ff73 	bl	8001a68 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2133      	movs	r1, #51	; 0x33
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f7ff ff7b 	bl	8001a82 <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2133      	movs	r1, #51	; 0x33
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	f7ff ff76 	bl	8001a82 <CLCD_WriteI2C>
	CLCD_Delay(5);
 8001b96:	2005      	movs	r0, #5
 8001b98:	f7ff ff66 	bl	8001a68 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	2132      	movs	r1, #50	; 0x32
 8001ba0:	68f8      	ldr	r0, [r7, #12]
 8001ba2:	f7ff ff6e 	bl	8001a82 <CLCD_WriteI2C>
	CLCD_Delay(5);
 8001ba6:	2005      	movs	r0, #5
 8001ba8:	f7ff ff5e 	bl	8001a68 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 8001bac:	2200      	movs	r2, #0
 8001bae:	2120      	movs	r1, #32
 8001bb0:	68f8      	ldr	r0, [r7, #12]
 8001bb2:	f7ff ff66 	bl	8001a82 <CLCD_WriteI2C>
	CLCD_Delay(5);
 8001bb6:	2005      	movs	r0, #5
 8001bb8:	f7ff ff56 	bl	8001a68 <CLCD_Delay>
	
	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	79db      	ldrb	r3, [r3, #7]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	68f8      	ldr	r0, [r7, #12]
 8001bc6:	f7ff ff5c 	bl	8001a82 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	7a1b      	ldrb	r3, [r3, #8]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f7ff ff55 	bl	8001a82 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	7a5b      	ldrb	r3, [r3, #9]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	4619      	mov	r1, r3
 8001be0:	68f8      	ldr	r0, [r7, #12]
 8001be2:	f7ff ff4e 	bl	8001a82 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	7a9b      	ldrb	r3, [r3, #10]
 8001bea:	2200      	movs	r2, #0
 8001bec:	4619      	mov	r1, r3
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f7ff ff47 	bl	8001a82 <CLCD_WriteI2C>
	
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	68f8      	ldr	r0, [r7, #12]
 8001bfa:	f7ff ff42 	bl	8001a82 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2102      	movs	r1, #2
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f7ff ff3d 	bl	8001a82 <CLCD_WriteI2C>
}
 8001c08:	bf00      	nop
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	70fb      	strb	r3, [r7, #3]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 8001c20:	2300      	movs	r3, #0
 8001c22:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	795b      	ldrb	r3, [r3, #5]
 8001c28:	78fa      	ldrb	r2, [r7, #3]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d303      	bcc.n	8001c36 <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	795b      	ldrb	r3, [r3, #5]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	799b      	ldrb	r3, [r3, #6]
 8001c3a:	78ba      	ldrb	r2, [r7, #2]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d303      	bcc.n	8001c48 <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	799b      	ldrb	r3, [r3, #6]
 8001c44:	3b01      	subs	r3, #1
 8001c46:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 8001c48:	78bb      	ldrb	r3, [r7, #2]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d102      	bne.n	8001c54 <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 8001c4e:	78fb      	ldrb	r3, [r7, #3]
 8001c50:	73fb      	strb	r3, [r7, #15]
 8001c52:	e013      	b.n	8001c7c <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 8001c54:	78bb      	ldrb	r3, [r7, #2]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d103      	bne.n	8001c62 <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 8001c5a:	78fb      	ldrb	r3, [r7, #3]
 8001c5c:	3340      	adds	r3, #64	; 0x40
 8001c5e:	73fb      	strb	r3, [r7, #15]
 8001c60:	e00c      	b.n	8001c7c <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 8001c62:	78bb      	ldrb	r3, [r7, #2]
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d103      	bne.n	8001c70 <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x14 + Xpos;
 8001c68:	78fb      	ldrb	r3, [r7, #3]
 8001c6a:	3314      	adds	r3, #20
 8001c6c:	73fb      	strb	r3, [r7, #15]
 8001c6e:	e005      	b.n	8001c7c <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 8001c70:	78bb      	ldrb	r3, [r7, #2]
 8001c72:	2b03      	cmp	r3, #3
 8001c74:	d102      	bne.n	8001c7c <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x54 + Xpos;
 8001c76:	78fb      	ldrb	r3, [r7, #3]
 8001c78:	3354      	adds	r3, #84	; 0x54
 8001c7a:	73fb      	strb	r3, [r7, #15]
	}
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8001c7c:	7bfb      	ldrb	r3, [r7, #15]
 8001c7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2200      	movs	r2, #0
 8001c86:	4619      	mov	r1, r3
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff fefa 	bl	8001a82 <CLCD_WriteI2C>
}
 8001c8e:	bf00      	nop
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 8001ca2:	78fb      	ldrb	r3, [r7, #3]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff feea 	bl	8001a82 <CLCD_WriteI2C>
}
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_I2C_WriteChar(LCD, *String++);
 8001cc0:	e007      	b.n	8001cd2 <CLCD_I2C_WriteString+0x1c>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	1c5a      	adds	r2, r3, #1
 8001cc6:	603a      	str	r2, [r7, #0]
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	4619      	mov	r1, r3
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff ffe2 	bl	8001c96 <CLCD_I2C_WriteChar>
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f3      	bne.n	8001cc2 <CLCD_I2C_WriteString+0xc>
}
 8001cda:	bf00      	nop
 8001cdc:	bf00      	nop
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <CLCD_I2C_Clear>:
void CLCD_I2C_Clear(CLCD_I2C_Name* LCD)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 8001cec:	2200      	movs	r2, #0
 8001cee:	2101      	movs	r1, #1
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff fec6 	bl	8001a82 <CLCD_WriteI2C>
	CLCD_Delay(5);
 8001cf6:	2005      	movs	r0, #5
 8001cf8:	f7ff feb6 	bl	8001a68 <CLCD_Delay>
}
 8001cfc:	bf00      	nop
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <CLCD_I2C_ReturnHome>:
void CLCD_I2C_ReturnHome(CLCD_I2C_Name* LCD)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
	CLCD_WriteI2C(LCD, LCD_RETURNHOME, CLCD_COMMAND);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	2102      	movs	r1, #2
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7ff feb6 	bl	8001a82 <CLCD_WriteI2C>
	CLCD_Delay(5);
 8001d16:	2005      	movs	r0, #5
 8001d18:	f7ff fea6 	bl	8001a68 <CLCD_Delay>
}
 8001d1c:	bf00      	nop
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <LCD_Begin>:
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
}

/* Short code */
void LCD_Begin(CLCD_I2C_Name *LCD, I2C_HandleTypeDef *hi2c_CLCD,
	uint8_t Address, uint8_t Colums, uint8_t Rows) {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af02      	add	r7, sp, #8
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	4611      	mov	r1, r2
 8001d30:	461a      	mov	r2, r3
 8001d32:	460b      	mov	r3, r1
 8001d34:	71fb      	strb	r3, [r7, #7]
 8001d36:	4613      	mov	r3, r2
 8001d38:	71bb      	strb	r3, [r7, #6]
  CLCD_I2C_Init(LCD, hi2c_CLCD, Address, Colums, Rows);
 8001d3a:	79b9      	ldrb	r1, [r7, #6]
 8001d3c:	79fa      	ldrb	r2, [r7, #7]
 8001d3e:	7e3b      	ldrb	r3, [r7, #24]
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	460b      	mov	r3, r1
 8001d44:	68b9      	ldr	r1, [r7, #8]
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f7ff fef2 	bl	8001b30 <CLCD_I2C_Init>
}
 8001d4c:	bf00      	nop
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <LCD_Set_Cursor>:
void LCD_Set_Cursor(CLCD_I2C_Name *LCD, u8 a, u8 b) {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	70fb      	strb	r3, [r7, #3]
 8001d60:	4613      	mov	r3, r2
 8001d62:	70bb      	strb	r3, [r7, #2]
  a -= 1;
 8001d64:	78fb      	ldrb	r3, [r7, #3]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	70fb      	strb	r3, [r7, #3]
  b -= 1;
 8001d6a:	78bb      	ldrb	r3, [r7, #2]
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	70bb      	strb	r3, [r7, #2]
  CLCD_I2C_SetCursor(LCD, b, a);
 8001d70:	78fa      	ldrb	r2, [r7, #3]
 8001d72:	78bb      	ldrb	r3, [r7, #2]
 8001d74:	4619      	mov	r1, r3
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7ff ff4a 	bl	8001c10 <CLCD_I2C_SetCursor>
}
 8001d7c:	bf00      	nop
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <LCD_Clear>:
void LCD_Print_Char(CLCD_I2C_Name *LCD, char data) {
  CLCD_I2C_WriteChar(LCD, data);
}
void LCD_Clear(CLCD_I2C_Name *LCD) {
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  CLCD_I2C_Clear(LCD);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff ffa9 	bl	8001ce4 <CLCD_I2C_Clear>
  CLCD_I2C_ReturnHome(LCD);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff ffb6 	bl	8001d04 <CLCD_I2C_ReturnHome>
}
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <LCD_Print_String>:
void LCD_Print_String(CLCD_I2C_Name *LCD, char *data) {
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  CLCD_I2C_WriteString(LCD, data);
 8001daa:	6839      	ldr	r1, [r7, #0]
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff ff82 	bl	8001cb6 <CLCD_I2C_WriteString>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <LCD_Print_String_At>:
  itoa(data, temp_buffer, 10);
  u8 i;
  for (i = 0; temp_buffer[i] != '\0'; i++)
	LCD_Print_Char(LCD, temp_buffer[i]); //Split the string using pointers and call the Char function
}
void LCD_Print_String_At(CLCD_I2C_Name *LCD, u8 a, u8 b, char *data) {
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b084      	sub	sp, #16
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	60f8      	str	r0, [r7, #12]
 8001dc2:	607b      	str	r3, [r7, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	72fb      	strb	r3, [r7, #11]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	72bb      	strb	r3, [r7, #10]
  LCD_Set_Cursor(LCD, a, b);
 8001dcc:	7aba      	ldrb	r2, [r7, #10]
 8001dce:	7afb      	ldrb	r3, [r7, #11]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f7ff ffbe 	bl	8001d54 <LCD_Set_Cursor>
  LCD_Print_String(LCD, data);
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f7ff ffe0 	bl	8001da0 <LCD_Print_String>
}
 8001de0:	bf00      	nop
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <start_up>:

bool FLAG_run = false;

u32 pwm = 500;

void start_up() {
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af02      	add	r7, sp, #8
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001dee:	213c      	movs	r1, #60	; 0x3c
 8001df0:	484f      	ldr	r0, [pc, #316]	; (8001f30 <start_up+0x148>)
 8001df2:	f003 f819 	bl	8004e28 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001df6:	213c      	movs	r1, #60	; 0x3c
 8001df8:	484e      	ldr	r0, [pc, #312]	; (8001f34 <start_up+0x14c>)
 8001dfa:	f003 f815 	bl	8004e28 <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start_IT(&htim4); //1ms
 8001dfe:	484e      	ldr	r0, [pc, #312]	; (8001f38 <start_up+0x150>)
 8001e00:	f002 fe2c 	bl	8004a5c <HAL_TIM_Base_Start_IT>

//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);	//PWM1A
//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //PWM1B
//  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);	//PWM2A
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);	//PWM2B
 8001e04:	2108      	movs	r1, #8
 8001e06:	484c      	ldr	r0, [pc, #304]	; (8001f38 <start_up+0x150>)
 8001e08:	f002 feca 	bl	8004ba0 <HAL_TIM_PWM_Start>
  HAL_Delay(10);
 8001e0c:	200a      	movs	r0, #10
 8001e0e:	f001 f8bf 	bl	8002f90 <HAL_Delay>

  buttonInit(&BTN_Start, BTN_Start_GPIO_Port, BTN_Start_Pin);
 8001e12:	2208      	movs	r2, #8
 8001e14:	4949      	ldr	r1, [pc, #292]	; (8001f3c <start_up+0x154>)
 8001e16:	484a      	ldr	r0, [pc, #296]	; (8001f40 <start_up+0x158>)
 8001e18:	f7ff fdff 	bl	8001a1a <buttonInit>
  buttonInit(&BTN_Stop, BTN_Stop_GPIO_Port, BTN_Stop_Pin);
 8001e1c:	2210      	movs	r2, #16
 8001e1e:	4947      	ldr	r1, [pc, #284]	; (8001f3c <start_up+0x154>)
 8001e20:	4848      	ldr	r0, [pc, #288]	; (8001f44 <start_up+0x15c>)
 8001e22:	f7ff fdfa 	bl	8001a1a <buttonInit>
  buttonInit(&BTN_Mode, BTN_Mode_GPIO_Port, BTN_Mode_Pin);
 8001e26:	2220      	movs	r2, #32
 8001e28:	4944      	ldr	r1, [pc, #272]	; (8001f3c <start_up+0x154>)
 8001e2a:	4847      	ldr	r0, [pc, #284]	; (8001f48 <start_up+0x160>)
 8001e2c:	f7ff fdf5 	bl	8001a1a <buttonInit>

  // Splash screen
  LCD_Begin(&LCD, &hi2c2, 0x4E, 20, 4);
 8001e30:	2304      	movs	r3, #4
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	2314      	movs	r3, #20
 8001e36:	224e      	movs	r2, #78	; 0x4e
 8001e38:	4944      	ldr	r1, [pc, #272]	; (8001f4c <start_up+0x164>)
 8001e3a:	4845      	ldr	r0, [pc, #276]	; (8001f50 <start_up+0x168>)
 8001e3c:	f7ff ff72 	bl	8001d24 <LCD_Begin>
   |     SHOE UPPER     |
   |   CUTTING TESTER   |
   |                    |
   ----------------------
   **************************/
  LCD_Clear(&LCD);
 8001e40:	4843      	ldr	r0, [pc, #268]	; (8001f50 <start_up+0x168>)
 8001e42:	f7ff ff9f 	bl	8001d84 <LCD_Clear>
  LED_ON();
 8001e46:	f000 f9bb 	bl	80021c0 <LED_ON>
  LCD_Print_String_At(&LCD, 1, 4, "Safety Glove &");
 8001e4a:	4b42      	ldr	r3, [pc, #264]	; (8001f54 <start_up+0x16c>)
 8001e4c:	2204      	movs	r2, #4
 8001e4e:	2101      	movs	r1, #1
 8001e50:	483f      	ldr	r0, [pc, #252]	; (8001f50 <start_up+0x168>)
 8001e52:	f7ff ffb2 	bl	8001dba <LCD_Print_String_At>
  LCD_Print_String_At(&LCD, 2, 6, "Shoe Upper");
 8001e56:	4b40      	ldr	r3, [pc, #256]	; (8001f58 <start_up+0x170>)
 8001e58:	2206      	movs	r2, #6
 8001e5a:	2102      	movs	r1, #2
 8001e5c:	483c      	ldr	r0, [pc, #240]	; (8001f50 <start_up+0x168>)
 8001e5e:	f7ff ffac 	bl	8001dba <LCD_Print_String_At>
  LCD_Print_String_At(&LCD, 3, 4, "Cutting Tester");
 8001e62:	4b3e      	ldr	r3, [pc, #248]	; (8001f5c <start_up+0x174>)
 8001e64:	2204      	movs	r2, #4
 8001e66:	2103      	movs	r1, #3
 8001e68:	4839      	ldr	r0, [pc, #228]	; (8001f50 <start_up+0x168>)
 8001e6a:	f7ff ffa6 	bl	8001dba <LCD_Print_String_At>

  // Restore value
  menu1_value = (float) FLASH_ReadData(FLASH_USER_START_ADDR); // Speed
 8001e6e:	483c      	ldr	r0, [pc, #240]	; (8001f60 <start_up+0x178>)
 8001e70:	f000 f9ca 	bl	8002208 <FLASH_ReadData>
 8001e74:	4603      	mov	r3, r0
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7fe fe66 	bl	8000b48 <__aeabi_ui2f>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	4a39      	ldr	r2, [pc, #228]	; (8001f64 <start_up+0x17c>)
 8001e80:	6013      	str	r3, [r2, #0]
  menu2_value = (s8) FLASH_ReadData(FLASH_USER_START_ADDR + 4); // Dir
 8001e82:	4839      	ldr	r0, [pc, #228]	; (8001f68 <start_up+0x180>)
 8001e84:	f000 f9c0 	bl	8002208 <FLASH_ReadData>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	b25a      	sxtb	r2, r3
 8001e8c:	4b37      	ldr	r3, [pc, #220]	; (8001f6c <start_up+0x184>)
 8001e8e:	701a      	strb	r2, [r3, #0]
  menu3_value = (s32) FLASH_ReadData(FLASH_USER_START_ADDR + 8); //set count
 8001e90:	4837      	ldr	r0, [pc, #220]	; (8001f70 <start_up+0x188>)
 8001e92:	f000 f9b9 	bl	8002208 <FLASH_ReadData>
 8001e96:	4603      	mov	r3, r0
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b36      	ldr	r3, [pc, #216]	; (8001f74 <start_up+0x18c>)
 8001e9c:	601a      	str	r2, [r3, #0]

  // speed
  if (menu1_value > 100)
 8001e9e:	4b31      	ldr	r3, [pc, #196]	; (8001f64 <start_up+0x17c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4935      	ldr	r1, [pc, #212]	; (8001f78 <start_up+0x190>)
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff f863 	bl	8000f70 <__aeabi_fcmpgt>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <start_up+0xd0>
	menu1_value = 100;
 8001eb0:	4b2c      	ldr	r3, [pc, #176]	; (8001f64 <start_up+0x17c>)
 8001eb2:	4a31      	ldr	r2, [pc, #196]	; (8001f78 <start_up+0x190>)
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	e00b      	b.n	8001ed0 <start_up+0xe8>
  else if (menu1_value < 30)
 8001eb8:	4b2a      	ldr	r3, [pc, #168]	; (8001f64 <start_up+0x17c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	492f      	ldr	r1, [pc, #188]	; (8001f7c <start_up+0x194>)
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff f838 	bl	8000f34 <__aeabi_fcmplt>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d002      	beq.n	8001ed0 <start_up+0xe8>
	menu1_value = 30;
 8001eca:	4b26      	ldr	r3, [pc, #152]	; (8001f64 <start_up+0x17c>)
 8001ecc:	4a2b      	ldr	r2, [pc, #172]	; (8001f7c <start_up+0x194>)
 8001ece:	601a      	str	r2, [r3, #0]

  // count
  if (menu2_value > 100)
 8001ed0:	4b26      	ldr	r3, [pc, #152]	; (8001f6c <start_up+0x184>)
 8001ed2:	f993 3000 	ldrsb.w	r3, [r3]
 8001ed6:	2b64      	cmp	r3, #100	; 0x64
 8001ed8:	dd03      	ble.n	8001ee2 <start_up+0xfa>
	menu1_value = 100;
 8001eda:	4b22      	ldr	r3, [pc, #136]	; (8001f64 <start_up+0x17c>)
 8001edc:	4a26      	ldr	r2, [pc, #152]	; (8001f78 <start_up+0x190>)
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	e008      	b.n	8001ef4 <start_up+0x10c>
  else if (menu2_value <= 0)
 8001ee2:	4b22      	ldr	r3, [pc, #136]	; (8001f6c <start_up+0x184>)
 8001ee4:	f993 3000 	ldrsb.w	r3, [r3]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	dc03      	bgt.n	8001ef4 <start_up+0x10c>
	menu1_value = 0;
 8001eec:	4b1d      	ldr	r3, [pc, #116]	; (8001f64 <start_up+0x17c>)
 8001eee:	f04f 0200 	mov.w	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]

  // time (second)
  if (menu3_value > 6000)
 8001ef4:	4b1f      	ldr	r3, [pc, #124]	; (8001f74 <start_up+0x18c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f241 7270 	movw	r2, #6000	; 0x1770
 8001efc:	4293      	cmp	r3, r2
 8001efe:	dd04      	ble.n	8001f0a <start_up+0x122>
	menu3_value = 6000;
 8001f00:	4b1c      	ldr	r3, [pc, #112]	; (8001f74 <start_up+0x18c>)
 8001f02:	f241 7270 	movw	r2, #6000	; 0x1770
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	e006      	b.n	8001f18 <start_up+0x130>
  else if (menu3_value < 10)
 8001f0a:	4b1a      	ldr	r3, [pc, #104]	; (8001f74 <start_up+0x18c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2b09      	cmp	r3, #9
 8001f10:	dc02      	bgt.n	8001f18 <start_up+0x130>
	menu3_value = 10;
 8001f12:	4b18      	ldr	r3, [pc, #96]	; (8001f74 <start_up+0x18c>)
 8001f14:	220a      	movs	r2, #10
 8001f16:	601a      	str	r2, [r3, #0]

  HAL_Delay(1000);
 8001f18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f1c:	f001 f838 	bl	8002f90 <HAL_Delay>
  LCD_Clear(&LCD);
 8001f20:	480b      	ldr	r0, [pc, #44]	; (8001f50 <start_up+0x168>)
 8001f22:	f7ff ff2f 	bl	8001d84 <LCD_Clear>
  LED_OFF();
 8001f26:	f000 f957 	bl	80021d8 <LED_OFF>
}
 8001f2a:	bf00      	nop
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	20000100 	.word	0x20000100
 8001f34:	20000148 	.word	0x20000148
 8001f38:	200001d8 	.word	0x200001d8
 8001f3c:	40010c00 	.word	0x40010c00
 8001f40:	20000230 	.word	0x20000230
 8001f44:	20000250 	.word	0x20000250
 8001f48:	20000270 	.word	0x20000270
 8001f4c:	200000ac 	.word	0x200000ac
 8001f50:	20000224 	.word	0x20000224
 8001f54:	08006184 	.word	0x08006184
 8001f58:	08006194 	.word	0x08006194
 8001f5c:	080061a0 	.word	0x080061a0
 8001f60:	0801f810 	.word	0x0801f810
 8001f64:	20000290 	.word	0x20000290
 8001f68:	0801f814 	.word	0x0801f814
 8001f6c:	20000004 	.word	0x20000004
 8001f70:	0801f818 	.word	0x0801f818
 8001f74:	20000008 	.word	0x20000008
 8001f78:	42c80000 	.word	0x42c80000
 8001f7c:	41f00000 	.word	0x41f00000

08001f80 <check_state>:

void check_state() {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  // If Enter new state
  if (preState != state) {
 8001f84:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <check_state+0x30>)
 8001f86:	781a      	ldrb	r2, [r3, #0]
 8001f88:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <check_state+0x34>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d00c      	beq.n	8001faa <check_state+0x2a>
	LCD_Clear(&LCD);
 8001f90:	4809      	ldr	r0, [pc, #36]	; (8001fb8 <check_state+0x38>)
 8001f92:	f7ff fef7 	bl	8001d84 <LCD_Clear>
	preState = state;
 8001f96:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <check_state+0x34>)
 8001f98:	781a      	ldrb	r2, [r3, #0]
 8001f9a:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <check_state+0x30>)
 8001f9c:	701a      	strb	r2, [r3, #0]
	refreshLCD = true;
 8001f9e:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <check_state+0x3c>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	701a      	strb	r2, [r3, #0]
	refreshSelection = true;
 8001fa4:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <check_state+0x40>)
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	701a      	strb	r2, [r3, #0]
  }
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	2000000d 	.word	0x2000000d
 8001fb4:	2000000c 	.word	0x2000000c
 8001fb8:	20000224 	.word	0x20000224
 8001fbc:	2000000f 	.word	0x2000000f
 8001fc0:	2000029a 	.word	0x2000029a

08001fc4 <main_loop>:
void main_loop() {
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
  check_state();
 8001fca:	f7ff ffd9 	bl	8001f80 <check_state>
  check_ecd();
 8001fce:	f000 fd2d 	bl	8002a2c <check_ecd>

  switch (state) {
 8001fd2:	4b69      	ldr	r3, [pc, #420]	; (8002178 <main_loop+0x1b4>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	2b03      	cmp	r3, #3
 8001fda:	f200 80c5 	bhi.w	8002168 <main_loop+0x1a4>
 8001fde:	a201      	add	r2, pc, #4	; (adr r2, 8001fe4 <main_loop+0x20>)
 8001fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe4:	08001ff5 	.word	0x08001ff5
 8001fe8:	08002011 	.word	0x08002011
 8001fec:	08002061 	.word	0x08002061
 8001ff0:	08002145 	.word	0x08002145
	   |Count:    0 revs    |
	   |Set count: xxxx     |
	   ----------------------
	   **************************/
	{
	  if (refreshLCD == true) {
 8001ff4:	4b61      	ldr	r3, [pc, #388]	; (800217c <main_loop+0x1b8>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 80b7 	beq.w	800216c <main_loop+0x1a8>
		printDefaultLCD();
 8001ffe:	f000 fa1b 	bl	8002438 <printDefaultLCD>
		HAL_Delay(10);
 8002002:	200a      	movs	r0, #10
 8002004:	f000 ffc4 	bl	8002f90 <HAL_Delay>
		refreshLCD = false;
 8002008:	4b5c      	ldr	r3, [pc, #368]	; (800217c <main_loop+0x1b8>)
 800200a:	2200      	movs	r2, #0
 800200c:	701a      	strb	r2, [r3, #0]
	  }
	  break;
 800200e:	e0ad      	b.n	800216c <main_loop+0x1a8>
	   | Set count: xxxx    |
	   |                    |
	   ----------------------
	   **************************/
	{
	  if (refreshLCD == true) //If we are allowed to update the LCD ...
 8002010:	4b5a      	ldr	r3, [pc, #360]	; (800217c <main_loop+0x1b8>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d018      	beq.n	800204a <main_loop+0x86>
	  {
		printLCD();
 8002018:	f000 f904 	bl	8002224 <printLCD>
		updateLCD(); // ... we update the LCD ...
 800201c:	f000 f920 	bl	8002260 <updateLCD>

		//... also, if one of the menus are already selected...
		if (menu1_selected == true || menu2_selected == true
 8002020:	4b57      	ldr	r3, [pc, #348]	; (8002180 <main_loop+0x1bc>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10d      	bne.n	8002044 <main_loop+0x80>
 8002028:	4b56      	ldr	r3, [pc, #344]	; (8002184 <main_loop+0x1c0>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d109      	bne.n	8002044 <main_loop+0x80>
			|| menu3_selected == true || menu4_selected == true) {
 8002030:	4b55      	ldr	r3, [pc, #340]	; (8002188 <main_loop+0x1c4>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d105      	bne.n	8002044 <main_loop+0x80>
 8002038:	4b54      	ldr	r3, [pc, #336]	; (800218c <main_loop+0x1c8>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <main_loop+0x80>
		  // do nothing
		} else {
		  updateCursorPosition(); //update the position
 8002040:	f000 f972 	bl	8002328 <updateCursorPosition>
		}

		refreshLCD = false; //reset the variable - wait for a new trigger
 8002044:	4b4d      	ldr	r3, [pc, #308]	; (800217c <main_loop+0x1b8>)
 8002046:	2200      	movs	r2, #0
 8002048:	701a      	strb	r2, [r3, #0]
	  }
	  if (refreshSelection == true) //if the selection is changed
 800204a:	4b51      	ldr	r3, [pc, #324]	; (8002190 <main_loop+0x1cc>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 808e 	beq.w	8002170 <main_loop+0x1ac>
	  {
		updateSelection(); //update the selection on the LCD
 8002054:	f000 f9b8 	bl	80023c8 <updateSelection>
		refreshSelection = false; // reset the variable - wait for a new trigger
 8002058:	4b4d      	ldr	r3, [pc, #308]	; (8002190 <main_loop+0x1cc>)
 800205a:	2200      	movs	r2, #0
 800205c:	701a      	strb	r2, [r3, #0]
	  }
	  break;
 800205e:	e087      	b.n	8002170 <main_loop+0x1ac>
	   |Set count: xxxx     |
	   |Count:    0 revs    |
	   ----------------------
	   **************************/
	{
	  printDefaultLCD();
 8002060:	f000 f9ea 	bl	8002438 <printDefaultLCD>
	  s32 motor_posi = TIM1_count;
 8002064:	4b4b      	ldr	r3, [pc, #300]	; (8002194 <main_loop+0x1d0>)
 8002066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002068:	617b      	str	r3, [r7, #20]
	  s32 delta = motor_posi - pre_posi;
 800206a:	4b4b      	ldr	r3, [pc, #300]	; (8002198 <main_loop+0x1d4>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	613b      	str	r3, [r7, #16]
	  if (abs(delta) > totalPulse) {
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	2b00      	cmp	r3, #0
 8002078:	bfb8      	it	lt
 800207a:	425b      	neglt	r3, r3
 800207c:	f640 7278 	movw	r2, #3960	; 0xf78
 8002080:	4293      	cmp	r3, r2
 8002082:	dd08      	ble.n	8002096 <main_loop+0xd2>
		n_loop++;
 8002084:	4b45      	ldr	r3, [pc, #276]	; (800219c <main_loop+0x1d8>)
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	3301      	adds	r3, #1
 800208a:	b29a      	uxth	r2, r3
 800208c:	4b43      	ldr	r3, [pc, #268]	; (800219c <main_loop+0x1d8>)
 800208e:	801a      	strh	r2, [r3, #0]
		pre_posi = motor_posi;
 8002090:	4a41      	ldr	r2, [pc, #260]	; (8002198 <main_loop+0x1d4>)
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	6013      	str	r3, [r2, #0]
	  }

	  if (n_loop >= mNumLoopCount)
 8002096:	4b41      	ldr	r3, [pc, #260]	; (800219c <main_loop+0x1d8>)
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	461a      	mov	r2, r3
 800209c:	4b40      	ldr	r3, [pc, #256]	; (80021a0 <main_loop+0x1dc>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	db04      	blt.n	80020ae <main_loop+0xea>
		n_loop = mNumLoopCount;
 80020a4:	4b3e      	ldr	r3, [pc, #248]	; (80021a0 <main_loop+0x1dc>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	4b3c      	ldr	r3, [pc, #240]	; (800219c <main_loop+0x1d8>)
 80020ac:	801a      	strh	r2, [r3, #0]
	  char holder[10];
	  LCD_Print_String_At(&LCD, 4, 8, "         ");
 80020ae:	4b3d      	ldr	r3, [pc, #244]	; (80021a4 <main_loop+0x1e0>)
 80020b0:	2208      	movs	r2, #8
 80020b2:	2104      	movs	r1, #4
 80020b4:	483c      	ldr	r0, [pc, #240]	; (80021a8 <main_loop+0x1e4>)
 80020b6:	f7ff fe80 	bl	8001dba <LCD_Print_String_At>
	  if (n_loop < 2) {
 80020ba:	4b38      	ldr	r3, [pc, #224]	; (800219c <main_loop+0x1d8>)
 80020bc:	881b      	ldrh	r3, [r3, #0]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d808      	bhi.n	80020d4 <main_loop+0x110>
		sprintf(holder, "%4d rev", n_loop);
 80020c2:	4b36      	ldr	r3, [pc, #216]	; (800219c <main_loop+0x1d8>)
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	461a      	mov	r2, r3
 80020c8:	1d3b      	adds	r3, r7, #4
 80020ca:	4938      	ldr	r1, [pc, #224]	; (80021ac <main_loop+0x1e8>)
 80020cc:	4618      	mov	r0, r3
 80020ce:	f003 fbd3 	bl	8005878 <siprintf>
 80020d2:	e007      	b.n	80020e4 <main_loop+0x120>
	  } else {
		sprintf(holder, "%4d revs", n_loop);
 80020d4:	4b31      	ldr	r3, [pc, #196]	; (800219c <main_loop+0x1d8>)
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	461a      	mov	r2, r3
 80020da:	1d3b      	adds	r3, r7, #4
 80020dc:	4934      	ldr	r1, [pc, #208]	; (80021b0 <main_loop+0x1ec>)
 80020de:	4618      	mov	r0, r3
 80020e0:	f003 fbca 	bl	8005878 <siprintf>
	  }
	  LCD_Print_String_At(&LCD, 4, 8, holder);
 80020e4:	1d3b      	adds	r3, r7, #4
 80020e6:	2208      	movs	r2, #8
 80020e8:	2104      	movs	r1, #4
 80020ea:	482f      	ldr	r0, [pc, #188]	; (80021a8 <main_loop+0x1e4>)
 80020ec:	f7ff fe65 	bl	8001dba <LCD_Print_String_At>

	  // Stop condition
	  if (n_loop >= mNumLoopCount) {
 80020f0:	4b2a      	ldr	r3, [pc, #168]	; (800219c <main_loop+0x1d8>)
 80020f2:	881b      	ldrh	r3, [r3, #0]
 80020f4:	461a      	mov	r2, r3
 80020f6:	4b2a      	ldr	r3, [pc, #168]	; (80021a0 <main_loop+0x1dc>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	db0a      	blt.n	8002114 <main_loop+0x150>
		state = 4;
 80020fe:	4b1e      	ldr	r3, [pc, #120]	; (8002178 <main_loop+0x1b4>)
 8002100:	2204      	movs	r2, #4
 8002102:	701a      	strb	r2, [r3, #0]
		set_motor(1, -2, 0);
 8002104:	2200      	movs	r2, #0
 8002106:	f06f 0101 	mvn.w	r1, #1
 800210a:	2001      	movs	r0, #1
 800210c:	f000 fa40 	bl	8002590 <set_motor>
		LED_OFF();
 8002110:	f000 f862 	bl	80021d8 <LED_OFF>
	  }

	  //out to motor

//	  s32 mSpeedPwm = map(mSpeed,minSpeed,maxSpeed,0,1000);
	  if (mDir == 1) {
 8002114:	4b27      	ldr	r3, [pc, #156]	; (80021b4 <main_loop+0x1f0>)
 8002116:	f993 3000 	ldrsb.w	r3, [r3]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d108      	bne.n	8002130 <main_loop+0x16c>
		set_motor(1, 1, pwm);
 800211e:	4b26      	ldr	r3, [pc, #152]	; (80021b8 <main_loop+0x1f4>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	b29b      	uxth	r3, r3
 8002124:	461a      	mov	r2, r3
 8002126:	2101      	movs	r1, #1
 8002128:	2001      	movs	r0, #1
 800212a:	f000 fa31 	bl	8002590 <set_motor>
	  } else {
		set_motor(1, -1, pwm);
	  }
	  break;
 800212e:	e020      	b.n	8002172 <main_loop+0x1ae>
		set_motor(1, -1, pwm);
 8002130:	4b21      	ldr	r3, [pc, #132]	; (80021b8 <main_loop+0x1f4>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	b29b      	uxth	r3, r3
 8002136:	461a      	mov	r2, r3
 8002138:	f04f 31ff 	mov.w	r1, #4294967295
 800213c:	2001      	movs	r0, #1
 800213e:	f000 fa27 	bl	8002590 <set_motor>
	  break;
 8002142:	e016      	b.n	8002172 <main_loop+0x1ae>
	   |Count:    0 revs    |
	   |Set count: xxxx     |
	   ----------------------
	   **************************/
	{
	  FLAG_run = false;
 8002144:	4b1d      	ldr	r3, [pc, #116]	; (80021bc <main_loop+0x1f8>)
 8002146:	2200      	movs	r2, #0
 8002148:	701a      	strb	r2, [r3, #0]
	  set_motor(1, -2, 0);
 800214a:	2200      	movs	r2, #0
 800214c:	f06f 0101 	mvn.w	r1, #1
 8002150:	2001      	movs	r0, #1
 8002152:	f000 fa1d 	bl	8002590 <set_motor>
	  LED_TOGGLE();
 8002156:	f000 f84b 	bl	80021f0 <LED_TOGGLE>
	  printDefaultLCD();
 800215a:	f000 f96d 	bl	8002438 <printDefaultLCD>

	  HAL_Delay(300);
 800215e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002162:	f000 ff15 	bl	8002f90 <HAL_Delay>
	  break;
 8002166:	e004      	b.n	8002172 <main_loop+0x1ae>
	}
	default:
	  return;
 8002168:	bf00      	nop
 800216a:	e002      	b.n	8002172 <main_loop+0x1ae>
	  break;
 800216c:	bf00      	nop
 800216e:	e000      	b.n	8002172 <main_loop+0x1ae>
	  break;
 8002170:	bf00      	nop
  } //Switch lvl1
}
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	2000000c 	.word	0x2000000c
 800217c:	2000000f 	.word	0x2000000f
 8002180:	20000296 	.word	0x20000296
 8002184:	20000297 	.word	0x20000297
 8002188:	20000298 	.word	0x20000298
 800218c:	20000299 	.word	0x20000299
 8002190:	2000029a 	.word	0x2000029a
 8002194:	40012c00 	.word	0x40012c00
 8002198:	200002c8 	.word	0x200002c8
 800219c:	20000294 	.word	0x20000294
 80021a0:	20000008 	.word	0x20000008
 80021a4:	080061b0 	.word	0x080061b0
 80021a8:	20000224 	.word	0x20000224
 80021ac:	080061bc 	.word	0x080061bc
 80021b0:	080061c4 	.word	0x080061c4
 80021b4:	20000004 	.word	0x20000004
 80021b8:	2000001c 	.word	0x2000001c
 80021bc:	200002cc 	.word	0x200002cc

080021c0 <LED_ON>:

void LED_ON() {
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED_Panel_GPIO_Port, LED_Panel_Pin, GPIO_PIN_SET);
 80021c4:	2201      	movs	r2, #1
 80021c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021ca:	4802      	ldr	r0, [pc, #8]	; (80021d4 <LED_ON+0x14>)
 80021cc:	f001 fbad 	bl	800392a <HAL_GPIO_WritePin>
}
 80021d0:	bf00      	nop
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40010c00 	.word	0x40010c00

080021d8 <LED_OFF>:
void LED_OFF() {
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED_Panel_GPIO_Port, LED_Panel_Pin, GPIO_PIN_RESET);
 80021dc:	2200      	movs	r2, #0
 80021de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021e2:	4802      	ldr	r0, [pc, #8]	; (80021ec <LED_OFF+0x14>)
 80021e4:	f001 fba1 	bl	800392a <HAL_GPIO_WritePin>
}
 80021e8:	bf00      	nop
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40010c00 	.word	0x40010c00

080021f0 <LED_TOGGLE>:
void LED_TOGGLE() {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  HAL_GPIO_TogglePin(LED_Panel_GPIO_Port, LED_Panel_Pin);
 80021f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021f8:	4802      	ldr	r0, [pc, #8]	; (8002204 <LED_TOGGLE+0x14>)
 80021fa:	f001 fbae 	bl	800395a <HAL_GPIO_TogglePin>
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40010c00 	.word	0x40010c00

08002208 <FLASH_ReadData>:
  uint32_t PageError = 0;
  HAL_FLASHEx_Erase(&EraseInit, &PageError);
  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, startPage, data);
  HAL_FLASH_Lock();
}
uint32_t FLASH_ReadData(uint32_t addr) {
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /*
   * Read 4 bytes
   * */
  uint32_t data = *(__IO uint32_t*) (addr);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	60fb      	str	r3, [r7, #12]
  return data;
 8002216:	68fb      	ldr	r3, [r7, #12]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	bc80      	pop	{r7}
 8002220:	4770      	bx	lr
	...

08002224 <printLCD>:

void printLCD() {
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
   |                    |
   ----------------------
   **************************/

  //These are the values which are not changing the operation
  LCD_Print_String_At(&LCD, 1, 2, "Speed: ");
 8002228:	4b09      	ldr	r3, [pc, #36]	; (8002250 <printLCD+0x2c>)
 800222a:	2202      	movs	r2, #2
 800222c:	2101      	movs	r1, #1
 800222e:	4809      	ldr	r0, [pc, #36]	; (8002254 <printLCD+0x30>)
 8002230:	f7ff fdc3 	bl	8001dba <LCD_Print_String_At>
  //----------------------
  LCD_Print_String_At(&LCD, 2, 2, "Direction: ");
 8002234:	4b08      	ldr	r3, [pc, #32]	; (8002258 <printLCD+0x34>)
 8002236:	2202      	movs	r2, #2
 8002238:	2102      	movs	r1, #2
 800223a:	4806      	ldr	r0, [pc, #24]	; (8002254 <printLCD+0x30>)
 800223c:	f7ff fdbd 	bl	8001dba <LCD_Print_String_At>
  LCD_Print_String_At(&LCD, 3, 2, "Set count: ");
 8002240:	4b06      	ldr	r3, [pc, #24]	; (800225c <printLCD+0x38>)
 8002242:	2202      	movs	r2, #2
 8002244:	2103      	movs	r1, #3
 8002246:	4803      	ldr	r0, [pc, #12]	; (8002254 <printLCD+0x30>)
 8002248:	f7ff fdb7 	bl	8001dba <LCD_Print_String_At>
  //----------------------
}
 800224c:	bf00      	nop
 800224e:	bd80      	pop	{r7, pc}
 8002250:	080061d0 	.word	0x080061d0
 8002254:	20000224 	.word	0x20000224
 8002258:	080061d8 	.word	0x080061d8
 800225c:	080061e4 	.word	0x080061e4

08002260 <updateLCD>:
void updateLCD() {
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
   | Set count: xxxx    |
   |                    |
   ----------------------
   **************************/
  //Update value
  LCD_Print_String_At(&LCD, 1, 9, "      ");
 8002266:	4b25      	ldr	r3, [pc, #148]	; (80022fc <updateLCD+0x9c>)
 8002268:	2209      	movs	r2, #9
 800226a:	2101      	movs	r1, #1
 800226c:	4824      	ldr	r0, [pc, #144]	; (8002300 <updateLCD+0xa0>)
 800226e:	f7ff fda4 	bl	8001dba <LCD_Print_String_At>
  char holder[10];
  sprintf(holder, "%3d rpm", (int) menu1_value);
 8002272:	4b24      	ldr	r3, [pc, #144]	; (8002304 <updateLCD+0xa4>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe fe84 	bl	8000f84 <__aeabi_f2iz>
 800227c:	4602      	mov	r2, r0
 800227e:	1d3b      	adds	r3, r7, #4
 8002280:	4921      	ldr	r1, [pc, #132]	; (8002308 <updateLCD+0xa8>)
 8002282:	4618      	mov	r0, r3
 8002284:	f003 faf8 	bl	8005878 <siprintf>
  LCD_Print_String_At(&LCD, 1, 9, holder);
 8002288:	1d3b      	adds	r3, r7, #4
 800228a:	2209      	movs	r2, #9
 800228c:	2101      	movs	r1, #1
 800228e:	481c      	ldr	r0, [pc, #112]	; (8002300 <updateLCD+0xa0>)
 8002290:	f7ff fd93 	bl	8001dba <LCD_Print_String_At>

  LCD_Print_String_At(&LCD, 2, 13, "    ");
 8002294:	4b1d      	ldr	r3, [pc, #116]	; (800230c <updateLCD+0xac>)
 8002296:	220d      	movs	r2, #13
 8002298:	2102      	movs	r1, #2
 800229a:	4819      	ldr	r0, [pc, #100]	; (8002300 <updateLCD+0xa0>)
 800229c:	f7ff fd8d 	bl	8001dba <LCD_Print_String_At>
  if (menu2_value == 1) {
 80022a0:	4b1b      	ldr	r3, [pc, #108]	; (8002310 <updateLCD+0xb0>)
 80022a2:	f993 3000 	ldrsb.w	r3, [r3]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d105      	bne.n	80022b6 <updateLCD+0x56>
	sprintf(holder, " CW");
 80022aa:	1d3b      	adds	r3, r7, #4
 80022ac:	4919      	ldr	r1, [pc, #100]	; (8002314 <updateLCD+0xb4>)
 80022ae:	4618      	mov	r0, r3
 80022b0:	f003 fae2 	bl	8005878 <siprintf>
 80022b4:	e004      	b.n	80022c0 <updateLCD+0x60>
  } else {
	sprintf(holder, "CCW");
 80022b6:	1d3b      	adds	r3, r7, #4
 80022b8:	4917      	ldr	r1, [pc, #92]	; (8002318 <updateLCD+0xb8>)
 80022ba:	4618      	mov	r0, r3
 80022bc:	f003 fadc 	bl	8005878 <siprintf>
  }
  LCD_Print_String_At(&LCD, 2, 13, holder);
 80022c0:	1d3b      	adds	r3, r7, #4
 80022c2:	220d      	movs	r2, #13
 80022c4:	2102      	movs	r1, #2
 80022c6:	480e      	ldr	r0, [pc, #56]	; (8002300 <updateLCD+0xa0>)
 80022c8:	f7ff fd77 	bl	8001dba <LCD_Print_String_At>

  LCD_Print_String_At(&LCD, 3, 13, "        ");
 80022cc:	4b13      	ldr	r3, [pc, #76]	; (800231c <updateLCD+0xbc>)
 80022ce:	220d      	movs	r2, #13
 80022d0:	2103      	movs	r1, #3
 80022d2:	480b      	ldr	r0, [pc, #44]	; (8002300 <updateLCD+0xa0>)
 80022d4:	f7ff fd71 	bl	8001dba <LCD_Print_String_At>
  sprintf(holder, "%3d revs", (int) menu3_value);
 80022d8:	4b11      	ldr	r3, [pc, #68]	; (8002320 <updateLCD+0xc0>)
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	1d3b      	adds	r3, r7, #4
 80022de:	4911      	ldr	r1, [pc, #68]	; (8002324 <updateLCD+0xc4>)
 80022e0:	4618      	mov	r0, r3
 80022e2:	f003 fac9 	bl	8005878 <siprintf>
  LCD_Print_String_At(&LCD, 3, 13, holder);
 80022e6:	1d3b      	adds	r3, r7, #4
 80022e8:	220d      	movs	r2, #13
 80022ea:	2103      	movs	r1, #3
 80022ec:	4804      	ldr	r0, [pc, #16]	; (8002300 <updateLCD+0xa0>)
 80022ee:	f7ff fd64 	bl	8001dba <LCD_Print_String_At>
}
 80022f2:	bf00      	nop
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	080061f0 	.word	0x080061f0
 8002300:	20000224 	.word	0x20000224
 8002304:	20000290 	.word	0x20000290
 8002308:	080061f8 	.word	0x080061f8
 800230c:	08006200 	.word	0x08006200
 8002310:	20000004 	.word	0x20000004
 8002314:	08006208 	.word	0x08006208
 8002318:	0800620c 	.word	0x0800620c
 800231c:	08006210 	.word	0x08006210
 8002320:	20000008 	.word	0x20000008
 8002324:	0800621c 	.word	0x0800621c

08002328 <updateCursorPosition>:

void updateCursorPosition() {
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  //Clear display's ">" parts
  LCD_Print_String_At(&LCD, 1, 1, " ");
 800232c:	4b22      	ldr	r3, [pc, #136]	; (80023b8 <updateCursorPosition+0x90>)
 800232e:	2201      	movs	r2, #1
 8002330:	2101      	movs	r1, #1
 8002332:	4822      	ldr	r0, [pc, #136]	; (80023bc <updateCursorPosition+0x94>)
 8002334:	f7ff fd41 	bl	8001dba <LCD_Print_String_At>
  LCD_Print_String_At(&LCD, 2, 1, " ");
 8002338:	4b1f      	ldr	r3, [pc, #124]	; (80023b8 <updateCursorPosition+0x90>)
 800233a:	2201      	movs	r2, #1
 800233c:	2102      	movs	r1, #2
 800233e:	481f      	ldr	r0, [pc, #124]	; (80023bc <updateCursorPosition+0x94>)
 8002340:	f7ff fd3b 	bl	8001dba <LCD_Print_String_At>
  LCD_Print_String_At(&LCD, 3, 1, " ");
 8002344:	4b1c      	ldr	r3, [pc, #112]	; (80023b8 <updateCursorPosition+0x90>)
 8002346:	2201      	movs	r2, #1
 8002348:	2103      	movs	r1, #3
 800234a:	481c      	ldr	r0, [pc, #112]	; (80023bc <updateCursorPosition+0x94>)
 800234c:	f7ff fd35 	bl	8001dba <LCD_Print_String_At>
  LCD_Print_String_At(&LCD, 4, 1, " ");
 8002350:	4b19      	ldr	r3, [pc, #100]	; (80023b8 <updateCursorPosition+0x90>)
 8002352:	2201      	movs	r2, #1
 8002354:	2104      	movs	r1, #4
 8002356:	4819      	ldr	r0, [pc, #100]	; (80023bc <updateCursorPosition+0x94>)
 8002358:	f7ff fd2f 	bl	8001dba <LCD_Print_String_At>

  //Place cursor to the new position
  switch (menuCounter) //this checks the value of the counter (0, 1, 2 or 3)
 800235c:	4b18      	ldr	r3, [pc, #96]	; (80023c0 <updateCursorPosition+0x98>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	3b01      	subs	r3, #1
 8002362:	2b03      	cmp	r3, #3
 8002364:	d826      	bhi.n	80023b4 <updateCursorPosition+0x8c>
 8002366:	a201      	add	r2, pc, #4	; (adr r2, 800236c <updateCursorPosition+0x44>)
 8002368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800236c:	0800237d 	.word	0x0800237d
 8002370:	0800238b 	.word	0x0800238b
 8002374:	08002399 	.word	0x08002399
 8002378:	080023a7 	.word	0x080023a7
  {
	case 1:
	  LCD_Print_String_At(&LCD, 1, 1, ">");
 800237c:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <updateCursorPosition+0x9c>)
 800237e:	2201      	movs	r2, #1
 8002380:	2101      	movs	r1, #1
 8002382:	480e      	ldr	r0, [pc, #56]	; (80023bc <updateCursorPosition+0x94>)
 8002384:	f7ff fd19 	bl	8001dba <LCD_Print_String_At>
	  break;
 8002388:	e014      	b.n	80023b4 <updateCursorPosition+0x8c>
	  //-------------------------------
	case 2:
	  LCD_Print_String_At(&LCD, 2, 1, ">");
 800238a:	4b0e      	ldr	r3, [pc, #56]	; (80023c4 <updateCursorPosition+0x9c>)
 800238c:	2201      	movs	r2, #1
 800238e:	2102      	movs	r1, #2
 8002390:	480a      	ldr	r0, [pc, #40]	; (80023bc <updateCursorPosition+0x94>)
 8002392:	f7ff fd12 	bl	8001dba <LCD_Print_String_At>
	  break;
 8002396:	e00d      	b.n	80023b4 <updateCursorPosition+0x8c>
	  //-------------------------------
	case 3:
	  LCD_Print_String_At(&LCD, 3, 1, ">");
 8002398:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <updateCursorPosition+0x9c>)
 800239a:	2201      	movs	r2, #1
 800239c:	2103      	movs	r1, #3
 800239e:	4807      	ldr	r0, [pc, #28]	; (80023bc <updateCursorPosition+0x94>)
 80023a0:	f7ff fd0b 	bl	8001dba <LCD_Print_String_At>
	  break;
 80023a4:	e006      	b.n	80023b4 <updateCursorPosition+0x8c>
	  //-------------------------------
	case 4:
	  LCD_Print_String_At(&LCD, 4, 1, ">");
 80023a6:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <updateCursorPosition+0x9c>)
 80023a8:	2201      	movs	r2, #1
 80023aa:	2104      	movs	r1, #4
 80023ac:	4803      	ldr	r0, [pc, #12]	; (80023bc <updateCursorPosition+0x94>)
 80023ae:	f7ff fd04 	bl	8001dba <LCD_Print_String_At>
	  break;
 80023b2:	bf00      	nop
  }
}
 80023b4:	bf00      	nop
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	08006228 	.word	0x08006228
 80023bc:	20000224 	.word	0x20000224
 80023c0:	2000000e 	.word	0x2000000e
 80023c4:	0800622c 	.word	0x0800622c

080023c8 <updateSelection>:
void updateSelection() {
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  //When a menu is selected ">" becomes "X"

  if (menu1_selected == true) {
 80023cc:	4b14      	ldr	r3, [pc, #80]	; (8002420 <updateSelection+0x58>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d005      	beq.n	80023e0 <updateSelection+0x18>
	LCD_Print_String_At(&LCD, 1, 1, "*");
 80023d4:	4b13      	ldr	r3, [pc, #76]	; (8002424 <updateSelection+0x5c>)
 80023d6:	2201      	movs	r2, #1
 80023d8:	2101      	movs	r1, #1
 80023da:	4813      	ldr	r0, [pc, #76]	; (8002428 <updateSelection+0x60>)
 80023dc:	f7ff fced 	bl	8001dba <LCD_Print_String_At>
  }
  //-------------------
  if (menu2_selected == true) {
 80023e0:	4b12      	ldr	r3, [pc, #72]	; (800242c <updateSelection+0x64>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d005      	beq.n	80023f4 <updateSelection+0x2c>
	LCD_Print_String_At(&LCD, 2, 1, "*");
 80023e8:	4b0e      	ldr	r3, [pc, #56]	; (8002424 <updateSelection+0x5c>)
 80023ea:	2201      	movs	r2, #1
 80023ec:	2102      	movs	r1, #2
 80023ee:	480e      	ldr	r0, [pc, #56]	; (8002428 <updateSelection+0x60>)
 80023f0:	f7ff fce3 	bl	8001dba <LCD_Print_String_At>
  }
  //-------------------
  if (menu3_selected == true) {
 80023f4:	4b0e      	ldr	r3, [pc, #56]	; (8002430 <updateSelection+0x68>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <updateSelection+0x40>
	LCD_Print_String_At(&LCD, 3, 1, "*");
 80023fc:	4b09      	ldr	r3, [pc, #36]	; (8002424 <updateSelection+0x5c>)
 80023fe:	2201      	movs	r2, #1
 8002400:	2103      	movs	r1, #3
 8002402:	4809      	ldr	r0, [pc, #36]	; (8002428 <updateSelection+0x60>)
 8002404:	f7ff fcd9 	bl	8001dba <LCD_Print_String_At>
  }
  //-------------------
  if (menu4_selected == true) {
 8002408:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <updateSelection+0x6c>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <updateSelection+0x54>
	LCD_Print_String_At(&LCD, 4, 1, "*");
 8002410:	4b04      	ldr	r3, [pc, #16]	; (8002424 <updateSelection+0x5c>)
 8002412:	2201      	movs	r2, #1
 8002414:	2104      	movs	r1, #4
 8002416:	4804      	ldr	r0, [pc, #16]	; (8002428 <updateSelection+0x60>)
 8002418:	f7ff fccf 	bl	8001dba <LCD_Print_String_At>
  }
}
 800241c:	bf00      	nop
 800241e:	bd80      	pop	{r7, pc}
 8002420:	20000296 	.word	0x20000296
 8002424:	08006230 	.word	0x08006230
 8002428:	20000224 	.word	0x20000224
 800242c:	20000297 	.word	0x20000297
 8002430:	20000298 	.word	0x20000298
 8002434:	20000299 	.word	0x20000299

08002438 <printDefaultLCD>:

void printDefaultLCD() {
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
   |Direction: CW       |
   |Set count: xxxx     |
   |Count:    0 revs    |
   ----------------------
   **************************/
  LCD_Print_String_At(&LCD, 1, 1, "Speed: ");
 800243e:	4b41      	ldr	r3, [pc, #260]	; (8002544 <printDefaultLCD+0x10c>)
 8002440:	2201      	movs	r2, #1
 8002442:	2101      	movs	r1, #1
 8002444:	4840      	ldr	r0, [pc, #256]	; (8002548 <printDefaultLCD+0x110>)
 8002446:	f7ff fcb8 	bl	8001dba <LCD_Print_String_At>
  //----------------------
  LCD_Print_String_At(&LCD, 2, 1, "Direction: ");
 800244a:	4b40      	ldr	r3, [pc, #256]	; (800254c <printDefaultLCD+0x114>)
 800244c:	2201      	movs	r2, #1
 800244e:	2102      	movs	r1, #2
 8002450:	483d      	ldr	r0, [pc, #244]	; (8002548 <printDefaultLCD+0x110>)
 8002452:	f7ff fcb2 	bl	8001dba <LCD_Print_String_At>
  LCD_Print_String_At(&LCD, 3, 1, "Set count: ");
 8002456:	4b3e      	ldr	r3, [pc, #248]	; (8002550 <printDefaultLCD+0x118>)
 8002458:	2201      	movs	r2, #1
 800245a:	2103      	movs	r1, #3
 800245c:	483a      	ldr	r0, [pc, #232]	; (8002548 <printDefaultLCD+0x110>)
 800245e:	f7ff fcac 	bl	8001dba <LCD_Print_String_At>
  LCD_Print_String_At(&LCD, 4, 1, "Count: ");
 8002462:	4b3c      	ldr	r3, [pc, #240]	; (8002554 <printDefaultLCD+0x11c>)
 8002464:	2201      	movs	r2, #1
 8002466:	2104      	movs	r1, #4
 8002468:	4837      	ldr	r0, [pc, #220]	; (8002548 <printDefaultLCD+0x110>)
 800246a:	f7ff fca6 	bl	8001dba <LCD_Print_String_At>

  //Update value
  LCD_Print_String_At(&LCD, 1, 8, "      ");
 800246e:	4b3a      	ldr	r3, [pc, #232]	; (8002558 <printDefaultLCD+0x120>)
 8002470:	2208      	movs	r2, #8
 8002472:	2101      	movs	r1, #1
 8002474:	4834      	ldr	r0, [pc, #208]	; (8002548 <printDefaultLCD+0x110>)
 8002476:	f7ff fca0 	bl	8001dba <LCD_Print_String_At>
  char holder[10];
  sprintf(holder, "%2d rpm", (int) menu1_value);
 800247a:	4b38      	ldr	r3, [pc, #224]	; (800255c <printDefaultLCD+0x124>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe fd80 	bl	8000f84 <__aeabi_f2iz>
 8002484:	4602      	mov	r2, r0
 8002486:	1d3b      	adds	r3, r7, #4
 8002488:	4935      	ldr	r1, [pc, #212]	; (8002560 <printDefaultLCD+0x128>)
 800248a:	4618      	mov	r0, r3
 800248c:	f003 f9f4 	bl	8005878 <siprintf>
  LCD_Print_String_At(&LCD, 1, 8, holder);
 8002490:	1d3b      	adds	r3, r7, #4
 8002492:	2208      	movs	r2, #8
 8002494:	2101      	movs	r1, #1
 8002496:	482c      	ldr	r0, [pc, #176]	; (8002548 <printDefaultLCD+0x110>)
 8002498:	f7ff fc8f 	bl	8001dba <LCD_Print_String_At>

  LCD_Print_String_At(&LCD, 2, 12, "    ");
 800249c:	4b31      	ldr	r3, [pc, #196]	; (8002564 <printDefaultLCD+0x12c>)
 800249e:	220c      	movs	r2, #12
 80024a0:	2102      	movs	r1, #2
 80024a2:	4829      	ldr	r0, [pc, #164]	; (8002548 <printDefaultLCD+0x110>)
 80024a4:	f7ff fc89 	bl	8001dba <LCD_Print_String_At>
  if (menu2_value == 1) {
 80024a8:	4b2f      	ldr	r3, [pc, #188]	; (8002568 <printDefaultLCD+0x130>)
 80024aa:	f993 3000 	ldrsb.w	r3, [r3]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d105      	bne.n	80024be <printDefaultLCD+0x86>
	sprintf(holder, " CW");
 80024b2:	1d3b      	adds	r3, r7, #4
 80024b4:	492d      	ldr	r1, [pc, #180]	; (800256c <printDefaultLCD+0x134>)
 80024b6:	4618      	mov	r0, r3
 80024b8:	f003 f9de 	bl	8005878 <siprintf>
 80024bc:	e004      	b.n	80024c8 <printDefaultLCD+0x90>
  } else {
	sprintf(holder, "CCW");
 80024be:	1d3b      	adds	r3, r7, #4
 80024c0:	492b      	ldr	r1, [pc, #172]	; (8002570 <printDefaultLCD+0x138>)
 80024c2:	4618      	mov	r0, r3
 80024c4:	f003 f9d8 	bl	8005878 <siprintf>
  }
  LCD_Print_String_At(&LCD, 2, 12, holder);
 80024c8:	1d3b      	adds	r3, r7, #4
 80024ca:	220c      	movs	r2, #12
 80024cc:	2102      	movs	r1, #2
 80024ce:	481e      	ldr	r0, [pc, #120]	; (8002548 <printDefaultLCD+0x110>)
 80024d0:	f7ff fc73 	bl	8001dba <LCD_Print_String_At>

  LCD_Print_String_At(&LCD, 3, 12, "        ");
 80024d4:	4b27      	ldr	r3, [pc, #156]	; (8002574 <printDefaultLCD+0x13c>)
 80024d6:	220c      	movs	r2, #12
 80024d8:	2103      	movs	r1, #3
 80024da:	481b      	ldr	r0, [pc, #108]	; (8002548 <printDefaultLCD+0x110>)
 80024dc:	f7ff fc6d 	bl	8001dba <LCD_Print_String_At>

  sprintf(holder, "%3d revs", (int) menu3_value);
 80024e0:	4b25      	ldr	r3, [pc, #148]	; (8002578 <printDefaultLCD+0x140>)
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	1d3b      	adds	r3, r7, #4
 80024e6:	4925      	ldr	r1, [pc, #148]	; (800257c <printDefaultLCD+0x144>)
 80024e8:	4618      	mov	r0, r3
 80024ea:	f003 f9c5 	bl	8005878 <siprintf>
  LCD_Print_String_At(&LCD, 3, 12, holder);
 80024ee:	1d3b      	adds	r3, r7, #4
 80024f0:	220c      	movs	r2, #12
 80024f2:	2103      	movs	r1, #3
 80024f4:	4814      	ldr	r0, [pc, #80]	; (8002548 <printDefaultLCD+0x110>)
 80024f6:	f7ff fc60 	bl	8001dba <LCD_Print_String_At>

  LCD_Print_String_At(&LCD, 4, 8, "         ");
 80024fa:	4b21      	ldr	r3, [pc, #132]	; (8002580 <printDefaultLCD+0x148>)
 80024fc:	2208      	movs	r2, #8
 80024fe:	2104      	movs	r1, #4
 8002500:	4811      	ldr	r0, [pc, #68]	; (8002548 <printDefaultLCD+0x110>)
 8002502:	f7ff fc5a 	bl	8001dba <LCD_Print_String_At>
  if (n_loop < 2) {
 8002506:	4b1f      	ldr	r3, [pc, #124]	; (8002584 <printDefaultLCD+0x14c>)
 8002508:	881b      	ldrh	r3, [r3, #0]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d808      	bhi.n	8002520 <printDefaultLCD+0xe8>
	sprintf(holder, "%4d rev", n_loop);
 800250e:	4b1d      	ldr	r3, [pc, #116]	; (8002584 <printDefaultLCD+0x14c>)
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	1d3b      	adds	r3, r7, #4
 8002516:	491c      	ldr	r1, [pc, #112]	; (8002588 <printDefaultLCD+0x150>)
 8002518:	4618      	mov	r0, r3
 800251a:	f003 f9ad 	bl	8005878 <siprintf>
 800251e:	e007      	b.n	8002530 <printDefaultLCD+0xf8>
  } else {
	sprintf(holder, "%4d revs", n_loop);
 8002520:	4b18      	ldr	r3, [pc, #96]	; (8002584 <printDefaultLCD+0x14c>)
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	461a      	mov	r2, r3
 8002526:	1d3b      	adds	r3, r7, #4
 8002528:	4918      	ldr	r1, [pc, #96]	; (800258c <printDefaultLCD+0x154>)
 800252a:	4618      	mov	r0, r3
 800252c:	f003 f9a4 	bl	8005878 <siprintf>
  }
  LCD_Print_String_At(&LCD, 4, 8, holder);
 8002530:	1d3b      	adds	r3, r7, #4
 8002532:	2208      	movs	r2, #8
 8002534:	2104      	movs	r1, #4
 8002536:	4804      	ldr	r0, [pc, #16]	; (8002548 <printDefaultLCD+0x110>)
 8002538:	f7ff fc3f 	bl	8001dba <LCD_Print_String_At>
}
 800253c:	bf00      	nop
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	080061d0 	.word	0x080061d0
 8002548:	20000224 	.word	0x20000224
 800254c:	080061d8 	.word	0x080061d8
 8002550:	080061e4 	.word	0x080061e4
 8002554:	08006234 	.word	0x08006234
 8002558:	080061f0 	.word	0x080061f0
 800255c:	20000290 	.word	0x20000290
 8002560:	0800623c 	.word	0x0800623c
 8002564:	08006200 	.word	0x08006200
 8002568:	20000004 	.word	0x20000004
 800256c:	08006208 	.word	0x08006208
 8002570:	0800620c 	.word	0x0800620c
 8002574:	08006210 	.word	0x08006210
 8002578:	20000008 	.word	0x20000008
 800257c:	0800621c 	.word	0x0800621c
 8002580:	080061b0 	.word	0x080061b0
 8002584:	20000294 	.word	0x20000294
 8002588:	080061bc 	.word	0x080061bc
 800258c:	080061c4 	.word	0x080061c4

08002590 <set_motor>:

void set_motor(u8 id, s8 dir, u16 val) {
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af02      	add	r7, sp, #8
 8002596:	4603      	mov	r3, r0
 8002598:	71fb      	strb	r3, [r7, #7]
 800259a:	460b      	mov	r3, r1
 800259c:	71bb      	strb	r3, [r7, #6]
 800259e:	4613      	mov	r3, r2
 80025a0:	80bb      	strh	r3, [r7, #4]
  u16 pwm;
  switch (id) {
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d05d      	beq.n	8002664 <set_motor+0xd4>
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d000      	beq.n	80025ae <set_motor+0x1e>
		HAL_GPIO_WritePin(M2B_R_GPIO_Port, M2B_R_Pin, GPIO_PIN_RESET);
		M2B_Channel = 999;
	  }
	  break;
	default:
	  return;
 80025ac:	e05b      	b.n	8002666 <set_motor+0xd6>
	  pwm = map(val, 0, 1000, 0, 999);
 80025ae:	88b8      	ldrh	r0, [r7, #4]
 80025b0:	f240 33e7 	movw	r3, #999	; 0x3e7
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	2300      	movs	r3, #0
 80025b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025bc:	2100      	movs	r1, #0
 80025be:	f000 f859 	bl	8002674 <map>
 80025c2:	4603      	mov	r3, r0
 80025c4:	81fb      	strh	r3, [r7, #14]
	  if (dir == -1) {
 80025c6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80025ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ce:	d10f      	bne.n	80025f0 <set_motor+0x60>
		HAL_GPIO_WritePin(M2B_L_GPIO_Port, M2B_L_Pin, GPIO_PIN_SET);
 80025d0:	2201      	movs	r2, #1
 80025d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025d6:	4825      	ldr	r0, [pc, #148]	; (800266c <set_motor+0xdc>)
 80025d8:	f001 f9a7 	bl	800392a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2B_R_GPIO_Port, M2B_R_Pin, GPIO_PIN_RESET);
 80025dc:	2200      	movs	r2, #0
 80025de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025e2:	4822      	ldr	r0, [pc, #136]	; (800266c <set_motor+0xdc>)
 80025e4:	f001 f9a1 	bl	800392a <HAL_GPIO_WritePin>
		M2B_Channel = pwm;
 80025e8:	4a21      	ldr	r2, [pc, #132]	; (8002670 <set_motor+0xe0>)
 80025ea:	89fb      	ldrh	r3, [r7, #14]
 80025ec:	63d3      	str	r3, [r2, #60]	; 0x3c
	  break;
 80025ee:	e03a      	b.n	8002666 <set_motor+0xd6>
	  } else if (dir == 1) {
 80025f0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d10f      	bne.n	8002618 <set_motor+0x88>
		HAL_GPIO_WritePin(M2B_L_GPIO_Port, M2B_L_Pin, GPIO_PIN_RESET);
 80025f8:	2200      	movs	r2, #0
 80025fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025fe:	481b      	ldr	r0, [pc, #108]	; (800266c <set_motor+0xdc>)
 8002600:	f001 f993 	bl	800392a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2B_R_GPIO_Port, M2B_R_Pin, GPIO_PIN_SET);
 8002604:	2201      	movs	r2, #1
 8002606:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800260a:	4818      	ldr	r0, [pc, #96]	; (800266c <set_motor+0xdc>)
 800260c:	f001 f98d 	bl	800392a <HAL_GPIO_WritePin>
		M2B_Channel = pwm;
 8002610:	4a17      	ldr	r2, [pc, #92]	; (8002670 <set_motor+0xe0>)
 8002612:	89fb      	ldrh	r3, [r7, #14]
 8002614:	63d3      	str	r3, [r2, #60]	; 0x3c
	  break;
 8002616:	e026      	b.n	8002666 <set_motor+0xd6>
	  } else if (dir == -2) //Freely run
 8002618:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800261c:	f113 0f02 	cmn.w	r3, #2
 8002620:	d10f      	bne.n	8002642 <set_motor+0xb2>
		M2B_Channel = 0;
 8002622:	4b13      	ldr	r3, [pc, #76]	; (8002670 <set_motor+0xe0>)
 8002624:	2200      	movs	r2, #0
 8002626:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(M2B_L_GPIO_Port, M2B_L_Pin, GPIO_PIN_RESET);
 8002628:	2200      	movs	r2, #0
 800262a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800262e:	480f      	ldr	r0, [pc, #60]	; (800266c <set_motor+0xdc>)
 8002630:	f001 f97b 	bl	800392a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2B_R_GPIO_Port, M2B_R_Pin, GPIO_PIN_RESET);
 8002634:	2200      	movs	r2, #0
 8002636:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800263a:	480c      	ldr	r0, [pc, #48]	; (800266c <set_motor+0xdc>)
 800263c:	f001 f975 	bl	800392a <HAL_GPIO_WritePin>
	  break;
 8002640:	e011      	b.n	8002666 <set_motor+0xd6>
		HAL_GPIO_WritePin(M2B_L_GPIO_Port, M2B_L_Pin, GPIO_PIN_RESET);
 8002642:	2200      	movs	r2, #0
 8002644:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002648:	4808      	ldr	r0, [pc, #32]	; (800266c <set_motor+0xdc>)
 800264a:	f001 f96e 	bl	800392a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2B_R_GPIO_Port, M2B_R_Pin, GPIO_PIN_RESET);
 800264e:	2200      	movs	r2, #0
 8002650:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002654:	4805      	ldr	r0, [pc, #20]	; (800266c <set_motor+0xdc>)
 8002656:	f001 f968 	bl	800392a <HAL_GPIO_WritePin>
		M2B_Channel = 999;
 800265a:	4b05      	ldr	r3, [pc, #20]	; (8002670 <set_motor+0xe0>)
 800265c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002660:	63da      	str	r2, [r3, #60]	; 0x3c
	  break;
 8002662:	e000      	b.n	8002666 <set_motor+0xd6>
	  break;
 8002664:	bf00      	nop
  }
}
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40010c00 	.word	0x40010c00
 8002670:	40000800 	.word	0x40000800

08002674 <map>:

s32 map(s32 x, s32 in_min, s32 in_max, s32 out_min, s32 out_max) {
 8002674:	b5b0      	push	{r4, r5, r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
 8002680:	603b      	str	r3, [r7, #0]
  return (s32) ((x - in_min) * (out_max - out_min) * 1.0 / (in_max - in_min)
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	6a39      	ldr	r1, [r7, #32]
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	1a8a      	subs	r2, r1, r2
 800268e:	fb02 f303 	mul.w	r3, r2, r3
 8002692:	4618      	mov	r0, r3
 8002694:	f7fd feae 	bl	80003f4 <__aeabi_i2d>
 8002698:	4604      	mov	r4, r0
 800269a:	460d      	mov	r5, r1
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fd fea6 	bl	80003f4 <__aeabi_i2d>
 80026a8:	4602      	mov	r2, r0
 80026aa:	460b      	mov	r3, r1
 80026ac:	4620      	mov	r0, r4
 80026ae:	4629      	mov	r1, r5
 80026b0:	f7fe f834 	bl	800071c <__aeabi_ddiv>
 80026b4:	4602      	mov	r2, r0
 80026b6:	460b      	mov	r3, r1
 80026b8:	4614      	mov	r4, r2
 80026ba:	461d      	mov	r5, r3
	  + out_min);
 80026bc:	6838      	ldr	r0, [r7, #0]
 80026be:	f7fd fe99 	bl	80003f4 <__aeabi_i2d>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	4620      	mov	r0, r4
 80026c8:	4629      	mov	r1, r5
 80026ca:	f7fd fd47 	bl	800015c <__adddf3>
 80026ce:	4602      	mov	r2, r0
 80026d0:	460b      	mov	r3, r1
  return (s32) ((x - in_min) * (out_max - out_min) * 1.0 / (in_max - in_min)
 80026d2:	4610      	mov	r0, r2
 80026d4:	4619      	mov	r1, r3
 80026d6:	f7fe f909 	bl	80008ec <__aeabi_d2iz>
 80026da:	4603      	mov	r3, r0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bdb0      	pop	{r4, r5, r7, pc}

080026e4 <reset_state>:

void reset_state() {
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  eint = 0;
 80026e8:	4b03      	ldr	r3, [pc, #12]	; (80026f8 <reset_state+0x14>)
 80026ea:	f04f 0200 	mov.w	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
}
 80026f0:	bf00      	nop
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr
 80026f8:	200002b8 	.word	0x200002b8

080026fc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80026fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002700:	b08e      	sub	sp, #56	; 0x38
 8002702:	af00      	add	r7, sp, #0
 8002704:	4603      	mov	r3, r0
 8002706:	81fb      	strh	r3, [r7, #14]
  if (GPIO_Pin == BTN_Mode_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
 8002708:	89fb      	ldrh	r3, [r7, #14]
 800270a:	2b20      	cmp	r3, #32
 800270c:	f040 80cf 	bne.w	80028ae <HAL_GPIO_EXTI_Callback+0x1b2>
  {
	if (HAL_GPIO_ReadPin(BTN_Mode_GPIO_Port, BTN_Mode_Pin) == GPIO_PIN_RESET) {
 8002710:	2120      	movs	r1, #32
 8002712:	48a9      	ldr	r0, [pc, #676]	; (80029b8 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8002714:	f001 f8f2 	bl	80038fc <HAL_GPIO_ReadPin>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d105      	bne.n	800272a <HAL_GPIO_EXTI_Callback+0x2e>
	  BTN_Mode.StartPress = HAL_GetTick(); //ms
 800271e:	f000 fc2d 	bl	8002f7c <HAL_GetTick>
 8002722:	4603      	mov	r3, r0
 8002724:	4aa5      	ldr	r2, [pc, #660]	; (80029bc <HAL_GPIO_EXTI_Callback+0x2c0>)
 8002726:	6193      	str	r3, [r2, #24]
//	if (HAL_GPIO_ReadPin(ECD_2B_GPIO_Port, ECD_2B_Pin) == GPIO_PIN_SET) {
//	  TIM2_count++;
//	} else
//	  TIM2_count--;
//  }
}
 8002728:	e176      	b.n	8002a18 <HAL_GPIO_EXTI_Callback+0x31c>
	  BTN_Mode.StopPress = HAL_GetTick();
 800272a:	f000 fc27 	bl	8002f7c <HAL_GetTick>
 800272e:	4603      	mov	r3, r0
 8002730:	4aa2      	ldr	r2, [pc, #648]	; (80029bc <HAL_GPIO_EXTI_Callback+0x2c0>)
 8002732:	61d3      	str	r3, [r2, #28]
	  BTN_Mode.timePress = BTN_Mode.StopPress - BTN_Mode.StartPress;
 8002734:	4ba1      	ldr	r3, [pc, #644]	; (80029bc <HAL_GPIO_EXTI_Callback+0x2c0>)
 8002736:	69da      	ldr	r2, [r3, #28]
 8002738:	4ba0      	ldr	r3, [pc, #640]	; (80029bc <HAL_GPIO_EXTI_Callback+0x2c0>)
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	4a9f      	ldr	r2, [pc, #636]	; (80029bc <HAL_GPIO_EXTI_Callback+0x2c0>)
 8002740:	6153      	str	r3, [r2, #20]
	  if (BTN_Mode.timePress > DEBOUND_TIME
 8002742:	4b9e      	ldr	r3, [pc, #632]	; (80029bc <HAL_GPIO_EXTI_Callback+0x2c0>)
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	2b32      	cmp	r3, #50	; 0x32
 8002748:	d95e      	bls.n	8002808 <HAL_GPIO_EXTI_Callback+0x10c>
		  && BTN_Mode.timePress <= SINGLE_CLICK_TIME) {
 800274a:	4b9c      	ldr	r3, [pc, #624]	; (80029bc <HAL_GPIO_EXTI_Callback+0x2c0>)
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002752:	d859      	bhi.n	8002808 <HAL_GPIO_EXTI_Callback+0x10c>
		if (state == 1 || state == 2) {
 8002754:	4b9a      	ldr	r3, [pc, #616]	; (80029c0 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d004      	beq.n	8002766 <HAL_GPIO_EXTI_Callback+0x6a>
 800275c:	4b98      	ldr	r3, [pc, #608]	; (80029c0 <HAL_GPIO_EXTI_Callback+0x2c4>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b02      	cmp	r3, #2
 8002762:	f040 8158 	bne.w	8002a16 <HAL_GPIO_EXTI_Callback+0x31a>
		  state = state + 1;
 8002766:	4b96      	ldr	r3, [pc, #600]	; (80029c0 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	3301      	adds	r3, #1
 800276c:	b2da      	uxtb	r2, r3
 800276e:	4b94      	ldr	r3, [pc, #592]	; (80029c0 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8002770:	701a      	strb	r2, [r3, #0]
		  if (state > 2) {
 8002772:	4b93      	ldr	r3, [pc, #588]	; (80029c0 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b02      	cmp	r3, #2
 8002778:	f240 814d 	bls.w	8002a16 <HAL_GPIO_EXTI_Callback+0x31a>
			switch (menuCounter) {
 800277c:	4b91      	ldr	r3, [pc, #580]	; (80029c4 <HAL_GPIO_EXTI_Callback+0x2c8>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b03      	cmp	r3, #3
 8002782:	d026      	beq.n	80027d2 <HAL_GPIO_EXTI_Callback+0xd6>
 8002784:	2b03      	cmp	r3, #3
 8002786:	dc34      	bgt.n	80027f2 <HAL_GPIO_EXTI_Callback+0xf6>
 8002788:	2b01      	cmp	r3, #1
 800278a:	d002      	beq.n	8002792 <HAL_GPIO_EXTI_Callback+0x96>
 800278c:	2b02      	cmp	r3, #2
 800278e:	d010      	beq.n	80027b2 <HAL_GPIO_EXTI_Callback+0xb6>
				break;
 8002790:	e02f      	b.n	80027f2 <HAL_GPIO_EXTI_Callback+0xf6>
				menu1_selected = !menu1_selected; //we change the status of the variable to the opposite
 8002792:	4b8d      	ldr	r3, [pc, #564]	; (80029c8 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	2b00      	cmp	r3, #0
 8002798:	bf14      	ite	ne
 800279a:	2301      	movne	r3, #1
 800279c:	2300      	moveq	r3, #0
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	f083 0301 	eor.w	r3, r3, #1
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	4b86      	ldr	r3, [pc, #536]	; (80029c8 <HAL_GPIO_EXTI_Callback+0x2cc>)
 80027ae:	701a      	strb	r2, [r3, #0]
				break;
 80027b0:	e020      	b.n	80027f4 <HAL_GPIO_EXTI_Callback+0xf8>
				menu2_selected = !menu2_selected;
 80027b2:	4b86      	ldr	r3, [pc, #536]	; (80029cc <HAL_GPIO_EXTI_Callback+0x2d0>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	bf14      	ite	ne
 80027ba:	2301      	movne	r3, #1
 80027bc:	2300      	moveq	r3, #0
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	f083 0301 	eor.w	r3, r3, #1
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	4b7f      	ldr	r3, [pc, #508]	; (80029cc <HAL_GPIO_EXTI_Callback+0x2d0>)
 80027ce:	701a      	strb	r2, [r3, #0]
				break;
 80027d0:	e010      	b.n	80027f4 <HAL_GPIO_EXTI_Callback+0xf8>
				menu3_selected = !menu3_selected;
 80027d2:	4b7f      	ldr	r3, [pc, #508]	; (80029d0 <HAL_GPIO_EXTI_Callback+0x2d4>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	bf14      	ite	ne
 80027da:	2301      	movne	r3, #1
 80027dc:	2300      	moveq	r3, #0
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	f083 0301 	eor.w	r3, r3, #1
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	4b78      	ldr	r3, [pc, #480]	; (80029d0 <HAL_GPIO_EXTI_Callback+0x2d4>)
 80027ee:	701a      	strb	r2, [r3, #0]
				break;
 80027f0:	e000      	b.n	80027f4 <HAL_GPIO_EXTI_Callback+0xf8>
				break;
 80027f2:	bf00      	nop
			refreshSelection = true;
 80027f4:	4b77      	ldr	r3, [pc, #476]	; (80029d4 <HAL_GPIO_EXTI_Callback+0x2d8>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	701a      	strb	r2, [r3, #0]
			refreshLCD = true;
 80027fa:	4b77      	ldr	r3, [pc, #476]	; (80029d8 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80027fc:	2201      	movs	r2, #1
 80027fe:	701a      	strb	r2, [r3, #0]
			state = 2;
 8002800:	4b6f      	ldr	r3, [pc, #444]	; (80029c0 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8002802:	2202      	movs	r2, #2
 8002804:	701a      	strb	r2, [r3, #0]
		if (state == 1 || state == 2) {
 8002806:	e106      	b.n	8002a16 <HAL_GPIO_EXTI_Callback+0x31a>
	  } else if (BTN_Mode.timePress > SINGLE_CLICK_TIME) {
 8002808:	4b6c      	ldr	r3, [pc, #432]	; (80029bc <HAL_GPIO_EXTI_Callback+0x2c0>)
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002810:	f240 8102 	bls.w	8002a18 <HAL_GPIO_EXTI_Callback+0x31c>
		if (state == 2) {
 8002814:	4b6a      	ldr	r3, [pc, #424]	; (80029c0 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b02      	cmp	r3, #2
 800281a:	d13a      	bne.n	8002892 <HAL_GPIO_EXTI_Callback+0x196>
		  state = 1;
 800281c:	4b68      	ldr	r3, [pc, #416]	; (80029c0 <HAL_GPIO_EXTI_Callback+0x2c4>)
 800281e:	2201      	movs	r2, #1
 8002820:	701a      	strb	r2, [r3, #0]
		  HAL_FLASH_Unlock();
 8002822:	f000 fd57 	bl	80032d4 <HAL_FLASH_Unlock>
		  EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8002826:	2300      	movs	r3, #0
 8002828:	62bb      	str	r3, [r7, #40]	; 0x28
		  EraseInit.PageAddress = FLASH_USER_START_ADDR;
 800282a:	4b6c      	ldr	r3, [pc, #432]	; (80029dc <HAL_GPIO_EXTI_Callback+0x2e0>)
 800282c:	633b      	str	r3, [r7, #48]	; 0x30
		  EraseInit.NbPages = (FLASH_USER_END_ADDR - FLASH_USER_START_ADDR )
 800282e:	2301      	movs	r3, #1
 8002830:	637b      	str	r3, [r7, #52]	; 0x34
		  uint32_t PageError = 0;
 8002832:	2300      	movs	r3, #0
 8002834:	627b      	str	r3, [r7, #36]	; 0x24
		  HAL_FLASHEx_Erase(&EraseInit, &PageError);
 8002836:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800283a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800283e:	4611      	mov	r1, r2
 8002840:	4618      	mov	r0, r3
 8002842:	f000 fe2f 	bl	80034a4 <HAL_FLASHEx_Erase>
		  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_USER_START_ADDR,
 8002846:	4b66      	ldr	r3, [pc, #408]	; (80029e0 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f7fe fbc0 	bl	8000fd0 <__aeabi_f2ulz>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	4961      	ldr	r1, [pc, #388]	; (80029dc <HAL_GPIO_EXTI_Callback+0x2e0>)
 8002856:	2002      	movs	r0, #2
 8002858:	f000 fccc 	bl	80031f4 <HAL_FLASH_Program>
		  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_USER_START_ADDR + 4,
 800285c:	4b61      	ldr	r3, [pc, #388]	; (80029e4 <HAL_GPIO_EXTI_Callback+0x2e8>)
 800285e:	f993 3000 	ldrsb.w	r3, [r3]
 8002862:	b25b      	sxtb	r3, r3
 8002864:	17da      	asrs	r2, r3, #31
 8002866:	603b      	str	r3, [r7, #0]
 8002868:	607a      	str	r2, [r7, #4]
 800286a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800286e:	495e      	ldr	r1, [pc, #376]	; (80029e8 <HAL_GPIO_EXTI_Callback+0x2ec>)
 8002870:	2002      	movs	r0, #2
 8002872:	f000 fcbf 	bl	80031f4 <HAL_FLASH_Program>
		  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_USER_START_ADDR + 8,
 8002876:	4b5d      	ldr	r3, [pc, #372]	; (80029ec <HAL_GPIO_EXTI_Callback+0x2f0>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	17da      	asrs	r2, r3, #31
 800287c:	469a      	mov	sl, r3
 800287e:	4693      	mov	fp, r2
 8002880:	4652      	mov	r2, sl
 8002882:	465b      	mov	r3, fp
 8002884:	495a      	ldr	r1, [pc, #360]	; (80029f0 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8002886:	2002      	movs	r0, #2
 8002888:	f000 fcb4 	bl	80031f4 <HAL_FLASH_Program>
		  HAL_FLASH_Lock();
 800288c:	f000 fd48 	bl	8003320 <HAL_FLASH_Lock>
}
 8002890:	e0c2      	b.n	8002a18 <HAL_GPIO_EXTI_Callback+0x31c>
		} else if (state >= 4) {
 8002892:	4b4b      	ldr	r3, [pc, #300]	; (80029c0 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b03      	cmp	r3, #3
 8002898:	f240 80be 	bls.w	8002a18 <HAL_GPIO_EXTI_Callback+0x31c>
		  STOP_cmd = true;
 800289c:	4b55      	ldr	r3, [pc, #340]	; (80029f4 <HAL_GPIO_EXTI_Callback+0x2f8>)
 800289e:	2201      	movs	r2, #1
 80028a0:	701a      	strb	r2, [r3, #0]
		  STOP_from = HAL_GetTick();
 80028a2:	f000 fb6b 	bl	8002f7c <HAL_GetTick>
 80028a6:	4603      	mov	r3, r0
 80028a8:	4a53      	ldr	r2, [pc, #332]	; (80029f8 <HAL_GPIO_EXTI_Callback+0x2fc>)
 80028aa:	6013      	str	r3, [r2, #0]
}
 80028ac:	e0b4      	b.n	8002a18 <HAL_GPIO_EXTI_Callback+0x31c>
  else if (GPIO_Pin == BTN_Start_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
 80028ae:	89fb      	ldrh	r3, [r7, #14]
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d168      	bne.n	8002986 <HAL_GPIO_EXTI_Callback+0x28a>
	if (HAL_GPIO_ReadPin(BTN_Mode_GPIO_Port, BTN_Start_Pin) == GPIO_PIN_RESET) {
 80028b4:	2108      	movs	r1, #8
 80028b6:	4840      	ldr	r0, [pc, #256]	; (80029b8 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80028b8:	f001 f820 	bl	80038fc <HAL_GPIO_ReadPin>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f040 80aa 	bne.w	8002a18 <HAL_GPIO_EXTI_Callback+0x31c>
	  if (state == 1) {
 80028c4:	4b3e      	ldr	r3, [pc, #248]	; (80029c0 <HAL_GPIO_EXTI_Callback+0x2c4>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d11c      	bne.n	8002906 <HAL_GPIO_EXTI_Callback+0x20a>
		state = 3;
 80028cc:	4b3c      	ldr	r3, [pc, #240]	; (80029c0 <HAL_GPIO_EXTI_Callback+0x2c4>)
 80028ce:	2203      	movs	r2, #3
 80028d0:	701a      	strb	r2, [r3, #0]
		reset_state();
 80028d2:	f7ff ff07 	bl	80026e4 <reset_state>
		if (mDir == 1)
 80028d6:	4b43      	ldr	r3, [pc, #268]	; (80029e4 <HAL_GPIO_EXTI_Callback+0x2e8>)
 80028d8:	f993 3000 	ldrsb.w	r3, [r3]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d108      	bne.n	80028f2 <HAL_GPIO_EXTI_Callback+0x1f6>
		  set_motor(1, 1, pwm);
 80028e0:	4b46      	ldr	r3, [pc, #280]	; (80029fc <HAL_GPIO_EXTI_Callback+0x300>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	461a      	mov	r2, r3
 80028e8:	2101      	movs	r1, #1
 80028ea:	2001      	movs	r0, #1
 80028ec:	f7ff fe50 	bl	8002590 <set_motor>
}
 80028f0:	e092      	b.n	8002a18 <HAL_GPIO_EXTI_Callback+0x31c>
		  set_motor(1, -1, pwm);
 80028f2:	4b42      	ldr	r3, [pc, #264]	; (80029fc <HAL_GPIO_EXTI_Callback+0x300>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	461a      	mov	r2, r3
 80028fa:	f04f 31ff 	mov.w	r1, #4294967295
 80028fe:	2001      	movs	r0, #1
 8002900:	f7ff fe46 	bl	8002590 <set_motor>
}
 8002904:	e088      	b.n	8002a18 <HAL_GPIO_EXTI_Callback+0x31c>
	  } else if (state == 2) {
 8002906:	4b2e      	ldr	r3, [pc, #184]	; (80029c0 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	2b02      	cmp	r3, #2
 800290c:	f040 8084 	bne.w	8002a18 <HAL_GPIO_EXTI_Callback+0x31c>
		state = 1;
 8002910:	4b2b      	ldr	r3, [pc, #172]	; (80029c0 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8002912:	2201      	movs	r2, #1
 8002914:	701a      	strb	r2, [r3, #0]
		HAL_FLASH_Unlock();
 8002916:	f000 fcdd 	bl	80032d4 <HAL_FLASH_Unlock>
		EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 800291a:	2300      	movs	r3, #0
 800291c:	617b      	str	r3, [r7, #20]
		EraseInit.PageAddress = FLASH_USER_START_ADDR;
 800291e:	4b2f      	ldr	r3, [pc, #188]	; (80029dc <HAL_GPIO_EXTI_Callback+0x2e0>)
 8002920:	61fb      	str	r3, [r7, #28]
		EraseInit.NbPages = (FLASH_USER_END_ADDR - FLASH_USER_START_ADDR )
 8002922:	2301      	movs	r3, #1
 8002924:	623b      	str	r3, [r7, #32]
		uint32_t PageError = 0;
 8002926:	2300      	movs	r3, #0
 8002928:	613b      	str	r3, [r7, #16]
		HAL_FLASHEx_Erase(&EraseInit, &PageError);
 800292a:	f107 0210 	add.w	r2, r7, #16
 800292e:	f107 0314 	add.w	r3, r7, #20
 8002932:	4611      	mov	r1, r2
 8002934:	4618      	mov	r0, r3
 8002936:	f000 fdb5 	bl	80034a4 <HAL_FLASHEx_Erase>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_USER_START_ADDR,
 800293a:	4b29      	ldr	r3, [pc, #164]	; (80029e0 <HAL_GPIO_EXTI_Callback+0x2e4>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f7fe fb46 	bl	8000fd0 <__aeabi_f2ulz>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	4924      	ldr	r1, [pc, #144]	; (80029dc <HAL_GPIO_EXTI_Callback+0x2e0>)
 800294a:	2002      	movs	r0, #2
 800294c:	f000 fc52 	bl	80031f4 <HAL_FLASH_Program>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_USER_START_ADDR + 4,
 8002950:	4b24      	ldr	r3, [pc, #144]	; (80029e4 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8002952:	f993 3000 	ldrsb.w	r3, [r3]
 8002956:	b25b      	sxtb	r3, r3
 8002958:	17da      	asrs	r2, r3, #31
 800295a:	4698      	mov	r8, r3
 800295c:	4691      	mov	r9, r2
 800295e:	4642      	mov	r2, r8
 8002960:	464b      	mov	r3, r9
 8002962:	4921      	ldr	r1, [pc, #132]	; (80029e8 <HAL_GPIO_EXTI_Callback+0x2ec>)
 8002964:	2002      	movs	r0, #2
 8002966:	f000 fc45 	bl	80031f4 <HAL_FLASH_Program>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_USER_START_ADDR + 8,
 800296a:	4b20      	ldr	r3, [pc, #128]	; (80029ec <HAL_GPIO_EXTI_Callback+0x2f0>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	17da      	asrs	r2, r3, #31
 8002970:	461c      	mov	r4, r3
 8002972:	4615      	mov	r5, r2
 8002974:	4622      	mov	r2, r4
 8002976:	462b      	mov	r3, r5
 8002978:	491d      	ldr	r1, [pc, #116]	; (80029f0 <HAL_GPIO_EXTI_Callback+0x2f4>)
 800297a:	2002      	movs	r0, #2
 800297c:	f000 fc3a 	bl	80031f4 <HAL_FLASH_Program>
		HAL_FLASH_Lock();
 8002980:	f000 fcce 	bl	8003320 <HAL_FLASH_Lock>
}
 8002984:	e048      	b.n	8002a18 <HAL_GPIO_EXTI_Callback+0x31c>
  } else if (GPIO_Pin == BTN_Stop_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
 8002986:	89fb      	ldrh	r3, [r7, #14]
 8002988:	2b10      	cmp	r3, #16
 800298a:	d145      	bne.n	8002a18 <HAL_GPIO_EXTI_Callback+0x31c>
	if (HAL_GPIO_ReadPin(BTN_Mode_GPIO_Port, BTN_Stop_Pin) == GPIO_PIN_RESET) {
 800298c:	2110      	movs	r1, #16
 800298e:	480a      	ldr	r0, [pc, #40]	; (80029b8 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8002990:	f000 ffb4 	bl	80038fc <HAL_GPIO_ReadPin>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d13e      	bne.n	8002a18 <HAL_GPIO_EXTI_Callback+0x31c>
	  if (state == 3) {
 800299a:	4b09      	ldr	r3, [pc, #36]	; (80029c0 <HAL_GPIO_EXTI_Callback+0x2c4>)
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2b03      	cmp	r3, #3
 80029a0:	d12e      	bne.n	8002a00 <HAL_GPIO_EXTI_Callback+0x304>
		set_motor(1, -2, 0);
 80029a2:	2200      	movs	r2, #0
 80029a4:	f06f 0101 	mvn.w	r1, #1
 80029a8:	2001      	movs	r0, #1
 80029aa:	f7ff fdf1 	bl	8002590 <set_motor>
		state = 4;
 80029ae:	4b04      	ldr	r3, [pc, #16]	; (80029c0 <HAL_GPIO_EXTI_Callback+0x2c4>)
 80029b0:	2204      	movs	r2, #4
 80029b2:	701a      	strb	r2, [r3, #0]
}
 80029b4:	e030      	b.n	8002a18 <HAL_GPIO_EXTI_Callback+0x31c>
 80029b6:	bf00      	nop
 80029b8:	40010c00 	.word	0x40010c00
 80029bc:	20000270 	.word	0x20000270
 80029c0:	2000000c 	.word	0x2000000c
 80029c4:	2000000e 	.word	0x2000000e
 80029c8:	20000296 	.word	0x20000296
 80029cc:	20000297 	.word	0x20000297
 80029d0:	20000298 	.word	0x20000298
 80029d4:	2000029a 	.word	0x2000029a
 80029d8:	2000000f 	.word	0x2000000f
 80029dc:	0801f810 	.word	0x0801f810
 80029e0:	20000290 	.word	0x20000290
 80029e4:	20000004 	.word	0x20000004
 80029e8:	0801f814 	.word	0x0801f814
 80029ec:	20000008 	.word	0x20000008
 80029f0:	0801f818 	.word	0x0801f818
 80029f4:	200002a0 	.word	0x200002a0
 80029f8:	2000029c 	.word	0x2000029c
 80029fc:	2000001c 	.word	0x2000001c
	  } else if (state == 4) {
 8002a00:	4b08      	ldr	r3, [pc, #32]	; (8002a24 <HAL_GPIO_EXTI_Callback+0x328>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d107      	bne.n	8002a18 <HAL_GPIO_EXTI_Callback+0x31c>
		n_loop = 0;
 8002a08:	4b07      	ldr	r3, [pc, #28]	; (8002a28 <HAL_GPIO_EXTI_Callback+0x32c>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	801a      	strh	r2, [r3, #0]
		state = 1;
 8002a0e:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <HAL_GPIO_EXTI_Callback+0x328>)
 8002a10:	2201      	movs	r2, #1
 8002a12:	701a      	strb	r2, [r3, #0]
}
 8002a14:	e000      	b.n	8002a18 <HAL_GPIO_EXTI_Callback+0x31c>
		if (state == 1 || state == 2) {
 8002a16:	bf00      	nop
}
 8002a18:	bf00      	nop
 8002a1a:	3738      	adds	r7, #56	; 0x38
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a22:	bf00      	nop
 8002a24:	2000000c 	.word	0x2000000c
 8002a28:	20000294 	.word	0x20000294

08002a2c <check_ecd>:
	last_flash = now;
  }
}

u32 preEcd = 0;
void check_ecd() {
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
  if (state == 2) {
 8002a32:	4b7a      	ldr	r3, [pc, #488]	; (8002c1c <check_ecd+0x1f0>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	f040 80e5 	bne.w	8002c06 <check_ecd+0x1da>
	if (preEcd != TIM2_count) {
 8002a3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a42:	4b77      	ldr	r3, [pc, #476]	; (8002c20 <check_ecd+0x1f4>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	f000 80e3 	beq.w	8002c12 <check_ecd+0x1e6>
	  s32 delta = TIM2_count - preEcd;
 8002a4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a52:	4b73      	ldr	r3, [pc, #460]	; (8002c20 <check_ecd+0x1f4>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	607b      	str	r3, [r7, #4]
	  if (abs(delta) > 10000)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	bfb8      	it	lt
 8002a60:	425b      	neglt	r3, r3
 8002a62:	f242 7210 	movw	r2, #10000	; 0x2710
 8002a66:	4293      	cmp	r3, r2
 8002a68:	dd05      	ble.n	8002a76 <check_ecd+0x4a>
		preEcd = TIM2_count;
 8002a6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	4a6b      	ldr	r2, [pc, #428]	; (8002c20 <check_ecd+0x1f4>)
 8002a72:	6013      	str	r3, [r2, #0]
	  }
	}
  } else {
	preEcd = TIM2_count;
  }
  return;
 8002a74:	e0cd      	b.n	8002c12 <check_ecd+0x1e6>
	  else if (abs(delta) > ecdFilter) {
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	bfb8      	it	lt
 8002a7c:	425b      	neglt	r3, r3
 8002a7e:	2b06      	cmp	r3, #6
 8002a80:	f340 80c7 	ble.w	8002c12 <check_ecd+0x1e6>
		if (menu1_selected == true) {
 8002a84:	4b67      	ldr	r3, [pc, #412]	; (8002c24 <check_ecd+0x1f8>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d036      	beq.n	8002afa <check_ecd+0xce>
		  if (delta > 0)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	dd0b      	ble.n	8002aaa <check_ecd+0x7e>
			menu1_value++;
 8002a92:	4b65      	ldr	r3, [pc, #404]	; (8002c28 <check_ecd+0x1fc>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fd ffa4 	bl	80009e8 <__addsf3>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	4b60      	ldr	r3, [pc, #384]	; (8002c28 <check_ecd+0x1fc>)
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	e00d      	b.n	8002ac6 <check_ecd+0x9a>
		  else if (delta < 0)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	da0a      	bge.n	8002ac6 <check_ecd+0x9a>
			menu1_value--;
 8002ab0:	4b5d      	ldr	r3, [pc, #372]	; (8002c28 <check_ecd+0x1fc>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7fd ff93 	bl	80009e4 <__aeabi_fsub>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4b59      	ldr	r3, [pc, #356]	; (8002c28 <check_ecd+0x1fc>)
 8002ac4:	601a      	str	r2, [r3, #0]
		  if (menu1_value > maxSpeed) //we do not go above 100
 8002ac6:	4b58      	ldr	r3, [pc, #352]	; (8002c28 <check_ecd+0x1fc>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4958      	ldr	r1, [pc, #352]	; (8002c2c <check_ecd+0x200>)
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7fe fa4f 	bl	8000f70 <__aeabi_fcmpgt>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d002      	beq.n	8002ade <check_ecd+0xb2>
			menu1_value = maxSpeed;
 8002ad8:	4b53      	ldr	r3, [pc, #332]	; (8002c28 <check_ecd+0x1fc>)
 8002ada:	4a54      	ldr	r2, [pc, #336]	; (8002c2c <check_ecd+0x200>)
 8002adc:	601a      	str	r2, [r3, #0]
		  if (menu1_value < minSpeed)
 8002ade:	4b52      	ldr	r3, [pc, #328]	; (8002c28 <check_ecd+0x1fc>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4953      	ldr	r1, [pc, #332]	; (8002c30 <check_ecd+0x204>)
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7fe fa25 	bl	8000f34 <__aeabi_fcmplt>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f000 8081 	beq.w	8002bf4 <check_ecd+0x1c8>
			menu1_value = minSpeed;
 8002af2:	4b4d      	ldr	r3, [pc, #308]	; (8002c28 <check_ecd+0x1fc>)
 8002af4:	4a4e      	ldr	r2, [pc, #312]	; (8002c30 <check_ecd+0x204>)
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	e07c      	b.n	8002bf4 <check_ecd+0x1c8>
		} else if (menu2_selected == true) {
 8002afa:	4b4e      	ldr	r3, [pc, #312]	; (8002c34 <check_ecd+0x208>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d029      	beq.n	8002b56 <check_ecd+0x12a>
		  if (delta > 0)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	dd09      	ble.n	8002b1c <check_ecd+0xf0>
			menu2_value++;
 8002b08:	4b4b      	ldr	r3, [pc, #300]	; (8002c38 <check_ecd+0x20c>)
 8002b0a:	f993 3000 	ldrsb.w	r3, [r3]
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	3301      	adds	r3, #1
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	b25a      	sxtb	r2, r3
 8002b16:	4b48      	ldr	r3, [pc, #288]	; (8002c38 <check_ecd+0x20c>)
 8002b18:	701a      	strb	r2, [r3, #0]
 8002b1a:	e00b      	b.n	8002b34 <check_ecd+0x108>
		  else if (delta < 0)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	da08      	bge.n	8002b34 <check_ecd+0x108>
			menu2_value--;
 8002b22:	4b45      	ldr	r3, [pc, #276]	; (8002c38 <check_ecd+0x20c>)
 8002b24:	f993 3000 	ldrsb.w	r3, [r3]
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	b25a      	sxtb	r2, r3
 8002b30:	4b41      	ldr	r3, [pc, #260]	; (8002c38 <check_ecd+0x20c>)
 8002b32:	701a      	strb	r2, [r3, #0]
		  if (menu2_value > 1)
 8002b34:	4b40      	ldr	r3, [pc, #256]	; (8002c38 <check_ecd+0x20c>)
 8002b36:	f993 3000 	ldrsb.w	r3, [r3]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	dd02      	ble.n	8002b44 <check_ecd+0x118>
			menu2_value = 1;
 8002b3e:	4b3e      	ldr	r3, [pc, #248]	; (8002c38 <check_ecd+0x20c>)
 8002b40:	2201      	movs	r2, #1
 8002b42:	701a      	strb	r2, [r3, #0]
		  if (menu2_value < 0)
 8002b44:	4b3c      	ldr	r3, [pc, #240]	; (8002c38 <check_ecd+0x20c>)
 8002b46:	f993 3000 	ldrsb.w	r3, [r3]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	da52      	bge.n	8002bf4 <check_ecd+0x1c8>
			menu2_value = 0;
 8002b4e:	4b3a      	ldr	r3, [pc, #232]	; (8002c38 <check_ecd+0x20c>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	701a      	strb	r2, [r3, #0]
 8002b54:	e04e      	b.n	8002bf4 <check_ecd+0x1c8>
		} else if (menu3_selected == true) {
 8002b56:	4b39      	ldr	r3, [pc, #228]	; (8002c3c <check_ecd+0x210>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d021      	beq.n	8002ba2 <check_ecd+0x176>
		  if (delta > 0)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	dd05      	ble.n	8002b70 <check_ecd+0x144>
			menu3_value++;
 8002b64:	4b36      	ldr	r3, [pc, #216]	; (8002c40 <check_ecd+0x214>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	4a35      	ldr	r2, [pc, #212]	; (8002c40 <check_ecd+0x214>)
 8002b6c:	6013      	str	r3, [r2, #0]
 8002b6e:	e007      	b.n	8002b80 <check_ecd+0x154>
		  else if (delta < 0)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	da04      	bge.n	8002b80 <check_ecd+0x154>
			menu3_value--;
 8002b76:	4b32      	ldr	r3, [pc, #200]	; (8002c40 <check_ecd+0x214>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	4a30      	ldr	r2, [pc, #192]	; (8002c40 <check_ecd+0x214>)
 8002b7e:	6013      	str	r3, [r2, #0]
		  if (menu3_value > 999)
 8002b80:	4b2f      	ldr	r3, [pc, #188]	; (8002c40 <check_ecd+0x214>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b88:	db03      	blt.n	8002b92 <check_ecd+0x166>
			menu3_value = 999;
 8002b8a:	4b2d      	ldr	r3, [pc, #180]	; (8002c40 <check_ecd+0x214>)
 8002b8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b90:	601a      	str	r2, [r3, #0]
		  if (menu3_value < 10)
 8002b92:	4b2b      	ldr	r3, [pc, #172]	; (8002c40 <check_ecd+0x214>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2b09      	cmp	r3, #9
 8002b98:	dc2c      	bgt.n	8002bf4 <check_ecd+0x1c8>
			menu3_value = 10; //rpm
 8002b9a:	4b29      	ldr	r3, [pc, #164]	; (8002c40 <check_ecd+0x214>)
 8002b9c:	220a      	movs	r2, #10
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	e028      	b.n	8002bf4 <check_ecd+0x1c8>
		} else if (state == 2) {
 8002ba2:	4b1e      	ldr	r3, [pc, #120]	; (8002c1c <check_ecd+0x1f0>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d124      	bne.n	8002bf4 <check_ecd+0x1c8>
		  if (delta > 0)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	dd06      	ble.n	8002bbe <check_ecd+0x192>
			menuCounter++;
 8002bb0:	4b24      	ldr	r3, [pc, #144]	; (8002c44 <check_ecd+0x218>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	4b22      	ldr	r3, [pc, #136]	; (8002c44 <check_ecd+0x218>)
 8002bba:	701a      	strb	r2, [r3, #0]
 8002bbc:	e00c      	b.n	8002bd8 <check_ecd+0x1ac>
		  else if (delta < 0)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	da09      	bge.n	8002bd8 <check_ecd+0x1ac>
			if (menuCounter > 0)
 8002bc4:	4b1f      	ldr	r3, [pc, #124]	; (8002c44 <check_ecd+0x218>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d005      	beq.n	8002bd8 <check_ecd+0x1ac>
			  menuCounter--;
 8002bcc:	4b1d      	ldr	r3, [pc, #116]	; (8002c44 <check_ecd+0x218>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	4b1b      	ldr	r3, [pc, #108]	; (8002c44 <check_ecd+0x218>)
 8002bd6:	701a      	strb	r2, [r3, #0]
		  if (menuCounter > 3)
 8002bd8:	4b1a      	ldr	r3, [pc, #104]	; (8002c44 <check_ecd+0x218>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	d902      	bls.n	8002be6 <check_ecd+0x1ba>
			menuCounter = 3;
 8002be0:	4b18      	ldr	r3, [pc, #96]	; (8002c44 <check_ecd+0x218>)
 8002be2:	2203      	movs	r2, #3
 8002be4:	701a      	strb	r2, [r3, #0]
		  if (menuCounter < 1)
 8002be6:	4b17      	ldr	r3, [pc, #92]	; (8002c44 <check_ecd+0x218>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d102      	bne.n	8002bf4 <check_ecd+0x1c8>
			menuCounter = 1; //rpm
 8002bee:	4b15      	ldr	r3, [pc, #84]	; (8002c44 <check_ecd+0x218>)
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	701a      	strb	r2, [r3, #0]
		refreshLCD = true;
 8002bf4:	4b14      	ldr	r3, [pc, #80]	; (8002c48 <check_ecd+0x21c>)
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	701a      	strb	r2, [r3, #0]
		preEcd = TIM2_count;
 8002bfa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	4a07      	ldr	r2, [pc, #28]	; (8002c20 <check_ecd+0x1f4>)
 8002c02:	6013      	str	r3, [r2, #0]
  return;
 8002c04:	e005      	b.n	8002c12 <check_ecd+0x1e6>
	preEcd = TIM2_count;
 8002c06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0c:	4a04      	ldr	r2, [pc, #16]	; (8002c20 <check_ecd+0x1f4>)
 8002c0e:	6013      	str	r3, [r2, #0]
  return;
 8002c10:	bf00      	nop
 8002c12:	bf00      	nop
}
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	2000000c 	.word	0x2000000c
 8002c20:	200002d0 	.word	0x200002d0
 8002c24:	20000296 	.word	0x20000296
 8002c28:	20000290 	.word	0x20000290
 8002c2c:	428c0000 	.word	0x428c0000
 8002c30:	41f00000 	.word	0x41f00000
 8002c34:	20000297 	.word	0x20000297
 8002c38:	20000004 	.word	0x20000004
 8002c3c:	20000298 	.word	0x20000298
 8002c40:	20000008 	.word	0x20000008
 8002c44:	2000000e 	.word	0x2000000e
 8002c48:	2000000f 	.word	0x2000000f
 8002c4c:	00000000 	.word	0x00000000

08002c50 <HAL_TIM_PeriodElapsedCallback>:

u32 timer_count = 0;
float u = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002c50:	b5b0      	push	{r4, r5, r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4) // 1ms
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a74      	ldr	r2, [pc, #464]	; (8002e30 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	f040 80dd 	bne.w	8002e1e <HAL_TIM_PeriodElapsedCallback+0x1ce>
  {
	timer_count++;
 8002c64:	4b73      	ldr	r3, [pc, #460]	; (8002e34 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	4a72      	ldr	r2, [pc, #456]	; (8002e34 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8002c6c:	6013      	str	r3, [r2, #0]
	if (timer_count >= timeInterval) // 20ms 50Hz
 8002c6e:	4b71      	ldr	r3, [pc, #452]	; (8002e34 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	4b71      	ldr	r3, [pc, #452]	; (8002e38 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	f0c0 80d1 	bcc.w	8002e1e <HAL_TIM_PeriodElapsedCallback+0x1ce>
		{
	  curPos = TIM1_count;
 8002c7c:	4b6f      	ldr	r3, [pc, #444]	; (8002e3c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	4a6f      	ldr	r2, [pc, #444]	; (8002e40 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002c82:	6013      	str	r3, [r2, #0]
	  s32 deltaPos = curPos - prePos;
 8002c84:	4b6e      	ldr	r3, [pc, #440]	; (8002e40 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	4b6e      	ldr	r3, [pc, #440]	; (8002e44 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	60fb      	str	r3, [r7, #12]
	  prePos = curPos;
 8002c90:	4b6b      	ldr	r3, [pc, #428]	; (8002e40 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a6b      	ldr	r2, [pc, #428]	; (8002e44 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8002c96:	6013      	str	r3, [r2, #0]
	  curSpeed = 60 * (fabs(deltaPos) / (totalPulse)) / (timeInterval / 1000.0);
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f7fd fbab 	bl	80003f4 <__aeabi_i2d>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4614      	mov	r4, r2
 8002ca4:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002ca8:	a35f      	add	r3, pc, #380	; (adr r3, 8002e28 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cae:	4620      	mov	r0, r4
 8002cb0:	4629      	mov	r1, r5
 8002cb2:	f7fd fd33 	bl	800071c <__aeabi_ddiv>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4610      	mov	r0, r2
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	f04f 0200 	mov.w	r2, #0
 8002cc2:	4b61      	ldr	r3, [pc, #388]	; (8002e48 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002cc4:	f7fd fc00 	bl	80004c8 <__aeabi_dmul>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	4614      	mov	r4, r2
 8002cce:	461d      	mov	r5, r3
 8002cd0:	4b59      	ldr	r3, [pc, #356]	; (8002e38 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7fd fb7d 	bl	80003d4 <__aeabi_ui2d>
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	4b5b      	ldr	r3, [pc, #364]	; (8002e4c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8002ce0:	f7fd fd1c 	bl	800071c <__aeabi_ddiv>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	4620      	mov	r0, r4
 8002cea:	4629      	mov	r1, r5
 8002cec:	f7fd fd16 	bl	800071c <__aeabi_ddiv>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	4610      	mov	r0, r2
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	f7fd fe20 	bl	800093c <__aeabi_d2f>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	4a54      	ldr	r2, [pc, #336]	; (8002e50 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002d00:	6013      	str	r3, [r2, #0]
	  e = curSpeed - vref;
 8002d02:	4b53      	ldr	r3, [pc, #332]	; (8002e50 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a53      	ldr	r2, [pc, #332]	; (8002e54 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8002d08:	6812      	ldr	r2, [r2, #0]
 8002d0a:	4611      	mov	r1, r2
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7fd fe69 	bl	80009e4 <__aeabi_fsub>
 8002d12:	4603      	mov	r3, r0
 8002d14:	461a      	mov	r2, r3
 8002d16:	4b50      	ldr	r3, [pc, #320]	; (8002e58 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002d18:	601a      	str	r2, [r3, #0]
	  eint = eint + e * timeInterval;
 8002d1a:	4b47      	ldr	r3, [pc, #284]	; (8002e38 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fd ff12 	bl	8000b48 <__aeabi_ui2f>
 8002d24:	4602      	mov	r2, r0
 8002d26:	4b4c      	ldr	r3, [pc, #304]	; (8002e58 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4610      	mov	r0, r2
 8002d2e:	f7fd ff63 	bl	8000bf8 <__aeabi_fmul>
 8002d32:	4603      	mov	r3, r0
 8002d34:	461a      	mov	r2, r3
 8002d36:	4b49      	ldr	r3, [pc, #292]	; (8002e5c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	f7fd fe53 	bl	80009e8 <__addsf3>
 8002d42:	4603      	mov	r3, r0
 8002d44:	461a      	mov	r2, r3
 8002d46:	4b45      	ldr	r3, [pc, #276]	; (8002e5c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002d48:	601a      	str	r2, [r3, #0]
	  float de = (e - preE) / timeInterval;
 8002d4a:	4b43      	ldr	r3, [pc, #268]	; (8002e58 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a44      	ldr	r2, [pc, #272]	; (8002e60 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002d50:	6812      	ldr	r2, [r2, #0]
 8002d52:	4611      	mov	r1, r2
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7fd fe45 	bl	80009e4 <__aeabi_fsub>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	461c      	mov	r4, r3
 8002d5e:	4b36      	ldr	r3, [pc, #216]	; (8002e38 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fd fef0 	bl	8000b48 <__aeabi_ui2f>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4620      	mov	r0, r4
 8002d6e:	f7fd fff7 	bl	8000d60 <__aeabi_fdiv>
 8002d72:	4603      	mov	r3, r0
 8002d74:	60bb      	str	r3, [r7, #8]
	  preE = e;
 8002d76:	4b38      	ldr	r3, [pc, #224]	; (8002e58 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a39      	ldr	r2, [pc, #228]	; (8002e60 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002d7c:	6013      	str	r3, [r2, #0]
	  u = kp * e + ki * eint + kd * de;   //%PWM
 8002d7e:	4b39      	ldr	r3, [pc, #228]	; (8002e64 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a35      	ldr	r2, [pc, #212]	; (8002e58 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002d84:	6812      	ldr	r2, [r2, #0]
 8002d86:	4611      	mov	r1, r2
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7fd ff35 	bl	8000bf8 <__aeabi_fmul>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	461c      	mov	r4, r3
 8002d92:	4b35      	ldr	r3, [pc, #212]	; (8002e68 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a31      	ldr	r2, [pc, #196]	; (8002e5c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002d98:	6812      	ldr	r2, [r2, #0]
 8002d9a:	4611      	mov	r1, r2
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fd ff2b 	bl	8000bf8 <__aeabi_fmul>
 8002da2:	4603      	mov	r3, r0
 8002da4:	4619      	mov	r1, r3
 8002da6:	4620      	mov	r0, r4
 8002da8:	f7fd fe1e 	bl	80009e8 <__addsf3>
 8002dac:	4603      	mov	r3, r0
 8002dae:	461c      	mov	r4, r3
 8002db0:	4b2e      	ldr	r3, [pc, #184]	; (8002e6c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68b9      	ldr	r1, [r7, #8]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fd ff1e 	bl	8000bf8 <__aeabi_fmul>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4620      	mov	r0, r4
 8002dc2:	f7fd fe11 	bl	80009e8 <__addsf3>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	461a      	mov	r2, r3
 8002dca:	4b29      	ldr	r3, [pc, #164]	; (8002e70 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002dcc:	601a      	str	r2, [r3, #0]

	  if (u < 0) {
 8002dce:	4b28      	ldr	r3, [pc, #160]	; (8002e70 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f04f 0100 	mov.w	r1, #0
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fe f8ac 	bl	8000f34 <__aeabi_fcmplt>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00e      	beq.n	8002e00 <HAL_TIM_PeriodElapsedCallback+0x1b0>
		pidDir = -mDir;
 8002de2:	4b24      	ldr	r3, [pc, #144]	; (8002e74 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002de4:	f993 3000 	ldrsb.w	r3, [r3]
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	425b      	negs	r3, r3
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	b25a      	sxtb	r2, r3
 8002df0:	4b21      	ldr	r3, [pc, #132]	; (8002e78 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002df2:	701a      	strb	r2, [r3, #0]
		u = fabs(u);
 8002df4:	4b1e      	ldr	r3, [pc, #120]	; (8002e70 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002dfc:	4a1c      	ldr	r2, [pc, #112]	; (8002e70 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002dfe:	6013      	str	r3, [r2, #0]
	  }
	  if (u > 1000)
 8002e00:	4b1b      	ldr	r3, [pc, #108]	; (8002e70 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	491d      	ldr	r1, [pc, #116]	; (8002e7c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7fe f8b2 	bl	8000f70 <__aeabi_fcmpgt>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d002      	beq.n	8002e18 <HAL_TIM_PeriodElapsedCallback+0x1c8>
		u = 1000;
 8002e12:	4b17      	ldr	r3, [pc, #92]	; (8002e70 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002e14:	4a19      	ldr	r2, [pc, #100]	; (8002e7c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002e16:	601a      	str	r2, [r3, #0]

	  if (FLAG_run == true) {
//		set_motor(1, pidDir, (u32) u);
	  }
	  timer_count = 0;
 8002e18:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]
	}
  }
}
 8002e1e:	bf00      	nop
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bdb0      	pop	{r4, r5, r7, pc}
 8002e26:	bf00      	nop
 8002e28:	00000000 	.word	0x00000000
 8002e2c:	40aef000 	.word	0x40aef000
 8002e30:	40000800 	.word	0x40000800
 8002e34:	200002d4 	.word	0x200002d4
 8002e38:	20000010 	.word	0x20000010
 8002e3c:	40012c00 	.word	0x40012c00
 8002e40:	200002a8 	.word	0x200002a8
 8002e44:	200002ac 	.word	0x200002ac
 8002e48:	404e0000 	.word	0x404e0000
 8002e4c:	408f4000 	.word	0x408f4000
 8002e50:	200002a4 	.word	0x200002a4
 8002e54:	200002c4 	.word	0x200002c4
 8002e58:	200002bc 	.word	0x200002bc
 8002e5c:	200002b8 	.word	0x200002b8
 8002e60:	200002c0 	.word	0x200002c0
 8002e64:	20000014 	.word	0x20000014
 8002e68:	200002b0 	.word	0x200002b0
 8002e6c:	200002b4 	.word	0x200002b4
 8002e70:	200002d8 	.word	0x200002d8
 8002e74:	20000004 	.word	0x20000004
 8002e78:	20000018 	.word	0x20000018
 8002e7c:	447a0000 	.word	0x447a0000

08002e80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e80:	480c      	ldr	r0, [pc, #48]	; (8002eb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e82:	490d      	ldr	r1, [pc, #52]	; (8002eb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e84:	4a0d      	ldr	r2, [pc, #52]	; (8002ebc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e88:	e002      	b.n	8002e90 <LoopCopyDataInit>

08002e8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e8e:	3304      	adds	r3, #4

08002e90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e94:	d3f9      	bcc.n	8002e8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e96:	4a0a      	ldr	r2, [pc, #40]	; (8002ec0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e98:	4c0a      	ldr	r4, [pc, #40]	; (8002ec4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e9c:	e001      	b.n	8002ea2 <LoopFillZerobss>

08002e9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ea0:	3204      	adds	r2, #4

08002ea2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ea2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ea4:	d3fb      	bcc.n	8002e9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ea6:	f7fe fda1 	bl	80019ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002eaa:	f002 fcb9 	bl	8005820 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002eae:	f7fe f8cf 	bl	8001050 <main>
  bx lr
 8002eb2:	4770      	bx	lr
  ldr r0, =_sdata
 8002eb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002eb8:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002ebc:	080062a8 	.word	0x080062a8
  ldr r2, =_sbss
 8002ec0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002ec4:	20000310 	.word	0x20000310

08002ec8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ec8:	e7fe      	b.n	8002ec8 <ADC1_2_IRQHandler>
	...

08002ecc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ed0:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <HAL_Init+0x28>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a07      	ldr	r2, [pc, #28]	; (8002ef4 <HAL_Init+0x28>)
 8002ed6:	f043 0310 	orr.w	r3, r3, #16
 8002eda:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002edc:	2003      	movs	r0, #3
 8002ede:	f000 f947 	bl	8003170 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ee2:	200f      	movs	r0, #15
 8002ee4:	f000 f808 	bl	8002ef8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ee8:	f7fe fba0 	bl	800162c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40022000 	.word	0x40022000

08002ef8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f00:	4b12      	ldr	r3, [pc, #72]	; (8002f4c <HAL_InitTick+0x54>)
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	4b12      	ldr	r3, [pc, #72]	; (8002f50 <HAL_InitTick+0x58>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	4619      	mov	r1, r3
 8002f0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 f95f 	bl	80031da <HAL_SYSTICK_Config>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e00e      	b.n	8002f44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b0f      	cmp	r3, #15
 8002f2a:	d80a      	bhi.n	8002f42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	f04f 30ff 	mov.w	r0, #4294967295
 8002f34:	f000 f927 	bl	8003186 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f38:	4a06      	ldr	r2, [pc, #24]	; (8002f54 <HAL_InitTick+0x5c>)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	e000      	b.n	8002f44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	20000000 	.word	0x20000000
 8002f50:	20000024 	.word	0x20000024
 8002f54:	20000020 	.word	0x20000020

08002f58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f5c:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <HAL_IncTick+0x1c>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	461a      	mov	r2, r3
 8002f62:	4b05      	ldr	r3, [pc, #20]	; (8002f78 <HAL_IncTick+0x20>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4413      	add	r3, r2
 8002f68:	4a03      	ldr	r2, [pc, #12]	; (8002f78 <HAL_IncTick+0x20>)
 8002f6a:	6013      	str	r3, [r2, #0]
}
 8002f6c:	bf00      	nop
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr
 8002f74:	20000024 	.word	0x20000024
 8002f78:	200002dc 	.word	0x200002dc

08002f7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f80:	4b02      	ldr	r3, [pc, #8]	; (8002f8c <HAL_GetTick+0x10>)
 8002f82:	681b      	ldr	r3, [r3, #0]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr
 8002f8c:	200002dc 	.word	0x200002dc

08002f90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f98:	f7ff fff0 	bl	8002f7c <HAL_GetTick>
 8002f9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa8:	d005      	beq.n	8002fb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002faa:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <HAL_Delay+0x44>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fb6:	bf00      	nop
 8002fb8:	f7ff ffe0 	bl	8002f7c <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d8f7      	bhi.n	8002fb8 <HAL_Delay+0x28>
  {
  }
}
 8002fc8:	bf00      	nop
 8002fca:	bf00      	nop
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	20000024 	.word	0x20000024

08002fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fe8:	4b0c      	ldr	r3, [pc, #48]	; (800301c <__NVIC_SetPriorityGrouping+0x44>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003000:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800300a:	4a04      	ldr	r2, [pc, #16]	; (800301c <__NVIC_SetPriorityGrouping+0x44>)
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	60d3      	str	r3, [r2, #12]
}
 8003010:	bf00      	nop
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	bc80      	pop	{r7}
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	e000ed00 	.word	0xe000ed00

08003020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003024:	4b04      	ldr	r3, [pc, #16]	; (8003038 <__NVIC_GetPriorityGrouping+0x18>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	0a1b      	lsrs	r3, r3, #8
 800302a:	f003 0307 	and.w	r3, r3, #7
}
 800302e:	4618      	mov	r0, r3
 8003030:	46bd      	mov	sp, r7
 8003032:	bc80      	pop	{r7}
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	e000ed00 	.word	0xe000ed00

0800303c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	4603      	mov	r3, r0
 8003044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304a:	2b00      	cmp	r3, #0
 800304c:	db0b      	blt.n	8003066 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800304e:	79fb      	ldrb	r3, [r7, #7]
 8003050:	f003 021f 	and.w	r2, r3, #31
 8003054:	4906      	ldr	r1, [pc, #24]	; (8003070 <__NVIC_EnableIRQ+0x34>)
 8003056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305a:	095b      	lsrs	r3, r3, #5
 800305c:	2001      	movs	r0, #1
 800305e:	fa00 f202 	lsl.w	r2, r0, r2
 8003062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003066:	bf00      	nop
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr
 8003070:	e000e100 	.word	0xe000e100

08003074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	6039      	str	r1, [r7, #0]
 800307e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003084:	2b00      	cmp	r3, #0
 8003086:	db0a      	blt.n	800309e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	b2da      	uxtb	r2, r3
 800308c:	490c      	ldr	r1, [pc, #48]	; (80030c0 <__NVIC_SetPriority+0x4c>)
 800308e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003092:	0112      	lsls	r2, r2, #4
 8003094:	b2d2      	uxtb	r2, r2
 8003096:	440b      	add	r3, r1
 8003098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800309c:	e00a      	b.n	80030b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	4908      	ldr	r1, [pc, #32]	; (80030c4 <__NVIC_SetPriority+0x50>)
 80030a4:	79fb      	ldrb	r3, [r7, #7]
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	3b04      	subs	r3, #4
 80030ac:	0112      	lsls	r2, r2, #4
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	440b      	add	r3, r1
 80030b2:	761a      	strb	r2, [r3, #24]
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bc80      	pop	{r7}
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	e000e100 	.word	0xe000e100
 80030c4:	e000ed00 	.word	0xe000ed00

080030c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b089      	sub	sp, #36	; 0x24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f1c3 0307 	rsb	r3, r3, #7
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	bf28      	it	cs
 80030e6:	2304      	movcs	r3, #4
 80030e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	3304      	adds	r3, #4
 80030ee:	2b06      	cmp	r3, #6
 80030f0:	d902      	bls.n	80030f8 <NVIC_EncodePriority+0x30>
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	3b03      	subs	r3, #3
 80030f6:	e000      	b.n	80030fa <NVIC_EncodePriority+0x32>
 80030f8:	2300      	movs	r3, #0
 80030fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43da      	mvns	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	401a      	ands	r2, r3
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003110:	f04f 31ff 	mov.w	r1, #4294967295
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	fa01 f303 	lsl.w	r3, r1, r3
 800311a:	43d9      	mvns	r1, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003120:	4313      	orrs	r3, r2
         );
}
 8003122:	4618      	mov	r0, r3
 8003124:	3724      	adds	r7, #36	; 0x24
 8003126:	46bd      	mov	sp, r7
 8003128:	bc80      	pop	{r7}
 800312a:	4770      	bx	lr

0800312c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	3b01      	subs	r3, #1
 8003138:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800313c:	d301      	bcc.n	8003142 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800313e:	2301      	movs	r3, #1
 8003140:	e00f      	b.n	8003162 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003142:	4a0a      	ldr	r2, [pc, #40]	; (800316c <SysTick_Config+0x40>)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3b01      	subs	r3, #1
 8003148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800314a:	210f      	movs	r1, #15
 800314c:	f04f 30ff 	mov.w	r0, #4294967295
 8003150:	f7ff ff90 	bl	8003074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003154:	4b05      	ldr	r3, [pc, #20]	; (800316c <SysTick_Config+0x40>)
 8003156:	2200      	movs	r2, #0
 8003158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800315a:	4b04      	ldr	r3, [pc, #16]	; (800316c <SysTick_Config+0x40>)
 800315c:	2207      	movs	r2, #7
 800315e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	e000e010 	.word	0xe000e010

08003170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f7ff ff2d 	bl	8002fd8 <__NVIC_SetPriorityGrouping>
}
 800317e:	bf00      	nop
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003186:	b580      	push	{r7, lr}
 8003188:	b086      	sub	sp, #24
 800318a:	af00      	add	r7, sp, #0
 800318c:	4603      	mov	r3, r0
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	607a      	str	r2, [r7, #4]
 8003192:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003194:	2300      	movs	r3, #0
 8003196:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003198:	f7ff ff42 	bl	8003020 <__NVIC_GetPriorityGrouping>
 800319c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	68b9      	ldr	r1, [r7, #8]
 80031a2:	6978      	ldr	r0, [r7, #20]
 80031a4:	f7ff ff90 	bl	80030c8 <NVIC_EncodePriority>
 80031a8:	4602      	mov	r2, r0
 80031aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ae:	4611      	mov	r1, r2
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff ff5f 	bl	8003074 <__NVIC_SetPriority>
}
 80031b6:	bf00      	nop
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b082      	sub	sp, #8
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	4603      	mov	r3, r0
 80031c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff ff35 	bl	800303c <__NVIC_EnableIRQ>
}
 80031d2:	bf00      	nop
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b082      	sub	sp, #8
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7ff ffa2 	bl	800312c <SysTick_Config>
 80031e8:	4603      	mov	r3, r0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
	...

080031f4 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80031f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031f6:	b087      	sub	sp, #28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003206:	2300      	movs	r3, #0
 8003208:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800320a:	2300      	movs	r3, #0
 800320c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800320e:	4b2f      	ldr	r3, [pc, #188]	; (80032cc <HAL_FLASH_Program+0xd8>)
 8003210:	7e1b      	ldrb	r3, [r3, #24]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d101      	bne.n	800321a <HAL_FLASH_Program+0x26>
 8003216:	2302      	movs	r3, #2
 8003218:	e054      	b.n	80032c4 <HAL_FLASH_Program+0xd0>
 800321a:	4b2c      	ldr	r3, [pc, #176]	; (80032cc <HAL_FLASH_Program+0xd8>)
 800321c:	2201      	movs	r2, #1
 800321e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003220:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003224:	f000 f8a8 	bl	8003378 <FLASH_WaitForLastOperation>
 8003228:	4603      	mov	r3, r0
 800322a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800322c:	7dfb      	ldrb	r3, [r7, #23]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d144      	bne.n	80032bc <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d102      	bne.n	800323e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003238:	2301      	movs	r3, #1
 800323a:	757b      	strb	r3, [r7, #21]
 800323c:	e007      	b.n	800324e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2b02      	cmp	r3, #2
 8003242:	d102      	bne.n	800324a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003244:	2302      	movs	r3, #2
 8003246:	757b      	strb	r3, [r7, #21]
 8003248:	e001      	b.n	800324e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800324a:	2304      	movs	r3, #4
 800324c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800324e:	2300      	movs	r3, #0
 8003250:	75bb      	strb	r3, [r7, #22]
 8003252:	e02d      	b.n	80032b0 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003254:	7dbb      	ldrb	r3, [r7, #22]
 8003256:	005a      	lsls	r2, r3, #1
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	eb02 0c03 	add.w	ip, r2, r3
 800325e:	7dbb      	ldrb	r3, [r7, #22]
 8003260:	0119      	lsls	r1, r3, #4
 8003262:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003266:	f1c1 0620 	rsb	r6, r1, #32
 800326a:	f1a1 0020 	sub.w	r0, r1, #32
 800326e:	fa22 f401 	lsr.w	r4, r2, r1
 8003272:	fa03 f606 	lsl.w	r6, r3, r6
 8003276:	4334      	orrs	r4, r6
 8003278:	fa23 f000 	lsr.w	r0, r3, r0
 800327c:	4304      	orrs	r4, r0
 800327e:	fa23 f501 	lsr.w	r5, r3, r1
 8003282:	b2a3      	uxth	r3, r4
 8003284:	4619      	mov	r1, r3
 8003286:	4660      	mov	r0, ip
 8003288:	f000 f85a 	bl	8003340 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800328c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003290:	f000 f872 	bl	8003378 <FLASH_WaitForLastOperation>
 8003294:	4603      	mov	r3, r0
 8003296:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003298:	4b0d      	ldr	r3, [pc, #52]	; (80032d0 <HAL_FLASH_Program+0xdc>)
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	4a0c      	ldr	r2, [pc, #48]	; (80032d0 <HAL_FLASH_Program+0xdc>)
 800329e:	f023 0301 	bic.w	r3, r3, #1
 80032a2:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80032a4:	7dfb      	ldrb	r3, [r7, #23]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d107      	bne.n	80032ba <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80032aa:	7dbb      	ldrb	r3, [r7, #22]
 80032ac:	3301      	adds	r3, #1
 80032ae:	75bb      	strb	r3, [r7, #22]
 80032b0:	7dba      	ldrb	r2, [r7, #22]
 80032b2:	7d7b      	ldrb	r3, [r7, #21]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d3cd      	bcc.n	8003254 <HAL_FLASH_Program+0x60>
 80032b8:	e000      	b.n	80032bc <HAL_FLASH_Program+0xc8>
      {
        break;
 80032ba:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80032bc:	4b03      	ldr	r3, [pc, #12]	; (80032cc <HAL_FLASH_Program+0xd8>)
 80032be:	2200      	movs	r2, #0
 80032c0:	761a      	strb	r2, [r3, #24]

  return status;
 80032c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	371c      	adds	r7, #28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032cc:	200002e0 	.word	0x200002e0
 80032d0:	40022000 	.word	0x40022000

080032d4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80032da:	2300      	movs	r3, #0
 80032dc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80032de:	4b0d      	ldr	r3, [pc, #52]	; (8003314 <HAL_FLASH_Unlock+0x40>)
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00d      	beq.n	8003306 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80032ea:	4b0a      	ldr	r3, [pc, #40]	; (8003314 <HAL_FLASH_Unlock+0x40>)
 80032ec:	4a0a      	ldr	r2, [pc, #40]	; (8003318 <HAL_FLASH_Unlock+0x44>)
 80032ee:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80032f0:	4b08      	ldr	r3, [pc, #32]	; (8003314 <HAL_FLASH_Unlock+0x40>)
 80032f2:	4a0a      	ldr	r2, [pc, #40]	; (800331c <HAL_FLASH_Unlock+0x48>)
 80032f4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80032f6:	4b07      	ldr	r3, [pc, #28]	; (8003314 <HAL_FLASH_Unlock+0x40>)
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8003306:	79fb      	ldrb	r3, [r7, #7]
}
 8003308:	4618      	mov	r0, r3
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	bc80      	pop	{r7}
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	40022000 	.word	0x40022000
 8003318:	45670123 	.word	0x45670123
 800331c:	cdef89ab 	.word	0xcdef89ab

08003320 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003324:	4b05      	ldr	r3, [pc, #20]	; (800333c <HAL_FLASH_Lock+0x1c>)
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	4a04      	ldr	r2, [pc, #16]	; (800333c <HAL_FLASH_Lock+0x1c>)
 800332a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800332e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	46bd      	mov	sp, r7
 8003336:	bc80      	pop	{r7}
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	40022000 	.word	0x40022000

08003340 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	460b      	mov	r3, r1
 800334a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800334c:	4b08      	ldr	r3, [pc, #32]	; (8003370 <FLASH_Program_HalfWord+0x30>)
 800334e:	2200      	movs	r2, #0
 8003350:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003352:	4b08      	ldr	r3, [pc, #32]	; (8003374 <FLASH_Program_HalfWord+0x34>)
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	4a07      	ldr	r2, [pc, #28]	; (8003374 <FLASH_Program_HalfWord+0x34>)
 8003358:	f043 0301 	orr.w	r3, r3, #1
 800335c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	887a      	ldrh	r2, [r7, #2]
 8003362:	801a      	strh	r2, [r3, #0]
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	bc80      	pop	{r7}
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	200002e0 	.word	0x200002e0
 8003374:	40022000 	.word	0x40022000

08003378 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003380:	f7ff fdfc 	bl	8002f7c <HAL_GetTick>
 8003384:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003386:	e010      	b.n	80033aa <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338e:	d00c      	beq.n	80033aa <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d007      	beq.n	80033a6 <FLASH_WaitForLastOperation+0x2e>
 8003396:	f7ff fdf1 	bl	8002f7c <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d201      	bcs.n	80033aa <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e025      	b.n	80033f6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80033aa:	4b15      	ldr	r3, [pc, #84]	; (8003400 <FLASH_WaitForLastOperation+0x88>)
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1e8      	bne.n	8003388 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80033b6:	4b12      	ldr	r3, [pc, #72]	; (8003400 <FLASH_WaitForLastOperation+0x88>)
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	f003 0320 	and.w	r3, r3, #32
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d002      	beq.n	80033c8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80033c2:	4b0f      	ldr	r3, [pc, #60]	; (8003400 <FLASH_WaitForLastOperation+0x88>)
 80033c4:	2220      	movs	r2, #32
 80033c6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80033c8:	4b0d      	ldr	r3, [pc, #52]	; (8003400 <FLASH_WaitForLastOperation+0x88>)
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	f003 0310 	and.w	r3, r3, #16
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10b      	bne.n	80033ec <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80033d4:	4b0a      	ldr	r3, [pc, #40]	; (8003400 <FLASH_WaitForLastOperation+0x88>)
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d105      	bne.n	80033ec <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80033e0:	4b07      	ldr	r3, [pc, #28]	; (8003400 <FLASH_WaitForLastOperation+0x88>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80033ec:	f000 f80a 	bl	8003404 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e000      	b.n	80033f6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	40022000 	.word	0x40022000

08003404 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800340a:	2300      	movs	r3, #0
 800340c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800340e:	4b23      	ldr	r3, [pc, #140]	; (800349c <FLASH_SetErrorCode+0x98>)
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	f003 0310 	and.w	r3, r3, #16
 8003416:	2b00      	cmp	r3, #0
 8003418:	d009      	beq.n	800342e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800341a:	4b21      	ldr	r3, [pc, #132]	; (80034a0 <FLASH_SetErrorCode+0x9c>)
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	f043 0302 	orr.w	r3, r3, #2
 8003422:	4a1f      	ldr	r2, [pc, #124]	; (80034a0 <FLASH_SetErrorCode+0x9c>)
 8003424:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f043 0310 	orr.w	r3, r3, #16
 800342c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800342e:	4b1b      	ldr	r3, [pc, #108]	; (800349c <FLASH_SetErrorCode+0x98>)
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f003 0304 	and.w	r3, r3, #4
 8003436:	2b00      	cmp	r3, #0
 8003438:	d009      	beq.n	800344e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800343a:	4b19      	ldr	r3, [pc, #100]	; (80034a0 <FLASH_SetErrorCode+0x9c>)
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	f043 0301 	orr.w	r3, r3, #1
 8003442:	4a17      	ldr	r2, [pc, #92]	; (80034a0 <FLASH_SetErrorCode+0x9c>)
 8003444:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f043 0304 	orr.w	r3, r3, #4
 800344c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800344e:	4b13      	ldr	r3, [pc, #76]	; (800349c <FLASH_SetErrorCode+0x98>)
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00b      	beq.n	8003472 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800345a:	4b11      	ldr	r3, [pc, #68]	; (80034a0 <FLASH_SetErrorCode+0x9c>)
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	f043 0304 	orr.w	r3, r3, #4
 8003462:	4a0f      	ldr	r2, [pc, #60]	; (80034a0 <FLASH_SetErrorCode+0x9c>)
 8003464:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003466:	4b0d      	ldr	r3, [pc, #52]	; (800349c <FLASH_SetErrorCode+0x98>)
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	4a0c      	ldr	r2, [pc, #48]	; (800349c <FLASH_SetErrorCode+0x98>)
 800346c:	f023 0301 	bic.w	r3, r3, #1
 8003470:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f240 1201 	movw	r2, #257	; 0x101
 8003478:	4293      	cmp	r3, r2
 800347a:	d106      	bne.n	800348a <FLASH_SetErrorCode+0x86>
 800347c:	4b07      	ldr	r3, [pc, #28]	; (800349c <FLASH_SetErrorCode+0x98>)
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	4a06      	ldr	r2, [pc, #24]	; (800349c <FLASH_SetErrorCode+0x98>)
 8003482:	f023 0301 	bic.w	r3, r3, #1
 8003486:	61d3      	str	r3, [r2, #28]
}  
 8003488:	e002      	b.n	8003490 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800348a:	4a04      	ldr	r2, [pc, #16]	; (800349c <FLASH_SetErrorCode+0x98>)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	60d3      	str	r3, [r2, #12]
}  
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	bc80      	pop	{r7}
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	40022000 	.word	0x40022000
 80034a0:	200002e0 	.word	0x200002e0

080034a4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80034b6:	4b2f      	ldr	r3, [pc, #188]	; (8003574 <HAL_FLASHEx_Erase+0xd0>)
 80034b8:	7e1b      	ldrb	r3, [r3, #24]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d101      	bne.n	80034c2 <HAL_FLASHEx_Erase+0x1e>
 80034be:	2302      	movs	r3, #2
 80034c0:	e053      	b.n	800356a <HAL_FLASHEx_Erase+0xc6>
 80034c2:	4b2c      	ldr	r3, [pc, #176]	; (8003574 <HAL_FLASHEx_Erase+0xd0>)
 80034c4:	2201      	movs	r2, #1
 80034c6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d116      	bne.n	80034fe <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80034d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80034d4:	f7ff ff50 	bl	8003378 <FLASH_WaitForLastOperation>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d141      	bne.n	8003562 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80034de:	2001      	movs	r0, #1
 80034e0:	f000 f84c 	bl	800357c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80034e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80034e8:	f7ff ff46 	bl	8003378 <FLASH_WaitForLastOperation>
 80034ec:	4603      	mov	r3, r0
 80034ee:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80034f0:	4b21      	ldr	r3, [pc, #132]	; (8003578 <HAL_FLASHEx_Erase+0xd4>)
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	4a20      	ldr	r2, [pc, #128]	; (8003578 <HAL_FLASHEx_Erase+0xd4>)
 80034f6:	f023 0304 	bic.w	r3, r3, #4
 80034fa:	6113      	str	r3, [r2, #16]
 80034fc:	e031      	b.n	8003562 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80034fe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003502:	f7ff ff39 	bl	8003378 <FLASH_WaitForLastOperation>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d12a      	bne.n	8003562 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	f04f 32ff 	mov.w	r2, #4294967295
 8003512:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	60bb      	str	r3, [r7, #8]
 800351a:	e019      	b.n	8003550 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800351c:	68b8      	ldr	r0, [r7, #8]
 800351e:	f000 f849 	bl	80035b4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003522:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003526:	f7ff ff27 	bl	8003378 <FLASH_WaitForLastOperation>
 800352a:	4603      	mov	r3, r0
 800352c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800352e:	4b12      	ldr	r3, [pc, #72]	; (8003578 <HAL_FLASHEx_Erase+0xd4>)
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	4a11      	ldr	r2, [pc, #68]	; (8003578 <HAL_FLASHEx_Erase+0xd4>)
 8003534:	f023 0302 	bic.w	r3, r3, #2
 8003538:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800353a:	7bfb      	ldrb	r3, [r7, #15]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d003      	beq.n	8003548 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	601a      	str	r2, [r3, #0]
            break;
 8003546:	e00c      	b.n	8003562 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800354e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	029a      	lsls	r2, r3, #10
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	429a      	cmp	r2, r3
 8003560:	d3dc      	bcc.n	800351c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003562:	4b04      	ldr	r3, [pc, #16]	; (8003574 <HAL_FLASHEx_Erase+0xd0>)
 8003564:	2200      	movs	r2, #0
 8003566:	761a      	strb	r2, [r3, #24]

  return status;
 8003568:	7bfb      	ldrb	r3, [r7, #15]
}
 800356a:	4618      	mov	r0, r3
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	200002e0 	.word	0x200002e0
 8003578:	40022000 	.word	0x40022000

0800357c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003584:	4b09      	ldr	r3, [pc, #36]	; (80035ac <FLASH_MassErase+0x30>)
 8003586:	2200      	movs	r2, #0
 8003588:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800358a:	4b09      	ldr	r3, [pc, #36]	; (80035b0 <FLASH_MassErase+0x34>)
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	4a08      	ldr	r2, [pc, #32]	; (80035b0 <FLASH_MassErase+0x34>)
 8003590:	f043 0304 	orr.w	r3, r3, #4
 8003594:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003596:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <FLASH_MassErase+0x34>)
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	4a05      	ldr	r2, [pc, #20]	; (80035b0 <FLASH_MassErase+0x34>)
 800359c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035a0:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bc80      	pop	{r7}
 80035aa:	4770      	bx	lr
 80035ac:	200002e0 	.word	0x200002e0
 80035b0:	40022000 	.word	0x40022000

080035b4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80035bc:	4b0b      	ldr	r3, [pc, #44]	; (80035ec <FLASH_PageErase+0x38>)
 80035be:	2200      	movs	r2, #0
 80035c0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80035c2:	4b0b      	ldr	r3, [pc, #44]	; (80035f0 <FLASH_PageErase+0x3c>)
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	4a0a      	ldr	r2, [pc, #40]	; (80035f0 <FLASH_PageErase+0x3c>)
 80035c8:	f043 0302 	orr.w	r3, r3, #2
 80035cc:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80035ce:	4a08      	ldr	r2, [pc, #32]	; (80035f0 <FLASH_PageErase+0x3c>)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80035d4:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <FLASH_PageErase+0x3c>)
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	4a05      	ldr	r2, [pc, #20]	; (80035f0 <FLASH_PageErase+0x3c>)
 80035da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035de:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bc80      	pop	{r7}
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	200002e0 	.word	0x200002e0
 80035f0:	40022000 	.word	0x40022000

080035f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b08b      	sub	sp, #44	; 0x2c
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035fe:	2300      	movs	r3, #0
 8003600:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003602:	2300      	movs	r3, #0
 8003604:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003606:	e169      	b.n	80038dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003608:	2201      	movs	r2, #1
 800360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	69fa      	ldr	r2, [r7, #28]
 8003618:	4013      	ands	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	429a      	cmp	r2, r3
 8003622:	f040 8158 	bne.w	80038d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	4a9a      	ldr	r2, [pc, #616]	; (8003894 <HAL_GPIO_Init+0x2a0>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d05e      	beq.n	80036ee <HAL_GPIO_Init+0xfa>
 8003630:	4a98      	ldr	r2, [pc, #608]	; (8003894 <HAL_GPIO_Init+0x2a0>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d875      	bhi.n	8003722 <HAL_GPIO_Init+0x12e>
 8003636:	4a98      	ldr	r2, [pc, #608]	; (8003898 <HAL_GPIO_Init+0x2a4>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d058      	beq.n	80036ee <HAL_GPIO_Init+0xfa>
 800363c:	4a96      	ldr	r2, [pc, #600]	; (8003898 <HAL_GPIO_Init+0x2a4>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d86f      	bhi.n	8003722 <HAL_GPIO_Init+0x12e>
 8003642:	4a96      	ldr	r2, [pc, #600]	; (800389c <HAL_GPIO_Init+0x2a8>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d052      	beq.n	80036ee <HAL_GPIO_Init+0xfa>
 8003648:	4a94      	ldr	r2, [pc, #592]	; (800389c <HAL_GPIO_Init+0x2a8>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d869      	bhi.n	8003722 <HAL_GPIO_Init+0x12e>
 800364e:	4a94      	ldr	r2, [pc, #592]	; (80038a0 <HAL_GPIO_Init+0x2ac>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d04c      	beq.n	80036ee <HAL_GPIO_Init+0xfa>
 8003654:	4a92      	ldr	r2, [pc, #584]	; (80038a0 <HAL_GPIO_Init+0x2ac>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d863      	bhi.n	8003722 <HAL_GPIO_Init+0x12e>
 800365a:	4a92      	ldr	r2, [pc, #584]	; (80038a4 <HAL_GPIO_Init+0x2b0>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d046      	beq.n	80036ee <HAL_GPIO_Init+0xfa>
 8003660:	4a90      	ldr	r2, [pc, #576]	; (80038a4 <HAL_GPIO_Init+0x2b0>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d85d      	bhi.n	8003722 <HAL_GPIO_Init+0x12e>
 8003666:	2b12      	cmp	r3, #18
 8003668:	d82a      	bhi.n	80036c0 <HAL_GPIO_Init+0xcc>
 800366a:	2b12      	cmp	r3, #18
 800366c:	d859      	bhi.n	8003722 <HAL_GPIO_Init+0x12e>
 800366e:	a201      	add	r2, pc, #4	; (adr r2, 8003674 <HAL_GPIO_Init+0x80>)
 8003670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003674:	080036ef 	.word	0x080036ef
 8003678:	080036c9 	.word	0x080036c9
 800367c:	080036db 	.word	0x080036db
 8003680:	0800371d 	.word	0x0800371d
 8003684:	08003723 	.word	0x08003723
 8003688:	08003723 	.word	0x08003723
 800368c:	08003723 	.word	0x08003723
 8003690:	08003723 	.word	0x08003723
 8003694:	08003723 	.word	0x08003723
 8003698:	08003723 	.word	0x08003723
 800369c:	08003723 	.word	0x08003723
 80036a0:	08003723 	.word	0x08003723
 80036a4:	08003723 	.word	0x08003723
 80036a8:	08003723 	.word	0x08003723
 80036ac:	08003723 	.word	0x08003723
 80036b0:	08003723 	.word	0x08003723
 80036b4:	08003723 	.word	0x08003723
 80036b8:	080036d1 	.word	0x080036d1
 80036bc:	080036e5 	.word	0x080036e5
 80036c0:	4a79      	ldr	r2, [pc, #484]	; (80038a8 <HAL_GPIO_Init+0x2b4>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d013      	beq.n	80036ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80036c6:	e02c      	b.n	8003722 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	623b      	str	r3, [r7, #32]
          break;
 80036ce:	e029      	b.n	8003724 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	3304      	adds	r3, #4
 80036d6:	623b      	str	r3, [r7, #32]
          break;
 80036d8:	e024      	b.n	8003724 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	3308      	adds	r3, #8
 80036e0:	623b      	str	r3, [r7, #32]
          break;
 80036e2:	e01f      	b.n	8003724 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	330c      	adds	r3, #12
 80036ea:	623b      	str	r3, [r7, #32]
          break;
 80036ec:	e01a      	b.n	8003724 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d102      	bne.n	80036fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80036f6:	2304      	movs	r3, #4
 80036f8:	623b      	str	r3, [r7, #32]
          break;
 80036fa:	e013      	b.n	8003724 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d105      	bne.n	8003710 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003704:	2308      	movs	r3, #8
 8003706:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	69fa      	ldr	r2, [r7, #28]
 800370c:	611a      	str	r2, [r3, #16]
          break;
 800370e:	e009      	b.n	8003724 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003710:	2308      	movs	r3, #8
 8003712:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	69fa      	ldr	r2, [r7, #28]
 8003718:	615a      	str	r2, [r3, #20]
          break;
 800371a:	e003      	b.n	8003724 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800371c:	2300      	movs	r3, #0
 800371e:	623b      	str	r3, [r7, #32]
          break;
 8003720:	e000      	b.n	8003724 <HAL_GPIO_Init+0x130>
          break;
 8003722:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	2bff      	cmp	r3, #255	; 0xff
 8003728:	d801      	bhi.n	800372e <HAL_GPIO_Init+0x13a>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	e001      	b.n	8003732 <HAL_GPIO_Init+0x13e>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	3304      	adds	r3, #4
 8003732:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	2bff      	cmp	r3, #255	; 0xff
 8003738:	d802      	bhi.n	8003740 <HAL_GPIO_Init+0x14c>
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	e002      	b.n	8003746 <HAL_GPIO_Init+0x152>
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	3b08      	subs	r3, #8
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	210f      	movs	r1, #15
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	fa01 f303 	lsl.w	r3, r1, r3
 8003754:	43db      	mvns	r3, r3
 8003756:	401a      	ands	r2, r3
 8003758:	6a39      	ldr	r1, [r7, #32]
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	fa01 f303 	lsl.w	r3, r1, r3
 8003760:	431a      	orrs	r2, r3
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 80b1 	beq.w	80038d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003774:	4b4d      	ldr	r3, [pc, #308]	; (80038ac <HAL_GPIO_Init+0x2b8>)
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	4a4c      	ldr	r2, [pc, #304]	; (80038ac <HAL_GPIO_Init+0x2b8>)
 800377a:	f043 0301 	orr.w	r3, r3, #1
 800377e:	6193      	str	r3, [r2, #24]
 8003780:	4b4a      	ldr	r3, [pc, #296]	; (80038ac <HAL_GPIO_Init+0x2b8>)
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	60bb      	str	r3, [r7, #8]
 800378a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800378c:	4a48      	ldr	r2, [pc, #288]	; (80038b0 <HAL_GPIO_Init+0x2bc>)
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	089b      	lsrs	r3, r3, #2
 8003792:	3302      	adds	r3, #2
 8003794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003798:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379c:	f003 0303 	and.w	r3, r3, #3
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	220f      	movs	r2, #15
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	43db      	mvns	r3, r3
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	4013      	ands	r3, r2
 80037ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a40      	ldr	r2, [pc, #256]	; (80038b4 <HAL_GPIO_Init+0x2c0>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d013      	beq.n	80037e0 <HAL_GPIO_Init+0x1ec>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a3f      	ldr	r2, [pc, #252]	; (80038b8 <HAL_GPIO_Init+0x2c4>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d00d      	beq.n	80037dc <HAL_GPIO_Init+0x1e8>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a3e      	ldr	r2, [pc, #248]	; (80038bc <HAL_GPIO_Init+0x2c8>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d007      	beq.n	80037d8 <HAL_GPIO_Init+0x1e4>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a3d      	ldr	r2, [pc, #244]	; (80038c0 <HAL_GPIO_Init+0x2cc>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d101      	bne.n	80037d4 <HAL_GPIO_Init+0x1e0>
 80037d0:	2303      	movs	r3, #3
 80037d2:	e006      	b.n	80037e2 <HAL_GPIO_Init+0x1ee>
 80037d4:	2304      	movs	r3, #4
 80037d6:	e004      	b.n	80037e2 <HAL_GPIO_Init+0x1ee>
 80037d8:	2302      	movs	r3, #2
 80037da:	e002      	b.n	80037e2 <HAL_GPIO_Init+0x1ee>
 80037dc:	2301      	movs	r3, #1
 80037de:	e000      	b.n	80037e2 <HAL_GPIO_Init+0x1ee>
 80037e0:	2300      	movs	r3, #0
 80037e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037e4:	f002 0203 	and.w	r2, r2, #3
 80037e8:	0092      	lsls	r2, r2, #2
 80037ea:	4093      	lsls	r3, r2
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80037f2:	492f      	ldr	r1, [pc, #188]	; (80038b0 <HAL_GPIO_Init+0x2bc>)
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	089b      	lsrs	r3, r3, #2
 80037f8:	3302      	adds	r3, #2
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d006      	beq.n	800381a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800380c:	4b2d      	ldr	r3, [pc, #180]	; (80038c4 <HAL_GPIO_Init+0x2d0>)
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	492c      	ldr	r1, [pc, #176]	; (80038c4 <HAL_GPIO_Init+0x2d0>)
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	4313      	orrs	r3, r2
 8003816:	600b      	str	r3, [r1, #0]
 8003818:	e006      	b.n	8003828 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800381a:	4b2a      	ldr	r3, [pc, #168]	; (80038c4 <HAL_GPIO_Init+0x2d0>)
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	43db      	mvns	r3, r3
 8003822:	4928      	ldr	r1, [pc, #160]	; (80038c4 <HAL_GPIO_Init+0x2d0>)
 8003824:	4013      	ands	r3, r2
 8003826:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d006      	beq.n	8003842 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003834:	4b23      	ldr	r3, [pc, #140]	; (80038c4 <HAL_GPIO_Init+0x2d0>)
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	4922      	ldr	r1, [pc, #136]	; (80038c4 <HAL_GPIO_Init+0x2d0>)
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	4313      	orrs	r3, r2
 800383e:	604b      	str	r3, [r1, #4]
 8003840:	e006      	b.n	8003850 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003842:	4b20      	ldr	r3, [pc, #128]	; (80038c4 <HAL_GPIO_Init+0x2d0>)
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	43db      	mvns	r3, r3
 800384a:	491e      	ldr	r1, [pc, #120]	; (80038c4 <HAL_GPIO_Init+0x2d0>)
 800384c:	4013      	ands	r3, r2
 800384e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d006      	beq.n	800386a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800385c:	4b19      	ldr	r3, [pc, #100]	; (80038c4 <HAL_GPIO_Init+0x2d0>)
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	4918      	ldr	r1, [pc, #96]	; (80038c4 <HAL_GPIO_Init+0x2d0>)
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	4313      	orrs	r3, r2
 8003866:	608b      	str	r3, [r1, #8]
 8003868:	e006      	b.n	8003878 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800386a:	4b16      	ldr	r3, [pc, #88]	; (80038c4 <HAL_GPIO_Init+0x2d0>)
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	43db      	mvns	r3, r3
 8003872:	4914      	ldr	r1, [pc, #80]	; (80038c4 <HAL_GPIO_Init+0x2d0>)
 8003874:	4013      	ands	r3, r2
 8003876:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d021      	beq.n	80038c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003884:	4b0f      	ldr	r3, [pc, #60]	; (80038c4 <HAL_GPIO_Init+0x2d0>)
 8003886:	68da      	ldr	r2, [r3, #12]
 8003888:	490e      	ldr	r1, [pc, #56]	; (80038c4 <HAL_GPIO_Init+0x2d0>)
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	4313      	orrs	r3, r2
 800388e:	60cb      	str	r3, [r1, #12]
 8003890:	e021      	b.n	80038d6 <HAL_GPIO_Init+0x2e2>
 8003892:	bf00      	nop
 8003894:	10320000 	.word	0x10320000
 8003898:	10310000 	.word	0x10310000
 800389c:	10220000 	.word	0x10220000
 80038a0:	10210000 	.word	0x10210000
 80038a4:	10120000 	.word	0x10120000
 80038a8:	10110000 	.word	0x10110000
 80038ac:	40021000 	.word	0x40021000
 80038b0:	40010000 	.word	0x40010000
 80038b4:	40010800 	.word	0x40010800
 80038b8:	40010c00 	.word	0x40010c00
 80038bc:	40011000 	.word	0x40011000
 80038c0:	40011400 	.word	0x40011400
 80038c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80038c8:	4b0b      	ldr	r3, [pc, #44]	; (80038f8 <HAL_GPIO_Init+0x304>)
 80038ca:	68da      	ldr	r2, [r3, #12]
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	43db      	mvns	r3, r3
 80038d0:	4909      	ldr	r1, [pc, #36]	; (80038f8 <HAL_GPIO_Init+0x304>)
 80038d2:	4013      	ands	r3, r2
 80038d4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d8:	3301      	adds	r3, #1
 80038da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e2:	fa22 f303 	lsr.w	r3, r2, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f47f ae8e 	bne.w	8003608 <HAL_GPIO_Init+0x14>
  }
}
 80038ec:	bf00      	nop
 80038ee:	bf00      	nop
 80038f0:	372c      	adds	r7, #44	; 0x2c
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bc80      	pop	{r7}
 80038f6:	4770      	bx	lr
 80038f8:	40010400 	.word	0x40010400

080038fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	460b      	mov	r3, r1
 8003906:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	887b      	ldrh	r3, [r7, #2]
 800390e:	4013      	ands	r3, r2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d002      	beq.n	800391a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003914:	2301      	movs	r3, #1
 8003916:	73fb      	strb	r3, [r7, #15]
 8003918:	e001      	b.n	800391e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800391a:	2300      	movs	r3, #0
 800391c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800391e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr

0800392a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
 8003932:	460b      	mov	r3, r1
 8003934:	807b      	strh	r3, [r7, #2]
 8003936:	4613      	mov	r3, r2
 8003938:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800393a:	787b      	ldrb	r3, [r7, #1]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d003      	beq.n	8003948 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003940:	887a      	ldrh	r2, [r7, #2]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003946:	e003      	b.n	8003950 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003948:	887b      	ldrh	r3, [r7, #2]
 800394a:	041a      	lsls	r2, r3, #16
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	611a      	str	r2, [r3, #16]
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	bc80      	pop	{r7}
 8003958:	4770      	bx	lr

0800395a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800395a:	b480      	push	{r7}
 800395c:	b085      	sub	sp, #20
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
 8003962:	460b      	mov	r3, r1
 8003964:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800396c:	887a      	ldrh	r2, [r7, #2]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	4013      	ands	r3, r2
 8003972:	041a      	lsls	r2, r3, #16
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	43d9      	mvns	r1, r3
 8003978:	887b      	ldrh	r3, [r7, #2]
 800397a:	400b      	ands	r3, r1
 800397c:	431a      	orrs	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	611a      	str	r2, [r3, #16]
}
 8003982:	bf00      	nop
 8003984:	3714      	adds	r7, #20
 8003986:	46bd      	mov	sp, r7
 8003988:	bc80      	pop	{r7}
 800398a:	4770      	bx	lr

0800398c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	4603      	mov	r3, r0
 8003994:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003996:	4b08      	ldr	r3, [pc, #32]	; (80039b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003998:	695a      	ldr	r2, [r3, #20]
 800399a:	88fb      	ldrh	r3, [r7, #6]
 800399c:	4013      	ands	r3, r2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d006      	beq.n	80039b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80039a2:	4a05      	ldr	r2, [pc, #20]	; (80039b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039a4:	88fb      	ldrh	r3, [r7, #6]
 80039a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80039a8:	88fb      	ldrh	r3, [r7, #6]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fe fea6 	bl	80026fc <HAL_GPIO_EXTI_Callback>
  }
}
 80039b0:	bf00      	nop
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	40010400 	.word	0x40010400

080039bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e12b      	b.n	8003c26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d106      	bne.n	80039e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7fd fe54 	bl	8001690 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2224      	movs	r2, #36	; 0x24
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f022 0201 	bic.w	r2, r2, #1
 80039fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a20:	f000 ffea 	bl	80049f8 <HAL_RCC_GetPCLK1Freq>
 8003a24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	4a81      	ldr	r2, [pc, #516]	; (8003c30 <HAL_I2C_Init+0x274>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d807      	bhi.n	8003a40 <HAL_I2C_Init+0x84>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	4a80      	ldr	r2, [pc, #512]	; (8003c34 <HAL_I2C_Init+0x278>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	bf94      	ite	ls
 8003a38:	2301      	movls	r3, #1
 8003a3a:	2300      	movhi	r3, #0
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	e006      	b.n	8003a4e <HAL_I2C_Init+0x92>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4a7d      	ldr	r2, [pc, #500]	; (8003c38 <HAL_I2C_Init+0x27c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	bf94      	ite	ls
 8003a48:	2301      	movls	r3, #1
 8003a4a:	2300      	movhi	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e0e7      	b.n	8003c26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	4a78      	ldr	r2, [pc, #480]	; (8003c3c <HAL_I2C_Init+0x280>)
 8003a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5e:	0c9b      	lsrs	r3, r3, #18
 8003a60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68ba      	ldr	r2, [r7, #8]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	4a6a      	ldr	r2, [pc, #424]	; (8003c30 <HAL_I2C_Init+0x274>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d802      	bhi.n	8003a90 <HAL_I2C_Init+0xd4>
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	e009      	b.n	8003aa4 <HAL_I2C_Init+0xe8>
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a96:	fb02 f303 	mul.w	r3, r2, r3
 8003a9a:	4a69      	ldr	r2, [pc, #420]	; (8003c40 <HAL_I2C_Init+0x284>)
 8003a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa0:	099b      	lsrs	r3, r3, #6
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6812      	ldr	r2, [r2, #0]
 8003aa8:	430b      	orrs	r3, r1
 8003aaa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ab6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	495c      	ldr	r1, [pc, #368]	; (8003c30 <HAL_I2C_Init+0x274>)
 8003ac0:	428b      	cmp	r3, r1
 8003ac2:	d819      	bhi.n	8003af8 <HAL_I2C_Init+0x13c>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	1e59      	subs	r1, r3, #1
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ad2:	1c59      	adds	r1, r3, #1
 8003ad4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ad8:	400b      	ands	r3, r1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00a      	beq.n	8003af4 <HAL_I2C_Init+0x138>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	1e59      	subs	r1, r3, #1
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003aec:	3301      	adds	r3, #1
 8003aee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af2:	e051      	b.n	8003b98 <HAL_I2C_Init+0x1dc>
 8003af4:	2304      	movs	r3, #4
 8003af6:	e04f      	b.n	8003b98 <HAL_I2C_Init+0x1dc>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d111      	bne.n	8003b24 <HAL_I2C_Init+0x168>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	1e58      	subs	r0, r3, #1
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6859      	ldr	r1, [r3, #4]
 8003b08:	460b      	mov	r3, r1
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	440b      	add	r3, r1
 8003b0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b12:	3301      	adds	r3, #1
 8003b14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	bf0c      	ite	eq
 8003b1c:	2301      	moveq	r3, #1
 8003b1e:	2300      	movne	r3, #0
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	e012      	b.n	8003b4a <HAL_I2C_Init+0x18e>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	1e58      	subs	r0, r3, #1
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6859      	ldr	r1, [r3, #4]
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	440b      	add	r3, r1
 8003b32:	0099      	lsls	r1, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	bf0c      	ite	eq
 8003b44:	2301      	moveq	r3, #1
 8003b46:	2300      	movne	r3, #0
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <HAL_I2C_Init+0x196>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e022      	b.n	8003b98 <HAL_I2C_Init+0x1dc>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10e      	bne.n	8003b78 <HAL_I2C_Init+0x1bc>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	1e58      	subs	r0, r3, #1
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6859      	ldr	r1, [r3, #4]
 8003b62:	460b      	mov	r3, r1
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	440b      	add	r3, r1
 8003b68:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b76:	e00f      	b.n	8003b98 <HAL_I2C_Init+0x1dc>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	1e58      	subs	r0, r3, #1
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6859      	ldr	r1, [r3, #4]
 8003b80:	460b      	mov	r3, r1
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	440b      	add	r3, r1
 8003b86:	0099      	lsls	r1, r3, #2
 8003b88:	440b      	add	r3, r1
 8003b8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b8e:	3301      	adds	r3, #1
 8003b90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b98:	6879      	ldr	r1, [r7, #4]
 8003b9a:	6809      	ldr	r1, [r1, #0]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	69da      	ldr	r2, [r3, #28]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003bc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6911      	ldr	r1, [r2, #16]
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	68d2      	ldr	r2, [r2, #12]
 8003bd2:	4311      	orrs	r1, r2
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	6812      	ldr	r2, [r2, #0]
 8003bd8:	430b      	orrs	r3, r1
 8003bda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	695a      	ldr	r2, [r3, #20]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0201 	orr.w	r2, r2, #1
 8003c06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2220      	movs	r2, #32
 8003c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	000186a0 	.word	0x000186a0
 8003c34:	001e847f 	.word	0x001e847f
 8003c38:	003d08ff 	.word	0x003d08ff
 8003c3c:	431bde83 	.word	0x431bde83
 8003c40:	10624dd3 	.word	0x10624dd3

08003c44 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b088      	sub	sp, #32
 8003c48:	af02      	add	r7, sp, #8
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	607a      	str	r2, [r7, #4]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	460b      	mov	r3, r1
 8003c52:	817b      	strh	r3, [r7, #10]
 8003c54:	4613      	mov	r3, r2
 8003c56:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c58:	f7ff f990 	bl	8002f7c <HAL_GetTick>
 8003c5c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b20      	cmp	r3, #32
 8003c68:	f040 80e0 	bne.w	8003e2c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	2319      	movs	r3, #25
 8003c72:	2201      	movs	r2, #1
 8003c74:	4970      	ldr	r1, [pc, #448]	; (8003e38 <HAL_I2C_Master_Transmit+0x1f4>)
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f000 f964 	bl	8003f44 <I2C_WaitOnFlagUntilTimeout>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003c82:	2302      	movs	r3, #2
 8003c84:	e0d3      	b.n	8003e2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d101      	bne.n	8003c94 <HAL_I2C_Master_Transmit+0x50>
 8003c90:	2302      	movs	r3, #2
 8003c92:	e0cc      	b.n	8003e2e <HAL_I2C_Master_Transmit+0x1ea>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d007      	beq.n	8003cba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f042 0201 	orr.w	r2, r2, #1
 8003cb8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cc8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2221      	movs	r2, #33	; 0x21
 8003cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2210      	movs	r2, #16
 8003cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	893a      	ldrh	r2, [r7, #8]
 8003cea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	4a50      	ldr	r2, [pc, #320]	; (8003e3c <HAL_I2C_Master_Transmit+0x1f8>)
 8003cfa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003cfc:	8979      	ldrh	r1, [r7, #10]
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	6a3a      	ldr	r2, [r7, #32]
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 f89c 	bl	8003e40 <I2C_MasterRequestWrite>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e08d      	b.n	8003e2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d12:	2300      	movs	r3, #0
 8003d14:	613b      	str	r3, [r7, #16]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	613b      	str	r3, [r7, #16]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	613b      	str	r3, [r7, #16]
 8003d26:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003d28:	e066      	b.n	8003df8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	6a39      	ldr	r1, [r7, #32]
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 f9de 	bl	80040f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00d      	beq.n	8003d56 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d107      	bne.n	8003d52 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d50:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e06b      	b.n	8003e2e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	781a      	ldrb	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d66:	1c5a      	adds	r2, r3, #1
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	3b01      	subs	r3, #1
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	f003 0304 	and.w	r3, r3, #4
 8003d90:	2b04      	cmp	r3, #4
 8003d92:	d11b      	bne.n	8003dcc <HAL_I2C_Master_Transmit+0x188>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d017      	beq.n	8003dcc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	781a      	ldrb	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	1c5a      	adds	r2, r3, #1
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	3b01      	subs	r3, #1
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	6a39      	ldr	r1, [r7, #32]
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f000 f9ce 	bl	8004172 <I2C_WaitOnBTFFlagUntilTimeout>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00d      	beq.n	8003df8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de0:	2b04      	cmp	r3, #4
 8003de2:	d107      	bne.n	8003df4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003df2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e01a      	b.n	8003e2e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d194      	bne.n	8003d2a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2220      	movs	r2, #32
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	e000      	b.n	8003e2e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003e2c:	2302      	movs	r3, #2
  }
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3718      	adds	r7, #24
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	00100002 	.word	0x00100002
 8003e3c:	ffff0000 	.word	0xffff0000

08003e40 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b088      	sub	sp, #32
 8003e44:	af02      	add	r7, sp, #8
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	607a      	str	r2, [r7, #4]
 8003e4a:	603b      	str	r3, [r7, #0]
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e54:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	2b08      	cmp	r3, #8
 8003e5a:	d006      	beq.n	8003e6a <I2C_MasterRequestWrite+0x2a>
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d003      	beq.n	8003e6a <I2C_MasterRequestWrite+0x2a>
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e68:	d108      	bne.n	8003e7c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	e00b      	b.n	8003e94 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e80:	2b12      	cmp	r3, #18
 8003e82:	d107      	bne.n	8003e94 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f000 f84f 	bl	8003f44 <I2C_WaitOnFlagUntilTimeout>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00d      	beq.n	8003ec8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eba:	d103      	bne.n	8003ec4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ec2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e035      	b.n	8003f34 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ed0:	d108      	bne.n	8003ee4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ed2:	897b      	ldrh	r3, [r7, #10]
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ee0:	611a      	str	r2, [r3, #16]
 8003ee2:	e01b      	b.n	8003f1c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ee4:	897b      	ldrh	r3, [r7, #10]
 8003ee6:	11db      	asrs	r3, r3, #7
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	f003 0306 	and.w	r3, r3, #6
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	f063 030f 	orn	r3, r3, #15
 8003ef4:	b2da      	uxtb	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	490e      	ldr	r1, [pc, #56]	; (8003f3c <I2C_MasterRequestWrite+0xfc>)
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 f875 	bl	8003ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e010      	b.n	8003f34 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f12:	897b      	ldrh	r3, [r7, #10]
 8003f14:	b2da      	uxtb	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	4907      	ldr	r1, [pc, #28]	; (8003f40 <I2C_MasterRequestWrite+0x100>)
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f000 f865 	bl	8003ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d001      	beq.n	8003f32 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e000      	b.n	8003f34 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3718      	adds	r7, #24
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	00010008 	.word	0x00010008
 8003f40:	00010002 	.word	0x00010002

08003f44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	603b      	str	r3, [r7, #0]
 8003f50:	4613      	mov	r3, r2
 8003f52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f54:	e025      	b.n	8003fa2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f5c:	d021      	beq.n	8003fa2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f5e:	f7ff f80d 	bl	8002f7c <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d302      	bcc.n	8003f74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d116      	bne.n	8003fa2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	f043 0220 	orr.w	r2, r3, #32
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e023      	b.n	8003fea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	0c1b      	lsrs	r3, r3, #16
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d10d      	bne.n	8003fc8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	43da      	mvns	r2, r3
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	bf0c      	ite	eq
 8003fbe:	2301      	moveq	r3, #1
 8003fc0:	2300      	movne	r3, #0
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	e00c      	b.n	8003fe2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	43da      	mvns	r2, r3
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	bf0c      	ite	eq
 8003fda:	2301      	moveq	r3, #1
 8003fdc:	2300      	movne	r3, #0
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	79fb      	ldrb	r3, [r7, #7]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d0b6      	beq.n	8003f56 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b084      	sub	sp, #16
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	60f8      	str	r0, [r7, #12]
 8003ffa:	60b9      	str	r1, [r7, #8]
 8003ffc:	607a      	str	r2, [r7, #4]
 8003ffe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004000:	e051      	b.n	80040a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800400c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004010:	d123      	bne.n	800405a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004020:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800402a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2220      	movs	r2, #32
 8004036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	f043 0204 	orr.w	r2, r3, #4
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e046      	b.n	80040e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004060:	d021      	beq.n	80040a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004062:	f7fe ff8b 	bl	8002f7c <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	429a      	cmp	r2, r3
 8004070:	d302      	bcc.n	8004078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d116      	bne.n	80040a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2220      	movs	r2, #32
 8004082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	f043 0220 	orr.w	r2, r3, #32
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e020      	b.n	80040e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	0c1b      	lsrs	r3, r3, #16
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d10c      	bne.n	80040ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	43da      	mvns	r2, r3
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	4013      	ands	r3, r2
 80040bc:	b29b      	uxth	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	bf14      	ite	ne
 80040c2:	2301      	movne	r3, #1
 80040c4:	2300      	moveq	r3, #0
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	e00b      	b.n	80040e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	43da      	mvns	r2, r3
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	4013      	ands	r3, r2
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	bf14      	ite	ne
 80040dc:	2301      	movne	r3, #1
 80040de:	2300      	moveq	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d18d      	bne.n	8004002 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040fc:	e02d      	b.n	800415a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f000 f878 	bl	80041f4 <I2C_IsAcknowledgeFailed>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e02d      	b.n	800416a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004114:	d021      	beq.n	800415a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004116:	f7fe ff31 	bl	8002f7c <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	429a      	cmp	r2, r3
 8004124:	d302      	bcc.n	800412c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d116      	bne.n	800415a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2220      	movs	r2, #32
 8004136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	f043 0220 	orr.w	r2, r3, #32
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e007      	b.n	800416a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004164:	2b80      	cmp	r3, #128	; 0x80
 8004166:	d1ca      	bne.n	80040fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b084      	sub	sp, #16
 8004176:	af00      	add	r7, sp, #0
 8004178:	60f8      	str	r0, [r7, #12]
 800417a:	60b9      	str	r1, [r7, #8]
 800417c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800417e:	e02d      	b.n	80041dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 f837 	bl	80041f4 <I2C_IsAcknowledgeFailed>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e02d      	b.n	80041ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004196:	d021      	beq.n	80041dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004198:	f7fe fef0 	bl	8002f7c <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d302      	bcc.n	80041ae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d116      	bne.n	80041dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2220      	movs	r2, #32
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c8:	f043 0220 	orr.w	r2, r3, #32
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e007      	b.n	80041ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	f003 0304 	and.w	r3, r3, #4
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d1ca      	bne.n	8004180 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800420a:	d11b      	bne.n	8004244 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004214:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2220      	movs	r2, #32
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004230:	f043 0204 	orr.w	r2, r3, #4
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e000      	b.n	8004246 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	bc80      	pop	{r7}
 800424e:	4770      	bx	lr

08004250 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e272      	b.n	8004748 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 8087 	beq.w	800437e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004270:	4b92      	ldr	r3, [pc, #584]	; (80044bc <HAL_RCC_OscConfig+0x26c>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f003 030c 	and.w	r3, r3, #12
 8004278:	2b04      	cmp	r3, #4
 800427a:	d00c      	beq.n	8004296 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800427c:	4b8f      	ldr	r3, [pc, #572]	; (80044bc <HAL_RCC_OscConfig+0x26c>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f003 030c 	and.w	r3, r3, #12
 8004284:	2b08      	cmp	r3, #8
 8004286:	d112      	bne.n	80042ae <HAL_RCC_OscConfig+0x5e>
 8004288:	4b8c      	ldr	r3, [pc, #560]	; (80044bc <HAL_RCC_OscConfig+0x26c>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004294:	d10b      	bne.n	80042ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004296:	4b89      	ldr	r3, [pc, #548]	; (80044bc <HAL_RCC_OscConfig+0x26c>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d06c      	beq.n	800437c <HAL_RCC_OscConfig+0x12c>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d168      	bne.n	800437c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e24c      	b.n	8004748 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042b6:	d106      	bne.n	80042c6 <HAL_RCC_OscConfig+0x76>
 80042b8:	4b80      	ldr	r3, [pc, #512]	; (80044bc <HAL_RCC_OscConfig+0x26c>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a7f      	ldr	r2, [pc, #508]	; (80044bc <HAL_RCC_OscConfig+0x26c>)
 80042be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c2:	6013      	str	r3, [r2, #0]
 80042c4:	e02e      	b.n	8004324 <HAL_RCC_OscConfig+0xd4>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10c      	bne.n	80042e8 <HAL_RCC_OscConfig+0x98>
 80042ce:	4b7b      	ldr	r3, [pc, #492]	; (80044bc <HAL_RCC_OscConfig+0x26c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a7a      	ldr	r2, [pc, #488]	; (80044bc <HAL_RCC_OscConfig+0x26c>)
 80042d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042d8:	6013      	str	r3, [r2, #0]
 80042da:	4b78      	ldr	r3, [pc, #480]	; (80044bc <HAL_RCC_OscConfig+0x26c>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a77      	ldr	r2, [pc, #476]	; (80044bc <HAL_RCC_OscConfig+0x26c>)
 80042e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	e01d      	b.n	8004324 <HAL_RCC_OscConfig+0xd4>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042f0:	d10c      	bne.n	800430c <HAL_RCC_OscConfig+0xbc>
 80042f2:	4b72      	ldr	r3, [pc, #456]	; (80044bc <HAL_RCC_OscConfig+0x26c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a71      	ldr	r2, [pc, #452]	; (80044bc <HAL_RCC_OscConfig+0x26c>)
 80042f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042fc:	6013      	str	r3, [r2, #0]
 80042fe:	4b6f      	ldr	r3, [pc, #444]	; (80044bc <HAL_RCC_OscConfig+0x26c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a6e      	ldr	r2, [pc, #440]	; (80044bc <HAL_RCC_OscConfig+0x26c>)
 8004304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004308:	6013      	str	r3, [r2, #0]
 800430a:	e00b      	b.n	8004324 <HAL_RCC_OscConfig+0xd4>
 800430c:	4b6b      	ldr	r3, [pc, #428]	; (80044bc <HAL_RCC_OscConfig+0x26c>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a6a      	ldr	r2, [pc, #424]	; (80044bc <HAL_RCC_OscConfig+0x26c>)
 8004312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004316:	6013      	str	r3, [r2, #0]
 8004318:	4b68      	ldr	r3, [pc, #416]	; (80044bc <HAL_RCC_OscConfig+0x26c>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a67      	ldr	r2, [pc, #412]	; (80044bc <HAL_RCC_OscConfig+0x26c>)
 800431e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004322:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d013      	beq.n	8004354 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800432c:	f7fe fe26 	bl	8002f7c <HAL_GetTick>
 8004330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004332:	e008      	b.n	8004346 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004334:	f7fe fe22 	bl	8002f7c <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b64      	cmp	r3, #100	; 0x64
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e200      	b.n	8004748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004346:	4b5d      	ldr	r3, [pc, #372]	; (80044bc <HAL_RCC_OscConfig+0x26c>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d0f0      	beq.n	8004334 <HAL_RCC_OscConfig+0xe4>
 8004352:	e014      	b.n	800437e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004354:	f7fe fe12 	bl	8002f7c <HAL_GetTick>
 8004358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800435c:	f7fe fe0e 	bl	8002f7c <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b64      	cmp	r3, #100	; 0x64
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e1ec      	b.n	8004748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800436e:	4b53      	ldr	r3, [pc, #332]	; (80044bc <HAL_RCC_OscConfig+0x26c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1f0      	bne.n	800435c <HAL_RCC_OscConfig+0x10c>
 800437a:	e000      	b.n	800437e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800437c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d063      	beq.n	8004452 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800438a:	4b4c      	ldr	r3, [pc, #304]	; (80044bc <HAL_RCC_OscConfig+0x26c>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f003 030c 	and.w	r3, r3, #12
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00b      	beq.n	80043ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004396:	4b49      	ldr	r3, [pc, #292]	; (80044bc <HAL_RCC_OscConfig+0x26c>)
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f003 030c 	and.w	r3, r3, #12
 800439e:	2b08      	cmp	r3, #8
 80043a0:	d11c      	bne.n	80043dc <HAL_RCC_OscConfig+0x18c>
 80043a2:	4b46      	ldr	r3, [pc, #280]	; (80044bc <HAL_RCC_OscConfig+0x26c>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d116      	bne.n	80043dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ae:	4b43      	ldr	r3, [pc, #268]	; (80044bc <HAL_RCC_OscConfig+0x26c>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d005      	beq.n	80043c6 <HAL_RCC_OscConfig+0x176>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d001      	beq.n	80043c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e1c0      	b.n	8004748 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043c6:	4b3d      	ldr	r3, [pc, #244]	; (80044bc <HAL_RCC_OscConfig+0x26c>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	4939      	ldr	r1, [pc, #228]	; (80044bc <HAL_RCC_OscConfig+0x26c>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043da:	e03a      	b.n	8004452 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d020      	beq.n	8004426 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043e4:	4b36      	ldr	r3, [pc, #216]	; (80044c0 <HAL_RCC_OscConfig+0x270>)
 80043e6:	2201      	movs	r2, #1
 80043e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ea:	f7fe fdc7 	bl	8002f7c <HAL_GetTick>
 80043ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043f0:	e008      	b.n	8004404 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043f2:	f7fe fdc3 	bl	8002f7c <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d901      	bls.n	8004404 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e1a1      	b.n	8004748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004404:	4b2d      	ldr	r3, [pc, #180]	; (80044bc <HAL_RCC_OscConfig+0x26c>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d0f0      	beq.n	80043f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004410:	4b2a      	ldr	r3, [pc, #168]	; (80044bc <HAL_RCC_OscConfig+0x26c>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	4927      	ldr	r1, [pc, #156]	; (80044bc <HAL_RCC_OscConfig+0x26c>)
 8004420:	4313      	orrs	r3, r2
 8004422:	600b      	str	r3, [r1, #0]
 8004424:	e015      	b.n	8004452 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004426:	4b26      	ldr	r3, [pc, #152]	; (80044c0 <HAL_RCC_OscConfig+0x270>)
 8004428:	2200      	movs	r2, #0
 800442a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800442c:	f7fe fda6 	bl	8002f7c <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004434:	f7fe fda2 	bl	8002f7c <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e180      	b.n	8004748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004446:	4b1d      	ldr	r3, [pc, #116]	; (80044bc <HAL_RCC_OscConfig+0x26c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1f0      	bne.n	8004434 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0308 	and.w	r3, r3, #8
 800445a:	2b00      	cmp	r3, #0
 800445c:	d03a      	beq.n	80044d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d019      	beq.n	800449a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004466:	4b17      	ldr	r3, [pc, #92]	; (80044c4 <HAL_RCC_OscConfig+0x274>)
 8004468:	2201      	movs	r2, #1
 800446a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800446c:	f7fe fd86 	bl	8002f7c <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004474:	f7fe fd82 	bl	8002f7c <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e160      	b.n	8004748 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004486:	4b0d      	ldr	r3, [pc, #52]	; (80044bc <HAL_RCC_OscConfig+0x26c>)
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0f0      	beq.n	8004474 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004492:	2001      	movs	r0, #1
 8004494:	f000 fac4 	bl	8004a20 <RCC_Delay>
 8004498:	e01c      	b.n	80044d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800449a:	4b0a      	ldr	r3, [pc, #40]	; (80044c4 <HAL_RCC_OscConfig+0x274>)
 800449c:	2200      	movs	r2, #0
 800449e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044a0:	f7fe fd6c 	bl	8002f7c <HAL_GetTick>
 80044a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044a6:	e00f      	b.n	80044c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044a8:	f7fe fd68 	bl	8002f7c <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d908      	bls.n	80044c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e146      	b.n	8004748 <HAL_RCC_OscConfig+0x4f8>
 80044ba:	bf00      	nop
 80044bc:	40021000 	.word	0x40021000
 80044c0:	42420000 	.word	0x42420000
 80044c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044c8:	4b92      	ldr	r3, [pc, #584]	; (8004714 <HAL_RCC_OscConfig+0x4c4>)
 80044ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1e9      	bne.n	80044a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0304 	and.w	r3, r3, #4
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f000 80a6 	beq.w	800462e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044e2:	2300      	movs	r3, #0
 80044e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044e6:	4b8b      	ldr	r3, [pc, #556]	; (8004714 <HAL_RCC_OscConfig+0x4c4>)
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10d      	bne.n	800450e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044f2:	4b88      	ldr	r3, [pc, #544]	; (8004714 <HAL_RCC_OscConfig+0x4c4>)
 80044f4:	69db      	ldr	r3, [r3, #28]
 80044f6:	4a87      	ldr	r2, [pc, #540]	; (8004714 <HAL_RCC_OscConfig+0x4c4>)
 80044f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044fc:	61d3      	str	r3, [r2, #28]
 80044fe:	4b85      	ldr	r3, [pc, #532]	; (8004714 <HAL_RCC_OscConfig+0x4c4>)
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004506:	60bb      	str	r3, [r7, #8]
 8004508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800450a:	2301      	movs	r3, #1
 800450c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800450e:	4b82      	ldr	r3, [pc, #520]	; (8004718 <HAL_RCC_OscConfig+0x4c8>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004516:	2b00      	cmp	r3, #0
 8004518:	d118      	bne.n	800454c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800451a:	4b7f      	ldr	r3, [pc, #508]	; (8004718 <HAL_RCC_OscConfig+0x4c8>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a7e      	ldr	r2, [pc, #504]	; (8004718 <HAL_RCC_OscConfig+0x4c8>)
 8004520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004524:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004526:	f7fe fd29 	bl	8002f7c <HAL_GetTick>
 800452a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800452c:	e008      	b.n	8004540 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800452e:	f7fe fd25 	bl	8002f7c <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b64      	cmp	r3, #100	; 0x64
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e103      	b.n	8004748 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004540:	4b75      	ldr	r3, [pc, #468]	; (8004718 <HAL_RCC_OscConfig+0x4c8>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0f0      	beq.n	800452e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d106      	bne.n	8004562 <HAL_RCC_OscConfig+0x312>
 8004554:	4b6f      	ldr	r3, [pc, #444]	; (8004714 <HAL_RCC_OscConfig+0x4c4>)
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	4a6e      	ldr	r2, [pc, #440]	; (8004714 <HAL_RCC_OscConfig+0x4c4>)
 800455a:	f043 0301 	orr.w	r3, r3, #1
 800455e:	6213      	str	r3, [r2, #32]
 8004560:	e02d      	b.n	80045be <HAL_RCC_OscConfig+0x36e>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10c      	bne.n	8004584 <HAL_RCC_OscConfig+0x334>
 800456a:	4b6a      	ldr	r3, [pc, #424]	; (8004714 <HAL_RCC_OscConfig+0x4c4>)
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	4a69      	ldr	r2, [pc, #420]	; (8004714 <HAL_RCC_OscConfig+0x4c4>)
 8004570:	f023 0301 	bic.w	r3, r3, #1
 8004574:	6213      	str	r3, [r2, #32]
 8004576:	4b67      	ldr	r3, [pc, #412]	; (8004714 <HAL_RCC_OscConfig+0x4c4>)
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	4a66      	ldr	r2, [pc, #408]	; (8004714 <HAL_RCC_OscConfig+0x4c4>)
 800457c:	f023 0304 	bic.w	r3, r3, #4
 8004580:	6213      	str	r3, [r2, #32]
 8004582:	e01c      	b.n	80045be <HAL_RCC_OscConfig+0x36e>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	2b05      	cmp	r3, #5
 800458a:	d10c      	bne.n	80045a6 <HAL_RCC_OscConfig+0x356>
 800458c:	4b61      	ldr	r3, [pc, #388]	; (8004714 <HAL_RCC_OscConfig+0x4c4>)
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	4a60      	ldr	r2, [pc, #384]	; (8004714 <HAL_RCC_OscConfig+0x4c4>)
 8004592:	f043 0304 	orr.w	r3, r3, #4
 8004596:	6213      	str	r3, [r2, #32]
 8004598:	4b5e      	ldr	r3, [pc, #376]	; (8004714 <HAL_RCC_OscConfig+0x4c4>)
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	4a5d      	ldr	r2, [pc, #372]	; (8004714 <HAL_RCC_OscConfig+0x4c4>)
 800459e:	f043 0301 	orr.w	r3, r3, #1
 80045a2:	6213      	str	r3, [r2, #32]
 80045a4:	e00b      	b.n	80045be <HAL_RCC_OscConfig+0x36e>
 80045a6:	4b5b      	ldr	r3, [pc, #364]	; (8004714 <HAL_RCC_OscConfig+0x4c4>)
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	4a5a      	ldr	r2, [pc, #360]	; (8004714 <HAL_RCC_OscConfig+0x4c4>)
 80045ac:	f023 0301 	bic.w	r3, r3, #1
 80045b0:	6213      	str	r3, [r2, #32]
 80045b2:	4b58      	ldr	r3, [pc, #352]	; (8004714 <HAL_RCC_OscConfig+0x4c4>)
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	4a57      	ldr	r2, [pc, #348]	; (8004714 <HAL_RCC_OscConfig+0x4c4>)
 80045b8:	f023 0304 	bic.w	r3, r3, #4
 80045bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d015      	beq.n	80045f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045c6:	f7fe fcd9 	bl	8002f7c <HAL_GetTick>
 80045ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045cc:	e00a      	b.n	80045e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ce:	f7fe fcd5 	bl	8002f7c <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045dc:	4293      	cmp	r3, r2
 80045de:	d901      	bls.n	80045e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e0b1      	b.n	8004748 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e4:	4b4b      	ldr	r3, [pc, #300]	; (8004714 <HAL_RCC_OscConfig+0x4c4>)
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d0ee      	beq.n	80045ce <HAL_RCC_OscConfig+0x37e>
 80045f0:	e014      	b.n	800461c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045f2:	f7fe fcc3 	bl	8002f7c <HAL_GetTick>
 80045f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045f8:	e00a      	b.n	8004610 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045fa:	f7fe fcbf 	bl	8002f7c <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	f241 3288 	movw	r2, #5000	; 0x1388
 8004608:	4293      	cmp	r3, r2
 800460a:	d901      	bls.n	8004610 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e09b      	b.n	8004748 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004610:	4b40      	ldr	r3, [pc, #256]	; (8004714 <HAL_RCC_OscConfig+0x4c4>)
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1ee      	bne.n	80045fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800461c:	7dfb      	ldrb	r3, [r7, #23]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d105      	bne.n	800462e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004622:	4b3c      	ldr	r3, [pc, #240]	; (8004714 <HAL_RCC_OscConfig+0x4c4>)
 8004624:	69db      	ldr	r3, [r3, #28]
 8004626:	4a3b      	ldr	r2, [pc, #236]	; (8004714 <HAL_RCC_OscConfig+0x4c4>)
 8004628:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800462c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 8087 	beq.w	8004746 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004638:	4b36      	ldr	r3, [pc, #216]	; (8004714 <HAL_RCC_OscConfig+0x4c4>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f003 030c 	and.w	r3, r3, #12
 8004640:	2b08      	cmp	r3, #8
 8004642:	d061      	beq.n	8004708 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	69db      	ldr	r3, [r3, #28]
 8004648:	2b02      	cmp	r3, #2
 800464a:	d146      	bne.n	80046da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800464c:	4b33      	ldr	r3, [pc, #204]	; (800471c <HAL_RCC_OscConfig+0x4cc>)
 800464e:	2200      	movs	r2, #0
 8004650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004652:	f7fe fc93 	bl	8002f7c <HAL_GetTick>
 8004656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004658:	e008      	b.n	800466c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800465a:	f7fe fc8f 	bl	8002f7c <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d901      	bls.n	800466c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e06d      	b.n	8004748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800466c:	4b29      	ldr	r3, [pc, #164]	; (8004714 <HAL_RCC_OscConfig+0x4c4>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1f0      	bne.n	800465a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004680:	d108      	bne.n	8004694 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004682:	4b24      	ldr	r3, [pc, #144]	; (8004714 <HAL_RCC_OscConfig+0x4c4>)
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	4921      	ldr	r1, [pc, #132]	; (8004714 <HAL_RCC_OscConfig+0x4c4>)
 8004690:	4313      	orrs	r3, r2
 8004692:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004694:	4b1f      	ldr	r3, [pc, #124]	; (8004714 <HAL_RCC_OscConfig+0x4c4>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a19      	ldr	r1, [r3, #32]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a4:	430b      	orrs	r3, r1
 80046a6:	491b      	ldr	r1, [pc, #108]	; (8004714 <HAL_RCC_OscConfig+0x4c4>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046ac:	4b1b      	ldr	r3, [pc, #108]	; (800471c <HAL_RCC_OscConfig+0x4cc>)
 80046ae:	2201      	movs	r2, #1
 80046b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b2:	f7fe fc63 	bl	8002f7c <HAL_GetTick>
 80046b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046b8:	e008      	b.n	80046cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ba:	f7fe fc5f 	bl	8002f7c <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d901      	bls.n	80046cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e03d      	b.n	8004748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046cc:	4b11      	ldr	r3, [pc, #68]	; (8004714 <HAL_RCC_OscConfig+0x4c4>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d0f0      	beq.n	80046ba <HAL_RCC_OscConfig+0x46a>
 80046d8:	e035      	b.n	8004746 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046da:	4b10      	ldr	r3, [pc, #64]	; (800471c <HAL_RCC_OscConfig+0x4cc>)
 80046dc:	2200      	movs	r2, #0
 80046de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e0:	f7fe fc4c 	bl	8002f7c <HAL_GetTick>
 80046e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046e8:	f7fe fc48 	bl	8002f7c <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e026      	b.n	8004748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046fa:	4b06      	ldr	r3, [pc, #24]	; (8004714 <HAL_RCC_OscConfig+0x4c4>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1f0      	bne.n	80046e8 <HAL_RCC_OscConfig+0x498>
 8004706:	e01e      	b.n	8004746 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	69db      	ldr	r3, [r3, #28]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d107      	bne.n	8004720 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e019      	b.n	8004748 <HAL_RCC_OscConfig+0x4f8>
 8004714:	40021000 	.word	0x40021000
 8004718:	40007000 	.word	0x40007000
 800471c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004720:	4b0b      	ldr	r3, [pc, #44]	; (8004750 <HAL_RCC_OscConfig+0x500>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a1b      	ldr	r3, [r3, #32]
 8004730:	429a      	cmp	r2, r3
 8004732:	d106      	bne.n	8004742 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800473e:	429a      	cmp	r2, r3
 8004740:	d001      	beq.n	8004746 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e000      	b.n	8004748 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3718      	adds	r7, #24
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	40021000 	.word	0x40021000

08004754 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e0d0      	b.n	800490a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004768:	4b6a      	ldr	r3, [pc, #424]	; (8004914 <HAL_RCC_ClockConfig+0x1c0>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0307 	and.w	r3, r3, #7
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	429a      	cmp	r2, r3
 8004774:	d910      	bls.n	8004798 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004776:	4b67      	ldr	r3, [pc, #412]	; (8004914 <HAL_RCC_ClockConfig+0x1c0>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f023 0207 	bic.w	r2, r3, #7
 800477e:	4965      	ldr	r1, [pc, #404]	; (8004914 <HAL_RCC_ClockConfig+0x1c0>)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	4313      	orrs	r3, r2
 8004784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004786:	4b63      	ldr	r3, [pc, #396]	; (8004914 <HAL_RCC_ClockConfig+0x1c0>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0307 	and.w	r3, r3, #7
 800478e:	683a      	ldr	r2, [r7, #0]
 8004790:	429a      	cmp	r2, r3
 8004792:	d001      	beq.n	8004798 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e0b8      	b.n	800490a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d020      	beq.n	80047e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0304 	and.w	r3, r3, #4
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d005      	beq.n	80047bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047b0:	4b59      	ldr	r3, [pc, #356]	; (8004918 <HAL_RCC_ClockConfig+0x1c4>)
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	4a58      	ldr	r2, [pc, #352]	; (8004918 <HAL_RCC_ClockConfig+0x1c4>)
 80047b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80047ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0308 	and.w	r3, r3, #8
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d005      	beq.n	80047d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047c8:	4b53      	ldr	r3, [pc, #332]	; (8004918 <HAL_RCC_ClockConfig+0x1c4>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	4a52      	ldr	r2, [pc, #328]	; (8004918 <HAL_RCC_ClockConfig+0x1c4>)
 80047ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80047d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047d4:	4b50      	ldr	r3, [pc, #320]	; (8004918 <HAL_RCC_ClockConfig+0x1c4>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	494d      	ldr	r1, [pc, #308]	; (8004918 <HAL_RCC_ClockConfig+0x1c4>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d040      	beq.n	8004874 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d107      	bne.n	800480a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047fa:	4b47      	ldr	r3, [pc, #284]	; (8004918 <HAL_RCC_ClockConfig+0x1c4>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d115      	bne.n	8004832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e07f      	b.n	800490a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	2b02      	cmp	r3, #2
 8004810:	d107      	bne.n	8004822 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004812:	4b41      	ldr	r3, [pc, #260]	; (8004918 <HAL_RCC_ClockConfig+0x1c4>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d109      	bne.n	8004832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e073      	b.n	800490a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004822:	4b3d      	ldr	r3, [pc, #244]	; (8004918 <HAL_RCC_ClockConfig+0x1c4>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e06b      	b.n	800490a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004832:	4b39      	ldr	r3, [pc, #228]	; (8004918 <HAL_RCC_ClockConfig+0x1c4>)
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f023 0203 	bic.w	r2, r3, #3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	4936      	ldr	r1, [pc, #216]	; (8004918 <HAL_RCC_ClockConfig+0x1c4>)
 8004840:	4313      	orrs	r3, r2
 8004842:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004844:	f7fe fb9a 	bl	8002f7c <HAL_GetTick>
 8004848:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800484a:	e00a      	b.n	8004862 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800484c:	f7fe fb96 	bl	8002f7c <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	f241 3288 	movw	r2, #5000	; 0x1388
 800485a:	4293      	cmp	r3, r2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e053      	b.n	800490a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004862:	4b2d      	ldr	r3, [pc, #180]	; (8004918 <HAL_RCC_ClockConfig+0x1c4>)
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f003 020c 	and.w	r2, r3, #12
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	429a      	cmp	r2, r3
 8004872:	d1eb      	bne.n	800484c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004874:	4b27      	ldr	r3, [pc, #156]	; (8004914 <HAL_RCC_ClockConfig+0x1c0>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0307 	and.w	r3, r3, #7
 800487c:	683a      	ldr	r2, [r7, #0]
 800487e:	429a      	cmp	r2, r3
 8004880:	d210      	bcs.n	80048a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004882:	4b24      	ldr	r3, [pc, #144]	; (8004914 <HAL_RCC_ClockConfig+0x1c0>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f023 0207 	bic.w	r2, r3, #7
 800488a:	4922      	ldr	r1, [pc, #136]	; (8004914 <HAL_RCC_ClockConfig+0x1c0>)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	4313      	orrs	r3, r2
 8004890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004892:	4b20      	ldr	r3, [pc, #128]	; (8004914 <HAL_RCC_ClockConfig+0x1c0>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0307 	and.w	r3, r3, #7
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	429a      	cmp	r2, r3
 800489e:	d001      	beq.n	80048a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e032      	b.n	800490a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d008      	beq.n	80048c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048b0:	4b19      	ldr	r3, [pc, #100]	; (8004918 <HAL_RCC_ClockConfig+0x1c4>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	4916      	ldr	r1, [pc, #88]	; (8004918 <HAL_RCC_ClockConfig+0x1c4>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0308 	and.w	r3, r3, #8
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d009      	beq.n	80048e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048ce:	4b12      	ldr	r3, [pc, #72]	; (8004918 <HAL_RCC_ClockConfig+0x1c4>)
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	490e      	ldr	r1, [pc, #56]	; (8004918 <HAL_RCC_ClockConfig+0x1c4>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048e2:	f000 f821 	bl	8004928 <HAL_RCC_GetSysClockFreq>
 80048e6:	4602      	mov	r2, r0
 80048e8:	4b0b      	ldr	r3, [pc, #44]	; (8004918 <HAL_RCC_ClockConfig+0x1c4>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	091b      	lsrs	r3, r3, #4
 80048ee:	f003 030f 	and.w	r3, r3, #15
 80048f2:	490a      	ldr	r1, [pc, #40]	; (800491c <HAL_RCC_ClockConfig+0x1c8>)
 80048f4:	5ccb      	ldrb	r3, [r1, r3]
 80048f6:	fa22 f303 	lsr.w	r3, r2, r3
 80048fa:	4a09      	ldr	r2, [pc, #36]	; (8004920 <HAL_RCC_ClockConfig+0x1cc>)
 80048fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048fe:	4b09      	ldr	r3, [pc, #36]	; (8004924 <HAL_RCC_ClockConfig+0x1d0>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4618      	mov	r0, r3
 8004904:	f7fe faf8 	bl	8002ef8 <HAL_InitTick>

  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	40022000 	.word	0x40022000
 8004918:	40021000 	.word	0x40021000
 800491c:	08006254 	.word	0x08006254
 8004920:	20000000 	.word	0x20000000
 8004924:	20000020 	.word	0x20000020

08004928 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004928:	b490      	push	{r4, r7}
 800492a:	b08a      	sub	sp, #40	; 0x28
 800492c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800492e:	4b29      	ldr	r3, [pc, #164]	; (80049d4 <HAL_RCC_GetSysClockFreq+0xac>)
 8004930:	1d3c      	adds	r4, r7, #4
 8004932:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004934:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004938:	f240 2301 	movw	r3, #513	; 0x201
 800493c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800493e:	2300      	movs	r3, #0
 8004940:	61fb      	str	r3, [r7, #28]
 8004942:	2300      	movs	r3, #0
 8004944:	61bb      	str	r3, [r7, #24]
 8004946:	2300      	movs	r3, #0
 8004948:	627b      	str	r3, [r7, #36]	; 0x24
 800494a:	2300      	movs	r3, #0
 800494c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800494e:	2300      	movs	r3, #0
 8004950:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004952:	4b21      	ldr	r3, [pc, #132]	; (80049d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	f003 030c 	and.w	r3, r3, #12
 800495e:	2b04      	cmp	r3, #4
 8004960:	d002      	beq.n	8004968 <HAL_RCC_GetSysClockFreq+0x40>
 8004962:	2b08      	cmp	r3, #8
 8004964:	d003      	beq.n	800496e <HAL_RCC_GetSysClockFreq+0x46>
 8004966:	e02b      	b.n	80049c0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004968:	4b1c      	ldr	r3, [pc, #112]	; (80049dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800496a:	623b      	str	r3, [r7, #32]
      break;
 800496c:	e02b      	b.n	80049c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	0c9b      	lsrs	r3, r3, #18
 8004972:	f003 030f 	and.w	r3, r3, #15
 8004976:	3328      	adds	r3, #40	; 0x28
 8004978:	443b      	add	r3, r7
 800497a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800497e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d012      	beq.n	80049b0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800498a:	4b13      	ldr	r3, [pc, #76]	; (80049d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	0c5b      	lsrs	r3, r3, #17
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	3328      	adds	r3, #40	; 0x28
 8004996:	443b      	add	r3, r7
 8004998:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800499c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	4a0e      	ldr	r2, [pc, #56]	; (80049dc <HAL_RCC_GetSysClockFreq+0xb4>)
 80049a2:	fb03 f202 	mul.w	r2, r3, r2
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ac:	627b      	str	r3, [r7, #36]	; 0x24
 80049ae:	e004      	b.n	80049ba <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	4a0b      	ldr	r2, [pc, #44]	; (80049e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049b4:	fb02 f303 	mul.w	r3, r2, r3
 80049b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	623b      	str	r3, [r7, #32]
      break;
 80049be:	e002      	b.n	80049c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049c0:	4b06      	ldr	r3, [pc, #24]	; (80049dc <HAL_RCC_GetSysClockFreq+0xb4>)
 80049c2:	623b      	str	r3, [r7, #32]
      break;
 80049c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049c6:	6a3b      	ldr	r3, [r7, #32]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3728      	adds	r7, #40	; 0x28
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bc90      	pop	{r4, r7}
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	08006244 	.word	0x08006244
 80049d8:	40021000 	.word	0x40021000
 80049dc:	007a1200 	.word	0x007a1200
 80049e0:	003d0900 	.word	0x003d0900

080049e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049e8:	4b02      	ldr	r3, [pc, #8]	; (80049f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80049ea:	681b      	ldr	r3, [r3, #0]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bc80      	pop	{r7}
 80049f2:	4770      	bx	lr
 80049f4:	20000000 	.word	0x20000000

080049f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049fc:	f7ff fff2 	bl	80049e4 <HAL_RCC_GetHCLKFreq>
 8004a00:	4602      	mov	r2, r0
 8004a02:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	0a1b      	lsrs	r3, r3, #8
 8004a08:	f003 0307 	and.w	r3, r3, #7
 8004a0c:	4903      	ldr	r1, [pc, #12]	; (8004a1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a0e:	5ccb      	ldrb	r3, [r1, r3]
 8004a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	08006264 	.word	0x08006264

08004a20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a28:	4b0a      	ldr	r3, [pc, #40]	; (8004a54 <RCC_Delay+0x34>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a0a      	ldr	r2, [pc, #40]	; (8004a58 <RCC_Delay+0x38>)
 8004a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a32:	0a5b      	lsrs	r3, r3, #9
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	fb02 f303 	mul.w	r3, r2, r3
 8004a3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a3c:	bf00      	nop
  }
  while (Delay --);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	1e5a      	subs	r2, r3, #1
 8004a42:	60fa      	str	r2, [r7, #12]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1f9      	bne.n	8004a3c <RCC_Delay+0x1c>
}
 8004a48:	bf00      	nop
 8004a4a:	bf00      	nop
 8004a4c:	3714      	adds	r7, #20
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bc80      	pop	{r7}
 8004a52:	4770      	bx	lr
 8004a54:	20000000 	.word	0x20000000
 8004a58:	10624dd3 	.word	0x10624dd3

08004a5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d001      	beq.n	8004a74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e03a      	b.n	8004aea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2202      	movs	r2, #2
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68da      	ldr	r2, [r3, #12]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f042 0201 	orr.w	r2, r2, #1
 8004a8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a18      	ldr	r2, [pc, #96]	; (8004af4 <HAL_TIM_Base_Start_IT+0x98>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d00e      	beq.n	8004ab4 <HAL_TIM_Base_Start_IT+0x58>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a9e:	d009      	beq.n	8004ab4 <HAL_TIM_Base_Start_IT+0x58>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a14      	ldr	r2, [pc, #80]	; (8004af8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d004      	beq.n	8004ab4 <HAL_TIM_Base_Start_IT+0x58>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a13      	ldr	r2, [pc, #76]	; (8004afc <HAL_TIM_Base_Start_IT+0xa0>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d111      	bne.n	8004ad8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f003 0307 	and.w	r3, r3, #7
 8004abe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2b06      	cmp	r3, #6
 8004ac4:	d010      	beq.n	8004ae8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f042 0201 	orr.w	r2, r2, #1
 8004ad4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ad6:	e007      	b.n	8004ae8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f042 0201 	orr.w	r2, r2, #1
 8004ae6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3714      	adds	r7, #20
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bc80      	pop	{r7}
 8004af2:	4770      	bx	lr
 8004af4:	40012c00 	.word	0x40012c00
 8004af8:	40000400 	.word	0x40000400
 8004afc:	40000800 	.word	0x40000800

08004b00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e041      	b.n	8004b96 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d106      	bne.n	8004b2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7fc fe5c 	bl	80017e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	3304      	adds	r3, #4
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4610      	mov	r0, r2
 8004b40:	f000 fbea 	bl	8005318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
	...

08004ba0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d109      	bne.n	8004bc4 <HAL_TIM_PWM_Start+0x24>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	bf14      	ite	ne
 8004bbc:	2301      	movne	r3, #1
 8004bbe:	2300      	moveq	r3, #0
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	e022      	b.n	8004c0a <HAL_TIM_PWM_Start+0x6a>
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	d109      	bne.n	8004bde <HAL_TIM_PWM_Start+0x3e>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	bf14      	ite	ne
 8004bd6:	2301      	movne	r3, #1
 8004bd8:	2300      	moveq	r3, #0
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	e015      	b.n	8004c0a <HAL_TIM_PWM_Start+0x6a>
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2b08      	cmp	r3, #8
 8004be2:	d109      	bne.n	8004bf8 <HAL_TIM_PWM_Start+0x58>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	bf14      	ite	ne
 8004bf0:	2301      	movne	r3, #1
 8004bf2:	2300      	moveq	r3, #0
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	e008      	b.n	8004c0a <HAL_TIM_PWM_Start+0x6a>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	bf14      	ite	ne
 8004c04:	2301      	movne	r3, #1
 8004c06:	2300      	moveq	r3, #0
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e05e      	b.n	8004cd0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d104      	bne.n	8004c22 <HAL_TIM_PWM_Start+0x82>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c20:	e013      	b.n	8004c4a <HAL_TIM_PWM_Start+0xaa>
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2b04      	cmp	r3, #4
 8004c26:	d104      	bne.n	8004c32 <HAL_TIM_PWM_Start+0x92>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c30:	e00b      	b.n	8004c4a <HAL_TIM_PWM_Start+0xaa>
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b08      	cmp	r3, #8
 8004c36:	d104      	bne.n	8004c42 <HAL_TIM_PWM_Start+0xa2>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c40:	e003      	b.n	8004c4a <HAL_TIM_PWM_Start+0xaa>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2202      	movs	r2, #2
 8004c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	6839      	ldr	r1, [r7, #0]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 fd4a 	bl	80056ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a1e      	ldr	r2, [pc, #120]	; (8004cd8 <HAL_TIM_PWM_Start+0x138>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d107      	bne.n	8004c72 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a18      	ldr	r2, [pc, #96]	; (8004cd8 <HAL_TIM_PWM_Start+0x138>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d00e      	beq.n	8004c9a <HAL_TIM_PWM_Start+0xfa>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c84:	d009      	beq.n	8004c9a <HAL_TIM_PWM_Start+0xfa>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a14      	ldr	r2, [pc, #80]	; (8004cdc <HAL_TIM_PWM_Start+0x13c>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d004      	beq.n	8004c9a <HAL_TIM_PWM_Start+0xfa>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a12      	ldr	r2, [pc, #72]	; (8004ce0 <HAL_TIM_PWM_Start+0x140>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d111      	bne.n	8004cbe <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f003 0307 	and.w	r3, r3, #7
 8004ca4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2b06      	cmp	r3, #6
 8004caa:	d010      	beq.n	8004cce <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0201 	orr.w	r2, r2, #1
 8004cba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cbc:	e007      	b.n	8004cce <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f042 0201 	orr.w	r2, r2, #1
 8004ccc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3710      	adds	r7, #16
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	40012c00 	.word	0x40012c00
 8004cdc:	40000400 	.word	0x40000400
 8004ce0:	40000800 	.word	0x40000800

08004ce4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d101      	bne.n	8004cf8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e093      	b.n	8004e20 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d106      	bne.n	8004d12 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f7fc fcff 	bl	8001710 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2202      	movs	r2, #2
 8004d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	6812      	ldr	r2, [r2, #0]
 8004d24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d28:	f023 0307 	bic.w	r3, r3, #7
 8004d2c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	3304      	adds	r3, #4
 8004d36:	4619      	mov	r1, r3
 8004d38:	4610      	mov	r0, r2
 8004d3a:	f000 faed 	bl	8005318 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d66:	f023 0303 	bic.w	r3, r3, #3
 8004d6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	689a      	ldr	r2, [r3, #8]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	021b      	lsls	r3, r3, #8
 8004d76:	4313      	orrs	r3, r2
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004d84:	f023 030c 	bic.w	r3, r3, #12
 8004d88:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	68da      	ldr	r2, [r3, #12]
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	021b      	lsls	r3, r3, #8
 8004da0:	4313      	orrs	r3, r2
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	011a      	lsls	r2, r3, #4
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	031b      	lsls	r3, r3, #12
 8004db4:	4313      	orrs	r3, r2
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004dc2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	011b      	lsls	r3, r3, #4
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3718      	adds	r7, #24
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e38:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e40:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e48:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004e50:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d110      	bne.n	8004e7a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d102      	bne.n	8004e64 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e5e:	7b7b      	ldrb	r3, [r7, #13]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d001      	beq.n	8004e68 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e069      	b.n	8004f3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2202      	movs	r2, #2
 8004e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e78:	e031      	b.n	8004ede <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	2b04      	cmp	r3, #4
 8004e7e:	d110      	bne.n	8004ea2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e80:	7bbb      	ldrb	r3, [r7, #14]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d102      	bne.n	8004e8c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e86:	7b3b      	ldrb	r3, [r7, #12]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d001      	beq.n	8004e90 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e055      	b.n	8004f3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2202      	movs	r2, #2
 8004e94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ea0:	e01d      	b.n	8004ede <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ea2:	7bfb      	ldrb	r3, [r7, #15]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d108      	bne.n	8004eba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ea8:	7bbb      	ldrb	r3, [r7, #14]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d105      	bne.n	8004eba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004eae:	7b7b      	ldrb	r3, [r7, #13]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d102      	bne.n	8004eba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004eb4:	7b3b      	ldrb	r3, [r7, #12]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d001      	beq.n	8004ebe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e03e      	b.n	8004f3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2202      	movs	r2, #2
 8004ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2202      	movs	r2, #2
 8004eca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2202      	movs	r2, #2
 8004ed2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2202      	movs	r2, #2
 8004eda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d003      	beq.n	8004eec <HAL_TIM_Encoder_Start+0xc4>
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	2b04      	cmp	r3, #4
 8004ee8:	d008      	beq.n	8004efc <HAL_TIM_Encoder_Start+0xd4>
 8004eea:	e00f      	b.n	8004f0c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	2100      	movs	r1, #0
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f000 fbf9 	bl	80056ec <TIM_CCxChannelCmd>
      break;
 8004efa:	e016      	b.n	8004f2a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2201      	movs	r2, #1
 8004f02:	2104      	movs	r1, #4
 8004f04:	4618      	mov	r0, r3
 8004f06:	f000 fbf1 	bl	80056ec <TIM_CCxChannelCmd>
      break;
 8004f0a:	e00e      	b.n	8004f2a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2201      	movs	r2, #1
 8004f12:	2100      	movs	r1, #0
 8004f14:	4618      	mov	r0, r3
 8004f16:	f000 fbe9 	bl	80056ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	2104      	movs	r1, #4
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 fbe2 	bl	80056ec <TIM_CCxChannelCmd>
      break;
 8004f28:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f042 0201 	orr.w	r2, r2, #1
 8004f38:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d122      	bne.n	8004fa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d11b      	bne.n	8004fa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f06f 0202 	mvn.w	r2, #2
 8004f70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2201      	movs	r2, #1
 8004f76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	f003 0303 	and.w	r3, r3, #3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d003      	beq.n	8004f8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f9ab 	bl	80052e2 <HAL_TIM_IC_CaptureCallback>
 8004f8c:	e005      	b.n	8004f9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f99e 	bl	80052d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 f9ad 	bl	80052f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	f003 0304 	and.w	r3, r3, #4
 8004faa:	2b04      	cmp	r3, #4
 8004fac:	d122      	bne.n	8004ff4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f003 0304 	and.w	r3, r3, #4
 8004fb8:	2b04      	cmp	r3, #4
 8004fba:	d11b      	bne.n	8004ff4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f06f 0204 	mvn.w	r2, #4
 8004fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2202      	movs	r2, #2
 8004fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f981 	bl	80052e2 <HAL_TIM_IC_CaptureCallback>
 8004fe0:	e005      	b.n	8004fee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f974 	bl	80052d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f983 	bl	80052f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	f003 0308 	and.w	r3, r3, #8
 8004ffe:	2b08      	cmp	r3, #8
 8005000:	d122      	bne.n	8005048 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	f003 0308 	and.w	r3, r3, #8
 800500c:	2b08      	cmp	r3, #8
 800500e:	d11b      	bne.n	8005048 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f06f 0208 	mvn.w	r2, #8
 8005018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2204      	movs	r2, #4
 800501e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	f003 0303 	and.w	r3, r3, #3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f957 	bl	80052e2 <HAL_TIM_IC_CaptureCallback>
 8005034:	e005      	b.n	8005042 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f94a 	bl	80052d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 f959 	bl	80052f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	f003 0310 	and.w	r3, r3, #16
 8005052:	2b10      	cmp	r3, #16
 8005054:	d122      	bne.n	800509c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	f003 0310 	and.w	r3, r3, #16
 8005060:	2b10      	cmp	r3, #16
 8005062:	d11b      	bne.n	800509c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f06f 0210 	mvn.w	r2, #16
 800506c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2208      	movs	r2, #8
 8005072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f92d 	bl	80052e2 <HAL_TIM_IC_CaptureCallback>
 8005088:	e005      	b.n	8005096 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f920 	bl	80052d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 f92f 	bl	80052f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d10e      	bne.n	80050c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d107      	bne.n	80050c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f06f 0201 	mvn.w	r2, #1
 80050c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f7fd fdc4 	bl	8002c50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d2:	2b80      	cmp	r3, #128	; 0x80
 80050d4:	d10e      	bne.n	80050f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e0:	2b80      	cmp	r3, #128	; 0x80
 80050e2:	d107      	bne.n	80050f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 fb87 	bl	8005802 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050fe:	2b40      	cmp	r3, #64	; 0x40
 8005100:	d10e      	bne.n	8005120 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800510c:	2b40      	cmp	r3, #64	; 0x40
 800510e:	d107      	bne.n	8005120 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f8f3 	bl	8005306 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	f003 0320 	and.w	r3, r3, #32
 800512a:	2b20      	cmp	r3, #32
 800512c:	d10e      	bne.n	800514c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	f003 0320 	and.w	r3, r3, #32
 8005138:	2b20      	cmp	r3, #32
 800513a:	d107      	bne.n	800514c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f06f 0220 	mvn.w	r2, #32
 8005144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 fb52 	bl	80057f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800514c:	bf00      	nop
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005166:	2b01      	cmp	r3, #1
 8005168:	d101      	bne.n	800516e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800516a:	2302      	movs	r3, #2
 800516c:	e0ac      	b.n	80052c8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2b0c      	cmp	r3, #12
 800517a:	f200 809f 	bhi.w	80052bc <HAL_TIM_PWM_ConfigChannel+0x168>
 800517e:	a201      	add	r2, pc, #4	; (adr r2, 8005184 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005184:	080051b9 	.word	0x080051b9
 8005188:	080052bd 	.word	0x080052bd
 800518c:	080052bd 	.word	0x080052bd
 8005190:	080052bd 	.word	0x080052bd
 8005194:	080051f9 	.word	0x080051f9
 8005198:	080052bd 	.word	0x080052bd
 800519c:	080052bd 	.word	0x080052bd
 80051a0:	080052bd 	.word	0x080052bd
 80051a4:	0800523b 	.word	0x0800523b
 80051a8:	080052bd 	.word	0x080052bd
 80051ac:	080052bd 	.word	0x080052bd
 80051b0:	080052bd 	.word	0x080052bd
 80051b4:	0800527b 	.word	0x0800527b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68b9      	ldr	r1, [r7, #8]
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 f90c 	bl	80053dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699a      	ldr	r2, [r3, #24]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f042 0208 	orr.w	r2, r2, #8
 80051d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	699a      	ldr	r2, [r3, #24]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 0204 	bic.w	r2, r2, #4
 80051e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6999      	ldr	r1, [r3, #24]
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	691a      	ldr	r2, [r3, #16]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	619a      	str	r2, [r3, #24]
      break;
 80051f6:	e062      	b.n	80052be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68b9      	ldr	r1, [r7, #8]
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 f952 	bl	80054a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	699a      	ldr	r2, [r3, #24]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005212:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	699a      	ldr	r2, [r3, #24]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005222:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6999      	ldr	r1, [r3, #24]
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	021a      	lsls	r2, r3, #8
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	430a      	orrs	r2, r1
 8005236:	619a      	str	r2, [r3, #24]
      break;
 8005238:	e041      	b.n	80052be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68b9      	ldr	r1, [r7, #8]
 8005240:	4618      	mov	r0, r3
 8005242:	f000 f99b 	bl	800557c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	69da      	ldr	r2, [r3, #28]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f042 0208 	orr.w	r2, r2, #8
 8005254:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	69da      	ldr	r2, [r3, #28]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 0204 	bic.w	r2, r2, #4
 8005264:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	69d9      	ldr	r1, [r3, #28]
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	691a      	ldr	r2, [r3, #16]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	430a      	orrs	r2, r1
 8005276:	61da      	str	r2, [r3, #28]
      break;
 8005278:	e021      	b.n	80052be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68b9      	ldr	r1, [r7, #8]
 8005280:	4618      	mov	r0, r3
 8005282:	f000 f9e5 	bl	8005650 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	69da      	ldr	r2, [r3, #28]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005294:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	69da      	ldr	r2, [r3, #28]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	69d9      	ldr	r1, [r3, #28]
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	021a      	lsls	r2, r3, #8
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	430a      	orrs	r2, r1
 80052b8:	61da      	str	r2, [r3, #28]
      break;
 80052ba:	e000      	b.n	80052be <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80052bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	bc80      	pop	{r7}
 80052e0:	4770      	bx	lr

080052e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052e2:	b480      	push	{r7}
 80052e4:	b083      	sub	sp, #12
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052ea:	bf00      	nop
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bc80      	pop	{r7}
 80052f2:	4770      	bx	lr

080052f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	bc80      	pop	{r7}
 8005304:	4770      	bx	lr

08005306 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005306:	b480      	push	{r7}
 8005308:	b083      	sub	sp, #12
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800530e:	bf00      	nop
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	bc80      	pop	{r7}
 8005316:	4770      	bx	lr

08005318 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a29      	ldr	r2, [pc, #164]	; (80053d0 <TIM_Base_SetConfig+0xb8>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d00b      	beq.n	8005348 <TIM_Base_SetConfig+0x30>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005336:	d007      	beq.n	8005348 <TIM_Base_SetConfig+0x30>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a26      	ldr	r2, [pc, #152]	; (80053d4 <TIM_Base_SetConfig+0xbc>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d003      	beq.n	8005348 <TIM_Base_SetConfig+0x30>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a25      	ldr	r2, [pc, #148]	; (80053d8 <TIM_Base_SetConfig+0xc0>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d108      	bne.n	800535a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800534e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	4313      	orrs	r3, r2
 8005358:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a1c      	ldr	r2, [pc, #112]	; (80053d0 <TIM_Base_SetConfig+0xb8>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d00b      	beq.n	800537a <TIM_Base_SetConfig+0x62>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005368:	d007      	beq.n	800537a <TIM_Base_SetConfig+0x62>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a19      	ldr	r2, [pc, #100]	; (80053d4 <TIM_Base_SetConfig+0xbc>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d003      	beq.n	800537a <TIM_Base_SetConfig+0x62>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a18      	ldr	r2, [pc, #96]	; (80053d8 <TIM_Base_SetConfig+0xc0>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d108      	bne.n	800538c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005380:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	4313      	orrs	r3, r2
 800538a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	4313      	orrs	r3, r2
 8005398:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	689a      	ldr	r2, [r3, #8]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a07      	ldr	r2, [pc, #28]	; (80053d0 <TIM_Base_SetConfig+0xb8>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d103      	bne.n	80053c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	691a      	ldr	r2, [r3, #16]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	615a      	str	r2, [r3, #20]
}
 80053c6:	bf00      	nop
 80053c8:	3714      	adds	r7, #20
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bc80      	pop	{r7}
 80053ce:	4770      	bx	lr
 80053d0:	40012c00 	.word	0x40012c00
 80053d4:	40000400 	.word	0x40000400
 80053d8:	40000800 	.word	0x40000800

080053dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053dc:	b480      	push	{r7}
 80053de:	b087      	sub	sp, #28
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	f023 0201 	bic.w	r2, r3, #1
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800540a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f023 0303 	bic.w	r3, r3, #3
 8005412:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	4313      	orrs	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f023 0302 	bic.w	r3, r3, #2
 8005424:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	4313      	orrs	r3, r2
 800542e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a1c      	ldr	r2, [pc, #112]	; (80054a4 <TIM_OC1_SetConfig+0xc8>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d10c      	bne.n	8005452 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	f023 0308 	bic.w	r3, r3, #8
 800543e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	4313      	orrs	r3, r2
 8005448:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	f023 0304 	bic.w	r3, r3, #4
 8005450:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a13      	ldr	r2, [pc, #76]	; (80054a4 <TIM_OC1_SetConfig+0xc8>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d111      	bne.n	800547e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005460:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005468:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	4313      	orrs	r3, r2
 8005472:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	4313      	orrs	r3, r2
 800547c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	685a      	ldr	r2, [r3, #4]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	621a      	str	r2, [r3, #32]
}
 8005498:	bf00      	nop
 800549a:	371c      	adds	r7, #28
 800549c:	46bd      	mov	sp, r7
 800549e:	bc80      	pop	{r7}
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	40012c00 	.word	0x40012c00

080054a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b087      	sub	sp, #28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a1b      	ldr	r3, [r3, #32]
 80054b6:	f023 0210 	bic.w	r2, r3, #16
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	021b      	lsls	r3, r3, #8
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f023 0320 	bic.w	r3, r3, #32
 80054f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	011b      	lsls	r3, r3, #4
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a1d      	ldr	r2, [pc, #116]	; (8005578 <TIM_OC2_SetConfig+0xd0>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d10d      	bne.n	8005524 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800550e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	011b      	lsls	r3, r3, #4
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	4313      	orrs	r3, r2
 800551a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005522:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a14      	ldr	r2, [pc, #80]	; (8005578 <TIM_OC2_SetConfig+0xd0>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d113      	bne.n	8005554 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005532:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800553a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	4313      	orrs	r3, r2
 8005546:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	4313      	orrs	r3, r2
 8005552:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	685a      	ldr	r2, [r3, #4]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	621a      	str	r2, [r3, #32]
}
 800556e:	bf00      	nop
 8005570:	371c      	adds	r7, #28
 8005572:	46bd      	mov	sp, r7
 8005574:	bc80      	pop	{r7}
 8005576:	4770      	bx	lr
 8005578:	40012c00 	.word	0x40012c00

0800557c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800557c:	b480      	push	{r7}
 800557e:	b087      	sub	sp, #28
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	69db      	ldr	r3, [r3, #28]
 80055a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f023 0303 	bic.w	r3, r3, #3
 80055b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	021b      	lsls	r3, r3, #8
 80055cc:	697a      	ldr	r2, [r7, #20]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a1d      	ldr	r2, [pc, #116]	; (800564c <TIM_OC3_SetConfig+0xd0>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d10d      	bne.n	80055f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	021b      	lsls	r3, r3, #8
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a14      	ldr	r2, [pc, #80]	; (800564c <TIM_OC3_SetConfig+0xd0>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d113      	bne.n	8005626 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005604:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800560c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	011b      	lsls	r3, r3, #4
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	4313      	orrs	r3, r2
 8005618:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	011b      	lsls	r3, r3, #4
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	4313      	orrs	r3, r2
 8005624:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	621a      	str	r2, [r3, #32]
}
 8005640:	bf00      	nop
 8005642:	371c      	adds	r7, #28
 8005644:	46bd      	mov	sp, r7
 8005646:	bc80      	pop	{r7}
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	40012c00 	.word	0x40012c00

08005650 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005650:	b480      	push	{r7}
 8005652:	b087      	sub	sp, #28
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	69db      	ldr	r3, [r3, #28]
 8005676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800567e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005686:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	021b      	lsls	r3, r3, #8
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	4313      	orrs	r3, r2
 8005692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800569a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	031b      	lsls	r3, r3, #12
 80056a2:	693a      	ldr	r2, [r7, #16]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a0f      	ldr	r2, [pc, #60]	; (80056e8 <TIM_OC4_SetConfig+0x98>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d109      	bne.n	80056c4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	019b      	lsls	r3, r3, #6
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685a      	ldr	r2, [r3, #4]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	621a      	str	r2, [r3, #32]
}
 80056de:	bf00      	nop
 80056e0:	371c      	adds	r7, #28
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bc80      	pop	{r7}
 80056e6:	4770      	bx	lr
 80056e8:	40012c00 	.word	0x40012c00

080056ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b087      	sub	sp, #28
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	f003 031f 	and.w	r3, r3, #31
 80056fe:	2201      	movs	r2, #1
 8005700:	fa02 f303 	lsl.w	r3, r2, r3
 8005704:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6a1a      	ldr	r2, [r3, #32]
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	43db      	mvns	r3, r3
 800570e:	401a      	ands	r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6a1a      	ldr	r2, [r3, #32]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	f003 031f 	and.w	r3, r3, #31
 800571e:	6879      	ldr	r1, [r7, #4]
 8005720:	fa01 f303 	lsl.w	r3, r1, r3
 8005724:	431a      	orrs	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	621a      	str	r2, [r3, #32]
}
 800572a:	bf00      	nop
 800572c:	371c      	adds	r7, #28
 800572e:	46bd      	mov	sp, r7
 8005730:	bc80      	pop	{r7}
 8005732:	4770      	bx	lr

08005734 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005744:	2b01      	cmp	r3, #1
 8005746:	d101      	bne.n	800574c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005748:	2302      	movs	r3, #2
 800574a:	e046      	b.n	80057da <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2202      	movs	r2, #2
 8005758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005772:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	4313      	orrs	r3, r2
 800577c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a16      	ldr	r2, [pc, #88]	; (80057e4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d00e      	beq.n	80057ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005798:	d009      	beq.n	80057ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a12      	ldr	r2, [pc, #72]	; (80057e8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d004      	beq.n	80057ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a10      	ldr	r2, [pc, #64]	; (80057ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d10c      	bne.n	80057c8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	4313      	orrs	r3, r2
 80057be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68ba      	ldr	r2, [r7, #8]
 80057c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3714      	adds	r7, #20
 80057de:	46bd      	mov	sp, r7
 80057e0:	bc80      	pop	{r7}
 80057e2:	4770      	bx	lr
 80057e4:	40012c00 	.word	0x40012c00
 80057e8:	40000400 	.word	0x40000400
 80057ec:	40000800 	.word	0x40000800

080057f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057f8:	bf00      	nop
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bc80      	pop	{r7}
 8005800:	4770      	bx	lr

08005802 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005802:	b480      	push	{r7}
 8005804:	b083      	sub	sp, #12
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800580a:	bf00      	nop
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	bc80      	pop	{r7}
 8005812:	4770      	bx	lr

08005814 <__errno>:
 8005814:	4b01      	ldr	r3, [pc, #4]	; (800581c <__errno+0x8>)
 8005816:	6818      	ldr	r0, [r3, #0]
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	20000028 	.word	0x20000028

08005820 <__libc_init_array>:
 8005820:	b570      	push	{r4, r5, r6, lr}
 8005822:	2600      	movs	r6, #0
 8005824:	4d0c      	ldr	r5, [pc, #48]	; (8005858 <__libc_init_array+0x38>)
 8005826:	4c0d      	ldr	r4, [pc, #52]	; (800585c <__libc_init_array+0x3c>)
 8005828:	1b64      	subs	r4, r4, r5
 800582a:	10a4      	asrs	r4, r4, #2
 800582c:	42a6      	cmp	r6, r4
 800582e:	d109      	bne.n	8005844 <__libc_init_array+0x24>
 8005830:	f000 fc9c 	bl	800616c <_init>
 8005834:	2600      	movs	r6, #0
 8005836:	4d0a      	ldr	r5, [pc, #40]	; (8005860 <__libc_init_array+0x40>)
 8005838:	4c0a      	ldr	r4, [pc, #40]	; (8005864 <__libc_init_array+0x44>)
 800583a:	1b64      	subs	r4, r4, r5
 800583c:	10a4      	asrs	r4, r4, #2
 800583e:	42a6      	cmp	r6, r4
 8005840:	d105      	bne.n	800584e <__libc_init_array+0x2e>
 8005842:	bd70      	pop	{r4, r5, r6, pc}
 8005844:	f855 3b04 	ldr.w	r3, [r5], #4
 8005848:	4798      	blx	r3
 800584a:	3601      	adds	r6, #1
 800584c:	e7ee      	b.n	800582c <__libc_init_array+0xc>
 800584e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005852:	4798      	blx	r3
 8005854:	3601      	adds	r6, #1
 8005856:	e7f2      	b.n	800583e <__libc_init_array+0x1e>
 8005858:	080062a0 	.word	0x080062a0
 800585c:	080062a0 	.word	0x080062a0
 8005860:	080062a0 	.word	0x080062a0
 8005864:	080062a4 	.word	0x080062a4

08005868 <memset>:
 8005868:	4603      	mov	r3, r0
 800586a:	4402      	add	r2, r0
 800586c:	4293      	cmp	r3, r2
 800586e:	d100      	bne.n	8005872 <memset+0xa>
 8005870:	4770      	bx	lr
 8005872:	f803 1b01 	strb.w	r1, [r3], #1
 8005876:	e7f9      	b.n	800586c <memset+0x4>

08005878 <siprintf>:
 8005878:	b40e      	push	{r1, r2, r3}
 800587a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800587e:	b500      	push	{lr}
 8005880:	b09c      	sub	sp, #112	; 0x70
 8005882:	ab1d      	add	r3, sp, #116	; 0x74
 8005884:	9002      	str	r0, [sp, #8]
 8005886:	9006      	str	r0, [sp, #24]
 8005888:	9107      	str	r1, [sp, #28]
 800588a:	9104      	str	r1, [sp, #16]
 800588c:	4808      	ldr	r0, [pc, #32]	; (80058b0 <siprintf+0x38>)
 800588e:	4909      	ldr	r1, [pc, #36]	; (80058b4 <siprintf+0x3c>)
 8005890:	f853 2b04 	ldr.w	r2, [r3], #4
 8005894:	9105      	str	r1, [sp, #20]
 8005896:	6800      	ldr	r0, [r0, #0]
 8005898:	a902      	add	r1, sp, #8
 800589a:	9301      	str	r3, [sp, #4]
 800589c:	f000 f868 	bl	8005970 <_svfiprintf_r>
 80058a0:	2200      	movs	r2, #0
 80058a2:	9b02      	ldr	r3, [sp, #8]
 80058a4:	701a      	strb	r2, [r3, #0]
 80058a6:	b01c      	add	sp, #112	; 0x70
 80058a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80058ac:	b003      	add	sp, #12
 80058ae:	4770      	bx	lr
 80058b0:	20000028 	.word	0x20000028
 80058b4:	ffff0208 	.word	0xffff0208

080058b8 <__ssputs_r>:
 80058b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058bc:	688e      	ldr	r6, [r1, #8]
 80058be:	4682      	mov	sl, r0
 80058c0:	429e      	cmp	r6, r3
 80058c2:	460c      	mov	r4, r1
 80058c4:	4690      	mov	r8, r2
 80058c6:	461f      	mov	r7, r3
 80058c8:	d838      	bhi.n	800593c <__ssputs_r+0x84>
 80058ca:	898a      	ldrh	r2, [r1, #12]
 80058cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80058d0:	d032      	beq.n	8005938 <__ssputs_r+0x80>
 80058d2:	6825      	ldr	r5, [r4, #0]
 80058d4:	6909      	ldr	r1, [r1, #16]
 80058d6:	3301      	adds	r3, #1
 80058d8:	eba5 0901 	sub.w	r9, r5, r1
 80058dc:	6965      	ldr	r5, [r4, #20]
 80058de:	444b      	add	r3, r9
 80058e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80058e8:	106d      	asrs	r5, r5, #1
 80058ea:	429d      	cmp	r5, r3
 80058ec:	bf38      	it	cc
 80058ee:	461d      	movcc	r5, r3
 80058f0:	0553      	lsls	r3, r2, #21
 80058f2:	d531      	bpl.n	8005958 <__ssputs_r+0xa0>
 80058f4:	4629      	mov	r1, r5
 80058f6:	f000 fb6f 	bl	8005fd8 <_malloc_r>
 80058fa:	4606      	mov	r6, r0
 80058fc:	b950      	cbnz	r0, 8005914 <__ssputs_r+0x5c>
 80058fe:	230c      	movs	r3, #12
 8005900:	f04f 30ff 	mov.w	r0, #4294967295
 8005904:	f8ca 3000 	str.w	r3, [sl]
 8005908:	89a3      	ldrh	r3, [r4, #12]
 800590a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800590e:	81a3      	strh	r3, [r4, #12]
 8005910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005914:	464a      	mov	r2, r9
 8005916:	6921      	ldr	r1, [r4, #16]
 8005918:	f000 face 	bl	8005eb8 <memcpy>
 800591c:	89a3      	ldrh	r3, [r4, #12]
 800591e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005926:	81a3      	strh	r3, [r4, #12]
 8005928:	6126      	str	r6, [r4, #16]
 800592a:	444e      	add	r6, r9
 800592c:	6026      	str	r6, [r4, #0]
 800592e:	463e      	mov	r6, r7
 8005930:	6165      	str	r5, [r4, #20]
 8005932:	eba5 0509 	sub.w	r5, r5, r9
 8005936:	60a5      	str	r5, [r4, #8]
 8005938:	42be      	cmp	r6, r7
 800593a:	d900      	bls.n	800593e <__ssputs_r+0x86>
 800593c:	463e      	mov	r6, r7
 800593e:	4632      	mov	r2, r6
 8005940:	4641      	mov	r1, r8
 8005942:	6820      	ldr	r0, [r4, #0]
 8005944:	f000 fac6 	bl	8005ed4 <memmove>
 8005948:	68a3      	ldr	r3, [r4, #8]
 800594a:	2000      	movs	r0, #0
 800594c:	1b9b      	subs	r3, r3, r6
 800594e:	60a3      	str	r3, [r4, #8]
 8005950:	6823      	ldr	r3, [r4, #0]
 8005952:	4433      	add	r3, r6
 8005954:	6023      	str	r3, [r4, #0]
 8005956:	e7db      	b.n	8005910 <__ssputs_r+0x58>
 8005958:	462a      	mov	r2, r5
 800595a:	f000 fbb1 	bl	80060c0 <_realloc_r>
 800595e:	4606      	mov	r6, r0
 8005960:	2800      	cmp	r0, #0
 8005962:	d1e1      	bne.n	8005928 <__ssputs_r+0x70>
 8005964:	4650      	mov	r0, sl
 8005966:	6921      	ldr	r1, [r4, #16]
 8005968:	f000 face 	bl	8005f08 <_free_r>
 800596c:	e7c7      	b.n	80058fe <__ssputs_r+0x46>
	...

08005970 <_svfiprintf_r>:
 8005970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005974:	4698      	mov	r8, r3
 8005976:	898b      	ldrh	r3, [r1, #12]
 8005978:	4607      	mov	r7, r0
 800597a:	061b      	lsls	r3, r3, #24
 800597c:	460d      	mov	r5, r1
 800597e:	4614      	mov	r4, r2
 8005980:	b09d      	sub	sp, #116	; 0x74
 8005982:	d50e      	bpl.n	80059a2 <_svfiprintf_r+0x32>
 8005984:	690b      	ldr	r3, [r1, #16]
 8005986:	b963      	cbnz	r3, 80059a2 <_svfiprintf_r+0x32>
 8005988:	2140      	movs	r1, #64	; 0x40
 800598a:	f000 fb25 	bl	8005fd8 <_malloc_r>
 800598e:	6028      	str	r0, [r5, #0]
 8005990:	6128      	str	r0, [r5, #16]
 8005992:	b920      	cbnz	r0, 800599e <_svfiprintf_r+0x2e>
 8005994:	230c      	movs	r3, #12
 8005996:	603b      	str	r3, [r7, #0]
 8005998:	f04f 30ff 	mov.w	r0, #4294967295
 800599c:	e0d1      	b.n	8005b42 <_svfiprintf_r+0x1d2>
 800599e:	2340      	movs	r3, #64	; 0x40
 80059a0:	616b      	str	r3, [r5, #20]
 80059a2:	2300      	movs	r3, #0
 80059a4:	9309      	str	r3, [sp, #36]	; 0x24
 80059a6:	2320      	movs	r3, #32
 80059a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059ac:	2330      	movs	r3, #48	; 0x30
 80059ae:	f04f 0901 	mov.w	r9, #1
 80059b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80059b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005b5c <_svfiprintf_r+0x1ec>
 80059ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059be:	4623      	mov	r3, r4
 80059c0:	469a      	mov	sl, r3
 80059c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059c6:	b10a      	cbz	r2, 80059cc <_svfiprintf_r+0x5c>
 80059c8:	2a25      	cmp	r2, #37	; 0x25
 80059ca:	d1f9      	bne.n	80059c0 <_svfiprintf_r+0x50>
 80059cc:	ebba 0b04 	subs.w	fp, sl, r4
 80059d0:	d00b      	beq.n	80059ea <_svfiprintf_r+0x7a>
 80059d2:	465b      	mov	r3, fp
 80059d4:	4622      	mov	r2, r4
 80059d6:	4629      	mov	r1, r5
 80059d8:	4638      	mov	r0, r7
 80059da:	f7ff ff6d 	bl	80058b8 <__ssputs_r>
 80059de:	3001      	adds	r0, #1
 80059e0:	f000 80aa 	beq.w	8005b38 <_svfiprintf_r+0x1c8>
 80059e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059e6:	445a      	add	r2, fp
 80059e8:	9209      	str	r2, [sp, #36]	; 0x24
 80059ea:	f89a 3000 	ldrb.w	r3, [sl]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	f000 80a2 	beq.w	8005b38 <_svfiprintf_r+0x1c8>
 80059f4:	2300      	movs	r3, #0
 80059f6:	f04f 32ff 	mov.w	r2, #4294967295
 80059fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059fe:	f10a 0a01 	add.w	sl, sl, #1
 8005a02:	9304      	str	r3, [sp, #16]
 8005a04:	9307      	str	r3, [sp, #28]
 8005a06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a0a:	931a      	str	r3, [sp, #104]	; 0x68
 8005a0c:	4654      	mov	r4, sl
 8005a0e:	2205      	movs	r2, #5
 8005a10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a14:	4851      	ldr	r0, [pc, #324]	; (8005b5c <_svfiprintf_r+0x1ec>)
 8005a16:	f000 fa41 	bl	8005e9c <memchr>
 8005a1a:	9a04      	ldr	r2, [sp, #16]
 8005a1c:	b9d8      	cbnz	r0, 8005a56 <_svfiprintf_r+0xe6>
 8005a1e:	06d0      	lsls	r0, r2, #27
 8005a20:	bf44      	itt	mi
 8005a22:	2320      	movmi	r3, #32
 8005a24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a28:	0711      	lsls	r1, r2, #28
 8005a2a:	bf44      	itt	mi
 8005a2c:	232b      	movmi	r3, #43	; 0x2b
 8005a2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a32:	f89a 3000 	ldrb.w	r3, [sl]
 8005a36:	2b2a      	cmp	r3, #42	; 0x2a
 8005a38:	d015      	beq.n	8005a66 <_svfiprintf_r+0xf6>
 8005a3a:	4654      	mov	r4, sl
 8005a3c:	2000      	movs	r0, #0
 8005a3e:	f04f 0c0a 	mov.w	ip, #10
 8005a42:	9a07      	ldr	r2, [sp, #28]
 8005a44:	4621      	mov	r1, r4
 8005a46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a4a:	3b30      	subs	r3, #48	; 0x30
 8005a4c:	2b09      	cmp	r3, #9
 8005a4e:	d94e      	bls.n	8005aee <_svfiprintf_r+0x17e>
 8005a50:	b1b0      	cbz	r0, 8005a80 <_svfiprintf_r+0x110>
 8005a52:	9207      	str	r2, [sp, #28]
 8005a54:	e014      	b.n	8005a80 <_svfiprintf_r+0x110>
 8005a56:	eba0 0308 	sub.w	r3, r0, r8
 8005a5a:	fa09 f303 	lsl.w	r3, r9, r3
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	46a2      	mov	sl, r4
 8005a62:	9304      	str	r3, [sp, #16]
 8005a64:	e7d2      	b.n	8005a0c <_svfiprintf_r+0x9c>
 8005a66:	9b03      	ldr	r3, [sp, #12]
 8005a68:	1d19      	adds	r1, r3, #4
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	9103      	str	r1, [sp, #12]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	bfbb      	ittet	lt
 8005a72:	425b      	neglt	r3, r3
 8005a74:	f042 0202 	orrlt.w	r2, r2, #2
 8005a78:	9307      	strge	r3, [sp, #28]
 8005a7a:	9307      	strlt	r3, [sp, #28]
 8005a7c:	bfb8      	it	lt
 8005a7e:	9204      	strlt	r2, [sp, #16]
 8005a80:	7823      	ldrb	r3, [r4, #0]
 8005a82:	2b2e      	cmp	r3, #46	; 0x2e
 8005a84:	d10c      	bne.n	8005aa0 <_svfiprintf_r+0x130>
 8005a86:	7863      	ldrb	r3, [r4, #1]
 8005a88:	2b2a      	cmp	r3, #42	; 0x2a
 8005a8a:	d135      	bne.n	8005af8 <_svfiprintf_r+0x188>
 8005a8c:	9b03      	ldr	r3, [sp, #12]
 8005a8e:	3402      	adds	r4, #2
 8005a90:	1d1a      	adds	r2, r3, #4
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	9203      	str	r2, [sp, #12]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	bfb8      	it	lt
 8005a9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a9e:	9305      	str	r3, [sp, #20]
 8005aa0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005b60 <_svfiprintf_r+0x1f0>
 8005aa4:	2203      	movs	r2, #3
 8005aa6:	4650      	mov	r0, sl
 8005aa8:	7821      	ldrb	r1, [r4, #0]
 8005aaa:	f000 f9f7 	bl	8005e9c <memchr>
 8005aae:	b140      	cbz	r0, 8005ac2 <_svfiprintf_r+0x152>
 8005ab0:	2340      	movs	r3, #64	; 0x40
 8005ab2:	eba0 000a 	sub.w	r0, r0, sl
 8005ab6:	fa03 f000 	lsl.w	r0, r3, r0
 8005aba:	9b04      	ldr	r3, [sp, #16]
 8005abc:	3401      	adds	r4, #1
 8005abe:	4303      	orrs	r3, r0
 8005ac0:	9304      	str	r3, [sp, #16]
 8005ac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ac6:	2206      	movs	r2, #6
 8005ac8:	4826      	ldr	r0, [pc, #152]	; (8005b64 <_svfiprintf_r+0x1f4>)
 8005aca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ace:	f000 f9e5 	bl	8005e9c <memchr>
 8005ad2:	2800      	cmp	r0, #0
 8005ad4:	d038      	beq.n	8005b48 <_svfiprintf_r+0x1d8>
 8005ad6:	4b24      	ldr	r3, [pc, #144]	; (8005b68 <_svfiprintf_r+0x1f8>)
 8005ad8:	bb1b      	cbnz	r3, 8005b22 <_svfiprintf_r+0x1b2>
 8005ada:	9b03      	ldr	r3, [sp, #12]
 8005adc:	3307      	adds	r3, #7
 8005ade:	f023 0307 	bic.w	r3, r3, #7
 8005ae2:	3308      	adds	r3, #8
 8005ae4:	9303      	str	r3, [sp, #12]
 8005ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ae8:	4433      	add	r3, r6
 8005aea:	9309      	str	r3, [sp, #36]	; 0x24
 8005aec:	e767      	b.n	80059be <_svfiprintf_r+0x4e>
 8005aee:	460c      	mov	r4, r1
 8005af0:	2001      	movs	r0, #1
 8005af2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005af6:	e7a5      	b.n	8005a44 <_svfiprintf_r+0xd4>
 8005af8:	2300      	movs	r3, #0
 8005afa:	f04f 0c0a 	mov.w	ip, #10
 8005afe:	4619      	mov	r1, r3
 8005b00:	3401      	adds	r4, #1
 8005b02:	9305      	str	r3, [sp, #20]
 8005b04:	4620      	mov	r0, r4
 8005b06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b0a:	3a30      	subs	r2, #48	; 0x30
 8005b0c:	2a09      	cmp	r2, #9
 8005b0e:	d903      	bls.n	8005b18 <_svfiprintf_r+0x1a8>
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d0c5      	beq.n	8005aa0 <_svfiprintf_r+0x130>
 8005b14:	9105      	str	r1, [sp, #20]
 8005b16:	e7c3      	b.n	8005aa0 <_svfiprintf_r+0x130>
 8005b18:	4604      	mov	r4, r0
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b20:	e7f0      	b.n	8005b04 <_svfiprintf_r+0x194>
 8005b22:	ab03      	add	r3, sp, #12
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	462a      	mov	r2, r5
 8005b28:	4638      	mov	r0, r7
 8005b2a:	4b10      	ldr	r3, [pc, #64]	; (8005b6c <_svfiprintf_r+0x1fc>)
 8005b2c:	a904      	add	r1, sp, #16
 8005b2e:	f3af 8000 	nop.w
 8005b32:	1c42      	adds	r2, r0, #1
 8005b34:	4606      	mov	r6, r0
 8005b36:	d1d6      	bne.n	8005ae6 <_svfiprintf_r+0x176>
 8005b38:	89ab      	ldrh	r3, [r5, #12]
 8005b3a:	065b      	lsls	r3, r3, #25
 8005b3c:	f53f af2c 	bmi.w	8005998 <_svfiprintf_r+0x28>
 8005b40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b42:	b01d      	add	sp, #116	; 0x74
 8005b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b48:	ab03      	add	r3, sp, #12
 8005b4a:	9300      	str	r3, [sp, #0]
 8005b4c:	462a      	mov	r2, r5
 8005b4e:	4638      	mov	r0, r7
 8005b50:	4b06      	ldr	r3, [pc, #24]	; (8005b6c <_svfiprintf_r+0x1fc>)
 8005b52:	a904      	add	r1, sp, #16
 8005b54:	f000 f87c 	bl	8005c50 <_printf_i>
 8005b58:	e7eb      	b.n	8005b32 <_svfiprintf_r+0x1c2>
 8005b5a:	bf00      	nop
 8005b5c:	0800626c 	.word	0x0800626c
 8005b60:	08006272 	.word	0x08006272
 8005b64:	08006276 	.word	0x08006276
 8005b68:	00000000 	.word	0x00000000
 8005b6c:	080058b9 	.word	0x080058b9

08005b70 <_printf_common>:
 8005b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b74:	4616      	mov	r6, r2
 8005b76:	4699      	mov	r9, r3
 8005b78:	688a      	ldr	r2, [r1, #8]
 8005b7a:	690b      	ldr	r3, [r1, #16]
 8005b7c:	4607      	mov	r7, r0
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	bfb8      	it	lt
 8005b82:	4613      	movlt	r3, r2
 8005b84:	6033      	str	r3, [r6, #0]
 8005b86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b8a:	460c      	mov	r4, r1
 8005b8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b90:	b10a      	cbz	r2, 8005b96 <_printf_common+0x26>
 8005b92:	3301      	adds	r3, #1
 8005b94:	6033      	str	r3, [r6, #0]
 8005b96:	6823      	ldr	r3, [r4, #0]
 8005b98:	0699      	lsls	r1, r3, #26
 8005b9a:	bf42      	ittt	mi
 8005b9c:	6833      	ldrmi	r3, [r6, #0]
 8005b9e:	3302      	addmi	r3, #2
 8005ba0:	6033      	strmi	r3, [r6, #0]
 8005ba2:	6825      	ldr	r5, [r4, #0]
 8005ba4:	f015 0506 	ands.w	r5, r5, #6
 8005ba8:	d106      	bne.n	8005bb8 <_printf_common+0x48>
 8005baa:	f104 0a19 	add.w	sl, r4, #25
 8005bae:	68e3      	ldr	r3, [r4, #12]
 8005bb0:	6832      	ldr	r2, [r6, #0]
 8005bb2:	1a9b      	subs	r3, r3, r2
 8005bb4:	42ab      	cmp	r3, r5
 8005bb6:	dc28      	bgt.n	8005c0a <_printf_common+0x9a>
 8005bb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005bbc:	1e13      	subs	r3, r2, #0
 8005bbe:	6822      	ldr	r2, [r4, #0]
 8005bc0:	bf18      	it	ne
 8005bc2:	2301      	movne	r3, #1
 8005bc4:	0692      	lsls	r2, r2, #26
 8005bc6:	d42d      	bmi.n	8005c24 <_printf_common+0xb4>
 8005bc8:	4649      	mov	r1, r9
 8005bca:	4638      	mov	r0, r7
 8005bcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bd0:	47c0      	blx	r8
 8005bd2:	3001      	adds	r0, #1
 8005bd4:	d020      	beq.n	8005c18 <_printf_common+0xa8>
 8005bd6:	6823      	ldr	r3, [r4, #0]
 8005bd8:	68e5      	ldr	r5, [r4, #12]
 8005bda:	f003 0306 	and.w	r3, r3, #6
 8005bde:	2b04      	cmp	r3, #4
 8005be0:	bf18      	it	ne
 8005be2:	2500      	movne	r5, #0
 8005be4:	6832      	ldr	r2, [r6, #0]
 8005be6:	f04f 0600 	mov.w	r6, #0
 8005bea:	68a3      	ldr	r3, [r4, #8]
 8005bec:	bf08      	it	eq
 8005bee:	1aad      	subeq	r5, r5, r2
 8005bf0:	6922      	ldr	r2, [r4, #16]
 8005bf2:	bf08      	it	eq
 8005bf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	bfc4      	itt	gt
 8005bfc:	1a9b      	subgt	r3, r3, r2
 8005bfe:	18ed      	addgt	r5, r5, r3
 8005c00:	341a      	adds	r4, #26
 8005c02:	42b5      	cmp	r5, r6
 8005c04:	d11a      	bne.n	8005c3c <_printf_common+0xcc>
 8005c06:	2000      	movs	r0, #0
 8005c08:	e008      	b.n	8005c1c <_printf_common+0xac>
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	4652      	mov	r2, sl
 8005c0e:	4649      	mov	r1, r9
 8005c10:	4638      	mov	r0, r7
 8005c12:	47c0      	blx	r8
 8005c14:	3001      	adds	r0, #1
 8005c16:	d103      	bne.n	8005c20 <_printf_common+0xb0>
 8005c18:	f04f 30ff 	mov.w	r0, #4294967295
 8005c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c20:	3501      	adds	r5, #1
 8005c22:	e7c4      	b.n	8005bae <_printf_common+0x3e>
 8005c24:	2030      	movs	r0, #48	; 0x30
 8005c26:	18e1      	adds	r1, r4, r3
 8005c28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c2c:	1c5a      	adds	r2, r3, #1
 8005c2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c32:	4422      	add	r2, r4
 8005c34:	3302      	adds	r3, #2
 8005c36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c3a:	e7c5      	b.n	8005bc8 <_printf_common+0x58>
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	4622      	mov	r2, r4
 8005c40:	4649      	mov	r1, r9
 8005c42:	4638      	mov	r0, r7
 8005c44:	47c0      	blx	r8
 8005c46:	3001      	adds	r0, #1
 8005c48:	d0e6      	beq.n	8005c18 <_printf_common+0xa8>
 8005c4a:	3601      	adds	r6, #1
 8005c4c:	e7d9      	b.n	8005c02 <_printf_common+0x92>
	...

08005c50 <_printf_i>:
 8005c50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c54:	7e0f      	ldrb	r7, [r1, #24]
 8005c56:	4691      	mov	r9, r2
 8005c58:	2f78      	cmp	r7, #120	; 0x78
 8005c5a:	4680      	mov	r8, r0
 8005c5c:	460c      	mov	r4, r1
 8005c5e:	469a      	mov	sl, r3
 8005c60:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c66:	d807      	bhi.n	8005c78 <_printf_i+0x28>
 8005c68:	2f62      	cmp	r7, #98	; 0x62
 8005c6a:	d80a      	bhi.n	8005c82 <_printf_i+0x32>
 8005c6c:	2f00      	cmp	r7, #0
 8005c6e:	f000 80d9 	beq.w	8005e24 <_printf_i+0x1d4>
 8005c72:	2f58      	cmp	r7, #88	; 0x58
 8005c74:	f000 80a4 	beq.w	8005dc0 <_printf_i+0x170>
 8005c78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c80:	e03a      	b.n	8005cf8 <_printf_i+0xa8>
 8005c82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c86:	2b15      	cmp	r3, #21
 8005c88:	d8f6      	bhi.n	8005c78 <_printf_i+0x28>
 8005c8a:	a101      	add	r1, pc, #4	; (adr r1, 8005c90 <_printf_i+0x40>)
 8005c8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c90:	08005ce9 	.word	0x08005ce9
 8005c94:	08005cfd 	.word	0x08005cfd
 8005c98:	08005c79 	.word	0x08005c79
 8005c9c:	08005c79 	.word	0x08005c79
 8005ca0:	08005c79 	.word	0x08005c79
 8005ca4:	08005c79 	.word	0x08005c79
 8005ca8:	08005cfd 	.word	0x08005cfd
 8005cac:	08005c79 	.word	0x08005c79
 8005cb0:	08005c79 	.word	0x08005c79
 8005cb4:	08005c79 	.word	0x08005c79
 8005cb8:	08005c79 	.word	0x08005c79
 8005cbc:	08005e0b 	.word	0x08005e0b
 8005cc0:	08005d2d 	.word	0x08005d2d
 8005cc4:	08005ded 	.word	0x08005ded
 8005cc8:	08005c79 	.word	0x08005c79
 8005ccc:	08005c79 	.word	0x08005c79
 8005cd0:	08005e2d 	.word	0x08005e2d
 8005cd4:	08005c79 	.word	0x08005c79
 8005cd8:	08005d2d 	.word	0x08005d2d
 8005cdc:	08005c79 	.word	0x08005c79
 8005ce0:	08005c79 	.word	0x08005c79
 8005ce4:	08005df5 	.word	0x08005df5
 8005ce8:	682b      	ldr	r3, [r5, #0]
 8005cea:	1d1a      	adds	r2, r3, #4
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	602a      	str	r2, [r5, #0]
 8005cf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e0a4      	b.n	8005e46 <_printf_i+0x1f6>
 8005cfc:	6820      	ldr	r0, [r4, #0]
 8005cfe:	6829      	ldr	r1, [r5, #0]
 8005d00:	0606      	lsls	r6, r0, #24
 8005d02:	f101 0304 	add.w	r3, r1, #4
 8005d06:	d50a      	bpl.n	8005d1e <_printf_i+0xce>
 8005d08:	680e      	ldr	r6, [r1, #0]
 8005d0a:	602b      	str	r3, [r5, #0]
 8005d0c:	2e00      	cmp	r6, #0
 8005d0e:	da03      	bge.n	8005d18 <_printf_i+0xc8>
 8005d10:	232d      	movs	r3, #45	; 0x2d
 8005d12:	4276      	negs	r6, r6
 8005d14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d18:	230a      	movs	r3, #10
 8005d1a:	485e      	ldr	r0, [pc, #376]	; (8005e94 <_printf_i+0x244>)
 8005d1c:	e019      	b.n	8005d52 <_printf_i+0x102>
 8005d1e:	680e      	ldr	r6, [r1, #0]
 8005d20:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d24:	602b      	str	r3, [r5, #0]
 8005d26:	bf18      	it	ne
 8005d28:	b236      	sxthne	r6, r6
 8005d2a:	e7ef      	b.n	8005d0c <_printf_i+0xbc>
 8005d2c:	682b      	ldr	r3, [r5, #0]
 8005d2e:	6820      	ldr	r0, [r4, #0]
 8005d30:	1d19      	adds	r1, r3, #4
 8005d32:	6029      	str	r1, [r5, #0]
 8005d34:	0601      	lsls	r1, r0, #24
 8005d36:	d501      	bpl.n	8005d3c <_printf_i+0xec>
 8005d38:	681e      	ldr	r6, [r3, #0]
 8005d3a:	e002      	b.n	8005d42 <_printf_i+0xf2>
 8005d3c:	0646      	lsls	r6, r0, #25
 8005d3e:	d5fb      	bpl.n	8005d38 <_printf_i+0xe8>
 8005d40:	881e      	ldrh	r6, [r3, #0]
 8005d42:	2f6f      	cmp	r7, #111	; 0x6f
 8005d44:	bf0c      	ite	eq
 8005d46:	2308      	moveq	r3, #8
 8005d48:	230a      	movne	r3, #10
 8005d4a:	4852      	ldr	r0, [pc, #328]	; (8005e94 <_printf_i+0x244>)
 8005d4c:	2100      	movs	r1, #0
 8005d4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d52:	6865      	ldr	r5, [r4, #4]
 8005d54:	2d00      	cmp	r5, #0
 8005d56:	bfa8      	it	ge
 8005d58:	6821      	ldrge	r1, [r4, #0]
 8005d5a:	60a5      	str	r5, [r4, #8]
 8005d5c:	bfa4      	itt	ge
 8005d5e:	f021 0104 	bicge.w	r1, r1, #4
 8005d62:	6021      	strge	r1, [r4, #0]
 8005d64:	b90e      	cbnz	r6, 8005d6a <_printf_i+0x11a>
 8005d66:	2d00      	cmp	r5, #0
 8005d68:	d04d      	beq.n	8005e06 <_printf_i+0x1b6>
 8005d6a:	4615      	mov	r5, r2
 8005d6c:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d70:	fb03 6711 	mls	r7, r3, r1, r6
 8005d74:	5dc7      	ldrb	r7, [r0, r7]
 8005d76:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d7a:	4637      	mov	r7, r6
 8005d7c:	42bb      	cmp	r3, r7
 8005d7e:	460e      	mov	r6, r1
 8005d80:	d9f4      	bls.n	8005d6c <_printf_i+0x11c>
 8005d82:	2b08      	cmp	r3, #8
 8005d84:	d10b      	bne.n	8005d9e <_printf_i+0x14e>
 8005d86:	6823      	ldr	r3, [r4, #0]
 8005d88:	07de      	lsls	r6, r3, #31
 8005d8a:	d508      	bpl.n	8005d9e <_printf_i+0x14e>
 8005d8c:	6923      	ldr	r3, [r4, #16]
 8005d8e:	6861      	ldr	r1, [r4, #4]
 8005d90:	4299      	cmp	r1, r3
 8005d92:	bfde      	ittt	le
 8005d94:	2330      	movle	r3, #48	; 0x30
 8005d96:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d9a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d9e:	1b52      	subs	r2, r2, r5
 8005da0:	6122      	str	r2, [r4, #16]
 8005da2:	464b      	mov	r3, r9
 8005da4:	4621      	mov	r1, r4
 8005da6:	4640      	mov	r0, r8
 8005da8:	f8cd a000 	str.w	sl, [sp]
 8005dac:	aa03      	add	r2, sp, #12
 8005dae:	f7ff fedf 	bl	8005b70 <_printf_common>
 8005db2:	3001      	adds	r0, #1
 8005db4:	d14c      	bne.n	8005e50 <_printf_i+0x200>
 8005db6:	f04f 30ff 	mov.w	r0, #4294967295
 8005dba:	b004      	add	sp, #16
 8005dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dc0:	4834      	ldr	r0, [pc, #208]	; (8005e94 <_printf_i+0x244>)
 8005dc2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005dc6:	6829      	ldr	r1, [r5, #0]
 8005dc8:	6823      	ldr	r3, [r4, #0]
 8005dca:	f851 6b04 	ldr.w	r6, [r1], #4
 8005dce:	6029      	str	r1, [r5, #0]
 8005dd0:	061d      	lsls	r5, r3, #24
 8005dd2:	d514      	bpl.n	8005dfe <_printf_i+0x1ae>
 8005dd4:	07df      	lsls	r7, r3, #31
 8005dd6:	bf44      	itt	mi
 8005dd8:	f043 0320 	orrmi.w	r3, r3, #32
 8005ddc:	6023      	strmi	r3, [r4, #0]
 8005dde:	b91e      	cbnz	r6, 8005de8 <_printf_i+0x198>
 8005de0:	6823      	ldr	r3, [r4, #0]
 8005de2:	f023 0320 	bic.w	r3, r3, #32
 8005de6:	6023      	str	r3, [r4, #0]
 8005de8:	2310      	movs	r3, #16
 8005dea:	e7af      	b.n	8005d4c <_printf_i+0xfc>
 8005dec:	6823      	ldr	r3, [r4, #0]
 8005dee:	f043 0320 	orr.w	r3, r3, #32
 8005df2:	6023      	str	r3, [r4, #0]
 8005df4:	2378      	movs	r3, #120	; 0x78
 8005df6:	4828      	ldr	r0, [pc, #160]	; (8005e98 <_printf_i+0x248>)
 8005df8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005dfc:	e7e3      	b.n	8005dc6 <_printf_i+0x176>
 8005dfe:	0659      	lsls	r1, r3, #25
 8005e00:	bf48      	it	mi
 8005e02:	b2b6      	uxthmi	r6, r6
 8005e04:	e7e6      	b.n	8005dd4 <_printf_i+0x184>
 8005e06:	4615      	mov	r5, r2
 8005e08:	e7bb      	b.n	8005d82 <_printf_i+0x132>
 8005e0a:	682b      	ldr	r3, [r5, #0]
 8005e0c:	6826      	ldr	r6, [r4, #0]
 8005e0e:	1d18      	adds	r0, r3, #4
 8005e10:	6961      	ldr	r1, [r4, #20]
 8005e12:	6028      	str	r0, [r5, #0]
 8005e14:	0635      	lsls	r5, r6, #24
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	d501      	bpl.n	8005e1e <_printf_i+0x1ce>
 8005e1a:	6019      	str	r1, [r3, #0]
 8005e1c:	e002      	b.n	8005e24 <_printf_i+0x1d4>
 8005e1e:	0670      	lsls	r0, r6, #25
 8005e20:	d5fb      	bpl.n	8005e1a <_printf_i+0x1ca>
 8005e22:	8019      	strh	r1, [r3, #0]
 8005e24:	2300      	movs	r3, #0
 8005e26:	4615      	mov	r5, r2
 8005e28:	6123      	str	r3, [r4, #16]
 8005e2a:	e7ba      	b.n	8005da2 <_printf_i+0x152>
 8005e2c:	682b      	ldr	r3, [r5, #0]
 8005e2e:	2100      	movs	r1, #0
 8005e30:	1d1a      	adds	r2, r3, #4
 8005e32:	602a      	str	r2, [r5, #0]
 8005e34:	681d      	ldr	r5, [r3, #0]
 8005e36:	6862      	ldr	r2, [r4, #4]
 8005e38:	4628      	mov	r0, r5
 8005e3a:	f000 f82f 	bl	8005e9c <memchr>
 8005e3e:	b108      	cbz	r0, 8005e44 <_printf_i+0x1f4>
 8005e40:	1b40      	subs	r0, r0, r5
 8005e42:	6060      	str	r0, [r4, #4]
 8005e44:	6863      	ldr	r3, [r4, #4]
 8005e46:	6123      	str	r3, [r4, #16]
 8005e48:	2300      	movs	r3, #0
 8005e4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e4e:	e7a8      	b.n	8005da2 <_printf_i+0x152>
 8005e50:	462a      	mov	r2, r5
 8005e52:	4649      	mov	r1, r9
 8005e54:	4640      	mov	r0, r8
 8005e56:	6923      	ldr	r3, [r4, #16]
 8005e58:	47d0      	blx	sl
 8005e5a:	3001      	adds	r0, #1
 8005e5c:	d0ab      	beq.n	8005db6 <_printf_i+0x166>
 8005e5e:	6823      	ldr	r3, [r4, #0]
 8005e60:	079b      	lsls	r3, r3, #30
 8005e62:	d413      	bmi.n	8005e8c <_printf_i+0x23c>
 8005e64:	68e0      	ldr	r0, [r4, #12]
 8005e66:	9b03      	ldr	r3, [sp, #12]
 8005e68:	4298      	cmp	r0, r3
 8005e6a:	bfb8      	it	lt
 8005e6c:	4618      	movlt	r0, r3
 8005e6e:	e7a4      	b.n	8005dba <_printf_i+0x16a>
 8005e70:	2301      	movs	r3, #1
 8005e72:	4632      	mov	r2, r6
 8005e74:	4649      	mov	r1, r9
 8005e76:	4640      	mov	r0, r8
 8005e78:	47d0      	blx	sl
 8005e7a:	3001      	adds	r0, #1
 8005e7c:	d09b      	beq.n	8005db6 <_printf_i+0x166>
 8005e7e:	3501      	adds	r5, #1
 8005e80:	68e3      	ldr	r3, [r4, #12]
 8005e82:	9903      	ldr	r1, [sp, #12]
 8005e84:	1a5b      	subs	r3, r3, r1
 8005e86:	42ab      	cmp	r3, r5
 8005e88:	dcf2      	bgt.n	8005e70 <_printf_i+0x220>
 8005e8a:	e7eb      	b.n	8005e64 <_printf_i+0x214>
 8005e8c:	2500      	movs	r5, #0
 8005e8e:	f104 0619 	add.w	r6, r4, #25
 8005e92:	e7f5      	b.n	8005e80 <_printf_i+0x230>
 8005e94:	0800627d 	.word	0x0800627d
 8005e98:	0800628e 	.word	0x0800628e

08005e9c <memchr>:
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	b510      	push	{r4, lr}
 8005ea0:	b2c9      	uxtb	r1, r1
 8005ea2:	4402      	add	r2, r0
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	d101      	bne.n	8005eae <memchr+0x12>
 8005eaa:	2000      	movs	r0, #0
 8005eac:	e003      	b.n	8005eb6 <memchr+0x1a>
 8005eae:	7804      	ldrb	r4, [r0, #0]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	428c      	cmp	r4, r1
 8005eb4:	d1f6      	bne.n	8005ea4 <memchr+0x8>
 8005eb6:	bd10      	pop	{r4, pc}

08005eb8 <memcpy>:
 8005eb8:	440a      	add	r2, r1
 8005eba:	4291      	cmp	r1, r2
 8005ebc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ec0:	d100      	bne.n	8005ec4 <memcpy+0xc>
 8005ec2:	4770      	bx	lr
 8005ec4:	b510      	push	{r4, lr}
 8005ec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005eca:	4291      	cmp	r1, r2
 8005ecc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ed0:	d1f9      	bne.n	8005ec6 <memcpy+0xe>
 8005ed2:	bd10      	pop	{r4, pc}

08005ed4 <memmove>:
 8005ed4:	4288      	cmp	r0, r1
 8005ed6:	b510      	push	{r4, lr}
 8005ed8:	eb01 0402 	add.w	r4, r1, r2
 8005edc:	d902      	bls.n	8005ee4 <memmove+0x10>
 8005ede:	4284      	cmp	r4, r0
 8005ee0:	4623      	mov	r3, r4
 8005ee2:	d807      	bhi.n	8005ef4 <memmove+0x20>
 8005ee4:	1e43      	subs	r3, r0, #1
 8005ee6:	42a1      	cmp	r1, r4
 8005ee8:	d008      	beq.n	8005efc <memmove+0x28>
 8005eea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005eee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005ef2:	e7f8      	b.n	8005ee6 <memmove+0x12>
 8005ef4:	4601      	mov	r1, r0
 8005ef6:	4402      	add	r2, r0
 8005ef8:	428a      	cmp	r2, r1
 8005efa:	d100      	bne.n	8005efe <memmove+0x2a>
 8005efc:	bd10      	pop	{r4, pc}
 8005efe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f06:	e7f7      	b.n	8005ef8 <memmove+0x24>

08005f08 <_free_r>:
 8005f08:	b538      	push	{r3, r4, r5, lr}
 8005f0a:	4605      	mov	r5, r0
 8005f0c:	2900      	cmp	r1, #0
 8005f0e:	d040      	beq.n	8005f92 <_free_r+0x8a>
 8005f10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f14:	1f0c      	subs	r4, r1, #4
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	bfb8      	it	lt
 8005f1a:	18e4      	addlt	r4, r4, r3
 8005f1c:	f000 f910 	bl	8006140 <__malloc_lock>
 8005f20:	4a1c      	ldr	r2, [pc, #112]	; (8005f94 <_free_r+0x8c>)
 8005f22:	6813      	ldr	r3, [r2, #0]
 8005f24:	b933      	cbnz	r3, 8005f34 <_free_r+0x2c>
 8005f26:	6063      	str	r3, [r4, #4]
 8005f28:	6014      	str	r4, [r2, #0]
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f30:	f000 b90c 	b.w	800614c <__malloc_unlock>
 8005f34:	42a3      	cmp	r3, r4
 8005f36:	d908      	bls.n	8005f4a <_free_r+0x42>
 8005f38:	6820      	ldr	r0, [r4, #0]
 8005f3a:	1821      	adds	r1, r4, r0
 8005f3c:	428b      	cmp	r3, r1
 8005f3e:	bf01      	itttt	eq
 8005f40:	6819      	ldreq	r1, [r3, #0]
 8005f42:	685b      	ldreq	r3, [r3, #4]
 8005f44:	1809      	addeq	r1, r1, r0
 8005f46:	6021      	streq	r1, [r4, #0]
 8005f48:	e7ed      	b.n	8005f26 <_free_r+0x1e>
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	b10b      	cbz	r3, 8005f54 <_free_r+0x4c>
 8005f50:	42a3      	cmp	r3, r4
 8005f52:	d9fa      	bls.n	8005f4a <_free_r+0x42>
 8005f54:	6811      	ldr	r1, [r2, #0]
 8005f56:	1850      	adds	r0, r2, r1
 8005f58:	42a0      	cmp	r0, r4
 8005f5a:	d10b      	bne.n	8005f74 <_free_r+0x6c>
 8005f5c:	6820      	ldr	r0, [r4, #0]
 8005f5e:	4401      	add	r1, r0
 8005f60:	1850      	adds	r0, r2, r1
 8005f62:	4283      	cmp	r3, r0
 8005f64:	6011      	str	r1, [r2, #0]
 8005f66:	d1e0      	bne.n	8005f2a <_free_r+0x22>
 8005f68:	6818      	ldr	r0, [r3, #0]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	4401      	add	r1, r0
 8005f6e:	6011      	str	r1, [r2, #0]
 8005f70:	6053      	str	r3, [r2, #4]
 8005f72:	e7da      	b.n	8005f2a <_free_r+0x22>
 8005f74:	d902      	bls.n	8005f7c <_free_r+0x74>
 8005f76:	230c      	movs	r3, #12
 8005f78:	602b      	str	r3, [r5, #0]
 8005f7a:	e7d6      	b.n	8005f2a <_free_r+0x22>
 8005f7c:	6820      	ldr	r0, [r4, #0]
 8005f7e:	1821      	adds	r1, r4, r0
 8005f80:	428b      	cmp	r3, r1
 8005f82:	bf01      	itttt	eq
 8005f84:	6819      	ldreq	r1, [r3, #0]
 8005f86:	685b      	ldreq	r3, [r3, #4]
 8005f88:	1809      	addeq	r1, r1, r0
 8005f8a:	6021      	streq	r1, [r4, #0]
 8005f8c:	6063      	str	r3, [r4, #4]
 8005f8e:	6054      	str	r4, [r2, #4]
 8005f90:	e7cb      	b.n	8005f2a <_free_r+0x22>
 8005f92:	bd38      	pop	{r3, r4, r5, pc}
 8005f94:	20000300 	.word	0x20000300

08005f98 <sbrk_aligned>:
 8005f98:	b570      	push	{r4, r5, r6, lr}
 8005f9a:	4e0e      	ldr	r6, [pc, #56]	; (8005fd4 <sbrk_aligned+0x3c>)
 8005f9c:	460c      	mov	r4, r1
 8005f9e:	6831      	ldr	r1, [r6, #0]
 8005fa0:	4605      	mov	r5, r0
 8005fa2:	b911      	cbnz	r1, 8005faa <sbrk_aligned+0x12>
 8005fa4:	f000 f8bc 	bl	8006120 <_sbrk_r>
 8005fa8:	6030      	str	r0, [r6, #0]
 8005faa:	4621      	mov	r1, r4
 8005fac:	4628      	mov	r0, r5
 8005fae:	f000 f8b7 	bl	8006120 <_sbrk_r>
 8005fb2:	1c43      	adds	r3, r0, #1
 8005fb4:	d00a      	beq.n	8005fcc <sbrk_aligned+0x34>
 8005fb6:	1cc4      	adds	r4, r0, #3
 8005fb8:	f024 0403 	bic.w	r4, r4, #3
 8005fbc:	42a0      	cmp	r0, r4
 8005fbe:	d007      	beq.n	8005fd0 <sbrk_aligned+0x38>
 8005fc0:	1a21      	subs	r1, r4, r0
 8005fc2:	4628      	mov	r0, r5
 8005fc4:	f000 f8ac 	bl	8006120 <_sbrk_r>
 8005fc8:	3001      	adds	r0, #1
 8005fca:	d101      	bne.n	8005fd0 <sbrk_aligned+0x38>
 8005fcc:	f04f 34ff 	mov.w	r4, #4294967295
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	bd70      	pop	{r4, r5, r6, pc}
 8005fd4:	20000304 	.word	0x20000304

08005fd8 <_malloc_r>:
 8005fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fdc:	1ccd      	adds	r5, r1, #3
 8005fde:	f025 0503 	bic.w	r5, r5, #3
 8005fe2:	3508      	adds	r5, #8
 8005fe4:	2d0c      	cmp	r5, #12
 8005fe6:	bf38      	it	cc
 8005fe8:	250c      	movcc	r5, #12
 8005fea:	2d00      	cmp	r5, #0
 8005fec:	4607      	mov	r7, r0
 8005fee:	db01      	blt.n	8005ff4 <_malloc_r+0x1c>
 8005ff0:	42a9      	cmp	r1, r5
 8005ff2:	d905      	bls.n	8006000 <_malloc_r+0x28>
 8005ff4:	230c      	movs	r3, #12
 8005ff6:	2600      	movs	r6, #0
 8005ff8:	603b      	str	r3, [r7, #0]
 8005ffa:	4630      	mov	r0, r6
 8005ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006000:	4e2e      	ldr	r6, [pc, #184]	; (80060bc <_malloc_r+0xe4>)
 8006002:	f000 f89d 	bl	8006140 <__malloc_lock>
 8006006:	6833      	ldr	r3, [r6, #0]
 8006008:	461c      	mov	r4, r3
 800600a:	bb34      	cbnz	r4, 800605a <_malloc_r+0x82>
 800600c:	4629      	mov	r1, r5
 800600e:	4638      	mov	r0, r7
 8006010:	f7ff ffc2 	bl	8005f98 <sbrk_aligned>
 8006014:	1c43      	adds	r3, r0, #1
 8006016:	4604      	mov	r4, r0
 8006018:	d14d      	bne.n	80060b6 <_malloc_r+0xde>
 800601a:	6834      	ldr	r4, [r6, #0]
 800601c:	4626      	mov	r6, r4
 800601e:	2e00      	cmp	r6, #0
 8006020:	d140      	bne.n	80060a4 <_malloc_r+0xcc>
 8006022:	6823      	ldr	r3, [r4, #0]
 8006024:	4631      	mov	r1, r6
 8006026:	4638      	mov	r0, r7
 8006028:	eb04 0803 	add.w	r8, r4, r3
 800602c:	f000 f878 	bl	8006120 <_sbrk_r>
 8006030:	4580      	cmp	r8, r0
 8006032:	d13a      	bne.n	80060aa <_malloc_r+0xd2>
 8006034:	6821      	ldr	r1, [r4, #0]
 8006036:	3503      	adds	r5, #3
 8006038:	1a6d      	subs	r5, r5, r1
 800603a:	f025 0503 	bic.w	r5, r5, #3
 800603e:	3508      	adds	r5, #8
 8006040:	2d0c      	cmp	r5, #12
 8006042:	bf38      	it	cc
 8006044:	250c      	movcc	r5, #12
 8006046:	4638      	mov	r0, r7
 8006048:	4629      	mov	r1, r5
 800604a:	f7ff ffa5 	bl	8005f98 <sbrk_aligned>
 800604e:	3001      	adds	r0, #1
 8006050:	d02b      	beq.n	80060aa <_malloc_r+0xd2>
 8006052:	6823      	ldr	r3, [r4, #0]
 8006054:	442b      	add	r3, r5
 8006056:	6023      	str	r3, [r4, #0]
 8006058:	e00e      	b.n	8006078 <_malloc_r+0xa0>
 800605a:	6822      	ldr	r2, [r4, #0]
 800605c:	1b52      	subs	r2, r2, r5
 800605e:	d41e      	bmi.n	800609e <_malloc_r+0xc6>
 8006060:	2a0b      	cmp	r2, #11
 8006062:	d916      	bls.n	8006092 <_malloc_r+0xba>
 8006064:	1961      	adds	r1, r4, r5
 8006066:	42a3      	cmp	r3, r4
 8006068:	6025      	str	r5, [r4, #0]
 800606a:	bf18      	it	ne
 800606c:	6059      	strne	r1, [r3, #4]
 800606e:	6863      	ldr	r3, [r4, #4]
 8006070:	bf08      	it	eq
 8006072:	6031      	streq	r1, [r6, #0]
 8006074:	5162      	str	r2, [r4, r5]
 8006076:	604b      	str	r3, [r1, #4]
 8006078:	4638      	mov	r0, r7
 800607a:	f104 060b 	add.w	r6, r4, #11
 800607e:	f000 f865 	bl	800614c <__malloc_unlock>
 8006082:	f026 0607 	bic.w	r6, r6, #7
 8006086:	1d23      	adds	r3, r4, #4
 8006088:	1af2      	subs	r2, r6, r3
 800608a:	d0b6      	beq.n	8005ffa <_malloc_r+0x22>
 800608c:	1b9b      	subs	r3, r3, r6
 800608e:	50a3      	str	r3, [r4, r2]
 8006090:	e7b3      	b.n	8005ffa <_malloc_r+0x22>
 8006092:	6862      	ldr	r2, [r4, #4]
 8006094:	42a3      	cmp	r3, r4
 8006096:	bf0c      	ite	eq
 8006098:	6032      	streq	r2, [r6, #0]
 800609a:	605a      	strne	r2, [r3, #4]
 800609c:	e7ec      	b.n	8006078 <_malloc_r+0xa0>
 800609e:	4623      	mov	r3, r4
 80060a0:	6864      	ldr	r4, [r4, #4]
 80060a2:	e7b2      	b.n	800600a <_malloc_r+0x32>
 80060a4:	4634      	mov	r4, r6
 80060a6:	6876      	ldr	r6, [r6, #4]
 80060a8:	e7b9      	b.n	800601e <_malloc_r+0x46>
 80060aa:	230c      	movs	r3, #12
 80060ac:	4638      	mov	r0, r7
 80060ae:	603b      	str	r3, [r7, #0]
 80060b0:	f000 f84c 	bl	800614c <__malloc_unlock>
 80060b4:	e7a1      	b.n	8005ffa <_malloc_r+0x22>
 80060b6:	6025      	str	r5, [r4, #0]
 80060b8:	e7de      	b.n	8006078 <_malloc_r+0xa0>
 80060ba:	bf00      	nop
 80060bc:	20000300 	.word	0x20000300

080060c0 <_realloc_r>:
 80060c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060c4:	4680      	mov	r8, r0
 80060c6:	4614      	mov	r4, r2
 80060c8:	460e      	mov	r6, r1
 80060ca:	b921      	cbnz	r1, 80060d6 <_realloc_r+0x16>
 80060cc:	4611      	mov	r1, r2
 80060ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060d2:	f7ff bf81 	b.w	8005fd8 <_malloc_r>
 80060d6:	b92a      	cbnz	r2, 80060e4 <_realloc_r+0x24>
 80060d8:	f7ff ff16 	bl	8005f08 <_free_r>
 80060dc:	4625      	mov	r5, r4
 80060de:	4628      	mov	r0, r5
 80060e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060e4:	f000 f838 	bl	8006158 <_malloc_usable_size_r>
 80060e8:	4284      	cmp	r4, r0
 80060ea:	4607      	mov	r7, r0
 80060ec:	d802      	bhi.n	80060f4 <_realloc_r+0x34>
 80060ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80060f2:	d812      	bhi.n	800611a <_realloc_r+0x5a>
 80060f4:	4621      	mov	r1, r4
 80060f6:	4640      	mov	r0, r8
 80060f8:	f7ff ff6e 	bl	8005fd8 <_malloc_r>
 80060fc:	4605      	mov	r5, r0
 80060fe:	2800      	cmp	r0, #0
 8006100:	d0ed      	beq.n	80060de <_realloc_r+0x1e>
 8006102:	42bc      	cmp	r4, r7
 8006104:	4622      	mov	r2, r4
 8006106:	4631      	mov	r1, r6
 8006108:	bf28      	it	cs
 800610a:	463a      	movcs	r2, r7
 800610c:	f7ff fed4 	bl	8005eb8 <memcpy>
 8006110:	4631      	mov	r1, r6
 8006112:	4640      	mov	r0, r8
 8006114:	f7ff fef8 	bl	8005f08 <_free_r>
 8006118:	e7e1      	b.n	80060de <_realloc_r+0x1e>
 800611a:	4635      	mov	r5, r6
 800611c:	e7df      	b.n	80060de <_realloc_r+0x1e>
	...

08006120 <_sbrk_r>:
 8006120:	b538      	push	{r3, r4, r5, lr}
 8006122:	2300      	movs	r3, #0
 8006124:	4d05      	ldr	r5, [pc, #20]	; (800613c <_sbrk_r+0x1c>)
 8006126:	4604      	mov	r4, r0
 8006128:	4608      	mov	r0, r1
 800612a:	602b      	str	r3, [r5, #0]
 800612c:	f7fb fc28 	bl	8001980 <_sbrk>
 8006130:	1c43      	adds	r3, r0, #1
 8006132:	d102      	bne.n	800613a <_sbrk_r+0x1a>
 8006134:	682b      	ldr	r3, [r5, #0]
 8006136:	b103      	cbz	r3, 800613a <_sbrk_r+0x1a>
 8006138:	6023      	str	r3, [r4, #0]
 800613a:	bd38      	pop	{r3, r4, r5, pc}
 800613c:	20000308 	.word	0x20000308

08006140 <__malloc_lock>:
 8006140:	4801      	ldr	r0, [pc, #4]	; (8006148 <__malloc_lock+0x8>)
 8006142:	f000 b811 	b.w	8006168 <__retarget_lock_acquire_recursive>
 8006146:	bf00      	nop
 8006148:	2000030c 	.word	0x2000030c

0800614c <__malloc_unlock>:
 800614c:	4801      	ldr	r0, [pc, #4]	; (8006154 <__malloc_unlock+0x8>)
 800614e:	f000 b80c 	b.w	800616a <__retarget_lock_release_recursive>
 8006152:	bf00      	nop
 8006154:	2000030c 	.word	0x2000030c

08006158 <_malloc_usable_size_r>:
 8006158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800615c:	1f18      	subs	r0, r3, #4
 800615e:	2b00      	cmp	r3, #0
 8006160:	bfbc      	itt	lt
 8006162:	580b      	ldrlt	r3, [r1, r0]
 8006164:	18c0      	addlt	r0, r0, r3
 8006166:	4770      	bx	lr

08006168 <__retarget_lock_acquire_recursive>:
 8006168:	4770      	bx	lr

0800616a <__retarget_lock_release_recursive>:
 800616a:	4770      	bx	lr

0800616c <_init>:
 800616c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800616e:	bf00      	nop
 8006170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006172:	bc08      	pop	{r3}
 8006174:	469e      	mov	lr, r3
 8006176:	4770      	bx	lr

08006178 <_fini>:
 8006178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800617a:	bf00      	nop
 800617c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800617e:	bc08      	pop	{r3}
 8006180:	469e      	mov	lr, r3
 8006182:	4770      	bx	lr
