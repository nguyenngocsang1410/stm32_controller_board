
Re_Project_Glove_Cut.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a30  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08006b3c  08006b3c  00016b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cd0  08006cd0  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08006cd0  08006cd0  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006cd0  08006cd0  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cd0  08006cd0  00016cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006cd4  08006cd4  00016cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08006cd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  20000088  08006d60  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  08006d60  00020320  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000106ce  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a42  00000000  00000000  0003077f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb8  00000000  00000000  000331c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f08  00000000  00000000  00034180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001941c  00000000  00000000  00035088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000128f1  00000000  00000000  0004e4a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008caf9  00000000  00000000  00060d95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed88e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000472c  00000000  00000000  000ed8e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08006b24 	.word	0x08006b24

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08006b24 	.word	0x08006b24

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_drsub>:
 80002b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__adddf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_dsub>:
 80002bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c0 <__adddf3>:
 80002c0:	b530      	push	{r4, r5, lr}
 80002c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ca:	ea94 0f05 	teq	r4, r5
 80002ce:	bf08      	it	eq
 80002d0:	ea90 0f02 	teqeq	r0, r2
 80002d4:	bf1f      	itttt	ne
 80002d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e6:	f000 80e2 	beq.w	80004ae <__adddf3+0x1ee>
 80002ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f2:	bfb8      	it	lt
 80002f4:	426d      	neglt	r5, r5
 80002f6:	dd0c      	ble.n	8000312 <__adddf3+0x52>
 80002f8:	442c      	add	r4, r5
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	ea82 0000 	eor.w	r0, r2, r0
 8000306:	ea83 0101 	eor.w	r1, r3, r1
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	2d36      	cmp	r5, #54	; 0x36
 8000314:	bf88      	it	hi
 8000316:	bd30      	pophi	{r4, r5, pc}
 8000318:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800031c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000320:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000324:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x70>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000334:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000338:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x84>
 800033e:	4252      	negs	r2, r2
 8000340:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000344:	ea94 0f05 	teq	r4, r5
 8000348:	f000 80a7 	beq.w	800049a <__adddf3+0x1da>
 800034c:	f1a4 0401 	sub.w	r4, r4, #1
 8000350:	f1d5 0e20 	rsbs	lr, r5, #32
 8000354:	db0d      	blt.n	8000372 <__adddf3+0xb2>
 8000356:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035a:	fa22 f205 	lsr.w	r2, r2, r5
 800035e:	1880      	adds	r0, r0, r2
 8000360:	f141 0100 	adc.w	r1, r1, #0
 8000364:	fa03 f20e 	lsl.w	r2, r3, lr
 8000368:	1880      	adds	r0, r0, r2
 800036a:	fa43 f305 	asr.w	r3, r3, r5
 800036e:	4159      	adcs	r1, r3
 8000370:	e00e      	b.n	8000390 <__adddf3+0xd0>
 8000372:	f1a5 0520 	sub.w	r5, r5, #32
 8000376:	f10e 0e20 	add.w	lr, lr, #32
 800037a:	2a01      	cmp	r2, #1
 800037c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000380:	bf28      	it	cs
 8000382:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	18c0      	adds	r0, r0, r3
 800038c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000390:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000394:	d507      	bpl.n	80003a6 <__adddf3+0xe6>
 8000396:	f04f 0e00 	mov.w	lr, #0
 800039a:	f1dc 0c00 	rsbs	ip, ip, #0
 800039e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003aa:	d31b      	bcc.n	80003e4 <__adddf3+0x124>
 80003ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b0:	d30c      	bcc.n	80003cc <__adddf3+0x10c>
 80003b2:	0849      	lsrs	r1, r1, #1
 80003b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003bc:	f104 0401 	add.w	r4, r4, #1
 80003c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c8:	f080 809a 	bcs.w	8000500 <__adddf3+0x240>
 80003cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d0:	bf08      	it	eq
 80003d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d6:	f150 0000 	adcs.w	r0, r0, #0
 80003da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003de:	ea41 0105 	orr.w	r1, r1, r5
 80003e2:	bd30      	pop	{r4, r5, pc}
 80003e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e8:	4140      	adcs	r0, r0
 80003ea:	eb41 0101 	adc.w	r1, r1, r1
 80003ee:	3c01      	subs	r4, #1
 80003f0:	bf28      	it	cs
 80003f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f6:	d2e9      	bcs.n	80003cc <__adddf3+0x10c>
 80003f8:	f091 0f00 	teq	r1, #0
 80003fc:	bf04      	itt	eq
 80003fe:	4601      	moveq	r1, r0
 8000400:	2000      	moveq	r0, #0
 8000402:	fab1 f381 	clz	r3, r1
 8000406:	bf08      	it	eq
 8000408:	3320      	addeq	r3, #32
 800040a:	f1a3 030b 	sub.w	r3, r3, #11
 800040e:	f1b3 0220 	subs.w	r2, r3, #32
 8000412:	da0c      	bge.n	800042e <__adddf3+0x16e>
 8000414:	320c      	adds	r2, #12
 8000416:	dd08      	ble.n	800042a <__adddf3+0x16a>
 8000418:	f102 0c14 	add.w	ip, r2, #20
 800041c:	f1c2 020c 	rsb	r2, r2, #12
 8000420:	fa01 f00c 	lsl.w	r0, r1, ip
 8000424:	fa21 f102 	lsr.w	r1, r1, r2
 8000428:	e00c      	b.n	8000444 <__adddf3+0x184>
 800042a:	f102 0214 	add.w	r2, r2, #20
 800042e:	bfd8      	it	le
 8000430:	f1c2 0c20 	rsble	ip, r2, #32
 8000434:	fa01 f102 	lsl.w	r1, r1, r2
 8000438:	fa20 fc0c 	lsr.w	ip, r0, ip
 800043c:	bfdc      	itt	le
 800043e:	ea41 010c 	orrle.w	r1, r1, ip
 8000442:	4090      	lslle	r0, r2
 8000444:	1ae4      	subs	r4, r4, r3
 8000446:	bfa2      	ittt	ge
 8000448:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800044c:	4329      	orrge	r1, r5
 800044e:	bd30      	popge	{r4, r5, pc}
 8000450:	ea6f 0404 	mvn.w	r4, r4
 8000454:	3c1f      	subs	r4, #31
 8000456:	da1c      	bge.n	8000492 <__adddf3+0x1d2>
 8000458:	340c      	adds	r4, #12
 800045a:	dc0e      	bgt.n	800047a <__adddf3+0x1ba>
 800045c:	f104 0414 	add.w	r4, r4, #20
 8000460:	f1c4 0220 	rsb	r2, r4, #32
 8000464:	fa20 f004 	lsr.w	r0, r0, r4
 8000468:	fa01 f302 	lsl.w	r3, r1, r2
 800046c:	ea40 0003 	orr.w	r0, r0, r3
 8000470:	fa21 f304 	lsr.w	r3, r1, r4
 8000474:	ea45 0103 	orr.w	r1, r5, r3
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f1c4 040c 	rsb	r4, r4, #12
 800047e:	f1c4 0220 	rsb	r2, r4, #32
 8000482:	fa20 f002 	lsr.w	r0, r0, r2
 8000486:	fa01 f304 	lsl.w	r3, r1, r4
 800048a:	ea40 0003 	orr.w	r0, r0, r3
 800048e:	4629      	mov	r1, r5
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	fa21 f004 	lsr.w	r0, r1, r4
 8000496:	4629      	mov	r1, r5
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f094 0f00 	teq	r4, #0
 800049e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a2:	bf06      	itte	eq
 80004a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a8:	3401      	addeq	r4, #1
 80004aa:	3d01      	subne	r5, #1
 80004ac:	e74e      	b.n	800034c <__adddf3+0x8c>
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf18      	it	ne
 80004b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b8:	d029      	beq.n	800050e <__adddf3+0x24e>
 80004ba:	ea94 0f05 	teq	r4, r5
 80004be:	bf08      	it	eq
 80004c0:	ea90 0f02 	teqeq	r0, r2
 80004c4:	d005      	beq.n	80004d2 <__adddf3+0x212>
 80004c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ca:	bf04      	itt	eq
 80004cc:	4619      	moveq	r1, r3
 80004ce:	4610      	moveq	r0, r2
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea91 0f03 	teq	r1, r3
 80004d6:	bf1e      	ittt	ne
 80004d8:	2100      	movne	r1, #0
 80004da:	2000      	movne	r0, #0
 80004dc:	bd30      	popne	{r4, r5, pc}
 80004de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e2:	d105      	bne.n	80004f0 <__adddf3+0x230>
 80004e4:	0040      	lsls	r0, r0, #1
 80004e6:	4149      	adcs	r1, r1
 80004e8:	bf28      	it	cs
 80004ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f4:	bf3c      	itt	cc
 80004f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fa:	bd30      	popcc	{r4, r5, pc}
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000504:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000512:	bf1a      	itte	ne
 8000514:	4619      	movne	r1, r3
 8000516:	4610      	movne	r0, r2
 8000518:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800051c:	bf1c      	itt	ne
 800051e:	460b      	movne	r3, r1
 8000520:	4602      	movne	r2, r0
 8000522:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000526:	bf06      	itte	eq
 8000528:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800052c:	ea91 0f03 	teqeq	r1, r3
 8000530:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	bf00      	nop

08000538 <__aeabi_ui2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f04f 0500 	mov.w	r5, #0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e750      	b.n	80003f8 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_i2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000570:	bf48      	it	mi
 8000572:	4240      	negmi	r0, r0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e73e      	b.n	80003f8 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_f2d>:
 800057c:	0042      	lsls	r2, r0, #1
 800057e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000582:	ea4f 0131 	mov.w	r1, r1, rrx
 8000586:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058a:	bf1f      	itttt	ne
 800058c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000590:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000594:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000598:	4770      	bxne	lr
 800059a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059e:	bf08      	it	eq
 80005a0:	4770      	bxeq	lr
 80005a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a6:	bf04      	itt	eq
 80005a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005bc:	e71c      	b.n	80003f8 <__adddf3+0x138>
 80005be:	bf00      	nop

080005c0 <__aeabi_ul2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f04f 0500 	mov.w	r5, #0
 80005ce:	e00a      	b.n	80005e6 <__aeabi_l2d+0x16>

080005d0 <__aeabi_l2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005de:	d502      	bpl.n	80005e6 <__aeabi_l2d+0x16>
 80005e0:	4240      	negs	r0, r0
 80005e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f2:	f43f aed8 	beq.w	80003a6 <__adddf3+0xe6>
 80005f6:	f04f 0203 	mov.w	r2, #3
 80005fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fe:	bf18      	it	ne
 8000600:	3203      	addne	r2, #3
 8000602:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000606:	bf18      	it	ne
 8000608:	3203      	addne	r2, #3
 800060a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060e:	f1c2 0320 	rsb	r3, r2, #32
 8000612:	fa00 fc03 	lsl.w	ip, r0, r3
 8000616:	fa20 f002 	lsr.w	r0, r0, r2
 800061a:	fa01 fe03 	lsl.w	lr, r1, r3
 800061e:	ea40 000e 	orr.w	r0, r0, lr
 8000622:	fa21 f102 	lsr.w	r1, r1, r2
 8000626:	4414      	add	r4, r2
 8000628:	e6bd      	b.n	80003a6 <__adddf3+0xe6>
 800062a:	bf00      	nop

0800062c <__aeabi_dmul>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000632:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000636:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063a:	bf1d      	ittte	ne
 800063c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000640:	ea94 0f0c 	teqne	r4, ip
 8000644:	ea95 0f0c 	teqne	r5, ip
 8000648:	f000 f8de 	bleq	8000808 <__aeabi_dmul+0x1dc>
 800064c:	442c      	add	r4, r5
 800064e:	ea81 0603 	eor.w	r6, r1, r3
 8000652:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000656:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065e:	bf18      	it	ne
 8000660:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800066c:	d038      	beq.n	80006e0 <__aeabi_dmul+0xb4>
 800066e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000672:	f04f 0500 	mov.w	r5, #0
 8000676:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000682:	f04f 0600 	mov.w	r6, #0
 8000686:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068a:	f09c 0f00 	teq	ip, #0
 800068e:	bf18      	it	ne
 8000690:	f04e 0e01 	orrne.w	lr, lr, #1
 8000694:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000698:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800069c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a0:	d204      	bcs.n	80006ac <__aeabi_dmul+0x80>
 80006a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a6:	416d      	adcs	r5, r5
 80006a8:	eb46 0606 	adc.w	r6, r6, r6
 80006ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c4:	bf88      	it	hi
 80006c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ca:	d81e      	bhi.n	800070a <__aeabi_dmul+0xde>
 80006cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d0:	bf08      	it	eq
 80006d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d6:	f150 0000 	adcs.w	r0, r0, #0
 80006da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e4:	ea46 0101 	orr.w	r1, r6, r1
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f4:	bfc2      	ittt	gt
 80006f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000700:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000704:	f04f 0e00 	mov.w	lr, #0
 8000708:	3c01      	subs	r4, #1
 800070a:	f300 80ab 	bgt.w	8000864 <__aeabi_dmul+0x238>
 800070e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000712:	bfde      	ittt	le
 8000714:	2000      	movle	r0, #0
 8000716:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071a:	bd70      	pople	{r4, r5, r6, pc}
 800071c:	f1c4 0400 	rsb	r4, r4, #0
 8000720:	3c20      	subs	r4, #32
 8000722:	da35      	bge.n	8000790 <__aeabi_dmul+0x164>
 8000724:	340c      	adds	r4, #12
 8000726:	dc1b      	bgt.n	8000760 <__aeabi_dmul+0x134>
 8000728:	f104 0414 	add.w	r4, r4, #20
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f305 	lsl.w	r3, r0, r5
 8000734:	fa20 f004 	lsr.w	r0, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea40 0002 	orr.w	r0, r0, r2
 8000740:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	fa21 f604 	lsr.w	r6, r1, r4
 8000750:	eb42 0106 	adc.w	r1, r2, r6
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f1c4 040c 	rsb	r4, r4, #12
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f304 	lsl.w	r3, r0, r4
 800076c:	fa20 f005 	lsr.w	r0, r0, r5
 8000770:	fa01 f204 	lsl.w	r2, r1, r4
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000780:	f141 0100 	adc.w	r1, r1, #0
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f205 	lsl.w	r2, r0, r5
 8000798:	ea4e 0e02 	orr.w	lr, lr, r2
 800079c:	fa20 f304 	lsr.w	r3, r0, r4
 80007a0:	fa01 f205 	lsl.w	r2, r1, r5
 80007a4:	ea43 0302 	orr.w	r3, r3, r2
 80007a8:	fa21 f004 	lsr.w	r0, r1, r4
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	fa21 f204 	lsr.w	r2, r1, r4
 80007b4:	ea20 0002 	bic.w	r0, r0, r2
 80007b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c0:	bf08      	it	eq
 80007c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
 80007c8:	f094 0f00 	teq	r4, #0
 80007cc:	d10f      	bne.n	80007ee <__aeabi_dmul+0x1c2>
 80007ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d2:	0040      	lsls	r0, r0, #1
 80007d4:	eb41 0101 	adc.w	r1, r1, r1
 80007d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3c01      	subeq	r4, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1a6>
 80007e2:	ea41 0106 	orr.w	r1, r1, r6
 80007e6:	f095 0f00 	teq	r5, #0
 80007ea:	bf18      	it	ne
 80007ec:	4770      	bxne	lr
 80007ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f2:	0052      	lsls	r2, r2, #1
 80007f4:	eb43 0303 	adc.w	r3, r3, r3
 80007f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3d01      	subeq	r5, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1c6>
 8000802:	ea43 0306 	orr.w	r3, r3, r6
 8000806:	4770      	bx	lr
 8000808:	ea94 0f0c 	teq	r4, ip
 800080c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000810:	bf18      	it	ne
 8000812:	ea95 0f0c 	teqne	r5, ip
 8000816:	d00c      	beq.n	8000832 <__aeabi_dmul+0x206>
 8000818:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081c:	bf18      	it	ne
 800081e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000822:	d1d1      	bne.n	80007c8 <__aeabi_dmul+0x19c>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000836:	bf06      	itte	eq
 8000838:	4610      	moveq	r0, r2
 800083a:	4619      	moveq	r1, r3
 800083c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000840:	d019      	beq.n	8000876 <__aeabi_dmul+0x24a>
 8000842:	ea94 0f0c 	teq	r4, ip
 8000846:	d102      	bne.n	800084e <__aeabi_dmul+0x222>
 8000848:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800084c:	d113      	bne.n	8000876 <__aeabi_dmul+0x24a>
 800084e:	ea95 0f0c 	teq	r5, ip
 8000852:	d105      	bne.n	8000860 <__aeabi_dmul+0x234>
 8000854:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000858:	bf1c      	itt	ne
 800085a:	4610      	movne	r0, r2
 800085c:	4619      	movne	r1, r3
 800085e:	d10a      	bne.n	8000876 <__aeabi_dmul+0x24a>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000870:	f04f 0000 	mov.w	r0, #0
 8000874:	bd70      	pop	{r4, r5, r6, pc}
 8000876:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087e:	bd70      	pop	{r4, r5, r6, pc}

08000880 <__aeabi_ddiv>:
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000886:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088e:	bf1d      	ittte	ne
 8000890:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000894:	ea94 0f0c 	teqne	r4, ip
 8000898:	ea95 0f0c 	teqne	r5, ip
 800089c:	f000 f8a7 	bleq	80009ee <__aeabi_ddiv+0x16e>
 80008a0:	eba4 0405 	sub.w	r4, r4, r5
 80008a4:	ea81 0e03 	eor.w	lr, r1, r3
 80008a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b0:	f000 8088 	beq.w	80009c4 <__aeabi_ddiv+0x144>
 80008b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d8:	429d      	cmp	r5, r3
 80008da:	bf08      	it	eq
 80008dc:	4296      	cmpeq	r6, r2
 80008de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e6:	d202      	bcs.n	80008ee <__aeabi_ddiv+0x6e>
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	1ab6      	subs	r6, r6, r2
 80008f0:	eb65 0503 	sbc.w	r5, r5, r3
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000902:	ebb6 0e02 	subs.w	lr, r6, r2
 8000906:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090a:	bf22      	ittt	cs
 800090c:	1ab6      	subcs	r6, r6, r2
 800090e:	4675      	movcs	r5, lr
 8000910:	ea40 000c 	orrcs.w	r0, r0, ip
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800095c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000960:	d018      	beq.n	8000994 <__aeabi_ddiv+0x114>
 8000962:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000966:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000972:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000976:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097e:	d1c0      	bne.n	8000902 <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	d10b      	bne.n	800099e <__aeabi_ddiv+0x11e>
 8000986:	ea41 0100 	orr.w	r1, r1, r0
 800098a:	f04f 0000 	mov.w	r0, #0
 800098e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000992:	e7b6      	b.n	8000902 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	bf04      	itt	eq
 800099a:	4301      	orreq	r1, r0
 800099c:	2000      	moveq	r0, #0
 800099e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a2:	bf88      	it	hi
 80009a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a8:	f63f aeaf 	bhi.w	800070a <__aeabi_dmul+0xde>
 80009ac:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b0:	bf04      	itt	eq
 80009b2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ba:	f150 0000 	adcs.w	r0, r0, #0
 80009be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d0:	bfc2      	ittt	gt
 80009d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009da:	bd70      	popgt	{r4, r5, r6, pc}
 80009dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e0:	f04f 0e00 	mov.w	lr, #0
 80009e4:	3c01      	subs	r4, #1
 80009e6:	e690      	b.n	800070a <__aeabi_dmul+0xde>
 80009e8:	ea45 0e06 	orr.w	lr, r5, r6
 80009ec:	e68d      	b.n	800070a <__aeabi_dmul+0xde>
 80009ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f2:	ea94 0f0c 	teq	r4, ip
 80009f6:	bf08      	it	eq
 80009f8:	ea95 0f0c 	teqeq	r5, ip
 80009fc:	f43f af3b 	beq.w	8000876 <__aeabi_dmul+0x24a>
 8000a00:	ea94 0f0c 	teq	r4, ip
 8000a04:	d10a      	bne.n	8000a1c <__aeabi_ddiv+0x19c>
 8000a06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0a:	f47f af34 	bne.w	8000876 <__aeabi_dmul+0x24a>
 8000a0e:	ea95 0f0c 	teq	r5, ip
 8000a12:	f47f af25 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e72c      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a1c:	ea95 0f0c 	teq	r5, ip
 8000a20:	d106      	bne.n	8000a30 <__aeabi_ddiv+0x1b0>
 8000a22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a26:	f43f aefd 	beq.w	8000824 <__aeabi_dmul+0x1f8>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e722      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3a:	f47f aec5 	bne.w	80007c8 <__aeabi_dmul+0x19c>
 8000a3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a42:	f47f af0d 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4a:	f47f aeeb 	bne.w	8000824 <__aeabi_dmul+0x1f8>
 8000a4e:	e712      	b.n	8000876 <__aeabi_dmul+0x24a>

08000a50 <__aeabi_d2iz>:
 8000a50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a58:	d215      	bcs.n	8000a86 <__aeabi_d2iz+0x36>
 8000a5a:	d511      	bpl.n	8000a80 <__aeabi_d2iz+0x30>
 8000a5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a64:	d912      	bls.n	8000a8c <__aeabi_d2iz+0x3c>
 8000a66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a76:	fa23 f002 	lsr.w	r0, r3, r2
 8000a7a:	bf18      	it	ne
 8000a7c:	4240      	negne	r0, r0
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8a:	d105      	bne.n	8000a98 <__aeabi_d2iz+0x48>
 8000a8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a90:	bf08      	it	eq
 8000a92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_frsub>:
 8000b40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b44:	e002      	b.n	8000b4c <__addsf3>
 8000b46:	bf00      	nop

08000b48 <__aeabi_fsub>:
 8000b48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b4c <__addsf3>:
 8000b4c:	0042      	lsls	r2, r0, #1
 8000b4e:	bf1f      	itttt	ne
 8000b50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b54:	ea92 0f03 	teqne	r2, r3
 8000b58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b60:	d06a      	beq.n	8000c38 <__addsf3+0xec>
 8000b62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b6a:	bfc1      	itttt	gt
 8000b6c:	18d2      	addgt	r2, r2, r3
 8000b6e:	4041      	eorgt	r1, r0
 8000b70:	4048      	eorgt	r0, r1
 8000b72:	4041      	eorgt	r1, r0
 8000b74:	bfb8      	it	lt
 8000b76:	425b      	neglt	r3, r3
 8000b78:	2b19      	cmp	r3, #25
 8000b7a:	bf88      	it	hi
 8000b7c:	4770      	bxhi	lr
 8000b7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4249      	negne	r1, r1
 8000b9e:	ea92 0f03 	teq	r2, r3
 8000ba2:	d03f      	beq.n	8000c24 <__addsf3+0xd8>
 8000ba4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bac:	eb10 000c 	adds.w	r0, r0, ip
 8000bb0:	f1c3 0320 	rsb	r3, r3, #32
 8000bb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bbc:	d502      	bpl.n	8000bc4 <__addsf3+0x78>
 8000bbe:	4249      	negs	r1, r1
 8000bc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bc8:	d313      	bcc.n	8000bf2 <__addsf3+0xa6>
 8000bca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bce:	d306      	bcc.n	8000bde <__addsf3+0x92>
 8000bd0:	0840      	lsrs	r0, r0, #1
 8000bd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd6:	f102 0201 	add.w	r2, r2, #1
 8000bda:	2afe      	cmp	r2, #254	; 0xfe
 8000bdc:	d251      	bcs.n	8000c82 <__addsf3+0x136>
 8000bde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000be2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be6:	bf08      	it	eq
 8000be8:	f020 0001 	biceq.w	r0, r0, #1
 8000bec:	ea40 0003 	orr.w	r0, r0, r3
 8000bf0:	4770      	bx	lr
 8000bf2:	0049      	lsls	r1, r1, #1
 8000bf4:	eb40 0000 	adc.w	r0, r0, r0
 8000bf8:	3a01      	subs	r2, #1
 8000bfa:	bf28      	it	cs
 8000bfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c00:	d2ed      	bcs.n	8000bde <__addsf3+0x92>
 8000c02:	fab0 fc80 	clz	ip, r0
 8000c06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c12:	bfaa      	itet	ge
 8000c14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c18:	4252      	neglt	r2, r2
 8000c1a:	4318      	orrge	r0, r3
 8000c1c:	bfbc      	itt	lt
 8000c1e:	40d0      	lsrlt	r0, r2
 8000c20:	4318      	orrlt	r0, r3
 8000c22:	4770      	bx	lr
 8000c24:	f092 0f00 	teq	r2, #0
 8000c28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c2c:	bf06      	itte	eq
 8000c2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c32:	3201      	addeq	r2, #1
 8000c34:	3b01      	subne	r3, #1
 8000c36:	e7b5      	b.n	8000ba4 <__addsf3+0x58>
 8000c38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c40:	bf18      	it	ne
 8000c42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c46:	d021      	beq.n	8000c8c <__addsf3+0x140>
 8000c48:	ea92 0f03 	teq	r2, r3
 8000c4c:	d004      	beq.n	8000c58 <__addsf3+0x10c>
 8000c4e:	f092 0f00 	teq	r2, #0
 8000c52:	bf08      	it	eq
 8000c54:	4608      	moveq	r0, r1
 8000c56:	4770      	bx	lr
 8000c58:	ea90 0f01 	teq	r0, r1
 8000c5c:	bf1c      	itt	ne
 8000c5e:	2000      	movne	r0, #0
 8000c60:	4770      	bxne	lr
 8000c62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c66:	d104      	bne.n	8000c72 <__addsf3+0x126>
 8000c68:	0040      	lsls	r0, r0, #1
 8000c6a:	bf28      	it	cs
 8000c6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c70:	4770      	bx	lr
 8000c72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c76:	bf3c      	itt	cc
 8000c78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c7c:	4770      	bxcc	lr
 8000c7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8a:	4770      	bx	lr
 8000c8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c90:	bf16      	itet	ne
 8000c92:	4608      	movne	r0, r1
 8000c94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c98:	4601      	movne	r1, r0
 8000c9a:	0242      	lsls	r2, r0, #9
 8000c9c:	bf06      	itte	eq
 8000c9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ca2:	ea90 0f01 	teqeq	r0, r1
 8000ca6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000caa:	4770      	bx	lr

08000cac <__aeabi_ui2f>:
 8000cac:	f04f 0300 	mov.w	r3, #0
 8000cb0:	e004      	b.n	8000cbc <__aeabi_i2f+0x8>
 8000cb2:	bf00      	nop

08000cb4 <__aeabi_i2f>:
 8000cb4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cb8:	bf48      	it	mi
 8000cba:	4240      	negmi	r0, r0
 8000cbc:	ea5f 0c00 	movs.w	ip, r0
 8000cc0:	bf08      	it	eq
 8000cc2:	4770      	bxeq	lr
 8000cc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cc8:	4601      	mov	r1, r0
 8000cca:	f04f 0000 	mov.w	r0, #0
 8000cce:	e01c      	b.n	8000d0a <__aeabi_l2f+0x2a>

08000cd0 <__aeabi_ul2f>:
 8000cd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd4:	bf08      	it	eq
 8000cd6:	4770      	bxeq	lr
 8000cd8:	f04f 0300 	mov.w	r3, #0
 8000cdc:	e00a      	b.n	8000cf4 <__aeabi_l2f+0x14>
 8000cde:	bf00      	nop

08000ce0 <__aeabi_l2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cec:	d502      	bpl.n	8000cf4 <__aeabi_l2f+0x14>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	ea5f 0c01 	movs.w	ip, r1
 8000cf8:	bf02      	ittt	eq
 8000cfa:	4684      	moveq	ip, r0
 8000cfc:	4601      	moveq	r1, r0
 8000cfe:	2000      	moveq	r0, #0
 8000d00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d04:	bf08      	it	eq
 8000d06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d0e:	fabc f28c 	clz	r2, ip
 8000d12:	3a08      	subs	r2, #8
 8000d14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d18:	db10      	blt.n	8000d3c <__aeabi_l2f+0x5c>
 8000d1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1e:	4463      	add	r3, ip
 8000d20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d24:	f1c2 0220 	rsb	r2, r2, #32
 8000d28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d30:	eb43 0002 	adc.w	r0, r3, r2
 8000d34:	bf08      	it	eq
 8000d36:	f020 0001 	biceq.w	r0, r0, #1
 8000d3a:	4770      	bx	lr
 8000d3c:	f102 0220 	add.w	r2, r2, #32
 8000d40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d44:	f1c2 0220 	rsb	r2, r2, #32
 8000d48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d50:	eb43 0002 	adc.w	r0, r3, r2
 8000d54:	bf08      	it	eq
 8000d56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d5a:	4770      	bx	lr

08000d5c <__gesf2>:
 8000d5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000d60:	e006      	b.n	8000d70 <__cmpsf2+0x4>
 8000d62:	bf00      	nop

08000d64 <__lesf2>:
 8000d64:	f04f 0c01 	mov.w	ip, #1
 8000d68:	e002      	b.n	8000d70 <__cmpsf2+0x4>
 8000d6a:	bf00      	nop

08000d6c <__cmpsf2>:
 8000d6c:	f04f 0c01 	mov.w	ip, #1
 8000d70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d74:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d78:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d80:	bf18      	it	ne
 8000d82:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d86:	d011      	beq.n	8000dac <__cmpsf2+0x40>
 8000d88:	b001      	add	sp, #4
 8000d8a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d8e:	bf18      	it	ne
 8000d90:	ea90 0f01 	teqne	r0, r1
 8000d94:	bf58      	it	pl
 8000d96:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d9a:	bf88      	it	hi
 8000d9c:	17c8      	asrhi	r0, r1, #31
 8000d9e:	bf38      	it	cc
 8000da0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000da4:	bf18      	it	ne
 8000da6:	f040 0001 	orrne.w	r0, r0, #1
 8000daa:	4770      	bx	lr
 8000dac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000db0:	d102      	bne.n	8000db8 <__cmpsf2+0x4c>
 8000db2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000db6:	d105      	bne.n	8000dc4 <__cmpsf2+0x58>
 8000db8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000dbc:	d1e4      	bne.n	8000d88 <__cmpsf2+0x1c>
 8000dbe:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000dc2:	d0e1      	beq.n	8000d88 <__cmpsf2+0x1c>
 8000dc4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop

08000dcc <__aeabi_cfrcmple>:
 8000dcc:	4684      	mov	ip, r0
 8000dce:	4608      	mov	r0, r1
 8000dd0:	4661      	mov	r1, ip
 8000dd2:	e7ff      	b.n	8000dd4 <__aeabi_cfcmpeq>

08000dd4 <__aeabi_cfcmpeq>:
 8000dd4:	b50f      	push	{r0, r1, r2, r3, lr}
 8000dd6:	f7ff ffc9 	bl	8000d6c <__cmpsf2>
 8000dda:	2800      	cmp	r0, #0
 8000ddc:	bf48      	it	mi
 8000dde:	f110 0f00 	cmnmi.w	r0, #0
 8000de2:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000de4 <__aeabi_fcmpeq>:
 8000de4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000de8:	f7ff fff4 	bl	8000dd4 <__aeabi_cfcmpeq>
 8000dec:	bf0c      	ite	eq
 8000dee:	2001      	moveq	r0, #1
 8000df0:	2000      	movne	r0, #0
 8000df2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000df6:	bf00      	nop

08000df8 <__aeabi_fcmplt>:
 8000df8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dfc:	f7ff ffea 	bl	8000dd4 <__aeabi_cfcmpeq>
 8000e00:	bf34      	ite	cc
 8000e02:	2001      	movcc	r0, #1
 8000e04:	2000      	movcs	r0, #0
 8000e06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e0a:	bf00      	nop

08000e0c <__aeabi_fcmple>:
 8000e0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e10:	f7ff ffe0 	bl	8000dd4 <__aeabi_cfcmpeq>
 8000e14:	bf94      	ite	ls
 8000e16:	2001      	movls	r0, #1
 8000e18:	2000      	movhi	r0, #0
 8000e1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e1e:	bf00      	nop

08000e20 <__aeabi_fcmpge>:
 8000e20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e24:	f7ff ffd2 	bl	8000dcc <__aeabi_cfrcmple>
 8000e28:	bf94      	ite	ls
 8000e2a:	2001      	movls	r0, #1
 8000e2c:	2000      	movhi	r0, #0
 8000e2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e32:	bf00      	nop

08000e34 <__aeabi_fcmpgt>:
 8000e34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e38:	f7ff ffc8 	bl	8000dcc <__aeabi_cfrcmple>
 8000e3c:	bf34      	ite	cc
 8000e3e:	2001      	movcc	r0, #1
 8000e40:	2000      	movcs	r0, #0
 8000e42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e46:	bf00      	nop

08000e48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e4c:	f002 fd1a 	bl	8003884 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e50:	f000 f813 	bl	8000e7a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e54:	f000 fa24 	bl	80012a0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000e58:	f000 f8ae 	bl	8000fb8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000e5c:	f000 f958 	bl	8001110 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e60:	f000 f9ba 	bl	80011d8 <MX_TIM4_Init>
  MX_I2C2_Init();
 8000e64:	f000 f87a 	bl	8000f5c <MX_I2C2_Init>
  MX_TIM2_Init();
 8000e68:	f000 f8fe 	bl	8001068 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000e6c:	f000 f84a 	bl	8000f04 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
    setup();
 8000e70:	f001 fabe 	bl	80023f0 <setup>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      loop();
 8000e74:	f001 fb86 	bl	8002584 <loop>
 8000e78:	e7fc      	b.n	8000e74 <main+0x2c>

08000e7a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b090      	sub	sp, #64	; 0x40
 8000e7e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e80:	f107 0318 	add.w	r3, r7, #24
 8000e84:	2228      	movs	r2, #40	; 0x28
 8000e86:	2100      	movs	r1, #0
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f005 f9c9 	bl	8006220 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ea0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ea4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eb6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000eb8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ebe:	f107 0318 	add.w	r3, r7, #24
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f003 fea0 	bl	8004c08 <HAL_RCC_OscConfig>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ece:	f000 fab7 	bl	8001440 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed2:	230f      	movs	r3, #15
 8000ed4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ee2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ee8:	1d3b      	adds	r3, r7, #4
 8000eea:	2101      	movs	r1, #1
 8000eec:	4618      	mov	r0, r3
 8000eee:	f004 f90d 	bl	800510c <HAL_RCC_ClockConfig>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ef8:	f000 faa2 	bl	8001440 <Error_Handler>
  }
}
 8000efc:	bf00      	nop
 8000efe:	3740      	adds	r7, #64	; 0x40
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* TIM4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	201e      	movs	r0, #30
 8000f0e:	f002 fe16 	bl	8003b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f12:	201e      	movs	r0, #30
 8000f14:	f002 fe2f 	bl	8003b76 <HAL_NVIC_EnableIRQ>
  /* EXTI2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2105      	movs	r1, #5
 8000f1c:	2008      	movs	r0, #8
 8000f1e:	f002 fe0e 	bl	8003b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000f22:	2008      	movs	r0, #8
 8000f24:	f002 fe27 	bl	8003b76 <HAL_NVIC_EnableIRQ>
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2102      	movs	r1, #2
 8000f2c:	2009      	movs	r0, #9
 8000f2e:	f002 fe06 	bl	8003b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000f32:	2009      	movs	r0, #9
 8000f34:	f002 fe1f 	bl	8003b76 <HAL_NVIC_EnableIRQ>
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2102      	movs	r1, #2
 8000f3c:	200a      	movs	r0, #10
 8000f3e:	f002 fdfe 	bl	8003b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000f42:	200a      	movs	r0, #10
 8000f44:	f002 fe17 	bl	8003b76 <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2102      	movs	r1, #2
 8000f4c:	2017      	movs	r0, #23
 8000f4e:	f002 fdf6 	bl	8003b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f52:	2017      	movs	r0, #23
 8000f54:	f002 fe0f 	bl	8003b76 <HAL_NVIC_EnableIRQ>
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <MX_I2C2_Init+0x50>)
 8000f62:	4a13      	ldr	r2, [pc, #76]	; (8000fb0 <MX_I2C2_Init+0x54>)
 8000f64:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000f66:	4b11      	ldr	r3, [pc, #68]	; (8000fac <MX_I2C2_Init+0x50>)
 8000f68:	4a12      	ldr	r2, [pc, #72]	; (8000fb4 <MX_I2C2_Init+0x58>)
 8000f6a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <MX_I2C2_Init+0x50>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000f72:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <MX_I2C2_Init+0x50>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <MX_I2C2_Init+0x50>)
 8000f7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f7e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f80:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <MX_I2C2_Init+0x50>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <MX_I2C2_Init+0x50>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f8c:	4b07      	ldr	r3, [pc, #28]	; (8000fac <MX_I2C2_Init+0x50>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <MX_I2C2_Init+0x50>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f98:	4804      	ldr	r0, [pc, #16]	; (8000fac <MX_I2C2_Init+0x50>)
 8000f9a:	f003 f9eb 	bl	8004374 <HAL_I2C_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000fa4:	f000 fa4c 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	200000a4 	.word	0x200000a4
 8000fb0:	40005800 	.word	0x40005800
 8000fb4:	000186a0 	.word	0x000186a0

08000fb8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08c      	sub	sp, #48	; 0x30
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fbe:	f107 030c 	add.w	r3, r7, #12
 8000fc2:	2224      	movs	r2, #36	; 0x24
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f005 f92a 	bl	8006220 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fcc:	1d3b      	adds	r3, r7, #4
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fd4:	4b22      	ldr	r3, [pc, #136]	; (8001060 <MX_TIM1_Init+0xa8>)
 8000fd6:	4a23      	ldr	r2, [pc, #140]	; (8001064 <MX_TIM1_Init+0xac>)
 8000fd8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000fda:	4b21      	ldr	r3, [pc, #132]	; (8001060 <MX_TIM1_Init+0xa8>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe0:	4b1f      	ldr	r3, [pc, #124]	; (8001060 <MX_TIM1_Init+0xa8>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000fe6:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <MX_TIM1_Init+0xa8>)
 8000fe8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fee:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <MX_TIM1_Init+0xa8>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ff4:	4b1a      	ldr	r3, [pc, #104]	; (8001060 <MX_TIM1_Init+0xa8>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ffa:	4b19      	ldr	r3, [pc, #100]	; (8001060 <MX_TIM1_Init+0xa8>)
 8000ffc:	2280      	movs	r2, #128	; 0x80
 8000ffe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001000:	2303      	movs	r3, #3
 8001002:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001004:	2300      	movs	r3, #0
 8001006:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001008:	2301      	movs	r3, #1
 800100a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800100c:	2300      	movs	r3, #0
 800100e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001010:	230a      	movs	r3, #10
 8001012:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001014:	2300      	movs	r3, #0
 8001016:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001018:	2301      	movs	r3, #1
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800101c:	2300      	movs	r3, #0
 800101e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001020:	230a      	movs	r3, #10
 8001022:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	4619      	mov	r1, r3
 800102a:	480d      	ldr	r0, [pc, #52]	; (8001060 <MX_TIM1_Init+0xa8>)
 800102c:	f004 fb36 	bl	800569c <HAL_TIM_Encoder_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001036:	f000 fa03 	bl	8001440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800103e:	2300      	movs	r3, #0
 8001040:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	4619      	mov	r1, r3
 8001046:	4806      	ldr	r0, [pc, #24]	; (8001060 <MX_TIM1_Init+0xa8>)
 8001048:	f005 f850 	bl	80060ec <HAL_TIMEx_MasterConfigSynchronization>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001052:	f000 f9f5 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001056:	bf00      	nop
 8001058:	3730      	adds	r7, #48	; 0x30
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200000f8 	.word	0x200000f8
 8001064:	40012c00 	.word	0x40012c00

08001068 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08c      	sub	sp, #48	; 0x30
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800106e:	f107 030c 	add.w	r3, r7, #12
 8001072:	2224      	movs	r2, #36	; 0x24
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f005 f8d2 	bl	8006220 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800107c:	1d3b      	adds	r3, r7, #4
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001084:	4b21      	ldr	r3, [pc, #132]	; (800110c <MX_TIM2_Init+0xa4>)
 8001086:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800108a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800108c:	4b1f      	ldr	r3, [pc, #124]	; (800110c <MX_TIM2_Init+0xa4>)
 800108e:	2200      	movs	r2, #0
 8001090:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001092:	4b1e      	ldr	r3, [pc, #120]	; (800110c <MX_TIM2_Init+0xa4>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001098:	4b1c      	ldr	r3, [pc, #112]	; (800110c <MX_TIM2_Init+0xa4>)
 800109a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800109e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a0:	4b1a      	ldr	r3, [pc, #104]	; (800110c <MX_TIM2_Init+0xa4>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a6:	4b19      	ldr	r3, [pc, #100]	; (800110c <MX_TIM2_Init+0xa4>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80010ac:	2301      	movs	r3, #1
 80010ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010b0:	2300      	movs	r3, #0
 80010b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010b4:	2301      	movs	r3, #1
 80010b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80010bc:	230a      	movs	r3, #10
 80010be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010c0:	2300      	movs	r3, #0
 80010c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010c4:	2301      	movs	r3, #1
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010c8:	2300      	movs	r3, #0
 80010ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80010cc:	230a      	movs	r3, #10
 80010ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80010d0:	f107 030c 	add.w	r3, r7, #12
 80010d4:	4619      	mov	r1, r3
 80010d6:	480d      	ldr	r0, [pc, #52]	; (800110c <MX_TIM2_Init+0xa4>)
 80010d8:	f004 fae0 	bl	800569c <HAL_TIM_Encoder_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80010e2:	f000 f9ad 	bl	8001440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e6:	2300      	movs	r3, #0
 80010e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	4619      	mov	r1, r3
 80010f2:	4806      	ldr	r0, [pc, #24]	; (800110c <MX_TIM2_Init+0xa4>)
 80010f4:	f004 fffa 	bl	80060ec <HAL_TIMEx_MasterConfigSynchronization>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80010fe:	f000 f99f 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001102:	bf00      	nop
 8001104:	3730      	adds	r7, #48	; 0x30
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000140 	.word	0x20000140

08001110 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	; 0x28
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001116:	f107 0320 	add.w	r3, r7, #32
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
 800112c:	611a      	str	r2, [r3, #16]
 800112e:	615a      	str	r2, [r3, #20]
 8001130:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001132:	4b27      	ldr	r3, [pc, #156]	; (80011d0 <MX_TIM3_Init+0xc0>)
 8001134:	4a27      	ldr	r2, [pc, #156]	; (80011d4 <MX_TIM3_Init+0xc4>)
 8001136:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48;
 8001138:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <MX_TIM3_Init+0xc0>)
 800113a:	2230      	movs	r2, #48	; 0x30
 800113c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113e:	4b24      	ldr	r3, [pc, #144]	; (80011d0 <MX_TIM3_Init+0xc0>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 8001144:	4b22      	ldr	r3, [pc, #136]	; (80011d0 <MX_TIM3_Init+0xc0>)
 8001146:	f240 12f3 	movw	r2, #499	; 0x1f3
 800114a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800114c:	4b20      	ldr	r3, [pc, #128]	; (80011d0 <MX_TIM3_Init+0xc0>)
 800114e:	2200      	movs	r2, #0
 8001150:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001152:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <MX_TIM3_Init+0xc0>)
 8001154:	2280      	movs	r2, #128	; 0x80
 8001156:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001158:	481d      	ldr	r0, [pc, #116]	; (80011d0 <MX_TIM3_Init+0xc0>)
 800115a:	f004 f9ad 	bl	80054b8 <HAL_TIM_PWM_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001164:	f000 f96c 	bl	8001440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001168:	2300      	movs	r3, #0
 800116a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800116c:	2300      	movs	r3, #0
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001170:	f107 0320 	add.w	r3, r7, #32
 8001174:	4619      	mov	r1, r3
 8001176:	4816      	ldr	r0, [pc, #88]	; (80011d0 <MX_TIM3_Init+0xc0>)
 8001178:	f004 ffb8 	bl	80060ec <HAL_TIMEx_MasterConfigSynchronization>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001182:	f000 f95d 	bl	8001440 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001186:	2360      	movs	r3, #96	; 0x60
 8001188:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	2200      	movs	r2, #0
 800119a:	4619      	mov	r1, r3
 800119c:	480c      	ldr	r0, [pc, #48]	; (80011d0 <MX_TIM3_Init+0xc0>)
 800119e:	f004 fcb5 	bl	8005b0c <HAL_TIM_PWM_ConfigChannel>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80011a8:	f000 f94a 	bl	8001440 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	2204      	movs	r2, #4
 80011b0:	4619      	mov	r1, r3
 80011b2:	4807      	ldr	r0, [pc, #28]	; (80011d0 <MX_TIM3_Init+0xc0>)
 80011b4:	f004 fcaa 	bl	8005b0c <HAL_TIM_PWM_ConfigChannel>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80011be:	f000 f93f 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011c2:	4803      	ldr	r0, [pc, #12]	; (80011d0 <MX_TIM3_Init+0xc0>)
 80011c4:	f000 fa50 	bl	8001668 <HAL_TIM_MspPostInit>

}
 80011c8:	bf00      	nop
 80011ca:	3728      	adds	r7, #40	; 0x28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000188 	.word	0x20000188
 80011d4:	40000400 	.word	0x40000400

080011d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	; 0x28
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011de:	f107 0320 	add.w	r3, r7, #32
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
 80011f4:	611a      	str	r2, [r3, #16]
 80011f6:	615a      	str	r2, [r3, #20]
 80011f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011fa:	4b27      	ldr	r3, [pc, #156]	; (8001298 <MX_TIM4_Init+0xc0>)
 80011fc:	4a27      	ldr	r2, [pc, #156]	; (800129c <MX_TIM4_Init+0xc4>)
 80011fe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48;
 8001200:	4b25      	ldr	r3, [pc, #148]	; (8001298 <MX_TIM4_Init+0xc0>)
 8001202:	2230      	movs	r2, #48	; 0x30
 8001204:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001206:	4b24      	ldr	r3, [pc, #144]	; (8001298 <MX_TIM4_Init+0xc0>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 800120c:	4b22      	ldr	r3, [pc, #136]	; (8001298 <MX_TIM4_Init+0xc0>)
 800120e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001212:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001214:	4b20      	ldr	r3, [pc, #128]	; (8001298 <MX_TIM4_Init+0xc0>)
 8001216:	2200      	movs	r2, #0
 8001218:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800121a:	4b1f      	ldr	r3, [pc, #124]	; (8001298 <MX_TIM4_Init+0xc0>)
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001220:	481d      	ldr	r0, [pc, #116]	; (8001298 <MX_TIM4_Init+0xc0>)
 8001222:	f004 f949 	bl	80054b8 <HAL_TIM_PWM_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800122c:	f000 f908 	bl	8001440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001230:	2300      	movs	r3, #0
 8001232:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001238:	f107 0320 	add.w	r3, r7, #32
 800123c:	4619      	mov	r1, r3
 800123e:	4816      	ldr	r0, [pc, #88]	; (8001298 <MX_TIM4_Init+0xc0>)
 8001240:	f004 ff54 	bl	80060ec <HAL_TIMEx_MasterConfigSynchronization>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800124a:	f000 f8f9 	bl	8001440 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800124e:	2360      	movs	r3, #96	; 0x60
 8001250:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	2204      	movs	r2, #4
 8001262:	4619      	mov	r1, r3
 8001264:	480c      	ldr	r0, [pc, #48]	; (8001298 <MX_TIM4_Init+0xc0>)
 8001266:	f004 fc51 	bl	8005b0c <HAL_TIM_PWM_ConfigChannel>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001270:	f000 f8e6 	bl	8001440 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	2208      	movs	r2, #8
 8001278:	4619      	mov	r1, r3
 800127a:	4807      	ldr	r0, [pc, #28]	; (8001298 <MX_TIM4_Init+0xc0>)
 800127c:	f004 fc46 	bl	8005b0c <HAL_TIM_PWM_ConfigChannel>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001286:	f000 f8db 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800128a:	4803      	ldr	r0, [pc, #12]	; (8001298 <MX_TIM4_Init+0xc0>)
 800128c:	f000 f9ec 	bl	8001668 <HAL_TIM_MspPostInit>

}
 8001290:	bf00      	nop
 8001292:	3728      	adds	r7, #40	; 0x28
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	200001d0 	.word	0x200001d0
 800129c:	40000800 	.word	0x40000800

080012a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a6:	f107 0310 	add.w	r3, r7, #16
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b4:	4b5d      	ldr	r3, [pc, #372]	; (800142c <MX_GPIO_Init+0x18c>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	4a5c      	ldr	r2, [pc, #368]	; (800142c <MX_GPIO_Init+0x18c>)
 80012ba:	f043 0310 	orr.w	r3, r3, #16
 80012be:	6193      	str	r3, [r2, #24]
 80012c0:	4b5a      	ldr	r3, [pc, #360]	; (800142c <MX_GPIO_Init+0x18c>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	f003 0310 	and.w	r3, r3, #16
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012cc:	4b57      	ldr	r3, [pc, #348]	; (800142c <MX_GPIO_Init+0x18c>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	4a56      	ldr	r2, [pc, #344]	; (800142c <MX_GPIO_Init+0x18c>)
 80012d2:	f043 0320 	orr.w	r3, r3, #32
 80012d6:	6193      	str	r3, [r2, #24]
 80012d8:	4b54      	ldr	r3, [pc, #336]	; (800142c <MX_GPIO_Init+0x18c>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	f003 0320 	and.w	r3, r3, #32
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e4:	4b51      	ldr	r3, [pc, #324]	; (800142c <MX_GPIO_Init+0x18c>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	4a50      	ldr	r2, [pc, #320]	; (800142c <MX_GPIO_Init+0x18c>)
 80012ea:	f043 0304 	orr.w	r3, r3, #4
 80012ee:	6193      	str	r3, [r2, #24]
 80012f0:	4b4e      	ldr	r3, [pc, #312]	; (800142c <MX_GPIO_Init+0x18c>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	f003 0304 	and.w	r3, r3, #4
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fc:	4b4b      	ldr	r3, [pc, #300]	; (800142c <MX_GPIO_Init+0x18c>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	4a4a      	ldr	r2, [pc, #296]	; (800142c <MX_GPIO_Init+0x18c>)
 8001302:	f043 0308 	orr.w	r3, r3, #8
 8001306:	6193      	str	r3, [r2, #24]
 8001308:	4b48      	ldr	r3, [pc, #288]	; (800142c <MX_GPIO_Init+0x18c>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	f003 0308 	and.w	r3, r3, #8
 8001310:	603b      	str	r3, [r7, #0]
 8001312:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Y10_Pin|Y11_Pin|Y7_Pin, GPIO_PIN_RESET);
 8001314:	2200      	movs	r2, #0
 8001316:	f44f 6186 	mov.w	r1, #1072	; 0x430
 800131a:	4845      	ldr	r0, [pc, #276]	; (8001430 <MX_GPIO_Init+0x190>)
 800131c:	f002 ffe1 	bl	80042e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Y3_Pin|Y4_Pin|Y5_Pin|Y6_Pin, GPIO_PIN_RESET);
 8001320:	2200      	movs	r2, #0
 8001322:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001326:	4843      	ldr	r0, [pc, #268]	; (8001434 <MX_GPIO_Init+0x194>)
 8001328:	f002 ffdb 	bl	80042e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800132c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001330:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001332:	2303      	movs	r3, #3
 8001334:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001336:	f107 0310 	add.w	r3, r7, #16
 800133a:	4619      	mov	r1, r3
 800133c:	483e      	ldr	r0, [pc, #248]	; (8001438 <MX_GPIO_Init+0x198>)
 800133e:	f002 fe35 	bl	8003fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PROBE_Pin */
  GPIO_InitStruct.Pin = PROBE_Pin;
 8001342:	2304      	movs	r3, #4
 8001344:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001346:	4b3d      	ldr	r3, [pc, #244]	; (800143c <MX_GPIO_Init+0x19c>)
 8001348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800134a:	2302      	movs	r3, #2
 800134c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PROBE_GPIO_Port, &GPIO_InitStruct);
 800134e:	f107 0310 	add.w	r3, r7, #16
 8001352:	4619      	mov	r1, r3
 8001354:	4836      	ldr	r0, [pc, #216]	; (8001430 <MX_GPIO_Init+0x190>)
 8001356:	f002 fe29 	bl	8003fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_12;
 800135a:	f641 0308 	movw	r3, #6152	; 0x1808
 800135e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001360:	2303      	movs	r3, #3
 8001362:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001364:	f107 0310 	add.w	r3, r7, #16
 8001368:	4619      	mov	r1, r3
 800136a:	4831      	ldr	r0, [pc, #196]	; (8001430 <MX_GPIO_Init+0x190>)
 800136c:	f002 fe1e 	bl	8003fac <HAL_GPIO_Init>

  /*Configure GPIO pins : Y10_Pin Y11_Pin Y7_Pin */
  GPIO_InitStruct.Pin = Y10_Pin|Y11_Pin|Y7_Pin;
 8001370:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8001374:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001376:	2301      	movs	r3, #1
 8001378:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2302      	movs	r3, #2
 8001380:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001382:	f107 0310 	add.w	r3, r7, #16
 8001386:	4619      	mov	r1, r3
 8001388:	4829      	ldr	r0, [pc, #164]	; (8001430 <MX_GPIO_Init+0x190>)
 800138a:	f002 fe0f 	bl	8003fac <HAL_GPIO_Init>

  /*Configure GPIO pins : X0_Pin X1_Pin X7_Pin */
  GPIO_InitStruct.Pin = X0_Pin|X1_Pin|X7_Pin;
 800138e:	f240 2303 	movw	r3, #515	; 0x203
 8001392:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001398:	2301      	movs	r3, #1
 800139a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139c:	f107 0310 	add.w	r3, r7, #16
 80013a0:	4619      	mov	r1, r3
 80013a2:	4824      	ldr	r0, [pc, #144]	; (8001434 <MX_GPIO_Init+0x194>)
 80013a4:	f002 fe02 	bl	8003fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013a8:	2304      	movs	r3, #4
 80013aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ac:	2303      	movs	r3, #3
 80013ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b0:	f107 0310 	add.w	r3, r7, #16
 80013b4:	4619      	mov	r1, r3
 80013b6:	481f      	ldr	r0, [pc, #124]	; (8001434 <MX_GPIO_Init+0x194>)
 80013b8:	f002 fdf8 	bl	8003fac <HAL_GPIO_Init>

  /*Configure GPIO pins : Y3_Pin Y4_Pin Y5_Pin Y6_Pin */
  GPIO_InitStruct.Pin = Y3_Pin|Y4_Pin|Y5_Pin|Y6_Pin;
 80013bc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80013c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c2:	2301      	movs	r3, #1
 80013c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2302      	movs	r3, #2
 80013cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ce:	f107 0310 	add.w	r3, r7, #16
 80013d2:	4619      	mov	r1, r3
 80013d4:	4817      	ldr	r0, [pc, #92]	; (8001434 <MX_GPIO_Init+0x194>)
 80013d6:	f002 fde9 	bl	8003fac <HAL_GPIO_Init>

  /*Configure GPIO pin : X2_Pin */
  GPIO_InitStruct.Pin = X2_Pin;
 80013da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013e4:	2301      	movs	r3, #1
 80013e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(X2_GPIO_Port, &GPIO_InitStruct);
 80013e8:	f107 0310 	add.w	r3, r7, #16
 80013ec:	4619      	mov	r1, r3
 80013ee:	4810      	ldr	r0, [pc, #64]	; (8001430 <MX_GPIO_Init+0x190>)
 80013f0:	f002 fddc 	bl	8003fac <HAL_GPIO_Init>

  /*Configure GPIO pins : X3_Pin X4_Pin X5_Pin */
  GPIO_InitStruct.Pin = X3_Pin|X4_Pin|X5_Pin;
 80013f4:	2338      	movs	r3, #56	; 0x38
 80013f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80013f8:	4b10      	ldr	r3, [pc, #64]	; (800143c <MX_GPIO_Init+0x19c>)
 80013fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013fc:	2301      	movs	r3, #1
 80013fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001400:	f107 0310 	add.w	r3, r7, #16
 8001404:	4619      	mov	r1, r3
 8001406:	480b      	ldr	r0, [pc, #44]	; (8001434 <MX_GPIO_Init+0x194>)
 8001408:	f002 fdd0 	bl	8003fac <HAL_GPIO_Init>

  /*Configure GPIO pin : X6_Pin */
  GPIO_InitStruct.Pin = X6_Pin;
 800140c:	2340      	movs	r3, #64	; 0x40
 800140e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(X6_GPIO_Port, &GPIO_InitStruct);
 8001418:	f107 0310 	add.w	r3, r7, #16
 800141c:	4619      	mov	r1, r3
 800141e:	4805      	ldr	r0, [pc, #20]	; (8001434 <MX_GPIO_Init+0x194>)
 8001420:	f002 fdc4 	bl	8003fac <HAL_GPIO_Init>

}
 8001424:	bf00      	nop
 8001426:	3720      	adds	r7, #32
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40021000 	.word	0x40021000
 8001430:	40010800 	.word	0x40010800
 8001434:	40010c00 	.word	0x40010c00
 8001438:	40011000 	.word	0x40011000
 800143c:	10310000 	.word	0x10310000

08001440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001444:	b672      	cpsid	i
}
 8001446:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001448:	e7fe      	b.n	8001448 <Error_Handler+0x8>
	...

0800144c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001452:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <HAL_MspInit+0x5c>)
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	4a14      	ldr	r2, [pc, #80]	; (80014a8 <HAL_MspInit+0x5c>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6193      	str	r3, [r2, #24]
 800145e:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <HAL_MspInit+0x5c>)
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800146a:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <HAL_MspInit+0x5c>)
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	4a0e      	ldr	r2, [pc, #56]	; (80014a8 <HAL_MspInit+0x5c>)
 8001470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001474:	61d3      	str	r3, [r2, #28]
 8001476:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <HAL_MspInit+0x5c>)
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001482:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <HAL_MspInit+0x60>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	4a04      	ldr	r2, [pc, #16]	; (80014ac <HAL_MspInit+0x60>)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800149e:	bf00      	nop
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr
 80014a8:	40021000 	.word	0x40021000
 80014ac:	40010000 	.word	0x40010000

080014b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b088      	sub	sp, #32
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	f107 0310 	add.w	r3, r7, #16
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a16      	ldr	r2, [pc, #88]	; (8001524 <HAL_I2C_MspInit+0x74>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d124      	bne.n	800151a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d0:	4b15      	ldr	r3, [pc, #84]	; (8001528 <HAL_I2C_MspInit+0x78>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	4a14      	ldr	r2, [pc, #80]	; (8001528 <HAL_I2C_MspInit+0x78>)
 80014d6:	f043 0308 	orr.w	r3, r3, #8
 80014da:	6193      	str	r3, [r2, #24]
 80014dc:	4b12      	ldr	r3, [pc, #72]	; (8001528 <HAL_I2C_MspInit+0x78>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	f003 0308 	and.w	r3, r3, #8
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 80014e8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ee:	2312      	movs	r3, #18
 80014f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014f2:	2303      	movs	r3, #3
 80014f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f6:	f107 0310 	add.w	r3, r7, #16
 80014fa:	4619      	mov	r1, r3
 80014fc:	480b      	ldr	r0, [pc, #44]	; (800152c <HAL_I2C_MspInit+0x7c>)
 80014fe:	f002 fd55 	bl	8003fac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001502:	4b09      	ldr	r3, [pc, #36]	; (8001528 <HAL_I2C_MspInit+0x78>)
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	4a08      	ldr	r2, [pc, #32]	; (8001528 <HAL_I2C_MspInit+0x78>)
 8001508:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800150c:	61d3      	str	r3, [r2, #28]
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_I2C_MspInit+0x78>)
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800151a:	bf00      	nop
 800151c:	3720      	adds	r7, #32
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40005800 	.word	0x40005800
 8001528:	40021000 	.word	0x40021000
 800152c:	40010c00 	.word	0x40010c00

08001530 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	; 0x28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 0318 	add.w	r3, r7, #24
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a2b      	ldr	r2, [pc, #172]	; (80015f8 <HAL_TIM_Encoder_MspInit+0xc8>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d125      	bne.n	800159c <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001550:	4b2a      	ldr	r3, [pc, #168]	; (80015fc <HAL_TIM_Encoder_MspInit+0xcc>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	4a29      	ldr	r2, [pc, #164]	; (80015fc <HAL_TIM_Encoder_MspInit+0xcc>)
 8001556:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800155a:	6193      	str	r3, [r2, #24]
 800155c:	4b27      	ldr	r3, [pc, #156]	; (80015fc <HAL_TIM_Encoder_MspInit+0xcc>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001568:	4b24      	ldr	r3, [pc, #144]	; (80015fc <HAL_TIM_Encoder_MspInit+0xcc>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	4a23      	ldr	r2, [pc, #140]	; (80015fc <HAL_TIM_Encoder_MspInit+0xcc>)
 800156e:	f043 0304 	orr.w	r3, r3, #4
 8001572:	6193      	str	r3, [r2, #24]
 8001574:	4b21      	ldr	r3, [pc, #132]	; (80015fc <HAL_TIM_Encoder_MspInit+0xcc>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ECD_1A_Pin|ECD_1B_Pin;
 8001580:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158e:	f107 0318 	add.w	r3, r7, #24
 8001592:	4619      	mov	r1, r3
 8001594:	481a      	ldr	r0, [pc, #104]	; (8001600 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001596:	f002 fd09 	bl	8003fac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800159a:	e028      	b.n	80015ee <HAL_TIM_Encoder_MspInit+0xbe>
  else if(htim_encoder->Instance==TIM2)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015a4:	d123      	bne.n	80015ee <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <HAL_TIM_Encoder_MspInit+0xcc>)
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	4a14      	ldr	r2, [pc, #80]	; (80015fc <HAL_TIM_Encoder_MspInit+0xcc>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	61d3      	str	r3, [r2, #28]
 80015b2:	4b12      	ldr	r3, [pc, #72]	; (80015fc <HAL_TIM_Encoder_MspInit+0xcc>)
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015be:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <HAL_TIM_Encoder_MspInit+0xcc>)
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	4a0e      	ldr	r2, [pc, #56]	; (80015fc <HAL_TIM_Encoder_MspInit+0xcc>)
 80015c4:	f043 0304 	orr.w	r3, r3, #4
 80015c8:	6193      	str	r3, [r2, #24]
 80015ca:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <HAL_TIM_Encoder_MspInit+0xcc>)
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	f003 0304 	and.w	r3, r3, #4
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ECD_2A_Pin|ECD_2B_Pin;
 80015d6:	2303      	movs	r3, #3
 80015d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e2:	f107 0318 	add.w	r3, r7, #24
 80015e6:	4619      	mov	r1, r3
 80015e8:	4805      	ldr	r0, [pc, #20]	; (8001600 <HAL_TIM_Encoder_MspInit+0xd0>)
 80015ea:	f002 fcdf 	bl	8003fac <HAL_GPIO_Init>
}
 80015ee:	bf00      	nop
 80015f0:	3728      	adds	r7, #40	; 0x28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40012c00 	.word	0x40012c00
 80015fc:	40021000 	.word	0x40021000
 8001600:	40010800 	.word	0x40010800

08001604 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a12      	ldr	r2, [pc, #72]	; (800165c <HAL_TIM_PWM_MspInit+0x58>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d10c      	bne.n	8001630 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001616:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_TIM_PWM_MspInit+0x5c>)
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	4a11      	ldr	r2, [pc, #68]	; (8001660 <HAL_TIM_PWM_MspInit+0x5c>)
 800161c:	f043 0302 	orr.w	r3, r3, #2
 8001620:	61d3      	str	r3, [r2, #28]
 8001622:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <HAL_TIM_PWM_MspInit+0x5c>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800162e:	e010      	b.n	8001652 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a0b      	ldr	r2, [pc, #44]	; (8001664 <HAL_TIM_PWM_MspInit+0x60>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d10b      	bne.n	8001652 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <HAL_TIM_PWM_MspInit+0x5c>)
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	4a08      	ldr	r2, [pc, #32]	; (8001660 <HAL_TIM_PWM_MspInit+0x5c>)
 8001640:	f043 0304 	orr.w	r3, r3, #4
 8001644:	61d3      	str	r3, [r2, #28]
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_TIM_PWM_MspInit+0x5c>)
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	f003 0304 	and.w	r3, r3, #4
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
}
 8001652:	bf00      	nop
 8001654:	3714      	adds	r7, #20
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr
 800165c:	40000400 	.word	0x40000400
 8001660:	40021000 	.word	0x40021000
 8001664:	40000800 	.word	0x40000800

08001668 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b088      	sub	sp, #32
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 0310 	add.w	r3, r7, #16
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a1f      	ldr	r2, [pc, #124]	; (8001700 <HAL_TIM_MspPostInit+0x98>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d118      	bne.n	80016ba <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001688:	4b1e      	ldr	r3, [pc, #120]	; (8001704 <HAL_TIM_MspPostInit+0x9c>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	4a1d      	ldr	r2, [pc, #116]	; (8001704 <HAL_TIM_MspPostInit+0x9c>)
 800168e:	f043 0304 	orr.w	r3, r3, #4
 8001692:	6193      	str	r3, [r2, #24]
 8001694:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <HAL_TIM_MspPostInit+0x9c>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWM_1A_Pin|PWM_1B_Pin;
 80016a0:	23c0      	movs	r3, #192	; 0xc0
 80016a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a4:	2302      	movs	r3, #2
 80016a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a8:	2302      	movs	r3, #2
 80016aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ac:	f107 0310 	add.w	r3, r7, #16
 80016b0:	4619      	mov	r1, r3
 80016b2:	4815      	ldr	r0, [pc, #84]	; (8001708 <HAL_TIM_MspPostInit+0xa0>)
 80016b4:	f002 fc7a 	bl	8003fac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80016b8:	e01d      	b.n	80016f6 <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM4)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a13      	ldr	r2, [pc, #76]	; (800170c <HAL_TIM_MspPostInit+0xa4>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d118      	bne.n	80016f6 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c4:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <HAL_TIM_MspPostInit+0x9c>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	4a0e      	ldr	r2, [pc, #56]	; (8001704 <HAL_TIM_MspPostInit+0x9c>)
 80016ca:	f043 0308 	orr.w	r3, r3, #8
 80016ce:	6193      	str	r3, [r2, #24]
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <HAL_TIM_MspPostInit+0x9c>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	f003 0308 	and.w	r3, r3, #8
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_2A_Pin|PWM_2B_Pin;
 80016dc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80016e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e2:	2302      	movs	r3, #2
 80016e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	2302      	movs	r3, #2
 80016e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ea:	f107 0310 	add.w	r3, r7, #16
 80016ee:	4619      	mov	r1, r3
 80016f0:	4807      	ldr	r0, [pc, #28]	; (8001710 <HAL_TIM_MspPostInit+0xa8>)
 80016f2:	f002 fc5b 	bl	8003fac <HAL_GPIO_Init>
}
 80016f6:	bf00      	nop
 80016f8:	3720      	adds	r7, #32
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40000400 	.word	0x40000400
 8001704:	40021000 	.word	0x40021000
 8001708:	40010800 	.word	0x40010800
 800170c:	40000800 	.word	0x40000800
 8001710:	40010c00 	.word	0x40010c00

08001714 <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) {
 8001718:	e7fe      	b.n	8001718 <NMI_Handler+0x4>

0800171a <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1) {
 800171e:	e7fe      	b.n	800171e <HardFault_Handler+0x4>

08001720 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1) {
 8001724:	e7fe      	b.n	8001724 <MemManage_Handler+0x4>

08001726 <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1) {
 800172a:	e7fe      	b.n	800172a <BusFault_Handler+0x4>

0800172c <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1) {
 8001730:	e7fe      	b.n	8001730 <UsageFault_Handler+0x4>

08001732 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr

0800173e <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr

0800174a <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr

08001756 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8001756:	b580      	push	{r7, lr}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800175a:	f002 f8d9 	bl	8003910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}

08001762 <EXTI2_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles EXTI line2 interrupt.
 */
void EXTI2_IRQHandler(void) {
 8001762:	b580      	push	{r7, lr}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PROBE_Pin);
 8001766:	2004      	movs	r0, #4
 8001768:	f002 fdec 	bl	8004344 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}

08001770 <EXTI3_IRQHandler>:

/**
 * @brief This function handles EXTI line3 interrupt.
 */
void EXTI3_IRQHandler(void) {
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(X3_Pin);
 8001774:	2008      	movs	r0, #8
 8001776:	f002 fde5 	bl	8004344 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}

0800177e <EXTI4_IRQHandler>:

/**
 * @brief This function handles EXTI line4 interrupt.
 */
void EXTI4_IRQHandler(void) {
 800177e:	b580      	push	{r7, lr}
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(X4_Pin);
 8001782:	2010      	movs	r0, #16
 8001784:	f002 fdde 	bl	8004344 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}

0800178c <EXTI9_5_IRQHandler>:

/**
 * @brief This function handles EXTI line[9:5] interrupts.
 */
void EXTI9_5_IRQHandler(void) {
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(X5_Pin);
 8001790:	2020      	movs	r0, #32
 8001792:	f002 fdd7 	bl	8004344 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <TIM4_IRQHandler>:

/**
 * @brief This function handles TIM4 global interrupt.
 */
void TIM4_IRQHandler(void) {
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80017a0:	4802      	ldr	r0, [pc, #8]	; (80017ac <TIM4_IRQHandler+0x10>)
 80017a2:	f004 f8ab 	bl	80058fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	200001d0 	.word	0x200001d0

080017b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017b8:	4a14      	ldr	r2, [pc, #80]	; (800180c <_sbrk+0x5c>)
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <_sbrk+0x60>)
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017c4:	4b13      	ldr	r3, [pc, #76]	; (8001814 <_sbrk+0x64>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d102      	bne.n	80017d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017cc:	4b11      	ldr	r3, [pc, #68]	; (8001814 <_sbrk+0x64>)
 80017ce:	4a12      	ldr	r2, [pc, #72]	; (8001818 <_sbrk+0x68>)
 80017d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017d2:	4b10      	ldr	r3, [pc, #64]	; (8001814 <_sbrk+0x64>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4413      	add	r3, r2
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d207      	bcs.n	80017f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017e0:	f004 fcf4 	bl	80061cc <__errno>
 80017e4:	4603      	mov	r3, r0
 80017e6:	220c      	movs	r2, #12
 80017e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ea:	f04f 33ff 	mov.w	r3, #4294967295
 80017ee:	e009      	b.n	8001804 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <_sbrk+0x64>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017f6:	4b07      	ldr	r3, [pc, #28]	; (8001814 <_sbrk+0x64>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	4a05      	ldr	r2, [pc, #20]	; (8001814 <_sbrk+0x64>)
 8001800:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001802:	68fb      	ldr	r3, [r7, #12]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20005000 	.word	0x20005000
 8001810:	00000400 	.word	0x00000400
 8001814:	20000218 	.word	0x20000218
 8001818:	20000320 	.word	0x20000320

0800181c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <buttonInit>:
// ************************** Low Level Layer *****************************************************//
static ButtonState BUTTON_ReadPin(Button *Button) {
  return HAL_GPIO_ReadPin(Button->Port, Button->Pin);
}
// ************************** High Level Layer *****************************************************//
void buttonInit(Button *button, GPIO_TypeDef *BUTTON_PORT, uint16_t BUTTON_Pin) {
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	4613      	mov	r3, r2
 8001834:	80fb      	strh	r3, [r7, #6]
  button->Port = BUTTON_PORT;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	68ba      	ldr	r2, [r7, #8]
 800183a:	601a      	str	r2, [r3, #0]
  button->Pin = BUTTON_Pin;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	88fa      	ldrh	r2, [r7, #6]
 8001840:	809a      	strh	r2, [r3, #4]
}
 8001842:	bf00      	nop
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr

0800184c <isShortClick>:

/*
 * true if short click
 * false if long click
 * */
uint8_t isShortClick(Button *button) {
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  if (button->timePress > DEBOUND_TIME && button->timePress <= SINGLE_CLICK_TIME) {
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	2b32      	cmp	r3, #50	; 0x32
 800185a:	d906      	bls.n	800186a <isShortClick+0x1e>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001864:	d801      	bhi.n	800186a <isShortClick+0x1e>
	return 1;
 8001866:	2301      	movs	r3, #1
 8001868:	e007      	b.n	800187a <isShortClick+0x2e>
  } else if (button->timePress > SINGLE_CLICK_TIME)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001872:	d901      	bls.n	8001878 <isShortClick+0x2c>
	return 2;
 8001874:	2302      	movs	r3, #2
 8001876:	e000      	b.n	800187a <isShortClick+0x2e>
  else
	return 0;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr

08001884 <CLCD_Delay>:
 CLCD_I2C_WriteString(&LCD1,"hello anh em ");
 ******************************************************************************************************************/
#include "CLCD_I2C.h"

//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time) {
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	80fb      	strh	r3, [r7, #6]
  HAL_Delay(Time);
 800188e:	88fb      	ldrh	r3, [r7, #6]
 8001890:	4618      	mov	r0, r3
 8001892:	f002 f859 	bl	8003948 <HAL_Delay>
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name *LCD, uint8_t Data, uint8_t Mode) {
 800189e:	b580      	push	{r7, lr}
 80018a0:	b086      	sub	sp, #24
 80018a2:	af02      	add	r7, sp, #8
 80018a4:	6078      	str	r0, [r7, #4]
 80018a6:	460b      	mov	r3, r1
 80018a8:	70fb      	strb	r3, [r7, #3]
 80018aa:	4613      	mov	r3, r2
 80018ac:	70bb      	strb	r3, [r7, #2]
  char Data_H;
  char Data_L;
  uint8_t Data_I2C[4];
  Data_H = Data & 0xF0;
 80018ae:	78fb      	ldrb	r3, [r7, #3]
 80018b0:	f023 030f 	bic.w	r3, r3, #15
 80018b4:	73fb      	strb	r3, [r7, #15]
  Data_L = (Data << 4) & 0xF0;
 80018b6:	78fb      	ldrb	r3, [r7, #3]
 80018b8:	011b      	lsls	r3, r3, #4
 80018ba:	73bb      	strb	r3, [r7, #14]
  if (LCD->BACKLIGHT) {
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	7adb      	ldrb	r3, [r3, #11]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d007      	beq.n	80018d4 <CLCD_WriteI2C+0x36>
	Data_H |= LCD_BACKLIGHT;
 80018c4:	7bfb      	ldrb	r3, [r7, #15]
 80018c6:	f043 0308 	orr.w	r3, r3, #8
 80018ca:	73fb      	strb	r3, [r7, #15]
	Data_L |= LCD_BACKLIGHT;
 80018cc:	7bbb      	ldrb	r3, [r7, #14]
 80018ce:	f043 0308 	orr.w	r3, r3, #8
 80018d2:	73bb      	strb	r3, [r7, #14]
  }
  if (Mode == CLCD_DATA) {
 80018d4:	78bb      	ldrb	r3, [r7, #2]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d108      	bne.n	80018ec <CLCD_WriteI2C+0x4e>
	Data_H |= LCD_RS;
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	73fb      	strb	r3, [r7, #15]
	Data_L |= LCD_RS;
 80018e2:	7bbb      	ldrb	r3, [r7, #14]
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	73bb      	strb	r3, [r7, #14]
 80018ea:	e00a      	b.n	8001902 <CLCD_WriteI2C+0x64>
  } else if (Mode == CLCD_COMMAND) {
 80018ec:	78bb      	ldrb	r3, [r7, #2]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d107      	bne.n	8001902 <CLCD_WriteI2C+0x64>
	Data_H &= ~LCD_RS;
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
 80018f4:	f023 0301 	bic.w	r3, r3, #1
 80018f8:	73fb      	strb	r3, [r7, #15]
	Data_L &= ~LCD_RS;
 80018fa:	7bbb      	ldrb	r3, [r7, #14]
 80018fc:	f023 0301 	bic.w	r3, r3, #1
 8001900:	73bb      	strb	r3, [r7, #14]
  }
  Data_I2C[0] = Data_H | LCD_EN;
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	f043 0304 	orr.w	r3, r3, #4
 8001908:	b2db      	uxtb	r3, r3
 800190a:	723b      	strb	r3, [r7, #8]
//	CLCD_Delay(1);
  Data_I2C[1] = Data_H;
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	727b      	strb	r3, [r7, #9]
  Data_I2C[2] = Data_L | LCD_EN;
 8001910:	7bbb      	ldrb	r3, [r7, #14]
 8001912:	f043 0304 	orr.w	r3, r3, #4
 8001916:	b2db      	uxtb	r3, r3
 8001918:	72bb      	strb	r3, [r7, #10]
//	CLCD_Delay(1);
  Data_I2C[3] = Data_L;
 800191a:	7bbb      	ldrb	r3, [r7, #14]
 800191c:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t*) Data_I2C,
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6818      	ldr	r0, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	791b      	ldrb	r3, [r3, #4]
 8001926:	b299      	uxth	r1, r3
 8001928:	f107 0208 	add.w	r2, r7, #8
 800192c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	2304      	movs	r3, #4
 8001934:	f002 fe62 	bl	80045fc <HAL_I2C_Master_Transmit>
	  sizeof(Data_I2C), 1000);
}
 8001938:	bf00      	nop
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <CLCD_I2C_Init>:

//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name *LCD, I2C_HandleTypeDef *hi2c_CLCD,
	uint8_t Address, uint8_t Colums, uint8_t Rows) {
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	4611      	mov	r1, r2
 800194c:	461a      	mov	r2, r3
 800194e:	460b      	mov	r3, r1
 8001950:	71fb      	strb	r3, [r7, #7]
 8001952:	4613      	mov	r3, r2
 8001954:	71bb      	strb	r3, [r7, #6]
  LCD->I2C = hi2c_CLCD;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	68ba      	ldr	r2, [r7, #8]
 800195a:	601a      	str	r2, [r3, #0]
  LCD->ADDRESS = Address;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	79fa      	ldrb	r2, [r7, #7]
 8001960:	711a      	strb	r2, [r3, #4]
  LCD->COLUMS = Colums;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	79ba      	ldrb	r2, [r7, #6]
 8001966:	715a      	strb	r2, [r3, #5]
  LCD->ROWS = Rows;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	7e3a      	ldrb	r2, [r7, #24]
 800196c:	719a      	strb	r2, [r3, #6]

  LCD->FUNCTIONSET = LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2228      	movs	r2, #40	; 0x28
 8001972:	729a      	strb	r2, [r3, #10]
  LCD->ENTRYMODE = LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2206      	movs	r2, #6
 8001978:	71da      	strb	r2, [r3, #7]
  LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	220c      	movs	r2, #12
 800197e:	721a      	strb	r2, [r3, #8]
	  | LCD_BLINKOFF;
  LCD->CURSORSHIFT = LCD_CURSORSHIFT | LCD_CURSORMOVE | LCD_MOVERIGHT;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2214      	movs	r2, #20
 8001984:	725a      	strb	r2, [r3, #9]
  LCD->BACKLIGHT = LCD_BACKLIGHT;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2208      	movs	r2, #8
 800198a:	72da      	strb	r2, [r3, #11]

  CLCD_Delay(50);
 800198c:	2032      	movs	r0, #50	; 0x32
 800198e:	f7ff ff79 	bl	8001884 <CLCD_Delay>
  CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8001992:	2200      	movs	r2, #0
 8001994:	2133      	movs	r1, #51	; 0x33
 8001996:	68f8      	ldr	r0, [r7, #12]
 8001998:	f7ff ff81 	bl	800189e <CLCD_WriteI2C>
//	CLCD_Delay(5);
  CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 800199c:	2200      	movs	r2, #0
 800199e:	2133      	movs	r1, #51	; 0x33
 80019a0:	68f8      	ldr	r0, [r7, #12]
 80019a2:	f7ff ff7c 	bl	800189e <CLCD_WriteI2C>
  CLCD_Delay(5);
 80019a6:	2005      	movs	r0, #5
 80019a8:	f7ff ff6c 	bl	8001884 <CLCD_Delay>
  CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 80019ac:	2200      	movs	r2, #0
 80019ae:	2132      	movs	r1, #50	; 0x32
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f7ff ff74 	bl	800189e <CLCD_WriteI2C>
  CLCD_Delay(5);
 80019b6:	2005      	movs	r0, #5
 80019b8:	f7ff ff64 	bl	8001884 <CLCD_Delay>
  CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 80019bc:	2200      	movs	r2, #0
 80019be:	2120      	movs	r1, #32
 80019c0:	68f8      	ldr	r0, [r7, #12]
 80019c2:	f7ff ff6c 	bl	800189e <CLCD_WriteI2C>
  CLCD_Delay(5);
 80019c6:	2005      	movs	r0, #5
 80019c8:	f7ff ff5c 	bl	8001884 <CLCD_Delay>

  CLCD_WriteI2C(LCD, LCD->ENTRYMODE, CLCD_COMMAND);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	79db      	ldrb	r3, [r3, #7]
 80019d0:	2200      	movs	r2, #0
 80019d2:	4619      	mov	r1, r3
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f7ff ff62 	bl	800189e <CLCD_WriteI2C>
  CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	7a1b      	ldrb	r3, [r3, #8]
 80019de:	2200      	movs	r2, #0
 80019e0:	4619      	mov	r1, r3
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	f7ff ff5b 	bl	800189e <CLCD_WriteI2C>
  CLCD_WriteI2C(LCD, LCD->CURSORSHIFT, CLCD_COMMAND);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	7a5b      	ldrb	r3, [r3, #9]
 80019ec:	2200      	movs	r2, #0
 80019ee:	4619      	mov	r1, r3
 80019f0:	68f8      	ldr	r0, [r7, #12]
 80019f2:	f7ff ff54 	bl	800189e <CLCD_WriteI2C>
  CLCD_WriteI2C(LCD, LCD->FUNCTIONSET, CLCD_COMMAND);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	7a9b      	ldrb	r3, [r3, #10]
 80019fa:	2200      	movs	r2, #0
 80019fc:	4619      	mov	r1, r3
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f7ff ff4d 	bl	800189e <CLCD_WriteI2C>

  CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 8001a04:	2200      	movs	r2, #0
 8001a06:	2101      	movs	r1, #1
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f7ff ff48 	bl	800189e <CLCD_WriteI2C>
  CLCD_WriteI2C(LCD, LCD_RETURNHOME, CLCD_COMMAND);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2102      	movs	r1, #2
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f7ff ff43 	bl	800189e <CLCD_WriteI2C>
}
 8001a18:	bf00      	nop
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name *LCD, uint8_t Xpos, uint8_t Ypos) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	70fb      	strb	r3, [r7, #3]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	70bb      	strb	r3, [r7, #2]
  uint8_t DRAM_ADDRESS = 0x00;
 8001a30:	2300      	movs	r3, #0
 8001a32:	73fb      	strb	r3, [r7, #15]
  if (Xpos >= LCD->COLUMS) {
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	795b      	ldrb	r3, [r3, #5]
 8001a38:	78fa      	ldrb	r2, [r7, #3]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d303      	bcc.n	8001a46 <CLCD_I2C_SetCursor+0x26>
	Xpos = LCD->COLUMS - 1;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	795b      	ldrb	r3, [r3, #5]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	70fb      	strb	r3, [r7, #3]
  }
  if (Ypos >= LCD->ROWS) {
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	799b      	ldrb	r3, [r3, #6]
 8001a4a:	78ba      	ldrb	r2, [r7, #2]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d303      	bcc.n	8001a58 <CLCD_I2C_SetCursor+0x38>
	Ypos = LCD->ROWS - 1;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	799b      	ldrb	r3, [r3, #6]
 8001a54:	3b01      	subs	r3, #1
 8001a56:	70bb      	strb	r3, [r7, #2]
  }
  if (Ypos == 0) {
 8001a58:	78bb      	ldrb	r3, [r7, #2]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d102      	bne.n	8001a64 <CLCD_I2C_SetCursor+0x44>
	DRAM_ADDRESS = 0x00 + Xpos;
 8001a5e:	78fb      	ldrb	r3, [r7, #3]
 8001a60:	73fb      	strb	r3, [r7, #15]
 8001a62:	e013      	b.n	8001a8c <CLCD_I2C_SetCursor+0x6c>
  } else if (Ypos == 1) {
 8001a64:	78bb      	ldrb	r3, [r7, #2]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d103      	bne.n	8001a72 <CLCD_I2C_SetCursor+0x52>
	DRAM_ADDRESS = 0x40 + Xpos;
 8001a6a:	78fb      	ldrb	r3, [r7, #3]
 8001a6c:	3340      	adds	r3, #64	; 0x40
 8001a6e:	73fb      	strb	r3, [r7, #15]
 8001a70:	e00c      	b.n	8001a8c <CLCD_I2C_SetCursor+0x6c>
  } else if (Ypos == 2) {
 8001a72:	78bb      	ldrb	r3, [r7, #2]
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d103      	bne.n	8001a80 <CLCD_I2C_SetCursor+0x60>
	DRAM_ADDRESS = 0x14 + Xpos;
 8001a78:	78fb      	ldrb	r3, [r7, #3]
 8001a7a:	3314      	adds	r3, #20
 8001a7c:	73fb      	strb	r3, [r7, #15]
 8001a7e:	e005      	b.n	8001a8c <CLCD_I2C_SetCursor+0x6c>
  } else if (Ypos == 3) {
 8001a80:	78bb      	ldrb	r3, [r7, #2]
 8001a82:	2b03      	cmp	r3, #3
 8001a84:	d102      	bne.n	8001a8c <CLCD_I2C_SetCursor+0x6c>
	DRAM_ADDRESS = 0x54 + Xpos;
 8001a86:	78fb      	ldrb	r3, [r7, #3]
 8001a88:	3354      	adds	r3, #84	; 0x54
 8001a8a:	73fb      	strb	r3, [r7, #15]
  }
  CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR | DRAM_ADDRESS, CLCD_COMMAND);
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
 8001a8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2200      	movs	r2, #0
 8001a96:	4619      	mov	r1, r3
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff ff00 	bl	800189e <CLCD_WriteI2C>
}
 8001a9e:	bf00      	nop
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name *LCD, char character) {
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
 8001aae:	460b      	mov	r3, r1
 8001ab0:	70fb      	strb	r3, [r7, #3]
  CLCD_WriteI2C(LCD, character, CLCD_DATA);
 8001ab2:	78fb      	ldrb	r3, [r7, #3]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff fef0 	bl	800189e <CLCD_WriteI2C>
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name *LCD, char *String) {
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
 8001ace:	6039      	str	r1, [r7, #0]
  while (*String)
 8001ad0:	e007      	b.n	8001ae2 <CLCD_I2C_WriteString+0x1c>
	CLCD_I2C_WriteChar(LCD, *String++);
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	1c5a      	adds	r2, r3, #1
 8001ad6:	603a      	str	r2, [r7, #0]
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	4619      	mov	r1, r3
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff ffe2 	bl	8001aa6 <CLCD_I2C_WriteChar>
  while (*String)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f3      	bne.n	8001ad2 <CLCD_I2C_WriteString+0xc>
}
 8001aea:	bf00      	nop
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <CLCD_I2C_Clear>:
void CLCD_I2C_Clear(CLCD_I2C_Name *LCD) {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 8001afc:	2200      	movs	r2, #0
 8001afe:	2101      	movs	r1, #1
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff fecc 	bl	800189e <CLCD_WriteI2C>
  CLCD_Delay(5);
 8001b06:	2005      	movs	r0, #5
 8001b08:	f7ff febc 	bl	8001884 <CLCD_Delay>
}
 8001b0c:	bf00      	nop
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <CLCD_I2C_ReturnHome>:
void CLCD_I2C_ReturnHome(CLCD_I2C_Name *LCD) {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  CLCD_WriteI2C(LCD, LCD_RETURNHOME, CLCD_COMMAND);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2102      	movs	r1, #2
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7ff febc 	bl	800189e <CLCD_WriteI2C>
  CLCD_Delay(5);
 8001b26:	2005      	movs	r0, #5
 8001b28:	f7ff feac 	bl	8001884 <CLCD_Delay>
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <CLCD_I2C_CursorOn>:
void CLCD_I2C_CursorOn(CLCD_I2C_Name *LCD) {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  LCD->DISPLAYCTRL |= LCD_CURSORON;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	7a1b      	ldrb	r3, [r3, #8]
 8001b40:	f043 0302 	orr.w	r3, r3, #2
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	721a      	strb	r2, [r3, #8]
  CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	7a1b      	ldrb	r3, [r3, #8]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	4619      	mov	r1, r3
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff fea3 	bl	800189e <CLCD_WriteI2C>
}
 8001b58:	bf00      	nop
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <CLCD_I2C_CursorOff>:
void CLCD_I2C_CursorOff(CLCD_I2C_Name *LCD) {
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  LCD->DISPLAYCTRL &= ~LCD_CURSORON;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	7a1b      	ldrb	r3, [r3, #8]
 8001b6c:	f023 0302 	bic.w	r3, r3, #2
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	721a      	strb	r2, [r3, #8]
  CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	7a1b      	ldrb	r3, [r3, #8]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff fe8d 	bl	800189e <CLCD_WriteI2C>
}
 8001b84:	bf00      	nop
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <CLCD_I2C_BlinkOn>:
void CLCD_I2C_BlinkOn(CLCD_I2C_Name *LCD) {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  LCD->DISPLAYCTRL |= LCD_BLINKON;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	7a1b      	ldrb	r3, [r3, #8]
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	721a      	strb	r2, [r3, #8]
  CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	7a1b      	ldrb	r3, [r3, #8]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	4619      	mov	r1, r3
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff fe77 	bl	800189e <CLCD_WriteI2C>
}
 8001bb0:	bf00      	nop
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <CLCD_I2C_BlinkOff>:
void CLCD_I2C_BlinkOff(CLCD_I2C_Name *LCD) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  LCD->DISPLAYCTRL &= ~LCD_BLINKON;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	7a1b      	ldrb	r3, [r3, #8]
 8001bc4:	f023 0301 	bic.w	r3, r3, #1
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	721a      	strb	r2, [r3, #8]
  CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	7a1b      	ldrb	r3, [r3, #8]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff fe61 	bl	800189e <CLCD_WriteI2C>
}
 8001bdc:	bf00      	nop
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <LCD_Begin>:

/* Short code */
void LCD_Begin(CLCD_I2C_Name *LCD, I2C_HandleTypeDef *hi2c_CLCD,
	uint8_t Address, uint8_t Colums, uint8_t Rows) {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af02      	add	r7, sp, #8
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	4611      	mov	r1, r2
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	71fb      	strb	r3, [r7, #7]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	71bb      	strb	r3, [r7, #6]
  CLCD_I2C_Init(LCD, hi2c_CLCD, Address, Colums, Rows);
 8001bfa:	79b9      	ldrb	r1, [r7, #6]
 8001bfc:	79fa      	ldrb	r2, [r7, #7]
 8001bfe:	7e3b      	ldrb	r3, [r7, #24]
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	460b      	mov	r3, r1
 8001c04:	68b9      	ldr	r1, [r7, #8]
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f7ff fe9a 	bl	8001940 <CLCD_I2C_Init>
}
 8001c0c:	bf00      	nop
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <LCD_Set_Cursor>:
void LCD_Set_Cursor(CLCD_I2C_Name *LCD, u8 a, u8 b) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	70fb      	strb	r3, [r7, #3]
 8001c20:	4613      	mov	r3, r2
 8001c22:	70bb      	strb	r3, [r7, #2]
  a -= 1;
 8001c24:	78fb      	ldrb	r3, [r7, #3]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	70fb      	strb	r3, [r7, #3]
  b -= 1;
 8001c2a:	78bb      	ldrb	r3, [r7, #2]
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	70bb      	strb	r3, [r7, #2]
  CLCD_I2C_SetCursor(LCD, b, a);
 8001c30:	78fa      	ldrb	r2, [r7, #3]
 8001c32:	78bb      	ldrb	r3, [r7, #2]
 8001c34:	4619      	mov	r1, r3
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff fef2 	bl	8001a20 <CLCD_I2C_SetCursor>
}
 8001c3c:	bf00      	nop
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <LCD_Clear>:
void LCD_Print_Char(CLCD_I2C_Name *LCD, char data) {
  CLCD_I2C_WriteChar(LCD, data);
}
void LCD_Clear(CLCD_I2C_Name *LCD) {
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  CLCD_I2C_Clear(LCD);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f7ff ff51 	bl	8001af4 <CLCD_I2C_Clear>
  CLCD_I2C_ReturnHome(LCD);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff ff5e 	bl	8001b14 <CLCD_I2C_ReturnHome>
}
 8001c58:	bf00      	nop
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <LCD_Print_String>:
void LCD_Print_String(CLCD_I2C_Name *LCD, char *data) {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  CLCD_I2C_WriteString(LCD, data);
 8001c6a:	6839      	ldr	r1, [r7, #0]
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff ff2a 	bl	8001ac6 <CLCD_I2C_WriteString>
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <LCD_Print_String_At>:
  itoa(data, temp_buffer, 10);
  u8 i;
  for (i = 0; temp_buffer[i] != '\0'; i++)
	LCD_Print_Char(LCD, temp_buffer[i]); //Split the string using pointers and call the Char function
}
void LCD_Print_String_At(CLCD_I2C_Name *LCD, u8 a, u8 b, char *data) {
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b084      	sub	sp, #16
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	60f8      	str	r0, [r7, #12]
 8001c82:	607b      	str	r3, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	72fb      	strb	r3, [r7, #11]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	72bb      	strb	r3, [r7, #10]
  LCD_Set_Cursor(LCD, a, b);
 8001c8c:	7aba      	ldrb	r2, [r7, #10]
 8001c8e:	7afb      	ldrb	r3, [r7, #11]
 8001c90:	4619      	mov	r1, r3
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f7ff ffbe 	bl	8001c14 <LCD_Set_Cursor>
  LCD_Print_String(LCD, data);
 8001c98:	6879      	ldr	r1, [r7, #4]
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f7ff ffe0 	bl	8001c60 <LCD_Print_String>
}
 8001ca0:	bf00      	nop
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <HAL_GPIO_EXTI_Callback>:
#define BTN_START_CLICK HAL_GPIO_ReadPin(BTN_Start_GPIO_Port, BTN_Start_Pin) == GPIO_PIN_RESET
#define BTN_STOP_CLICK HAL_GPIO_ReadPin(BTN_Stop_GPIO_Port, BTN_Stop_Pin) == GPIO_PIN_RESET

#define PROBE_CLICK HAL_GPIO_ReadPin(PROBE_GPIO_Port, PROBE_Pin) == GPIO_PIN_RESET

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin) {
 8001cb2:	88fb      	ldrh	r3, [r7, #6]
 8001cb4:	3b04      	subs	r3, #4
 8001cb6:	2b1c      	cmp	r3, #28
 8001cb8:	f200 8283 	bhi.w	80021c2 <HAL_GPIO_EXTI_Callback+0x51a>
 8001cbc:	a201      	add	r2, pc, #4	; (adr r2, 8001cc4 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc2:	bf00      	nop
 8001cc4:	08002199 	.word	0x08002199
 8001cc8:	080021c3 	.word	0x080021c3
 8001ccc:	080021c3 	.word	0x080021c3
 8001cd0:	080021c3 	.word	0x080021c3
 8001cd4:	0800206d 	.word	0x0800206d
 8001cd8:	080021c3 	.word	0x080021c3
 8001cdc:	080021c3 	.word	0x080021c3
 8001ce0:	080021c3 	.word	0x080021c3
 8001ce4:	080021c3 	.word	0x080021c3
 8001ce8:	080021c3 	.word	0x080021c3
 8001cec:	080021c3 	.word	0x080021c3
 8001cf0:	080021c3 	.word	0x080021c3
 8001cf4:	08002107 	.word	0x08002107
 8001cf8:	080021c3 	.word	0x080021c3
 8001cfc:	080021c3 	.word	0x080021c3
 8001d00:	080021c3 	.word	0x080021c3
 8001d04:	080021c3 	.word	0x080021c3
 8001d08:	080021c3 	.word	0x080021c3
 8001d0c:	080021c3 	.word	0x080021c3
 8001d10:	080021c3 	.word	0x080021c3
 8001d14:	080021c3 	.word	0x080021c3
 8001d18:	080021c3 	.word	0x080021c3
 8001d1c:	080021c3 	.word	0x080021c3
 8001d20:	080021c3 	.word	0x080021c3
 8001d24:	080021c3 	.word	0x080021c3
 8001d28:	080021c3 	.word	0x080021c3
 8001d2c:	080021c3 	.word	0x080021c3
 8001d30:	080021c3 	.word	0x080021c3
 8001d34:	08001d39 	.word	0x08001d39
	case BTN_Mode_Pin: {
	  if (BTN_MODE_CLICK) {
 8001d38:	2120      	movs	r1, #32
 8001d3a:	48a1      	ldr	r0, [pc, #644]	; (8001fc0 <HAL_GPIO_EXTI_Callback+0x318>)
 8001d3c:	f002 faba 	bl	80042b4 <HAL_GPIO_ReadPin>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d105      	bne.n	8001d52 <HAL_GPIO_EXTI_Callback+0xaa>
		BTN_Mode.StartPress = HAL_GetTick(); //ms
 8001d46:	f001 fdf5 	bl	8003934 <HAL_GetTick>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	4a9d      	ldr	r2, [pc, #628]	; (8001fc4 <HAL_GPIO_EXTI_Callback+0x31c>)
 8001d4e:	60d3      	str	r3, [r2, #12]
			  state = 1;
			}
		  }
		}
	  }
	  break;
 8001d50:	e239      	b.n	80021c6 <HAL_GPIO_EXTI_Callback+0x51e>
		BTN_Mode.StopPress = HAL_GetTick();
 8001d52:	f001 fdef 	bl	8003934 <HAL_GetTick>
 8001d56:	4603      	mov	r3, r0
 8001d58:	4a9a      	ldr	r2, [pc, #616]	; (8001fc4 <HAL_GPIO_EXTI_Callback+0x31c>)
 8001d5a:	6113      	str	r3, [r2, #16]
		BTN_Mode.timePress = BTN_Mode.StopPress - BTN_Mode.StartPress;
 8001d5c:	4b99      	ldr	r3, [pc, #612]	; (8001fc4 <HAL_GPIO_EXTI_Callback+0x31c>)
 8001d5e:	691a      	ldr	r2, [r3, #16]
 8001d60:	4b98      	ldr	r3, [pc, #608]	; (8001fc4 <HAL_GPIO_EXTI_Callback+0x31c>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	4a97      	ldr	r2, [pc, #604]	; (8001fc4 <HAL_GPIO_EXTI_Callback+0x31c>)
 8001d68:	6093      	str	r3, [r2, #8]
		u8 check = isShortClick(&BTN_Mode);
 8001d6a:	4896      	ldr	r0, [pc, #600]	; (8001fc4 <HAL_GPIO_EXTI_Callback+0x31c>)
 8001d6c:	f7ff fd6e 	bl	800184c <isShortClick>
 8001d70:	4603      	mov	r3, r0
 8001d72:	73fb      	strb	r3, [r7, #15]
		if (check == 1) // MODE click
 8001d74:	7bfb      	ldrb	r3, [r7, #15]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	f040 810c 	bne.w	8001f94 <HAL_GPIO_EXTI_Callback+0x2ec>
		  if (state == 1 || state == 2) {
 8001d7c:	4b92      	ldr	r3, [pc, #584]	; (8001fc8 <HAL_GPIO_EXTI_Callback+0x320>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d004      	beq.n	8001d8e <HAL_GPIO_EXTI_Callback+0xe6>
 8001d84:	4b90      	ldr	r3, [pc, #576]	; (8001fc8 <HAL_GPIO_EXTI_Callback+0x320>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	f040 821c 	bne.w	80021c6 <HAL_GPIO_EXTI_Callback+0x51e>
			state = state + 1;
 8001d8e:	4b8e      	ldr	r3, [pc, #568]	; (8001fc8 <HAL_GPIO_EXTI_Callback+0x320>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	3301      	adds	r3, #1
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	4b8c      	ldr	r3, [pc, #560]	; (8001fc8 <HAL_GPIO_EXTI_Callback+0x320>)
 8001d98:	701a      	strb	r2, [r3, #0]
			if (state == 3) {
 8001d9a:	4b8b      	ldr	r3, [pc, #556]	; (8001fc8 <HAL_GPIO_EXTI_Callback+0x320>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b03      	cmp	r3, #3
 8001da0:	f040 80ae 	bne.w	8001f00 <HAL_GPIO_EXTI_Callback+0x258>
			  switch (menuCounter) {
 8001da4:	4b89      	ldr	r3, [pc, #548]	; (8001fcc <HAL_GPIO_EXTI_Callback+0x324>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2b03      	cmp	r3, #3
 8001daa:	f000 8091 	beq.w	8001ed0 <HAL_GPIO_EXTI_Callback+0x228>
 8001dae:	2b03      	cmp	r3, #3
 8001db0:	f300 80a1 	bgt.w	8001ef6 <HAL_GPIO_EXTI_Callback+0x24e>
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d002      	beq.n	8001dbe <HAL_GPIO_EXTI_Callback+0x116>
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d013      	beq.n	8001de4 <HAL_GPIO_EXTI_Callback+0x13c>
				  break;
 8001dbc:	e09b      	b.n	8001ef6 <HAL_GPIO_EXTI_Callback+0x24e>
				  menu1_selected = !menu1_selected; //we change the status of the variable to the opposite
 8001dbe:	4b84      	ldr	r3, [pc, #528]	; (8001fd0 <HAL_GPIO_EXTI_Callback+0x328>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	bf14      	ite	ne
 8001dc6:	2301      	movne	r3, #1
 8001dc8:	2300      	moveq	r3, #0
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	f083 0301 	eor.w	r3, r3, #1
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	4b7d      	ldr	r3, [pc, #500]	; (8001fd0 <HAL_GPIO_EXTI_Callback+0x328>)
 8001dda:	701a      	strb	r2, [r3, #0]
				  refreshSelection = true;
 8001ddc:	4b7d      	ldr	r3, [pc, #500]	; (8001fd4 <HAL_GPIO_EXTI_Callback+0x32c>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	701a      	strb	r2, [r3, #0]
				  break;
 8001de2:	e089      	b.n	8001ef8 <HAL_GPIO_EXTI_Callback+0x250>
				  if (menu2_selected == true) {
 8001de4:	4b7c      	ldr	r3, [pc, #496]	; (8001fd8 <HAL_GPIO_EXTI_Callback+0x330>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d06a      	beq.n	8001ec2 <HAL_GPIO_EXTI_Callback+0x21a>
					switch (menu2_subCounter) {
 8001dec:	4b7b      	ldr	r3, [pc, #492]	; (8001fdc <HAL_GPIO_EXTI_Callback+0x334>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	3b01      	subs	r3, #1
 8001df2:	2b03      	cmp	r3, #3
 8001df4:	d84a      	bhi.n	8001e8c <HAL_GPIO_EXTI_Callback+0x1e4>
 8001df6:	a201      	add	r2, pc, #4	; (adr r2, 8001dfc <HAL_GPIO_EXTI_Callback+0x154>)
 8001df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dfc:	08001e0d 	.word	0x08001e0d
 8001e00:	08001e2d 	.word	0x08001e2d
 8001e04:	08001e4d 	.word	0x08001e4d
 8001e08:	08001e6d 	.word	0x08001e6d
						firstMinSelected = !firstMinSelected;
 8001e0c:	4b74      	ldr	r3, [pc, #464]	; (8001fe0 <HAL_GPIO_EXTI_Callback+0x338>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	bf14      	ite	ne
 8001e14:	2301      	movne	r3, #1
 8001e16:	2300      	moveq	r3, #0
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	f083 0301 	eor.w	r3, r3, #1
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	4b6e      	ldr	r3, [pc, #440]	; (8001fe0 <HAL_GPIO_EXTI_Callback+0x338>)
 8001e28:	701a      	strb	r2, [r3, #0]
						break;
 8001e2a:	e02f      	b.n	8001e8c <HAL_GPIO_EXTI_Callback+0x1e4>
						lastMinSelected = !lastMinSelected;
 8001e2c:	4b6d      	ldr	r3, [pc, #436]	; (8001fe4 <HAL_GPIO_EXTI_Callback+0x33c>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	bf14      	ite	ne
 8001e34:	2301      	movne	r3, #1
 8001e36:	2300      	moveq	r3, #0
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	f083 0301 	eor.w	r3, r3, #1
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	4b67      	ldr	r3, [pc, #412]	; (8001fe4 <HAL_GPIO_EXTI_Callback+0x33c>)
 8001e48:	701a      	strb	r2, [r3, #0]
						break;
 8001e4a:	e01f      	b.n	8001e8c <HAL_GPIO_EXTI_Callback+0x1e4>
						firstSecSelected = !firstSecSelected;
 8001e4c:	4b66      	ldr	r3, [pc, #408]	; (8001fe8 <HAL_GPIO_EXTI_Callback+0x340>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	bf14      	ite	ne
 8001e54:	2301      	movne	r3, #1
 8001e56:	2300      	moveq	r3, #0
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	f083 0301 	eor.w	r3, r3, #1
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	4b60      	ldr	r3, [pc, #384]	; (8001fe8 <HAL_GPIO_EXTI_Callback+0x340>)
 8001e68:	701a      	strb	r2, [r3, #0]
						break;
 8001e6a:	e00f      	b.n	8001e8c <HAL_GPIO_EXTI_Callback+0x1e4>
						lastSecSelected = !lastSecSelected;
 8001e6c:	4b5f      	ldr	r3, [pc, #380]	; (8001fec <HAL_GPIO_EXTI_Callback+0x344>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	bf14      	ite	ne
 8001e74:	2301      	movne	r3, #1
 8001e76:	2300      	moveq	r3, #0
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	f083 0301 	eor.w	r3, r3, #1
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	4b59      	ldr	r3, [pc, #356]	; (8001fec <HAL_GPIO_EXTI_Callback+0x344>)
 8001e88:	701a      	strb	r2, [r3, #0]
						break;
 8001e8a:	bf00      	nop
					if (firstMinSelected || lastMinSelected || firstSecSelected
 8001e8c:	4b54      	ldr	r3, [pc, #336]	; (8001fe0 <HAL_GPIO_EXTI_Callback+0x338>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d10b      	bne.n	8001eac <HAL_GPIO_EXTI_Callback+0x204>
 8001e94:	4b53      	ldr	r3, [pc, #332]	; (8001fe4 <HAL_GPIO_EXTI_Callback+0x33c>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d107      	bne.n	8001eac <HAL_GPIO_EXTI_Callback+0x204>
 8001e9c:	4b52      	ldr	r3, [pc, #328]	; (8001fe8 <HAL_GPIO_EXTI_Callback+0x340>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d103      	bne.n	8001eac <HAL_GPIO_EXTI_Callback+0x204>
						|| lastSecSelected) {
 8001ea4:	4b51      	ldr	r3, [pc, #324]	; (8001fec <HAL_GPIO_EXTI_Callback+0x344>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d006      	beq.n	8001eba <HAL_GPIO_EXTI_Callback+0x212>
					  CLCD_I2C_CursorOff(&LCD);
 8001eac:	4850      	ldr	r0, [pc, #320]	; (8001ff0 <HAL_GPIO_EXTI_Callback+0x348>)
 8001eae:	f7ff fe57 	bl	8001b60 <CLCD_I2C_CursorOff>
					  CLCD_I2C_BlinkOn(&LCD);
 8001eb2:	484f      	ldr	r0, [pc, #316]	; (8001ff0 <HAL_GPIO_EXTI_Callback+0x348>)
 8001eb4:	f7ff fe6a 	bl	8001b8c <CLCD_I2C_BlinkOn>
				  break;
 8001eb8:	e01e      	b.n	8001ef8 <HAL_GPIO_EXTI_Callback+0x250>
					  CLCD_I2C_BlinkOff(&LCD);
 8001eba:	484d      	ldr	r0, [pc, #308]	; (8001ff0 <HAL_GPIO_EXTI_Callback+0x348>)
 8001ebc:	f7ff fe7c 	bl	8001bb8 <CLCD_I2C_BlinkOff>
				  break;
 8001ec0:	e01a      	b.n	8001ef8 <HAL_GPIO_EXTI_Callback+0x250>
					menu2_selected = true;
 8001ec2:	4b45      	ldr	r3, [pc, #276]	; (8001fd8 <HAL_GPIO_EXTI_Callback+0x330>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	701a      	strb	r2, [r3, #0]
					refreshSelection = true;
 8001ec8:	4b42      	ldr	r3, [pc, #264]	; (8001fd4 <HAL_GPIO_EXTI_Callback+0x32c>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	701a      	strb	r2, [r3, #0]
				  break;
 8001ece:	e013      	b.n	8001ef8 <HAL_GPIO_EXTI_Callback+0x250>
				  menu3_selected = !menu3_selected;
 8001ed0:	4b48      	ldr	r3, [pc, #288]	; (8001ff4 <HAL_GPIO_EXTI_Callback+0x34c>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	bf14      	ite	ne
 8001ed8:	2301      	movne	r3, #1
 8001eda:	2300      	moveq	r3, #0
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	f083 0301 	eor.w	r3, r3, #1
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	4b42      	ldr	r3, [pc, #264]	; (8001ff4 <HAL_GPIO_EXTI_Callback+0x34c>)
 8001eec:	701a      	strb	r2, [r3, #0]
				  refreshSelection = true;
 8001eee:	4b39      	ldr	r3, [pc, #228]	; (8001fd4 <HAL_GPIO_EXTI_Callback+0x32c>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	701a      	strb	r2, [r3, #0]
				  break;
 8001ef4:	e000      	b.n	8001ef8 <HAL_GPIO_EXTI_Callback+0x250>
				  break;
 8001ef6:	bf00      	nop
			  state = 2;
 8001ef8:	4b33      	ldr	r3, [pc, #204]	; (8001fc8 <HAL_GPIO_EXTI_Callback+0x320>)
 8001efa:	2202      	movs	r2, #2
 8001efc:	701a      	strb	r2, [r3, #0]
	  break;
 8001efe:	e162      	b.n	80021c6 <HAL_GPIO_EXTI_Callback+0x51e>
			} else if (state == 2) {
 8001f00:	4b31      	ldr	r3, [pc, #196]	; (8001fc8 <HAL_GPIO_EXTI_Callback+0x320>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	f040 815e 	bne.w	80021c6 <HAL_GPIO_EXTI_Callback+0x51e>
			  firstMin = (u32) ((u32) menu2_value / 60) / 10;
 8001f0a:	4b3b      	ldr	r3, [pc, #236]	; (8001ff8 <HAL_GPIO_EXTI_Callback+0x350>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a3b      	ldr	r2, [pc, #236]	; (8001ffc <HAL_GPIO_EXTI_Callback+0x354>)
 8001f10:	fba2 2303 	umull	r2, r3, r2, r3
 8001f14:	099b      	lsrs	r3, r3, #6
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	4b39      	ldr	r3, [pc, #228]	; (8002000 <HAL_GPIO_EXTI_Callback+0x358>)
 8001f1a:	701a      	strb	r2, [r3, #0]
			  lastMin = (u32) ((u32) menu2_value / 60) % 10;
 8001f1c:	4b36      	ldr	r3, [pc, #216]	; (8001ff8 <HAL_GPIO_EXTI_Callback+0x350>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a38      	ldr	r2, [pc, #224]	; (8002004 <HAL_GPIO_EXTI_Callback+0x35c>)
 8001f22:	fba2 2303 	umull	r2, r3, r2, r3
 8001f26:	0959      	lsrs	r1, r3, #5
 8001f28:	4b37      	ldr	r3, [pc, #220]	; (8002008 <HAL_GPIO_EXTI_Callback+0x360>)
 8001f2a:	fba3 2301 	umull	r2, r3, r3, r1
 8001f2e:	08da      	lsrs	r2, r3, #3
 8001f30:	4613      	mov	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	1aca      	subs	r2, r1, r3
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	4b33      	ldr	r3, [pc, #204]	; (800200c <HAL_GPIO_EXTI_Callback+0x364>)
 8001f3e:	701a      	strb	r2, [r3, #0]
			  firstSec = (u32) ((u32) menu2_value % 60) / 10;
 8001f40:	4b2d      	ldr	r3, [pc, #180]	; (8001ff8 <HAL_GPIO_EXTI_Callback+0x350>)
 8001f42:	6819      	ldr	r1, [r3, #0]
 8001f44:	4b2f      	ldr	r3, [pc, #188]	; (8002004 <HAL_GPIO_EXTI_Callback+0x35c>)
 8001f46:	fba3 2301 	umull	r2, r3, r3, r1
 8001f4a:	095a      	lsrs	r2, r3, #5
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	011b      	lsls	r3, r3, #4
 8001f50:	1a9b      	subs	r3, r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	1aca      	subs	r2, r1, r3
 8001f56:	4b2c      	ldr	r3, [pc, #176]	; (8002008 <HAL_GPIO_EXTI_Callback+0x360>)
 8001f58:	fba3 2302 	umull	r2, r3, r3, r2
 8001f5c:	08db      	lsrs	r3, r3, #3
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	4b2b      	ldr	r3, [pc, #172]	; (8002010 <HAL_GPIO_EXTI_Callback+0x368>)
 8001f62:	701a      	strb	r2, [r3, #0]
			  lastSec = (u32) ((u32) menu2_value % 60) % 10;
 8001f64:	4b24      	ldr	r3, [pc, #144]	; (8001ff8 <HAL_GPIO_EXTI_Callback+0x350>)
 8001f66:	6819      	ldr	r1, [r3, #0]
 8001f68:	4b26      	ldr	r3, [pc, #152]	; (8002004 <HAL_GPIO_EXTI_Callback+0x35c>)
 8001f6a:	fba3 2301 	umull	r2, r3, r3, r1
 8001f6e:	095a      	lsrs	r2, r3, #5
 8001f70:	4613      	mov	r3, r2
 8001f72:	011b      	lsls	r3, r3, #4
 8001f74:	1a9b      	subs	r3, r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	1aca      	subs	r2, r1, r3
 8001f7a:	4b23      	ldr	r3, [pc, #140]	; (8002008 <HAL_GPIO_EXTI_Callback+0x360>)
 8001f7c:	fba3 1302 	umull	r1, r3, r3, r2
 8001f80:	08d9      	lsrs	r1, r3, #3
 8001f82:	460b      	mov	r3, r1
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	440b      	add	r3, r1
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	1ad1      	subs	r1, r2, r3
 8001f8c:	b2ca      	uxtb	r2, r1
 8001f8e:	4b21      	ldr	r3, [pc, #132]	; (8002014 <HAL_GPIO_EXTI_Callback+0x36c>)
 8001f90:	701a      	strb	r2, [r3, #0]
	  break;
 8001f92:	e118      	b.n	80021c6 <HAL_GPIO_EXTI_Callback+0x51e>
		else if (check == 2) {
 8001f94:	7bfb      	ldrb	r3, [r7, #15]
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	f040 8115 	bne.w	80021c6 <HAL_GPIO_EXTI_Callback+0x51e>
		  if (state == 2) {
 8001f9c:	4b0a      	ldr	r3, [pc, #40]	; (8001fc8 <HAL_GPIO_EXTI_Callback+0x320>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	f040 8110 	bne.w	80021c6 <HAL_GPIO_EXTI_Callback+0x51e>
			if (menu2_selected == true) {
 8001fa6:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <HAL_GPIO_EXTI_Callback+0x330>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d058      	beq.n	8002060 <HAL_GPIO_EXTI_Callback+0x3b8>
			  if (firstMinSelected) {
 8001fae:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <HAL_GPIO_EXTI_Callback+0x338>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d030      	beq.n	8002018 <HAL_GPIO_EXTI_Callback+0x370>
				firstMinSelected = false;
 8001fb6:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <HAL_GPIO_EXTI_Callback+0x338>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	701a      	strb	r2, [r3, #0]
 8001fbc:	e043      	b.n	8002046 <HAL_GPIO_EXTI_Callback+0x39e>
 8001fbe:	bf00      	nop
 8001fc0:	40010c00 	.word	0x40010c00
 8001fc4:	20000260 	.word	0x20000260
 8001fc8:	20000008 	.word	0x20000008
 8001fcc:	2000000a 	.word	0x2000000a
 8001fd0:	20000288 	.word	0x20000288
 8001fd4:	2000028f 	.word	0x2000028f
 8001fd8:	20000289 	.word	0x20000289
 8001fdc:	20000010 	.word	0x20000010
 8001fe0:	200002a8 	.word	0x200002a8
 8001fe4:	200002a9 	.word	0x200002a9
 8001fe8:	200002aa 	.word	0x200002aa
 8001fec:	200002ab 	.word	0x200002ab
 8001ff0:	2000022c 	.word	0x2000022c
 8001ff4:	2000028a 	.word	0x2000028a
 8001ff8:	20000278 	.word	0x20000278
 8001ffc:	1b4e81b5 	.word	0x1b4e81b5
 8002000:	20000284 	.word	0x20000284
 8002004:	88888889 	.word	0x88888889
 8002008:	cccccccd 	.word	0xcccccccd
 800200c:	20000285 	.word	0x20000285
 8002010:	20000286 	.word	0x20000286
 8002014:	20000287 	.word	0x20000287
			  } else if (lastMinSelected) {
 8002018:	4b70      	ldr	r3, [pc, #448]	; (80021dc <HAL_GPIO_EXTI_Callback+0x534>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d003      	beq.n	8002028 <HAL_GPIO_EXTI_Callback+0x380>
				lastMinSelected = false;
 8002020:	4b6e      	ldr	r3, [pc, #440]	; (80021dc <HAL_GPIO_EXTI_Callback+0x534>)
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]
 8002026:	e00e      	b.n	8002046 <HAL_GPIO_EXTI_Callback+0x39e>
			  } else if (firstSecSelected) {
 8002028:	4b6d      	ldr	r3, [pc, #436]	; (80021e0 <HAL_GPIO_EXTI_Callback+0x538>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <HAL_GPIO_EXTI_Callback+0x390>
				firstSecSelected = false;
 8002030:	4b6b      	ldr	r3, [pc, #428]	; (80021e0 <HAL_GPIO_EXTI_Callback+0x538>)
 8002032:	2200      	movs	r2, #0
 8002034:	701a      	strb	r2, [r3, #0]
 8002036:	e006      	b.n	8002046 <HAL_GPIO_EXTI_Callback+0x39e>
			  } else if (lastSecSelected) {
 8002038:	4b6a      	ldr	r3, [pc, #424]	; (80021e4 <HAL_GPIO_EXTI_Callback+0x53c>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d002      	beq.n	8002046 <HAL_GPIO_EXTI_Callback+0x39e>
				lastSecSelected = false;
 8002040:	4b68      	ldr	r3, [pc, #416]	; (80021e4 <HAL_GPIO_EXTI_Callback+0x53c>)
 8002042:	2200      	movs	r2, #0
 8002044:	701a      	strb	r2, [r3, #0]
			  CLCD_I2C_BlinkOff(&LCD);
 8002046:	4868      	ldr	r0, [pc, #416]	; (80021e8 <HAL_GPIO_EXTI_Callback+0x540>)
 8002048:	f7ff fdb6 	bl	8001bb8 <CLCD_I2C_BlinkOff>
			  CLCD_I2C_CursorOff(&LCD);
 800204c:	4866      	ldr	r0, [pc, #408]	; (80021e8 <HAL_GPIO_EXTI_Callback+0x540>)
 800204e:	f7ff fd87 	bl	8001b60 <CLCD_I2C_CursorOff>
			  menu2_selected = false;
 8002052:	4b66      	ldr	r3, [pc, #408]	; (80021ec <HAL_GPIO_EXTI_Callback+0x544>)
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
			  refreshSelection = true;
 8002058:	4b65      	ldr	r3, [pc, #404]	; (80021f0 <HAL_GPIO_EXTI_Callback+0x548>)
 800205a:	2201      	movs	r2, #1
 800205c:	701a      	strb	r2, [r3, #0]
	  break;
 800205e:	e0b2      	b.n	80021c6 <HAL_GPIO_EXTI_Callback+0x51e>
			  save_menu_value();
 8002060:	f001 fb3e 	bl	80036e0 <save_menu_value>
			  state = 1;
 8002064:	4b63      	ldr	r3, [pc, #396]	; (80021f4 <HAL_GPIO_EXTI_Callback+0x54c>)
 8002066:	2201      	movs	r2, #1
 8002068:	701a      	strb	r2, [r3, #0]
	  break;
 800206a:	e0ac      	b.n	80021c6 <HAL_GPIO_EXTI_Callback+0x51e>
	}

	case BTN_Start_Pin: {
	  if (BTN_START_CLICK) {
 800206c:	2108      	movs	r1, #8
 800206e:	4862      	ldr	r0, [pc, #392]	; (80021f8 <HAL_GPIO_EXTI_Callback+0x550>)
 8002070:	f002 f920 	bl	80042b4 <HAL_GPIO_ReadPin>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d105      	bne.n	8002086 <HAL_GPIO_EXTI_Callback+0x3de>
		BTN_Start.StartPress = HAL_GetTick();
 800207a:	f001 fc5b 	bl	8003934 <HAL_GetTick>
 800207e:	4603      	mov	r3, r0
 8002080:	4a5e      	ldr	r2, [pc, #376]	; (80021fc <HAL_GPIO_EXTI_Callback+0x554>)
 8002082:	60d3      	str	r3, [r2, #12]
			state = 1;
			save_menu_value();
		  }
		}
	  }
	  break;
 8002084:	e0a1      	b.n	80021ca <HAL_GPIO_EXTI_Callback+0x522>
		BTN_Start.StopPress = HAL_GetTick();
 8002086:	f001 fc55 	bl	8003934 <HAL_GetTick>
 800208a:	4603      	mov	r3, r0
 800208c:	4a5b      	ldr	r2, [pc, #364]	; (80021fc <HAL_GPIO_EXTI_Callback+0x554>)
 800208e:	6113      	str	r3, [r2, #16]
		BTN_Start.timePress = BTN_Start.StopPress - BTN_Start.StartPress;
 8002090:	4b5a      	ldr	r3, [pc, #360]	; (80021fc <HAL_GPIO_EXTI_Callback+0x554>)
 8002092:	691a      	ldr	r2, [r3, #16]
 8002094:	4b59      	ldr	r3, [pc, #356]	; (80021fc <HAL_GPIO_EXTI_Callback+0x554>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	4a58      	ldr	r2, [pc, #352]	; (80021fc <HAL_GPIO_EXTI_Callback+0x554>)
 800209c:	6093      	str	r3, [r2, #8]
		if (isShortClick(&BTN_Start) == 1) {
 800209e:	4857      	ldr	r0, [pc, #348]	; (80021fc <HAL_GPIO_EXTI_Callback+0x554>)
 80020a0:	f7ff fbd4 	bl	800184c <isShortClick>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	f040 808f 	bne.w	80021ca <HAL_GPIO_EXTI_Callback+0x522>
		  if (state == 1) {
 80020ac:	4b51      	ldr	r3, [pc, #324]	; (80021f4 <HAL_GPIO_EXTI_Callback+0x54c>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d11e      	bne.n	80020f2 <HAL_GPIO_EXTI_Callback+0x44a>
			state = 3;
 80020b4:	4b4f      	ldr	r3, [pc, #316]	; (80021f4 <HAL_GPIO_EXTI_Callback+0x54c>)
 80020b6:	2203      	movs	r2, #3
 80020b8:	701a      	strb	r2, [r3, #0]
			PROBE_ON = 0;
 80020ba:	4b51      	ldr	r3, [pc, #324]	; (8002200 <HAL_GPIO_EXTI_Callback+0x558>)
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
			reset_state();
 80020c0:	f001 fb02 	bl	80036c8 <reset_state>
			if (menu2_value == 1)
 80020c4:	4b4f      	ldr	r3, [pc, #316]	; (8002204 <HAL_GPIO_EXTI_Callback+0x55c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d109      	bne.n	80020e0 <HAL_GPIO_EXTI_Callback+0x438>
			  set_motor(1, -1, pwm);
 80020cc:	4b4e      	ldr	r3, [pc, #312]	; (8002208 <HAL_GPIO_EXTI_Callback+0x560>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	461a      	mov	r2, r3
 80020d4:	f04f 31ff 	mov.w	r1, #4294967295
 80020d8:	2001      	movs	r0, #1
 80020da:	f001 fa4b 	bl	8003574 <set_motor>
	  break;
 80020de:	e074      	b.n	80021ca <HAL_GPIO_EXTI_Callback+0x522>
			  set_motor(1, 1, pwm);
 80020e0:	4b49      	ldr	r3, [pc, #292]	; (8002208 <HAL_GPIO_EXTI_Callback+0x560>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	461a      	mov	r2, r3
 80020e8:	2101      	movs	r1, #1
 80020ea:	2001      	movs	r0, #1
 80020ec:	f001 fa42 	bl	8003574 <set_motor>
	  break;
 80020f0:	e06b      	b.n	80021ca <HAL_GPIO_EXTI_Callback+0x522>
		  } else if (state == 2) {
 80020f2:	4b40      	ldr	r3, [pc, #256]	; (80021f4 <HAL_GPIO_EXTI_Callback+0x54c>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d167      	bne.n	80021ca <HAL_GPIO_EXTI_Callback+0x522>
			state = 1;
 80020fa:	4b3e      	ldr	r3, [pc, #248]	; (80021f4 <HAL_GPIO_EXTI_Callback+0x54c>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	701a      	strb	r2, [r3, #0]
			save_menu_value();
 8002100:	f001 faee 	bl	80036e0 <save_menu_value>
	  break;
 8002104:	e061      	b.n	80021ca <HAL_GPIO_EXTI_Callback+0x522>
	}

	case BTN_Stop_Pin: {
	  if (BTN_STOP_CLICK) {
 8002106:	2110      	movs	r1, #16
 8002108:	483b      	ldr	r0, [pc, #236]	; (80021f8 <HAL_GPIO_EXTI_Callback+0x550>)
 800210a:	f002 f8d3 	bl	80042b4 <HAL_GPIO_ReadPin>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d105      	bne.n	8002120 <HAL_GPIO_EXTI_Callback+0x478>
		BTN_Stop.StartPress = HAL_GetTick();
 8002114:	f001 fc0e 	bl	8003934 <HAL_GetTick>
 8002118:	4603      	mov	r3, r0
 800211a:	4a3c      	ldr	r2, [pc, #240]	; (800220c <HAL_GPIO_EXTI_Callback+0x564>)
 800211c:	60d3      	str	r3, [r2, #12]
			LED_OFF();
			set_motor(2, 0, 0);
		  }
		}
	  }
	  break;
 800211e:	e056      	b.n	80021ce <HAL_GPIO_EXTI_Callback+0x526>
		BTN_Stop.StopPress = HAL_GetTick();
 8002120:	f001 fc08 	bl	8003934 <HAL_GetTick>
 8002124:	4603      	mov	r3, r0
 8002126:	4a39      	ldr	r2, [pc, #228]	; (800220c <HAL_GPIO_EXTI_Callback+0x564>)
 8002128:	6113      	str	r3, [r2, #16]
		BTN_Stop.timePress = BTN_Stop.StopPress - BTN_Stop.StartPress;
 800212a:	4b38      	ldr	r3, [pc, #224]	; (800220c <HAL_GPIO_EXTI_Callback+0x564>)
 800212c:	691a      	ldr	r2, [r3, #16]
 800212e:	4b37      	ldr	r3, [pc, #220]	; (800220c <HAL_GPIO_EXTI_Callback+0x564>)
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	4a35      	ldr	r2, [pc, #212]	; (800220c <HAL_GPIO_EXTI_Callback+0x564>)
 8002136:	6093      	str	r3, [r2, #8]
		if (isShortClick(&BTN_Stop)) {
 8002138:	4834      	ldr	r0, [pc, #208]	; (800220c <HAL_GPIO_EXTI_Callback+0x564>)
 800213a:	f7ff fb87 	bl	800184c <isShortClick>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d044      	beq.n	80021ce <HAL_GPIO_EXTI_Callback+0x526>
		  if (state == 3) {
 8002144:	4b2b      	ldr	r3, [pc, #172]	; (80021f4 <HAL_GPIO_EXTI_Callback+0x54c>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b03      	cmp	r3, #3
 800214a:	d10a      	bne.n	8002162 <HAL_GPIO_EXTI_Callback+0x4ba>
			set_motor(2, 0, 0);
 800214c:	2200      	movs	r2, #0
 800214e:	2100      	movs	r1, #0
 8002150:	2002      	movs	r0, #2
 8002152:	f001 fa0f 	bl	8003574 <set_motor>
			state = 4;
 8002156:	4b27      	ldr	r3, [pc, #156]	; (80021f4 <HAL_GPIO_EXTI_Callback+0x54c>)
 8002158:	2204      	movs	r2, #4
 800215a:	701a      	strb	r2, [r3, #0]
			stopCmd();
 800215c:	f001 fb30 	bl	80037c0 <stopCmd>
	  break;
 8002160:	e035      	b.n	80021ce <HAL_GPIO_EXTI_Callback+0x526>
		  } else if (state == 4) {
 8002162:	4b24      	ldr	r3, [pc, #144]	; (80021f4 <HAL_GPIO_EXTI_Callback+0x54c>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b04      	cmp	r3, #4
 8002168:	d131      	bne.n	80021ce <HAL_GPIO_EXTI_Callback+0x526>
			PROBE_ON = 0;
 800216a:	4b25      	ldr	r3, [pc, #148]	; (8002200 <HAL_GPIO_EXTI_Callback+0x558>)
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
			nLoop = 0;
 8002170:	4b27      	ldr	r3, [pc, #156]	; (8002210 <HAL_GPIO_EXTI_Callback+0x568>)
 8002172:	2200      	movs	r2, #0
 8002174:	801a      	strh	r2, [r3, #0]
			state = 1;
 8002176:	4b1f      	ldr	r3, [pc, #124]	; (80021f4 <HAL_GPIO_EXTI_Callback+0x54c>)
 8002178:	2201      	movs	r2, #1
 800217a:	701a      	strb	r2, [r3, #0]
			nSec = 0;
 800217c:	4b25      	ldr	r3, [pc, #148]	; (8002214 <HAL_GPIO_EXTI_Callback+0x56c>)
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
			refreshLCD = true;
 8002182:	4b25      	ldr	r3, [pc, #148]	; (8002218 <HAL_GPIO_EXTI_Callback+0x570>)
 8002184:	2201      	movs	r2, #1
 8002186:	701a      	strb	r2, [r3, #0]
			LED_OFF();
 8002188:	f000 fe9a 	bl	8002ec0 <LED_OFF>
			set_motor(2, 0, 0);
 800218c:	2200      	movs	r2, #0
 800218e:	2100      	movs	r1, #0
 8002190:	2002      	movs	r0, #2
 8002192:	f001 f9ef 	bl	8003574 <set_motor>
	  break;
 8002196:	e01a      	b.n	80021ce <HAL_GPIO_EXTI_Callback+0x526>
	}

	case PROBE_Pin:
	  if (HAL_GPIO_ReadPin(PROBE_GPIO_Port, PROBE_Pin) == GPIO_PIN_SET) {
 8002198:	2104      	movs	r1, #4
 800219a:	4820      	ldr	r0, [pc, #128]	; (800221c <HAL_GPIO_EXTI_Callback+0x574>)
 800219c:	f002 f88a 	bl	80042b4 <HAL_GPIO_ReadPin>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d109      	bne.n	80021ba <HAL_GPIO_EXTI_Callback+0x512>
		if (state == 3)
 80021a6:	4b13      	ldr	r3, [pc, #76]	; (80021f4 <HAL_GPIO_EXTI_Callback+0x54c>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b03      	cmp	r3, #3
 80021ac:	d111      	bne.n	80021d2 <HAL_GPIO_EXTI_Callback+0x52a>
		  PROBE_ON = HAL_GetTick();
 80021ae:	f001 fbc1 	bl	8003934 <HAL_GetTick>
 80021b2:	4603      	mov	r3, r0
 80021b4:	4a12      	ldr	r2, [pc, #72]	; (8002200 <HAL_GPIO_EXTI_Callback+0x558>)
 80021b6:	6013      	str	r3, [r2, #0]
	  } else // PROBE_CLICK
	  {
		PROBE_ON = 0;
	  }
	  break;
 80021b8:	e00b      	b.n	80021d2 <HAL_GPIO_EXTI_Callback+0x52a>
		PROBE_ON = 0;
 80021ba:	4b11      	ldr	r3, [pc, #68]	; (8002200 <HAL_GPIO_EXTI_Callback+0x558>)
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
	  break;
 80021c0:	e007      	b.n	80021d2 <HAL_GPIO_EXTI_Callback+0x52a>

	default:
	  break;
 80021c2:	bf00      	nop
 80021c4:	e006      	b.n	80021d4 <HAL_GPIO_EXTI_Callback+0x52c>
	  break;
 80021c6:	bf00      	nop
 80021c8:	e004      	b.n	80021d4 <HAL_GPIO_EXTI_Callback+0x52c>
	  break;
 80021ca:	bf00      	nop
 80021cc:	e002      	b.n	80021d4 <HAL_GPIO_EXTI_Callback+0x52c>
	  break;
 80021ce:	bf00      	nop
 80021d0:	e000      	b.n	80021d4 <HAL_GPIO_EXTI_Callback+0x52c>
	  break;
 80021d2:	bf00      	nop
  } // End EXTI
}
 80021d4:	bf00      	nop
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	200002a9 	.word	0x200002a9
 80021e0:	200002aa 	.word	0x200002aa
 80021e4:	200002ab 	.word	0x200002ab
 80021e8:	2000022c 	.word	0x2000022c
 80021ec:	20000289 	.word	0x20000289
 80021f0:	2000028f 	.word	0x2000028f
 80021f4:	20000008 	.word	0x20000008
 80021f8:	40010c00 	.word	0x40010c00
 80021fc:	20000238 	.word	0x20000238
 8002200:	20000228 	.word	0x20000228
 8002204:	20000278 	.word	0x20000278
 8002208:	2000000c 	.word	0x2000000c
 800220c:	2000024c 	.word	0x2000024c
 8002210:	2000027c 	.word	0x2000027c
 8002214:	20000280 	.word	0x20000280
 8002218:	2000000b 	.word	0x2000000b
 800221c:	40010800 	.word	0x40010800

08002220 <HAL_TIM_PeriodElapsedCallback>:

u32 timer_count = 0;
u32 tick1s = 0;
float u = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002220:	b5b0      	push	{r4, r5, r7, lr}
 8002222:	b088      	sub	sp, #32
 8002224:	af02      	add	r7, sp, #8
 8002226:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4) // 1ms
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a5b      	ldr	r2, [pc, #364]	; (800239c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	f040 80af 	bne.w	8002392 <HAL_TIM_PeriodElapsedCallback+0x172>
  {
	timer_count++;
 8002234:	4b5a      	ldr	r3, [pc, #360]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	3301      	adds	r3, #1
 800223a:	4a59      	ldr	r2, [pc, #356]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800223c:	6013      	str	r3, [r2, #0]

	if (timer_count >= timeInterval) // 20ms 50Hz
 800223e:	4b58      	ldr	r3, [pc, #352]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	4b58      	ldr	r3, [pc, #352]	; (80023a4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	429a      	cmp	r2, r3
 8002248:	f0c0 808a 	bcc.w	8002360 <HAL_TIM_PeriodElapsedCallback+0x140>
		{
	  timer_count = 0;
 800224c:	4b54      	ldr	r3, [pc, #336]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]

	  // Calc velo
	  curPos = TIM1_count;
 8002252:	4b55      	ldr	r3, [pc, #340]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002256:	4a55      	ldr	r2, [pc, #340]	; (80023ac <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002258:	6013      	str	r3, [r2, #0]
	  s32 delta = wsub2(curPos, prePos);
 800225a:	4b54      	ldr	r3, [pc, #336]	; (80023ac <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a54      	ldr	r2, [pc, #336]	; (80023b0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002260:	6812      	ldr	r2, [r2, #0]
 8002262:	4611      	mov	r1, r2
 8002264:	4618      	mov	r0, r3
 8002266:	f001 facd 	bl	8003804 <wsub2>
 800226a:	6138      	str	r0, [r7, #16]
	  prePos = curPos;
 800226c:	4b4f      	ldr	r3, [pc, #316]	; (80023ac <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a4f      	ldr	r2, [pc, #316]	; (80023b0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002272:	6013      	str	r3, [r2, #0]

	  curSpeed = (float) (delta * 1.0 / totalPulse ) * 1000.0 / timeInterval
 8002274:	6938      	ldr	r0, [r7, #16]
 8002276:	f7fe f96f 	bl	8000558 <__aeabi_i2d>
 800227a:	f04f 0200 	mov.w	r2, #0
 800227e:	4b4d      	ldr	r3, [pc, #308]	; (80023b4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002280:	f7fe fafe 	bl	8000880 <__aeabi_ddiv>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	4610      	mov	r0, r2
 800228a:	4619      	mov	r1, r3
 800228c:	f7fe fc08 	bl	8000aa0 <__aeabi_d2f>
 8002290:	4603      	mov	r3, r0
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe f972 	bl	800057c <__aeabi_f2d>
 8002298:	f04f 0200 	mov.w	r2, #0
 800229c:	4b46      	ldr	r3, [pc, #280]	; (80023b8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 800229e:	f7fe f9c5 	bl	800062c <__aeabi_dmul>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	4614      	mov	r4, r2
 80022a8:	461d      	mov	r5, r3
 80022aa:	4b3e      	ldr	r3, [pc, #248]	; (80023a4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7fe f942 	bl	8000538 <__aeabi_ui2d>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4620      	mov	r0, r4
 80022ba:	4629      	mov	r1, r5
 80022bc:	f7fe fae0 	bl	8000880 <__aeabi_ddiv>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	4610      	mov	r0, r2
 80022c6:	4619      	mov	r1, r3
		  * 60;
 80022c8:	f04f 0200 	mov.w	r2, #0
 80022cc:	4b3b      	ldr	r3, [pc, #236]	; (80023bc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80022ce:	f7fe f9ad 	bl	800062c <__aeabi_dmul>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	4610      	mov	r0, r2
 80022d8:	4619      	mov	r1, r3
 80022da:	f7fe fbe1 	bl	8000aa0 <__aeabi_d2f>
 80022de:	4603      	mov	r3, r0
	  curSpeed = (float) (delta * 1.0 / totalPulse ) * 1000.0 / timeInterval
 80022e0:	4a37      	ldr	r2, [pc, #220]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80022e2:	6013      	str	r3, [r2, #0]

	  float error = v_ref - curSpeed;
 80022e4:	4b37      	ldr	r3, [pc, #220]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a35      	ldr	r2, [pc, #212]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80022ea:	6812      	ldr	r2, [r2, #0]
 80022ec:	4611      	mov	r1, r2
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7fe fc2a 	bl	8000b48 <__aeabi_fsub>
 80022f4:	4603      	mov	r3, r0
 80022f6:	60fb      	str	r3, [r7, #12]
	  u = pid_calc(&PID_motor, error);
 80022f8:	68f9      	ldr	r1, [r7, #12]
 80022fa:	4833      	ldr	r0, [pc, #204]	; (80023c8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80022fc:	f000 fb5b 	bl	80029b6 <pid_calc>
 8002300:	4603      	mov	r3, r0
 8002302:	4a32      	ldr	r2, [pc, #200]	; (80023cc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002304:	6013      	str	r3, [r2, #0]
	  pid_setup(&PID_motor, kp, ki, kd, 0);
 8002306:	4b32      	ldr	r3, [pc, #200]	; (80023d0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002308:	6819      	ldr	r1, [r3, #0]
 800230a:	4b32      	ldr	r3, [pc, #200]	; (80023d4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	4b32      	ldr	r3, [pc, #200]	; (80023d8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2000      	movs	r0, #0
 8002314:	9000      	str	r0, [sp, #0]
 8002316:	482c      	ldr	r0, [pc, #176]	; (80023c8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002318:	f000 fb8f 	bl	8002a3a <pid_setup>

	  s8 dir = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	72fb      	strb	r3, [r7, #11]
	  float output;
	  if (u < 0) {
 8002320:	4b2a      	ldr	r3, [pc, #168]	; (80023cc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f04f 0100 	mov.w	r1, #0
 8002328:	4618      	mov	r0, r3
 800232a:	f7fe fd65 	bl	8000df8 <__aeabi_fcmplt>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d007      	beq.n	8002344 <HAL_TIM_PeriodElapsedCallback+0x124>
		dir = -1;
 8002334:	23ff      	movs	r3, #255	; 0xff
 8002336:	72fb      	strb	r3, [r7, #11]
		output = -u;
 8002338:	4b24      	ldr	r3, [pc, #144]	; (80023cc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002340:	617b      	str	r3, [r7, #20]
 8002342:	e004      	b.n	800234e <HAL_TIM_PeriodElapsedCallback+0x12e>
	  } else {
		dir = 1;
 8002344:	2301      	movs	r3, #1
 8002346:	72fb      	strb	r3, [r7, #11]
		output = u;
 8002348:	4b20      	ldr	r3, [pc, #128]	; (80023cc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	617b      	str	r3, [r7, #20]
	  }
	  if (output > 1000) {
 800234e:	4923      	ldr	r1, [pc, #140]	; (80023dc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8002350:	6978      	ldr	r0, [r7, #20]
 8002352:	f7fe fd6f 	bl	8000e34 <__aeabi_fcmpgt>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <HAL_TIM_PeriodElapsedCallback+0x140>
		output = 1000;
 800235c:	4b1f      	ldr	r3, [pc, #124]	; (80023dc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800235e:	617b      	str	r3, [r7, #20]
	  }
//	  if (state == 3)
//		set_motor(2, dir, output);
	}

	tick1s++;
 8002360:	4b1f      	ldr	r3, [pc, #124]	; (80023e0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	3301      	adds	r3, #1
 8002366:	4a1e      	ldr	r2, [pc, #120]	; (80023e0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002368:	6013      	str	r3, [r2, #0]
	if (tick1s >= 1000) {
 800236a:	4b1d      	ldr	r3, [pc, #116]	; (80023e0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002372:	d30e      	bcc.n	8002392 <HAL_TIM_PeriodElapsedCallback+0x172>
	  if (state == 3) {
 8002374:	4b1b      	ldr	r3, [pc, #108]	; (80023e4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b03      	cmp	r3, #3
 800237a:	d107      	bne.n	800238c <HAL_TIM_PeriodElapsedCallback+0x16c>
		nSec++;
 800237c:	4b1a      	ldr	r3, [pc, #104]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	3301      	adds	r3, #1
 8002382:	4a19      	ldr	r2, [pc, #100]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002384:	6013      	str	r3, [r2, #0]
		refreshClock = true;
 8002386:	4b19      	ldr	r3, [pc, #100]	; (80023ec <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002388:	2201      	movs	r2, #1
 800238a:	701a      	strb	r2, [r3, #0]
	  }
	  tick1s = 0;
 800238c:	4b14      	ldr	r3, [pc, #80]	; (80023e0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
	}
  } // End TIM Elapsed
}
 8002392:	bf00      	nop
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bdb0      	pop	{r4, r5, r7, pc}
 800239a:	bf00      	nop
 800239c:	40000800 	.word	0x40000800
 80023a0:	2000021c 	.word	0x2000021c
 80023a4:	08006c98 	.word	0x08006c98
 80023a8:	40012c00 	.word	0x40012c00
 80023ac:	20000298 	.word	0x20000298
 80023b0:	2000029c 	.word	0x2000029c
 80023b4:	40c50000 	.word	0x40c50000
 80023b8:	408f4000 	.word	0x408f4000
 80023bc:	404e0000 	.word	0x404e0000
 80023c0:	20000294 	.word	0x20000294
 80023c4:	200002b0 	.word	0x200002b0
 80023c8:	200002bc 	.word	0x200002bc
 80023cc:	20000224 	.word	0x20000224
 80023d0:	20000018 	.word	0x20000018
 80023d4:	200002b4 	.word	0x200002b4
 80023d8:	200002b8 	.word	0x200002b8
 80023dc:	447a0000 	.word	0x447a0000
 80023e0:	20000220 	.word	0x20000220
 80023e4:	20000008 	.word	0x20000008
 80023e8:	20000280 	.word	0x20000280
 80023ec:	20000290 	.word	0x20000290

080023f0 <setup>:
#include "main_loop.h"

void setup() {
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af02      	add	r7, sp, #8
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80023f6:	213c      	movs	r1, #60	; 0x3c
 80023f8:	484c      	ldr	r0, [pc, #304]	; (800252c <setup+0x13c>)
 80023fa:	f003 f9f1 	bl	80057e0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80023fe:	213c      	movs	r1, #60	; 0x3c
 8002400:	484b      	ldr	r0, [pc, #300]	; (8002530 <setup+0x140>)
 8002402:	f003 f9ed 	bl	80057e0 <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start_IT(&htim4); //1ms
 8002406:	484b      	ldr	r0, [pc, #300]	; (8002534 <setup+0x144>)
 8002408:	f003 f804 	bl	8005414 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);    //PWM2B
 800240c:	2108      	movs	r1, #8
 800240e:	4849      	ldr	r0, [pc, #292]	; (8002534 <setup+0x144>)
 8002410:	f003 f8a2 	bl	8005558 <HAL_TIM_PWM_Start>

  HAL_Delay(10);
 8002414:	200a      	movs	r0, #10
 8002416:	f001 fa97 	bl	8003948 <HAL_Delay>

  buttonInit(&BTN_Start, BTN_Start_GPIO_Port, BTN_Start_Pin);
 800241a:	2208      	movs	r2, #8
 800241c:	4946      	ldr	r1, [pc, #280]	; (8002538 <setup+0x148>)
 800241e:	4847      	ldr	r0, [pc, #284]	; (800253c <setup+0x14c>)
 8002420:	f7ff fa02 	bl	8001828 <buttonInit>
  buttonInit(&BTN_Stop, BTN_Stop_GPIO_Port, BTN_Stop_Pin);
 8002424:	2210      	movs	r2, #16
 8002426:	4944      	ldr	r1, [pc, #272]	; (8002538 <setup+0x148>)
 8002428:	4845      	ldr	r0, [pc, #276]	; (8002540 <setup+0x150>)
 800242a:	f7ff f9fd 	bl	8001828 <buttonInit>
  buttonInit(&BTN_Mode, BTN_Mode_GPIO_Port, BTN_Mode_Pin);
 800242e:	2220      	movs	r2, #32
 8002430:	4941      	ldr	r1, [pc, #260]	; (8002538 <setup+0x148>)
 8002432:	4844      	ldr	r0, [pc, #272]	; (8002544 <setup+0x154>)
 8002434:	f7ff f9f8 	bl	8001828 <buttonInit>

  // Splash screen
  LCD_Begin(&LCD, &hi2c2, 0x4E, 20, 4);
 8002438:	2304      	movs	r3, #4
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	2314      	movs	r3, #20
 800243e:	224e      	movs	r2, #78	; 0x4e
 8002440:	4941      	ldr	r1, [pc, #260]	; (8002548 <setup+0x158>)
 8002442:	4842      	ldr	r0, [pc, #264]	; (800254c <setup+0x15c>)
 8002444:	f7ff fbce 	bl	8001be4 <LCD_Begin>
   |   CUTTING TESTER   |
   |                    |
   ----------------------
   **************************/

  LCD_Clear(&LCD);
 8002448:	4840      	ldr	r0, [pc, #256]	; (800254c <setup+0x15c>)
 800244a:	f7ff fbfb 	bl	8001c44 <LCD_Clear>

  LED_ON();
 800244e:	f000 fd2b 	bl	8002ea8 <LED_ON>
  LCD_Print_String_At(&LCD, 1, 4, "Safety Glove &");
 8002452:	4b3f      	ldr	r3, [pc, #252]	; (8002550 <setup+0x160>)
 8002454:	2204      	movs	r2, #4
 8002456:	2101      	movs	r1, #1
 8002458:	483c      	ldr	r0, [pc, #240]	; (800254c <setup+0x15c>)
 800245a:	f7ff fc0e 	bl	8001c7a <LCD_Print_String_At>
  LCD_Print_String_At(&LCD, 2, 6, "Shoe Upper");
 800245e:	4b3d      	ldr	r3, [pc, #244]	; (8002554 <setup+0x164>)
 8002460:	2206      	movs	r2, #6
 8002462:	2102      	movs	r1, #2
 8002464:	4839      	ldr	r0, [pc, #228]	; (800254c <setup+0x15c>)
 8002466:	f7ff fc08 	bl	8001c7a <LCD_Print_String_At>
  LCD_Print_String_At(&LCD, 3, 4, "Cutting Tester");
 800246a:	4b3b      	ldr	r3, [pc, #236]	; (8002558 <setup+0x168>)
 800246c:	2204      	movs	r2, #4
 800246e:	2103      	movs	r1, #3
 8002470:	4836      	ldr	r0, [pc, #216]	; (800254c <setup+0x15c>)
 8002472:	f7ff fc02 	bl	8001c7a <LCD_Print_String_At>

  // Restore value
  menu1_value = (u8) FLASH_ReadData(FLASH_USER_START_ADDR); // Speed
 8002476:	4839      	ldr	r0, [pc, #228]	; (800255c <setup+0x16c>)
 8002478:	f000 fd3a 	bl	8002ef0 <FLASH_ReadData>
 800247c:	4603      	mov	r3, r0
 800247e:	b2da      	uxtb	r2, r3
 8002480:	4b37      	ldr	r3, [pc, #220]	; (8002560 <setup+0x170>)
 8002482:	701a      	strb	r2, [r3, #0]
  menu2_value = (u32) FLASH_ReadData(FLASH_USER_START_ADDR + 4); // set sec
 8002484:	4837      	ldr	r0, [pc, #220]	; (8002564 <setup+0x174>)
 8002486:	f000 fd33 	bl	8002ef0 <FLASH_ReadData>
 800248a:	4603      	mov	r3, r0
 800248c:	4a36      	ldr	r2, [pc, #216]	; (8002568 <setup+0x178>)
 800248e:	6013      	str	r3, [r2, #0]
  menu3_value = (s32) FLASH_ReadData(FLASH_USER_START_ADDR + 8); //set count
 8002490:	4836      	ldr	r0, [pc, #216]	; (800256c <setup+0x17c>)
 8002492:	f000 fd2d 	bl	8002ef0 <FLASH_ReadData>
 8002496:	4603      	mov	r3, r0
 8002498:	461a      	mov	r2, r3
 800249a:	4b35      	ldr	r3, [pc, #212]	; (8002570 <setup+0x180>)
 800249c:	601a      	str	r2, [r3, #0]

  // speed
  if (menu1_value > maxMenu1Value)
 800249e:	4b30      	ldr	r3, [pc, #192]	; (8002560 <setup+0x170>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b3c      	cmp	r3, #60	; 0x3c
 80024a4:	d903      	bls.n	80024ae <setup+0xbe>
	menu1_value = maxMenu1Value;
 80024a6:	4b2e      	ldr	r3, [pc, #184]	; (8002560 <setup+0x170>)
 80024a8:	223c      	movs	r2, #60	; 0x3c
 80024aa:	701a      	strb	r2, [r3, #0]
 80024ac:	e006      	b.n	80024bc <setup+0xcc>
  else if (menu1_value < minMenu1Value)
 80024ae:	4b2c      	ldr	r3, [pc, #176]	; (8002560 <setup+0x170>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b1d      	cmp	r3, #29
 80024b4:	d802      	bhi.n	80024bc <setup+0xcc>
	menu1_value = minMenu1Value;
 80024b6:	4b2a      	ldr	r3, [pc, #168]	; (8002560 <setup+0x170>)
 80024b8:	221e      	movs	r2, #30
 80024ba:	701a      	strb	r2, [r3, #0]

  // count
  if (menu2_value > maxMenu2Value)
 80024bc:	4b2a      	ldr	r3, [pc, #168]	; (8002568 <setup+0x178>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 80024c4:	d904      	bls.n	80024d0 <setup+0xe0>
	menu2_value = maxMenu2Value;
 80024c6:	4b28      	ldr	r3, [pc, #160]	; (8002568 <setup+0x178>)
 80024c8:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80024cc:	601a      	str	r2, [r3, #0]
 80024ce:	e006      	b.n	80024de <setup+0xee>
  else if (menu2_value < minMenu2Value)
 80024d0:	4b25      	ldr	r3, [pc, #148]	; (8002568 <setup+0x178>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b09      	cmp	r3, #9
 80024d6:	d802      	bhi.n	80024de <setup+0xee>
	menu2_value = minMenu2Value;
 80024d8:	4b23      	ldr	r3, [pc, #140]	; (8002568 <setup+0x178>)
 80024da:	220a      	movs	r2, #10
 80024dc:	601a      	str	r2, [r3, #0]

  // time (second)
  if (menu3_value > maxMenu3Value)
 80024de:	4b24      	ldr	r3, [pc, #144]	; (8002570 <setup+0x180>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2b63      	cmp	r3, #99	; 0x63
 80024e4:	dd03      	ble.n	80024ee <setup+0xfe>
	menu3_value = maxMenu3Value;
 80024e6:	4b22      	ldr	r3, [pc, #136]	; (8002570 <setup+0x180>)
 80024e8:	2263      	movs	r2, #99	; 0x63
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	e006      	b.n	80024fc <setup+0x10c>
  else if (menu3_value < minMenu3Value)
 80024ee:	4b20      	ldr	r3, [pc, #128]	; (8002570 <setup+0x180>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	dc02      	bgt.n	80024fc <setup+0x10c>
	menu3_value = minMenu3Value;
 80024f6:	4b1e      	ldr	r3, [pc, #120]	; (8002570 <setup+0x180>)
 80024f8:	2201      	movs	r2, #1
 80024fa:	601a      	str	r2, [r3, #0]

  HAL_Delay(1000);
 80024fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002500:	f001 fa22 	bl	8003948 <HAL_Delay>
  LCD_Clear(&LCD);
 8002504:	4811      	ldr	r0, [pc, #68]	; (800254c <setup+0x15c>)
 8002506:	f7ff fb9d 	bl	8001c44 <LCD_Clear>
  LED_OFF();
 800250a:	f000 fcd9 	bl	8002ec0 <LED_OFF>

  pid_setup(&PID_motor, kp, ki, kd, 1);
 800250e:	4b19      	ldr	r3, [pc, #100]	; (8002574 <setup+0x184>)
 8002510:	6819      	ldr	r1, [r3, #0]
 8002512:	4b19      	ldr	r3, [pc, #100]	; (8002578 <setup+0x188>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	4b19      	ldr	r3, [pc, #100]	; (800257c <setup+0x18c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2001      	movs	r0, #1
 800251c:	9000      	str	r0, [sp, #0]
 800251e:	4818      	ldr	r0, [pc, #96]	; (8002580 <setup+0x190>)
 8002520:	f000 fa8b 	bl	8002a3a <pid_setup>
}
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	200000f8 	.word	0x200000f8
 8002530:	20000140 	.word	0x20000140
 8002534:	200001d0 	.word	0x200001d0
 8002538:	40010c00 	.word	0x40010c00
 800253c:	20000238 	.word	0x20000238
 8002540:	2000024c 	.word	0x2000024c
 8002544:	20000260 	.word	0x20000260
 8002548:	200000a4 	.word	0x200000a4
 800254c:	2000022c 	.word	0x2000022c
 8002550:	08006b3c 	.word	0x08006b3c
 8002554:	08006b4c 	.word	0x08006b4c
 8002558:	08006b58 	.word	0x08006b58
 800255c:	0801f810 	.word	0x0801f810
 8002560:	20000274 	.word	0x20000274
 8002564:	0801f814 	.word	0x0801f814
 8002568:	20000278 	.word	0x20000278
 800256c:	0801f818 	.word	0x0801f818
 8002570:	20000004 	.word	0x20000004
 8002574:	20000018 	.word	0x20000018
 8002578:	200002b4 	.word	0x200002b4
 800257c:	200002b8 	.word	0x200002b8
 8002580:	200002bc 	.word	0x200002bc

08002584 <loop>:

void loop() {
 8002584:	b580      	push	{r7, lr}
 8002586:	b08a      	sub	sp, #40	; 0x28
 8002588:	af02      	add	r7, sp, #8
  check_state();
 800258a:	f000 fa6f 	bl	8002a6c <check_state>
  check_ecd();
 800258e:	f000 fab9 	bl	8002b04 <check_ecd>

  switch (state) {
 8002592:	4b92      	ldr	r3, [pc, #584]	; (80027dc <loop+0x258>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	3b01      	subs	r3, #1
 8002598:	2b03      	cmp	r3, #3
 800259a:	f200 81a7 	bhi.w	80028ec <loop+0x368>
 800259e:	a201      	add	r2, pc, #4	; (adr r2, 80025a4 <loop+0x20>)
 80025a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a4:	080025b5 	.word	0x080025b5
 80025a8:	080025d1 	.word	0x080025d1
 80025ac:	080026d1 	.word	0x080026d1
 80025b0:	0800284d 	.word	0x0800284d
	   |Set count: xxxx revs|
	   |Count:    0 revs    |
	   ----------------------
	   **************************/
	{
	  if (refreshLCD == true) {
 80025b4:	4b8a      	ldr	r3, [pc, #552]	; (80027e0 <loop+0x25c>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 8199 	beq.w	80028f0 <loop+0x36c>
		printDefaultLCD();
 80025be:	f000 fca5 	bl	8002f0c <printDefaultLCD>
		HAL_Delay(10);
 80025c2:	200a      	movs	r0, #10
 80025c4:	f001 f9c0 	bl	8003948 <HAL_Delay>
		refreshLCD = false;
 80025c8:	4b85      	ldr	r3, [pc, #532]	; (80027e0 <loop+0x25c>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	701a      	strb	r2, [r3, #0]
	  }
	  break;
 80025ce:	e18f      	b.n	80028f0 <loop+0x36c>
	   | Set count: xxxx    |
	   |                    |
	   ----------------------
	   **************************/
	{
	  if (menu2_selected == true) {
 80025d0:	4b84      	ldr	r3, [pc, #528]	; (80027e4 <loop+0x260>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d045      	beq.n	8002664 <loop+0xe0>
		if (firstMinSelected == true || lastMinSelected == true
 80025d8:	4b83      	ldr	r3, [pc, #524]	; (80027e8 <loop+0x264>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10b      	bne.n	80025f8 <loop+0x74>
 80025e0:	4b82      	ldr	r3, [pc, #520]	; (80027ec <loop+0x268>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d107      	bne.n	80025f8 <loop+0x74>
			|| firstSecSelected == true || lastSecSelected == true) {
 80025e8:	4b81      	ldr	r3, [pc, #516]	; (80027f0 <loop+0x26c>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d103      	bne.n	80025f8 <loop+0x74>
 80025f0:	4b80      	ldr	r3, [pc, #512]	; (80027f4 <loop+0x270>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d032      	beq.n	800265e <loop+0xda>
		  // Do nothing
		  if (refreshMenu2) {
 80025f8:	4b7f      	ldr	r3, [pc, #508]	; (80027f8 <loop+0x274>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d04c      	beq.n	800269a <loop+0x116>
			update_Menu2();
 8002600:	f000 fd4e 	bl	80030a0 <update_Menu2>
			switch (menu2_subCounter) {
 8002604:	4b7d      	ldr	r3, [pc, #500]	; (80027fc <loop+0x278>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	3b01      	subs	r3, #1
 800260a:	2b03      	cmp	r3, #3
 800260c:	d822      	bhi.n	8002654 <loop+0xd0>
 800260e:	a201      	add	r2, pc, #4	; (adr r2, 8002614 <loop+0x90>)
 8002610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002614:	08002625 	.word	0x08002625
 8002618:	08002631 	.word	0x08002631
 800261c:	0800263d 	.word	0x0800263d
 8002620:	08002649 	.word	0x08002649
			  case 1:
				LCD_Set_Cursor(&LCD, 2, 9);
 8002624:	2209      	movs	r2, #9
 8002626:	2102      	movs	r1, #2
 8002628:	4875      	ldr	r0, [pc, #468]	; (8002800 <loop+0x27c>)
 800262a:	f7ff faf3 	bl	8001c14 <LCD_Set_Cursor>
				break;
 800262e:	e012      	b.n	8002656 <loop+0xd2>
			  case 2:
				LCD_Set_Cursor(&LCD, 2, 10);
 8002630:	220a      	movs	r2, #10
 8002632:	2102      	movs	r1, #2
 8002634:	4872      	ldr	r0, [pc, #456]	; (8002800 <loop+0x27c>)
 8002636:	f7ff faed 	bl	8001c14 <LCD_Set_Cursor>
				break;
 800263a:	e00c      	b.n	8002656 <loop+0xd2>
			  case 3:
				LCD_Set_Cursor(&LCD, 2, 12);
 800263c:	220c      	movs	r2, #12
 800263e:	2102      	movs	r1, #2
 8002640:	486f      	ldr	r0, [pc, #444]	; (8002800 <loop+0x27c>)
 8002642:	f7ff fae7 	bl	8001c14 <LCD_Set_Cursor>
				break;
 8002646:	e006      	b.n	8002656 <loop+0xd2>
			  case 4:
				LCD_Set_Cursor(&LCD, 2, 13);
 8002648:	220d      	movs	r2, #13
 800264a:	2102      	movs	r1, #2
 800264c:	486c      	ldr	r0, [pc, #432]	; (8002800 <loop+0x27c>)
 800264e:	f7ff fae1 	bl	8001c14 <LCD_Set_Cursor>
				break;
 8002652:	e000      	b.n	8002656 <loop+0xd2>
			  default:
				break;
 8002654:	bf00      	nop
			}
			refreshMenu2 = false;
 8002656:	4b68      	ldr	r3, [pc, #416]	; (80027f8 <loop+0x274>)
 8002658:	2200      	movs	r2, #0
 800265a:	701a      	strb	r2, [r3, #0]
		  if (refreshMenu2) {
 800265c:	e01d      	b.n	800269a <loop+0x116>
		  }
		} else
		  blinkCursor();
 800265e:	f000 fed3 	bl	8003408 <blinkCursor>
 8002662:	e01a      	b.n	800269a <loop+0x116>
	  } else if (menu1_selected == true) {
 8002664:	4b67      	ldr	r3, [pc, #412]	; (8002804 <loop+0x280>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d009      	beq.n	8002680 <loop+0xfc>
		if (refreshMenu1) {
 800266c:	4b66      	ldr	r3, [pc, #408]	; (8002808 <loop+0x284>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d012      	beq.n	800269a <loop+0x116>
		  refreshMenu1 = false;
 8002674:	4b64      	ldr	r3, [pc, #400]	; (8002808 <loop+0x284>)
 8002676:	2200      	movs	r2, #0
 8002678:	701a      	strb	r2, [r3, #0]
		  update_Menu1();
 800267a:	f000 fced 	bl	8003058 <update_Menu1>
 800267e:	e00c      	b.n	800269a <loop+0x116>
		}
	  } else if (menu3_selected == true) {
 8002680:	4b62      	ldr	r3, [pc, #392]	; (800280c <loop+0x288>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d008      	beq.n	800269a <loop+0x116>
		if (refreshMenu3) {
 8002688:	4b61      	ldr	r3, [pc, #388]	; (8002810 <loop+0x28c>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d004      	beq.n	800269a <loop+0x116>
		  refreshMenu3 = false;
 8002690:	4b5f      	ldr	r3, [pc, #380]	; (8002810 <loop+0x28c>)
 8002692:	2200      	movs	r2, #0
 8002694:	701a      	strb	r2, [r3, #0]
		  update_Menu3();
 8002696:	f000 fde3 	bl	8003260 <update_Menu3>
		}
	  }

	  if (refreshLCD == true) //If we are allowed to update the LCD ...
 800269a:	4b51      	ldr	r3, [pc, #324]	; (80027e0 <loop+0x25c>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00b      	beq.n	80026ba <loop+0x136>
	  {
		refreshLCD = false; //reset the variable - wait for a new trigger
 80026a2:	4b4f      	ldr	r3, [pc, #316]	; (80027e0 <loop+0x25c>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	701a      	strb	r2, [r3, #0]

		LCD_Clear(&LCD);
 80026a8:	4855      	ldr	r0, [pc, #340]	; (8002800 <loop+0x27c>)
 80026aa:	f7ff facb 	bl	8001c44 <LCD_Clear>
		printMenuName();
 80026ae:	f000 fe83 	bl	80033b8 <printMenuName>
		printMenuValue(); // ... we update the LCD ...
 80026b2:	f000 fe9f 	bl	80033f4 <printMenuValue>

		//... also, if one of the menus are already selected...
		updateSelection(); //update the position
 80026b6:	f000 fed1 	bl	800345c <updateSelection>
	  }

	  if (refreshSelection == true) //if the selection is changed
 80026ba:	4b56      	ldr	r3, [pc, #344]	; (8002814 <loop+0x290>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f000 8118 	beq.w	80028f4 <loop+0x370>
	  {
		refreshSelection = false; // reset the variable - wait for a new trigger
 80026c4:	4b53      	ldr	r3, [pc, #332]	; (8002814 <loop+0x290>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	701a      	strb	r2, [r3, #0]
		updateSelection(); //update the selection on the LCD
 80026ca:	f000 fec7 	bl	800345c <updateSelection>
	  }
	  break;
 80026ce:	e111      	b.n	80028f4 <loop+0x370>
	   |Set count: xxxx revs|
	   |Count:    0 revs    |
	   ----------------------
	   **************************/
	{
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80026d0:	2201      	movs	r2, #1
 80026d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026d6:	4850      	ldr	r0, [pc, #320]	; (8002818 <loop+0x294>)
 80026d8:	f001 fe03 	bl	80042e2 <HAL_GPIO_WritePin>
	  //out to motor
	  set_motor(2, 1, pwm);
 80026dc:	4b4f      	ldr	r3, [pc, #316]	; (800281c <loop+0x298>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	461a      	mov	r2, r3
 80026e4:	2101      	movs	r1, #1
 80026e6:	2002      	movs	r0, #2
 80026e8:	f000 ff44 	bl	8003574 <set_motor>
//	  v_ref = 21; //rpm

	  if (refreshLCD) {
 80026ec:	4b3c      	ldr	r3, [pc, #240]	; (80027e0 <loop+0x25c>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d004      	beq.n	80026fe <loop+0x17a>
		printDefaultLCD();
 80026f4:	f000 fc0a 	bl	8002f0c <printDefaultLCD>
		refreshLCD = false;
 80026f8:	4b39      	ldr	r3, [pc, #228]	; (80027e0 <loop+0x25c>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	701a      	strb	r2, [r3, #0]
	  }

	  u32 motor_posi = TIM1_count;
 80026fe:	4b48      	ldr	r3, [pc, #288]	; (8002820 <loop+0x29c>)
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002702:	61fb      	str	r3, [r7, #28]
	  s32 delta = motor_posi - pre_posi;
 8002704:	4b47      	ldr	r3, [pc, #284]	; (8002824 <loop+0x2a0>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	69fa      	ldr	r2, [r7, #28]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	61bb      	str	r3, [r7, #24]
	  if (abs(delta) > totalPulse) {
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	2b00      	cmp	r3, #0
 8002712:	bfb8      	it	lt
 8002714:	425b      	neglt	r3, r3
 8002716:	f5b3 5f28 	cmp.w	r3, #10752	; 0x2a00
 800271a:	d908      	bls.n	800272e <loop+0x1aa>
		nLoop++;
 800271c:	4b42      	ldr	r3, [pc, #264]	; (8002828 <loop+0x2a4>)
 800271e:	881b      	ldrh	r3, [r3, #0]
 8002720:	3301      	adds	r3, #1
 8002722:	b29a      	uxth	r2, r3
 8002724:	4b40      	ldr	r3, [pc, #256]	; (8002828 <loop+0x2a4>)
 8002726:	801a      	strh	r2, [r3, #0]
		pre_posi = motor_posi;
 8002728:	4a3e      	ldr	r2, [pc, #248]	; (8002824 <loop+0x2a0>)
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	6013      	str	r3, [r2, #0]
	  }

	  // Stop condition
	  if (nLoop >= menu3_value) {
 800272e:	4b3e      	ldr	r3, [pc, #248]	; (8002828 <loop+0x2a4>)
 8002730:	881b      	ldrh	r3, [r3, #0]
 8002732:	461a      	mov	r2, r3
 8002734:	4b3d      	ldr	r3, [pc, #244]	; (800282c <loop+0x2a8>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	db07      	blt.n	800274c <loop+0x1c8>
		nLoop = menu3_value;
 800273c:	4b3b      	ldr	r3, [pc, #236]	; (800282c <loop+0x2a8>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	b29a      	uxth	r2, r3
 8002742:	4b39      	ldr	r3, [pc, #228]	; (8002828 <loop+0x2a4>)
 8002744:	801a      	strh	r2, [r3, #0]
		stopCmd();
 8002746:	f001 f83b 	bl	80037c0 <stopCmd>
 800274a:	e00b      	b.n	8002764 <loop+0x1e0>
	  } else if (nSec >= menu2_value) {
 800274c:	4b38      	ldr	r3, [pc, #224]	; (8002830 <loop+0x2ac>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4b38      	ldr	r3, [pc, #224]	; (8002834 <loop+0x2b0>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	429a      	cmp	r2, r3
 8002756:	d305      	bcc.n	8002764 <loop+0x1e0>
		nSec = menu2_value;
 8002758:	4b36      	ldr	r3, [pc, #216]	; (8002834 <loop+0x2b0>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a34      	ldr	r2, [pc, #208]	; (8002830 <loop+0x2ac>)
 800275e:	6013      	str	r3, [r2, #0]
		stopCmd();
 8002760:	f001 f82e 	bl	80037c0 <stopCmd>
	  }

	  if (lastLoop != nLoop) {
 8002764:	4b34      	ldr	r3, [pc, #208]	; (8002838 <loop+0x2b4>)
 8002766:	881a      	ldrh	r2, [r3, #0]
 8002768:	4b2f      	ldr	r3, [pc, #188]	; (8002828 <loop+0x2a4>)
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	429a      	cmp	r2, r3
 800276e:	d027      	beq.n	80027c0 <loop+0x23c>
		lastLoop = nLoop;
 8002770:	4b2d      	ldr	r3, [pc, #180]	; (8002828 <loop+0x2a4>)
 8002772:	881a      	ldrh	r2, [r3, #0]
 8002774:	4b30      	ldr	r3, [pc, #192]	; (8002838 <loop+0x2b4>)
 8002776:	801a      	strh	r2, [r3, #0]

		char holder[10];
		LCD_Print_String_At(&LCD, 4, 8, "         ");
 8002778:	4b30      	ldr	r3, [pc, #192]	; (800283c <loop+0x2b8>)
 800277a:	2208      	movs	r2, #8
 800277c:	2104      	movs	r1, #4
 800277e:	4820      	ldr	r0, [pc, #128]	; (8002800 <loop+0x27c>)
 8002780:	f7ff fa7b 	bl	8001c7a <LCD_Print_String_At>
		if (nLoop < 2) {
 8002784:	4b28      	ldr	r3, [pc, #160]	; (8002828 <loop+0x2a4>)
 8002786:	881b      	ldrh	r3, [r3, #0]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d809      	bhi.n	80027a0 <loop+0x21c>
		  sprintf(holder, "%4d rev", nLoop);
 800278c:	4b26      	ldr	r3, [pc, #152]	; (8002828 <loop+0x2a4>)
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	461a      	mov	r2, r3
 8002792:	f107 030c 	add.w	r3, r7, #12
 8002796:	492a      	ldr	r1, [pc, #168]	; (8002840 <loop+0x2bc>)
 8002798:	4618      	mov	r0, r3
 800279a:	f003 fd49 	bl	8006230 <siprintf>
 800279e:	e008      	b.n	80027b2 <loop+0x22e>
		} else {
		  sprintf(holder, "%4d revs", nLoop);
 80027a0:	4b21      	ldr	r3, [pc, #132]	; (8002828 <loop+0x2a4>)
 80027a2:	881b      	ldrh	r3, [r3, #0]
 80027a4:	461a      	mov	r2, r3
 80027a6:	f107 030c 	add.w	r3, r7, #12
 80027aa:	4926      	ldr	r1, [pc, #152]	; (8002844 <loop+0x2c0>)
 80027ac:	4618      	mov	r0, r3
 80027ae:	f003 fd3f 	bl	8006230 <siprintf>
		}
		LCD_Print_String_At(&LCD, 4, 8, holder);
 80027b2:	f107 030c 	add.w	r3, r7, #12
 80027b6:	2208      	movs	r2, #8
 80027b8:	2104      	movs	r1, #4
 80027ba:	4811      	ldr	r0, [pc, #68]	; (8002800 <loop+0x27c>)
 80027bc:	f7ff fa5d 	bl	8001c7a <LCD_Print_String_At>
	  }

	  if (refreshClock) {
 80027c0:	4b21      	ldr	r3, [pc, #132]	; (8002848 <loop+0x2c4>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 8097 	beq.w	80028f8 <loop+0x374>
		refreshClock = false;
 80027ca:	4b1f      	ldr	r3, [pc, #124]	; (8002848 <loop+0x2c4>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	701a      	strb	r2, [r3, #0]
		LCD_Print_Clock(nSec);
 80027d0:	4b17      	ldr	r3, [pc, #92]	; (8002830 <loop+0x2ac>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f000 fd65 	bl	80032a4 <LCD_Print_Clock>
	  }
	  break;
 80027da:	e08d      	b.n	80028f8 <loop+0x374>
 80027dc:	20000008 	.word	0x20000008
 80027e0:	2000000b 	.word	0x2000000b
 80027e4:	20000289 	.word	0x20000289
 80027e8:	200002a8 	.word	0x200002a8
 80027ec:	200002a9 	.word	0x200002a9
 80027f0:	200002aa 	.word	0x200002aa
 80027f4:	200002ab 	.word	0x200002ab
 80027f8:	2000028d 	.word	0x2000028d
 80027fc:	20000010 	.word	0x20000010
 8002800:	2000022c 	.word	0x2000022c
 8002804:	20000288 	.word	0x20000288
 8002808:	2000028c 	.word	0x2000028c
 800280c:	2000028a 	.word	0x2000028a
 8002810:	2000028e 	.word	0x2000028e
 8002814:	2000028f 	.word	0x2000028f
 8002818:	40010c00 	.word	0x40010c00
 800281c:	2000000c 	.word	0x2000000c
 8002820:	40012c00 	.word	0x40012c00
 8002824:	200002a4 	.word	0x200002a4
 8002828:	2000027c 	.word	0x2000027c
 800282c:	20000004 	.word	0x20000004
 8002830:	20000280 	.word	0x20000280
 8002834:	20000278 	.word	0x20000278
 8002838:	2000027e 	.word	0x2000027e
 800283c:	08006b68 	.word	0x08006b68
 8002840:	08006b74 	.word	0x08006b74
 8002844:	08006b7c 	.word	0x08006b7c
 8002848:	20000290 	.word	0x20000290
	   |Set count: xxxx revs|
	   |Count:    0 revs    |
	   ----------------------
	   **************************/
	{
	  PROBE_ON = 0;
 800284c:	4b2c      	ldr	r3, [pc, #176]	; (8002900 <loop+0x37c>)
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]
	  if (refreshLCD) {
 8002852:	4b2c      	ldr	r3, [pc, #176]	; (8002904 <loop+0x380>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d02a      	beq.n	80028b0 <loop+0x32c>
		printDefaultLCD();
 800285a:	f000 fb57 	bl	8002f0c <printDefaultLCD>
		refreshLCD = false;
 800285e:	4b29      	ldr	r3, [pc, #164]	; (8002904 <loop+0x380>)
 8002860:	2200      	movs	r2, #0
 8002862:	701a      	strb	r2, [r3, #0]

		LCD_Print_Clock(nSec);
 8002864:	4b28      	ldr	r3, [pc, #160]	; (8002908 <loop+0x384>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f000 fd1b 	bl	80032a4 <LCD_Print_Clock>

		char holder[10];
		LCD_Print_String_At(&LCD, 4, 8, "         ");
 800286e:	4b27      	ldr	r3, [pc, #156]	; (800290c <loop+0x388>)
 8002870:	2208      	movs	r2, #8
 8002872:	2104      	movs	r1, #4
 8002874:	4826      	ldr	r0, [pc, #152]	; (8002910 <loop+0x38c>)
 8002876:	f7ff fa00 	bl	8001c7a <LCD_Print_String_At>
		if (nLoop < 2) {
 800287a:	4b26      	ldr	r3, [pc, #152]	; (8002914 <loop+0x390>)
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d808      	bhi.n	8002894 <loop+0x310>
		  sprintf(holder, "%4d rev", nLoop);
 8002882:	4b24      	ldr	r3, [pc, #144]	; (8002914 <loop+0x390>)
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	461a      	mov	r2, r3
 8002888:	463b      	mov	r3, r7
 800288a:	4923      	ldr	r1, [pc, #140]	; (8002918 <loop+0x394>)
 800288c:	4618      	mov	r0, r3
 800288e:	f003 fccf 	bl	8006230 <siprintf>
 8002892:	e007      	b.n	80028a4 <loop+0x320>
		} else {
		  sprintf(holder, "%4d revs", nLoop);
 8002894:	4b1f      	ldr	r3, [pc, #124]	; (8002914 <loop+0x390>)
 8002896:	881b      	ldrh	r3, [r3, #0]
 8002898:	461a      	mov	r2, r3
 800289a:	463b      	mov	r3, r7
 800289c:	491f      	ldr	r1, [pc, #124]	; (800291c <loop+0x398>)
 800289e:	4618      	mov	r0, r3
 80028a0:	f003 fcc6 	bl	8006230 <siprintf>
		}
		LCD_Print_String_At(&LCD, 4, 8, holder);
 80028a4:	463b      	mov	r3, r7
 80028a6:	2208      	movs	r2, #8
 80028a8:	2104      	movs	r1, #4
 80028aa:	4819      	ldr	r0, [pc, #100]	; (8002910 <loop+0x38c>)
 80028ac:	f7ff f9e5 	bl	8001c7a <LCD_Print_String_At>
	  }
	  FLAG_run = false;
 80028b0:	4b1b      	ldr	r3, [pc, #108]	; (8002920 <loop+0x39c>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	701a      	strb	r2, [r3, #0]
	  set_motor(2, 0, 0);
 80028b6:	2200      	movs	r2, #0
 80028b8:	2100      	movs	r1, #0
 80028ba:	2002      	movs	r0, #2
 80028bc:	f000 fe5a 	bl	8003574 <set_motor>
	  LED_TOGGLE();
 80028c0:	f000 fb0a 	bl	8002ed8 <LED_TOGGLE>

	  HAL_Delay(500);
 80028c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80028c8:	f001 f83e 	bl	8003948 <HAL_Delay>
	  pid_setup(&PID_motor, kp, ki, kd, 1);
 80028cc:	4b15      	ldr	r3, [pc, #84]	; (8002924 <loop+0x3a0>)
 80028ce:	6819      	ldr	r1, [r3, #0]
 80028d0:	4b15      	ldr	r3, [pc, #84]	; (8002928 <loop+0x3a4>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4b15      	ldr	r3, [pc, #84]	; (800292c <loop+0x3a8>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2001      	movs	r0, #1
 80028da:	9000      	str	r0, [sp, #0]
 80028dc:	4814      	ldr	r0, [pc, #80]	; (8002930 <loop+0x3ac>)
 80028de:	f000 f8ac 	bl	8002a3a <pid_setup>
	  v_ref = 0;
 80028e2:	4b14      	ldr	r3, [pc, #80]	; (8002934 <loop+0x3b0>)
 80028e4:	f04f 0200 	mov.w	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]
	  break;
 80028ea:	e006      	b.n	80028fa <loop+0x376>
	}
	default:
	  return;
 80028ec:	bf00      	nop
 80028ee:	e004      	b.n	80028fa <loop+0x376>
	  break;
 80028f0:	bf00      	nop
 80028f2:	e002      	b.n	80028fa <loop+0x376>
	  break;
 80028f4:	bf00      	nop
 80028f6:	e000      	b.n	80028fa <loop+0x376>
	  break;
 80028f8:	bf00      	nop
  } //Switch lvl1
}
 80028fa:	3720      	adds	r7, #32
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	20000228 	.word	0x20000228
 8002904:	2000000b 	.word	0x2000000b
 8002908:	20000280 	.word	0x20000280
 800290c:	08006b68 	.word	0x08006b68
 8002910:	2000022c 	.word	0x2000022c
 8002914:	2000027c 	.word	0x2000027c
 8002918:	08006b74 	.word	0x08006b74
 800291c:	08006b7c 	.word	0x08006b7c
 8002920:	200002a0 	.word	0x200002a0
 8002924:	20000018 	.word	0x20000018
 8002928:	200002b4 	.word	0x200002b4
 800292c:	200002b8 	.word	0x200002b8
 8002930:	200002bc 	.word	0x200002bc
 8002934:	200002b0 	.word	0x200002b0

08002938 <pid_init>:
 */

#include "pid_code.h"
#include <string.h>

void pid_init(PidObject *S, bool resetStateFlag) {
 8002938:	b590      	push	{r4, r7, lr}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	460b      	mov	r3, r1
 8002942:	70fb      	strb	r3, [r7, #3]

  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	699a      	ldr	r2, [r3, #24]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	69db      	ldr	r3, [r3, #28]
 800294c:	4619      	mov	r1, r3
 800294e:	4610      	mov	r0, r2
 8002950:	f7fe f8fc 	bl	8000b4c <__addsf3>
 8002954:	4603      	mov	r3, r0
 8002956:	461a      	mov	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	4619      	mov	r1, r3
 800295e:	4610      	mov	r0, r2
 8002960:	f7fe f8f4 	bl	8000b4c <__addsf3>
 8002964:	4603      	mov	r3, r0
 8002966:	461a      	mov	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	601a      	str	r2, [r3, #0]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float) 2.0 * S->Kd);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	4619      	mov	r1, r3
 800297a:	4618      	mov	r0, r3
 800297c:	f7fe f8e6 	bl	8000b4c <__addsf3>
 8002980:	4603      	mov	r3, r0
 8002982:	4619      	mov	r1, r3
 8002984:	4620      	mov	r0, r4
 8002986:	f7fe f8df 	bl	8000b48 <__aeabi_fsub>
 800298a:	4603      	mov	r3, r0
 800298c:	461a      	mov	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	605a      	str	r2, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a1a      	ldr	r2, [r3, #32]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag) {
 800299a:	78fb      	ldrb	r3, [r7, #3]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d006      	beq.n	80029ae <pid_init+0x76>
	/* Clear the state buffer.  The size will be always 3 samples */
	memset(S->state, 0, 3U * sizeof(float));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	330c      	adds	r3, #12
 80029a4:	220c      	movs	r2, #12
 80029a6:	2100      	movs	r1, #0
 80029a8:	4618      	mov	r0, r3
 80029aa:	f003 fc39 	bl	8006220 <memset>
  }

}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd90      	pop	{r4, r7, pc}

080029b6 <pid_calc>:

float pid_calc(PidObject *S, float in) {
 80029b6:	b590      	push	{r4, r7, lr}
 80029b8:	b085      	sub	sp, #20
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	6039      	str	r1, [r7, #0]
  float out;

  /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
  out = (S->A0 * in) + (S->A1 * S->state[0]) + (S->A2 * S->state[1])
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6839      	ldr	r1, [r7, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fd fbc0 	bl	800014c <__aeabi_fmul>
 80029cc:	4603      	mov	r3, r0
 80029ce:	461c      	mov	r4, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	4619      	mov	r1, r3
 80029da:	4610      	mov	r0, r2
 80029dc:	f7fd fbb6 	bl	800014c <__aeabi_fmul>
 80029e0:	4603      	mov	r3, r0
 80029e2:	4619      	mov	r1, r3
 80029e4:	4620      	mov	r0, r4
 80029e6:	f7fe f8b1 	bl	8000b4c <__addsf3>
 80029ea:	4603      	mov	r3, r0
 80029ec:	461c      	mov	r4, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	4619      	mov	r1, r3
 80029f8:	4610      	mov	r0, r2
 80029fa:	f7fd fba7 	bl	800014c <__aeabi_fmul>
 80029fe:	4603      	mov	r3, r0
 8002a00:	4619      	mov	r1, r3
 8002a02:	4620      	mov	r0, r4
 8002a04:	f7fe f8a2 	bl	8000b4c <__addsf3>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	461a      	mov	r2, r3
	  + (S->state[2]);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	695b      	ldr	r3, [r3, #20]
  out = (S->A0 * in) + (S->A1 * S->state[0]) + (S->A2 * S->state[1])
 8002a10:	4619      	mov	r1, r3
 8002a12:	4610      	mov	r0, r2
 8002a14:	f7fe f89a 	bl	8000b4c <__addsf3>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	60fb      	str	r3, [r7, #12]

  /* Update state */
  S->state[1] = S->state[0];
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	611a      	str	r2, [r3, #16]
  S->state[0] = in;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	60da      	str	r2, [r3, #12]
  S->state[2] = out;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	615a      	str	r2, [r3, #20]

  /* return to application */
  return (out);
 8002a30:	68fb      	ldr	r3, [r7, #12]

}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd90      	pop	{r4, r7, pc}

08002a3a <pid_setup>:

void pid_setup(PidObject *S, float kp, float ki, float kd, bool resetStateFlag) {
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b084      	sub	sp, #16
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	60f8      	str	r0, [r7, #12]
 8002a42:	60b9      	str	r1, [r7, #8]
 8002a44:	607a      	str	r2, [r7, #4]
 8002a46:	603b      	str	r3, [r7, #0]
  S->Kp = kp;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	619a      	str	r2, [r3, #24]
  S->Ki = ki;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	61da      	str	r2, [r3, #28]
  S->Kd = kd;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	621a      	str	r2, [r3, #32]

  pid_init(S, resetStateFlag);
 8002a5a:	7e3b      	ldrb	r3, [r7, #24]
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f7ff ff6a 	bl	8002938 <pid_init>
}
 8002a64:	bf00      	nop
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <check_state>:
float v_ref = 0;
float kp = 1, ki = 0, kd = 0;

PidObject PID_motor;

void check_state() {
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
// If Enter new state
  if (preState != state) {
 8002a72:	4b1c      	ldr	r3, [pc, #112]	; (8002ae4 <check_state+0x78>)
 8002a74:	781a      	ldrb	r2, [r3, #0]
 8002a76:	4b1c      	ldr	r3, [pc, #112]	; (8002ae8 <check_state+0x7c>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d00c      	beq.n	8002a98 <check_state+0x2c>
	LCD_Clear(&LCD);
 8002a7e:	481b      	ldr	r0, [pc, #108]	; (8002aec <check_state+0x80>)
 8002a80:	f7ff f8e0 	bl	8001c44 <LCD_Clear>
	preState = state;
 8002a84:	4b18      	ldr	r3, [pc, #96]	; (8002ae8 <check_state+0x7c>)
 8002a86:	781a      	ldrb	r2, [r3, #0]
 8002a88:	4b16      	ldr	r3, [pc, #88]	; (8002ae4 <check_state+0x78>)
 8002a8a:	701a      	strb	r2, [r3, #0]
	refreshLCD = true;
 8002a8c:	4b18      	ldr	r3, [pc, #96]	; (8002af0 <check_state+0x84>)
 8002a8e:	2201      	movs	r2, #1
 8002a90:	701a      	strb	r2, [r3, #0]
	refreshSelection = true;
 8002a92:	4b18      	ldr	r3, [pc, #96]	; (8002af4 <check_state+0x88>)
 8002a94:	2201      	movs	r2, #1
 8002a96:	701a      	strb	r2, [r3, #0]
  }
  if (state == 3) {
 8002a98:	4b13      	ldr	r3, [pc, #76]	; (8002ae8 <check_state+0x7c>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d11c      	bne.n	8002ada <check_state+0x6e>
	u32 now = HAL_GetTick();
 8002aa0:	f000 ff48 	bl	8003934 <HAL_GetTick>
 8002aa4:	6078      	str	r0, [r7, #4]

	if (PROBE_ON != 0) {
 8002aa6:	4b14      	ldr	r3, [pc, #80]	; (8002af8 <check_state+0x8c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d015      	beq.n	8002ada <check_state+0x6e>
	  if ((now - PROBE_ON > DEBOUNCE_PROBE) && (now - PROBE_ON < 3000)) {
 8002aae:	4b12      	ldr	r3, [pc, #72]	; (8002af8 <check_state+0x8c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	4a11      	ldr	r2, [pc, #68]	; (8002afc <check_state+0x90>)
 8002ab8:	6812      	ldr	r2, [r2, #0]
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d90d      	bls.n	8002ada <check_state+0x6e>
 8002abe:	4b0e      	ldr	r3, [pc, #56]	; (8002af8 <check_state+0x8c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d805      	bhi.n	8002ada <check_state+0x6e>
		lastProbe = PROBE_ON;
 8002ace:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <check_state+0x8c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a0b      	ldr	r2, [pc, #44]	; (8002b00 <check_state+0x94>)
 8002ad4:	6013      	str	r3, [r2, #0]
		stopCmd();
 8002ad6:	f000 fe73 	bl	80037c0 <stopCmd>
	  }
	}
  }
}
 8002ada:	bf00      	nop
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20000009 	.word	0x20000009
 8002ae8:	20000008 	.word	0x20000008
 8002aec:	2000022c 	.word	0x2000022c
 8002af0:	2000000b 	.word	0x2000000b
 8002af4:	2000028f 	.word	0x2000028f
 8002af8:	20000228 	.word	0x20000228
 8002afc:	20000014 	.word	0x20000014
 8002b00:	200002ac 	.word	0x200002ac

08002b04 <check_ecd>:

u32 preEcd = 0;

void check_ecd() {
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
  if (state == 2) {
 8002b0a:	4b8b      	ldr	r3, [pc, #556]	; (8002d38 <check_ecd+0x234>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	f040 81b0 	bne.w	8002e74 <check_ecd+0x370>
	if (preEcd != TIM2_count) {
 8002b14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b1a:	4b88      	ldr	r3, [pc, #544]	; (8002d3c <check_ecd+0x238>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	f000 81ae 	beq.w	8002e80 <check_ecd+0x37c>
	  s32 delta = preEcd - TIM2_count;
 8002b24:	4b85      	ldr	r3, [pc, #532]	; (8002d3c <check_ecd+0x238>)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	603b      	str	r3, [r7, #0]
	  if (abs(delta) > 10000) // wrap
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	bfb8      	it	lt
 8002b38:	425b      	neglt	r3, r3
 8002b3a:	f242 7210 	movw	r2, #10000	; 0x2710
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	dd05      	ble.n	8002b4e <check_ecd+0x4a>
		preEcd = TIM2_count;
 8002b42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	4a7c      	ldr	r2, [pc, #496]	; (8002d3c <check_ecd+0x238>)
 8002b4a:	6013      	str	r3, [r2, #0]
	  }
	}
  } else {
	preEcd = TIM2_count;
  }
  return;
 8002b4c:	e198      	b.n	8002e80 <check_ecd+0x37c>
	  else if (abs(delta) > ecdFilter) {
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	bfb8      	it	lt
 8002b54:	425b      	neglt	r3, r3
 8002b56:	2b06      	cmp	r3, #6
 8002b58:	f340 8192 	ble.w	8002e80 <check_ecd+0x37c>
		preEcd = TIM2_count;
 8002b5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	4a76      	ldr	r2, [pc, #472]	; (8002d3c <check_ecd+0x238>)
 8002b64:	6013      	str	r3, [r2, #0]
		if (menu1_selected == true) {
 8002b66:	4b76      	ldr	r3, [pc, #472]	; (8002d40 <check_ecd+0x23c>)
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d024      	beq.n	8002bb8 <check_ecd+0xb4>
		  if (delta > 0)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	dd06      	ble.n	8002b82 <check_ecd+0x7e>
			menu1_value++;
 8002b74:	4b73      	ldr	r3, [pc, #460]	; (8002d44 <check_ecd+0x240>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	4b71      	ldr	r3, [pc, #452]	; (8002d44 <check_ecd+0x240>)
 8002b7e:	701a      	strb	r2, [r3, #0]
 8002b80:	e008      	b.n	8002b94 <check_ecd+0x90>
		  else if (delta < 0)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	da05      	bge.n	8002b94 <check_ecd+0x90>
			menu1_value--;
 8002b88:	4b6e      	ldr	r3, [pc, #440]	; (8002d44 <check_ecd+0x240>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	4b6c      	ldr	r3, [pc, #432]	; (8002d44 <check_ecd+0x240>)
 8002b92:	701a      	strb	r2, [r3, #0]
		  if (menu1_value > maxMenu1Value) //we do not go above 100
 8002b94:	4b6b      	ldr	r3, [pc, #428]	; (8002d44 <check_ecd+0x240>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	2b3c      	cmp	r3, #60	; 0x3c
 8002b9a:	d902      	bls.n	8002ba2 <check_ecd+0x9e>
			menu1_value = maxMenu1Value;
 8002b9c:	4b69      	ldr	r3, [pc, #420]	; (8002d44 <check_ecd+0x240>)
 8002b9e:	223c      	movs	r2, #60	; 0x3c
 8002ba0:	701a      	strb	r2, [r3, #0]
		  if (menu1_value < minMenu1Value)
 8002ba2:	4b68      	ldr	r3, [pc, #416]	; (8002d44 <check_ecd+0x240>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b1d      	cmp	r3, #29
 8002ba8:	d802      	bhi.n	8002bb0 <check_ecd+0xac>
			menu1_value = minMenu1Value;
 8002baa:	4b66      	ldr	r3, [pc, #408]	; (8002d44 <check_ecd+0x240>)
 8002bac:	221e      	movs	r2, #30
 8002bae:	701a      	strb	r2, [r3, #0]
		  refreshMenu1 = true;
 8002bb0:	4b65      	ldr	r3, [pc, #404]	; (8002d48 <check_ecd+0x244>)
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	701a      	strb	r2, [r3, #0]
  return;
 8002bb6:	e163      	b.n	8002e80 <check_ecd+0x37c>
		else if (menu2_selected == true) {
 8002bb8:	4b64      	ldr	r3, [pc, #400]	; (8002d4c <check_ecd+0x248>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 8109 	beq.w	8002dd4 <check_ecd+0x2d0>
		  if (firstMinSelected == true || lastMinSelected == true
 8002bc2:	4b63      	ldr	r3, [pc, #396]	; (8002d50 <check_ecd+0x24c>)
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10c      	bne.n	8002be4 <check_ecd+0xe0>
 8002bca:	4b62      	ldr	r3, [pc, #392]	; (8002d54 <check_ecd+0x250>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d108      	bne.n	8002be4 <check_ecd+0xe0>
			  || firstSecSelected == true || lastSecSelected == true) {
 8002bd2:	4b61      	ldr	r3, [pc, #388]	; (8002d58 <check_ecd+0x254>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d104      	bne.n	8002be4 <check_ecd+0xe0>
 8002bda:	4b60      	ldr	r3, [pc, #384]	; (8002d5c <check_ecd+0x258>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f000 808f 	beq.w	8002d02 <check_ecd+0x1fe>
			if (firstMinSelected) {
 8002be4:	4b5a      	ldr	r3, [pc, #360]	; (8002d50 <check_ecd+0x24c>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d01e      	beq.n	8002c2a <check_ecd+0x126>
			  if (delta > 0)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	dd06      	ble.n	8002c00 <check_ecd+0xfc>
				firstMin++;
 8002bf2:	4b5b      	ldr	r3, [pc, #364]	; (8002d60 <check_ecd+0x25c>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	4b59      	ldr	r3, [pc, #356]	; (8002d60 <check_ecd+0x25c>)
 8002bfc:	701a      	strb	r2, [r3, #0]
 8002bfe:	e00c      	b.n	8002c1a <check_ecd+0x116>
			  else if (delta < 0)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	da09      	bge.n	8002c1a <check_ecd+0x116>
				if (firstMin > 0)
 8002c06:	4b56      	ldr	r3, [pc, #344]	; (8002d60 <check_ecd+0x25c>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d005      	beq.n	8002c1a <check_ecd+0x116>
				  firstMin--;
 8002c0e:	4b54      	ldr	r3, [pc, #336]	; (8002d60 <check_ecd+0x25c>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	3b01      	subs	r3, #1
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	4b52      	ldr	r3, [pc, #328]	; (8002d60 <check_ecd+0x25c>)
 8002c18:	701a      	strb	r2, [r3, #0]
			  if (firstMin > 9) {
 8002c1a:	4b51      	ldr	r3, [pc, #324]	; (8002d60 <check_ecd+0x25c>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2b09      	cmp	r3, #9
 8002c20:	d96b      	bls.n	8002cfa <check_ecd+0x1f6>
				firstMin = 9;
 8002c22:	4b4f      	ldr	r3, [pc, #316]	; (8002d60 <check_ecd+0x25c>)
 8002c24:	2209      	movs	r2, #9
 8002c26:	701a      	strb	r2, [r3, #0]
 8002c28:	e067      	b.n	8002cfa <check_ecd+0x1f6>
			} else if (lastMinSelected) {
 8002c2a:	4b4a      	ldr	r3, [pc, #296]	; (8002d54 <check_ecd+0x250>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d01e      	beq.n	8002c70 <check_ecd+0x16c>
			  if (delta > 0)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	dd06      	ble.n	8002c46 <check_ecd+0x142>
				lastMin++;
 8002c38:	4b4a      	ldr	r3, [pc, #296]	; (8002d64 <check_ecd+0x260>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	4b48      	ldr	r3, [pc, #288]	; (8002d64 <check_ecd+0x260>)
 8002c42:	701a      	strb	r2, [r3, #0]
 8002c44:	e00c      	b.n	8002c60 <check_ecd+0x15c>
			  else if (delta < 0)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	da09      	bge.n	8002c60 <check_ecd+0x15c>
				if (lastMin > 0)
 8002c4c:	4b45      	ldr	r3, [pc, #276]	; (8002d64 <check_ecd+0x260>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d005      	beq.n	8002c60 <check_ecd+0x15c>
				  lastMin--;
 8002c54:	4b43      	ldr	r3, [pc, #268]	; (8002d64 <check_ecd+0x260>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	4b41      	ldr	r3, [pc, #260]	; (8002d64 <check_ecd+0x260>)
 8002c5e:	701a      	strb	r2, [r3, #0]
			  if (lastMin > 9) {
 8002c60:	4b40      	ldr	r3, [pc, #256]	; (8002d64 <check_ecd+0x260>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b09      	cmp	r3, #9
 8002c66:	d948      	bls.n	8002cfa <check_ecd+0x1f6>
				lastMin = 9;
 8002c68:	4b3e      	ldr	r3, [pc, #248]	; (8002d64 <check_ecd+0x260>)
 8002c6a:	2209      	movs	r2, #9
 8002c6c:	701a      	strb	r2, [r3, #0]
 8002c6e:	e044      	b.n	8002cfa <check_ecd+0x1f6>
			} else if (firstSecSelected) {
 8002c70:	4b39      	ldr	r3, [pc, #228]	; (8002d58 <check_ecd+0x254>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d01e      	beq.n	8002cb6 <check_ecd+0x1b2>
			  if (delta > 0)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	dd06      	ble.n	8002c8c <check_ecd+0x188>
				firstSec++;
 8002c7e:	4b3a      	ldr	r3, [pc, #232]	; (8002d68 <check_ecd+0x264>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	3301      	adds	r3, #1
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	4b38      	ldr	r3, [pc, #224]	; (8002d68 <check_ecd+0x264>)
 8002c88:	701a      	strb	r2, [r3, #0]
 8002c8a:	e00c      	b.n	8002ca6 <check_ecd+0x1a2>
			  else if (delta < 0)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	da09      	bge.n	8002ca6 <check_ecd+0x1a2>
				if (firstSec > 0)
 8002c92:	4b35      	ldr	r3, [pc, #212]	; (8002d68 <check_ecd+0x264>)
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d005      	beq.n	8002ca6 <check_ecd+0x1a2>
				  firstSec--;
 8002c9a:	4b33      	ldr	r3, [pc, #204]	; (8002d68 <check_ecd+0x264>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	4b31      	ldr	r3, [pc, #196]	; (8002d68 <check_ecd+0x264>)
 8002ca4:	701a      	strb	r2, [r3, #0]
			  if (firstSec > 5) {
 8002ca6:	4b30      	ldr	r3, [pc, #192]	; (8002d68 <check_ecd+0x264>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b05      	cmp	r3, #5
 8002cac:	d925      	bls.n	8002cfa <check_ecd+0x1f6>
				firstSec = 5;
 8002cae:	4b2e      	ldr	r3, [pc, #184]	; (8002d68 <check_ecd+0x264>)
 8002cb0:	2205      	movs	r2, #5
 8002cb2:	701a      	strb	r2, [r3, #0]
 8002cb4:	e021      	b.n	8002cfa <check_ecd+0x1f6>
			} else if (lastSecSelected) {
 8002cb6:	4b29      	ldr	r3, [pc, #164]	; (8002d5c <check_ecd+0x258>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d01d      	beq.n	8002cfa <check_ecd+0x1f6>
			  if (delta > 0)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	dd06      	ble.n	8002cd2 <check_ecd+0x1ce>
				lastSec++;
 8002cc4:	4b29      	ldr	r3, [pc, #164]	; (8002d6c <check_ecd+0x268>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	4b27      	ldr	r3, [pc, #156]	; (8002d6c <check_ecd+0x268>)
 8002cce:	701a      	strb	r2, [r3, #0]
 8002cd0:	e00c      	b.n	8002cec <check_ecd+0x1e8>
			  else if (delta < 0)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	da09      	bge.n	8002cec <check_ecd+0x1e8>
				if (lastSec > 0)
 8002cd8:	4b24      	ldr	r3, [pc, #144]	; (8002d6c <check_ecd+0x268>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d005      	beq.n	8002cec <check_ecd+0x1e8>
				  lastSec--;
 8002ce0:	4b22      	ldr	r3, [pc, #136]	; (8002d6c <check_ecd+0x268>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	b2da      	uxtb	r2, r3
 8002ce8:	4b20      	ldr	r3, [pc, #128]	; (8002d6c <check_ecd+0x268>)
 8002cea:	701a      	strb	r2, [r3, #0]
			  if (lastSec > 9) {
 8002cec:	4b1f      	ldr	r3, [pc, #124]	; (8002d6c <check_ecd+0x268>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b09      	cmp	r3, #9
 8002cf2:	d902      	bls.n	8002cfa <check_ecd+0x1f6>
				lastSec = 9;
 8002cf4:	4b1d      	ldr	r3, [pc, #116]	; (8002d6c <check_ecd+0x268>)
 8002cf6:	2209      	movs	r2, #9
 8002cf8:	701a      	strb	r2, [r3, #0]
			refreshMenu2 = true;
 8002cfa:	4b1d      	ldr	r3, [pc, #116]	; (8002d70 <check_ecd+0x26c>)
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	701a      	strb	r2, [r3, #0]
 8002d00:	e0bd      	b.n	8002e7e <check_ecd+0x37a>
			if (delta > 0)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	dd06      	ble.n	8002d16 <check_ecd+0x212>
			  menu2_subCounter++;
 8002d08:	4b1a      	ldr	r3, [pc, #104]	; (8002d74 <check_ecd+0x270>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	4b18      	ldr	r3, [pc, #96]	; (8002d74 <check_ecd+0x270>)
 8002d12:	701a      	strb	r2, [r3, #0]
 8002d14:	e008      	b.n	8002d28 <check_ecd+0x224>
			else if (delta < 0)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	da05      	bge.n	8002d28 <check_ecd+0x224>
			  menu2_subCounter--;
 8002d1c:	4b15      	ldr	r3, [pc, #84]	; (8002d74 <check_ecd+0x270>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	3b01      	subs	r3, #1
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	4b13      	ldr	r3, [pc, #76]	; (8002d74 <check_ecd+0x270>)
 8002d26:	701a      	strb	r2, [r3, #0]
			if (menu2_subCounter > 4) {
 8002d28:	4b12      	ldr	r3, [pc, #72]	; (8002d74 <check_ecd+0x270>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b04      	cmp	r3, #4
 8002d2e:	d923      	bls.n	8002d78 <check_ecd+0x274>
			  menu2_subCounter = 4;
 8002d30:	4b10      	ldr	r3, [pc, #64]	; (8002d74 <check_ecd+0x270>)
 8002d32:	2204      	movs	r2, #4
 8002d34:	701a      	strb	r2, [r3, #0]
 8002d36:	e026      	b.n	8002d86 <check_ecd+0x282>
 8002d38:	20000008 	.word	0x20000008
 8002d3c:	200002e0 	.word	0x200002e0
 8002d40:	20000288 	.word	0x20000288
 8002d44:	20000274 	.word	0x20000274
 8002d48:	2000028c 	.word	0x2000028c
 8002d4c:	20000289 	.word	0x20000289
 8002d50:	200002a8 	.word	0x200002a8
 8002d54:	200002a9 	.word	0x200002a9
 8002d58:	200002aa 	.word	0x200002aa
 8002d5c:	200002ab 	.word	0x200002ab
 8002d60:	20000284 	.word	0x20000284
 8002d64:	20000285 	.word	0x20000285
 8002d68:	20000286 	.word	0x20000286
 8002d6c:	20000287 	.word	0x20000287
 8002d70:	2000028d 	.word	0x2000028d
 8002d74:	20000010 	.word	0x20000010
			} else if (menu2_subCounter < 1) {
 8002d78:	4b43      	ldr	r3, [pc, #268]	; (8002e88 <check_ecd+0x384>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d102      	bne.n	8002d86 <check_ecd+0x282>
			  menu2_subCounter = 1;
 8002d80:	4b41      	ldr	r3, [pc, #260]	; (8002e88 <check_ecd+0x384>)
 8002d82:	2201      	movs	r2, #1
 8002d84:	701a      	strb	r2, [r3, #0]
			u8 _mCursorPos = 1;
 8002d86:	2301      	movs	r3, #1
 8002d88:	71fb      	strb	r3, [r7, #7]
			switch (menu2_subCounter) {
 8002d8a:	4b3f      	ldr	r3, [pc, #252]	; (8002e88 <check_ecd+0x384>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	2b03      	cmp	r3, #3
 8002d92:	d817      	bhi.n	8002dc4 <check_ecd+0x2c0>
 8002d94:	a201      	add	r2, pc, #4	; (adr r2, 8002d9c <check_ecd+0x298>)
 8002d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d9a:	bf00      	nop
 8002d9c:	08002dad 	.word	0x08002dad
 8002da0:	08002db3 	.word	0x08002db3
 8002da4:	08002db9 	.word	0x08002db9
 8002da8:	08002dbf 	.word	0x08002dbf
				_mCursorPos = 9;
 8002dac:	2309      	movs	r3, #9
 8002dae:	71fb      	strb	r3, [r7, #7]
				break;
 8002db0:	e009      	b.n	8002dc6 <check_ecd+0x2c2>
				_mCursorPos = 10;
 8002db2:	230a      	movs	r3, #10
 8002db4:	71fb      	strb	r3, [r7, #7]
				break;
 8002db6:	e006      	b.n	8002dc6 <check_ecd+0x2c2>
				_mCursorPos = 12;
 8002db8:	230c      	movs	r3, #12
 8002dba:	71fb      	strb	r3, [r7, #7]
				break;
 8002dbc:	e003      	b.n	8002dc6 <check_ecd+0x2c2>
				_mCursorPos = 13;
 8002dbe:	230d      	movs	r3, #13
 8002dc0:	71fb      	strb	r3, [r7, #7]
				break;
 8002dc2:	e000      	b.n	8002dc6 <check_ecd+0x2c2>
				break;
 8002dc4:	bf00      	nop
			LCD_Set_Cursor(&LCD, 2, _mCursorPos);
 8002dc6:	79fb      	ldrb	r3, [r7, #7]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	2102      	movs	r1, #2
 8002dcc:	482f      	ldr	r0, [pc, #188]	; (8002e8c <check_ecd+0x388>)
 8002dce:	f7fe ff21 	bl	8001c14 <LCD_Set_Cursor>
  return;
 8002dd2:	e055      	b.n	8002e80 <check_ecd+0x37c>
		else if (menu3_selected == true) {
 8002dd4:	4b2e      	ldr	r3, [pc, #184]	; (8002e90 <check_ecd+0x38c>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d022      	beq.n	8002e22 <check_ecd+0x31e>
		  if (delta > 0)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	dd05      	ble.n	8002dee <check_ecd+0x2ea>
			menu3_value++;
 8002de2:	4b2c      	ldr	r3, [pc, #176]	; (8002e94 <check_ecd+0x390>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	3301      	adds	r3, #1
 8002de8:	4a2a      	ldr	r2, [pc, #168]	; (8002e94 <check_ecd+0x390>)
 8002dea:	6013      	str	r3, [r2, #0]
 8002dec:	e007      	b.n	8002dfe <check_ecd+0x2fa>
		  else if (delta < 0)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	da04      	bge.n	8002dfe <check_ecd+0x2fa>
			menu3_value--;
 8002df4:	4b27      	ldr	r3, [pc, #156]	; (8002e94 <check_ecd+0x390>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	4a26      	ldr	r2, [pc, #152]	; (8002e94 <check_ecd+0x390>)
 8002dfc:	6013      	str	r3, [r2, #0]
		  if (menu3_value > maxMenu3Value)
 8002dfe:	4b25      	ldr	r3, [pc, #148]	; (8002e94 <check_ecd+0x390>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2b63      	cmp	r3, #99	; 0x63
 8002e04:	dd02      	ble.n	8002e0c <check_ecd+0x308>
			menu3_value = maxMenu3Value;
 8002e06:	4b23      	ldr	r3, [pc, #140]	; (8002e94 <check_ecd+0x390>)
 8002e08:	2263      	movs	r2, #99	; 0x63
 8002e0a:	601a      	str	r2, [r3, #0]
		  if (menu3_value < minMenu3Value)
 8002e0c:	4b21      	ldr	r3, [pc, #132]	; (8002e94 <check_ecd+0x390>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	dc02      	bgt.n	8002e1a <check_ecd+0x316>
			menu3_value = minMenu3Value; //rpm
 8002e14:	4b1f      	ldr	r3, [pc, #124]	; (8002e94 <check_ecd+0x390>)
 8002e16:	2201      	movs	r2, #1
 8002e18:	601a      	str	r2, [r3, #0]
		  refreshMenu3 = true;
 8002e1a:	4b1f      	ldr	r3, [pc, #124]	; (8002e98 <check_ecd+0x394>)
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	701a      	strb	r2, [r3, #0]
  return;
 8002e20:	e02e      	b.n	8002e80 <check_ecd+0x37c>
		  if (delta > 0) {
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	dd06      	ble.n	8002e36 <check_ecd+0x332>
			menuCounter++;
 8002e28:	4b1c      	ldr	r3, [pc, #112]	; (8002e9c <check_ecd+0x398>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	4b1a      	ldr	r3, [pc, #104]	; (8002e9c <check_ecd+0x398>)
 8002e32:	701a      	strb	r2, [r3, #0]
 8002e34:	e00c      	b.n	8002e50 <check_ecd+0x34c>
		  } else if (delta < 0) {
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	da09      	bge.n	8002e50 <check_ecd+0x34c>
			if (menuCounter > 0)
 8002e3c:	4b17      	ldr	r3, [pc, #92]	; (8002e9c <check_ecd+0x398>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d005      	beq.n	8002e50 <check_ecd+0x34c>
			  menuCounter--;
 8002e44:	4b15      	ldr	r3, [pc, #84]	; (8002e9c <check_ecd+0x398>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	4b13      	ldr	r3, [pc, #76]	; (8002e9c <check_ecd+0x398>)
 8002e4e:	701a      	strb	r2, [r3, #0]
		  if (menuCounter > 3)
 8002e50:	4b12      	ldr	r3, [pc, #72]	; (8002e9c <check_ecd+0x398>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2b03      	cmp	r3, #3
 8002e56:	d902      	bls.n	8002e5e <check_ecd+0x35a>
			menuCounter = 3;
 8002e58:	4b10      	ldr	r3, [pc, #64]	; (8002e9c <check_ecd+0x398>)
 8002e5a:	2203      	movs	r2, #3
 8002e5c:	701a      	strb	r2, [r3, #0]
		  if (menuCounter < 1)
 8002e5e:	4b0f      	ldr	r3, [pc, #60]	; (8002e9c <check_ecd+0x398>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d102      	bne.n	8002e6c <check_ecd+0x368>
			menuCounter = 1; //rpm
 8002e66:	4b0d      	ldr	r3, [pc, #52]	; (8002e9c <check_ecd+0x398>)
 8002e68:	2201      	movs	r2, #1
 8002e6a:	701a      	strb	r2, [r3, #0]
		  refreshSelection = true;
 8002e6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <check_ecd+0x39c>)
 8002e6e:	2201      	movs	r2, #1
 8002e70:	701a      	strb	r2, [r3, #0]
  return;
 8002e72:	e005      	b.n	8002e80 <check_ecd+0x37c>
	preEcd = TIM2_count;
 8002e74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ea4 <check_ecd+0x3a0>)
 8002e7c:	6013      	str	r3, [r2, #0]
  return;
 8002e7e:	bf00      	nop
 8002e80:	bf00      	nop
}
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	20000010 	.word	0x20000010
 8002e8c:	2000022c 	.word	0x2000022c
 8002e90:	2000028a 	.word	0x2000028a
 8002e94:	20000004 	.word	0x20000004
 8002e98:	2000028e 	.word	0x2000028e
 8002e9c:	2000000a 	.word	0x2000000a
 8002ea0:	2000028f 	.word	0x2000028f
 8002ea4:	200002e0 	.word	0x200002e0

08002ea8 <LED_ON>:

void LED_ON() {
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED_Panel_GPIO_Port, LED_Panel_Pin, GPIO_PIN_SET);
 8002eac:	2201      	movs	r2, #1
 8002eae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002eb2:	4802      	ldr	r0, [pc, #8]	; (8002ebc <LED_ON+0x14>)
 8002eb4:	f001 fa15 	bl	80042e2 <HAL_GPIO_WritePin>
}
 8002eb8:	bf00      	nop
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40010c00 	.word	0x40010c00

08002ec0 <LED_OFF>:

void LED_OFF() {
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED_Panel_GPIO_Port, LED_Panel_Pin, GPIO_PIN_RESET);
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002eca:	4802      	ldr	r0, [pc, #8]	; (8002ed4 <LED_OFF+0x14>)
 8002ecc:	f001 fa09 	bl	80042e2 <HAL_GPIO_WritePin>
}
 8002ed0:	bf00      	nop
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40010c00 	.word	0x40010c00

08002ed8 <LED_TOGGLE>:

void LED_TOGGLE() {
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  HAL_GPIO_TogglePin(LED_Panel_GPIO_Port, LED_Panel_Pin);
 8002edc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ee0:	4802      	ldr	r0, [pc, #8]	; (8002eec <LED_TOGGLE+0x14>)
 8002ee2:	f001 fa16 	bl	8004312 <HAL_GPIO_TogglePin>
}
 8002ee6:	bf00      	nop
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	40010c00 	.word	0x40010c00

08002ef0 <FLASH_ReadData>:
  HAL_FLASHEx_Erase(&EraseInit, &PageError);
  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, startPage, data);
  HAL_FLASH_Lock();
}

uint32_t FLASH_ReadData(uint32_t addr) {
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /*
   * Read 4 bytes
   * */
  uint32_t data = *(__IO uint32_t*) (addr);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	60fb      	str	r3, [r7, #12]
  return data;
 8002efe:	68fb      	ldr	r3, [r7, #12]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3714      	adds	r7, #20
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bc80      	pop	{r7}
 8002f08:	4770      	bx	lr
	...

08002f0c <printDefaultLCD>:

void printDefaultLCD() {
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
   |Time:   mm:ss/mm:ss |
   |Set count: xxxx revs|
   |Count:    0 revs    |
   ----------------------
   **************************/
  LCD_Print_String_At(&LCD, 1, 1, "Speed: ");
 8002f12:	4b40      	ldr	r3, [pc, #256]	; (8003014 <printDefaultLCD+0x108>)
 8002f14:	2201      	movs	r2, #1
 8002f16:	2101      	movs	r1, #1
 8002f18:	483f      	ldr	r0, [pc, #252]	; (8003018 <printDefaultLCD+0x10c>)
 8002f1a:	f7fe feae 	bl	8001c7a <LCD_Print_String_At>
//----------------------
  LCD_Print_String_At(&LCD, 2, 1, "Time: ");
 8002f1e:	4b3f      	ldr	r3, [pc, #252]	; (800301c <printDefaultLCD+0x110>)
 8002f20:	2201      	movs	r2, #1
 8002f22:	2102      	movs	r1, #2
 8002f24:	483c      	ldr	r0, [pc, #240]	; (8003018 <printDefaultLCD+0x10c>)
 8002f26:	f7fe fea8 	bl	8001c7a <LCD_Print_String_At>
  LCD_Print_String_At(&LCD, 3, 1, "Set count: ");
 8002f2a:	4b3d      	ldr	r3, [pc, #244]	; (8003020 <printDefaultLCD+0x114>)
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	2103      	movs	r1, #3
 8002f30:	4839      	ldr	r0, [pc, #228]	; (8003018 <printDefaultLCD+0x10c>)
 8002f32:	f7fe fea2 	bl	8001c7a <LCD_Print_String_At>
  LCD_Print_String_At(&LCD, 4, 1, "Count: ");
 8002f36:	4b3b      	ldr	r3, [pc, #236]	; (8003024 <printDefaultLCD+0x118>)
 8002f38:	2201      	movs	r2, #1
 8002f3a:	2104      	movs	r1, #4
 8002f3c:	4836      	ldr	r0, [pc, #216]	; (8003018 <printDefaultLCD+0x10c>)
 8002f3e:	f7fe fe9c 	bl	8001c7a <LCD_Print_String_At>

//Update value
  char holder[10];

  sprintf(holder, " ");
 8002f42:	1d3b      	adds	r3, r7, #4
 8002f44:	4938      	ldr	r1, [pc, #224]	; (8003028 <printDefaultLCD+0x11c>)
 8002f46:	4618      	mov	r0, r3
 8002f48:	f003 f972 	bl	8006230 <siprintf>
  LCD_Print_String_At(&LCD, 1, 12, "      ");
 8002f4c:	4b37      	ldr	r3, [pc, #220]	; (800302c <printDefaultLCD+0x120>)
 8002f4e:	220c      	movs	r2, #12
 8002f50:	2101      	movs	r1, #1
 8002f52:	4831      	ldr	r0, [pc, #196]	; (8003018 <printDefaultLCD+0x10c>)
 8002f54:	f7fe fe91 	bl	8001c7a <LCD_Print_String_At>
  sprintf(holder, "%2d rpm", menu1_value);
 8002f58:	4b35      	ldr	r3, [pc, #212]	; (8003030 <printDefaultLCD+0x124>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	1d3b      	adds	r3, r7, #4
 8002f60:	4934      	ldr	r1, [pc, #208]	; (8003034 <printDefaultLCD+0x128>)
 8002f62:	4618      	mov	r0, r3
 8002f64:	f003 f964 	bl	8006230 <siprintf>
  LCD_Print_String_At(&LCD, 1, 12, holder);
 8002f68:	1d3b      	adds	r3, r7, #4
 8002f6a:	220c      	movs	r2, #12
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	482a      	ldr	r0, [pc, #168]	; (8003018 <printDefaultLCD+0x10c>)
 8002f70:	f7fe fe83 	bl	8001c7a <LCD_Print_String_At>

  sprintf(holder, " ");
 8002f74:	1d3b      	adds	r3, r7, #4
 8002f76:	492c      	ldr	r1, [pc, #176]	; (8003028 <printDefaultLCD+0x11c>)
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f003 f959 	bl	8006230 <siprintf>
  LCD_Print_String_At(&LCD, 2, 8, "             ");
 8002f7e:	4b2e      	ldr	r3, [pc, #184]	; (8003038 <printDefaultLCD+0x12c>)
 8002f80:	2208      	movs	r2, #8
 8002f82:	2102      	movs	r1, #2
 8002f84:	4824      	ldr	r0, [pc, #144]	; (8003018 <printDefaultLCD+0x10c>)
 8002f86:	f7fe fe78 	bl	8001c7a <LCD_Print_String_At>
  LCD_Set_Cursor(&LCD, 2, 8);
 8002f8a:	2208      	movs	r2, #8
 8002f8c:	2102      	movs	r1, #2
 8002f8e:	4822      	ldr	r0, [pc, #136]	; (8003018 <printDefaultLCD+0x10c>)
 8002f90:	f7fe fe40 	bl	8001c14 <LCD_Set_Cursor>
  LCD_Print_Clock(0);
 8002f94:	2000      	movs	r0, #0
 8002f96:	f000 f985 	bl	80032a4 <LCD_Print_Clock>

  sprintf(holder, " ");
 8002f9a:	1d3b      	adds	r3, r7, #4
 8002f9c:	4922      	ldr	r1, [pc, #136]	; (8003028 <printDefaultLCD+0x11c>)
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f003 f946 	bl	8006230 <siprintf>
  LCD_Print_String_At(&LCD, 3, 12, "        ");
 8002fa4:	4b25      	ldr	r3, [pc, #148]	; (800303c <printDefaultLCD+0x130>)
 8002fa6:	220c      	movs	r2, #12
 8002fa8:	2103      	movs	r1, #3
 8002faa:	481b      	ldr	r0, [pc, #108]	; (8003018 <printDefaultLCD+0x10c>)
 8002fac:	f7fe fe65 	bl	8001c7a <LCD_Print_String_At>
  sprintf(holder, "%3d revs", (int) menu3_value);
 8002fb0:	4b23      	ldr	r3, [pc, #140]	; (8003040 <printDefaultLCD+0x134>)
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	1d3b      	adds	r3, r7, #4
 8002fb6:	4923      	ldr	r1, [pc, #140]	; (8003044 <printDefaultLCD+0x138>)
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f003 f939 	bl	8006230 <siprintf>
  LCD_Print_String_At(&LCD, 3, 12, holder);
 8002fbe:	1d3b      	adds	r3, r7, #4
 8002fc0:	220c      	movs	r2, #12
 8002fc2:	2103      	movs	r1, #3
 8002fc4:	4814      	ldr	r0, [pc, #80]	; (8003018 <printDefaultLCD+0x10c>)
 8002fc6:	f7fe fe58 	bl	8001c7a <LCD_Print_String_At>

  LCD_Print_String_At(&LCD, 4, 8, "         ");
 8002fca:	4b1f      	ldr	r3, [pc, #124]	; (8003048 <printDefaultLCD+0x13c>)
 8002fcc:	2208      	movs	r2, #8
 8002fce:	2104      	movs	r1, #4
 8002fd0:	4811      	ldr	r0, [pc, #68]	; (8003018 <printDefaultLCD+0x10c>)
 8002fd2:	f7fe fe52 	bl	8001c7a <LCD_Print_String_At>
  if (nLoop < 2) {
 8002fd6:	4b1d      	ldr	r3, [pc, #116]	; (800304c <printDefaultLCD+0x140>)
 8002fd8:	881b      	ldrh	r3, [r3, #0]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d808      	bhi.n	8002ff0 <printDefaultLCD+0xe4>
	sprintf(holder, "%4d rev", nLoop);
 8002fde:	4b1b      	ldr	r3, [pc, #108]	; (800304c <printDefaultLCD+0x140>)
 8002fe0:	881b      	ldrh	r3, [r3, #0]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	1d3b      	adds	r3, r7, #4
 8002fe6:	491a      	ldr	r1, [pc, #104]	; (8003050 <printDefaultLCD+0x144>)
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f003 f921 	bl	8006230 <siprintf>
 8002fee:	e007      	b.n	8003000 <printDefaultLCD+0xf4>
  } else {
	sprintf(holder, "%4d revs", nLoop);
 8002ff0:	4b16      	ldr	r3, [pc, #88]	; (800304c <printDefaultLCD+0x140>)
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	1d3b      	adds	r3, r7, #4
 8002ff8:	4916      	ldr	r1, [pc, #88]	; (8003054 <printDefaultLCD+0x148>)
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f003 f918 	bl	8006230 <siprintf>
  }
  LCD_Print_String_At(&LCD, 4, 8, holder);
 8003000:	1d3b      	adds	r3, r7, #4
 8003002:	2208      	movs	r2, #8
 8003004:	2104      	movs	r1, #4
 8003006:	4804      	ldr	r0, [pc, #16]	; (8003018 <printDefaultLCD+0x10c>)
 8003008:	f7fe fe37 	bl	8001c7a <LCD_Print_String_At>
}
 800300c:	bf00      	nop
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	08006b88 	.word	0x08006b88
 8003018:	2000022c 	.word	0x2000022c
 800301c:	08006b90 	.word	0x08006b90
 8003020:	08006b98 	.word	0x08006b98
 8003024:	08006ba4 	.word	0x08006ba4
 8003028:	08006bac 	.word	0x08006bac
 800302c:	08006bb0 	.word	0x08006bb0
 8003030:	20000274 	.word	0x20000274
 8003034:	08006bb8 	.word	0x08006bb8
 8003038:	08006bc0 	.word	0x08006bc0
 800303c:	08006bd0 	.word	0x08006bd0
 8003040:	20000004 	.word	0x20000004
 8003044:	08006bdc 	.word	0x08006bdc
 8003048:	08006be8 	.word	0x08006be8
 800304c:	2000027c 	.word	0x2000027c
 8003050:	08006bf4 	.word	0x08006bf4
 8003054:	08006bfc 	.word	0x08006bfc

08003058 <update_Menu1>:
 |Time:   mm:ss/mm:ss |
 |Set count: xxxx revs|
 |Count:    0 revs    |
 ----------------------
 **************************/
void update_Menu1() {
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
  char holder[10];
  LCD_Print_String_At(&LCD, 1, 12, "      ");
 800305e:	4b0c      	ldr	r3, [pc, #48]	; (8003090 <update_Menu1+0x38>)
 8003060:	220c      	movs	r2, #12
 8003062:	2101      	movs	r1, #1
 8003064:	480b      	ldr	r0, [pc, #44]	; (8003094 <update_Menu1+0x3c>)
 8003066:	f7fe fe08 	bl	8001c7a <LCD_Print_String_At>
  sprintf(holder, "%2d rpm", menu1_value);
 800306a:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <update_Menu1+0x40>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	461a      	mov	r2, r3
 8003070:	1d3b      	adds	r3, r7, #4
 8003072:	490a      	ldr	r1, [pc, #40]	; (800309c <update_Menu1+0x44>)
 8003074:	4618      	mov	r0, r3
 8003076:	f003 f8db 	bl	8006230 <siprintf>
  LCD_Print_String_At(&LCD, 1, 12, holder);
 800307a:	1d3b      	adds	r3, r7, #4
 800307c:	220c      	movs	r2, #12
 800307e:	2101      	movs	r1, #1
 8003080:	4804      	ldr	r0, [pc, #16]	; (8003094 <update_Menu1+0x3c>)
 8003082:	f7fe fdfa 	bl	8001c7a <LCD_Print_String_At>
}
 8003086:	bf00      	nop
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	08006bb0 	.word	0x08006bb0
 8003094:	2000022c 	.word	0x2000022c
 8003098:	20000274 	.word	0x20000274
 800309c:	08006bb8 	.word	0x08006bb8

080030a0 <update_Menu2>:

void update_Menu2() {
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
  char holder[10];
// fist Min
  if (firstMinSelected) {
 80030a6:	4b61      	ldr	r3, [pc, #388]	; (800322c <update_Menu2+0x18c>)
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d019      	beq.n	80030e2 <update_Menu2+0x42>
	LCD_Print_String_At(&LCD, 2, 8, "  ");
 80030ae:	4b60      	ldr	r3, [pc, #384]	; (8003230 <update_Menu2+0x190>)
 80030b0:	2208      	movs	r2, #8
 80030b2:	2102      	movs	r1, #2
 80030b4:	485f      	ldr	r0, [pc, #380]	; (8003234 <update_Menu2+0x194>)
 80030b6:	f7fe fde0 	bl	8001c7a <LCD_Print_String_At>
	sprintf(holder, "%2d", firstMin);
 80030ba:	4b5f      	ldr	r3, [pc, #380]	; (8003238 <update_Menu2+0x198>)
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	461a      	mov	r2, r3
 80030c0:	1d3b      	adds	r3, r7, #4
 80030c2:	495e      	ldr	r1, [pc, #376]	; (800323c <update_Menu2+0x19c>)
 80030c4:	4618      	mov	r0, r3
 80030c6:	f003 f8b3 	bl	8006230 <siprintf>
	LCD_Print_String_At(&LCD, 2, 8, holder);
 80030ca:	1d3b      	adds	r3, r7, #4
 80030cc:	2208      	movs	r2, #8
 80030ce:	2102      	movs	r1, #2
 80030d0:	4858      	ldr	r0, [pc, #352]	; (8003234 <update_Menu2+0x194>)
 80030d2:	f7fe fdd2 	bl	8001c7a <LCD_Print_String_At>
	LCD_Set_Cursor(&LCD, 2, 8);
 80030d6:	2208      	movs	r2, #8
 80030d8:	2102      	movs	r1, #2
 80030da:	4856      	ldr	r0, [pc, #344]	; (8003234 <update_Menu2+0x194>)
 80030dc:	f7fe fd9a 	bl	8001c14 <LCD_Set_Cursor>
 80030e0:	e099      	b.n	8003216 <update_Menu2+0x176>
  }
// last Min
  else if (lastMinSelected) {
 80030e2:	4b57      	ldr	r3, [pc, #348]	; (8003240 <update_Menu2+0x1a0>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d013      	beq.n	8003112 <update_Menu2+0x72>
	sprintf(holder, "%1d", lastMin);
 80030ea:	4b56      	ldr	r3, [pc, #344]	; (8003244 <update_Menu2+0x1a4>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	461a      	mov	r2, r3
 80030f0:	1d3b      	adds	r3, r7, #4
 80030f2:	4955      	ldr	r1, [pc, #340]	; (8003248 <update_Menu2+0x1a8>)
 80030f4:	4618      	mov	r0, r3
 80030f6:	f003 f89b 	bl	8006230 <siprintf>
	LCD_Print_String_At(&LCD, 2, 10, holder);
 80030fa:	1d3b      	adds	r3, r7, #4
 80030fc:	220a      	movs	r2, #10
 80030fe:	2102      	movs	r1, #2
 8003100:	484c      	ldr	r0, [pc, #304]	; (8003234 <update_Menu2+0x194>)
 8003102:	f7fe fdba 	bl	8001c7a <LCD_Print_String_At>
	LCD_Set_Cursor(&LCD, 2, 8);
 8003106:	2208      	movs	r2, #8
 8003108:	2102      	movs	r1, #2
 800310a:	484a      	ldr	r0, [pc, #296]	; (8003234 <update_Menu2+0x194>)
 800310c:	f7fe fd82 	bl	8001c14 <LCD_Set_Cursor>
 8003110:	e081      	b.n	8003216 <update_Menu2+0x176>
  }
// first Sec
  else if (firstSecSelected) {
 8003112:	4b4e      	ldr	r3, [pc, #312]	; (800324c <update_Menu2+0x1ac>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d013      	beq.n	8003142 <update_Menu2+0xa2>
	sprintf(holder, "%1d", firstSec);
 800311a:	4b4d      	ldr	r3, [pc, #308]	; (8003250 <update_Menu2+0x1b0>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	1d3b      	adds	r3, r7, #4
 8003122:	4949      	ldr	r1, [pc, #292]	; (8003248 <update_Menu2+0x1a8>)
 8003124:	4618      	mov	r0, r3
 8003126:	f003 f883 	bl	8006230 <siprintf>
	LCD_Print_String_At(&LCD, 2, 12, holder);
 800312a:	1d3b      	adds	r3, r7, #4
 800312c:	220c      	movs	r2, #12
 800312e:	2102      	movs	r1, #2
 8003130:	4840      	ldr	r0, [pc, #256]	; (8003234 <update_Menu2+0x194>)
 8003132:	f7fe fda2 	bl	8001c7a <LCD_Print_String_At>
	LCD_Set_Cursor(&LCD, 2, 8);
 8003136:	2208      	movs	r2, #8
 8003138:	2102      	movs	r1, #2
 800313a:	483e      	ldr	r0, [pc, #248]	; (8003234 <update_Menu2+0x194>)
 800313c:	f7fe fd6a 	bl	8001c14 <LCD_Set_Cursor>
 8003140:	e069      	b.n	8003216 <update_Menu2+0x176>
  }
// last Sec
  else if (lastSecSelected) {
 8003142:	4b44      	ldr	r3, [pc, #272]	; (8003254 <update_Menu2+0x1b4>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d013      	beq.n	8003172 <update_Menu2+0xd2>
	sprintf(holder, "%1d", lastSec);
 800314a:	4b43      	ldr	r3, [pc, #268]	; (8003258 <update_Menu2+0x1b8>)
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	461a      	mov	r2, r3
 8003150:	1d3b      	adds	r3, r7, #4
 8003152:	493d      	ldr	r1, [pc, #244]	; (8003248 <update_Menu2+0x1a8>)
 8003154:	4618      	mov	r0, r3
 8003156:	f003 f86b 	bl	8006230 <siprintf>
	LCD_Print_String_At(&LCD, 2, 13, holder);
 800315a:	1d3b      	adds	r3, r7, #4
 800315c:	220d      	movs	r2, #13
 800315e:	2102      	movs	r1, #2
 8003160:	4834      	ldr	r0, [pc, #208]	; (8003234 <update_Menu2+0x194>)
 8003162:	f7fe fd8a 	bl	8001c7a <LCD_Print_String_At>
	LCD_Set_Cursor(&LCD, 2, 8);
 8003166:	2208      	movs	r2, #8
 8003168:	2102      	movs	r1, #2
 800316a:	4832      	ldr	r0, [pc, #200]	; (8003234 <update_Menu2+0x194>)
 800316c:	f7fe fd52 	bl	8001c14 <LCD_Set_Cursor>
 8003170:	e051      	b.n	8003216 <update_Menu2+0x176>
  } else {
	LCD_Print_String_At(&LCD, 2, 8, "  ");
 8003172:	4b2f      	ldr	r3, [pc, #188]	; (8003230 <update_Menu2+0x190>)
 8003174:	2208      	movs	r2, #8
 8003176:	2102      	movs	r1, #2
 8003178:	482e      	ldr	r0, [pc, #184]	; (8003234 <update_Menu2+0x194>)
 800317a:	f7fe fd7e 	bl	8001c7a <LCD_Print_String_At>
	sprintf(holder, "%2d", firstMin);
 800317e:	4b2e      	ldr	r3, [pc, #184]	; (8003238 <update_Menu2+0x198>)
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	461a      	mov	r2, r3
 8003184:	1d3b      	adds	r3, r7, #4
 8003186:	492d      	ldr	r1, [pc, #180]	; (800323c <update_Menu2+0x19c>)
 8003188:	4618      	mov	r0, r3
 800318a:	f003 f851 	bl	8006230 <siprintf>
	LCD_Print_String_At(&LCD, 2, 8, holder);
 800318e:	1d3b      	adds	r3, r7, #4
 8003190:	2208      	movs	r2, #8
 8003192:	2102      	movs	r1, #2
 8003194:	4827      	ldr	r0, [pc, #156]	; (8003234 <update_Menu2+0x194>)
 8003196:	f7fe fd70 	bl	8001c7a <LCD_Print_String_At>
	LCD_Set_Cursor(&LCD, 2, 8);
 800319a:	2208      	movs	r2, #8
 800319c:	2102      	movs	r1, #2
 800319e:	4825      	ldr	r0, [pc, #148]	; (8003234 <update_Menu2+0x194>)
 80031a0:	f7fe fd38 	bl	8001c14 <LCD_Set_Cursor>

	sprintf(holder, "%1d", lastMin);
 80031a4:	4b27      	ldr	r3, [pc, #156]	; (8003244 <update_Menu2+0x1a4>)
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	461a      	mov	r2, r3
 80031aa:	1d3b      	adds	r3, r7, #4
 80031ac:	4926      	ldr	r1, [pc, #152]	; (8003248 <update_Menu2+0x1a8>)
 80031ae:	4618      	mov	r0, r3
 80031b0:	f003 f83e 	bl	8006230 <siprintf>
	LCD_Print_String_At(&LCD, 2, 10, holder);
 80031b4:	1d3b      	adds	r3, r7, #4
 80031b6:	220a      	movs	r2, #10
 80031b8:	2102      	movs	r1, #2
 80031ba:	481e      	ldr	r0, [pc, #120]	; (8003234 <update_Menu2+0x194>)
 80031bc:	f7fe fd5d 	bl	8001c7a <LCD_Print_String_At>
	LCD_Set_Cursor(&LCD, 2, 8);
 80031c0:	2208      	movs	r2, #8
 80031c2:	2102      	movs	r1, #2
 80031c4:	481b      	ldr	r0, [pc, #108]	; (8003234 <update_Menu2+0x194>)
 80031c6:	f7fe fd25 	bl	8001c14 <LCD_Set_Cursor>

	sprintf(holder, "%1d", firstSec);
 80031ca:	4b21      	ldr	r3, [pc, #132]	; (8003250 <update_Menu2+0x1b0>)
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	461a      	mov	r2, r3
 80031d0:	1d3b      	adds	r3, r7, #4
 80031d2:	491d      	ldr	r1, [pc, #116]	; (8003248 <update_Menu2+0x1a8>)
 80031d4:	4618      	mov	r0, r3
 80031d6:	f003 f82b 	bl	8006230 <siprintf>
	LCD_Print_String_At(&LCD, 2, 12, holder);
 80031da:	1d3b      	adds	r3, r7, #4
 80031dc:	220c      	movs	r2, #12
 80031de:	2102      	movs	r1, #2
 80031e0:	4814      	ldr	r0, [pc, #80]	; (8003234 <update_Menu2+0x194>)
 80031e2:	f7fe fd4a 	bl	8001c7a <LCD_Print_String_At>
	LCD_Set_Cursor(&LCD, 2, 8);
 80031e6:	2208      	movs	r2, #8
 80031e8:	2102      	movs	r1, #2
 80031ea:	4812      	ldr	r0, [pc, #72]	; (8003234 <update_Menu2+0x194>)
 80031ec:	f7fe fd12 	bl	8001c14 <LCD_Set_Cursor>

	sprintf(holder, "%1d", lastSec);
 80031f0:	4b19      	ldr	r3, [pc, #100]	; (8003258 <update_Menu2+0x1b8>)
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	461a      	mov	r2, r3
 80031f6:	1d3b      	adds	r3, r7, #4
 80031f8:	4913      	ldr	r1, [pc, #76]	; (8003248 <update_Menu2+0x1a8>)
 80031fa:	4618      	mov	r0, r3
 80031fc:	f003 f818 	bl	8006230 <siprintf>
	LCD_Print_String_At(&LCD, 2, 13, holder);
 8003200:	1d3b      	adds	r3, r7, #4
 8003202:	220d      	movs	r2, #13
 8003204:	2102      	movs	r1, #2
 8003206:	480b      	ldr	r0, [pc, #44]	; (8003234 <update_Menu2+0x194>)
 8003208:	f7fe fd37 	bl	8001c7a <LCD_Print_String_At>
	LCD_Set_Cursor(&LCD, 2, 8);
 800320c:	2208      	movs	r2, #8
 800320e:	2102      	movs	r1, #2
 8003210:	4808      	ldr	r0, [pc, #32]	; (8003234 <update_Menu2+0x194>)
 8003212:	f7fe fcff 	bl	8001c14 <LCD_Set_Cursor>
  }

  LCD_Print_String_At(&LCD, 2, 11, ":");
 8003216:	4b11      	ldr	r3, [pc, #68]	; (800325c <update_Menu2+0x1bc>)
 8003218:	220b      	movs	r2, #11
 800321a:	2102      	movs	r1, #2
 800321c:	4805      	ldr	r0, [pc, #20]	; (8003234 <update_Menu2+0x194>)
 800321e:	f7fe fd2c 	bl	8001c7a <LCD_Print_String_At>
}
 8003222:	bf00      	nop
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	200002a8 	.word	0x200002a8
 8003230:	08006c08 	.word	0x08006c08
 8003234:	2000022c 	.word	0x2000022c
 8003238:	20000284 	.word	0x20000284
 800323c:	08006c0c 	.word	0x08006c0c
 8003240:	200002a9 	.word	0x200002a9
 8003244:	20000285 	.word	0x20000285
 8003248:	08006c10 	.word	0x08006c10
 800324c:	200002aa 	.word	0x200002aa
 8003250:	20000286 	.word	0x20000286
 8003254:	200002ab 	.word	0x200002ab
 8003258:	20000287 	.word	0x20000287
 800325c:	08006c14 	.word	0x08006c14

08003260 <update_Menu3>:

void update_Menu3() {
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
  char holder[10];
  LCD_Print_String_At(&LCD, 3, 12, "        ");
 8003266:	4b0b      	ldr	r3, [pc, #44]	; (8003294 <update_Menu3+0x34>)
 8003268:	220c      	movs	r2, #12
 800326a:	2103      	movs	r1, #3
 800326c:	480a      	ldr	r0, [pc, #40]	; (8003298 <update_Menu3+0x38>)
 800326e:	f7fe fd04 	bl	8001c7a <LCD_Print_String_At>
  sprintf(holder, "%3d revs", (int) menu3_value);
 8003272:	4b0a      	ldr	r3, [pc, #40]	; (800329c <update_Menu3+0x3c>)
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	1d3b      	adds	r3, r7, #4
 8003278:	4909      	ldr	r1, [pc, #36]	; (80032a0 <update_Menu3+0x40>)
 800327a:	4618      	mov	r0, r3
 800327c:	f002 ffd8 	bl	8006230 <siprintf>
  LCD_Print_String_At(&LCD, 3, 12, holder);
 8003280:	1d3b      	adds	r3, r7, #4
 8003282:	220c      	movs	r2, #12
 8003284:	2103      	movs	r1, #3
 8003286:	4804      	ldr	r0, [pc, #16]	; (8003298 <update_Menu3+0x38>)
 8003288:	f7fe fcf7 	bl	8001c7a <LCD_Print_String_At>
}
 800328c:	bf00      	nop
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	08006bd0 	.word	0x08006bd0
 8003298:	2000022c 	.word	0x2000022c
 800329c:	20000004 	.word	0x20000004
 80032a0:	08006bdc 	.word	0x08006bdc

080032a4 <LCD_Print_Clock>:

void LCD_Print_Clock(u32 sec) {
 80032a4:	b590      	push	{r4, r7, lr}
 80032a6:	b08b      	sub	sp, #44	; 0x2c
 80032a8:	af02      	add	r7, sp, #8
 80032aa:	6078      	str	r0, [r7, #4]
   *    |Time:   mm:ss/mm:ss |
   * */

  char holder[14];
  u8 setMin, setSec, curMin, curSec;
  curMin = sec / 60;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a3b      	ldr	r2, [pc, #236]	; (800339c <LCD_Print_Clock+0xf8>)
 80032b0:	fba2 2303 	umull	r2, r3, r2, r3
 80032b4:	095b      	lsrs	r3, r3, #5
 80032b6:	77fb      	strb	r3, [r7, #31]
  curSec = sec % 60;
 80032b8:	6879      	ldr	r1, [r7, #4]
 80032ba:	4b38      	ldr	r3, [pc, #224]	; (800339c <LCD_Print_Clock+0xf8>)
 80032bc:	fba3 2301 	umull	r2, r3, r3, r1
 80032c0:	095a      	lsrs	r2, r3, #5
 80032c2:	4613      	mov	r3, r2
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	1a9b      	subs	r3, r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	1aca      	subs	r2, r1, r3
 80032cc:	4613      	mov	r3, r2
 80032ce:	77bb      	strb	r3, [r7, #30]
  setMin = menu2_value / 60;
 80032d0:	4b33      	ldr	r3, [pc, #204]	; (80033a0 <LCD_Print_Clock+0xfc>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a31      	ldr	r2, [pc, #196]	; (800339c <LCD_Print_Clock+0xf8>)
 80032d6:	fba2 2303 	umull	r2, r3, r2, r3
 80032da:	095b      	lsrs	r3, r3, #5
 80032dc:	777b      	strb	r3, [r7, #29]
  setSec = menu2_value % 60;
 80032de:	4b30      	ldr	r3, [pc, #192]	; (80033a0 <LCD_Print_Clock+0xfc>)
 80032e0:	6819      	ldr	r1, [r3, #0]
 80032e2:	4b2e      	ldr	r3, [pc, #184]	; (800339c <LCD_Print_Clock+0xf8>)
 80032e4:	fba3 2301 	umull	r2, r3, r3, r1
 80032e8:	095a      	lsrs	r2, r3, #5
 80032ea:	4613      	mov	r3, r2
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	1a9b      	subs	r3, r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	1aca      	subs	r2, r1, r3
 80032f4:	4613      	mov	r3, r2
 80032f6:	773b      	strb	r3, [r7, #28]
  if (curMin < 100) {
 80032f8:	7ffb      	ldrb	r3, [r7, #31]
 80032fa:	2b63      	cmp	r3, #99	; 0x63
 80032fc:	d825      	bhi.n	800334a <LCD_Print_Clock+0xa6>
	if (setMin >= 100) {
 80032fe:	7f7b      	ldrb	r3, [r7, #29]
 8003300:	2b63      	cmp	r3, #99	; 0x63
 8003302:	d90d      	bls.n	8003320 <LCD_Print_Clock+0x7c>
	  sprintf(holder, "%02d:%02d/%03d:%02d", curMin, curSec, setMin, setSec);
 8003304:	7ff9      	ldrb	r1, [r7, #31]
 8003306:	7fbc      	ldrb	r4, [r7, #30]
 8003308:	7f7b      	ldrb	r3, [r7, #29]
 800330a:	7f3a      	ldrb	r2, [r7, #28]
 800330c:	f107 000c 	add.w	r0, r7, #12
 8003310:	9201      	str	r2, [sp, #4]
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	4623      	mov	r3, r4
 8003316:	460a      	mov	r2, r1
 8003318:	4922      	ldr	r1, [pc, #136]	; (80033a4 <LCD_Print_Clock+0x100>)
 800331a:	f002 ff89 	bl	8006230 <siprintf>
 800331e:	e00c      	b.n	800333a <LCD_Print_Clock+0x96>
	} else {
	  sprintf(holder, "%02d:%02d/%02d:%02d", curMin, curSec, setMin, setSec);
 8003320:	7ff9      	ldrb	r1, [r7, #31]
 8003322:	7fbc      	ldrb	r4, [r7, #30]
 8003324:	7f7b      	ldrb	r3, [r7, #29]
 8003326:	7f3a      	ldrb	r2, [r7, #28]
 8003328:	f107 000c 	add.w	r0, r7, #12
 800332c:	9201      	str	r2, [sp, #4]
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	4623      	mov	r3, r4
 8003332:	460a      	mov	r2, r1
 8003334:	491c      	ldr	r1, [pc, #112]	; (80033a8 <LCD_Print_Clock+0x104>)
 8003336:	f002 ff7b 	bl	8006230 <siprintf>
	}
	LCD_Print_String_At(&LCD, 2, 9, holder);
 800333a:	f107 030c 	add.w	r3, r7, #12
 800333e:	2209      	movs	r2, #9
 8003340:	2102      	movs	r1, #2
 8003342:	481a      	ldr	r0, [pc, #104]	; (80033ac <LCD_Print_Clock+0x108>)
 8003344:	f7fe fc99 	bl	8001c7a <LCD_Print_String_At>
	} else {
	  sprintf(holder, "%3d:%02d/%02d:%02d", curMin, curSec, setMin, setSec);
	}
	LCD_Print_String_At(&LCD, 2, 8, holder);
  }
}
 8003348:	e024      	b.n	8003394 <LCD_Print_Clock+0xf0>
	if (setMin >= 100) {
 800334a:	7f7b      	ldrb	r3, [r7, #29]
 800334c:	2b63      	cmp	r3, #99	; 0x63
 800334e:	d90d      	bls.n	800336c <LCD_Print_Clock+0xc8>
	  sprintf(holder, "%3d:%02d/%03d:%02d", curMin, curSec, setMin, setSec);
 8003350:	7ff9      	ldrb	r1, [r7, #31]
 8003352:	7fbc      	ldrb	r4, [r7, #30]
 8003354:	7f7b      	ldrb	r3, [r7, #29]
 8003356:	7f3a      	ldrb	r2, [r7, #28]
 8003358:	f107 000c 	add.w	r0, r7, #12
 800335c:	9201      	str	r2, [sp, #4]
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	4623      	mov	r3, r4
 8003362:	460a      	mov	r2, r1
 8003364:	4912      	ldr	r1, [pc, #72]	; (80033b0 <LCD_Print_Clock+0x10c>)
 8003366:	f002 ff63 	bl	8006230 <siprintf>
 800336a:	e00c      	b.n	8003386 <LCD_Print_Clock+0xe2>
	  sprintf(holder, "%3d:%02d/%02d:%02d", curMin, curSec, setMin, setSec);
 800336c:	7ff9      	ldrb	r1, [r7, #31]
 800336e:	7fbc      	ldrb	r4, [r7, #30]
 8003370:	7f7b      	ldrb	r3, [r7, #29]
 8003372:	7f3a      	ldrb	r2, [r7, #28]
 8003374:	f107 000c 	add.w	r0, r7, #12
 8003378:	9201      	str	r2, [sp, #4]
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	4623      	mov	r3, r4
 800337e:	460a      	mov	r2, r1
 8003380:	490c      	ldr	r1, [pc, #48]	; (80033b4 <LCD_Print_Clock+0x110>)
 8003382:	f002 ff55 	bl	8006230 <siprintf>
	LCD_Print_String_At(&LCD, 2, 8, holder);
 8003386:	f107 030c 	add.w	r3, r7, #12
 800338a:	2208      	movs	r2, #8
 800338c:	2102      	movs	r1, #2
 800338e:	4807      	ldr	r0, [pc, #28]	; (80033ac <LCD_Print_Clock+0x108>)
 8003390:	f7fe fc73 	bl	8001c7a <LCD_Print_String_At>
}
 8003394:	bf00      	nop
 8003396:	3724      	adds	r7, #36	; 0x24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd90      	pop	{r4, r7, pc}
 800339c:	88888889 	.word	0x88888889
 80033a0:	20000278 	.word	0x20000278
 80033a4:	08006c18 	.word	0x08006c18
 80033a8:	08006c2c 	.word	0x08006c2c
 80033ac:	2000022c 	.word	0x2000022c
 80033b0:	08006c40 	.word	0x08006c40
 80033b4:	08006c54 	.word	0x08006c54

080033b8 <printMenuName>:

void printMenuName() {
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
   |                    |
   ----------------------
   **************************/

//These are the values which are not changing the operation
  LCD_Print_String_At(&LCD, 1, 2, "Speed: ");
 80033bc:	4b09      	ldr	r3, [pc, #36]	; (80033e4 <printMenuName+0x2c>)
 80033be:	2202      	movs	r2, #2
 80033c0:	2101      	movs	r1, #1
 80033c2:	4809      	ldr	r0, [pc, #36]	; (80033e8 <printMenuName+0x30>)
 80033c4:	f7fe fc59 	bl	8001c7a <LCD_Print_String_At>
//----------------------
  LCD_Print_String_At(&LCD, 2, 2, "Time: ");
 80033c8:	4b08      	ldr	r3, [pc, #32]	; (80033ec <printMenuName+0x34>)
 80033ca:	2202      	movs	r2, #2
 80033cc:	2102      	movs	r1, #2
 80033ce:	4806      	ldr	r0, [pc, #24]	; (80033e8 <printMenuName+0x30>)
 80033d0:	f7fe fc53 	bl	8001c7a <LCD_Print_String_At>
  LCD_Print_String_At(&LCD, 3, 2, "Set count: ");
 80033d4:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <printMenuName+0x38>)
 80033d6:	2202      	movs	r2, #2
 80033d8:	2103      	movs	r1, #3
 80033da:	4803      	ldr	r0, [pc, #12]	; (80033e8 <printMenuName+0x30>)
 80033dc:	f7fe fc4d 	bl	8001c7a <LCD_Print_String_At>
//----------------------
}
 80033e0:	bf00      	nop
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	08006b88 	.word	0x08006b88
 80033e8:	2000022c 	.word	0x2000022c
 80033ec:	08006b90 	.word	0x08006b90
 80033f0:	08006b98 	.word	0x08006b98

080033f4 <printMenuValue>:

void printMenuValue() {
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
   | Set count: xxxx    |
   |                    |
   ----------------------
   **************************/
//Update value
  update_Menu1();
 80033f8:	f7ff fe2e 	bl	8003058 <update_Menu1>
  update_Menu2();
 80033fc:	f7ff fe50 	bl	80030a0 <update_Menu2>
  update_Menu3();
 8003400:	f7ff ff2e 	bl	8003260 <update_Menu3>
}
 8003404:	bf00      	nop
 8003406:	bd80      	pop	{r7, pc}

08003408 <blinkCursor>:
 *
 * */
u32 lastBlink = 0;
bool _isBlink = false;

void blinkCursor() {
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
  u32 now = HAL_GetTick();
 800340e:	f000 fa91 	bl	8003934 <HAL_GetTick>
 8003412:	6078      	str	r0, [r7, #4]
  if (now - lastBlink > 250) {
 8003414:	4b0e      	ldr	r3, [pc, #56]	; (8003450 <blinkCursor+0x48>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2bfa      	cmp	r3, #250	; 0xfa
 800341e:	d913      	bls.n	8003448 <blinkCursor+0x40>
	lastBlink = now;
 8003420:	4a0b      	ldr	r2, [pc, #44]	; (8003450 <blinkCursor+0x48>)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6013      	str	r3, [r2, #0]
	if (_isBlink) {
 8003426:	4b0b      	ldr	r3, [pc, #44]	; (8003454 <blinkCursor+0x4c>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d006      	beq.n	800343c <blinkCursor+0x34>
	  CLCD_I2C_CursorOn(&LCD);
 800342e:	480a      	ldr	r0, [pc, #40]	; (8003458 <blinkCursor+0x50>)
 8003430:	f7fe fb80 	bl	8001b34 <CLCD_I2C_CursorOn>
	  _isBlink = false;
 8003434:	4b07      	ldr	r3, [pc, #28]	; (8003454 <blinkCursor+0x4c>)
 8003436:	2200      	movs	r2, #0
 8003438:	701a      	strb	r2, [r3, #0]
	} else {
	  CLCD_I2C_CursorOff(&LCD);
	  _isBlink = true;
	}
  }
}
 800343a:	e005      	b.n	8003448 <blinkCursor+0x40>
	  CLCD_I2C_CursorOff(&LCD);
 800343c:	4806      	ldr	r0, [pc, #24]	; (8003458 <blinkCursor+0x50>)
 800343e:	f7fe fb8f 	bl	8001b60 <CLCD_I2C_CursorOff>
	  _isBlink = true;
 8003442:	4b04      	ldr	r3, [pc, #16]	; (8003454 <blinkCursor+0x4c>)
 8003444:	2201      	movs	r2, #1
 8003446:	701a      	strb	r2, [r3, #0]
}
 8003448:	bf00      	nop
 800344a:	3708      	adds	r7, #8
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	200002e4 	.word	0x200002e4
 8003454:	200002e8 	.word	0x200002e8
 8003458:	2000022c 	.word	0x2000022c

0800345c <updateSelection>:

void updateSelection() {
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
//Clear display's ">" parts
  LCD_Print_String_At(&LCD, 1, 1, " ");
 8003460:	4b3b      	ldr	r3, [pc, #236]	; (8003550 <updateSelection+0xf4>)
 8003462:	2201      	movs	r2, #1
 8003464:	2101      	movs	r1, #1
 8003466:	483b      	ldr	r0, [pc, #236]	; (8003554 <updateSelection+0xf8>)
 8003468:	f7fe fc07 	bl	8001c7a <LCD_Print_String_At>
  LCD_Print_String_At(&LCD, 2, 1, " ");
 800346c:	4b38      	ldr	r3, [pc, #224]	; (8003550 <updateSelection+0xf4>)
 800346e:	2201      	movs	r2, #1
 8003470:	2102      	movs	r1, #2
 8003472:	4838      	ldr	r0, [pc, #224]	; (8003554 <updateSelection+0xf8>)
 8003474:	f7fe fc01 	bl	8001c7a <LCD_Print_String_At>
  LCD_Print_String_At(&LCD, 3, 1, " ");
 8003478:	4b35      	ldr	r3, [pc, #212]	; (8003550 <updateSelection+0xf4>)
 800347a:	2201      	movs	r2, #1
 800347c:	2103      	movs	r1, #3
 800347e:	4835      	ldr	r0, [pc, #212]	; (8003554 <updateSelection+0xf8>)
 8003480:	f7fe fbfb 	bl	8001c7a <LCD_Print_String_At>
  LCD_Print_String_At(&LCD, 4, 1, " ");
 8003484:	4b32      	ldr	r3, [pc, #200]	; (8003550 <updateSelection+0xf4>)
 8003486:	2201      	movs	r2, #1
 8003488:	2104      	movs	r1, #4
 800348a:	4832      	ldr	r0, [pc, #200]	; (8003554 <updateSelection+0xf8>)
 800348c:	f7fe fbf5 	bl	8001c7a <LCD_Print_String_At>

//When a menu is selected ">" becomes "X"
  if (menu1_selected == true) {
 8003490:	4b31      	ldr	r3, [pc, #196]	; (8003558 <updateSelection+0xfc>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d006      	beq.n	80034a6 <updateSelection+0x4a>
	LCD_Print_String_At(&LCD, 1, 1, "*");
 8003498:	4b30      	ldr	r3, [pc, #192]	; (800355c <updateSelection+0x100>)
 800349a:	2201      	movs	r2, #1
 800349c:	2101      	movs	r1, #1
 800349e:	482d      	ldr	r0, [pc, #180]	; (8003554 <updateSelection+0xf8>)
 80034a0:	f7fe fbeb 	bl	8001c7a <LCD_Print_String_At>
	  case 4:
		LCD_Print_String_At(&LCD, 4, 1, ">");
		break;
	}
  }
}
 80034a4:	e052      	b.n	800354c <updateSelection+0xf0>
  } else if (menu2_selected == true) {
 80034a6:	4b2e      	ldr	r3, [pc, #184]	; (8003560 <updateSelection+0x104>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00b      	beq.n	80034c6 <updateSelection+0x6a>
	LCD_Print_String_At(&LCD, 2, 1, "*");
 80034ae:	4b2b      	ldr	r3, [pc, #172]	; (800355c <updateSelection+0x100>)
 80034b0:	2201      	movs	r2, #1
 80034b2:	2102      	movs	r1, #2
 80034b4:	4827      	ldr	r0, [pc, #156]	; (8003554 <updateSelection+0xf8>)
 80034b6:	f7fe fbe0 	bl	8001c7a <LCD_Print_String_At>
	LCD_Set_Cursor(&LCD, 2, 9);
 80034ba:	2209      	movs	r2, #9
 80034bc:	2102      	movs	r1, #2
 80034be:	4825      	ldr	r0, [pc, #148]	; (8003554 <updateSelection+0xf8>)
 80034c0:	f7fe fba8 	bl	8001c14 <LCD_Set_Cursor>
}
 80034c4:	e042      	b.n	800354c <updateSelection+0xf0>
  } else if (menu3_selected == true) {
 80034c6:	4b27      	ldr	r3, [pc, #156]	; (8003564 <updateSelection+0x108>)
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d006      	beq.n	80034dc <updateSelection+0x80>
	LCD_Print_String_At(&LCD, 3, 1, "*");
 80034ce:	4b23      	ldr	r3, [pc, #140]	; (800355c <updateSelection+0x100>)
 80034d0:	2201      	movs	r2, #1
 80034d2:	2103      	movs	r1, #3
 80034d4:	481f      	ldr	r0, [pc, #124]	; (8003554 <updateSelection+0xf8>)
 80034d6:	f7fe fbd0 	bl	8001c7a <LCD_Print_String_At>
}
 80034da:	e037      	b.n	800354c <updateSelection+0xf0>
  } else if (menu4_selected == true) {
 80034dc:	4b22      	ldr	r3, [pc, #136]	; (8003568 <updateSelection+0x10c>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d006      	beq.n	80034f2 <updateSelection+0x96>
	LCD_Print_String_At(&LCD, 4, 1, "*");
 80034e4:	4b1d      	ldr	r3, [pc, #116]	; (800355c <updateSelection+0x100>)
 80034e6:	2201      	movs	r2, #1
 80034e8:	2104      	movs	r1, #4
 80034ea:	481a      	ldr	r0, [pc, #104]	; (8003554 <updateSelection+0xf8>)
 80034ec:	f7fe fbc5 	bl	8001c7a <LCD_Print_String_At>
}
 80034f0:	e02c      	b.n	800354c <updateSelection+0xf0>
	switch (menuCounter) //this checks the value of the counter (0, 1, 2 or 3)
 80034f2:	4b1e      	ldr	r3, [pc, #120]	; (800356c <updateSelection+0x110>)
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	3b01      	subs	r3, #1
 80034f8:	2b03      	cmp	r3, #3
 80034fa:	d827      	bhi.n	800354c <updateSelection+0xf0>
 80034fc:	a201      	add	r2, pc, #4	; (adr r2, 8003504 <updateSelection+0xa8>)
 80034fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003502:	bf00      	nop
 8003504:	08003515 	.word	0x08003515
 8003508:	08003523 	.word	0x08003523
 800350c:	08003531 	.word	0x08003531
 8003510:	0800353f 	.word	0x0800353f
		LCD_Print_String_At(&LCD, 1, 1, ">");
 8003514:	4b16      	ldr	r3, [pc, #88]	; (8003570 <updateSelection+0x114>)
 8003516:	2201      	movs	r2, #1
 8003518:	2101      	movs	r1, #1
 800351a:	480e      	ldr	r0, [pc, #56]	; (8003554 <updateSelection+0xf8>)
 800351c:	f7fe fbad 	bl	8001c7a <LCD_Print_String_At>
		break;
 8003520:	e014      	b.n	800354c <updateSelection+0xf0>
		LCD_Print_String_At(&LCD, 2, 1, ">");
 8003522:	4b13      	ldr	r3, [pc, #76]	; (8003570 <updateSelection+0x114>)
 8003524:	2201      	movs	r2, #1
 8003526:	2102      	movs	r1, #2
 8003528:	480a      	ldr	r0, [pc, #40]	; (8003554 <updateSelection+0xf8>)
 800352a:	f7fe fba6 	bl	8001c7a <LCD_Print_String_At>
		break;
 800352e:	e00d      	b.n	800354c <updateSelection+0xf0>
		LCD_Print_String_At(&LCD, 3, 1, ">");
 8003530:	4b0f      	ldr	r3, [pc, #60]	; (8003570 <updateSelection+0x114>)
 8003532:	2201      	movs	r2, #1
 8003534:	2103      	movs	r1, #3
 8003536:	4807      	ldr	r0, [pc, #28]	; (8003554 <updateSelection+0xf8>)
 8003538:	f7fe fb9f 	bl	8001c7a <LCD_Print_String_At>
		break;
 800353c:	e006      	b.n	800354c <updateSelection+0xf0>
		LCD_Print_String_At(&LCD, 4, 1, ">");
 800353e:	4b0c      	ldr	r3, [pc, #48]	; (8003570 <updateSelection+0x114>)
 8003540:	2201      	movs	r2, #1
 8003542:	2104      	movs	r1, #4
 8003544:	4803      	ldr	r0, [pc, #12]	; (8003554 <updateSelection+0xf8>)
 8003546:	f7fe fb98 	bl	8001c7a <LCD_Print_String_At>
		break;
 800354a:	bf00      	nop
}
 800354c:	bf00      	nop
 800354e:	bd80      	pop	{r7, pc}
 8003550:	08006bac 	.word	0x08006bac
 8003554:	2000022c 	.word	0x2000022c
 8003558:	20000288 	.word	0x20000288
 800355c:	08006c68 	.word	0x08006c68
 8003560:	20000289 	.word	0x20000289
 8003564:	2000028a 	.word	0x2000028a
 8003568:	2000028b 	.word	0x2000028b
 800356c:	2000000a 	.word	0x2000000a
 8003570:	08006c6c 	.word	0x08006c6c

08003574 <set_motor>:

void set_motor(u8 id, s8 dir, u16 val) {
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af02      	add	r7, sp, #8
 800357a:	4603      	mov	r3, r0
 800357c:	71fb      	strb	r3, [r7, #7]
 800357e:	460b      	mov	r3, r1
 8003580:	71bb      	strb	r3, [r7, #6]
 8003582:	4613      	mov	r3, r2
 8003584:	80bb      	strh	r3, [r7, #4]
  u16 pwm;
  switch (id) {
 8003586:	79fb      	ldrb	r3, [r7, #7]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d05d      	beq.n	8003648 <set_motor+0xd4>
 800358c:	2b02      	cmp	r3, #2
 800358e:	d000      	beq.n	8003592 <set_motor+0x1e>
		HAL_GPIO_WritePin(M2B_R_GPIO_Port, M2B_R_Pin, GPIO_PIN_RESET);
		M2B_Channel = 999;
	  }
	  break;
	default:
	  return;
 8003590:	e05b      	b.n	800364a <set_motor+0xd6>
	  pwm = map(val, 0, 1000, 0, 999);
 8003592:	88b8      	ldrh	r0, [r7, #4]
 8003594:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	2300      	movs	r3, #0
 800359c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80035a0:	2100      	movs	r1, #0
 80035a2:	f000 f859 	bl	8003658 <map>
 80035a6:	4603      	mov	r3, r0
 80035a8:	81fb      	strh	r3, [r7, #14]
	  if (dir == -1) {
 80035aa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80035ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b2:	d10f      	bne.n	80035d4 <set_motor+0x60>
		HAL_GPIO_WritePin(M2B_L_GPIO_Port, M2B_L_Pin, GPIO_PIN_SET);
 80035b4:	2201      	movs	r2, #1
 80035b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035ba:	4825      	ldr	r0, [pc, #148]	; (8003650 <set_motor+0xdc>)
 80035bc:	f000 fe91 	bl	80042e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2B_R_GPIO_Port, M2B_R_Pin, GPIO_PIN_RESET);
 80035c0:	2200      	movs	r2, #0
 80035c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035c6:	4822      	ldr	r0, [pc, #136]	; (8003650 <set_motor+0xdc>)
 80035c8:	f000 fe8b 	bl	80042e2 <HAL_GPIO_WritePin>
		M2B_Channel = pwm;
 80035cc:	4a21      	ldr	r2, [pc, #132]	; (8003654 <set_motor+0xe0>)
 80035ce:	89fb      	ldrh	r3, [r7, #14]
 80035d0:	63d3      	str	r3, [r2, #60]	; 0x3c
	  break;
 80035d2:	e03a      	b.n	800364a <set_motor+0xd6>
	  } else if (dir == 1) {
 80035d4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d10f      	bne.n	80035fc <set_motor+0x88>
		HAL_GPIO_WritePin(M2B_L_GPIO_Port, M2B_L_Pin, GPIO_PIN_RESET);
 80035dc:	2200      	movs	r2, #0
 80035de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035e2:	481b      	ldr	r0, [pc, #108]	; (8003650 <set_motor+0xdc>)
 80035e4:	f000 fe7d 	bl	80042e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2B_R_GPIO_Port, M2B_R_Pin, GPIO_PIN_SET);
 80035e8:	2201      	movs	r2, #1
 80035ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035ee:	4818      	ldr	r0, [pc, #96]	; (8003650 <set_motor+0xdc>)
 80035f0:	f000 fe77 	bl	80042e2 <HAL_GPIO_WritePin>
		M2B_Channel = pwm;
 80035f4:	4a17      	ldr	r2, [pc, #92]	; (8003654 <set_motor+0xe0>)
 80035f6:	89fb      	ldrh	r3, [r7, #14]
 80035f8:	63d3      	str	r3, [r2, #60]	; 0x3c
	  break;
 80035fa:	e026      	b.n	800364a <set_motor+0xd6>
	  } else if (dir == -2) //Freely run
 80035fc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003600:	f113 0f02 	cmn.w	r3, #2
 8003604:	d10f      	bne.n	8003626 <set_motor+0xb2>
		M2B_Channel = 0;
 8003606:	4b13      	ldr	r3, [pc, #76]	; (8003654 <set_motor+0xe0>)
 8003608:	2200      	movs	r2, #0
 800360a:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(M2B_L_GPIO_Port, M2B_L_Pin, GPIO_PIN_RESET);
 800360c:	2200      	movs	r2, #0
 800360e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003612:	480f      	ldr	r0, [pc, #60]	; (8003650 <set_motor+0xdc>)
 8003614:	f000 fe65 	bl	80042e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2B_R_GPIO_Port, M2B_R_Pin, GPIO_PIN_RESET);
 8003618:	2200      	movs	r2, #0
 800361a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800361e:	480c      	ldr	r0, [pc, #48]	; (8003650 <set_motor+0xdc>)
 8003620:	f000 fe5f 	bl	80042e2 <HAL_GPIO_WritePin>
	  break;
 8003624:	e011      	b.n	800364a <set_motor+0xd6>
		HAL_GPIO_WritePin(M2B_L_GPIO_Port, M2B_L_Pin, GPIO_PIN_RESET);
 8003626:	2200      	movs	r2, #0
 8003628:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800362c:	4808      	ldr	r0, [pc, #32]	; (8003650 <set_motor+0xdc>)
 800362e:	f000 fe58 	bl	80042e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2B_R_GPIO_Port, M2B_R_Pin, GPIO_PIN_RESET);
 8003632:	2200      	movs	r2, #0
 8003634:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003638:	4805      	ldr	r0, [pc, #20]	; (8003650 <set_motor+0xdc>)
 800363a:	f000 fe52 	bl	80042e2 <HAL_GPIO_WritePin>
		M2B_Channel = 999;
 800363e:	4b05      	ldr	r3, [pc, #20]	; (8003654 <set_motor+0xe0>)
 8003640:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003644:	63da      	str	r2, [r3, #60]	; 0x3c
	  break;
 8003646:	e000      	b.n	800364a <set_motor+0xd6>
	  break;
 8003648:	bf00      	nop
  }
}
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40010c00 	.word	0x40010c00
 8003654:	40000800 	.word	0x40000800

08003658 <map>:

s32 map(s32 x, s32 in_min, s32 in_max, s32 out_min, s32 out_max) {
 8003658:	b5b0      	push	{r4, r5, r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
 8003664:	603b      	str	r3, [r7, #0]
  return (s32) ((x - in_min) * (out_max - out_min) * 1.0 / (in_max - in_min)
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	6a39      	ldr	r1, [r7, #32]
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	1a8a      	subs	r2, r1, r2
 8003672:	fb02 f303 	mul.w	r3, r2, r3
 8003676:	4618      	mov	r0, r3
 8003678:	f7fc ff6e 	bl	8000558 <__aeabi_i2d>
 800367c:	4604      	mov	r4, r0
 800367e:	460d      	mov	r5, r1
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	4618      	mov	r0, r3
 8003688:	f7fc ff66 	bl	8000558 <__aeabi_i2d>
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	4620      	mov	r0, r4
 8003692:	4629      	mov	r1, r5
 8003694:	f7fd f8f4 	bl	8000880 <__aeabi_ddiv>
 8003698:	4602      	mov	r2, r0
 800369a:	460b      	mov	r3, r1
 800369c:	4614      	mov	r4, r2
 800369e:	461d      	mov	r5, r3
	  + out_min);
 80036a0:	6838      	ldr	r0, [r7, #0]
 80036a2:	f7fc ff59 	bl	8000558 <__aeabi_i2d>
 80036a6:	4602      	mov	r2, r0
 80036a8:	460b      	mov	r3, r1
 80036aa:	4620      	mov	r0, r4
 80036ac:	4629      	mov	r1, r5
 80036ae:	f7fc fe07 	bl	80002c0 <__adddf3>
 80036b2:	4602      	mov	r2, r0
 80036b4:	460b      	mov	r3, r1
  return (s32) ((x - in_min) * (out_max - out_min) * 1.0 / (in_max - in_min)
 80036b6:	4610      	mov	r0, r2
 80036b8:	4619      	mov	r1, r3
 80036ba:	f7fd f9c9 	bl	8000a50 <__aeabi_d2iz>
 80036be:	4603      	mov	r3, r0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bdb0      	pop	{r4, r5, r7, pc}

080036c8 <reset_state>:

void reset_state() {
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  nSec = 0;
 80036cc:	4b03      	ldr	r3, [pc, #12]	; (80036dc <reset_state+0x14>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	601a      	str	r2, [r3, #0]
}
 80036d2:	bf00      	nop
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bc80      	pop	{r7}
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	20000280 	.word	0x20000280

080036e0 <save_menu_value>:

void save_menu_value() {
 80036e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036e4:	b086      	sub	sp, #24
 80036e6:	af00      	add	r7, sp, #0
  menu2_value = (firstMin * 10 + lastMin) * 60 + firstSec * 10 + lastSec;
 80036e8:	4b2b      	ldr	r3, [pc, #172]	; (8003798 <save_menu_value+0xb8>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	461a      	mov	r2, r3
 80036ee:	4613      	mov	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	461a      	mov	r2, r3
 80036f8:	4b28      	ldr	r3, [pc, #160]	; (800379c <save_menu_value+0xbc>)
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	441a      	add	r2, r3
 80036fe:	4613      	mov	r3, r2
 8003700:	011b      	lsls	r3, r3, #4
 8003702:	1a9b      	subs	r3, r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4619      	mov	r1, r3
 8003708:	4b25      	ldr	r3, [pc, #148]	; (80037a0 <save_menu_value+0xc0>)
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	461a      	mov	r2, r3
 800370e:	4613      	mov	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4413      	add	r3, r2
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	440b      	add	r3, r1
 8003718:	4a22      	ldr	r2, [pc, #136]	; (80037a4 <save_menu_value+0xc4>)
 800371a:	7812      	ldrb	r2, [r2, #0]
 800371c:	4413      	add	r3, r2
 800371e:	461a      	mov	r2, r3
 8003720:	4b21      	ldr	r3, [pc, #132]	; (80037a8 <save_menu_value+0xc8>)
 8003722:	601a      	str	r2, [r3, #0]
  HAL_FLASH_Unlock();
 8003724:	f000 fab2 	bl	8003c8c <HAL_FLASH_Unlock>
  FLASH_EraseInitTypeDef EraseInit;
  EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8003728:	2300      	movs	r3, #0
 800372a:	60bb      	str	r3, [r7, #8]
  EraseInit.PageAddress = FLASH_USER_START_ADDR;
 800372c:	4b1f      	ldr	r3, [pc, #124]	; (80037ac <save_menu_value+0xcc>)
 800372e:	613b      	str	r3, [r7, #16]
  EraseInit.NbPages = (FLASH_USER_END_ADDR - FLASH_USER_START_ADDR )
 8003730:	2301      	movs	r3, #1
 8003732:	617b      	str	r3, [r7, #20]
	  / FLASH_PAGE_SIZE;
  uint32_t PageError = 0;
 8003734:	2300      	movs	r3, #0
 8003736:	607b      	str	r3, [r7, #4]
  HAL_FLASHEx_Erase(&EraseInit, &PageError);
 8003738:	1d3a      	adds	r2, r7, #4
 800373a:	f107 0308 	add.w	r3, r7, #8
 800373e:	4611      	mov	r1, r2
 8003740:	4618      	mov	r0, r3
 8003742:	f000 fb8b 	bl	8003e5c <HAL_FLASHEx_Erase>
  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_USER_START_ADDR,
 8003746:	4b1a      	ldr	r3, [pc, #104]	; (80037b0 <save_menu_value+0xd0>)
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2200      	movs	r2, #0
 800374e:	469a      	mov	sl, r3
 8003750:	4693      	mov	fp, r2
 8003752:	4652      	mov	r2, sl
 8003754:	465b      	mov	r3, fp
 8003756:	4915      	ldr	r1, [pc, #84]	; (80037ac <save_menu_value+0xcc>)
 8003758:	2002      	movs	r0, #2
 800375a:	f000 fa27 	bl	8003bac <HAL_FLASH_Program>
  menu1_value);
  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_USER_START_ADDR + 4,
 800375e:	4b12      	ldr	r3, [pc, #72]	; (80037a8 <save_menu_value+0xc8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2200      	movs	r2, #0
 8003764:	4698      	mov	r8, r3
 8003766:	4691      	mov	r9, r2
 8003768:	4642      	mov	r2, r8
 800376a:	464b      	mov	r3, r9
 800376c:	4911      	ldr	r1, [pc, #68]	; (80037b4 <save_menu_value+0xd4>)
 800376e:	2002      	movs	r0, #2
 8003770:	f000 fa1c 	bl	8003bac <HAL_FLASH_Program>
  menu2_value);
  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_USER_START_ADDR + 8,
 8003774:	4b10      	ldr	r3, [pc, #64]	; (80037b8 <save_menu_value+0xd8>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	17da      	asrs	r2, r3, #31
 800377a:	461c      	mov	r4, r3
 800377c:	4615      	mov	r5, r2
 800377e:	4622      	mov	r2, r4
 8003780:	462b      	mov	r3, r5
 8003782:	490e      	ldr	r1, [pc, #56]	; (80037bc <save_menu_value+0xdc>)
 8003784:	2002      	movs	r0, #2
 8003786:	f000 fa11 	bl	8003bac <HAL_FLASH_Program>
  menu3_value);
  HAL_FLASH_Lock();
 800378a:	f000 faa5 	bl	8003cd8 <HAL_FLASH_Lock>
}
 800378e:	bf00      	nop
 8003790:	3718      	adds	r7, #24
 8003792:	46bd      	mov	sp, r7
 8003794:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003798:	20000284 	.word	0x20000284
 800379c:	20000285 	.word	0x20000285
 80037a0:	20000286 	.word	0x20000286
 80037a4:	20000287 	.word	0x20000287
 80037a8:	20000278 	.word	0x20000278
 80037ac:	0801f810 	.word	0x0801f810
 80037b0:	20000274 	.word	0x20000274
 80037b4:	0801f814 	.word	0x0801f814
 80037b8:	20000004 	.word	0x20000004
 80037bc:	0801f818 	.word	0x0801f818

080037c0 <stopCmd>:

void stopCmd() {
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  if (state == 3) {
 80037c4:	4b0c      	ldr	r3, [pc, #48]	; (80037f8 <stopCmd+0x38>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	2b03      	cmp	r3, #3
 80037ca:	d112      	bne.n	80037f2 <stopCmd+0x32>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80037cc:	2200      	movs	r2, #0
 80037ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80037d2:	480a      	ldr	r0, [pc, #40]	; (80037fc <stopCmd+0x3c>)
 80037d4:	f000 fd85 	bl	80042e2 <HAL_GPIO_WritePin>
	state = 4;
 80037d8:	4b07      	ldr	r3, [pc, #28]	; (80037f8 <stopCmd+0x38>)
 80037da:	2204      	movs	r2, #4
 80037dc:	701a      	strb	r2, [r3, #0]
	set_motor(2, 0, 0);
 80037de:	2200      	movs	r2, #0
 80037e0:	2100      	movs	r1, #0
 80037e2:	2002      	movs	r0, #2
 80037e4:	f7ff fec6 	bl	8003574 <set_motor>
	LED_OFF();
 80037e8:	f7ff fb6a 	bl	8002ec0 <LED_OFF>
	refreshLCD = true;
 80037ec:	4b04      	ldr	r3, [pc, #16]	; (8003800 <stopCmd+0x40>)
 80037ee:	2201      	movs	r2, #1
 80037f0:	701a      	strb	r2, [r3, #0]
  }
}
 80037f2:	bf00      	nop
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	20000008 	.word	0x20000008
 80037fc:	40010c00 	.word	0x40010c00
 8003800:	2000000b 	.word	0x2000000b

08003804 <wsub2>:
	} else
	  return (s32) ((-1) * c);
  }
}

s32 wsub2(u32 a, u32 b) {
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  u32 c = a - b;
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	60fb      	str	r3, [r7, #12]
  u32 d = b - a;
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	60bb      	str	r3, [r7, #8]

  if (c > d) {
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	429a      	cmp	r2, r3
 8003824:	d902      	bls.n	800382c <wsub2+0x28>
	return (s32) ((-1) * d);
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	425b      	negs	r3, r3
 800382a:	e000      	b.n	800382e <wsub2+0x2a>
  } else // c <= d
  {
	return c;
 800382c:	68fb      	ldr	r3, [r7, #12]
  }
}
 800382e:	4618      	mov	r0, r3
 8003830:	3714      	adds	r7, #20
 8003832:	46bd      	mov	sp, r7
 8003834:	bc80      	pop	{r7}
 8003836:	4770      	bx	lr

08003838 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003838:	480c      	ldr	r0, [pc, #48]	; (800386c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800383a:	490d      	ldr	r1, [pc, #52]	; (8003870 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800383c:	4a0d      	ldr	r2, [pc, #52]	; (8003874 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800383e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003840:	e002      	b.n	8003848 <LoopCopyDataInit>

08003842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003846:	3304      	adds	r3, #4

08003848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800384a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800384c:	d3f9      	bcc.n	8003842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800384e:	4a0a      	ldr	r2, [pc, #40]	; (8003878 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003850:	4c0a      	ldr	r4, [pc, #40]	; (800387c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003854:	e001      	b.n	800385a <LoopFillZerobss>

08003856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003858:	3204      	adds	r2, #4

0800385a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800385a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800385c:	d3fb      	bcc.n	8003856 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800385e:	f7fd ffdd 	bl	800181c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003862:	f002 fcb9 	bl	80061d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003866:	f7fd faef 	bl	8000e48 <main>
  bx lr
 800386a:	4770      	bx	lr
  ldr r0, =_sdata
 800386c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003870:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003874:	08006cd8 	.word	0x08006cd8
  ldr r2, =_sbss
 8003878:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800387c:	20000320 	.word	0x20000320

08003880 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003880:	e7fe      	b.n	8003880 <ADC1_2_IRQHandler>
	...

08003884 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003888:	4b08      	ldr	r3, [pc, #32]	; (80038ac <HAL_Init+0x28>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a07      	ldr	r2, [pc, #28]	; (80038ac <HAL_Init+0x28>)
 800388e:	f043 0310 	orr.w	r3, r3, #16
 8003892:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003894:	2003      	movs	r0, #3
 8003896:	f000 f947 	bl	8003b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800389a:	200f      	movs	r0, #15
 800389c:	f000 f808 	bl	80038b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038a0:	f7fd fdd4 	bl	800144c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40022000 	.word	0x40022000

080038b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038b8:	4b12      	ldr	r3, [pc, #72]	; (8003904 <HAL_InitTick+0x54>)
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	4b12      	ldr	r3, [pc, #72]	; (8003908 <HAL_InitTick+0x58>)
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	4619      	mov	r1, r3
 80038c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80038ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 f95f 	bl	8003b92 <HAL_SYSTICK_Config>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e00e      	b.n	80038fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2b0f      	cmp	r3, #15
 80038e2:	d80a      	bhi.n	80038fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038e4:	2200      	movs	r2, #0
 80038e6:	6879      	ldr	r1, [r7, #4]
 80038e8:	f04f 30ff 	mov.w	r0, #4294967295
 80038ec:	f000 f927 	bl	8003b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038f0:	4a06      	ldr	r2, [pc, #24]	; (800390c <HAL_InitTick+0x5c>)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
 80038f8:	e000      	b.n	80038fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3708      	adds	r7, #8
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	20000000 	.word	0x20000000
 8003908:	20000020 	.word	0x20000020
 800390c:	2000001c 	.word	0x2000001c

08003910 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003914:	4b05      	ldr	r3, [pc, #20]	; (800392c <HAL_IncTick+0x1c>)
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	461a      	mov	r2, r3
 800391a:	4b05      	ldr	r3, [pc, #20]	; (8003930 <HAL_IncTick+0x20>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4413      	add	r3, r2
 8003920:	4a03      	ldr	r2, [pc, #12]	; (8003930 <HAL_IncTick+0x20>)
 8003922:	6013      	str	r3, [r2, #0]
}
 8003924:	bf00      	nop
 8003926:	46bd      	mov	sp, r7
 8003928:	bc80      	pop	{r7}
 800392a:	4770      	bx	lr
 800392c:	20000020 	.word	0x20000020
 8003930:	200002ec 	.word	0x200002ec

08003934 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  return uwTick;
 8003938:	4b02      	ldr	r3, [pc, #8]	; (8003944 <HAL_GetTick+0x10>)
 800393a:	681b      	ldr	r3, [r3, #0]
}
 800393c:	4618      	mov	r0, r3
 800393e:	46bd      	mov	sp, r7
 8003940:	bc80      	pop	{r7}
 8003942:	4770      	bx	lr
 8003944:	200002ec 	.word	0x200002ec

08003948 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003950:	f7ff fff0 	bl	8003934 <HAL_GetTick>
 8003954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003960:	d005      	beq.n	800396e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003962:	4b0a      	ldr	r3, [pc, #40]	; (800398c <HAL_Delay+0x44>)
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	461a      	mov	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4413      	add	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800396e:	bf00      	nop
 8003970:	f7ff ffe0 	bl	8003934 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	429a      	cmp	r2, r3
 800397e:	d8f7      	bhi.n	8003970 <HAL_Delay+0x28>
  {
  }
}
 8003980:	bf00      	nop
 8003982:	bf00      	nop
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	20000020 	.word	0x20000020

08003990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039a0:	4b0c      	ldr	r3, [pc, #48]	; (80039d4 <__NVIC_SetPriorityGrouping+0x44>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039a6:	68ba      	ldr	r2, [r7, #8]
 80039a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039ac:	4013      	ands	r3, r2
 80039ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039c2:	4a04      	ldr	r2, [pc, #16]	; (80039d4 <__NVIC_SetPriorityGrouping+0x44>)
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	60d3      	str	r3, [r2, #12]
}
 80039c8:	bf00      	nop
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bc80      	pop	{r7}
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	e000ed00 	.word	0xe000ed00

080039d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039dc:	4b04      	ldr	r3, [pc, #16]	; (80039f0 <__NVIC_GetPriorityGrouping+0x18>)
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	0a1b      	lsrs	r3, r3, #8
 80039e2:	f003 0307 	and.w	r3, r3, #7
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bc80      	pop	{r7}
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	e000ed00 	.word	0xe000ed00

080039f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	4603      	mov	r3, r0
 80039fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	db0b      	blt.n	8003a1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a06:	79fb      	ldrb	r3, [r7, #7]
 8003a08:	f003 021f 	and.w	r2, r3, #31
 8003a0c:	4906      	ldr	r1, [pc, #24]	; (8003a28 <__NVIC_EnableIRQ+0x34>)
 8003a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a12:	095b      	lsrs	r3, r3, #5
 8003a14:	2001      	movs	r0, #1
 8003a16:	fa00 f202 	lsl.w	r2, r0, r2
 8003a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bc80      	pop	{r7}
 8003a26:	4770      	bx	lr
 8003a28:	e000e100 	.word	0xe000e100

08003a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	4603      	mov	r3, r0
 8003a34:	6039      	str	r1, [r7, #0]
 8003a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	db0a      	blt.n	8003a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	490c      	ldr	r1, [pc, #48]	; (8003a78 <__NVIC_SetPriority+0x4c>)
 8003a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a4a:	0112      	lsls	r2, r2, #4
 8003a4c:	b2d2      	uxtb	r2, r2
 8003a4e:	440b      	add	r3, r1
 8003a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a54:	e00a      	b.n	8003a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	4908      	ldr	r1, [pc, #32]	; (8003a7c <__NVIC_SetPriority+0x50>)
 8003a5c:	79fb      	ldrb	r3, [r7, #7]
 8003a5e:	f003 030f 	and.w	r3, r3, #15
 8003a62:	3b04      	subs	r3, #4
 8003a64:	0112      	lsls	r2, r2, #4
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	440b      	add	r3, r1
 8003a6a:	761a      	strb	r2, [r3, #24]
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bc80      	pop	{r7}
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	e000e100 	.word	0xe000e100
 8003a7c:	e000ed00 	.word	0xe000ed00

08003a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b089      	sub	sp, #36	; 0x24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f003 0307 	and.w	r3, r3, #7
 8003a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	f1c3 0307 	rsb	r3, r3, #7
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	bf28      	it	cs
 8003a9e:	2304      	movcs	r3, #4
 8003aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	2b06      	cmp	r3, #6
 8003aa8:	d902      	bls.n	8003ab0 <NVIC_EncodePriority+0x30>
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	3b03      	subs	r3, #3
 8003aae:	e000      	b.n	8003ab2 <NVIC_EncodePriority+0x32>
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	fa02 f303 	lsl.w	r3, r2, r3
 8003abe:	43da      	mvns	r2, r3
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	401a      	ands	r2, r3
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad2:	43d9      	mvns	r1, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ad8:	4313      	orrs	r3, r2
         );
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3724      	adds	r7, #36	; 0x24
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bc80      	pop	{r7}
 8003ae2:	4770      	bx	lr

08003ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	3b01      	subs	r3, #1
 8003af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003af4:	d301      	bcc.n	8003afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003af6:	2301      	movs	r3, #1
 8003af8:	e00f      	b.n	8003b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003afa:	4a0a      	ldr	r2, [pc, #40]	; (8003b24 <SysTick_Config+0x40>)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	3b01      	subs	r3, #1
 8003b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b02:	210f      	movs	r1, #15
 8003b04:	f04f 30ff 	mov.w	r0, #4294967295
 8003b08:	f7ff ff90 	bl	8003a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b0c:	4b05      	ldr	r3, [pc, #20]	; (8003b24 <SysTick_Config+0x40>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b12:	4b04      	ldr	r3, [pc, #16]	; (8003b24 <SysTick_Config+0x40>)
 8003b14:	2207      	movs	r2, #7
 8003b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3708      	adds	r7, #8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	e000e010 	.word	0xe000e010

08003b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f7ff ff2d 	bl	8003990 <__NVIC_SetPriorityGrouping>
}
 8003b36:	bf00      	nop
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b086      	sub	sp, #24
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	4603      	mov	r3, r0
 8003b46:	60b9      	str	r1, [r7, #8]
 8003b48:	607a      	str	r2, [r7, #4]
 8003b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b50:	f7ff ff42 	bl	80039d8 <__NVIC_GetPriorityGrouping>
 8003b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	68b9      	ldr	r1, [r7, #8]
 8003b5a:	6978      	ldr	r0, [r7, #20]
 8003b5c:	f7ff ff90 	bl	8003a80 <NVIC_EncodePriority>
 8003b60:	4602      	mov	r2, r0
 8003b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b66:	4611      	mov	r1, r2
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7ff ff5f 	bl	8003a2c <__NVIC_SetPriority>
}
 8003b6e:	bf00      	nop
 8003b70:	3718      	adds	r7, #24
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b082      	sub	sp, #8
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7ff ff35 	bl	80039f4 <__NVIC_EnableIRQ>
}
 8003b8a:	bf00      	nop
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b082      	sub	sp, #8
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7ff ffa2 	bl	8003ae4 <SysTick_Config>
 8003ba0:	4603      	mov	r3, r0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
	...

08003bac <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bae:	b087      	sub	sp, #28
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003bc6:	4b2f      	ldr	r3, [pc, #188]	; (8003c84 <HAL_FLASH_Program+0xd8>)
 8003bc8:	7e1b      	ldrb	r3, [r3, #24]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d101      	bne.n	8003bd2 <HAL_FLASH_Program+0x26>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	e054      	b.n	8003c7c <HAL_FLASH_Program+0xd0>
 8003bd2:	4b2c      	ldr	r3, [pc, #176]	; (8003c84 <HAL_FLASH_Program+0xd8>)
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003bd8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003bdc:	f000 f8a8 	bl	8003d30 <FLASH_WaitForLastOperation>
 8003be0:	4603      	mov	r3, r0
 8003be2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003be4:	7dfb      	ldrb	r3, [r7, #23]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d144      	bne.n	8003c74 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d102      	bne.n	8003bf6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	757b      	strb	r3, [r7, #21]
 8003bf4:	e007      	b.n	8003c06 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d102      	bne.n	8003c02 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	757b      	strb	r3, [r7, #21]
 8003c00:	e001      	b.n	8003c06 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003c02:	2304      	movs	r3, #4
 8003c04:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003c06:	2300      	movs	r3, #0
 8003c08:	75bb      	strb	r3, [r7, #22]
 8003c0a:	e02d      	b.n	8003c68 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003c0c:	7dbb      	ldrb	r3, [r7, #22]
 8003c0e:	005a      	lsls	r2, r3, #1
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	eb02 0c03 	add.w	ip, r2, r3
 8003c16:	7dbb      	ldrb	r3, [r7, #22]
 8003c18:	0119      	lsls	r1, r3, #4
 8003c1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c1e:	f1c1 0620 	rsb	r6, r1, #32
 8003c22:	f1a1 0020 	sub.w	r0, r1, #32
 8003c26:	fa22 f401 	lsr.w	r4, r2, r1
 8003c2a:	fa03 f606 	lsl.w	r6, r3, r6
 8003c2e:	4334      	orrs	r4, r6
 8003c30:	fa23 f000 	lsr.w	r0, r3, r0
 8003c34:	4304      	orrs	r4, r0
 8003c36:	fa23 f501 	lsr.w	r5, r3, r1
 8003c3a:	b2a3      	uxth	r3, r4
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4660      	mov	r0, ip
 8003c40:	f000 f85a 	bl	8003cf8 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003c44:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003c48:	f000 f872 	bl	8003d30 <FLASH_WaitForLastOperation>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003c50:	4b0d      	ldr	r3, [pc, #52]	; (8003c88 <HAL_FLASH_Program+0xdc>)
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	4a0c      	ldr	r2, [pc, #48]	; (8003c88 <HAL_FLASH_Program+0xdc>)
 8003c56:	f023 0301 	bic.w	r3, r3, #1
 8003c5a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003c5c:	7dfb      	ldrb	r3, [r7, #23]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d107      	bne.n	8003c72 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003c62:	7dbb      	ldrb	r3, [r7, #22]
 8003c64:	3301      	adds	r3, #1
 8003c66:	75bb      	strb	r3, [r7, #22]
 8003c68:	7dba      	ldrb	r2, [r7, #22]
 8003c6a:	7d7b      	ldrb	r3, [r7, #21]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d3cd      	bcc.n	8003c0c <HAL_FLASH_Program+0x60>
 8003c70:	e000      	b.n	8003c74 <HAL_FLASH_Program+0xc8>
      {
        break;
 8003c72:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003c74:	4b03      	ldr	r3, [pc, #12]	; (8003c84 <HAL_FLASH_Program+0xd8>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	761a      	strb	r2, [r3, #24]

  return status;
 8003c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	371c      	adds	r7, #28
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c84:	200002f0 	.word	0x200002f0
 8003c88:	40022000 	.word	0x40022000

08003c8c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003c92:	2300      	movs	r3, #0
 8003c94:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003c96:	4b0d      	ldr	r3, [pc, #52]	; (8003ccc <HAL_FLASH_Unlock+0x40>)
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00d      	beq.n	8003cbe <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003ca2:	4b0a      	ldr	r3, [pc, #40]	; (8003ccc <HAL_FLASH_Unlock+0x40>)
 8003ca4:	4a0a      	ldr	r2, [pc, #40]	; (8003cd0 <HAL_FLASH_Unlock+0x44>)
 8003ca6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003ca8:	4b08      	ldr	r3, [pc, #32]	; (8003ccc <HAL_FLASH_Unlock+0x40>)
 8003caa:	4a0a      	ldr	r2, [pc, #40]	; (8003cd4 <HAL_FLASH_Unlock+0x48>)
 8003cac:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003cae:	4b07      	ldr	r3, [pc, #28]	; (8003ccc <HAL_FLASH_Unlock+0x40>)
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8003cbe:	79fb      	ldrb	r3, [r7, #7]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bc80      	pop	{r7}
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	40022000 	.word	0x40022000
 8003cd0:	45670123 	.word	0x45670123
 8003cd4:	cdef89ab 	.word	0xcdef89ab

08003cd8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003cdc:	4b05      	ldr	r3, [pc, #20]	; (8003cf4 <HAL_FLASH_Lock+0x1c>)
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	4a04      	ldr	r2, [pc, #16]	; (8003cf4 <HAL_FLASH_Lock+0x1c>)
 8003ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ce6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bc80      	pop	{r7}
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	40022000 	.word	0x40022000

08003cf8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	460b      	mov	r3, r1
 8003d02:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003d04:	4b08      	ldr	r3, [pc, #32]	; (8003d28 <FLASH_Program_HalfWord+0x30>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003d0a:	4b08      	ldr	r3, [pc, #32]	; (8003d2c <FLASH_Program_HalfWord+0x34>)
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	4a07      	ldr	r2, [pc, #28]	; (8003d2c <FLASH_Program_HalfWord+0x34>)
 8003d10:	f043 0301 	orr.w	r3, r3, #1
 8003d14:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	887a      	ldrh	r2, [r7, #2]
 8003d1a:	801a      	strh	r2, [r3, #0]
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bc80      	pop	{r7}
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	200002f0 	.word	0x200002f0
 8003d2c:	40022000 	.word	0x40022000

08003d30 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003d38:	f7ff fdfc 	bl	8003934 <HAL_GetTick>
 8003d3c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003d3e:	e010      	b.n	8003d62 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d46:	d00c      	beq.n	8003d62 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d007      	beq.n	8003d5e <FLASH_WaitForLastOperation+0x2e>
 8003d4e:	f7ff fdf1 	bl	8003934 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d201      	bcs.n	8003d62 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e025      	b.n	8003dae <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003d62:	4b15      	ldr	r3, [pc, #84]	; (8003db8 <FLASH_WaitForLastOperation+0x88>)
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1e8      	bne.n	8003d40 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003d6e:	4b12      	ldr	r3, [pc, #72]	; (8003db8 <FLASH_WaitForLastOperation+0x88>)
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	f003 0320 	and.w	r3, r3, #32
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003d7a:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <FLASH_WaitForLastOperation+0x88>)
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003d80:	4b0d      	ldr	r3, [pc, #52]	; (8003db8 <FLASH_WaitForLastOperation+0x88>)
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	f003 0310 	and.w	r3, r3, #16
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10b      	bne.n	8003da4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003d8c:	4b0a      	ldr	r3, [pc, #40]	; (8003db8 <FLASH_WaitForLastOperation+0x88>)
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d105      	bne.n	8003da4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003d98:	4b07      	ldr	r3, [pc, #28]	; (8003db8 <FLASH_WaitForLastOperation+0x88>)
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d003      	beq.n	8003dac <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003da4:	f000 f80a 	bl	8003dbc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e000      	b.n	8003dae <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40022000 	.word	0x40022000

08003dbc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003dc6:	4b23      	ldr	r3, [pc, #140]	; (8003e54 <FLASH_SetErrorCode+0x98>)
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	f003 0310 	and.w	r3, r3, #16
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d009      	beq.n	8003de6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003dd2:	4b21      	ldr	r3, [pc, #132]	; (8003e58 <FLASH_SetErrorCode+0x9c>)
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	f043 0302 	orr.w	r3, r3, #2
 8003dda:	4a1f      	ldr	r2, [pc, #124]	; (8003e58 <FLASH_SetErrorCode+0x9c>)
 8003ddc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f043 0310 	orr.w	r3, r3, #16
 8003de4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003de6:	4b1b      	ldr	r3, [pc, #108]	; (8003e54 <FLASH_SetErrorCode+0x98>)
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	f003 0304 	and.w	r3, r3, #4
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d009      	beq.n	8003e06 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003df2:	4b19      	ldr	r3, [pc, #100]	; (8003e58 <FLASH_SetErrorCode+0x9c>)
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	f043 0301 	orr.w	r3, r3, #1
 8003dfa:	4a17      	ldr	r2, [pc, #92]	; (8003e58 <FLASH_SetErrorCode+0x9c>)
 8003dfc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f043 0304 	orr.w	r3, r3, #4
 8003e04:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003e06:	4b13      	ldr	r3, [pc, #76]	; (8003e54 <FLASH_SetErrorCode+0x98>)
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00b      	beq.n	8003e2a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003e12:	4b11      	ldr	r3, [pc, #68]	; (8003e58 <FLASH_SetErrorCode+0x9c>)
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	f043 0304 	orr.w	r3, r3, #4
 8003e1a:	4a0f      	ldr	r2, [pc, #60]	; (8003e58 <FLASH_SetErrorCode+0x9c>)
 8003e1c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003e1e:	4b0d      	ldr	r3, [pc, #52]	; (8003e54 <FLASH_SetErrorCode+0x98>)
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	4a0c      	ldr	r2, [pc, #48]	; (8003e54 <FLASH_SetErrorCode+0x98>)
 8003e24:	f023 0301 	bic.w	r3, r3, #1
 8003e28:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f240 1201 	movw	r2, #257	; 0x101
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d106      	bne.n	8003e42 <FLASH_SetErrorCode+0x86>
 8003e34:	4b07      	ldr	r3, [pc, #28]	; (8003e54 <FLASH_SetErrorCode+0x98>)
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	4a06      	ldr	r2, [pc, #24]	; (8003e54 <FLASH_SetErrorCode+0x98>)
 8003e3a:	f023 0301 	bic.w	r3, r3, #1
 8003e3e:	61d3      	str	r3, [r2, #28]
}  
 8003e40:	e002      	b.n	8003e48 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003e42:	4a04      	ldr	r2, [pc, #16]	; (8003e54 <FLASH_SetErrorCode+0x98>)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	60d3      	str	r3, [r2, #12]
}  
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bc80      	pop	{r7}
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	40022000 	.word	0x40022000
 8003e58:	200002f0 	.word	0x200002f0

08003e5c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003e6e:	4b2f      	ldr	r3, [pc, #188]	; (8003f2c <HAL_FLASHEx_Erase+0xd0>)
 8003e70:	7e1b      	ldrb	r3, [r3, #24]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d101      	bne.n	8003e7a <HAL_FLASHEx_Erase+0x1e>
 8003e76:	2302      	movs	r3, #2
 8003e78:	e053      	b.n	8003f22 <HAL_FLASHEx_Erase+0xc6>
 8003e7a:	4b2c      	ldr	r3, [pc, #176]	; (8003f2c <HAL_FLASHEx_Erase+0xd0>)
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d116      	bne.n	8003eb6 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003e88:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e8c:	f7ff ff50 	bl	8003d30 <FLASH_WaitForLastOperation>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d141      	bne.n	8003f1a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8003e96:	2001      	movs	r0, #1
 8003e98:	f000 f84c 	bl	8003f34 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e9c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ea0:	f7ff ff46 	bl	8003d30 <FLASH_WaitForLastOperation>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003ea8:	4b21      	ldr	r3, [pc, #132]	; (8003f30 <HAL_FLASHEx_Erase+0xd4>)
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	4a20      	ldr	r2, [pc, #128]	; (8003f30 <HAL_FLASHEx_Erase+0xd4>)
 8003eae:	f023 0304 	bic.w	r3, r3, #4
 8003eb2:	6113      	str	r3, [r2, #16]
 8003eb4:	e031      	b.n	8003f1a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003eb6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003eba:	f7ff ff39 	bl	8003d30 <FLASH_WaitForLastOperation>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d12a      	bne.n	8003f1a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8003eca:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	60bb      	str	r3, [r7, #8]
 8003ed2:	e019      	b.n	8003f08 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003ed4:	68b8      	ldr	r0, [r7, #8]
 8003ed6:	f000 f849 	bl	8003f6c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003eda:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ede:	f7ff ff27 	bl	8003d30 <FLASH_WaitForLastOperation>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003ee6:	4b12      	ldr	r3, [pc, #72]	; (8003f30 <HAL_FLASHEx_Erase+0xd4>)
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	4a11      	ldr	r2, [pc, #68]	; (8003f30 <HAL_FLASHEx_Erase+0xd4>)
 8003eec:	f023 0302 	bic.w	r3, r3, #2
 8003ef0:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003ef2:	7bfb      	ldrb	r3, [r7, #15]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d003      	beq.n	8003f00 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	68ba      	ldr	r2, [r7, #8]
 8003efc:	601a      	str	r2, [r3, #0]
            break;
 8003efe:	e00c      	b.n	8003f1a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f06:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	029a      	lsls	r2, r3, #10
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d3dc      	bcc.n	8003ed4 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003f1a:	4b04      	ldr	r3, [pc, #16]	; (8003f2c <HAL_FLASHEx_Erase+0xd0>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	761a      	strb	r2, [r3, #24]

  return status;
 8003f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	200002f0 	.word	0x200002f0
 8003f30:	40022000 	.word	0x40022000

08003f34 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003f3c:	4b09      	ldr	r3, [pc, #36]	; (8003f64 <FLASH_MassErase+0x30>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003f42:	4b09      	ldr	r3, [pc, #36]	; (8003f68 <FLASH_MassErase+0x34>)
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	4a08      	ldr	r2, [pc, #32]	; (8003f68 <FLASH_MassErase+0x34>)
 8003f48:	f043 0304 	orr.w	r3, r3, #4
 8003f4c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003f4e:	4b06      	ldr	r3, [pc, #24]	; (8003f68 <FLASH_MassErase+0x34>)
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	4a05      	ldr	r2, [pc, #20]	; (8003f68 <FLASH_MassErase+0x34>)
 8003f54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f58:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bc80      	pop	{r7}
 8003f62:	4770      	bx	lr
 8003f64:	200002f0 	.word	0x200002f0
 8003f68:	40022000 	.word	0x40022000

08003f6c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003f74:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <FLASH_PageErase+0x38>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003f7a:	4b0b      	ldr	r3, [pc, #44]	; (8003fa8 <FLASH_PageErase+0x3c>)
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	4a0a      	ldr	r2, [pc, #40]	; (8003fa8 <FLASH_PageErase+0x3c>)
 8003f80:	f043 0302 	orr.w	r3, r3, #2
 8003f84:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003f86:	4a08      	ldr	r2, [pc, #32]	; (8003fa8 <FLASH_PageErase+0x3c>)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003f8c:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <FLASH_PageErase+0x3c>)
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	4a05      	ldr	r2, [pc, #20]	; (8003fa8 <FLASH_PageErase+0x3c>)
 8003f92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f96:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bc80      	pop	{r7}
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	200002f0 	.word	0x200002f0
 8003fa8:	40022000 	.word	0x40022000

08003fac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b08b      	sub	sp, #44	; 0x2c
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fbe:	e169      	b.n	8004294 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	69fa      	ldr	r2, [r7, #28]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	f040 8158 	bne.w	800428e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	4a9a      	ldr	r2, [pc, #616]	; (800424c <HAL_GPIO_Init+0x2a0>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d05e      	beq.n	80040a6 <HAL_GPIO_Init+0xfa>
 8003fe8:	4a98      	ldr	r2, [pc, #608]	; (800424c <HAL_GPIO_Init+0x2a0>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d875      	bhi.n	80040da <HAL_GPIO_Init+0x12e>
 8003fee:	4a98      	ldr	r2, [pc, #608]	; (8004250 <HAL_GPIO_Init+0x2a4>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d058      	beq.n	80040a6 <HAL_GPIO_Init+0xfa>
 8003ff4:	4a96      	ldr	r2, [pc, #600]	; (8004250 <HAL_GPIO_Init+0x2a4>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d86f      	bhi.n	80040da <HAL_GPIO_Init+0x12e>
 8003ffa:	4a96      	ldr	r2, [pc, #600]	; (8004254 <HAL_GPIO_Init+0x2a8>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d052      	beq.n	80040a6 <HAL_GPIO_Init+0xfa>
 8004000:	4a94      	ldr	r2, [pc, #592]	; (8004254 <HAL_GPIO_Init+0x2a8>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d869      	bhi.n	80040da <HAL_GPIO_Init+0x12e>
 8004006:	4a94      	ldr	r2, [pc, #592]	; (8004258 <HAL_GPIO_Init+0x2ac>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d04c      	beq.n	80040a6 <HAL_GPIO_Init+0xfa>
 800400c:	4a92      	ldr	r2, [pc, #584]	; (8004258 <HAL_GPIO_Init+0x2ac>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d863      	bhi.n	80040da <HAL_GPIO_Init+0x12e>
 8004012:	4a92      	ldr	r2, [pc, #584]	; (800425c <HAL_GPIO_Init+0x2b0>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d046      	beq.n	80040a6 <HAL_GPIO_Init+0xfa>
 8004018:	4a90      	ldr	r2, [pc, #576]	; (800425c <HAL_GPIO_Init+0x2b0>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d85d      	bhi.n	80040da <HAL_GPIO_Init+0x12e>
 800401e:	2b12      	cmp	r3, #18
 8004020:	d82a      	bhi.n	8004078 <HAL_GPIO_Init+0xcc>
 8004022:	2b12      	cmp	r3, #18
 8004024:	d859      	bhi.n	80040da <HAL_GPIO_Init+0x12e>
 8004026:	a201      	add	r2, pc, #4	; (adr r2, 800402c <HAL_GPIO_Init+0x80>)
 8004028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402c:	080040a7 	.word	0x080040a7
 8004030:	08004081 	.word	0x08004081
 8004034:	08004093 	.word	0x08004093
 8004038:	080040d5 	.word	0x080040d5
 800403c:	080040db 	.word	0x080040db
 8004040:	080040db 	.word	0x080040db
 8004044:	080040db 	.word	0x080040db
 8004048:	080040db 	.word	0x080040db
 800404c:	080040db 	.word	0x080040db
 8004050:	080040db 	.word	0x080040db
 8004054:	080040db 	.word	0x080040db
 8004058:	080040db 	.word	0x080040db
 800405c:	080040db 	.word	0x080040db
 8004060:	080040db 	.word	0x080040db
 8004064:	080040db 	.word	0x080040db
 8004068:	080040db 	.word	0x080040db
 800406c:	080040db 	.word	0x080040db
 8004070:	08004089 	.word	0x08004089
 8004074:	0800409d 	.word	0x0800409d
 8004078:	4a79      	ldr	r2, [pc, #484]	; (8004260 <HAL_GPIO_Init+0x2b4>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d013      	beq.n	80040a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800407e:	e02c      	b.n	80040da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	623b      	str	r3, [r7, #32]
          break;
 8004086:	e029      	b.n	80040dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	3304      	adds	r3, #4
 800408e:	623b      	str	r3, [r7, #32]
          break;
 8004090:	e024      	b.n	80040dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	3308      	adds	r3, #8
 8004098:	623b      	str	r3, [r7, #32]
          break;
 800409a:	e01f      	b.n	80040dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	330c      	adds	r3, #12
 80040a2:	623b      	str	r3, [r7, #32]
          break;
 80040a4:	e01a      	b.n	80040dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d102      	bne.n	80040b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80040ae:	2304      	movs	r3, #4
 80040b0:	623b      	str	r3, [r7, #32]
          break;
 80040b2:	e013      	b.n	80040dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d105      	bne.n	80040c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80040bc:	2308      	movs	r3, #8
 80040be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	69fa      	ldr	r2, [r7, #28]
 80040c4:	611a      	str	r2, [r3, #16]
          break;
 80040c6:	e009      	b.n	80040dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80040c8:	2308      	movs	r3, #8
 80040ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	69fa      	ldr	r2, [r7, #28]
 80040d0:	615a      	str	r2, [r3, #20]
          break;
 80040d2:	e003      	b.n	80040dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80040d4:	2300      	movs	r3, #0
 80040d6:	623b      	str	r3, [r7, #32]
          break;
 80040d8:	e000      	b.n	80040dc <HAL_GPIO_Init+0x130>
          break;
 80040da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	2bff      	cmp	r3, #255	; 0xff
 80040e0:	d801      	bhi.n	80040e6 <HAL_GPIO_Init+0x13a>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	e001      	b.n	80040ea <HAL_GPIO_Init+0x13e>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	3304      	adds	r3, #4
 80040ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	2bff      	cmp	r3, #255	; 0xff
 80040f0:	d802      	bhi.n	80040f8 <HAL_GPIO_Init+0x14c>
 80040f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	e002      	b.n	80040fe <HAL_GPIO_Init+0x152>
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	3b08      	subs	r3, #8
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	210f      	movs	r1, #15
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	fa01 f303 	lsl.w	r3, r1, r3
 800410c:	43db      	mvns	r3, r3
 800410e:	401a      	ands	r2, r3
 8004110:	6a39      	ldr	r1, [r7, #32]
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	fa01 f303 	lsl.w	r3, r1, r3
 8004118:	431a      	orrs	r2, r3
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 80b1 	beq.w	800428e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800412c:	4b4d      	ldr	r3, [pc, #308]	; (8004264 <HAL_GPIO_Init+0x2b8>)
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	4a4c      	ldr	r2, [pc, #304]	; (8004264 <HAL_GPIO_Init+0x2b8>)
 8004132:	f043 0301 	orr.w	r3, r3, #1
 8004136:	6193      	str	r3, [r2, #24]
 8004138:	4b4a      	ldr	r3, [pc, #296]	; (8004264 <HAL_GPIO_Init+0x2b8>)
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	60bb      	str	r3, [r7, #8]
 8004142:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004144:	4a48      	ldr	r2, [pc, #288]	; (8004268 <HAL_GPIO_Init+0x2bc>)
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	089b      	lsrs	r3, r3, #2
 800414a:	3302      	adds	r3, #2
 800414c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004150:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004154:	f003 0303 	and.w	r3, r3, #3
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	220f      	movs	r2, #15
 800415c:	fa02 f303 	lsl.w	r3, r2, r3
 8004160:	43db      	mvns	r3, r3
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	4013      	ands	r3, r2
 8004166:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a40      	ldr	r2, [pc, #256]	; (800426c <HAL_GPIO_Init+0x2c0>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d013      	beq.n	8004198 <HAL_GPIO_Init+0x1ec>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a3f      	ldr	r2, [pc, #252]	; (8004270 <HAL_GPIO_Init+0x2c4>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d00d      	beq.n	8004194 <HAL_GPIO_Init+0x1e8>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a3e      	ldr	r2, [pc, #248]	; (8004274 <HAL_GPIO_Init+0x2c8>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d007      	beq.n	8004190 <HAL_GPIO_Init+0x1e4>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a3d      	ldr	r2, [pc, #244]	; (8004278 <HAL_GPIO_Init+0x2cc>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d101      	bne.n	800418c <HAL_GPIO_Init+0x1e0>
 8004188:	2303      	movs	r3, #3
 800418a:	e006      	b.n	800419a <HAL_GPIO_Init+0x1ee>
 800418c:	2304      	movs	r3, #4
 800418e:	e004      	b.n	800419a <HAL_GPIO_Init+0x1ee>
 8004190:	2302      	movs	r3, #2
 8004192:	e002      	b.n	800419a <HAL_GPIO_Init+0x1ee>
 8004194:	2301      	movs	r3, #1
 8004196:	e000      	b.n	800419a <HAL_GPIO_Init+0x1ee>
 8004198:	2300      	movs	r3, #0
 800419a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800419c:	f002 0203 	and.w	r2, r2, #3
 80041a0:	0092      	lsls	r2, r2, #2
 80041a2:	4093      	lsls	r3, r2
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80041aa:	492f      	ldr	r1, [pc, #188]	; (8004268 <HAL_GPIO_Init+0x2bc>)
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ae:	089b      	lsrs	r3, r3, #2
 80041b0:	3302      	adds	r3, #2
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d006      	beq.n	80041d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80041c4:	4b2d      	ldr	r3, [pc, #180]	; (800427c <HAL_GPIO_Init+0x2d0>)
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	492c      	ldr	r1, [pc, #176]	; (800427c <HAL_GPIO_Init+0x2d0>)
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	600b      	str	r3, [r1, #0]
 80041d0:	e006      	b.n	80041e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80041d2:	4b2a      	ldr	r3, [pc, #168]	; (800427c <HAL_GPIO_Init+0x2d0>)
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	43db      	mvns	r3, r3
 80041da:	4928      	ldr	r1, [pc, #160]	; (800427c <HAL_GPIO_Init+0x2d0>)
 80041dc:	4013      	ands	r3, r2
 80041de:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d006      	beq.n	80041fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80041ec:	4b23      	ldr	r3, [pc, #140]	; (800427c <HAL_GPIO_Init+0x2d0>)
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	4922      	ldr	r1, [pc, #136]	; (800427c <HAL_GPIO_Init+0x2d0>)
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	604b      	str	r3, [r1, #4]
 80041f8:	e006      	b.n	8004208 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80041fa:	4b20      	ldr	r3, [pc, #128]	; (800427c <HAL_GPIO_Init+0x2d0>)
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	43db      	mvns	r3, r3
 8004202:	491e      	ldr	r1, [pc, #120]	; (800427c <HAL_GPIO_Init+0x2d0>)
 8004204:	4013      	ands	r3, r2
 8004206:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d006      	beq.n	8004222 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004214:	4b19      	ldr	r3, [pc, #100]	; (800427c <HAL_GPIO_Init+0x2d0>)
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	4918      	ldr	r1, [pc, #96]	; (800427c <HAL_GPIO_Init+0x2d0>)
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	4313      	orrs	r3, r2
 800421e:	608b      	str	r3, [r1, #8]
 8004220:	e006      	b.n	8004230 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004222:	4b16      	ldr	r3, [pc, #88]	; (800427c <HAL_GPIO_Init+0x2d0>)
 8004224:	689a      	ldr	r2, [r3, #8]
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	43db      	mvns	r3, r3
 800422a:	4914      	ldr	r1, [pc, #80]	; (800427c <HAL_GPIO_Init+0x2d0>)
 800422c:	4013      	ands	r3, r2
 800422e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d021      	beq.n	8004280 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800423c:	4b0f      	ldr	r3, [pc, #60]	; (800427c <HAL_GPIO_Init+0x2d0>)
 800423e:	68da      	ldr	r2, [r3, #12]
 8004240:	490e      	ldr	r1, [pc, #56]	; (800427c <HAL_GPIO_Init+0x2d0>)
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	4313      	orrs	r3, r2
 8004246:	60cb      	str	r3, [r1, #12]
 8004248:	e021      	b.n	800428e <HAL_GPIO_Init+0x2e2>
 800424a:	bf00      	nop
 800424c:	10320000 	.word	0x10320000
 8004250:	10310000 	.word	0x10310000
 8004254:	10220000 	.word	0x10220000
 8004258:	10210000 	.word	0x10210000
 800425c:	10120000 	.word	0x10120000
 8004260:	10110000 	.word	0x10110000
 8004264:	40021000 	.word	0x40021000
 8004268:	40010000 	.word	0x40010000
 800426c:	40010800 	.word	0x40010800
 8004270:	40010c00 	.word	0x40010c00
 8004274:	40011000 	.word	0x40011000
 8004278:	40011400 	.word	0x40011400
 800427c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004280:	4b0b      	ldr	r3, [pc, #44]	; (80042b0 <HAL_GPIO_Init+0x304>)
 8004282:	68da      	ldr	r2, [r3, #12]
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	43db      	mvns	r3, r3
 8004288:	4909      	ldr	r1, [pc, #36]	; (80042b0 <HAL_GPIO_Init+0x304>)
 800428a:	4013      	ands	r3, r2
 800428c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004290:	3301      	adds	r3, #1
 8004292:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429a:	fa22 f303 	lsr.w	r3, r2, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f47f ae8e 	bne.w	8003fc0 <HAL_GPIO_Init+0x14>
  }
}
 80042a4:	bf00      	nop
 80042a6:	bf00      	nop
 80042a8:	372c      	adds	r7, #44	; 0x2c
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bc80      	pop	{r7}
 80042ae:	4770      	bx	lr
 80042b0:	40010400 	.word	0x40010400

080042b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	460b      	mov	r3, r1
 80042be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	887b      	ldrh	r3, [r7, #2]
 80042c6:	4013      	ands	r3, r2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d002      	beq.n	80042d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80042cc:	2301      	movs	r3, #1
 80042ce:	73fb      	strb	r3, [r7, #15]
 80042d0:	e001      	b.n	80042d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80042d2:	2300      	movs	r3, #0
 80042d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80042d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	bc80      	pop	{r7}
 80042e0:	4770      	bx	lr

080042e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b083      	sub	sp, #12
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
 80042ea:	460b      	mov	r3, r1
 80042ec:	807b      	strh	r3, [r7, #2]
 80042ee:	4613      	mov	r3, r2
 80042f0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042f2:	787b      	ldrb	r3, [r7, #1]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d003      	beq.n	8004300 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042f8:	887a      	ldrh	r2, [r7, #2]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80042fe:	e003      	b.n	8004308 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004300:	887b      	ldrh	r3, [r7, #2]
 8004302:	041a      	lsls	r2, r3, #16
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	611a      	str	r2, [r3, #16]
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	bc80      	pop	{r7}
 8004310:	4770      	bx	lr

08004312 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004312:	b480      	push	{r7}
 8004314:	b085      	sub	sp, #20
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
 800431a:	460b      	mov	r3, r1
 800431c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004324:	887a      	ldrh	r2, [r7, #2]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	4013      	ands	r3, r2
 800432a:	041a      	lsls	r2, r3, #16
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	43d9      	mvns	r1, r3
 8004330:	887b      	ldrh	r3, [r7, #2]
 8004332:	400b      	ands	r3, r1
 8004334:	431a      	orrs	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	611a      	str	r2, [r3, #16]
}
 800433a:	bf00      	nop
 800433c:	3714      	adds	r7, #20
 800433e:	46bd      	mov	sp, r7
 8004340:	bc80      	pop	{r7}
 8004342:	4770      	bx	lr

08004344 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	4603      	mov	r3, r0
 800434c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800434e:	4b08      	ldr	r3, [pc, #32]	; (8004370 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004350:	695a      	ldr	r2, [r3, #20]
 8004352:	88fb      	ldrh	r3, [r7, #6]
 8004354:	4013      	ands	r3, r2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d006      	beq.n	8004368 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800435a:	4a05      	ldr	r2, [pc, #20]	; (8004370 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800435c:	88fb      	ldrh	r3, [r7, #6]
 800435e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004360:	88fb      	ldrh	r3, [r7, #6]
 8004362:	4618      	mov	r0, r3
 8004364:	f7fd fca0 	bl	8001ca8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004368:	bf00      	nop
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	40010400 	.word	0x40010400

08004374 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e12b      	b.n	80045de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d106      	bne.n	80043a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7fd f888 	bl	80014b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2224      	movs	r2, #36	; 0x24
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0201 	bic.w	r2, r2, #1
 80043b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80043d8:	f000 ffea 	bl	80053b0 <HAL_RCC_GetPCLK1Freq>
 80043dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	4a81      	ldr	r2, [pc, #516]	; (80045e8 <HAL_I2C_Init+0x274>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d807      	bhi.n	80043f8 <HAL_I2C_Init+0x84>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	4a80      	ldr	r2, [pc, #512]	; (80045ec <HAL_I2C_Init+0x278>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	bf94      	ite	ls
 80043f0:	2301      	movls	r3, #1
 80043f2:	2300      	movhi	r3, #0
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	e006      	b.n	8004406 <HAL_I2C_Init+0x92>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	4a7d      	ldr	r2, [pc, #500]	; (80045f0 <HAL_I2C_Init+0x27c>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	bf94      	ite	ls
 8004400:	2301      	movls	r3, #1
 8004402:	2300      	movhi	r3, #0
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e0e7      	b.n	80045de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	4a78      	ldr	r2, [pc, #480]	; (80045f4 <HAL_I2C_Init+0x280>)
 8004412:	fba2 2303 	umull	r2, r3, r2, r3
 8004416:	0c9b      	lsrs	r3, r3, #18
 8004418:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	430a      	orrs	r2, r1
 800442c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	6a1b      	ldr	r3, [r3, #32]
 8004434:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	4a6a      	ldr	r2, [pc, #424]	; (80045e8 <HAL_I2C_Init+0x274>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d802      	bhi.n	8004448 <HAL_I2C_Init+0xd4>
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	3301      	adds	r3, #1
 8004446:	e009      	b.n	800445c <HAL_I2C_Init+0xe8>
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800444e:	fb02 f303 	mul.w	r3, r2, r3
 8004452:	4a69      	ldr	r2, [pc, #420]	; (80045f8 <HAL_I2C_Init+0x284>)
 8004454:	fba2 2303 	umull	r2, r3, r2, r3
 8004458:	099b      	lsrs	r3, r3, #6
 800445a:	3301      	adds	r3, #1
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	6812      	ldr	r2, [r2, #0]
 8004460:	430b      	orrs	r3, r1
 8004462:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800446e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	495c      	ldr	r1, [pc, #368]	; (80045e8 <HAL_I2C_Init+0x274>)
 8004478:	428b      	cmp	r3, r1
 800447a:	d819      	bhi.n	80044b0 <HAL_I2C_Init+0x13c>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	1e59      	subs	r1, r3, #1
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	005b      	lsls	r3, r3, #1
 8004486:	fbb1 f3f3 	udiv	r3, r1, r3
 800448a:	1c59      	adds	r1, r3, #1
 800448c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004490:	400b      	ands	r3, r1
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00a      	beq.n	80044ac <HAL_I2C_Init+0x138>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	1e59      	subs	r1, r3, #1
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80044a4:	3301      	adds	r3, #1
 80044a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044aa:	e051      	b.n	8004550 <HAL_I2C_Init+0x1dc>
 80044ac:	2304      	movs	r3, #4
 80044ae:	e04f      	b.n	8004550 <HAL_I2C_Init+0x1dc>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d111      	bne.n	80044dc <HAL_I2C_Init+0x168>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	1e58      	subs	r0, r3, #1
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6859      	ldr	r1, [r3, #4]
 80044c0:	460b      	mov	r3, r1
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	440b      	add	r3, r1
 80044c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80044ca:	3301      	adds	r3, #1
 80044cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	bf0c      	ite	eq
 80044d4:	2301      	moveq	r3, #1
 80044d6:	2300      	movne	r3, #0
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	e012      	b.n	8004502 <HAL_I2C_Init+0x18e>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	1e58      	subs	r0, r3, #1
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6859      	ldr	r1, [r3, #4]
 80044e4:	460b      	mov	r3, r1
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	440b      	add	r3, r1
 80044ea:	0099      	lsls	r1, r3, #2
 80044ec:	440b      	add	r3, r1
 80044ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80044f2:	3301      	adds	r3, #1
 80044f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	bf0c      	ite	eq
 80044fc:	2301      	moveq	r3, #1
 80044fe:	2300      	movne	r3, #0
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d001      	beq.n	800450a <HAL_I2C_Init+0x196>
 8004506:	2301      	movs	r3, #1
 8004508:	e022      	b.n	8004550 <HAL_I2C_Init+0x1dc>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10e      	bne.n	8004530 <HAL_I2C_Init+0x1bc>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	1e58      	subs	r0, r3, #1
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6859      	ldr	r1, [r3, #4]
 800451a:	460b      	mov	r3, r1
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	440b      	add	r3, r1
 8004520:	fbb0 f3f3 	udiv	r3, r0, r3
 8004524:	3301      	adds	r3, #1
 8004526:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800452a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800452e:	e00f      	b.n	8004550 <HAL_I2C_Init+0x1dc>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	1e58      	subs	r0, r3, #1
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6859      	ldr	r1, [r3, #4]
 8004538:	460b      	mov	r3, r1
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	440b      	add	r3, r1
 800453e:	0099      	lsls	r1, r3, #2
 8004540:	440b      	add	r3, r1
 8004542:	fbb0 f3f3 	udiv	r3, r0, r3
 8004546:	3301      	adds	r3, #1
 8004548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800454c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004550:	6879      	ldr	r1, [r7, #4]
 8004552:	6809      	ldr	r1, [r1, #0]
 8004554:	4313      	orrs	r3, r2
 8004556:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	69da      	ldr	r2, [r3, #28]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	431a      	orrs	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	430a      	orrs	r2, r1
 8004572:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800457e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	6911      	ldr	r1, [r2, #16]
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	68d2      	ldr	r2, [r2, #12]
 800458a:	4311      	orrs	r1, r2
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	6812      	ldr	r2, [r2, #0]
 8004590:	430b      	orrs	r3, r1
 8004592:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	695a      	ldr	r2, [r3, #20]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	430a      	orrs	r2, r1
 80045ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f042 0201 	orr.w	r2, r2, #1
 80045be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2220      	movs	r2, #32
 80045ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	000186a0 	.word	0x000186a0
 80045ec:	001e847f 	.word	0x001e847f
 80045f0:	003d08ff 	.word	0x003d08ff
 80045f4:	431bde83 	.word	0x431bde83
 80045f8:	10624dd3 	.word	0x10624dd3

080045fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b088      	sub	sp, #32
 8004600:	af02      	add	r7, sp, #8
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	607a      	str	r2, [r7, #4]
 8004606:	461a      	mov	r2, r3
 8004608:	460b      	mov	r3, r1
 800460a:	817b      	strh	r3, [r7, #10]
 800460c:	4613      	mov	r3, r2
 800460e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004610:	f7ff f990 	bl	8003934 <HAL_GetTick>
 8004614:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b20      	cmp	r3, #32
 8004620:	f040 80e0 	bne.w	80047e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	9300      	str	r3, [sp, #0]
 8004628:	2319      	movs	r3, #25
 800462a:	2201      	movs	r2, #1
 800462c:	4970      	ldr	r1, [pc, #448]	; (80047f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f000 f964 	bl	80048fc <I2C_WaitOnFlagUntilTimeout>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800463a:	2302      	movs	r3, #2
 800463c:	e0d3      	b.n	80047e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004644:	2b01      	cmp	r3, #1
 8004646:	d101      	bne.n	800464c <HAL_I2C_Master_Transmit+0x50>
 8004648:	2302      	movs	r3, #2
 800464a:	e0cc      	b.n	80047e6 <HAL_I2C_Master_Transmit+0x1ea>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b01      	cmp	r3, #1
 8004660:	d007      	beq.n	8004672 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f042 0201 	orr.w	r2, r2, #1
 8004670:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004680:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2221      	movs	r2, #33	; 0x21
 8004686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2210      	movs	r2, #16
 800468e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	893a      	ldrh	r2, [r7, #8]
 80046a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	4a50      	ldr	r2, [pc, #320]	; (80047f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80046b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80046b4:	8979      	ldrh	r1, [r7, #10]
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	6a3a      	ldr	r2, [r7, #32]
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f000 f89c 	bl	80047f8 <I2C_MasterRequestWrite>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d001      	beq.n	80046ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e08d      	b.n	80047e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ca:	2300      	movs	r3, #0
 80046cc:	613b      	str	r3, [r7, #16]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	613b      	str	r3, [r7, #16]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	613b      	str	r3, [r7, #16]
 80046de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80046e0:	e066      	b.n	80047b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	6a39      	ldr	r1, [r7, #32]
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f000 f9de 	bl	8004aa8 <I2C_WaitOnTXEFlagUntilTimeout>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00d      	beq.n	800470e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	2b04      	cmp	r3, #4
 80046f8:	d107      	bne.n	800470a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004708:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e06b      	b.n	80047e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004712:	781a      	ldrb	r2, [r3, #0]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471e:	1c5a      	adds	r2, r3, #1
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004728:	b29b      	uxth	r3, r3
 800472a:	3b01      	subs	r3, #1
 800472c:	b29a      	uxth	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004736:	3b01      	subs	r3, #1
 8004738:	b29a      	uxth	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	695b      	ldr	r3, [r3, #20]
 8004744:	f003 0304 	and.w	r3, r3, #4
 8004748:	2b04      	cmp	r3, #4
 800474a:	d11b      	bne.n	8004784 <HAL_I2C_Master_Transmit+0x188>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004750:	2b00      	cmp	r3, #0
 8004752:	d017      	beq.n	8004784 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004758:	781a      	ldrb	r2, [r3, #0]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	1c5a      	adds	r2, r3, #1
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800476e:	b29b      	uxth	r3, r3
 8004770:	3b01      	subs	r3, #1
 8004772:	b29a      	uxth	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800477c:	3b01      	subs	r3, #1
 800477e:	b29a      	uxth	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	6a39      	ldr	r1, [r7, #32]
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f000 f9ce 	bl	8004b2a <I2C_WaitOnBTFFlagUntilTimeout>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00d      	beq.n	80047b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004798:	2b04      	cmp	r3, #4
 800479a:	d107      	bne.n	80047ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e01a      	b.n	80047e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d194      	bne.n	80046e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2220      	movs	r2, #32
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80047e0:	2300      	movs	r3, #0
 80047e2:	e000      	b.n	80047e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80047e4:	2302      	movs	r3, #2
  }
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3718      	adds	r7, #24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	00100002 	.word	0x00100002
 80047f4:	ffff0000 	.word	0xffff0000

080047f8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b088      	sub	sp, #32
 80047fc:	af02      	add	r7, sp, #8
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	607a      	str	r2, [r7, #4]
 8004802:	603b      	str	r3, [r7, #0]
 8004804:	460b      	mov	r3, r1
 8004806:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2b08      	cmp	r3, #8
 8004812:	d006      	beq.n	8004822 <I2C_MasterRequestWrite+0x2a>
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d003      	beq.n	8004822 <I2C_MasterRequestWrite+0x2a>
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004820:	d108      	bne.n	8004834 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	e00b      	b.n	800484c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004838:	2b12      	cmp	r3, #18
 800483a:	d107      	bne.n	800484c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800484a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f000 f84f 	bl	80048fc <I2C_WaitOnFlagUntilTimeout>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00d      	beq.n	8004880 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004872:	d103      	bne.n	800487c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f44f 7200 	mov.w	r2, #512	; 0x200
 800487a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e035      	b.n	80048ec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004888:	d108      	bne.n	800489c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800488a:	897b      	ldrh	r3, [r7, #10]
 800488c:	b2db      	uxtb	r3, r3
 800488e:	461a      	mov	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004898:	611a      	str	r2, [r3, #16]
 800489a:	e01b      	b.n	80048d4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800489c:	897b      	ldrh	r3, [r7, #10]
 800489e:	11db      	asrs	r3, r3, #7
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	f003 0306 	and.w	r3, r3, #6
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	f063 030f 	orn	r3, r3, #15
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	490e      	ldr	r1, [pc, #56]	; (80048f4 <I2C_MasterRequestWrite+0xfc>)
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f000 f875 	bl	80049aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e010      	b.n	80048ec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80048ca:	897b      	ldrh	r3, [r7, #10]
 80048cc:	b2da      	uxtb	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	4907      	ldr	r1, [pc, #28]	; (80048f8 <I2C_MasterRequestWrite+0x100>)
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f000 f865 	bl	80049aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e000      	b.n	80048ec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3718      	adds	r7, #24
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	00010008 	.word	0x00010008
 80048f8:	00010002 	.word	0x00010002

080048fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	603b      	str	r3, [r7, #0]
 8004908:	4613      	mov	r3, r2
 800490a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800490c:	e025      	b.n	800495a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004914:	d021      	beq.n	800495a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004916:	f7ff f80d 	bl	8003934 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	429a      	cmp	r2, r3
 8004924:	d302      	bcc.n	800492c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d116      	bne.n	800495a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2220      	movs	r2, #32
 8004936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	f043 0220 	orr.w	r2, r3, #32
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e023      	b.n	80049a2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	0c1b      	lsrs	r3, r3, #16
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b01      	cmp	r3, #1
 8004962:	d10d      	bne.n	8004980 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	43da      	mvns	r2, r3
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	4013      	ands	r3, r2
 8004970:	b29b      	uxth	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	bf0c      	ite	eq
 8004976:	2301      	moveq	r3, #1
 8004978:	2300      	movne	r3, #0
 800497a:	b2db      	uxtb	r3, r3
 800497c:	461a      	mov	r2, r3
 800497e:	e00c      	b.n	800499a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	43da      	mvns	r2, r3
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	4013      	ands	r3, r2
 800498c:	b29b      	uxth	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	bf0c      	ite	eq
 8004992:	2301      	moveq	r3, #1
 8004994:	2300      	movne	r3, #0
 8004996:	b2db      	uxtb	r3, r3
 8004998:	461a      	mov	r2, r3
 800499a:	79fb      	ldrb	r3, [r7, #7]
 800499c:	429a      	cmp	r2, r3
 800499e:	d0b6      	beq.n	800490e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b084      	sub	sp, #16
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	60f8      	str	r0, [r7, #12]
 80049b2:	60b9      	str	r1, [r7, #8]
 80049b4:	607a      	str	r2, [r7, #4]
 80049b6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049b8:	e051      	b.n	8004a5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049c8:	d123      	bne.n	8004a12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049d8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049e2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2220      	movs	r2, #32
 80049ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	f043 0204 	orr.w	r2, r3, #4
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e046      	b.n	8004aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a18:	d021      	beq.n	8004a5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a1a:	f7fe ff8b 	bl	8003934 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d302      	bcc.n	8004a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d116      	bne.n	8004a5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4a:	f043 0220 	orr.w	r2, r3, #32
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e020      	b.n	8004aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	0c1b      	lsrs	r3, r3, #16
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d10c      	bne.n	8004a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	43da      	mvns	r2, r3
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	4013      	ands	r3, r2
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	bf14      	ite	ne
 8004a7a:	2301      	movne	r3, #1
 8004a7c:	2300      	moveq	r3, #0
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	e00b      	b.n	8004a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	43da      	mvns	r2, r3
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	bf14      	ite	ne
 8004a94:	2301      	movne	r3, #1
 8004a96:	2300      	moveq	r3, #0
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d18d      	bne.n	80049ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ab4:	e02d      	b.n	8004b12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f000 f878 	bl	8004bac <I2C_IsAcknowledgeFailed>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e02d      	b.n	8004b22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004acc:	d021      	beq.n	8004b12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ace:	f7fe ff31 	bl	8003934 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d302      	bcc.n	8004ae4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d116      	bne.n	8004b12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2220      	movs	r2, #32
 8004aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	f043 0220 	orr.w	r2, r3, #32
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e007      	b.n	8004b22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b1c:	2b80      	cmp	r3, #128	; 0x80
 8004b1e:	d1ca      	bne.n	8004ab6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b084      	sub	sp, #16
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	60f8      	str	r0, [r7, #12]
 8004b32:	60b9      	str	r1, [r7, #8]
 8004b34:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b36:	e02d      	b.n	8004b94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f000 f837 	bl	8004bac <I2C_IsAcknowledgeFailed>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d001      	beq.n	8004b48 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e02d      	b.n	8004ba4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4e:	d021      	beq.n	8004b94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b50:	f7fe fef0 	bl	8003934 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d302      	bcc.n	8004b66 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d116      	bne.n	8004b94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b80:	f043 0220 	orr.w	r2, r3, #32
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e007      	b.n	8004ba4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	f003 0304 	and.w	r3, r3, #4
 8004b9e:	2b04      	cmp	r3, #4
 8004ba0:	d1ca      	bne.n	8004b38 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc2:	d11b      	bne.n	8004bfc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bcc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be8:	f043 0204 	orr.w	r2, r3, #4
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e000      	b.n	8004bfe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bc80      	pop	{r7}
 8004c06:	4770      	bx	lr

08004c08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e272      	b.n	8005100 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f000 8087 	beq.w	8004d36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c28:	4b92      	ldr	r3, [pc, #584]	; (8004e74 <HAL_RCC_OscConfig+0x26c>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f003 030c 	and.w	r3, r3, #12
 8004c30:	2b04      	cmp	r3, #4
 8004c32:	d00c      	beq.n	8004c4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004c34:	4b8f      	ldr	r3, [pc, #572]	; (8004e74 <HAL_RCC_OscConfig+0x26c>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f003 030c 	and.w	r3, r3, #12
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	d112      	bne.n	8004c66 <HAL_RCC_OscConfig+0x5e>
 8004c40:	4b8c      	ldr	r3, [pc, #560]	; (8004e74 <HAL_RCC_OscConfig+0x26c>)
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c4c:	d10b      	bne.n	8004c66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c4e:	4b89      	ldr	r3, [pc, #548]	; (8004e74 <HAL_RCC_OscConfig+0x26c>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d06c      	beq.n	8004d34 <HAL_RCC_OscConfig+0x12c>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d168      	bne.n	8004d34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e24c      	b.n	8005100 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c6e:	d106      	bne.n	8004c7e <HAL_RCC_OscConfig+0x76>
 8004c70:	4b80      	ldr	r3, [pc, #512]	; (8004e74 <HAL_RCC_OscConfig+0x26c>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a7f      	ldr	r2, [pc, #508]	; (8004e74 <HAL_RCC_OscConfig+0x26c>)
 8004c76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c7a:	6013      	str	r3, [r2, #0]
 8004c7c:	e02e      	b.n	8004cdc <HAL_RCC_OscConfig+0xd4>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10c      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x98>
 8004c86:	4b7b      	ldr	r3, [pc, #492]	; (8004e74 <HAL_RCC_OscConfig+0x26c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a7a      	ldr	r2, [pc, #488]	; (8004e74 <HAL_RCC_OscConfig+0x26c>)
 8004c8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c90:	6013      	str	r3, [r2, #0]
 8004c92:	4b78      	ldr	r3, [pc, #480]	; (8004e74 <HAL_RCC_OscConfig+0x26c>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a77      	ldr	r2, [pc, #476]	; (8004e74 <HAL_RCC_OscConfig+0x26c>)
 8004c98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c9c:	6013      	str	r3, [r2, #0]
 8004c9e:	e01d      	b.n	8004cdc <HAL_RCC_OscConfig+0xd4>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ca8:	d10c      	bne.n	8004cc4 <HAL_RCC_OscConfig+0xbc>
 8004caa:	4b72      	ldr	r3, [pc, #456]	; (8004e74 <HAL_RCC_OscConfig+0x26c>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a71      	ldr	r2, [pc, #452]	; (8004e74 <HAL_RCC_OscConfig+0x26c>)
 8004cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cb4:	6013      	str	r3, [r2, #0]
 8004cb6:	4b6f      	ldr	r3, [pc, #444]	; (8004e74 <HAL_RCC_OscConfig+0x26c>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a6e      	ldr	r2, [pc, #440]	; (8004e74 <HAL_RCC_OscConfig+0x26c>)
 8004cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cc0:	6013      	str	r3, [r2, #0]
 8004cc2:	e00b      	b.n	8004cdc <HAL_RCC_OscConfig+0xd4>
 8004cc4:	4b6b      	ldr	r3, [pc, #428]	; (8004e74 <HAL_RCC_OscConfig+0x26c>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a6a      	ldr	r2, [pc, #424]	; (8004e74 <HAL_RCC_OscConfig+0x26c>)
 8004cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cce:	6013      	str	r3, [r2, #0]
 8004cd0:	4b68      	ldr	r3, [pc, #416]	; (8004e74 <HAL_RCC_OscConfig+0x26c>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a67      	ldr	r2, [pc, #412]	; (8004e74 <HAL_RCC_OscConfig+0x26c>)
 8004cd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d013      	beq.n	8004d0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce4:	f7fe fe26 	bl	8003934 <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cec:	f7fe fe22 	bl	8003934 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b64      	cmp	r3, #100	; 0x64
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e200      	b.n	8005100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cfe:	4b5d      	ldr	r3, [pc, #372]	; (8004e74 <HAL_RCC_OscConfig+0x26c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d0f0      	beq.n	8004cec <HAL_RCC_OscConfig+0xe4>
 8004d0a:	e014      	b.n	8004d36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d0c:	f7fe fe12 	bl	8003934 <HAL_GetTick>
 8004d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d12:	e008      	b.n	8004d26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d14:	f7fe fe0e 	bl	8003934 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b64      	cmp	r3, #100	; 0x64
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e1ec      	b.n	8005100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d26:	4b53      	ldr	r3, [pc, #332]	; (8004e74 <HAL_RCC_OscConfig+0x26c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1f0      	bne.n	8004d14 <HAL_RCC_OscConfig+0x10c>
 8004d32:	e000      	b.n	8004d36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d063      	beq.n	8004e0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d42:	4b4c      	ldr	r3, [pc, #304]	; (8004e74 <HAL_RCC_OscConfig+0x26c>)
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f003 030c 	and.w	r3, r3, #12
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00b      	beq.n	8004d66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004d4e:	4b49      	ldr	r3, [pc, #292]	; (8004e74 <HAL_RCC_OscConfig+0x26c>)
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f003 030c 	and.w	r3, r3, #12
 8004d56:	2b08      	cmp	r3, #8
 8004d58:	d11c      	bne.n	8004d94 <HAL_RCC_OscConfig+0x18c>
 8004d5a:	4b46      	ldr	r3, [pc, #280]	; (8004e74 <HAL_RCC_OscConfig+0x26c>)
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d116      	bne.n	8004d94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d66:	4b43      	ldr	r3, [pc, #268]	; (8004e74 <HAL_RCC_OscConfig+0x26c>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d005      	beq.n	8004d7e <HAL_RCC_OscConfig+0x176>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d001      	beq.n	8004d7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e1c0      	b.n	8005100 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d7e:	4b3d      	ldr	r3, [pc, #244]	; (8004e74 <HAL_RCC_OscConfig+0x26c>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	4939      	ldr	r1, [pc, #228]	; (8004e74 <HAL_RCC_OscConfig+0x26c>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d92:	e03a      	b.n	8004e0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d020      	beq.n	8004dde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d9c:	4b36      	ldr	r3, [pc, #216]	; (8004e78 <HAL_RCC_OscConfig+0x270>)
 8004d9e:	2201      	movs	r2, #1
 8004da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004da2:	f7fe fdc7 	bl	8003934 <HAL_GetTick>
 8004da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004da8:	e008      	b.n	8004dbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004daa:	f7fe fdc3 	bl	8003934 <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e1a1      	b.n	8005100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dbc:	4b2d      	ldr	r3, [pc, #180]	; (8004e74 <HAL_RCC_OscConfig+0x26c>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d0f0      	beq.n	8004daa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dc8:	4b2a      	ldr	r3, [pc, #168]	; (8004e74 <HAL_RCC_OscConfig+0x26c>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	695b      	ldr	r3, [r3, #20]
 8004dd4:	00db      	lsls	r3, r3, #3
 8004dd6:	4927      	ldr	r1, [pc, #156]	; (8004e74 <HAL_RCC_OscConfig+0x26c>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	600b      	str	r3, [r1, #0]
 8004ddc:	e015      	b.n	8004e0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dde:	4b26      	ldr	r3, [pc, #152]	; (8004e78 <HAL_RCC_OscConfig+0x270>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004de4:	f7fe fda6 	bl	8003934 <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dec:	f7fe fda2 	bl	8003934 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e180      	b.n	8005100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dfe:	4b1d      	ldr	r3, [pc, #116]	; (8004e74 <HAL_RCC_OscConfig+0x26c>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1f0      	bne.n	8004dec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0308 	and.w	r3, r3, #8
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d03a      	beq.n	8004e8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d019      	beq.n	8004e52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e1e:	4b17      	ldr	r3, [pc, #92]	; (8004e7c <HAL_RCC_OscConfig+0x274>)
 8004e20:	2201      	movs	r2, #1
 8004e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e24:	f7fe fd86 	bl	8003934 <HAL_GetTick>
 8004e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e2a:	e008      	b.n	8004e3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e2c:	f7fe fd82 	bl	8003934 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e160      	b.n	8005100 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e3e:	4b0d      	ldr	r3, [pc, #52]	; (8004e74 <HAL_RCC_OscConfig+0x26c>)
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d0f0      	beq.n	8004e2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004e4a:	2001      	movs	r0, #1
 8004e4c:	f000 fac4 	bl	80053d8 <RCC_Delay>
 8004e50:	e01c      	b.n	8004e8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e52:	4b0a      	ldr	r3, [pc, #40]	; (8004e7c <HAL_RCC_OscConfig+0x274>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e58:	f7fe fd6c 	bl	8003934 <HAL_GetTick>
 8004e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e5e:	e00f      	b.n	8004e80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e60:	f7fe fd68 	bl	8003934 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d908      	bls.n	8004e80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e146      	b.n	8005100 <HAL_RCC_OscConfig+0x4f8>
 8004e72:	bf00      	nop
 8004e74:	40021000 	.word	0x40021000
 8004e78:	42420000 	.word	0x42420000
 8004e7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e80:	4b92      	ldr	r3, [pc, #584]	; (80050cc <HAL_RCC_OscConfig+0x4c4>)
 8004e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e84:	f003 0302 	and.w	r3, r3, #2
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1e9      	bne.n	8004e60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0304 	and.w	r3, r3, #4
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f000 80a6 	beq.w	8004fe6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e9e:	4b8b      	ldr	r3, [pc, #556]	; (80050cc <HAL_RCC_OscConfig+0x4c4>)
 8004ea0:	69db      	ldr	r3, [r3, #28]
 8004ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10d      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eaa:	4b88      	ldr	r3, [pc, #544]	; (80050cc <HAL_RCC_OscConfig+0x4c4>)
 8004eac:	69db      	ldr	r3, [r3, #28]
 8004eae:	4a87      	ldr	r2, [pc, #540]	; (80050cc <HAL_RCC_OscConfig+0x4c4>)
 8004eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eb4:	61d3      	str	r3, [r2, #28]
 8004eb6:	4b85      	ldr	r3, [pc, #532]	; (80050cc <HAL_RCC_OscConfig+0x4c4>)
 8004eb8:	69db      	ldr	r3, [r3, #28]
 8004eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ebe:	60bb      	str	r3, [r7, #8]
 8004ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ec6:	4b82      	ldr	r3, [pc, #520]	; (80050d0 <HAL_RCC_OscConfig+0x4c8>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d118      	bne.n	8004f04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ed2:	4b7f      	ldr	r3, [pc, #508]	; (80050d0 <HAL_RCC_OscConfig+0x4c8>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a7e      	ldr	r2, [pc, #504]	; (80050d0 <HAL_RCC_OscConfig+0x4c8>)
 8004ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ede:	f7fe fd29 	bl	8003934 <HAL_GetTick>
 8004ee2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ee4:	e008      	b.n	8004ef8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ee6:	f7fe fd25 	bl	8003934 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b64      	cmp	r3, #100	; 0x64
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e103      	b.n	8005100 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ef8:	4b75      	ldr	r3, [pc, #468]	; (80050d0 <HAL_RCC_OscConfig+0x4c8>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d0f0      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d106      	bne.n	8004f1a <HAL_RCC_OscConfig+0x312>
 8004f0c:	4b6f      	ldr	r3, [pc, #444]	; (80050cc <HAL_RCC_OscConfig+0x4c4>)
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	4a6e      	ldr	r2, [pc, #440]	; (80050cc <HAL_RCC_OscConfig+0x4c4>)
 8004f12:	f043 0301 	orr.w	r3, r3, #1
 8004f16:	6213      	str	r3, [r2, #32]
 8004f18:	e02d      	b.n	8004f76 <HAL_RCC_OscConfig+0x36e>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10c      	bne.n	8004f3c <HAL_RCC_OscConfig+0x334>
 8004f22:	4b6a      	ldr	r3, [pc, #424]	; (80050cc <HAL_RCC_OscConfig+0x4c4>)
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	4a69      	ldr	r2, [pc, #420]	; (80050cc <HAL_RCC_OscConfig+0x4c4>)
 8004f28:	f023 0301 	bic.w	r3, r3, #1
 8004f2c:	6213      	str	r3, [r2, #32]
 8004f2e:	4b67      	ldr	r3, [pc, #412]	; (80050cc <HAL_RCC_OscConfig+0x4c4>)
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	4a66      	ldr	r2, [pc, #408]	; (80050cc <HAL_RCC_OscConfig+0x4c4>)
 8004f34:	f023 0304 	bic.w	r3, r3, #4
 8004f38:	6213      	str	r3, [r2, #32]
 8004f3a:	e01c      	b.n	8004f76 <HAL_RCC_OscConfig+0x36e>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	2b05      	cmp	r3, #5
 8004f42:	d10c      	bne.n	8004f5e <HAL_RCC_OscConfig+0x356>
 8004f44:	4b61      	ldr	r3, [pc, #388]	; (80050cc <HAL_RCC_OscConfig+0x4c4>)
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	4a60      	ldr	r2, [pc, #384]	; (80050cc <HAL_RCC_OscConfig+0x4c4>)
 8004f4a:	f043 0304 	orr.w	r3, r3, #4
 8004f4e:	6213      	str	r3, [r2, #32]
 8004f50:	4b5e      	ldr	r3, [pc, #376]	; (80050cc <HAL_RCC_OscConfig+0x4c4>)
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	4a5d      	ldr	r2, [pc, #372]	; (80050cc <HAL_RCC_OscConfig+0x4c4>)
 8004f56:	f043 0301 	orr.w	r3, r3, #1
 8004f5a:	6213      	str	r3, [r2, #32]
 8004f5c:	e00b      	b.n	8004f76 <HAL_RCC_OscConfig+0x36e>
 8004f5e:	4b5b      	ldr	r3, [pc, #364]	; (80050cc <HAL_RCC_OscConfig+0x4c4>)
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	4a5a      	ldr	r2, [pc, #360]	; (80050cc <HAL_RCC_OscConfig+0x4c4>)
 8004f64:	f023 0301 	bic.w	r3, r3, #1
 8004f68:	6213      	str	r3, [r2, #32]
 8004f6a:	4b58      	ldr	r3, [pc, #352]	; (80050cc <HAL_RCC_OscConfig+0x4c4>)
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	4a57      	ldr	r2, [pc, #348]	; (80050cc <HAL_RCC_OscConfig+0x4c4>)
 8004f70:	f023 0304 	bic.w	r3, r3, #4
 8004f74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d015      	beq.n	8004faa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f7e:	f7fe fcd9 	bl	8003934 <HAL_GetTick>
 8004f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f84:	e00a      	b.n	8004f9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f86:	f7fe fcd5 	bl	8003934 <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d901      	bls.n	8004f9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e0b1      	b.n	8005100 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f9c:	4b4b      	ldr	r3, [pc, #300]	; (80050cc <HAL_RCC_OscConfig+0x4c4>)
 8004f9e:	6a1b      	ldr	r3, [r3, #32]
 8004fa0:	f003 0302 	and.w	r3, r3, #2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0ee      	beq.n	8004f86 <HAL_RCC_OscConfig+0x37e>
 8004fa8:	e014      	b.n	8004fd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004faa:	f7fe fcc3 	bl	8003934 <HAL_GetTick>
 8004fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fb0:	e00a      	b.n	8004fc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fb2:	f7fe fcbf 	bl	8003934 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d901      	bls.n	8004fc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e09b      	b.n	8005100 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fc8:	4b40      	ldr	r3, [pc, #256]	; (80050cc <HAL_RCC_OscConfig+0x4c4>)
 8004fca:	6a1b      	ldr	r3, [r3, #32]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1ee      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004fd4:	7dfb      	ldrb	r3, [r7, #23]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d105      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fda:	4b3c      	ldr	r3, [pc, #240]	; (80050cc <HAL_RCC_OscConfig+0x4c4>)
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	4a3b      	ldr	r2, [pc, #236]	; (80050cc <HAL_RCC_OscConfig+0x4c4>)
 8004fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fe4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	69db      	ldr	r3, [r3, #28]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f000 8087 	beq.w	80050fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ff0:	4b36      	ldr	r3, [pc, #216]	; (80050cc <HAL_RCC_OscConfig+0x4c4>)
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f003 030c 	and.w	r3, r3, #12
 8004ff8:	2b08      	cmp	r3, #8
 8004ffa:	d061      	beq.n	80050c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	69db      	ldr	r3, [r3, #28]
 8005000:	2b02      	cmp	r3, #2
 8005002:	d146      	bne.n	8005092 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005004:	4b33      	ldr	r3, [pc, #204]	; (80050d4 <HAL_RCC_OscConfig+0x4cc>)
 8005006:	2200      	movs	r2, #0
 8005008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800500a:	f7fe fc93 	bl	8003934 <HAL_GetTick>
 800500e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005010:	e008      	b.n	8005024 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005012:	f7fe fc8f 	bl	8003934 <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d901      	bls.n	8005024 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e06d      	b.n	8005100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005024:	4b29      	ldr	r3, [pc, #164]	; (80050cc <HAL_RCC_OscConfig+0x4c4>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1f0      	bne.n	8005012 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a1b      	ldr	r3, [r3, #32]
 8005034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005038:	d108      	bne.n	800504c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800503a:	4b24      	ldr	r3, [pc, #144]	; (80050cc <HAL_RCC_OscConfig+0x4c4>)
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	4921      	ldr	r1, [pc, #132]	; (80050cc <HAL_RCC_OscConfig+0x4c4>)
 8005048:	4313      	orrs	r3, r2
 800504a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800504c:	4b1f      	ldr	r3, [pc, #124]	; (80050cc <HAL_RCC_OscConfig+0x4c4>)
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a19      	ldr	r1, [r3, #32]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505c:	430b      	orrs	r3, r1
 800505e:	491b      	ldr	r1, [pc, #108]	; (80050cc <HAL_RCC_OscConfig+0x4c4>)
 8005060:	4313      	orrs	r3, r2
 8005062:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005064:	4b1b      	ldr	r3, [pc, #108]	; (80050d4 <HAL_RCC_OscConfig+0x4cc>)
 8005066:	2201      	movs	r2, #1
 8005068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800506a:	f7fe fc63 	bl	8003934 <HAL_GetTick>
 800506e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005070:	e008      	b.n	8005084 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005072:	f7fe fc5f 	bl	8003934 <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	2b02      	cmp	r3, #2
 800507e:	d901      	bls.n	8005084 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e03d      	b.n	8005100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005084:	4b11      	ldr	r3, [pc, #68]	; (80050cc <HAL_RCC_OscConfig+0x4c4>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d0f0      	beq.n	8005072 <HAL_RCC_OscConfig+0x46a>
 8005090:	e035      	b.n	80050fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005092:	4b10      	ldr	r3, [pc, #64]	; (80050d4 <HAL_RCC_OscConfig+0x4cc>)
 8005094:	2200      	movs	r2, #0
 8005096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005098:	f7fe fc4c 	bl	8003934 <HAL_GetTick>
 800509c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800509e:	e008      	b.n	80050b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050a0:	f7fe fc48 	bl	8003934 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e026      	b.n	8005100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050b2:	4b06      	ldr	r3, [pc, #24]	; (80050cc <HAL_RCC_OscConfig+0x4c4>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1f0      	bne.n	80050a0 <HAL_RCC_OscConfig+0x498>
 80050be:	e01e      	b.n	80050fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	69db      	ldr	r3, [r3, #28]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d107      	bne.n	80050d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e019      	b.n	8005100 <HAL_RCC_OscConfig+0x4f8>
 80050cc:	40021000 	.word	0x40021000
 80050d0:	40007000 	.word	0x40007000
 80050d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80050d8:	4b0b      	ldr	r3, [pc, #44]	; (8005108 <HAL_RCC_OscConfig+0x500>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d106      	bne.n	80050fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d001      	beq.n	80050fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e000      	b.n	8005100 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3718      	adds	r7, #24
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	40021000 	.word	0x40021000

0800510c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e0d0      	b.n	80052c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005120:	4b6a      	ldr	r3, [pc, #424]	; (80052cc <HAL_RCC_ClockConfig+0x1c0>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0307 	and.w	r3, r3, #7
 8005128:	683a      	ldr	r2, [r7, #0]
 800512a:	429a      	cmp	r2, r3
 800512c:	d910      	bls.n	8005150 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800512e:	4b67      	ldr	r3, [pc, #412]	; (80052cc <HAL_RCC_ClockConfig+0x1c0>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f023 0207 	bic.w	r2, r3, #7
 8005136:	4965      	ldr	r1, [pc, #404]	; (80052cc <HAL_RCC_ClockConfig+0x1c0>)
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	4313      	orrs	r3, r2
 800513c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800513e:	4b63      	ldr	r3, [pc, #396]	; (80052cc <HAL_RCC_ClockConfig+0x1c0>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0307 	and.w	r3, r3, #7
 8005146:	683a      	ldr	r2, [r7, #0]
 8005148:	429a      	cmp	r2, r3
 800514a:	d001      	beq.n	8005150 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e0b8      	b.n	80052c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d020      	beq.n	800519e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0304 	and.w	r3, r3, #4
 8005164:	2b00      	cmp	r3, #0
 8005166:	d005      	beq.n	8005174 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005168:	4b59      	ldr	r3, [pc, #356]	; (80052d0 <HAL_RCC_ClockConfig+0x1c4>)
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	4a58      	ldr	r2, [pc, #352]	; (80052d0 <HAL_RCC_ClockConfig+0x1c4>)
 800516e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005172:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0308 	and.w	r3, r3, #8
 800517c:	2b00      	cmp	r3, #0
 800517e:	d005      	beq.n	800518c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005180:	4b53      	ldr	r3, [pc, #332]	; (80052d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	4a52      	ldr	r2, [pc, #328]	; (80052d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005186:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800518a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800518c:	4b50      	ldr	r3, [pc, #320]	; (80052d0 <HAL_RCC_ClockConfig+0x1c4>)
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	494d      	ldr	r1, [pc, #308]	; (80052d0 <HAL_RCC_ClockConfig+0x1c4>)
 800519a:	4313      	orrs	r3, r2
 800519c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d040      	beq.n	800522c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d107      	bne.n	80051c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051b2:	4b47      	ldr	r3, [pc, #284]	; (80052d0 <HAL_RCC_ClockConfig+0x1c4>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d115      	bne.n	80051ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e07f      	b.n	80052c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d107      	bne.n	80051da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051ca:	4b41      	ldr	r3, [pc, #260]	; (80052d0 <HAL_RCC_ClockConfig+0x1c4>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d109      	bne.n	80051ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e073      	b.n	80052c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051da:	4b3d      	ldr	r3, [pc, #244]	; (80052d0 <HAL_RCC_ClockConfig+0x1c4>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e06b      	b.n	80052c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051ea:	4b39      	ldr	r3, [pc, #228]	; (80052d0 <HAL_RCC_ClockConfig+0x1c4>)
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f023 0203 	bic.w	r2, r3, #3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	4936      	ldr	r1, [pc, #216]	; (80052d0 <HAL_RCC_ClockConfig+0x1c4>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051fc:	f7fe fb9a 	bl	8003934 <HAL_GetTick>
 8005200:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005202:	e00a      	b.n	800521a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005204:	f7fe fb96 	bl	8003934 <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005212:	4293      	cmp	r3, r2
 8005214:	d901      	bls.n	800521a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e053      	b.n	80052c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800521a:	4b2d      	ldr	r3, [pc, #180]	; (80052d0 <HAL_RCC_ClockConfig+0x1c4>)
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f003 020c 	and.w	r2, r3, #12
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	429a      	cmp	r2, r3
 800522a:	d1eb      	bne.n	8005204 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800522c:	4b27      	ldr	r3, [pc, #156]	; (80052cc <HAL_RCC_ClockConfig+0x1c0>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0307 	and.w	r3, r3, #7
 8005234:	683a      	ldr	r2, [r7, #0]
 8005236:	429a      	cmp	r2, r3
 8005238:	d210      	bcs.n	800525c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800523a:	4b24      	ldr	r3, [pc, #144]	; (80052cc <HAL_RCC_ClockConfig+0x1c0>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f023 0207 	bic.w	r2, r3, #7
 8005242:	4922      	ldr	r1, [pc, #136]	; (80052cc <HAL_RCC_ClockConfig+0x1c0>)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	4313      	orrs	r3, r2
 8005248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800524a:	4b20      	ldr	r3, [pc, #128]	; (80052cc <HAL_RCC_ClockConfig+0x1c0>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0307 	and.w	r3, r3, #7
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	429a      	cmp	r2, r3
 8005256:	d001      	beq.n	800525c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e032      	b.n	80052c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0304 	and.w	r3, r3, #4
 8005264:	2b00      	cmp	r3, #0
 8005266:	d008      	beq.n	800527a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005268:	4b19      	ldr	r3, [pc, #100]	; (80052d0 <HAL_RCC_ClockConfig+0x1c4>)
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	4916      	ldr	r1, [pc, #88]	; (80052d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005276:	4313      	orrs	r3, r2
 8005278:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0308 	and.w	r3, r3, #8
 8005282:	2b00      	cmp	r3, #0
 8005284:	d009      	beq.n	800529a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005286:	4b12      	ldr	r3, [pc, #72]	; (80052d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	490e      	ldr	r1, [pc, #56]	; (80052d0 <HAL_RCC_ClockConfig+0x1c4>)
 8005296:	4313      	orrs	r3, r2
 8005298:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800529a:	f000 f821 	bl	80052e0 <HAL_RCC_GetSysClockFreq>
 800529e:	4602      	mov	r2, r0
 80052a0:	4b0b      	ldr	r3, [pc, #44]	; (80052d0 <HAL_RCC_ClockConfig+0x1c4>)
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	091b      	lsrs	r3, r3, #4
 80052a6:	f003 030f 	and.w	r3, r3, #15
 80052aa:	490a      	ldr	r1, [pc, #40]	; (80052d4 <HAL_RCC_ClockConfig+0x1c8>)
 80052ac:	5ccb      	ldrb	r3, [r1, r3]
 80052ae:	fa22 f303 	lsr.w	r3, r2, r3
 80052b2:	4a09      	ldr	r2, [pc, #36]	; (80052d8 <HAL_RCC_ClockConfig+0x1cc>)
 80052b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80052b6:	4b09      	ldr	r3, [pc, #36]	; (80052dc <HAL_RCC_ClockConfig+0x1d0>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7fe faf8 	bl	80038b0 <HAL_InitTick>

  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	40022000 	.word	0x40022000
 80052d0:	40021000 	.word	0x40021000
 80052d4:	08006c80 	.word	0x08006c80
 80052d8:	20000000 	.word	0x20000000
 80052dc:	2000001c 	.word	0x2000001c

080052e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052e0:	b490      	push	{r4, r7}
 80052e2:	b08a      	sub	sp, #40	; 0x28
 80052e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80052e6:	4b29      	ldr	r3, [pc, #164]	; (800538c <HAL_RCC_GetSysClockFreq+0xac>)
 80052e8:	1d3c      	adds	r4, r7, #4
 80052ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80052ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80052f0:	f240 2301 	movw	r3, #513	; 0x201
 80052f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	61fb      	str	r3, [r7, #28]
 80052fa:	2300      	movs	r3, #0
 80052fc:	61bb      	str	r3, [r7, #24]
 80052fe:	2300      	movs	r3, #0
 8005300:	627b      	str	r3, [r7, #36]	; 0x24
 8005302:	2300      	movs	r3, #0
 8005304:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005306:	2300      	movs	r3, #0
 8005308:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800530a:	4b21      	ldr	r3, [pc, #132]	; (8005390 <HAL_RCC_GetSysClockFreq+0xb0>)
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	f003 030c 	and.w	r3, r3, #12
 8005316:	2b04      	cmp	r3, #4
 8005318:	d002      	beq.n	8005320 <HAL_RCC_GetSysClockFreq+0x40>
 800531a:	2b08      	cmp	r3, #8
 800531c:	d003      	beq.n	8005326 <HAL_RCC_GetSysClockFreq+0x46>
 800531e:	e02b      	b.n	8005378 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005320:	4b1c      	ldr	r3, [pc, #112]	; (8005394 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005322:	623b      	str	r3, [r7, #32]
      break;
 8005324:	e02b      	b.n	800537e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	0c9b      	lsrs	r3, r3, #18
 800532a:	f003 030f 	and.w	r3, r3, #15
 800532e:	3328      	adds	r3, #40	; 0x28
 8005330:	443b      	add	r3, r7
 8005332:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005336:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d012      	beq.n	8005368 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005342:	4b13      	ldr	r3, [pc, #76]	; (8005390 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	0c5b      	lsrs	r3, r3, #17
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	3328      	adds	r3, #40	; 0x28
 800534e:	443b      	add	r3, r7
 8005350:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005354:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	4a0e      	ldr	r2, [pc, #56]	; (8005394 <HAL_RCC_GetSysClockFreq+0xb4>)
 800535a:	fb03 f202 	mul.w	r2, r3, r2
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	fbb2 f3f3 	udiv	r3, r2, r3
 8005364:	627b      	str	r3, [r7, #36]	; 0x24
 8005366:	e004      	b.n	8005372 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	4a0b      	ldr	r2, [pc, #44]	; (8005398 <HAL_RCC_GetSysClockFreq+0xb8>)
 800536c:	fb02 f303 	mul.w	r3, r2, r3
 8005370:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005374:	623b      	str	r3, [r7, #32]
      break;
 8005376:	e002      	b.n	800537e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005378:	4b06      	ldr	r3, [pc, #24]	; (8005394 <HAL_RCC_GetSysClockFreq+0xb4>)
 800537a:	623b      	str	r3, [r7, #32]
      break;
 800537c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800537e:	6a3b      	ldr	r3, [r7, #32]
}
 8005380:	4618      	mov	r0, r3
 8005382:	3728      	adds	r7, #40	; 0x28
 8005384:	46bd      	mov	sp, r7
 8005386:	bc90      	pop	{r4, r7}
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	08006c70 	.word	0x08006c70
 8005390:	40021000 	.word	0x40021000
 8005394:	007a1200 	.word	0x007a1200
 8005398:	003d0900 	.word	0x003d0900

0800539c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800539c:	b480      	push	{r7}
 800539e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053a0:	4b02      	ldr	r3, [pc, #8]	; (80053ac <HAL_RCC_GetHCLKFreq+0x10>)
 80053a2:	681b      	ldr	r3, [r3, #0]
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bc80      	pop	{r7}
 80053aa:	4770      	bx	lr
 80053ac:	20000000 	.word	0x20000000

080053b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80053b4:	f7ff fff2 	bl	800539c <HAL_RCC_GetHCLKFreq>
 80053b8:	4602      	mov	r2, r0
 80053ba:	4b05      	ldr	r3, [pc, #20]	; (80053d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	0a1b      	lsrs	r3, r3, #8
 80053c0:	f003 0307 	and.w	r3, r3, #7
 80053c4:	4903      	ldr	r1, [pc, #12]	; (80053d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053c6:	5ccb      	ldrb	r3, [r1, r3]
 80053c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	40021000 	.word	0x40021000
 80053d4:	08006c90 	.word	0x08006c90

080053d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80053e0:	4b0a      	ldr	r3, [pc, #40]	; (800540c <RCC_Delay+0x34>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a0a      	ldr	r2, [pc, #40]	; (8005410 <RCC_Delay+0x38>)
 80053e6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ea:	0a5b      	lsrs	r3, r3, #9
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	fb02 f303 	mul.w	r3, r2, r3
 80053f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80053f4:	bf00      	nop
  }
  while (Delay --);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	1e5a      	subs	r2, r3, #1
 80053fa:	60fa      	str	r2, [r7, #12]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1f9      	bne.n	80053f4 <RCC_Delay+0x1c>
}
 8005400:	bf00      	nop
 8005402:	bf00      	nop
 8005404:	3714      	adds	r7, #20
 8005406:	46bd      	mov	sp, r7
 8005408:	bc80      	pop	{r7}
 800540a:	4770      	bx	lr
 800540c:	20000000 	.word	0x20000000
 8005410:	10624dd3 	.word	0x10624dd3

08005414 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b01      	cmp	r3, #1
 8005426:	d001      	beq.n	800542c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e03a      	b.n	80054a2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2202      	movs	r2, #2
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68da      	ldr	r2, [r3, #12]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f042 0201 	orr.w	r2, r2, #1
 8005442:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a18      	ldr	r2, [pc, #96]	; (80054ac <HAL_TIM_Base_Start_IT+0x98>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d00e      	beq.n	800546c <HAL_TIM_Base_Start_IT+0x58>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005456:	d009      	beq.n	800546c <HAL_TIM_Base_Start_IT+0x58>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a14      	ldr	r2, [pc, #80]	; (80054b0 <HAL_TIM_Base_Start_IT+0x9c>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d004      	beq.n	800546c <HAL_TIM_Base_Start_IT+0x58>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a13      	ldr	r2, [pc, #76]	; (80054b4 <HAL_TIM_Base_Start_IT+0xa0>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d111      	bne.n	8005490 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f003 0307 	and.w	r3, r3, #7
 8005476:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2b06      	cmp	r3, #6
 800547c:	d010      	beq.n	80054a0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f042 0201 	orr.w	r2, r2, #1
 800548c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800548e:	e007      	b.n	80054a0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f042 0201 	orr.w	r2, r2, #1
 800549e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3714      	adds	r7, #20
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bc80      	pop	{r7}
 80054aa:	4770      	bx	lr
 80054ac:	40012c00 	.word	0x40012c00
 80054b0:	40000400 	.word	0x40000400
 80054b4:	40000800 	.word	0x40000800

080054b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e041      	b.n	800554e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d106      	bne.n	80054e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f7fc f890 	bl	8001604 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2202      	movs	r2, #2
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	3304      	adds	r3, #4
 80054f4:	4619      	mov	r1, r3
 80054f6:	4610      	mov	r0, r2
 80054f8:	f000 fbea 	bl	8005cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3708      	adds	r7, #8
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
	...

08005558 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d109      	bne.n	800557c <HAL_TIM_PWM_Start+0x24>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b01      	cmp	r3, #1
 8005572:	bf14      	ite	ne
 8005574:	2301      	movne	r3, #1
 8005576:	2300      	moveq	r3, #0
 8005578:	b2db      	uxtb	r3, r3
 800557a:	e022      	b.n	80055c2 <HAL_TIM_PWM_Start+0x6a>
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	2b04      	cmp	r3, #4
 8005580:	d109      	bne.n	8005596 <HAL_TIM_PWM_Start+0x3e>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b01      	cmp	r3, #1
 800558c:	bf14      	ite	ne
 800558e:	2301      	movne	r3, #1
 8005590:	2300      	moveq	r3, #0
 8005592:	b2db      	uxtb	r3, r3
 8005594:	e015      	b.n	80055c2 <HAL_TIM_PWM_Start+0x6a>
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2b08      	cmp	r3, #8
 800559a:	d109      	bne.n	80055b0 <HAL_TIM_PWM_Start+0x58>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	bf14      	ite	ne
 80055a8:	2301      	movne	r3, #1
 80055aa:	2300      	moveq	r3, #0
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	e008      	b.n	80055c2 <HAL_TIM_PWM_Start+0x6a>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	bf14      	ite	ne
 80055bc:	2301      	movne	r3, #1
 80055be:	2300      	moveq	r3, #0
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e05e      	b.n	8005688 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d104      	bne.n	80055da <HAL_TIM_PWM_Start+0x82>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2202      	movs	r2, #2
 80055d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055d8:	e013      	b.n	8005602 <HAL_TIM_PWM_Start+0xaa>
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	2b04      	cmp	r3, #4
 80055de:	d104      	bne.n	80055ea <HAL_TIM_PWM_Start+0x92>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2202      	movs	r2, #2
 80055e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055e8:	e00b      	b.n	8005602 <HAL_TIM_PWM_Start+0xaa>
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	2b08      	cmp	r3, #8
 80055ee:	d104      	bne.n	80055fa <HAL_TIM_PWM_Start+0xa2>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2202      	movs	r2, #2
 80055f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055f8:	e003      	b.n	8005602 <HAL_TIM_PWM_Start+0xaa>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2202      	movs	r2, #2
 80055fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2201      	movs	r2, #1
 8005608:	6839      	ldr	r1, [r7, #0]
 800560a:	4618      	mov	r0, r3
 800560c:	f000 fd4a 	bl	80060a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a1e      	ldr	r2, [pc, #120]	; (8005690 <HAL_TIM_PWM_Start+0x138>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d107      	bne.n	800562a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005628:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a18      	ldr	r2, [pc, #96]	; (8005690 <HAL_TIM_PWM_Start+0x138>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d00e      	beq.n	8005652 <HAL_TIM_PWM_Start+0xfa>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800563c:	d009      	beq.n	8005652 <HAL_TIM_PWM_Start+0xfa>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a14      	ldr	r2, [pc, #80]	; (8005694 <HAL_TIM_PWM_Start+0x13c>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d004      	beq.n	8005652 <HAL_TIM_PWM_Start+0xfa>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a12      	ldr	r2, [pc, #72]	; (8005698 <HAL_TIM_PWM_Start+0x140>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d111      	bne.n	8005676 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f003 0307 	and.w	r3, r3, #7
 800565c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2b06      	cmp	r3, #6
 8005662:	d010      	beq.n	8005686 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f042 0201 	orr.w	r2, r2, #1
 8005672:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005674:	e007      	b.n	8005686 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f042 0201 	orr.w	r2, r2, #1
 8005684:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3710      	adds	r7, #16
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	40012c00 	.word	0x40012c00
 8005694:	40000400 	.word	0x40000400
 8005698:	40000800 	.word	0x40000800

0800569c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d101      	bne.n	80056b0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e093      	b.n	80057d8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d106      	bne.n	80056ca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f7fb ff33 	bl	8001530 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2202      	movs	r2, #2
 80056ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	6812      	ldr	r2, [r2, #0]
 80056dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056e0:	f023 0307 	bic.w	r3, r3, #7
 80056e4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	3304      	adds	r3, #4
 80056ee:	4619      	mov	r1, r3
 80056f0:	4610      	mov	r0, r2
 80056f2:	f000 faed 	bl	8005cd0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6a1b      	ldr	r3, [r3, #32]
 800570c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	4313      	orrs	r3, r2
 8005716:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800571e:	f023 0303 	bic.w	r3, r3, #3
 8005722:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	689a      	ldr	r2, [r3, #8]
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	021b      	lsls	r3, r3, #8
 800572e:	4313      	orrs	r3, r2
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	4313      	orrs	r3, r2
 8005734:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800573c:	f023 030c 	bic.w	r3, r3, #12
 8005740:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005748:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800574c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	68da      	ldr	r2, [r3, #12]
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	69db      	ldr	r3, [r3, #28]
 8005756:	021b      	lsls	r3, r3, #8
 8005758:	4313      	orrs	r3, r2
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	4313      	orrs	r3, r2
 800575e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	011a      	lsls	r2, r3, #4
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	031b      	lsls	r3, r3, #12
 800576c:	4313      	orrs	r3, r2
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	4313      	orrs	r3, r2
 8005772:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800577a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	695b      	ldr	r3, [r3, #20]
 8005784:	011b      	lsls	r3, r3, #4
 8005786:	4313      	orrs	r3, r2
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	4313      	orrs	r3, r2
 800578c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3718      	adds	r7, #24
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057f0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057f8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005800:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005808:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d110      	bne.n	8005832 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005810:	7bfb      	ldrb	r3, [r7, #15]
 8005812:	2b01      	cmp	r3, #1
 8005814:	d102      	bne.n	800581c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005816:	7b7b      	ldrb	r3, [r7, #13]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d001      	beq.n	8005820 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e069      	b.n	80058f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2202      	movs	r2, #2
 8005824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2202      	movs	r2, #2
 800582c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005830:	e031      	b.n	8005896 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	2b04      	cmp	r3, #4
 8005836:	d110      	bne.n	800585a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005838:	7bbb      	ldrb	r3, [r7, #14]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d102      	bne.n	8005844 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800583e:	7b3b      	ldrb	r3, [r7, #12]
 8005840:	2b01      	cmp	r3, #1
 8005842:	d001      	beq.n	8005848 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e055      	b.n	80058f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2202      	movs	r2, #2
 800584c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2202      	movs	r2, #2
 8005854:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005858:	e01d      	b.n	8005896 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800585a:	7bfb      	ldrb	r3, [r7, #15]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d108      	bne.n	8005872 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005860:	7bbb      	ldrb	r3, [r7, #14]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d105      	bne.n	8005872 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005866:	7b7b      	ldrb	r3, [r7, #13]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d102      	bne.n	8005872 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800586c:	7b3b      	ldrb	r3, [r7, #12]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d001      	beq.n	8005876 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e03e      	b.n	80058f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2202      	movs	r2, #2
 800587a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2202      	movs	r2, #2
 8005882:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2202      	movs	r2, #2
 800588a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2202      	movs	r2, #2
 8005892:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d003      	beq.n	80058a4 <HAL_TIM_Encoder_Start+0xc4>
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	2b04      	cmp	r3, #4
 80058a0:	d008      	beq.n	80058b4 <HAL_TIM_Encoder_Start+0xd4>
 80058a2:	e00f      	b.n	80058c4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2201      	movs	r2, #1
 80058aa:	2100      	movs	r1, #0
 80058ac:	4618      	mov	r0, r3
 80058ae:	f000 fbf9 	bl	80060a4 <TIM_CCxChannelCmd>
      break;
 80058b2:	e016      	b.n	80058e2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2201      	movs	r2, #1
 80058ba:	2104      	movs	r1, #4
 80058bc:	4618      	mov	r0, r3
 80058be:	f000 fbf1 	bl	80060a4 <TIM_CCxChannelCmd>
      break;
 80058c2:	e00e      	b.n	80058e2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2201      	movs	r2, #1
 80058ca:	2100      	movs	r1, #0
 80058cc:	4618      	mov	r0, r3
 80058ce:	f000 fbe9 	bl	80060a4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2201      	movs	r2, #1
 80058d8:	2104      	movs	r1, #4
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 fbe2 	bl	80060a4 <TIM_CCxChannelCmd>
      break;
 80058e0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f042 0201 	orr.w	r2, r2, #1
 80058f0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b02      	cmp	r3, #2
 8005910:	d122      	bne.n	8005958 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b02      	cmp	r3, #2
 800591e:	d11b      	bne.n	8005958 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f06f 0202 	mvn.w	r2, #2
 8005928:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2201      	movs	r2, #1
 800592e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	f003 0303 	and.w	r3, r3, #3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 f9ab 	bl	8005c9a <HAL_TIM_IC_CaptureCallback>
 8005944:	e005      	b.n	8005952 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f99e 	bl	8005c88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 f9ad 	bl	8005cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	f003 0304 	and.w	r3, r3, #4
 8005962:	2b04      	cmp	r3, #4
 8005964:	d122      	bne.n	80059ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	f003 0304 	and.w	r3, r3, #4
 8005970:	2b04      	cmp	r3, #4
 8005972:	d11b      	bne.n	80059ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f06f 0204 	mvn.w	r2, #4
 800597c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2202      	movs	r2, #2
 8005982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f981 	bl	8005c9a <HAL_TIM_IC_CaptureCallback>
 8005998:	e005      	b.n	80059a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 f974 	bl	8005c88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 f983 	bl	8005cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	f003 0308 	and.w	r3, r3, #8
 80059b6:	2b08      	cmp	r3, #8
 80059b8:	d122      	bne.n	8005a00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	f003 0308 	and.w	r3, r3, #8
 80059c4:	2b08      	cmp	r3, #8
 80059c6:	d11b      	bne.n	8005a00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f06f 0208 	mvn.w	r2, #8
 80059d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2204      	movs	r2, #4
 80059d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	f003 0303 	and.w	r3, r3, #3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f957 	bl	8005c9a <HAL_TIM_IC_CaptureCallback>
 80059ec:	e005      	b.n	80059fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f94a 	bl	8005c88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 f959 	bl	8005cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	f003 0310 	and.w	r3, r3, #16
 8005a0a:	2b10      	cmp	r3, #16
 8005a0c:	d122      	bne.n	8005a54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	f003 0310 	and.w	r3, r3, #16
 8005a18:	2b10      	cmp	r3, #16
 8005a1a:	d11b      	bne.n	8005a54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f06f 0210 	mvn.w	r2, #16
 8005a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2208      	movs	r2, #8
 8005a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	69db      	ldr	r3, [r3, #28]
 8005a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f92d 	bl	8005c9a <HAL_TIM_IC_CaptureCallback>
 8005a40:	e005      	b.n	8005a4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f920 	bl	8005c88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 f92f 	bl	8005cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	f003 0301 	and.w	r3, r3, #1
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d10e      	bne.n	8005a80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d107      	bne.n	8005a80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f06f 0201 	mvn.w	r2, #1
 8005a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f7fc fbd0 	bl	8002220 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a8a:	2b80      	cmp	r3, #128	; 0x80
 8005a8c:	d10e      	bne.n	8005aac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a98:	2b80      	cmp	r3, #128	; 0x80
 8005a9a:	d107      	bne.n	8005aac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 fb87 	bl	80061ba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab6:	2b40      	cmp	r3, #64	; 0x40
 8005ab8:	d10e      	bne.n	8005ad8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac4:	2b40      	cmp	r3, #64	; 0x40
 8005ac6:	d107      	bne.n	8005ad8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f8f3 	bl	8005cbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	f003 0320 	and.w	r3, r3, #32
 8005ae2:	2b20      	cmp	r3, #32
 8005ae4:	d10e      	bne.n	8005b04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	f003 0320 	and.w	r3, r3, #32
 8005af0:	2b20      	cmp	r3, #32
 8005af2:	d107      	bne.n	8005b04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f06f 0220 	mvn.w	r2, #32
 8005afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 fb52 	bl	80061a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b04:	bf00      	nop
 8005b06:	3708      	adds	r7, #8
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d101      	bne.n	8005b26 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005b22:	2302      	movs	r3, #2
 8005b24:	e0ac      	b.n	8005c80 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2b0c      	cmp	r3, #12
 8005b32:	f200 809f 	bhi.w	8005c74 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005b36:	a201      	add	r2, pc, #4	; (adr r2, 8005b3c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b3c:	08005b71 	.word	0x08005b71
 8005b40:	08005c75 	.word	0x08005c75
 8005b44:	08005c75 	.word	0x08005c75
 8005b48:	08005c75 	.word	0x08005c75
 8005b4c:	08005bb1 	.word	0x08005bb1
 8005b50:	08005c75 	.word	0x08005c75
 8005b54:	08005c75 	.word	0x08005c75
 8005b58:	08005c75 	.word	0x08005c75
 8005b5c:	08005bf3 	.word	0x08005bf3
 8005b60:	08005c75 	.word	0x08005c75
 8005b64:	08005c75 	.word	0x08005c75
 8005b68:	08005c75 	.word	0x08005c75
 8005b6c:	08005c33 	.word	0x08005c33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68b9      	ldr	r1, [r7, #8]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 f90c 	bl	8005d94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	699a      	ldr	r2, [r3, #24]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f042 0208 	orr.w	r2, r2, #8
 8005b8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	699a      	ldr	r2, [r3, #24]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f022 0204 	bic.w	r2, r2, #4
 8005b9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	6999      	ldr	r1, [r3, #24]
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	691a      	ldr	r2, [r3, #16]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	619a      	str	r2, [r3, #24]
      break;
 8005bae:	e062      	b.n	8005c76 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68b9      	ldr	r1, [r7, #8]
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 f952 	bl	8005e60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	699a      	ldr	r2, [r3, #24]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	699a      	ldr	r2, [r3, #24]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6999      	ldr	r1, [r3, #24]
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	021a      	lsls	r2, r3, #8
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	430a      	orrs	r2, r1
 8005bee:	619a      	str	r2, [r3, #24]
      break;
 8005bf0:	e041      	b.n	8005c76 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68b9      	ldr	r1, [r7, #8]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f000 f99b 	bl	8005f34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	69da      	ldr	r2, [r3, #28]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f042 0208 	orr.w	r2, r2, #8
 8005c0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	69da      	ldr	r2, [r3, #28]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f022 0204 	bic.w	r2, r2, #4
 8005c1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	69d9      	ldr	r1, [r3, #28]
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	691a      	ldr	r2, [r3, #16]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	61da      	str	r2, [r3, #28]
      break;
 8005c30:	e021      	b.n	8005c76 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68b9      	ldr	r1, [r7, #8]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f000 f9e5 	bl	8006008 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	69da      	ldr	r2, [r3, #28]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	69da      	ldr	r2, [r3, #28]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	69d9      	ldr	r1, [r3, #28]
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	021a      	lsls	r2, r3, #8
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	61da      	str	r2, [r3, #28]
      break;
 8005c72:	e000      	b.n	8005c76 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005c74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bc80      	pop	{r7}
 8005c98:	4770      	bx	lr

08005c9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b083      	sub	sp, #12
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ca2:	bf00      	nop
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bc80      	pop	{r7}
 8005caa:	4770      	bx	lr

08005cac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cb4:	bf00      	nop
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bc80      	pop	{r7}
 8005cbc:	4770      	bx	lr

08005cbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b083      	sub	sp, #12
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cc6:	bf00      	nop
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bc80      	pop	{r7}
 8005cce:	4770      	bx	lr

08005cd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a29      	ldr	r2, [pc, #164]	; (8005d88 <TIM_Base_SetConfig+0xb8>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d00b      	beq.n	8005d00 <TIM_Base_SetConfig+0x30>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cee:	d007      	beq.n	8005d00 <TIM_Base_SetConfig+0x30>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a26      	ldr	r2, [pc, #152]	; (8005d8c <TIM_Base_SetConfig+0xbc>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d003      	beq.n	8005d00 <TIM_Base_SetConfig+0x30>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a25      	ldr	r2, [pc, #148]	; (8005d90 <TIM_Base_SetConfig+0xc0>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d108      	bne.n	8005d12 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a1c      	ldr	r2, [pc, #112]	; (8005d88 <TIM_Base_SetConfig+0xb8>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d00b      	beq.n	8005d32 <TIM_Base_SetConfig+0x62>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d20:	d007      	beq.n	8005d32 <TIM_Base_SetConfig+0x62>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a19      	ldr	r2, [pc, #100]	; (8005d8c <TIM_Base_SetConfig+0xbc>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d003      	beq.n	8005d32 <TIM_Base_SetConfig+0x62>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a18      	ldr	r2, [pc, #96]	; (8005d90 <TIM_Base_SetConfig+0xc0>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d108      	bne.n	8005d44 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	689a      	ldr	r2, [r3, #8]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a07      	ldr	r2, [pc, #28]	; (8005d88 <TIM_Base_SetConfig+0xb8>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d103      	bne.n	8005d78 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	691a      	ldr	r2, [r3, #16]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	615a      	str	r2, [r3, #20]
}
 8005d7e:	bf00      	nop
 8005d80:	3714      	adds	r7, #20
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bc80      	pop	{r7}
 8005d86:	4770      	bx	lr
 8005d88:	40012c00 	.word	0x40012c00
 8005d8c:	40000400 	.word	0x40000400
 8005d90:	40000800 	.word	0x40000800

08005d94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b087      	sub	sp, #28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	f023 0201 	bic.w	r2, r3, #1
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f023 0303 	bic.w	r3, r3, #3
 8005dca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	f023 0302 	bic.w	r3, r3, #2
 8005ddc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	697a      	ldr	r2, [r7, #20]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a1c      	ldr	r2, [pc, #112]	; (8005e5c <TIM_OC1_SetConfig+0xc8>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d10c      	bne.n	8005e0a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	f023 0308 	bic.w	r3, r3, #8
 8005df6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	f023 0304 	bic.w	r3, r3, #4
 8005e08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a13      	ldr	r2, [pc, #76]	; (8005e5c <TIM_OC1_SetConfig+0xc8>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d111      	bne.n	8005e36 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	693a      	ldr	r2, [r7, #16]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	685a      	ldr	r2, [r3, #4]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	621a      	str	r2, [r3, #32]
}
 8005e50:	bf00      	nop
 8005e52:	371c      	adds	r7, #28
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bc80      	pop	{r7}
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	40012c00 	.word	0x40012c00

08005e60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b087      	sub	sp, #28
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	f023 0210 	bic.w	r2, r3, #16
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a1b      	ldr	r3, [r3, #32]
 8005e7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	021b      	lsls	r3, r3, #8
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f023 0320 	bic.w	r3, r3, #32
 8005eaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	011b      	lsls	r3, r3, #4
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a1d      	ldr	r2, [pc, #116]	; (8005f30 <TIM_OC2_SetConfig+0xd0>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d10d      	bne.n	8005edc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ec6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	011b      	lsls	r3, r3, #4
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a14      	ldr	r2, [pc, #80]	; (8005f30 <TIM_OC2_SetConfig+0xd0>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d113      	bne.n	8005f0c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005eea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	699b      	ldr	r3, [r3, #24]
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	621a      	str	r2, [r3, #32]
}
 8005f26:	bf00      	nop
 8005f28:	371c      	adds	r7, #28
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bc80      	pop	{r7}
 8005f2e:	4770      	bx	lr
 8005f30:	40012c00 	.word	0x40012c00

08005f34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b087      	sub	sp, #28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	69db      	ldr	r3, [r3, #28]
 8005f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f023 0303 	bic.w	r3, r3, #3
 8005f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	021b      	lsls	r3, r3, #8
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a1d      	ldr	r2, [pc, #116]	; (8006004 <TIM_OC3_SetConfig+0xd0>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d10d      	bne.n	8005fae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	021b      	lsls	r3, r3, #8
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a14      	ldr	r2, [pc, #80]	; (8006004 <TIM_OC3_SetConfig+0xd0>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d113      	bne.n	8005fde <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	011b      	lsls	r3, r3, #4
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	011b      	lsls	r3, r3, #4
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	621a      	str	r2, [r3, #32]
}
 8005ff8:	bf00      	nop
 8005ffa:	371c      	adds	r7, #28
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bc80      	pop	{r7}
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	40012c00 	.word	0x40012c00

08006008 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006008:	b480      	push	{r7}
 800600a:	b087      	sub	sp, #28
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a1b      	ldr	r3, [r3, #32]
 8006022:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	69db      	ldr	r3, [r3, #28]
 800602e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800603e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	021b      	lsls	r3, r3, #8
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	4313      	orrs	r3, r2
 800604a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006052:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	031b      	lsls	r3, r3, #12
 800605a:	693a      	ldr	r2, [r7, #16]
 800605c:	4313      	orrs	r3, r2
 800605e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a0f      	ldr	r2, [pc, #60]	; (80060a0 <TIM_OC4_SetConfig+0x98>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d109      	bne.n	800607c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800606e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	695b      	ldr	r3, [r3, #20]
 8006074:	019b      	lsls	r3, r3, #6
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	4313      	orrs	r3, r2
 800607a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	621a      	str	r2, [r3, #32]
}
 8006096:	bf00      	nop
 8006098:	371c      	adds	r7, #28
 800609a:	46bd      	mov	sp, r7
 800609c:	bc80      	pop	{r7}
 800609e:	4770      	bx	lr
 80060a0:	40012c00 	.word	0x40012c00

080060a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b087      	sub	sp, #28
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	f003 031f 	and.w	r3, r3, #31
 80060b6:	2201      	movs	r2, #1
 80060b8:	fa02 f303 	lsl.w	r3, r2, r3
 80060bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6a1a      	ldr	r2, [r3, #32]
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	43db      	mvns	r3, r3
 80060c6:	401a      	ands	r2, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6a1a      	ldr	r2, [r3, #32]
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	f003 031f 	and.w	r3, r3, #31
 80060d6:	6879      	ldr	r1, [r7, #4]
 80060d8:	fa01 f303 	lsl.w	r3, r1, r3
 80060dc:	431a      	orrs	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	621a      	str	r2, [r3, #32]
}
 80060e2:	bf00      	nop
 80060e4:	371c      	adds	r7, #28
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bc80      	pop	{r7}
 80060ea:	4770      	bx	lr

080060ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d101      	bne.n	8006104 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006100:	2302      	movs	r3, #2
 8006102:	e046      	b.n	8006192 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2202      	movs	r2, #2
 8006110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800612a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	4313      	orrs	r3, r2
 8006134:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a16      	ldr	r2, [pc, #88]	; (800619c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d00e      	beq.n	8006166 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006150:	d009      	beq.n	8006166 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a12      	ldr	r2, [pc, #72]	; (80061a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d004      	beq.n	8006166 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a10      	ldr	r2, [pc, #64]	; (80061a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d10c      	bne.n	8006180 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800616c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	68ba      	ldr	r2, [r7, #8]
 8006174:	4313      	orrs	r3, r2
 8006176:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68ba      	ldr	r2, [r7, #8]
 800617e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3714      	adds	r7, #20
 8006196:	46bd      	mov	sp, r7
 8006198:	bc80      	pop	{r7}
 800619a:	4770      	bx	lr
 800619c:	40012c00 	.word	0x40012c00
 80061a0:	40000400 	.word	0x40000400
 80061a4:	40000800 	.word	0x40000800

080061a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bc80      	pop	{r7}
 80061b8:	4770      	bx	lr

080061ba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b083      	sub	sp, #12
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061c2:	bf00      	nop
 80061c4:	370c      	adds	r7, #12
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bc80      	pop	{r7}
 80061ca:	4770      	bx	lr

080061cc <__errno>:
 80061cc:	4b01      	ldr	r3, [pc, #4]	; (80061d4 <__errno+0x8>)
 80061ce:	6818      	ldr	r0, [r3, #0]
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	20000024 	.word	0x20000024

080061d8 <__libc_init_array>:
 80061d8:	b570      	push	{r4, r5, r6, lr}
 80061da:	2600      	movs	r6, #0
 80061dc:	4d0c      	ldr	r5, [pc, #48]	; (8006210 <__libc_init_array+0x38>)
 80061de:	4c0d      	ldr	r4, [pc, #52]	; (8006214 <__libc_init_array+0x3c>)
 80061e0:	1b64      	subs	r4, r4, r5
 80061e2:	10a4      	asrs	r4, r4, #2
 80061e4:	42a6      	cmp	r6, r4
 80061e6:	d109      	bne.n	80061fc <__libc_init_array+0x24>
 80061e8:	f000 fc9c 	bl	8006b24 <_init>
 80061ec:	2600      	movs	r6, #0
 80061ee:	4d0a      	ldr	r5, [pc, #40]	; (8006218 <__libc_init_array+0x40>)
 80061f0:	4c0a      	ldr	r4, [pc, #40]	; (800621c <__libc_init_array+0x44>)
 80061f2:	1b64      	subs	r4, r4, r5
 80061f4:	10a4      	asrs	r4, r4, #2
 80061f6:	42a6      	cmp	r6, r4
 80061f8:	d105      	bne.n	8006206 <__libc_init_array+0x2e>
 80061fa:	bd70      	pop	{r4, r5, r6, pc}
 80061fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006200:	4798      	blx	r3
 8006202:	3601      	adds	r6, #1
 8006204:	e7ee      	b.n	80061e4 <__libc_init_array+0xc>
 8006206:	f855 3b04 	ldr.w	r3, [r5], #4
 800620a:	4798      	blx	r3
 800620c:	3601      	adds	r6, #1
 800620e:	e7f2      	b.n	80061f6 <__libc_init_array+0x1e>
 8006210:	08006cd0 	.word	0x08006cd0
 8006214:	08006cd0 	.word	0x08006cd0
 8006218:	08006cd0 	.word	0x08006cd0
 800621c:	08006cd4 	.word	0x08006cd4

08006220 <memset>:
 8006220:	4603      	mov	r3, r0
 8006222:	4402      	add	r2, r0
 8006224:	4293      	cmp	r3, r2
 8006226:	d100      	bne.n	800622a <memset+0xa>
 8006228:	4770      	bx	lr
 800622a:	f803 1b01 	strb.w	r1, [r3], #1
 800622e:	e7f9      	b.n	8006224 <memset+0x4>

08006230 <siprintf>:
 8006230:	b40e      	push	{r1, r2, r3}
 8006232:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006236:	b500      	push	{lr}
 8006238:	b09c      	sub	sp, #112	; 0x70
 800623a:	ab1d      	add	r3, sp, #116	; 0x74
 800623c:	9002      	str	r0, [sp, #8]
 800623e:	9006      	str	r0, [sp, #24]
 8006240:	9107      	str	r1, [sp, #28]
 8006242:	9104      	str	r1, [sp, #16]
 8006244:	4808      	ldr	r0, [pc, #32]	; (8006268 <siprintf+0x38>)
 8006246:	4909      	ldr	r1, [pc, #36]	; (800626c <siprintf+0x3c>)
 8006248:	f853 2b04 	ldr.w	r2, [r3], #4
 800624c:	9105      	str	r1, [sp, #20]
 800624e:	6800      	ldr	r0, [r0, #0]
 8006250:	a902      	add	r1, sp, #8
 8006252:	9301      	str	r3, [sp, #4]
 8006254:	f000 f868 	bl	8006328 <_svfiprintf_r>
 8006258:	2200      	movs	r2, #0
 800625a:	9b02      	ldr	r3, [sp, #8]
 800625c:	701a      	strb	r2, [r3, #0]
 800625e:	b01c      	add	sp, #112	; 0x70
 8006260:	f85d eb04 	ldr.w	lr, [sp], #4
 8006264:	b003      	add	sp, #12
 8006266:	4770      	bx	lr
 8006268:	20000024 	.word	0x20000024
 800626c:	ffff0208 	.word	0xffff0208

08006270 <__ssputs_r>:
 8006270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006274:	688e      	ldr	r6, [r1, #8]
 8006276:	4682      	mov	sl, r0
 8006278:	429e      	cmp	r6, r3
 800627a:	460c      	mov	r4, r1
 800627c:	4690      	mov	r8, r2
 800627e:	461f      	mov	r7, r3
 8006280:	d838      	bhi.n	80062f4 <__ssputs_r+0x84>
 8006282:	898a      	ldrh	r2, [r1, #12]
 8006284:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006288:	d032      	beq.n	80062f0 <__ssputs_r+0x80>
 800628a:	6825      	ldr	r5, [r4, #0]
 800628c:	6909      	ldr	r1, [r1, #16]
 800628e:	3301      	adds	r3, #1
 8006290:	eba5 0901 	sub.w	r9, r5, r1
 8006294:	6965      	ldr	r5, [r4, #20]
 8006296:	444b      	add	r3, r9
 8006298:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800629c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80062a0:	106d      	asrs	r5, r5, #1
 80062a2:	429d      	cmp	r5, r3
 80062a4:	bf38      	it	cc
 80062a6:	461d      	movcc	r5, r3
 80062a8:	0553      	lsls	r3, r2, #21
 80062aa:	d531      	bpl.n	8006310 <__ssputs_r+0xa0>
 80062ac:	4629      	mov	r1, r5
 80062ae:	f000 fb6f 	bl	8006990 <_malloc_r>
 80062b2:	4606      	mov	r6, r0
 80062b4:	b950      	cbnz	r0, 80062cc <__ssputs_r+0x5c>
 80062b6:	230c      	movs	r3, #12
 80062b8:	f04f 30ff 	mov.w	r0, #4294967295
 80062bc:	f8ca 3000 	str.w	r3, [sl]
 80062c0:	89a3      	ldrh	r3, [r4, #12]
 80062c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062c6:	81a3      	strh	r3, [r4, #12]
 80062c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062cc:	464a      	mov	r2, r9
 80062ce:	6921      	ldr	r1, [r4, #16]
 80062d0:	f000 face 	bl	8006870 <memcpy>
 80062d4:	89a3      	ldrh	r3, [r4, #12]
 80062d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80062da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062de:	81a3      	strh	r3, [r4, #12]
 80062e0:	6126      	str	r6, [r4, #16]
 80062e2:	444e      	add	r6, r9
 80062e4:	6026      	str	r6, [r4, #0]
 80062e6:	463e      	mov	r6, r7
 80062e8:	6165      	str	r5, [r4, #20]
 80062ea:	eba5 0509 	sub.w	r5, r5, r9
 80062ee:	60a5      	str	r5, [r4, #8]
 80062f0:	42be      	cmp	r6, r7
 80062f2:	d900      	bls.n	80062f6 <__ssputs_r+0x86>
 80062f4:	463e      	mov	r6, r7
 80062f6:	4632      	mov	r2, r6
 80062f8:	4641      	mov	r1, r8
 80062fa:	6820      	ldr	r0, [r4, #0]
 80062fc:	f000 fac6 	bl	800688c <memmove>
 8006300:	68a3      	ldr	r3, [r4, #8]
 8006302:	2000      	movs	r0, #0
 8006304:	1b9b      	subs	r3, r3, r6
 8006306:	60a3      	str	r3, [r4, #8]
 8006308:	6823      	ldr	r3, [r4, #0]
 800630a:	4433      	add	r3, r6
 800630c:	6023      	str	r3, [r4, #0]
 800630e:	e7db      	b.n	80062c8 <__ssputs_r+0x58>
 8006310:	462a      	mov	r2, r5
 8006312:	f000 fbb1 	bl	8006a78 <_realloc_r>
 8006316:	4606      	mov	r6, r0
 8006318:	2800      	cmp	r0, #0
 800631a:	d1e1      	bne.n	80062e0 <__ssputs_r+0x70>
 800631c:	4650      	mov	r0, sl
 800631e:	6921      	ldr	r1, [r4, #16]
 8006320:	f000 face 	bl	80068c0 <_free_r>
 8006324:	e7c7      	b.n	80062b6 <__ssputs_r+0x46>
	...

08006328 <_svfiprintf_r>:
 8006328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800632c:	4698      	mov	r8, r3
 800632e:	898b      	ldrh	r3, [r1, #12]
 8006330:	4607      	mov	r7, r0
 8006332:	061b      	lsls	r3, r3, #24
 8006334:	460d      	mov	r5, r1
 8006336:	4614      	mov	r4, r2
 8006338:	b09d      	sub	sp, #116	; 0x74
 800633a:	d50e      	bpl.n	800635a <_svfiprintf_r+0x32>
 800633c:	690b      	ldr	r3, [r1, #16]
 800633e:	b963      	cbnz	r3, 800635a <_svfiprintf_r+0x32>
 8006340:	2140      	movs	r1, #64	; 0x40
 8006342:	f000 fb25 	bl	8006990 <_malloc_r>
 8006346:	6028      	str	r0, [r5, #0]
 8006348:	6128      	str	r0, [r5, #16]
 800634a:	b920      	cbnz	r0, 8006356 <_svfiprintf_r+0x2e>
 800634c:	230c      	movs	r3, #12
 800634e:	603b      	str	r3, [r7, #0]
 8006350:	f04f 30ff 	mov.w	r0, #4294967295
 8006354:	e0d1      	b.n	80064fa <_svfiprintf_r+0x1d2>
 8006356:	2340      	movs	r3, #64	; 0x40
 8006358:	616b      	str	r3, [r5, #20]
 800635a:	2300      	movs	r3, #0
 800635c:	9309      	str	r3, [sp, #36]	; 0x24
 800635e:	2320      	movs	r3, #32
 8006360:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006364:	2330      	movs	r3, #48	; 0x30
 8006366:	f04f 0901 	mov.w	r9, #1
 800636a:	f8cd 800c 	str.w	r8, [sp, #12]
 800636e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006514 <_svfiprintf_r+0x1ec>
 8006372:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006376:	4623      	mov	r3, r4
 8006378:	469a      	mov	sl, r3
 800637a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800637e:	b10a      	cbz	r2, 8006384 <_svfiprintf_r+0x5c>
 8006380:	2a25      	cmp	r2, #37	; 0x25
 8006382:	d1f9      	bne.n	8006378 <_svfiprintf_r+0x50>
 8006384:	ebba 0b04 	subs.w	fp, sl, r4
 8006388:	d00b      	beq.n	80063a2 <_svfiprintf_r+0x7a>
 800638a:	465b      	mov	r3, fp
 800638c:	4622      	mov	r2, r4
 800638e:	4629      	mov	r1, r5
 8006390:	4638      	mov	r0, r7
 8006392:	f7ff ff6d 	bl	8006270 <__ssputs_r>
 8006396:	3001      	adds	r0, #1
 8006398:	f000 80aa 	beq.w	80064f0 <_svfiprintf_r+0x1c8>
 800639c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800639e:	445a      	add	r2, fp
 80063a0:	9209      	str	r2, [sp, #36]	; 0x24
 80063a2:	f89a 3000 	ldrb.w	r3, [sl]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	f000 80a2 	beq.w	80064f0 <_svfiprintf_r+0x1c8>
 80063ac:	2300      	movs	r3, #0
 80063ae:	f04f 32ff 	mov.w	r2, #4294967295
 80063b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063b6:	f10a 0a01 	add.w	sl, sl, #1
 80063ba:	9304      	str	r3, [sp, #16]
 80063bc:	9307      	str	r3, [sp, #28]
 80063be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063c2:	931a      	str	r3, [sp, #104]	; 0x68
 80063c4:	4654      	mov	r4, sl
 80063c6:	2205      	movs	r2, #5
 80063c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063cc:	4851      	ldr	r0, [pc, #324]	; (8006514 <_svfiprintf_r+0x1ec>)
 80063ce:	f000 fa41 	bl	8006854 <memchr>
 80063d2:	9a04      	ldr	r2, [sp, #16]
 80063d4:	b9d8      	cbnz	r0, 800640e <_svfiprintf_r+0xe6>
 80063d6:	06d0      	lsls	r0, r2, #27
 80063d8:	bf44      	itt	mi
 80063da:	2320      	movmi	r3, #32
 80063dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063e0:	0711      	lsls	r1, r2, #28
 80063e2:	bf44      	itt	mi
 80063e4:	232b      	movmi	r3, #43	; 0x2b
 80063e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063ea:	f89a 3000 	ldrb.w	r3, [sl]
 80063ee:	2b2a      	cmp	r3, #42	; 0x2a
 80063f0:	d015      	beq.n	800641e <_svfiprintf_r+0xf6>
 80063f2:	4654      	mov	r4, sl
 80063f4:	2000      	movs	r0, #0
 80063f6:	f04f 0c0a 	mov.w	ip, #10
 80063fa:	9a07      	ldr	r2, [sp, #28]
 80063fc:	4621      	mov	r1, r4
 80063fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006402:	3b30      	subs	r3, #48	; 0x30
 8006404:	2b09      	cmp	r3, #9
 8006406:	d94e      	bls.n	80064a6 <_svfiprintf_r+0x17e>
 8006408:	b1b0      	cbz	r0, 8006438 <_svfiprintf_r+0x110>
 800640a:	9207      	str	r2, [sp, #28]
 800640c:	e014      	b.n	8006438 <_svfiprintf_r+0x110>
 800640e:	eba0 0308 	sub.w	r3, r0, r8
 8006412:	fa09 f303 	lsl.w	r3, r9, r3
 8006416:	4313      	orrs	r3, r2
 8006418:	46a2      	mov	sl, r4
 800641a:	9304      	str	r3, [sp, #16]
 800641c:	e7d2      	b.n	80063c4 <_svfiprintf_r+0x9c>
 800641e:	9b03      	ldr	r3, [sp, #12]
 8006420:	1d19      	adds	r1, r3, #4
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	9103      	str	r1, [sp, #12]
 8006426:	2b00      	cmp	r3, #0
 8006428:	bfbb      	ittet	lt
 800642a:	425b      	neglt	r3, r3
 800642c:	f042 0202 	orrlt.w	r2, r2, #2
 8006430:	9307      	strge	r3, [sp, #28]
 8006432:	9307      	strlt	r3, [sp, #28]
 8006434:	bfb8      	it	lt
 8006436:	9204      	strlt	r2, [sp, #16]
 8006438:	7823      	ldrb	r3, [r4, #0]
 800643a:	2b2e      	cmp	r3, #46	; 0x2e
 800643c:	d10c      	bne.n	8006458 <_svfiprintf_r+0x130>
 800643e:	7863      	ldrb	r3, [r4, #1]
 8006440:	2b2a      	cmp	r3, #42	; 0x2a
 8006442:	d135      	bne.n	80064b0 <_svfiprintf_r+0x188>
 8006444:	9b03      	ldr	r3, [sp, #12]
 8006446:	3402      	adds	r4, #2
 8006448:	1d1a      	adds	r2, r3, #4
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	9203      	str	r2, [sp, #12]
 800644e:	2b00      	cmp	r3, #0
 8006450:	bfb8      	it	lt
 8006452:	f04f 33ff 	movlt.w	r3, #4294967295
 8006456:	9305      	str	r3, [sp, #20]
 8006458:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006518 <_svfiprintf_r+0x1f0>
 800645c:	2203      	movs	r2, #3
 800645e:	4650      	mov	r0, sl
 8006460:	7821      	ldrb	r1, [r4, #0]
 8006462:	f000 f9f7 	bl	8006854 <memchr>
 8006466:	b140      	cbz	r0, 800647a <_svfiprintf_r+0x152>
 8006468:	2340      	movs	r3, #64	; 0x40
 800646a:	eba0 000a 	sub.w	r0, r0, sl
 800646e:	fa03 f000 	lsl.w	r0, r3, r0
 8006472:	9b04      	ldr	r3, [sp, #16]
 8006474:	3401      	adds	r4, #1
 8006476:	4303      	orrs	r3, r0
 8006478:	9304      	str	r3, [sp, #16]
 800647a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800647e:	2206      	movs	r2, #6
 8006480:	4826      	ldr	r0, [pc, #152]	; (800651c <_svfiprintf_r+0x1f4>)
 8006482:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006486:	f000 f9e5 	bl	8006854 <memchr>
 800648a:	2800      	cmp	r0, #0
 800648c:	d038      	beq.n	8006500 <_svfiprintf_r+0x1d8>
 800648e:	4b24      	ldr	r3, [pc, #144]	; (8006520 <_svfiprintf_r+0x1f8>)
 8006490:	bb1b      	cbnz	r3, 80064da <_svfiprintf_r+0x1b2>
 8006492:	9b03      	ldr	r3, [sp, #12]
 8006494:	3307      	adds	r3, #7
 8006496:	f023 0307 	bic.w	r3, r3, #7
 800649a:	3308      	adds	r3, #8
 800649c:	9303      	str	r3, [sp, #12]
 800649e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064a0:	4433      	add	r3, r6
 80064a2:	9309      	str	r3, [sp, #36]	; 0x24
 80064a4:	e767      	b.n	8006376 <_svfiprintf_r+0x4e>
 80064a6:	460c      	mov	r4, r1
 80064a8:	2001      	movs	r0, #1
 80064aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80064ae:	e7a5      	b.n	80063fc <_svfiprintf_r+0xd4>
 80064b0:	2300      	movs	r3, #0
 80064b2:	f04f 0c0a 	mov.w	ip, #10
 80064b6:	4619      	mov	r1, r3
 80064b8:	3401      	adds	r4, #1
 80064ba:	9305      	str	r3, [sp, #20]
 80064bc:	4620      	mov	r0, r4
 80064be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064c2:	3a30      	subs	r2, #48	; 0x30
 80064c4:	2a09      	cmp	r2, #9
 80064c6:	d903      	bls.n	80064d0 <_svfiprintf_r+0x1a8>
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d0c5      	beq.n	8006458 <_svfiprintf_r+0x130>
 80064cc:	9105      	str	r1, [sp, #20]
 80064ce:	e7c3      	b.n	8006458 <_svfiprintf_r+0x130>
 80064d0:	4604      	mov	r4, r0
 80064d2:	2301      	movs	r3, #1
 80064d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80064d8:	e7f0      	b.n	80064bc <_svfiprintf_r+0x194>
 80064da:	ab03      	add	r3, sp, #12
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	462a      	mov	r2, r5
 80064e0:	4638      	mov	r0, r7
 80064e2:	4b10      	ldr	r3, [pc, #64]	; (8006524 <_svfiprintf_r+0x1fc>)
 80064e4:	a904      	add	r1, sp, #16
 80064e6:	f3af 8000 	nop.w
 80064ea:	1c42      	adds	r2, r0, #1
 80064ec:	4606      	mov	r6, r0
 80064ee:	d1d6      	bne.n	800649e <_svfiprintf_r+0x176>
 80064f0:	89ab      	ldrh	r3, [r5, #12]
 80064f2:	065b      	lsls	r3, r3, #25
 80064f4:	f53f af2c 	bmi.w	8006350 <_svfiprintf_r+0x28>
 80064f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064fa:	b01d      	add	sp, #116	; 0x74
 80064fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006500:	ab03      	add	r3, sp, #12
 8006502:	9300      	str	r3, [sp, #0]
 8006504:	462a      	mov	r2, r5
 8006506:	4638      	mov	r0, r7
 8006508:	4b06      	ldr	r3, [pc, #24]	; (8006524 <_svfiprintf_r+0x1fc>)
 800650a:	a904      	add	r1, sp, #16
 800650c:	f000 f87c 	bl	8006608 <_printf_i>
 8006510:	e7eb      	b.n	80064ea <_svfiprintf_r+0x1c2>
 8006512:	bf00      	nop
 8006514:	08006c9c 	.word	0x08006c9c
 8006518:	08006ca2 	.word	0x08006ca2
 800651c:	08006ca6 	.word	0x08006ca6
 8006520:	00000000 	.word	0x00000000
 8006524:	08006271 	.word	0x08006271

08006528 <_printf_common>:
 8006528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800652c:	4616      	mov	r6, r2
 800652e:	4699      	mov	r9, r3
 8006530:	688a      	ldr	r2, [r1, #8]
 8006532:	690b      	ldr	r3, [r1, #16]
 8006534:	4607      	mov	r7, r0
 8006536:	4293      	cmp	r3, r2
 8006538:	bfb8      	it	lt
 800653a:	4613      	movlt	r3, r2
 800653c:	6033      	str	r3, [r6, #0]
 800653e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006542:	460c      	mov	r4, r1
 8006544:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006548:	b10a      	cbz	r2, 800654e <_printf_common+0x26>
 800654a:	3301      	adds	r3, #1
 800654c:	6033      	str	r3, [r6, #0]
 800654e:	6823      	ldr	r3, [r4, #0]
 8006550:	0699      	lsls	r1, r3, #26
 8006552:	bf42      	ittt	mi
 8006554:	6833      	ldrmi	r3, [r6, #0]
 8006556:	3302      	addmi	r3, #2
 8006558:	6033      	strmi	r3, [r6, #0]
 800655a:	6825      	ldr	r5, [r4, #0]
 800655c:	f015 0506 	ands.w	r5, r5, #6
 8006560:	d106      	bne.n	8006570 <_printf_common+0x48>
 8006562:	f104 0a19 	add.w	sl, r4, #25
 8006566:	68e3      	ldr	r3, [r4, #12]
 8006568:	6832      	ldr	r2, [r6, #0]
 800656a:	1a9b      	subs	r3, r3, r2
 800656c:	42ab      	cmp	r3, r5
 800656e:	dc28      	bgt.n	80065c2 <_printf_common+0x9a>
 8006570:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006574:	1e13      	subs	r3, r2, #0
 8006576:	6822      	ldr	r2, [r4, #0]
 8006578:	bf18      	it	ne
 800657a:	2301      	movne	r3, #1
 800657c:	0692      	lsls	r2, r2, #26
 800657e:	d42d      	bmi.n	80065dc <_printf_common+0xb4>
 8006580:	4649      	mov	r1, r9
 8006582:	4638      	mov	r0, r7
 8006584:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006588:	47c0      	blx	r8
 800658a:	3001      	adds	r0, #1
 800658c:	d020      	beq.n	80065d0 <_printf_common+0xa8>
 800658e:	6823      	ldr	r3, [r4, #0]
 8006590:	68e5      	ldr	r5, [r4, #12]
 8006592:	f003 0306 	and.w	r3, r3, #6
 8006596:	2b04      	cmp	r3, #4
 8006598:	bf18      	it	ne
 800659a:	2500      	movne	r5, #0
 800659c:	6832      	ldr	r2, [r6, #0]
 800659e:	f04f 0600 	mov.w	r6, #0
 80065a2:	68a3      	ldr	r3, [r4, #8]
 80065a4:	bf08      	it	eq
 80065a6:	1aad      	subeq	r5, r5, r2
 80065a8:	6922      	ldr	r2, [r4, #16]
 80065aa:	bf08      	it	eq
 80065ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065b0:	4293      	cmp	r3, r2
 80065b2:	bfc4      	itt	gt
 80065b4:	1a9b      	subgt	r3, r3, r2
 80065b6:	18ed      	addgt	r5, r5, r3
 80065b8:	341a      	adds	r4, #26
 80065ba:	42b5      	cmp	r5, r6
 80065bc:	d11a      	bne.n	80065f4 <_printf_common+0xcc>
 80065be:	2000      	movs	r0, #0
 80065c0:	e008      	b.n	80065d4 <_printf_common+0xac>
 80065c2:	2301      	movs	r3, #1
 80065c4:	4652      	mov	r2, sl
 80065c6:	4649      	mov	r1, r9
 80065c8:	4638      	mov	r0, r7
 80065ca:	47c0      	blx	r8
 80065cc:	3001      	adds	r0, #1
 80065ce:	d103      	bne.n	80065d8 <_printf_common+0xb0>
 80065d0:	f04f 30ff 	mov.w	r0, #4294967295
 80065d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065d8:	3501      	adds	r5, #1
 80065da:	e7c4      	b.n	8006566 <_printf_common+0x3e>
 80065dc:	2030      	movs	r0, #48	; 0x30
 80065de:	18e1      	adds	r1, r4, r3
 80065e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065e4:	1c5a      	adds	r2, r3, #1
 80065e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065ea:	4422      	add	r2, r4
 80065ec:	3302      	adds	r3, #2
 80065ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065f2:	e7c5      	b.n	8006580 <_printf_common+0x58>
 80065f4:	2301      	movs	r3, #1
 80065f6:	4622      	mov	r2, r4
 80065f8:	4649      	mov	r1, r9
 80065fa:	4638      	mov	r0, r7
 80065fc:	47c0      	blx	r8
 80065fe:	3001      	adds	r0, #1
 8006600:	d0e6      	beq.n	80065d0 <_printf_common+0xa8>
 8006602:	3601      	adds	r6, #1
 8006604:	e7d9      	b.n	80065ba <_printf_common+0x92>
	...

08006608 <_printf_i>:
 8006608:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800660c:	7e0f      	ldrb	r7, [r1, #24]
 800660e:	4691      	mov	r9, r2
 8006610:	2f78      	cmp	r7, #120	; 0x78
 8006612:	4680      	mov	r8, r0
 8006614:	460c      	mov	r4, r1
 8006616:	469a      	mov	sl, r3
 8006618:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800661a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800661e:	d807      	bhi.n	8006630 <_printf_i+0x28>
 8006620:	2f62      	cmp	r7, #98	; 0x62
 8006622:	d80a      	bhi.n	800663a <_printf_i+0x32>
 8006624:	2f00      	cmp	r7, #0
 8006626:	f000 80d9 	beq.w	80067dc <_printf_i+0x1d4>
 800662a:	2f58      	cmp	r7, #88	; 0x58
 800662c:	f000 80a4 	beq.w	8006778 <_printf_i+0x170>
 8006630:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006634:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006638:	e03a      	b.n	80066b0 <_printf_i+0xa8>
 800663a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800663e:	2b15      	cmp	r3, #21
 8006640:	d8f6      	bhi.n	8006630 <_printf_i+0x28>
 8006642:	a101      	add	r1, pc, #4	; (adr r1, 8006648 <_printf_i+0x40>)
 8006644:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006648:	080066a1 	.word	0x080066a1
 800664c:	080066b5 	.word	0x080066b5
 8006650:	08006631 	.word	0x08006631
 8006654:	08006631 	.word	0x08006631
 8006658:	08006631 	.word	0x08006631
 800665c:	08006631 	.word	0x08006631
 8006660:	080066b5 	.word	0x080066b5
 8006664:	08006631 	.word	0x08006631
 8006668:	08006631 	.word	0x08006631
 800666c:	08006631 	.word	0x08006631
 8006670:	08006631 	.word	0x08006631
 8006674:	080067c3 	.word	0x080067c3
 8006678:	080066e5 	.word	0x080066e5
 800667c:	080067a5 	.word	0x080067a5
 8006680:	08006631 	.word	0x08006631
 8006684:	08006631 	.word	0x08006631
 8006688:	080067e5 	.word	0x080067e5
 800668c:	08006631 	.word	0x08006631
 8006690:	080066e5 	.word	0x080066e5
 8006694:	08006631 	.word	0x08006631
 8006698:	08006631 	.word	0x08006631
 800669c:	080067ad 	.word	0x080067ad
 80066a0:	682b      	ldr	r3, [r5, #0]
 80066a2:	1d1a      	adds	r2, r3, #4
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	602a      	str	r2, [r5, #0]
 80066a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066b0:	2301      	movs	r3, #1
 80066b2:	e0a4      	b.n	80067fe <_printf_i+0x1f6>
 80066b4:	6820      	ldr	r0, [r4, #0]
 80066b6:	6829      	ldr	r1, [r5, #0]
 80066b8:	0606      	lsls	r6, r0, #24
 80066ba:	f101 0304 	add.w	r3, r1, #4
 80066be:	d50a      	bpl.n	80066d6 <_printf_i+0xce>
 80066c0:	680e      	ldr	r6, [r1, #0]
 80066c2:	602b      	str	r3, [r5, #0]
 80066c4:	2e00      	cmp	r6, #0
 80066c6:	da03      	bge.n	80066d0 <_printf_i+0xc8>
 80066c8:	232d      	movs	r3, #45	; 0x2d
 80066ca:	4276      	negs	r6, r6
 80066cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066d0:	230a      	movs	r3, #10
 80066d2:	485e      	ldr	r0, [pc, #376]	; (800684c <_printf_i+0x244>)
 80066d4:	e019      	b.n	800670a <_printf_i+0x102>
 80066d6:	680e      	ldr	r6, [r1, #0]
 80066d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80066dc:	602b      	str	r3, [r5, #0]
 80066de:	bf18      	it	ne
 80066e0:	b236      	sxthne	r6, r6
 80066e2:	e7ef      	b.n	80066c4 <_printf_i+0xbc>
 80066e4:	682b      	ldr	r3, [r5, #0]
 80066e6:	6820      	ldr	r0, [r4, #0]
 80066e8:	1d19      	adds	r1, r3, #4
 80066ea:	6029      	str	r1, [r5, #0]
 80066ec:	0601      	lsls	r1, r0, #24
 80066ee:	d501      	bpl.n	80066f4 <_printf_i+0xec>
 80066f0:	681e      	ldr	r6, [r3, #0]
 80066f2:	e002      	b.n	80066fa <_printf_i+0xf2>
 80066f4:	0646      	lsls	r6, r0, #25
 80066f6:	d5fb      	bpl.n	80066f0 <_printf_i+0xe8>
 80066f8:	881e      	ldrh	r6, [r3, #0]
 80066fa:	2f6f      	cmp	r7, #111	; 0x6f
 80066fc:	bf0c      	ite	eq
 80066fe:	2308      	moveq	r3, #8
 8006700:	230a      	movne	r3, #10
 8006702:	4852      	ldr	r0, [pc, #328]	; (800684c <_printf_i+0x244>)
 8006704:	2100      	movs	r1, #0
 8006706:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800670a:	6865      	ldr	r5, [r4, #4]
 800670c:	2d00      	cmp	r5, #0
 800670e:	bfa8      	it	ge
 8006710:	6821      	ldrge	r1, [r4, #0]
 8006712:	60a5      	str	r5, [r4, #8]
 8006714:	bfa4      	itt	ge
 8006716:	f021 0104 	bicge.w	r1, r1, #4
 800671a:	6021      	strge	r1, [r4, #0]
 800671c:	b90e      	cbnz	r6, 8006722 <_printf_i+0x11a>
 800671e:	2d00      	cmp	r5, #0
 8006720:	d04d      	beq.n	80067be <_printf_i+0x1b6>
 8006722:	4615      	mov	r5, r2
 8006724:	fbb6 f1f3 	udiv	r1, r6, r3
 8006728:	fb03 6711 	mls	r7, r3, r1, r6
 800672c:	5dc7      	ldrb	r7, [r0, r7]
 800672e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006732:	4637      	mov	r7, r6
 8006734:	42bb      	cmp	r3, r7
 8006736:	460e      	mov	r6, r1
 8006738:	d9f4      	bls.n	8006724 <_printf_i+0x11c>
 800673a:	2b08      	cmp	r3, #8
 800673c:	d10b      	bne.n	8006756 <_printf_i+0x14e>
 800673e:	6823      	ldr	r3, [r4, #0]
 8006740:	07de      	lsls	r6, r3, #31
 8006742:	d508      	bpl.n	8006756 <_printf_i+0x14e>
 8006744:	6923      	ldr	r3, [r4, #16]
 8006746:	6861      	ldr	r1, [r4, #4]
 8006748:	4299      	cmp	r1, r3
 800674a:	bfde      	ittt	le
 800674c:	2330      	movle	r3, #48	; 0x30
 800674e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006752:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006756:	1b52      	subs	r2, r2, r5
 8006758:	6122      	str	r2, [r4, #16]
 800675a:	464b      	mov	r3, r9
 800675c:	4621      	mov	r1, r4
 800675e:	4640      	mov	r0, r8
 8006760:	f8cd a000 	str.w	sl, [sp]
 8006764:	aa03      	add	r2, sp, #12
 8006766:	f7ff fedf 	bl	8006528 <_printf_common>
 800676a:	3001      	adds	r0, #1
 800676c:	d14c      	bne.n	8006808 <_printf_i+0x200>
 800676e:	f04f 30ff 	mov.w	r0, #4294967295
 8006772:	b004      	add	sp, #16
 8006774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006778:	4834      	ldr	r0, [pc, #208]	; (800684c <_printf_i+0x244>)
 800677a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800677e:	6829      	ldr	r1, [r5, #0]
 8006780:	6823      	ldr	r3, [r4, #0]
 8006782:	f851 6b04 	ldr.w	r6, [r1], #4
 8006786:	6029      	str	r1, [r5, #0]
 8006788:	061d      	lsls	r5, r3, #24
 800678a:	d514      	bpl.n	80067b6 <_printf_i+0x1ae>
 800678c:	07df      	lsls	r7, r3, #31
 800678e:	bf44      	itt	mi
 8006790:	f043 0320 	orrmi.w	r3, r3, #32
 8006794:	6023      	strmi	r3, [r4, #0]
 8006796:	b91e      	cbnz	r6, 80067a0 <_printf_i+0x198>
 8006798:	6823      	ldr	r3, [r4, #0]
 800679a:	f023 0320 	bic.w	r3, r3, #32
 800679e:	6023      	str	r3, [r4, #0]
 80067a0:	2310      	movs	r3, #16
 80067a2:	e7af      	b.n	8006704 <_printf_i+0xfc>
 80067a4:	6823      	ldr	r3, [r4, #0]
 80067a6:	f043 0320 	orr.w	r3, r3, #32
 80067aa:	6023      	str	r3, [r4, #0]
 80067ac:	2378      	movs	r3, #120	; 0x78
 80067ae:	4828      	ldr	r0, [pc, #160]	; (8006850 <_printf_i+0x248>)
 80067b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80067b4:	e7e3      	b.n	800677e <_printf_i+0x176>
 80067b6:	0659      	lsls	r1, r3, #25
 80067b8:	bf48      	it	mi
 80067ba:	b2b6      	uxthmi	r6, r6
 80067bc:	e7e6      	b.n	800678c <_printf_i+0x184>
 80067be:	4615      	mov	r5, r2
 80067c0:	e7bb      	b.n	800673a <_printf_i+0x132>
 80067c2:	682b      	ldr	r3, [r5, #0]
 80067c4:	6826      	ldr	r6, [r4, #0]
 80067c6:	1d18      	adds	r0, r3, #4
 80067c8:	6961      	ldr	r1, [r4, #20]
 80067ca:	6028      	str	r0, [r5, #0]
 80067cc:	0635      	lsls	r5, r6, #24
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	d501      	bpl.n	80067d6 <_printf_i+0x1ce>
 80067d2:	6019      	str	r1, [r3, #0]
 80067d4:	e002      	b.n	80067dc <_printf_i+0x1d4>
 80067d6:	0670      	lsls	r0, r6, #25
 80067d8:	d5fb      	bpl.n	80067d2 <_printf_i+0x1ca>
 80067da:	8019      	strh	r1, [r3, #0]
 80067dc:	2300      	movs	r3, #0
 80067de:	4615      	mov	r5, r2
 80067e0:	6123      	str	r3, [r4, #16]
 80067e2:	e7ba      	b.n	800675a <_printf_i+0x152>
 80067e4:	682b      	ldr	r3, [r5, #0]
 80067e6:	2100      	movs	r1, #0
 80067e8:	1d1a      	adds	r2, r3, #4
 80067ea:	602a      	str	r2, [r5, #0]
 80067ec:	681d      	ldr	r5, [r3, #0]
 80067ee:	6862      	ldr	r2, [r4, #4]
 80067f0:	4628      	mov	r0, r5
 80067f2:	f000 f82f 	bl	8006854 <memchr>
 80067f6:	b108      	cbz	r0, 80067fc <_printf_i+0x1f4>
 80067f8:	1b40      	subs	r0, r0, r5
 80067fa:	6060      	str	r0, [r4, #4]
 80067fc:	6863      	ldr	r3, [r4, #4]
 80067fe:	6123      	str	r3, [r4, #16]
 8006800:	2300      	movs	r3, #0
 8006802:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006806:	e7a8      	b.n	800675a <_printf_i+0x152>
 8006808:	462a      	mov	r2, r5
 800680a:	4649      	mov	r1, r9
 800680c:	4640      	mov	r0, r8
 800680e:	6923      	ldr	r3, [r4, #16]
 8006810:	47d0      	blx	sl
 8006812:	3001      	adds	r0, #1
 8006814:	d0ab      	beq.n	800676e <_printf_i+0x166>
 8006816:	6823      	ldr	r3, [r4, #0]
 8006818:	079b      	lsls	r3, r3, #30
 800681a:	d413      	bmi.n	8006844 <_printf_i+0x23c>
 800681c:	68e0      	ldr	r0, [r4, #12]
 800681e:	9b03      	ldr	r3, [sp, #12]
 8006820:	4298      	cmp	r0, r3
 8006822:	bfb8      	it	lt
 8006824:	4618      	movlt	r0, r3
 8006826:	e7a4      	b.n	8006772 <_printf_i+0x16a>
 8006828:	2301      	movs	r3, #1
 800682a:	4632      	mov	r2, r6
 800682c:	4649      	mov	r1, r9
 800682e:	4640      	mov	r0, r8
 8006830:	47d0      	blx	sl
 8006832:	3001      	adds	r0, #1
 8006834:	d09b      	beq.n	800676e <_printf_i+0x166>
 8006836:	3501      	adds	r5, #1
 8006838:	68e3      	ldr	r3, [r4, #12]
 800683a:	9903      	ldr	r1, [sp, #12]
 800683c:	1a5b      	subs	r3, r3, r1
 800683e:	42ab      	cmp	r3, r5
 8006840:	dcf2      	bgt.n	8006828 <_printf_i+0x220>
 8006842:	e7eb      	b.n	800681c <_printf_i+0x214>
 8006844:	2500      	movs	r5, #0
 8006846:	f104 0619 	add.w	r6, r4, #25
 800684a:	e7f5      	b.n	8006838 <_printf_i+0x230>
 800684c:	08006cad 	.word	0x08006cad
 8006850:	08006cbe 	.word	0x08006cbe

08006854 <memchr>:
 8006854:	4603      	mov	r3, r0
 8006856:	b510      	push	{r4, lr}
 8006858:	b2c9      	uxtb	r1, r1
 800685a:	4402      	add	r2, r0
 800685c:	4293      	cmp	r3, r2
 800685e:	4618      	mov	r0, r3
 8006860:	d101      	bne.n	8006866 <memchr+0x12>
 8006862:	2000      	movs	r0, #0
 8006864:	e003      	b.n	800686e <memchr+0x1a>
 8006866:	7804      	ldrb	r4, [r0, #0]
 8006868:	3301      	adds	r3, #1
 800686a:	428c      	cmp	r4, r1
 800686c:	d1f6      	bne.n	800685c <memchr+0x8>
 800686e:	bd10      	pop	{r4, pc}

08006870 <memcpy>:
 8006870:	440a      	add	r2, r1
 8006872:	4291      	cmp	r1, r2
 8006874:	f100 33ff 	add.w	r3, r0, #4294967295
 8006878:	d100      	bne.n	800687c <memcpy+0xc>
 800687a:	4770      	bx	lr
 800687c:	b510      	push	{r4, lr}
 800687e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006882:	4291      	cmp	r1, r2
 8006884:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006888:	d1f9      	bne.n	800687e <memcpy+0xe>
 800688a:	bd10      	pop	{r4, pc}

0800688c <memmove>:
 800688c:	4288      	cmp	r0, r1
 800688e:	b510      	push	{r4, lr}
 8006890:	eb01 0402 	add.w	r4, r1, r2
 8006894:	d902      	bls.n	800689c <memmove+0x10>
 8006896:	4284      	cmp	r4, r0
 8006898:	4623      	mov	r3, r4
 800689a:	d807      	bhi.n	80068ac <memmove+0x20>
 800689c:	1e43      	subs	r3, r0, #1
 800689e:	42a1      	cmp	r1, r4
 80068a0:	d008      	beq.n	80068b4 <memmove+0x28>
 80068a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80068aa:	e7f8      	b.n	800689e <memmove+0x12>
 80068ac:	4601      	mov	r1, r0
 80068ae:	4402      	add	r2, r0
 80068b0:	428a      	cmp	r2, r1
 80068b2:	d100      	bne.n	80068b6 <memmove+0x2a>
 80068b4:	bd10      	pop	{r4, pc}
 80068b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80068ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80068be:	e7f7      	b.n	80068b0 <memmove+0x24>

080068c0 <_free_r>:
 80068c0:	b538      	push	{r3, r4, r5, lr}
 80068c2:	4605      	mov	r5, r0
 80068c4:	2900      	cmp	r1, #0
 80068c6:	d040      	beq.n	800694a <_free_r+0x8a>
 80068c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068cc:	1f0c      	subs	r4, r1, #4
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	bfb8      	it	lt
 80068d2:	18e4      	addlt	r4, r4, r3
 80068d4:	f000 f910 	bl	8006af8 <__malloc_lock>
 80068d8:	4a1c      	ldr	r2, [pc, #112]	; (800694c <_free_r+0x8c>)
 80068da:	6813      	ldr	r3, [r2, #0]
 80068dc:	b933      	cbnz	r3, 80068ec <_free_r+0x2c>
 80068de:	6063      	str	r3, [r4, #4]
 80068e0:	6014      	str	r4, [r2, #0]
 80068e2:	4628      	mov	r0, r5
 80068e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068e8:	f000 b90c 	b.w	8006b04 <__malloc_unlock>
 80068ec:	42a3      	cmp	r3, r4
 80068ee:	d908      	bls.n	8006902 <_free_r+0x42>
 80068f0:	6820      	ldr	r0, [r4, #0]
 80068f2:	1821      	adds	r1, r4, r0
 80068f4:	428b      	cmp	r3, r1
 80068f6:	bf01      	itttt	eq
 80068f8:	6819      	ldreq	r1, [r3, #0]
 80068fa:	685b      	ldreq	r3, [r3, #4]
 80068fc:	1809      	addeq	r1, r1, r0
 80068fe:	6021      	streq	r1, [r4, #0]
 8006900:	e7ed      	b.n	80068de <_free_r+0x1e>
 8006902:	461a      	mov	r2, r3
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	b10b      	cbz	r3, 800690c <_free_r+0x4c>
 8006908:	42a3      	cmp	r3, r4
 800690a:	d9fa      	bls.n	8006902 <_free_r+0x42>
 800690c:	6811      	ldr	r1, [r2, #0]
 800690e:	1850      	adds	r0, r2, r1
 8006910:	42a0      	cmp	r0, r4
 8006912:	d10b      	bne.n	800692c <_free_r+0x6c>
 8006914:	6820      	ldr	r0, [r4, #0]
 8006916:	4401      	add	r1, r0
 8006918:	1850      	adds	r0, r2, r1
 800691a:	4283      	cmp	r3, r0
 800691c:	6011      	str	r1, [r2, #0]
 800691e:	d1e0      	bne.n	80068e2 <_free_r+0x22>
 8006920:	6818      	ldr	r0, [r3, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	4401      	add	r1, r0
 8006926:	6011      	str	r1, [r2, #0]
 8006928:	6053      	str	r3, [r2, #4]
 800692a:	e7da      	b.n	80068e2 <_free_r+0x22>
 800692c:	d902      	bls.n	8006934 <_free_r+0x74>
 800692e:	230c      	movs	r3, #12
 8006930:	602b      	str	r3, [r5, #0]
 8006932:	e7d6      	b.n	80068e2 <_free_r+0x22>
 8006934:	6820      	ldr	r0, [r4, #0]
 8006936:	1821      	adds	r1, r4, r0
 8006938:	428b      	cmp	r3, r1
 800693a:	bf01      	itttt	eq
 800693c:	6819      	ldreq	r1, [r3, #0]
 800693e:	685b      	ldreq	r3, [r3, #4]
 8006940:	1809      	addeq	r1, r1, r0
 8006942:	6021      	streq	r1, [r4, #0]
 8006944:	6063      	str	r3, [r4, #4]
 8006946:	6054      	str	r4, [r2, #4]
 8006948:	e7cb      	b.n	80068e2 <_free_r+0x22>
 800694a:	bd38      	pop	{r3, r4, r5, pc}
 800694c:	20000310 	.word	0x20000310

08006950 <sbrk_aligned>:
 8006950:	b570      	push	{r4, r5, r6, lr}
 8006952:	4e0e      	ldr	r6, [pc, #56]	; (800698c <sbrk_aligned+0x3c>)
 8006954:	460c      	mov	r4, r1
 8006956:	6831      	ldr	r1, [r6, #0]
 8006958:	4605      	mov	r5, r0
 800695a:	b911      	cbnz	r1, 8006962 <sbrk_aligned+0x12>
 800695c:	f000 f8bc 	bl	8006ad8 <_sbrk_r>
 8006960:	6030      	str	r0, [r6, #0]
 8006962:	4621      	mov	r1, r4
 8006964:	4628      	mov	r0, r5
 8006966:	f000 f8b7 	bl	8006ad8 <_sbrk_r>
 800696a:	1c43      	adds	r3, r0, #1
 800696c:	d00a      	beq.n	8006984 <sbrk_aligned+0x34>
 800696e:	1cc4      	adds	r4, r0, #3
 8006970:	f024 0403 	bic.w	r4, r4, #3
 8006974:	42a0      	cmp	r0, r4
 8006976:	d007      	beq.n	8006988 <sbrk_aligned+0x38>
 8006978:	1a21      	subs	r1, r4, r0
 800697a:	4628      	mov	r0, r5
 800697c:	f000 f8ac 	bl	8006ad8 <_sbrk_r>
 8006980:	3001      	adds	r0, #1
 8006982:	d101      	bne.n	8006988 <sbrk_aligned+0x38>
 8006984:	f04f 34ff 	mov.w	r4, #4294967295
 8006988:	4620      	mov	r0, r4
 800698a:	bd70      	pop	{r4, r5, r6, pc}
 800698c:	20000314 	.word	0x20000314

08006990 <_malloc_r>:
 8006990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006994:	1ccd      	adds	r5, r1, #3
 8006996:	f025 0503 	bic.w	r5, r5, #3
 800699a:	3508      	adds	r5, #8
 800699c:	2d0c      	cmp	r5, #12
 800699e:	bf38      	it	cc
 80069a0:	250c      	movcc	r5, #12
 80069a2:	2d00      	cmp	r5, #0
 80069a4:	4607      	mov	r7, r0
 80069a6:	db01      	blt.n	80069ac <_malloc_r+0x1c>
 80069a8:	42a9      	cmp	r1, r5
 80069aa:	d905      	bls.n	80069b8 <_malloc_r+0x28>
 80069ac:	230c      	movs	r3, #12
 80069ae:	2600      	movs	r6, #0
 80069b0:	603b      	str	r3, [r7, #0]
 80069b2:	4630      	mov	r0, r6
 80069b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069b8:	4e2e      	ldr	r6, [pc, #184]	; (8006a74 <_malloc_r+0xe4>)
 80069ba:	f000 f89d 	bl	8006af8 <__malloc_lock>
 80069be:	6833      	ldr	r3, [r6, #0]
 80069c0:	461c      	mov	r4, r3
 80069c2:	bb34      	cbnz	r4, 8006a12 <_malloc_r+0x82>
 80069c4:	4629      	mov	r1, r5
 80069c6:	4638      	mov	r0, r7
 80069c8:	f7ff ffc2 	bl	8006950 <sbrk_aligned>
 80069cc:	1c43      	adds	r3, r0, #1
 80069ce:	4604      	mov	r4, r0
 80069d0:	d14d      	bne.n	8006a6e <_malloc_r+0xde>
 80069d2:	6834      	ldr	r4, [r6, #0]
 80069d4:	4626      	mov	r6, r4
 80069d6:	2e00      	cmp	r6, #0
 80069d8:	d140      	bne.n	8006a5c <_malloc_r+0xcc>
 80069da:	6823      	ldr	r3, [r4, #0]
 80069dc:	4631      	mov	r1, r6
 80069de:	4638      	mov	r0, r7
 80069e0:	eb04 0803 	add.w	r8, r4, r3
 80069e4:	f000 f878 	bl	8006ad8 <_sbrk_r>
 80069e8:	4580      	cmp	r8, r0
 80069ea:	d13a      	bne.n	8006a62 <_malloc_r+0xd2>
 80069ec:	6821      	ldr	r1, [r4, #0]
 80069ee:	3503      	adds	r5, #3
 80069f0:	1a6d      	subs	r5, r5, r1
 80069f2:	f025 0503 	bic.w	r5, r5, #3
 80069f6:	3508      	adds	r5, #8
 80069f8:	2d0c      	cmp	r5, #12
 80069fa:	bf38      	it	cc
 80069fc:	250c      	movcc	r5, #12
 80069fe:	4638      	mov	r0, r7
 8006a00:	4629      	mov	r1, r5
 8006a02:	f7ff ffa5 	bl	8006950 <sbrk_aligned>
 8006a06:	3001      	adds	r0, #1
 8006a08:	d02b      	beq.n	8006a62 <_malloc_r+0xd2>
 8006a0a:	6823      	ldr	r3, [r4, #0]
 8006a0c:	442b      	add	r3, r5
 8006a0e:	6023      	str	r3, [r4, #0]
 8006a10:	e00e      	b.n	8006a30 <_malloc_r+0xa0>
 8006a12:	6822      	ldr	r2, [r4, #0]
 8006a14:	1b52      	subs	r2, r2, r5
 8006a16:	d41e      	bmi.n	8006a56 <_malloc_r+0xc6>
 8006a18:	2a0b      	cmp	r2, #11
 8006a1a:	d916      	bls.n	8006a4a <_malloc_r+0xba>
 8006a1c:	1961      	adds	r1, r4, r5
 8006a1e:	42a3      	cmp	r3, r4
 8006a20:	6025      	str	r5, [r4, #0]
 8006a22:	bf18      	it	ne
 8006a24:	6059      	strne	r1, [r3, #4]
 8006a26:	6863      	ldr	r3, [r4, #4]
 8006a28:	bf08      	it	eq
 8006a2a:	6031      	streq	r1, [r6, #0]
 8006a2c:	5162      	str	r2, [r4, r5]
 8006a2e:	604b      	str	r3, [r1, #4]
 8006a30:	4638      	mov	r0, r7
 8006a32:	f104 060b 	add.w	r6, r4, #11
 8006a36:	f000 f865 	bl	8006b04 <__malloc_unlock>
 8006a3a:	f026 0607 	bic.w	r6, r6, #7
 8006a3e:	1d23      	adds	r3, r4, #4
 8006a40:	1af2      	subs	r2, r6, r3
 8006a42:	d0b6      	beq.n	80069b2 <_malloc_r+0x22>
 8006a44:	1b9b      	subs	r3, r3, r6
 8006a46:	50a3      	str	r3, [r4, r2]
 8006a48:	e7b3      	b.n	80069b2 <_malloc_r+0x22>
 8006a4a:	6862      	ldr	r2, [r4, #4]
 8006a4c:	42a3      	cmp	r3, r4
 8006a4e:	bf0c      	ite	eq
 8006a50:	6032      	streq	r2, [r6, #0]
 8006a52:	605a      	strne	r2, [r3, #4]
 8006a54:	e7ec      	b.n	8006a30 <_malloc_r+0xa0>
 8006a56:	4623      	mov	r3, r4
 8006a58:	6864      	ldr	r4, [r4, #4]
 8006a5a:	e7b2      	b.n	80069c2 <_malloc_r+0x32>
 8006a5c:	4634      	mov	r4, r6
 8006a5e:	6876      	ldr	r6, [r6, #4]
 8006a60:	e7b9      	b.n	80069d6 <_malloc_r+0x46>
 8006a62:	230c      	movs	r3, #12
 8006a64:	4638      	mov	r0, r7
 8006a66:	603b      	str	r3, [r7, #0]
 8006a68:	f000 f84c 	bl	8006b04 <__malloc_unlock>
 8006a6c:	e7a1      	b.n	80069b2 <_malloc_r+0x22>
 8006a6e:	6025      	str	r5, [r4, #0]
 8006a70:	e7de      	b.n	8006a30 <_malloc_r+0xa0>
 8006a72:	bf00      	nop
 8006a74:	20000310 	.word	0x20000310

08006a78 <_realloc_r>:
 8006a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a7c:	4680      	mov	r8, r0
 8006a7e:	4614      	mov	r4, r2
 8006a80:	460e      	mov	r6, r1
 8006a82:	b921      	cbnz	r1, 8006a8e <_realloc_r+0x16>
 8006a84:	4611      	mov	r1, r2
 8006a86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a8a:	f7ff bf81 	b.w	8006990 <_malloc_r>
 8006a8e:	b92a      	cbnz	r2, 8006a9c <_realloc_r+0x24>
 8006a90:	f7ff ff16 	bl	80068c0 <_free_r>
 8006a94:	4625      	mov	r5, r4
 8006a96:	4628      	mov	r0, r5
 8006a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a9c:	f000 f838 	bl	8006b10 <_malloc_usable_size_r>
 8006aa0:	4284      	cmp	r4, r0
 8006aa2:	4607      	mov	r7, r0
 8006aa4:	d802      	bhi.n	8006aac <_realloc_r+0x34>
 8006aa6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006aaa:	d812      	bhi.n	8006ad2 <_realloc_r+0x5a>
 8006aac:	4621      	mov	r1, r4
 8006aae:	4640      	mov	r0, r8
 8006ab0:	f7ff ff6e 	bl	8006990 <_malloc_r>
 8006ab4:	4605      	mov	r5, r0
 8006ab6:	2800      	cmp	r0, #0
 8006ab8:	d0ed      	beq.n	8006a96 <_realloc_r+0x1e>
 8006aba:	42bc      	cmp	r4, r7
 8006abc:	4622      	mov	r2, r4
 8006abe:	4631      	mov	r1, r6
 8006ac0:	bf28      	it	cs
 8006ac2:	463a      	movcs	r2, r7
 8006ac4:	f7ff fed4 	bl	8006870 <memcpy>
 8006ac8:	4631      	mov	r1, r6
 8006aca:	4640      	mov	r0, r8
 8006acc:	f7ff fef8 	bl	80068c0 <_free_r>
 8006ad0:	e7e1      	b.n	8006a96 <_realloc_r+0x1e>
 8006ad2:	4635      	mov	r5, r6
 8006ad4:	e7df      	b.n	8006a96 <_realloc_r+0x1e>
	...

08006ad8 <_sbrk_r>:
 8006ad8:	b538      	push	{r3, r4, r5, lr}
 8006ada:	2300      	movs	r3, #0
 8006adc:	4d05      	ldr	r5, [pc, #20]	; (8006af4 <_sbrk_r+0x1c>)
 8006ade:	4604      	mov	r4, r0
 8006ae0:	4608      	mov	r0, r1
 8006ae2:	602b      	str	r3, [r5, #0]
 8006ae4:	f7fa fe64 	bl	80017b0 <_sbrk>
 8006ae8:	1c43      	adds	r3, r0, #1
 8006aea:	d102      	bne.n	8006af2 <_sbrk_r+0x1a>
 8006aec:	682b      	ldr	r3, [r5, #0]
 8006aee:	b103      	cbz	r3, 8006af2 <_sbrk_r+0x1a>
 8006af0:	6023      	str	r3, [r4, #0]
 8006af2:	bd38      	pop	{r3, r4, r5, pc}
 8006af4:	20000318 	.word	0x20000318

08006af8 <__malloc_lock>:
 8006af8:	4801      	ldr	r0, [pc, #4]	; (8006b00 <__malloc_lock+0x8>)
 8006afa:	f000 b811 	b.w	8006b20 <__retarget_lock_acquire_recursive>
 8006afe:	bf00      	nop
 8006b00:	2000031c 	.word	0x2000031c

08006b04 <__malloc_unlock>:
 8006b04:	4801      	ldr	r0, [pc, #4]	; (8006b0c <__malloc_unlock+0x8>)
 8006b06:	f000 b80c 	b.w	8006b22 <__retarget_lock_release_recursive>
 8006b0a:	bf00      	nop
 8006b0c:	2000031c 	.word	0x2000031c

08006b10 <_malloc_usable_size_r>:
 8006b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b14:	1f18      	subs	r0, r3, #4
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	bfbc      	itt	lt
 8006b1a:	580b      	ldrlt	r3, [r1, r0]
 8006b1c:	18c0      	addlt	r0, r0, r3
 8006b1e:	4770      	bx	lr

08006b20 <__retarget_lock_acquire_recursive>:
 8006b20:	4770      	bx	lr

08006b22 <__retarget_lock_release_recursive>:
 8006b22:	4770      	bx	lr

08006b24 <_init>:
 8006b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b26:	bf00      	nop
 8006b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b2a:	bc08      	pop	{r3}
 8006b2c:	469e      	mov	lr, r3
 8006b2e:	4770      	bx	lr

08006b30 <_fini>:
 8006b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b32:	bf00      	nop
 8006b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b36:	bc08      	pop	{r3}
 8006b38:	469e      	mov	lr, r3
 8006b3a:	4770      	bx	lr
