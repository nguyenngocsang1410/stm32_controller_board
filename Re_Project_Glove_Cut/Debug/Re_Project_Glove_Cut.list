
Re_Project_Glove_Cut.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069bc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08006acc  08006acc  00016acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c3c  08006c3c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08006c3c  08006c3c  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c3c  08006c3c  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c3c  08006c3c  00016c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c40  08006c40  00016c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08006c44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  20000090  08006cd0  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08006cd0  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e6cd  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000247f  00000000  00000000  0002e782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  00030c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec8  00000000  00000000  00031b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b15  00000000  00000000  00032a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000110ff  00000000  00000000  0004b52d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c92f  00000000  00000000  0005c62c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8f5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004640  00000000  00000000  000e8fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000090 	.word	0x20000090
 800012c:	00000000 	.word	0x00000000
 8000130:	08006ab4 	.word	0x08006ab4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000094 	.word	0x20000094
 800014c:	08006ab4 	.word	0x08006ab4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_d2f>:
 800093c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000944:	bf24      	itt	cs
 8000946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800094a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800094e:	d90d      	bls.n	800096c <__aeabi_d2f+0x30>
 8000950:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800095c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000964:	bf08      	it	eq
 8000966:	f020 0001 	biceq.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000970:	d121      	bne.n	80009b6 <__aeabi_d2f+0x7a>
 8000972:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000976:	bfbc      	itt	lt
 8000978:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800097c:	4770      	bxlt	lr
 800097e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000982:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000986:	f1c2 0218 	rsb	r2, r2, #24
 800098a:	f1c2 0c20 	rsb	ip, r2, #32
 800098e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000992:	fa20 f002 	lsr.w	r0, r0, r2
 8000996:	bf18      	it	ne
 8000998:	f040 0001 	orrne.w	r0, r0, #1
 800099c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a8:	ea40 000c 	orr.w	r0, r0, ip
 80009ac:	fa23 f302 	lsr.w	r3, r3, r2
 80009b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b4:	e7cc      	b.n	8000950 <__aeabi_d2f+0x14>
 80009b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ba:	d107      	bne.n	80009cc <__aeabi_d2f+0x90>
 80009bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009c0:	bf1e      	ittt	ne
 80009c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ca:	4770      	bxne	lr
 80009cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_frsub>:
 80009dc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009e0:	e002      	b.n	80009e8 <__addsf3>
 80009e2:	bf00      	nop

080009e4 <__aeabi_fsub>:
 80009e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009e8 <__addsf3>:
 80009e8:	0042      	lsls	r2, r0, #1
 80009ea:	bf1f      	itttt	ne
 80009ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009f0:	ea92 0f03 	teqne	r2, r3
 80009f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009fc:	d06a      	beq.n	8000ad4 <__addsf3+0xec>
 80009fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a06:	bfc1      	itttt	gt
 8000a08:	18d2      	addgt	r2, r2, r3
 8000a0a:	4041      	eorgt	r1, r0
 8000a0c:	4048      	eorgt	r0, r1
 8000a0e:	4041      	eorgt	r1, r0
 8000a10:	bfb8      	it	lt
 8000a12:	425b      	neglt	r3, r3
 8000a14:	2b19      	cmp	r3, #25
 8000a16:	bf88      	it	hi
 8000a18:	4770      	bxhi	lr
 8000a1a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a2e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4249      	negne	r1, r1
 8000a3a:	ea92 0f03 	teq	r2, r3
 8000a3e:	d03f      	beq.n	8000ac0 <__addsf3+0xd8>
 8000a40:	f1a2 0201 	sub.w	r2, r2, #1
 8000a44:	fa41 fc03 	asr.w	ip, r1, r3
 8000a48:	eb10 000c 	adds.w	r0, r0, ip
 8000a4c:	f1c3 0320 	rsb	r3, r3, #32
 8000a50:	fa01 f103 	lsl.w	r1, r1, r3
 8000a54:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a58:	d502      	bpl.n	8000a60 <__addsf3+0x78>
 8000a5a:	4249      	negs	r1, r1
 8000a5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a64:	d313      	bcc.n	8000a8e <__addsf3+0xa6>
 8000a66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a6a:	d306      	bcc.n	8000a7a <__addsf3+0x92>
 8000a6c:	0840      	lsrs	r0, r0, #1
 8000a6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a72:	f102 0201 	add.w	r2, r2, #1
 8000a76:	2afe      	cmp	r2, #254	; 0xfe
 8000a78:	d251      	bcs.n	8000b1e <__addsf3+0x136>
 8000a7a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a82:	bf08      	it	eq
 8000a84:	f020 0001 	biceq.w	r0, r0, #1
 8000a88:	ea40 0003 	orr.w	r0, r0, r3
 8000a8c:	4770      	bx	lr
 8000a8e:	0049      	lsls	r1, r1, #1
 8000a90:	eb40 0000 	adc.w	r0, r0, r0
 8000a94:	3a01      	subs	r2, #1
 8000a96:	bf28      	it	cs
 8000a98:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a9c:	d2ed      	bcs.n	8000a7a <__addsf3+0x92>
 8000a9e:	fab0 fc80 	clz	ip, r0
 8000aa2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000aa6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aaa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aae:	bfaa      	itet	ge
 8000ab0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ab4:	4252      	neglt	r2, r2
 8000ab6:	4318      	orrge	r0, r3
 8000ab8:	bfbc      	itt	lt
 8000aba:	40d0      	lsrlt	r0, r2
 8000abc:	4318      	orrlt	r0, r3
 8000abe:	4770      	bx	lr
 8000ac0:	f092 0f00 	teq	r2, #0
 8000ac4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ac8:	bf06      	itte	eq
 8000aca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ace:	3201      	addeq	r2, #1
 8000ad0:	3b01      	subne	r3, #1
 8000ad2:	e7b5      	b.n	8000a40 <__addsf3+0x58>
 8000ad4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ad8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000adc:	bf18      	it	ne
 8000ade:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae2:	d021      	beq.n	8000b28 <__addsf3+0x140>
 8000ae4:	ea92 0f03 	teq	r2, r3
 8000ae8:	d004      	beq.n	8000af4 <__addsf3+0x10c>
 8000aea:	f092 0f00 	teq	r2, #0
 8000aee:	bf08      	it	eq
 8000af0:	4608      	moveq	r0, r1
 8000af2:	4770      	bx	lr
 8000af4:	ea90 0f01 	teq	r0, r1
 8000af8:	bf1c      	itt	ne
 8000afa:	2000      	movne	r0, #0
 8000afc:	4770      	bxne	lr
 8000afe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b02:	d104      	bne.n	8000b0e <__addsf3+0x126>
 8000b04:	0040      	lsls	r0, r0, #1
 8000b06:	bf28      	it	cs
 8000b08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b0c:	4770      	bx	lr
 8000b0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b12:	bf3c      	itt	cc
 8000b14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b18:	4770      	bxcc	lr
 8000b1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b26:	4770      	bx	lr
 8000b28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b2c:	bf16      	itet	ne
 8000b2e:	4608      	movne	r0, r1
 8000b30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b34:	4601      	movne	r1, r0
 8000b36:	0242      	lsls	r2, r0, #9
 8000b38:	bf06      	itte	eq
 8000b3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b3e:	ea90 0f01 	teqeq	r0, r1
 8000b42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_ui2f>:
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	e004      	b.n	8000b58 <__aeabi_i2f+0x8>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_i2f>:
 8000b50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b54:	bf48      	it	mi
 8000b56:	4240      	negmi	r0, r0
 8000b58:	ea5f 0c00 	movs.w	ip, r0
 8000b5c:	bf08      	it	eq
 8000b5e:	4770      	bxeq	lr
 8000b60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b64:	4601      	mov	r1, r0
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	e01c      	b.n	8000ba6 <__aeabi_l2f+0x2a>

08000b6c <__aeabi_ul2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	e00a      	b.n	8000b90 <__aeabi_l2f+0x14>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_l2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b88:	d502      	bpl.n	8000b90 <__aeabi_l2f+0x14>
 8000b8a:	4240      	negs	r0, r0
 8000b8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b90:	ea5f 0c01 	movs.w	ip, r1
 8000b94:	bf02      	ittt	eq
 8000b96:	4684      	moveq	ip, r0
 8000b98:	4601      	moveq	r1, r0
 8000b9a:	2000      	moveq	r0, #0
 8000b9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000baa:	fabc f28c 	clz	r2, ip
 8000bae:	3a08      	subs	r2, #8
 8000bb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bb4:	db10      	blt.n	8000bd8 <__aeabi_l2f+0x5c>
 8000bb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bba:	4463      	add	r3, ip
 8000bbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bc0:	f1c2 0220 	rsb	r2, r2, #32
 8000bc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bcc:	eb43 0002 	adc.w	r0, r3, r2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f102 0220 	add.w	r2, r2, #32
 8000bdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000be0:	f1c2 0220 	rsb	r2, r2, #32
 8000be4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000be8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bec:	eb43 0002 	adc.w	r0, r3, r2
 8000bf0:	bf08      	it	eq
 8000bf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_fmul>:
 8000bf8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c00:	bf1e      	ittt	ne
 8000c02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c06:	ea92 0f0c 	teqne	r2, ip
 8000c0a:	ea93 0f0c 	teqne	r3, ip
 8000c0e:	d06f      	beq.n	8000cf0 <__aeabi_fmul+0xf8>
 8000c10:	441a      	add	r2, r3
 8000c12:	ea80 0c01 	eor.w	ip, r0, r1
 8000c16:	0240      	lsls	r0, r0, #9
 8000c18:	bf18      	it	ne
 8000c1a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c1e:	d01e      	beq.n	8000c5e <__aeabi_fmul+0x66>
 8000c20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c24:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c28:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c2c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c34:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c38:	bf3e      	ittt	cc
 8000c3a:	0049      	lslcc	r1, r1, #1
 8000c3c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c40:	005b      	lslcc	r3, r3, #1
 8000c42:	ea40 0001 	orr.w	r0, r0, r1
 8000c46:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c4a:	2afd      	cmp	r2, #253	; 0xfd
 8000c4c:	d81d      	bhi.n	8000c8a <__aeabi_fmul+0x92>
 8000c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c56:	bf08      	it	eq
 8000c58:	f020 0001 	biceq.w	r0, r0, #1
 8000c5c:	4770      	bx	lr
 8000c5e:	f090 0f00 	teq	r0, #0
 8000c62:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c66:	bf08      	it	eq
 8000c68:	0249      	lsleq	r1, r1, #9
 8000c6a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c6e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c72:	3a7f      	subs	r2, #127	; 0x7f
 8000c74:	bfc2      	ittt	gt
 8000c76:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c7a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c7e:	4770      	bxgt	lr
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	dc5d      	bgt.n	8000d48 <__aeabi_fmul+0x150>
 8000c8c:	f112 0f19 	cmn.w	r2, #25
 8000c90:	bfdc      	itt	le
 8000c92:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c96:	4770      	bxle	lr
 8000c98:	f1c2 0200 	rsb	r2, r2, #0
 8000c9c:	0041      	lsls	r1, r0, #1
 8000c9e:	fa21 f102 	lsr.w	r1, r1, r2
 8000ca2:	f1c2 0220 	rsb	r2, r2, #32
 8000ca6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000caa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cae:	f140 0000 	adc.w	r0, r0, #0
 8000cb2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cb6:	bf08      	it	eq
 8000cb8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cbc:	4770      	bx	lr
 8000cbe:	f092 0f00 	teq	r2, #0
 8000cc2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cc6:	bf02      	ittt	eq
 8000cc8:	0040      	lsleq	r0, r0, #1
 8000cca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cce:	3a01      	subeq	r2, #1
 8000cd0:	d0f9      	beq.n	8000cc6 <__aeabi_fmul+0xce>
 8000cd2:	ea40 000c 	orr.w	r0, r0, ip
 8000cd6:	f093 0f00 	teq	r3, #0
 8000cda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cde:	bf02      	ittt	eq
 8000ce0:	0049      	lsleq	r1, r1, #1
 8000ce2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ce6:	3b01      	subeq	r3, #1
 8000ce8:	d0f9      	beq.n	8000cde <__aeabi_fmul+0xe6>
 8000cea:	ea41 010c 	orr.w	r1, r1, ip
 8000cee:	e78f      	b.n	8000c10 <__aeabi_fmul+0x18>
 8000cf0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cf4:	ea92 0f0c 	teq	r2, ip
 8000cf8:	bf18      	it	ne
 8000cfa:	ea93 0f0c 	teqne	r3, ip
 8000cfe:	d00a      	beq.n	8000d16 <__aeabi_fmul+0x11e>
 8000d00:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d04:	bf18      	it	ne
 8000d06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d0a:	d1d8      	bne.n	8000cbe <__aeabi_fmul+0xc6>
 8000d0c:	ea80 0001 	eor.w	r0, r0, r1
 8000d10:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d14:	4770      	bx	lr
 8000d16:	f090 0f00 	teq	r0, #0
 8000d1a:	bf17      	itett	ne
 8000d1c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d20:	4608      	moveq	r0, r1
 8000d22:	f091 0f00 	teqne	r1, #0
 8000d26:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d2a:	d014      	beq.n	8000d56 <__aeabi_fmul+0x15e>
 8000d2c:	ea92 0f0c 	teq	r2, ip
 8000d30:	d101      	bne.n	8000d36 <__aeabi_fmul+0x13e>
 8000d32:	0242      	lsls	r2, r0, #9
 8000d34:	d10f      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d36:	ea93 0f0c 	teq	r3, ip
 8000d3a:	d103      	bne.n	8000d44 <__aeabi_fmul+0x14c>
 8000d3c:	024b      	lsls	r3, r1, #9
 8000d3e:	bf18      	it	ne
 8000d40:	4608      	movne	r0, r1
 8000d42:	d108      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d44:	ea80 0001 	eor.w	r0, r0, r1
 8000d48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d54:	4770      	bx	lr
 8000d56:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d5a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_fdiv>:
 8000d60:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d68:	bf1e      	ittt	ne
 8000d6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d6e:	ea92 0f0c 	teqne	r2, ip
 8000d72:	ea93 0f0c 	teqne	r3, ip
 8000d76:	d069      	beq.n	8000e4c <__aeabi_fdiv+0xec>
 8000d78:	eba2 0203 	sub.w	r2, r2, r3
 8000d7c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d80:	0249      	lsls	r1, r1, #9
 8000d82:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d86:	d037      	beq.n	8000df8 <__aeabi_fdiv+0x98>
 8000d88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d8c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	bf38      	it	cc
 8000d9c:	005b      	lslcc	r3, r3, #1
 8000d9e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000da2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000da6:	428b      	cmp	r3, r1
 8000da8:	bf24      	itt	cs
 8000daa:	1a5b      	subcs	r3, r3, r1
 8000dac:	ea40 000c 	orrcs.w	r0, r0, ip
 8000db0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000db4:	bf24      	itt	cs
 8000db6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dbe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dc2:	bf24      	itt	cs
 8000dc4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dc8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dcc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dd0:	bf24      	itt	cs
 8000dd2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dd6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dda:	011b      	lsls	r3, r3, #4
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000de2:	d1e0      	bne.n	8000da6 <__aeabi_fdiv+0x46>
 8000de4:	2afd      	cmp	r2, #253	; 0xfd
 8000de6:	f63f af50 	bhi.w	8000c8a <__aeabi_fmul+0x92>
 8000dea:	428b      	cmp	r3, r1
 8000dec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df0:	bf08      	it	eq
 8000df2:	f020 0001 	biceq.w	r0, r0, #1
 8000df6:	4770      	bx	lr
 8000df8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dfc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e00:	327f      	adds	r2, #127	; 0x7f
 8000e02:	bfc2      	ittt	gt
 8000e04:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0c:	4770      	bxgt	lr
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e12:	f04f 0300 	mov.w	r3, #0
 8000e16:	3a01      	subs	r2, #1
 8000e18:	e737      	b.n	8000c8a <__aeabi_fmul+0x92>
 8000e1a:	f092 0f00 	teq	r2, #0
 8000e1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e22:	bf02      	ittt	eq
 8000e24:	0040      	lsleq	r0, r0, #1
 8000e26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e2a:	3a01      	subeq	r2, #1
 8000e2c:	d0f9      	beq.n	8000e22 <__aeabi_fdiv+0xc2>
 8000e2e:	ea40 000c 	orr.w	r0, r0, ip
 8000e32:	f093 0f00 	teq	r3, #0
 8000e36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0049      	lsleq	r1, r1, #1
 8000e3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e42:	3b01      	subeq	r3, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fdiv+0xda>
 8000e46:	ea41 010c 	orr.w	r1, r1, ip
 8000e4a:	e795      	b.n	8000d78 <__aeabi_fdiv+0x18>
 8000e4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e50:	ea92 0f0c 	teq	r2, ip
 8000e54:	d108      	bne.n	8000e68 <__aeabi_fdiv+0x108>
 8000e56:	0242      	lsls	r2, r0, #9
 8000e58:	f47f af7d 	bne.w	8000d56 <__aeabi_fmul+0x15e>
 8000e5c:	ea93 0f0c 	teq	r3, ip
 8000e60:	f47f af70 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e776      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e68:	ea93 0f0c 	teq	r3, ip
 8000e6c:	d104      	bne.n	8000e78 <__aeabi_fdiv+0x118>
 8000e6e:	024b      	lsls	r3, r1, #9
 8000e70:	f43f af4c 	beq.w	8000d0c <__aeabi_fmul+0x114>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e76e      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e78:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e7c:	bf18      	it	ne
 8000e7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e82:	d1ca      	bne.n	8000e1a <__aeabi_fdiv+0xba>
 8000e84:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e88:	f47f af5c 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e8c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e90:	f47f af3c 	bne.w	8000d0c <__aeabi_fmul+0x114>
 8000e94:	e75f      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e96:	bf00      	nop

08000e98 <__gesf2>:
 8000e98:	f04f 3cff 	mov.w	ip, #4294967295
 8000e9c:	e006      	b.n	8000eac <__cmpsf2+0x4>
 8000e9e:	bf00      	nop

08000ea0 <__lesf2>:
 8000ea0:	f04f 0c01 	mov.w	ip, #1
 8000ea4:	e002      	b.n	8000eac <__cmpsf2+0x4>
 8000ea6:	bf00      	nop

08000ea8 <__cmpsf2>:
 8000ea8:	f04f 0c01 	mov.w	ip, #1
 8000eac:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000eb0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000eb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000eb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ebc:	bf18      	it	ne
 8000ebe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ec2:	d011      	beq.n	8000ee8 <__cmpsf2+0x40>
 8000ec4:	b001      	add	sp, #4
 8000ec6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eca:	bf18      	it	ne
 8000ecc:	ea90 0f01 	teqne	r0, r1
 8000ed0:	bf58      	it	pl
 8000ed2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ed6:	bf88      	it	hi
 8000ed8:	17c8      	asrhi	r0, r1, #31
 8000eda:	bf38      	it	cc
 8000edc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ee0:	bf18      	it	ne
 8000ee2:	f040 0001 	orrne.w	r0, r0, #1
 8000ee6:	4770      	bx	lr
 8000ee8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eec:	d102      	bne.n	8000ef4 <__cmpsf2+0x4c>
 8000eee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ef2:	d105      	bne.n	8000f00 <__cmpsf2+0x58>
 8000ef4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ef8:	d1e4      	bne.n	8000ec4 <__cmpsf2+0x1c>
 8000efa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000efe:	d0e1      	beq.n	8000ec4 <__cmpsf2+0x1c>
 8000f00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <__aeabi_cfrcmple>:
 8000f08:	4684      	mov	ip, r0
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	4661      	mov	r1, ip
 8000f0e:	e7ff      	b.n	8000f10 <__aeabi_cfcmpeq>

08000f10 <__aeabi_cfcmpeq>:
 8000f10:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f12:	f7ff ffc9 	bl	8000ea8 <__cmpsf2>
 8000f16:	2800      	cmp	r0, #0
 8000f18:	bf48      	it	mi
 8000f1a:	f110 0f00 	cmnmi.w	r0, #0
 8000f1e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f20 <__aeabi_fcmpeq>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff fff4 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f28:	bf0c      	ite	eq
 8000f2a:	2001      	moveq	r0, #1
 8000f2c:	2000      	movne	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_fcmplt>:
 8000f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f38:	f7ff ffea 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f3c:	bf34      	ite	cc
 8000f3e:	2001      	movcc	r0, #1
 8000f40:	2000      	movcs	r0, #0
 8000f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f46:	bf00      	nop

08000f48 <__aeabi_fcmple>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff ffe0 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f50:	bf94      	ite	ls
 8000f52:	2001      	movls	r0, #1
 8000f54:	2000      	movhi	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_fcmpge>:
 8000f5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f60:	f7ff ffd2 	bl	8000f08 <__aeabi_cfrcmple>
 8000f64:	bf94      	ite	ls
 8000f66:	2001      	movls	r0, #1
 8000f68:	2000      	movhi	r0, #0
 8000f6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6e:	bf00      	nop

08000f70 <__aeabi_fcmpgt>:
 8000f70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f74:	f7ff ffc8 	bl	8000f08 <__aeabi_cfrcmple>
 8000f78:	bf34      	ite	cc
 8000f7a:	2001      	movcc	r0, #1
 8000f7c:	2000      	movcs	r0, #0
 8000f7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f82:	bf00      	nop

08000f84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f88:	f002 fc44 	bl	8003814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f8c:	f000 f813 	bl	8000fb6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f90:	f000 fa24 	bl	80013dc <MX_GPIO_Init>
  MX_TIM1_Init();
 8000f94:	f000 f8ae 	bl	80010f4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000f98:	f000 f958 	bl	800124c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f9c:	f000 f9ba 	bl	8001314 <MX_TIM4_Init>
  MX_I2C2_Init();
 8000fa0:	f000 f87a 	bl	8001098 <MX_I2C2_Init>
  MX_TIM2_Init();
 8000fa4:	f000 f8fe 	bl	80011a4 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000fa8:	f000 f84a 	bl	8001040 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  start_up();
 8000fac:	f000 ff1c 	bl	8001de8 <start_up>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	main_loop();
 8000fb0:	f000 ffd0 	bl	8001f54 <main_loop>
 8000fb4:	e7fc      	b.n	8000fb0 <main+0x2c>

08000fb6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b090      	sub	sp, #64	; 0x40
 8000fba:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fbc:	f107 0318 	add.w	r3, r7, #24
 8000fc0:	2228      	movs	r2, #40	; 0x28
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f005 f8f3 	bl	80061b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fe0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fea:	2302      	movs	r3, #2
 8000fec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ff2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000ff4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ffa:	f107 0318 	add.w	r3, r7, #24
 8000ffe:	4618      	mov	r0, r3
 8001000:	f003 fdca 	bl	8004b98 <HAL_RCC_OscConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <SystemClock_Config+0x58>
  {
    Error_Handler();
 800100a:	f000 fab9 	bl	8001580 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800100e:	230f      	movs	r3, #15
 8001010:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001012:	2302      	movs	r3, #2
 8001014:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800101a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800101e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	2101      	movs	r1, #1
 8001028:	4618      	mov	r0, r3
 800102a:	f004 f837 	bl	800509c <HAL_RCC_ClockConfig>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001034:	f000 faa4 	bl	8001580 <Error_Handler>
  }
}
 8001038:	bf00      	nop
 800103a:	3740      	adds	r7, #64	; 0x40
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* TIM4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8001044:	2200      	movs	r2, #0
 8001046:	2101      	movs	r1, #1
 8001048:	201e      	movs	r0, #30
 800104a:	f002 fd40 	bl	8003ace <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800104e:	201e      	movs	r0, #30
 8001050:	f002 fd59 	bl	8003b06 <HAL_NVIC_EnableIRQ>
  /* EXTI2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001054:	2200      	movs	r2, #0
 8001056:	2105      	movs	r1, #5
 8001058:	2008      	movs	r0, #8
 800105a:	f002 fd38 	bl	8003ace <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800105e:	2008      	movs	r0, #8
 8001060:	f002 fd51 	bl	8003b06 <HAL_NVIC_EnableIRQ>
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 8001064:	2200      	movs	r2, #0
 8001066:	2102      	movs	r1, #2
 8001068:	2009      	movs	r0, #9
 800106a:	f002 fd30 	bl	8003ace <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800106e:	2009      	movs	r0, #9
 8001070:	f002 fd49 	bl	8003b06 <HAL_NVIC_EnableIRQ>
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 8001074:	2200      	movs	r2, #0
 8001076:	2102      	movs	r1, #2
 8001078:	200a      	movs	r0, #10
 800107a:	f002 fd28 	bl	8003ace <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800107e:	200a      	movs	r0, #10
 8001080:	f002 fd41 	bl	8003b06 <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8001084:	2200      	movs	r2, #0
 8001086:	2102      	movs	r1, #2
 8001088:	2017      	movs	r0, #23
 800108a:	f002 fd20 	bl	8003ace <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800108e:	2017      	movs	r0, #23
 8001090:	f002 fd39 	bl	8003b06 <HAL_NVIC_EnableIRQ>
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}

08001098 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <MX_I2C2_Init+0x50>)
 800109e:	4a13      	ldr	r2, [pc, #76]	; (80010ec <MX_I2C2_Init+0x54>)
 80010a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <MX_I2C2_Init+0x50>)
 80010a4:	4a12      	ldr	r2, [pc, #72]	; (80010f0 <MX_I2C2_Init+0x58>)
 80010a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <MX_I2C2_Init+0x50>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <MX_I2C2_Init+0x50>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <MX_I2C2_Init+0x50>)
 80010b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010ba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010bc:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <MX_I2C2_Init+0x50>)
 80010be:	2200      	movs	r2, #0
 80010c0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80010c2:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <MX_I2C2_Init+0x50>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010c8:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <MX_I2C2_Init+0x50>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ce:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <MX_I2C2_Init+0x50>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80010d4:	4804      	ldr	r0, [pc, #16]	; (80010e8 <MX_I2C2_Init+0x50>)
 80010d6:	f003 f915 	bl	8004304 <HAL_I2C_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80010e0:	f000 fa4e 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	200000ac 	.word	0x200000ac
 80010ec:	40005800 	.word	0x40005800
 80010f0:	000186a0 	.word	0x000186a0

080010f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08c      	sub	sp, #48	; 0x30
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010fa:	f107 030c 	add.w	r3, r7, #12
 80010fe:	2224      	movs	r2, #36	; 0x24
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f005 f854 	bl	80061b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001110:	4b22      	ldr	r3, [pc, #136]	; (800119c <MX_TIM1_Init+0xa8>)
 8001112:	4a23      	ldr	r2, [pc, #140]	; (80011a0 <MX_TIM1_Init+0xac>)
 8001114:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001116:	4b21      	ldr	r3, [pc, #132]	; (800119c <MX_TIM1_Init+0xa8>)
 8001118:	2200      	movs	r2, #0
 800111a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111c:	4b1f      	ldr	r3, [pc, #124]	; (800119c <MX_TIM1_Init+0xa8>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001122:	4b1e      	ldr	r3, [pc, #120]	; (800119c <MX_TIM1_Init+0xa8>)
 8001124:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001128:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800112a:	4b1c      	ldr	r3, [pc, #112]	; (800119c <MX_TIM1_Init+0xa8>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001130:	4b1a      	ldr	r3, [pc, #104]	; (800119c <MX_TIM1_Init+0xa8>)
 8001132:	2200      	movs	r2, #0
 8001134:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001136:	4b19      	ldr	r3, [pc, #100]	; (800119c <MX_TIM1_Init+0xa8>)
 8001138:	2280      	movs	r2, #128	; 0x80
 800113a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800113c:	2303      	movs	r3, #3
 800113e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001140:	2300      	movs	r3, #0
 8001142:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001144:	2301      	movs	r3, #1
 8001146:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001148:	2300      	movs	r3, #0
 800114a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800114c:	230a      	movs	r3, #10
 800114e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001150:	2300      	movs	r3, #0
 8001152:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001154:	2301      	movs	r3, #1
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001158:	2300      	movs	r3, #0
 800115a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800115c:	230a      	movs	r3, #10
 800115e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001160:	f107 030c 	add.w	r3, r7, #12
 8001164:	4619      	mov	r1, r3
 8001166:	480d      	ldr	r0, [pc, #52]	; (800119c <MX_TIM1_Init+0xa8>)
 8001168:	f004 fa60 	bl	800562c <HAL_TIM_Encoder_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001172:	f000 fa05 	bl	8001580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117a:	2300      	movs	r3, #0
 800117c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	4619      	mov	r1, r3
 8001182:	4806      	ldr	r0, [pc, #24]	; (800119c <MX_TIM1_Init+0xa8>)
 8001184:	f004 ff7a 	bl	800607c <HAL_TIMEx_MasterConfigSynchronization>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800118e:	f000 f9f7 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	3730      	adds	r7, #48	; 0x30
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000100 	.word	0x20000100
 80011a0:	40012c00 	.word	0x40012c00

080011a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08c      	sub	sp, #48	; 0x30
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011aa:	f107 030c 	add.w	r3, r7, #12
 80011ae:	2224      	movs	r2, #36	; 0x24
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f004 fffc 	bl	80061b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011c0:	4b21      	ldr	r3, [pc, #132]	; (8001248 <MX_TIM2_Init+0xa4>)
 80011c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011c8:	4b1f      	ldr	r3, [pc, #124]	; (8001248 <MX_TIM2_Init+0xa4>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ce:	4b1e      	ldr	r3, [pc, #120]	; (8001248 <MX_TIM2_Init+0xa4>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80011d4:	4b1c      	ldr	r3, [pc, #112]	; (8001248 <MX_TIM2_Init+0xa4>)
 80011d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011dc:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <MX_TIM2_Init+0xa4>)
 80011de:	2200      	movs	r2, #0
 80011e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e2:	4b19      	ldr	r3, [pc, #100]	; (8001248 <MX_TIM2_Init+0xa4>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80011e8:	2301      	movs	r3, #1
 80011ea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011ec:	2300      	movs	r3, #0
 80011ee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011f0:	2301      	movs	r3, #1
 80011f2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80011f8:	230a      	movs	r3, #10
 80011fa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011fc:	2300      	movs	r3, #0
 80011fe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001200:	2301      	movs	r3, #1
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001204:	2300      	movs	r3, #0
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001208:	230a      	movs	r3, #10
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	4619      	mov	r1, r3
 8001212:	480d      	ldr	r0, [pc, #52]	; (8001248 <MX_TIM2_Init+0xa4>)
 8001214:	f004 fa0a 	bl	800562c <HAL_TIM_Encoder_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800121e:	f000 f9af 	bl	8001580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	4619      	mov	r1, r3
 800122e:	4806      	ldr	r0, [pc, #24]	; (8001248 <MX_TIM2_Init+0xa4>)
 8001230:	f004 ff24 	bl	800607c <HAL_TIMEx_MasterConfigSynchronization>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800123a:	f000 f9a1 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	3730      	adds	r7, #48	; 0x30
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000148 	.word	0x20000148

0800124c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001252:	f107 0320 	add.w	r3, r7, #32
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
 8001268:	611a      	str	r2, [r3, #16]
 800126a:	615a      	str	r2, [r3, #20]
 800126c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800126e:	4b27      	ldr	r3, [pc, #156]	; (800130c <MX_TIM3_Init+0xc0>)
 8001270:	4a27      	ldr	r2, [pc, #156]	; (8001310 <MX_TIM3_Init+0xc4>)
 8001272:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48;
 8001274:	4b25      	ldr	r3, [pc, #148]	; (800130c <MX_TIM3_Init+0xc0>)
 8001276:	2230      	movs	r2, #48	; 0x30
 8001278:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127a:	4b24      	ldr	r3, [pc, #144]	; (800130c <MX_TIM3_Init+0xc0>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 8001280:	4b22      	ldr	r3, [pc, #136]	; (800130c <MX_TIM3_Init+0xc0>)
 8001282:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001286:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001288:	4b20      	ldr	r3, [pc, #128]	; (800130c <MX_TIM3_Init+0xc0>)
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800128e:	4b1f      	ldr	r3, [pc, #124]	; (800130c <MX_TIM3_Init+0xc0>)
 8001290:	2280      	movs	r2, #128	; 0x80
 8001292:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001294:	481d      	ldr	r0, [pc, #116]	; (800130c <MX_TIM3_Init+0xc0>)
 8001296:	f004 f8d7 	bl	8005448 <HAL_TIM_PWM_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80012a0:	f000 f96e 	bl	8001580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a4:	2300      	movs	r3, #0
 80012a6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012ac:	f107 0320 	add.w	r3, r7, #32
 80012b0:	4619      	mov	r1, r3
 80012b2:	4816      	ldr	r0, [pc, #88]	; (800130c <MX_TIM3_Init+0xc0>)
 80012b4:	f004 fee2 	bl	800607c <HAL_TIMEx_MasterConfigSynchronization>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80012be:	f000 f95f 	bl	8001580 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012c2:	2360      	movs	r3, #96	; 0x60
 80012c4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	2200      	movs	r2, #0
 80012d6:	4619      	mov	r1, r3
 80012d8:	480c      	ldr	r0, [pc, #48]	; (800130c <MX_TIM3_Init+0xc0>)
 80012da:	f004 fbdf 	bl	8005a9c <HAL_TIM_PWM_ConfigChannel>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80012e4:	f000 f94c 	bl	8001580 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	2204      	movs	r2, #4
 80012ec:	4619      	mov	r1, r3
 80012ee:	4807      	ldr	r0, [pc, #28]	; (800130c <MX_TIM3_Init+0xc0>)
 80012f0:	f004 fbd4 	bl	8005a9c <HAL_TIM_PWM_ConfigChannel>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80012fa:	f000 f941 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012fe:	4803      	ldr	r0, [pc, #12]	; (800130c <MX_TIM3_Init+0xc0>)
 8001300:	f000 fa52 	bl	80017a8 <HAL_TIM_MspPostInit>

}
 8001304:	bf00      	nop
 8001306:	3728      	adds	r7, #40	; 0x28
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000190 	.word	0x20000190
 8001310:	40000400 	.word	0x40000400

08001314 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	; 0x28
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131a:	f107 0320 	add.w	r3, r7, #32
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
 8001330:	611a      	str	r2, [r3, #16]
 8001332:	615a      	str	r2, [r3, #20]
 8001334:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001336:	4b27      	ldr	r3, [pc, #156]	; (80013d4 <MX_TIM4_Init+0xc0>)
 8001338:	4a27      	ldr	r2, [pc, #156]	; (80013d8 <MX_TIM4_Init+0xc4>)
 800133a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48;
 800133c:	4b25      	ldr	r3, [pc, #148]	; (80013d4 <MX_TIM4_Init+0xc0>)
 800133e:	2230      	movs	r2, #48	; 0x30
 8001340:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001342:	4b24      	ldr	r3, [pc, #144]	; (80013d4 <MX_TIM4_Init+0xc0>)
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001348:	4b22      	ldr	r3, [pc, #136]	; (80013d4 <MX_TIM4_Init+0xc0>)
 800134a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800134e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001350:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <MX_TIM4_Init+0xc0>)
 8001352:	2200      	movs	r2, #0
 8001354:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001356:	4b1f      	ldr	r3, [pc, #124]	; (80013d4 <MX_TIM4_Init+0xc0>)
 8001358:	2280      	movs	r2, #128	; 0x80
 800135a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800135c:	481d      	ldr	r0, [pc, #116]	; (80013d4 <MX_TIM4_Init+0xc0>)
 800135e:	f004 f873 	bl	8005448 <HAL_TIM_PWM_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001368:	f000 f90a 	bl	8001580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800136c:	2300      	movs	r3, #0
 800136e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001370:	2300      	movs	r3, #0
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001374:	f107 0320 	add.w	r3, r7, #32
 8001378:	4619      	mov	r1, r3
 800137a:	4816      	ldr	r0, [pc, #88]	; (80013d4 <MX_TIM4_Init+0xc0>)
 800137c:	f004 fe7e 	bl	800607c <HAL_TIMEx_MasterConfigSynchronization>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001386:	f000 f8fb 	bl	8001580 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800138a:	2360      	movs	r3, #96	; 0x60
 800138c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2204      	movs	r2, #4
 800139e:	4619      	mov	r1, r3
 80013a0:	480c      	ldr	r0, [pc, #48]	; (80013d4 <MX_TIM4_Init+0xc0>)
 80013a2:	f004 fb7b 	bl	8005a9c <HAL_TIM_PWM_ConfigChannel>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80013ac:	f000 f8e8 	bl	8001580 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	2208      	movs	r2, #8
 80013b4:	4619      	mov	r1, r3
 80013b6:	4807      	ldr	r0, [pc, #28]	; (80013d4 <MX_TIM4_Init+0xc0>)
 80013b8:	f004 fb70 	bl	8005a9c <HAL_TIM_PWM_ConfigChannel>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80013c2:	f000 f8dd 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80013c6:	4803      	ldr	r0, [pc, #12]	; (80013d4 <MX_TIM4_Init+0xc0>)
 80013c8:	f000 f9ee 	bl	80017a8 <HAL_TIM_MspPostInit>

}
 80013cc:	bf00      	nop
 80013ce:	3728      	adds	r7, #40	; 0x28
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	200001d8 	.word	0x200001d8
 80013d8:	40000800 	.word	0x40000800

080013dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b088      	sub	sp, #32
 80013e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e2:	f107 0310 	add.w	r3, r7, #16
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f0:	4b5d      	ldr	r3, [pc, #372]	; (8001568 <MX_GPIO_Init+0x18c>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	4a5c      	ldr	r2, [pc, #368]	; (8001568 <MX_GPIO_Init+0x18c>)
 80013f6:	f043 0310 	orr.w	r3, r3, #16
 80013fa:	6193      	str	r3, [r2, #24]
 80013fc:	4b5a      	ldr	r3, [pc, #360]	; (8001568 <MX_GPIO_Init+0x18c>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	f003 0310 	and.w	r3, r3, #16
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001408:	4b57      	ldr	r3, [pc, #348]	; (8001568 <MX_GPIO_Init+0x18c>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	4a56      	ldr	r2, [pc, #344]	; (8001568 <MX_GPIO_Init+0x18c>)
 800140e:	f043 0320 	orr.w	r3, r3, #32
 8001412:	6193      	str	r3, [r2, #24]
 8001414:	4b54      	ldr	r3, [pc, #336]	; (8001568 <MX_GPIO_Init+0x18c>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	f003 0320 	and.w	r3, r3, #32
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001420:	4b51      	ldr	r3, [pc, #324]	; (8001568 <MX_GPIO_Init+0x18c>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	4a50      	ldr	r2, [pc, #320]	; (8001568 <MX_GPIO_Init+0x18c>)
 8001426:	f043 0304 	orr.w	r3, r3, #4
 800142a:	6193      	str	r3, [r2, #24]
 800142c:	4b4e      	ldr	r3, [pc, #312]	; (8001568 <MX_GPIO_Init+0x18c>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001438:	4b4b      	ldr	r3, [pc, #300]	; (8001568 <MX_GPIO_Init+0x18c>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	4a4a      	ldr	r2, [pc, #296]	; (8001568 <MX_GPIO_Init+0x18c>)
 800143e:	f043 0308 	orr.w	r3, r3, #8
 8001442:	6193      	str	r3, [r2, #24]
 8001444:	4b48      	ldr	r3, [pc, #288]	; (8001568 <MX_GPIO_Init+0x18c>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	f003 0308 	and.w	r3, r3, #8
 800144c:	603b      	str	r3, [r7, #0]
 800144e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Y10_Pin|Y11_Pin|Y7_Pin, GPIO_PIN_RESET);
 8001450:	2200      	movs	r2, #0
 8001452:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8001456:	4845      	ldr	r0, [pc, #276]	; (800156c <MX_GPIO_Init+0x190>)
 8001458:	f002 ff0b 	bl	8004272 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Y3_Pin|Y4_Pin|Y5_Pin|Y6_Pin, GPIO_PIN_RESET);
 800145c:	2200      	movs	r2, #0
 800145e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001462:	4843      	ldr	r0, [pc, #268]	; (8001570 <MX_GPIO_Init+0x194>)
 8001464:	f002 ff05 	bl	8004272 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001468:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800146c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800146e:	2303      	movs	r3, #3
 8001470:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001472:	f107 0310 	add.w	r3, r7, #16
 8001476:	4619      	mov	r1, r3
 8001478:	483e      	ldr	r0, [pc, #248]	; (8001574 <MX_GPIO_Init+0x198>)
 800147a:	f002 fd5f 	bl	8003f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PROBE_Pin */
  GPIO_InitStruct.Pin = PROBE_Pin;
 800147e:	2304      	movs	r3, #4
 8001480:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001482:	4b3d      	ldr	r3, [pc, #244]	; (8001578 <MX_GPIO_Init+0x19c>)
 8001484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PROBE_GPIO_Port, &GPIO_InitStruct);
 800148a:	f107 0310 	add.w	r3, r7, #16
 800148e:	4619      	mov	r1, r3
 8001490:	4836      	ldr	r0, [pc, #216]	; (800156c <MX_GPIO_Init+0x190>)
 8001492:	f002 fd53 	bl	8003f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_12;
 8001496:	f641 0308 	movw	r3, #6152	; 0x1808
 800149a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800149c:	2303      	movs	r3, #3
 800149e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a0:	f107 0310 	add.w	r3, r7, #16
 80014a4:	4619      	mov	r1, r3
 80014a6:	4831      	ldr	r0, [pc, #196]	; (800156c <MX_GPIO_Init+0x190>)
 80014a8:	f002 fd48 	bl	8003f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : Y10_Pin Y11_Pin Y7_Pin */
  GPIO_InitStruct.Pin = Y10_Pin|Y11_Pin|Y7_Pin;
 80014ac:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80014b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b2:	2301      	movs	r3, #1
 80014b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ba:	2302      	movs	r3, #2
 80014bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014be:	f107 0310 	add.w	r3, r7, #16
 80014c2:	4619      	mov	r1, r3
 80014c4:	4829      	ldr	r0, [pc, #164]	; (800156c <MX_GPIO_Init+0x190>)
 80014c6:	f002 fd39 	bl	8003f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : X0_Pin X1_Pin X7_Pin */
  GPIO_InitStruct.Pin = X0_Pin|X1_Pin|X7_Pin;
 80014ca:	f240 2303 	movw	r3, #515	; 0x203
 80014ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014d4:	2301      	movs	r3, #1
 80014d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d8:	f107 0310 	add.w	r3, r7, #16
 80014dc:	4619      	mov	r1, r3
 80014de:	4824      	ldr	r0, [pc, #144]	; (8001570 <MX_GPIO_Init+0x194>)
 80014e0:	f002 fd2c 	bl	8003f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014e4:	2304      	movs	r3, #4
 80014e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014e8:	2303      	movs	r3, #3
 80014ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ec:	f107 0310 	add.w	r3, r7, #16
 80014f0:	4619      	mov	r1, r3
 80014f2:	481f      	ldr	r0, [pc, #124]	; (8001570 <MX_GPIO_Init+0x194>)
 80014f4:	f002 fd22 	bl	8003f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : Y3_Pin Y4_Pin Y5_Pin Y6_Pin */
  GPIO_InitStruct.Pin = Y3_Pin|Y4_Pin|Y5_Pin|Y6_Pin;
 80014f8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80014fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fe:	2301      	movs	r3, #1
 8001500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2302      	movs	r3, #2
 8001508:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150a:	f107 0310 	add.w	r3, r7, #16
 800150e:	4619      	mov	r1, r3
 8001510:	4817      	ldr	r0, [pc, #92]	; (8001570 <MX_GPIO_Init+0x194>)
 8001512:	f002 fd13 	bl	8003f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : X2_Pin */
  GPIO_InitStruct.Pin = X2_Pin;
 8001516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800151a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001520:	2301      	movs	r3, #1
 8001522:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(X2_GPIO_Port, &GPIO_InitStruct);
 8001524:	f107 0310 	add.w	r3, r7, #16
 8001528:	4619      	mov	r1, r3
 800152a:	4810      	ldr	r0, [pc, #64]	; (800156c <MX_GPIO_Init+0x190>)
 800152c:	f002 fd06 	bl	8003f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : X3_Pin X4_Pin X5_Pin */
  GPIO_InitStruct.Pin = X3_Pin|X4_Pin|X5_Pin;
 8001530:	2338      	movs	r3, #56	; 0x38
 8001532:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001534:	4b11      	ldr	r3, [pc, #68]	; (800157c <MX_GPIO_Init+0x1a0>)
 8001536:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001538:	2301      	movs	r3, #1
 800153a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153c:	f107 0310 	add.w	r3, r7, #16
 8001540:	4619      	mov	r1, r3
 8001542:	480b      	ldr	r0, [pc, #44]	; (8001570 <MX_GPIO_Init+0x194>)
 8001544:	f002 fcfa 	bl	8003f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : X6_Pin */
  GPIO_InitStruct.Pin = X6_Pin;
 8001548:	2340      	movs	r3, #64	; 0x40
 800154a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(X6_GPIO_Port, &GPIO_InitStruct);
 8001554:	f107 0310 	add.w	r3, r7, #16
 8001558:	4619      	mov	r1, r3
 800155a:	4805      	ldr	r0, [pc, #20]	; (8001570 <MX_GPIO_Init+0x194>)
 800155c:	f002 fcee 	bl	8003f3c <HAL_GPIO_Init>

}
 8001560:	bf00      	nop
 8001562:	3720      	adds	r7, #32
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40021000 	.word	0x40021000
 800156c:	40010800 	.word	0x40010800
 8001570:	40010c00 	.word	0x40010c00
 8001574:	40011000 	.word	0x40011000
 8001578:	10110000 	.word	0x10110000
 800157c:	10310000 	.word	0x10310000

08001580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001584:	b672      	cpsid	i
}
 8001586:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001588:	e7fe      	b.n	8001588 <Error_Handler+0x8>
	...

0800158c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001592:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <HAL_MspInit+0x5c>)
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	4a14      	ldr	r2, [pc, #80]	; (80015e8 <HAL_MspInit+0x5c>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6193      	str	r3, [r2, #24]
 800159e:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <HAL_MspInit+0x5c>)
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015aa:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <HAL_MspInit+0x5c>)
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	4a0e      	ldr	r2, [pc, #56]	; (80015e8 <HAL_MspInit+0x5c>)
 80015b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b4:	61d3      	str	r3, [r2, #28]
 80015b6:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <HAL_MspInit+0x5c>)
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015be:	607b      	str	r3, [r7, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015c2:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <HAL_MspInit+0x60>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	4a04      	ldr	r2, [pc, #16]	; (80015ec <HAL_MspInit+0x60>)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015de:	bf00      	nop
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40010000 	.word	0x40010000

080015f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b088      	sub	sp, #32
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 0310 	add.w	r3, r7, #16
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a16      	ldr	r2, [pc, #88]	; (8001664 <HAL_I2C_MspInit+0x74>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d124      	bne.n	800165a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001610:	4b15      	ldr	r3, [pc, #84]	; (8001668 <HAL_I2C_MspInit+0x78>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	4a14      	ldr	r2, [pc, #80]	; (8001668 <HAL_I2C_MspInit+0x78>)
 8001616:	f043 0308 	orr.w	r3, r3, #8
 800161a:	6193      	str	r3, [r2, #24]
 800161c:	4b12      	ldr	r3, [pc, #72]	; (8001668 <HAL_I2C_MspInit+0x78>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	f003 0308 	and.w	r3, r3, #8
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8001628:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800162c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800162e:	2312      	movs	r3, #18
 8001630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001632:	2303      	movs	r3, #3
 8001634:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001636:	f107 0310 	add.w	r3, r7, #16
 800163a:	4619      	mov	r1, r3
 800163c:	480b      	ldr	r0, [pc, #44]	; (800166c <HAL_I2C_MspInit+0x7c>)
 800163e:	f002 fc7d 	bl	8003f3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001642:	4b09      	ldr	r3, [pc, #36]	; (8001668 <HAL_I2C_MspInit+0x78>)
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	4a08      	ldr	r2, [pc, #32]	; (8001668 <HAL_I2C_MspInit+0x78>)
 8001648:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800164c:	61d3      	str	r3, [r2, #28]
 800164e:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_I2C_MspInit+0x78>)
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001656:	60bb      	str	r3, [r7, #8]
 8001658:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800165a:	bf00      	nop
 800165c:	3720      	adds	r7, #32
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40005800 	.word	0x40005800
 8001668:	40021000 	.word	0x40021000
 800166c:	40010c00 	.word	0x40010c00

08001670 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	; 0x28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 0318 	add.w	r3, r7, #24
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a2b      	ldr	r2, [pc, #172]	; (8001738 <HAL_TIM_Encoder_MspInit+0xc8>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d125      	bne.n	80016dc <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001690:	4b2a      	ldr	r3, [pc, #168]	; (800173c <HAL_TIM_Encoder_MspInit+0xcc>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	4a29      	ldr	r2, [pc, #164]	; (800173c <HAL_TIM_Encoder_MspInit+0xcc>)
 8001696:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800169a:	6193      	str	r3, [r2, #24]
 800169c:	4b27      	ldr	r3, [pc, #156]	; (800173c <HAL_TIM_Encoder_MspInit+0xcc>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016a4:	617b      	str	r3, [r7, #20]
 80016a6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a8:	4b24      	ldr	r3, [pc, #144]	; (800173c <HAL_TIM_Encoder_MspInit+0xcc>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	4a23      	ldr	r2, [pc, #140]	; (800173c <HAL_TIM_Encoder_MspInit+0xcc>)
 80016ae:	f043 0304 	orr.w	r3, r3, #4
 80016b2:	6193      	str	r3, [r2, #24]
 80016b4:	4b21      	ldr	r3, [pc, #132]	; (800173c <HAL_TIM_Encoder_MspInit+0xcc>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	613b      	str	r3, [r7, #16]
 80016be:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ECD_1A_Pin|ECD_1B_Pin;
 80016c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ce:	f107 0318 	add.w	r3, r7, #24
 80016d2:	4619      	mov	r1, r3
 80016d4:	481a      	ldr	r0, [pc, #104]	; (8001740 <HAL_TIM_Encoder_MspInit+0xd0>)
 80016d6:	f002 fc31 	bl	8003f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016da:	e028      	b.n	800172e <HAL_TIM_Encoder_MspInit+0xbe>
  else if(htim_encoder->Instance==TIM2)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016e4:	d123      	bne.n	800172e <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <HAL_TIM_Encoder_MspInit+0xcc>)
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	4a14      	ldr	r2, [pc, #80]	; (800173c <HAL_TIM_Encoder_MspInit+0xcc>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	61d3      	str	r3, [r2, #28]
 80016f2:	4b12      	ldr	r3, [pc, #72]	; (800173c <HAL_TIM_Encoder_MspInit+0xcc>)
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fe:	4b0f      	ldr	r3, [pc, #60]	; (800173c <HAL_TIM_Encoder_MspInit+0xcc>)
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	4a0e      	ldr	r2, [pc, #56]	; (800173c <HAL_TIM_Encoder_MspInit+0xcc>)
 8001704:	f043 0304 	orr.w	r3, r3, #4
 8001708:	6193      	str	r3, [r2, #24]
 800170a:	4b0c      	ldr	r3, [pc, #48]	; (800173c <HAL_TIM_Encoder_MspInit+0xcc>)
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	f003 0304 	and.w	r3, r3, #4
 8001712:	60bb      	str	r3, [r7, #8]
 8001714:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ECD_2A_Pin|ECD_2B_Pin;
 8001716:	2303      	movs	r3, #3
 8001718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001722:	f107 0318 	add.w	r3, r7, #24
 8001726:	4619      	mov	r1, r3
 8001728:	4805      	ldr	r0, [pc, #20]	; (8001740 <HAL_TIM_Encoder_MspInit+0xd0>)
 800172a:	f002 fc07 	bl	8003f3c <HAL_GPIO_Init>
}
 800172e:	bf00      	nop
 8001730:	3728      	adds	r7, #40	; 0x28
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40012c00 	.word	0x40012c00
 800173c:	40021000 	.word	0x40021000
 8001740:	40010800 	.word	0x40010800

08001744 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a12      	ldr	r2, [pc, #72]	; (800179c <HAL_TIM_PWM_MspInit+0x58>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d10c      	bne.n	8001770 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001756:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <HAL_TIM_PWM_MspInit+0x5c>)
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	4a11      	ldr	r2, [pc, #68]	; (80017a0 <HAL_TIM_PWM_MspInit+0x5c>)
 800175c:	f043 0302 	orr.w	r3, r3, #2
 8001760:	61d3      	str	r3, [r2, #28]
 8001762:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <HAL_TIM_PWM_MspInit+0x5c>)
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800176e:	e010      	b.n	8001792 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a0b      	ldr	r2, [pc, #44]	; (80017a4 <HAL_TIM_PWM_MspInit+0x60>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d10b      	bne.n	8001792 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <HAL_TIM_PWM_MspInit+0x5c>)
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	4a08      	ldr	r2, [pc, #32]	; (80017a0 <HAL_TIM_PWM_MspInit+0x5c>)
 8001780:	f043 0304 	orr.w	r3, r3, #4
 8001784:	61d3      	str	r3, [r2, #28]
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <HAL_TIM_PWM_MspInit+0x5c>)
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	68bb      	ldr	r3, [r7, #8]
}
 8001792:	bf00      	nop
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr
 800179c:	40000400 	.word	0x40000400
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40000800 	.word	0x40000800

080017a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b088      	sub	sp, #32
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b0:	f107 0310 	add.w	r3, r7, #16
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a1f      	ldr	r2, [pc, #124]	; (8001840 <HAL_TIM_MspPostInit+0x98>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d118      	bne.n	80017fa <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c8:	4b1e      	ldr	r3, [pc, #120]	; (8001844 <HAL_TIM_MspPostInit+0x9c>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	4a1d      	ldr	r2, [pc, #116]	; (8001844 <HAL_TIM_MspPostInit+0x9c>)
 80017ce:	f043 0304 	orr.w	r3, r3, #4
 80017d2:	6193      	str	r3, [r2, #24]
 80017d4:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <HAL_TIM_MspPostInit+0x9c>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWM_1A_Pin|PWM_1B_Pin;
 80017e0:	23c0      	movs	r3, #192	; 0xc0
 80017e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e4:	2302      	movs	r3, #2
 80017e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e8:	2302      	movs	r3, #2
 80017ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ec:	f107 0310 	add.w	r3, r7, #16
 80017f0:	4619      	mov	r1, r3
 80017f2:	4815      	ldr	r0, [pc, #84]	; (8001848 <HAL_TIM_MspPostInit+0xa0>)
 80017f4:	f002 fba2 	bl	8003f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80017f8:	e01d      	b.n	8001836 <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM4)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a13      	ldr	r2, [pc, #76]	; (800184c <HAL_TIM_MspPostInit+0xa4>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d118      	bne.n	8001836 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001804:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <HAL_TIM_MspPostInit+0x9c>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	4a0e      	ldr	r2, [pc, #56]	; (8001844 <HAL_TIM_MspPostInit+0x9c>)
 800180a:	f043 0308 	orr.w	r3, r3, #8
 800180e:	6193      	str	r3, [r2, #24]
 8001810:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <HAL_TIM_MspPostInit+0x9c>)
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	f003 0308 	and.w	r3, r3, #8
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_2A_Pin|PWM_2B_Pin;
 800181c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001820:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	2302      	movs	r3, #2
 8001824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001826:	2302      	movs	r3, #2
 8001828:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182a:	f107 0310 	add.w	r3, r7, #16
 800182e:	4619      	mov	r1, r3
 8001830:	4807      	ldr	r0, [pc, #28]	; (8001850 <HAL_TIM_MspPostInit+0xa8>)
 8001832:	f002 fb83 	bl	8003f3c <HAL_GPIO_Init>
}
 8001836:	bf00      	nop
 8001838:	3720      	adds	r7, #32
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40000400 	.word	0x40000400
 8001844:	40021000 	.word	0x40021000
 8001848:	40010800 	.word	0x40010800
 800184c:	40000800 	.word	0x40000800
 8001850:	40010c00 	.word	0x40010c00

08001854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) {
 8001858:	e7fe      	b.n	8001858 <NMI_Handler+0x4>

0800185a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800185e:	e7fe      	b.n	800185e <HardFault_Handler+0x4>

08001860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001864:	e7fe      	b.n	8001864 <MemManage_Handler+0x4>

08001866 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800186a:	e7fe      	b.n	800186a <BusFault_Handler+0x4>

0800186c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001870:	e7fe      	b.n	8001870 <UsageFault_Handler+0x4>

08001872 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr

0800187e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr

0800188a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr

08001896 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800189a:	f002 f801 	bl	80038a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PROBE_Pin);
 80018a6:	2004      	movs	r0, #4
 80018a8:	f002 fd14 	bl	80042d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80018ac:	bf00      	nop
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(X3_Pin);
 80018b4:	2008      	movs	r0, #8
 80018b6:	f002 fd0d 	bl	80042d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}

080018be <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(X4_Pin);
 80018c2:	2010      	movs	r0, #16
 80018c4:	f002 fd06 	bl	80042d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}

080018cc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(X5_Pin);
 80018d0:	2020      	movs	r0, #32
 80018d2:	f002 fcff 	bl	80042d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80018e0:	4802      	ldr	r0, [pc, #8]	; (80018ec <TIM4_IRQHandler+0x10>)
 80018e2:	f003 ffd3 	bl	800588c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	200001d8 	.word	0x200001d8

080018f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018f8:	4a14      	ldr	r2, [pc, #80]	; (800194c <_sbrk+0x5c>)
 80018fa:	4b15      	ldr	r3, [pc, #84]	; (8001950 <_sbrk+0x60>)
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001904:	4b13      	ldr	r3, [pc, #76]	; (8001954 <_sbrk+0x64>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d102      	bne.n	8001912 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800190c:	4b11      	ldr	r3, [pc, #68]	; (8001954 <_sbrk+0x64>)
 800190e:	4a12      	ldr	r2, [pc, #72]	; (8001958 <_sbrk+0x68>)
 8001910:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001912:	4b10      	ldr	r3, [pc, #64]	; (8001954 <_sbrk+0x64>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	429a      	cmp	r2, r3
 800191e:	d207      	bcs.n	8001930 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001920:	f004 fc1c 	bl	800615c <__errno>
 8001924:	4603      	mov	r3, r0
 8001926:	220c      	movs	r2, #12
 8001928:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800192a:	f04f 33ff 	mov.w	r3, #4294967295
 800192e:	e009      	b.n	8001944 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001930:	4b08      	ldr	r3, [pc, #32]	; (8001954 <_sbrk+0x64>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001936:	4b07      	ldr	r3, [pc, #28]	; (8001954 <_sbrk+0x64>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4413      	add	r3, r2
 800193e:	4a05      	ldr	r2, [pc, #20]	; (8001954 <_sbrk+0x64>)
 8001940:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001942:	68fb      	ldr	r3, [r7, #12]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20005000 	.word	0x20005000
 8001950:	00000400 	.word	0x00000400
 8001954:	20000220 	.word	0x20000220
 8001958:	20000308 	.word	0x20000308

0800195c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr

08001968 <buttonInit>:
// ************************** Low Level Layer *****************************************************//
static ButtonState BUTTON_ReadPin(Button *Button) {
  return HAL_GPIO_ReadPin(Button->Port, Button->Pin);
}
// ************************** High Level Layer *****************************************************//
void buttonInit(Button *button, GPIO_TypeDef *BUTTON_PORT, uint16_t BUTTON_Pin) {
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	4613      	mov	r3, r2
 8001974:	80fb      	strh	r3, [r7, #6]
  button->Port = BUTTON_PORT;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	68ba      	ldr	r2, [r7, #8]
 800197a:	601a      	str	r2, [r3, #0]
  button->Pin = BUTTON_Pin;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	88fa      	ldrh	r2, [r7, #6]
 8001980:	809a      	strh	r2, [r3, #4]
}
 8001982:	bf00      	nop
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr

0800198c <isShortClick>:

/*
 * true if short click
 * false if long click
 * */
uint8_t isShortClick(Button *button) {
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  if (button->timePress > DEBOUND_TIME && button->timePress <= SINGLE_CLICK_TIME) {
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	2b32      	cmp	r3, #50	; 0x32
 800199a:	d906      	bls.n	80019aa <isShortClick+0x1e>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80019a4:	d801      	bhi.n	80019aa <isShortClick+0x1e>
	return 1;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e007      	b.n	80019ba <isShortClick+0x2e>
  } else if (button->timePress > SINGLE_CLICK_TIME)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80019b2:	d901      	bls.n	80019b8 <isShortClick+0x2c>
	return 2;
 80019b4:	2302      	movs	r3, #2
 80019b6:	e000      	b.n	80019ba <isShortClick+0x2e>
  else
	return 0;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr

080019c4 <CLCD_Delay>:
 CLCD_I2C_WriteString(&LCD1,"hello anh em ");
 ******************************************************************************************************************/
#include "CLCD_I2C.h"

//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time) {
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	80fb      	strh	r3, [r7, #6]
  HAL_Delay(Time);
 80019ce:	88fb      	ldrh	r3, [r7, #6]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f001 ff81 	bl	80038d8 <HAL_Delay>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name *LCD, uint8_t Data, uint8_t Mode) {
 80019de:	b580      	push	{r7, lr}
 80019e0:	b086      	sub	sp, #24
 80019e2:	af02      	add	r7, sp, #8
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	460b      	mov	r3, r1
 80019e8:	70fb      	strb	r3, [r7, #3]
 80019ea:	4613      	mov	r3, r2
 80019ec:	70bb      	strb	r3, [r7, #2]
  char Data_H;
  char Data_L;
  uint8_t Data_I2C[4];
  Data_H = Data & 0xF0;
 80019ee:	78fb      	ldrb	r3, [r7, #3]
 80019f0:	f023 030f 	bic.w	r3, r3, #15
 80019f4:	73fb      	strb	r3, [r7, #15]
  Data_L = (Data << 4) & 0xF0;
 80019f6:	78fb      	ldrb	r3, [r7, #3]
 80019f8:	011b      	lsls	r3, r3, #4
 80019fa:	73bb      	strb	r3, [r7, #14]
  if (LCD->BACKLIGHT) {
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	7adb      	ldrb	r3, [r3, #11]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d007      	beq.n	8001a14 <CLCD_WriteI2C+0x36>
	Data_H |= LCD_BACKLIGHT;
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
 8001a06:	f043 0308 	orr.w	r3, r3, #8
 8001a0a:	73fb      	strb	r3, [r7, #15]
	Data_L |= LCD_BACKLIGHT;
 8001a0c:	7bbb      	ldrb	r3, [r7, #14]
 8001a0e:	f043 0308 	orr.w	r3, r3, #8
 8001a12:	73bb      	strb	r3, [r7, #14]
  }
  if (Mode == CLCD_DATA) {
 8001a14:	78bb      	ldrb	r3, [r7, #2]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d108      	bne.n	8001a2c <CLCD_WriteI2C+0x4e>
	Data_H |= LCD_RS;
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	73fb      	strb	r3, [r7, #15]
	Data_L |= LCD_RS;
 8001a22:	7bbb      	ldrb	r3, [r7, #14]
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	73bb      	strb	r3, [r7, #14]
 8001a2a:	e00a      	b.n	8001a42 <CLCD_WriteI2C+0x64>
  } else if (Mode == CLCD_COMMAND) {
 8001a2c:	78bb      	ldrb	r3, [r7, #2]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d107      	bne.n	8001a42 <CLCD_WriteI2C+0x64>
	Data_H &= ~LCD_RS;
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
 8001a34:	f023 0301 	bic.w	r3, r3, #1
 8001a38:	73fb      	strb	r3, [r7, #15]
	Data_L &= ~LCD_RS;
 8001a3a:	7bbb      	ldrb	r3, [r7, #14]
 8001a3c:	f023 0301 	bic.w	r3, r3, #1
 8001a40:	73bb      	strb	r3, [r7, #14]
  }
  Data_I2C[0] = Data_H | LCD_EN;
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
 8001a44:	f043 0304 	orr.w	r3, r3, #4
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	723b      	strb	r3, [r7, #8]
//	CLCD_Delay(1);
  Data_I2C[1] = Data_H;
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
 8001a4e:	727b      	strb	r3, [r7, #9]
  Data_I2C[2] = Data_L | LCD_EN;
 8001a50:	7bbb      	ldrb	r3, [r7, #14]
 8001a52:	f043 0304 	orr.w	r3, r3, #4
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	72bb      	strb	r3, [r7, #10]
//	CLCD_Delay(1);
  Data_I2C[3] = Data_L;
 8001a5a:	7bbb      	ldrb	r3, [r7, #14]
 8001a5c:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t*) Data_I2C,
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6818      	ldr	r0, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	791b      	ldrb	r3, [r3, #4]
 8001a66:	b299      	uxth	r1, r3
 8001a68:	f107 0208 	add.w	r2, r7, #8
 8001a6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	2304      	movs	r3, #4
 8001a74:	f002 fd8a 	bl	800458c <HAL_I2C_Master_Transmit>
	  sizeof(Data_I2C), 1000);
}
 8001a78:	bf00      	nop
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <CLCD_I2C_Init>:

//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name *LCD, I2C_HandleTypeDef *hi2c_CLCD,
	uint8_t Address, uint8_t Colums, uint8_t Rows) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	460b      	mov	r3, r1
 8001a90:	71fb      	strb	r3, [r7, #7]
 8001a92:	4613      	mov	r3, r2
 8001a94:	71bb      	strb	r3, [r7, #6]
  LCD->I2C = hi2c_CLCD;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	68ba      	ldr	r2, [r7, #8]
 8001a9a:	601a      	str	r2, [r3, #0]
  LCD->ADDRESS = Address;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	79fa      	ldrb	r2, [r7, #7]
 8001aa0:	711a      	strb	r2, [r3, #4]
  LCD->COLUMS = Colums;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	79ba      	ldrb	r2, [r7, #6]
 8001aa6:	715a      	strb	r2, [r3, #5]
  LCD->ROWS = Rows;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	7e3a      	ldrb	r2, [r7, #24]
 8001aac:	719a      	strb	r2, [r3, #6]

  LCD->FUNCTIONSET = LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2228      	movs	r2, #40	; 0x28
 8001ab2:	729a      	strb	r2, [r3, #10]
  LCD->ENTRYMODE = LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2206      	movs	r2, #6
 8001ab8:	71da      	strb	r2, [r3, #7]
  LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	220c      	movs	r2, #12
 8001abe:	721a      	strb	r2, [r3, #8]
	  | LCD_BLINKOFF;
  LCD->CURSORSHIFT = LCD_CURSORSHIFT | LCD_CURSORMOVE | LCD_MOVERIGHT;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2214      	movs	r2, #20
 8001ac4:	725a      	strb	r2, [r3, #9]
  LCD->BACKLIGHT = LCD_BACKLIGHT;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2208      	movs	r2, #8
 8001aca:	72da      	strb	r2, [r3, #11]

  CLCD_Delay(50);
 8001acc:	2032      	movs	r0, #50	; 0x32
 8001ace:	f7ff ff79 	bl	80019c4 <CLCD_Delay>
  CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2133      	movs	r1, #51	; 0x33
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f7ff ff81 	bl	80019de <CLCD_WriteI2C>
//	CLCD_Delay(5);
  CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2133      	movs	r1, #51	; 0x33
 8001ae0:	68f8      	ldr	r0, [r7, #12]
 8001ae2:	f7ff ff7c 	bl	80019de <CLCD_WriteI2C>
  CLCD_Delay(5);
 8001ae6:	2005      	movs	r0, #5
 8001ae8:	f7ff ff6c 	bl	80019c4 <CLCD_Delay>
  CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8001aec:	2200      	movs	r2, #0
 8001aee:	2132      	movs	r1, #50	; 0x32
 8001af0:	68f8      	ldr	r0, [r7, #12]
 8001af2:	f7ff ff74 	bl	80019de <CLCD_WriteI2C>
  CLCD_Delay(5);
 8001af6:	2005      	movs	r0, #5
 8001af8:	f7ff ff64 	bl	80019c4 <CLCD_Delay>
  CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 8001afc:	2200      	movs	r2, #0
 8001afe:	2120      	movs	r1, #32
 8001b00:	68f8      	ldr	r0, [r7, #12]
 8001b02:	f7ff ff6c 	bl	80019de <CLCD_WriteI2C>
  CLCD_Delay(5);
 8001b06:	2005      	movs	r0, #5
 8001b08:	f7ff ff5c 	bl	80019c4 <CLCD_Delay>

  CLCD_WriteI2C(LCD, LCD->ENTRYMODE, CLCD_COMMAND);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	79db      	ldrb	r3, [r3, #7]
 8001b10:	2200      	movs	r2, #0
 8001b12:	4619      	mov	r1, r3
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f7ff ff62 	bl	80019de <CLCD_WriteI2C>
  CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	7a1b      	ldrb	r3, [r3, #8]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	4619      	mov	r1, r3
 8001b22:	68f8      	ldr	r0, [r7, #12]
 8001b24:	f7ff ff5b 	bl	80019de <CLCD_WriteI2C>
  CLCD_WriteI2C(LCD, LCD->CURSORSHIFT, CLCD_COMMAND);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	7a5b      	ldrb	r3, [r3, #9]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	4619      	mov	r1, r3
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f7ff ff54 	bl	80019de <CLCD_WriteI2C>
  CLCD_WriteI2C(LCD, LCD->FUNCTIONSET, CLCD_COMMAND);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	7a9b      	ldrb	r3, [r3, #10]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f7ff ff4d 	bl	80019de <CLCD_WriteI2C>

  CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 8001b44:	2200      	movs	r2, #0
 8001b46:	2101      	movs	r1, #1
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f7ff ff48 	bl	80019de <CLCD_WriteI2C>
  CLCD_WriteI2C(LCD, LCD_RETURNHOME, CLCD_COMMAND);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2102      	movs	r1, #2
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f7ff ff43 	bl	80019de <CLCD_WriteI2C>
}
 8001b58:	bf00      	nop
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name *LCD, uint8_t Xpos, uint8_t Ypos) {
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	70fb      	strb	r3, [r7, #3]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	70bb      	strb	r3, [r7, #2]
  uint8_t DRAM_ADDRESS = 0x00;
 8001b70:	2300      	movs	r3, #0
 8001b72:	73fb      	strb	r3, [r7, #15]
  if (Xpos >= LCD->COLUMS) {
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	795b      	ldrb	r3, [r3, #5]
 8001b78:	78fa      	ldrb	r2, [r7, #3]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d303      	bcc.n	8001b86 <CLCD_I2C_SetCursor+0x26>
	Xpos = LCD->COLUMS - 1;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	795b      	ldrb	r3, [r3, #5]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	70fb      	strb	r3, [r7, #3]
  }
  if (Ypos >= LCD->ROWS) {
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	799b      	ldrb	r3, [r3, #6]
 8001b8a:	78ba      	ldrb	r2, [r7, #2]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d303      	bcc.n	8001b98 <CLCD_I2C_SetCursor+0x38>
	Ypos = LCD->ROWS - 1;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	799b      	ldrb	r3, [r3, #6]
 8001b94:	3b01      	subs	r3, #1
 8001b96:	70bb      	strb	r3, [r7, #2]
  }
  if (Ypos == 0) {
 8001b98:	78bb      	ldrb	r3, [r7, #2]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d102      	bne.n	8001ba4 <CLCD_I2C_SetCursor+0x44>
	DRAM_ADDRESS = 0x00 + Xpos;
 8001b9e:	78fb      	ldrb	r3, [r7, #3]
 8001ba0:	73fb      	strb	r3, [r7, #15]
 8001ba2:	e013      	b.n	8001bcc <CLCD_I2C_SetCursor+0x6c>
  } else if (Ypos == 1) {
 8001ba4:	78bb      	ldrb	r3, [r7, #2]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d103      	bne.n	8001bb2 <CLCD_I2C_SetCursor+0x52>
	DRAM_ADDRESS = 0x40 + Xpos;
 8001baa:	78fb      	ldrb	r3, [r7, #3]
 8001bac:	3340      	adds	r3, #64	; 0x40
 8001bae:	73fb      	strb	r3, [r7, #15]
 8001bb0:	e00c      	b.n	8001bcc <CLCD_I2C_SetCursor+0x6c>
  } else if (Ypos == 2) {
 8001bb2:	78bb      	ldrb	r3, [r7, #2]
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d103      	bne.n	8001bc0 <CLCD_I2C_SetCursor+0x60>
	DRAM_ADDRESS = 0x14 + Xpos;
 8001bb8:	78fb      	ldrb	r3, [r7, #3]
 8001bba:	3314      	adds	r3, #20
 8001bbc:	73fb      	strb	r3, [r7, #15]
 8001bbe:	e005      	b.n	8001bcc <CLCD_I2C_SetCursor+0x6c>
  } else if (Ypos == 3) {
 8001bc0:	78bb      	ldrb	r3, [r7, #2]
 8001bc2:	2b03      	cmp	r3, #3
 8001bc4:	d102      	bne.n	8001bcc <CLCD_I2C_SetCursor+0x6c>
	DRAM_ADDRESS = 0x54 + Xpos;
 8001bc6:	78fb      	ldrb	r3, [r7, #3]
 8001bc8:	3354      	adds	r3, #84	; 0x54
 8001bca:	73fb      	strb	r3, [r7, #15]
  }
  CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR | DRAM_ADDRESS, CLCD_COMMAND);
 8001bcc:	7bfb      	ldrb	r3, [r7, #15]
 8001bce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7ff ff00 	bl	80019de <CLCD_WriteI2C>
}
 8001bde:	bf00      	nop
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name *LCD, char character) {
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	460b      	mov	r3, r1
 8001bf0:	70fb      	strb	r3, [r7, #3]
  CLCD_WriteI2C(LCD, character, CLCD_DATA);
 8001bf2:	78fb      	ldrb	r3, [r7, #3]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff fef0 	bl	80019de <CLCD_WriteI2C>
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name *LCD, char *String) {
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	6039      	str	r1, [r7, #0]
  while (*String)
 8001c10:	e007      	b.n	8001c22 <CLCD_I2C_WriteString+0x1c>
	CLCD_I2C_WriteChar(LCD, *String++);
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	1c5a      	adds	r2, r3, #1
 8001c16:	603a      	str	r2, [r7, #0]
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7ff ffe2 	bl	8001be6 <CLCD_I2C_WriteChar>
  while (*String)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f3      	bne.n	8001c12 <CLCD_I2C_WriteString+0xc>
}
 8001c2a:	bf00      	nop
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <CLCD_I2C_Clear>:
void CLCD_I2C_Clear(CLCD_I2C_Name *LCD) {
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2101      	movs	r1, #1
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7ff fecc 	bl	80019de <CLCD_WriteI2C>
  CLCD_Delay(5);
 8001c46:	2005      	movs	r0, #5
 8001c48:	f7ff febc 	bl	80019c4 <CLCD_Delay>
}
 8001c4c:	bf00      	nop
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <CLCD_I2C_ReturnHome>:
void CLCD_I2C_ReturnHome(CLCD_I2C_Name *LCD) {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  CLCD_WriteI2C(LCD, LCD_RETURNHOME, CLCD_COMMAND);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	2102      	movs	r1, #2
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff febc 	bl	80019de <CLCD_WriteI2C>
  CLCD_Delay(5);
 8001c66:	2005      	movs	r0, #5
 8001c68:	f7ff feac 	bl	80019c4 <CLCD_Delay>
}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <CLCD_I2C_CursorOn>:
void CLCD_I2C_CursorOn(CLCD_I2C_Name *LCD) {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  LCD->DISPLAYCTRL |= LCD_CURSORON;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	7a1b      	ldrb	r3, [r3, #8]
 8001c80:	f043 0302 	orr.w	r3, r3, #2
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	721a      	strb	r2, [r3, #8]
  CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	7a1b      	ldrb	r3, [r3, #8]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	4619      	mov	r1, r3
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff fea3 	bl	80019de <CLCD_WriteI2C>
}
 8001c98:	bf00      	nop
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <CLCD_I2C_CursorOff>:
void CLCD_I2C_CursorOff(CLCD_I2C_Name *LCD) {
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  LCD->DISPLAYCTRL &= ~LCD_CURSORON;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	7a1b      	ldrb	r3, [r3, #8]
 8001cac:	f023 0302 	bic.w	r3, r3, #2
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	721a      	strb	r2, [r3, #8]
  CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	7a1b      	ldrb	r3, [r3, #8]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff fe8d 	bl	80019de <CLCD_WriteI2C>
}
 8001cc4:	bf00      	nop
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <CLCD_I2C_BlinkOn>:
void CLCD_I2C_BlinkOn(CLCD_I2C_Name *LCD) {
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  LCD->DISPLAYCTRL |= LCD_BLINKON;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	7a1b      	ldrb	r3, [r3, #8]
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	721a      	strb	r2, [r3, #8]
  CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	7a1b      	ldrb	r3, [r3, #8]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	4619      	mov	r1, r3
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff fe77 	bl	80019de <CLCD_WriteI2C>
}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <CLCD_I2C_BlinkOff>:
void CLCD_I2C_BlinkOff(CLCD_I2C_Name *LCD) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  LCD->DISPLAYCTRL &= ~LCD_BLINKON;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	7a1b      	ldrb	r3, [r3, #8]
 8001d04:	f023 0301 	bic.w	r3, r3, #1
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	721a      	strb	r2, [r3, #8]
  CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	7a1b      	ldrb	r3, [r3, #8]
 8001d12:	2200      	movs	r2, #0
 8001d14:	4619      	mov	r1, r3
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff fe61 	bl	80019de <CLCD_WriteI2C>
}
 8001d1c:	bf00      	nop
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <LCD_Begin>:

/* Short code */
void LCD_Begin(CLCD_I2C_Name *LCD, I2C_HandleTypeDef *hi2c_CLCD,
	uint8_t Address, uint8_t Colums, uint8_t Rows) {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af02      	add	r7, sp, #8
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	4611      	mov	r1, r2
 8001d30:	461a      	mov	r2, r3
 8001d32:	460b      	mov	r3, r1
 8001d34:	71fb      	strb	r3, [r7, #7]
 8001d36:	4613      	mov	r3, r2
 8001d38:	71bb      	strb	r3, [r7, #6]
  CLCD_I2C_Init(LCD, hi2c_CLCD, Address, Colums, Rows);
 8001d3a:	79b9      	ldrb	r1, [r7, #6]
 8001d3c:	79fa      	ldrb	r2, [r7, #7]
 8001d3e:	7e3b      	ldrb	r3, [r7, #24]
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	460b      	mov	r3, r1
 8001d44:	68b9      	ldr	r1, [r7, #8]
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f7ff fe9a 	bl	8001a80 <CLCD_I2C_Init>
}
 8001d4c:	bf00      	nop
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <LCD_Set_Cursor>:
void LCD_Set_Cursor(CLCD_I2C_Name *LCD, u8 a, u8 b) {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	70fb      	strb	r3, [r7, #3]
 8001d60:	4613      	mov	r3, r2
 8001d62:	70bb      	strb	r3, [r7, #2]
  a -= 1;
 8001d64:	78fb      	ldrb	r3, [r7, #3]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	70fb      	strb	r3, [r7, #3]
  b -= 1;
 8001d6a:	78bb      	ldrb	r3, [r7, #2]
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	70bb      	strb	r3, [r7, #2]
  CLCD_I2C_SetCursor(LCD, b, a);
 8001d70:	78fa      	ldrb	r2, [r7, #3]
 8001d72:	78bb      	ldrb	r3, [r7, #2]
 8001d74:	4619      	mov	r1, r3
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7ff fef2 	bl	8001b60 <CLCD_I2C_SetCursor>
}
 8001d7c:	bf00      	nop
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <LCD_Clear>:
void LCD_Print_Char(CLCD_I2C_Name *LCD, char data) {
  CLCD_I2C_WriteChar(LCD, data);
}
void LCD_Clear(CLCD_I2C_Name *LCD) {
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  CLCD_I2C_Clear(LCD);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff ff51 	bl	8001c34 <CLCD_I2C_Clear>
  CLCD_I2C_ReturnHome(LCD);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff ff5e 	bl	8001c54 <CLCD_I2C_ReturnHome>
}
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <LCD_Print_String>:
void LCD_Print_String(CLCD_I2C_Name *LCD, char *data) {
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  CLCD_I2C_WriteString(LCD, data);
 8001daa:	6839      	ldr	r1, [r7, #0]
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff ff2a 	bl	8001c06 <CLCD_I2C_WriteString>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <LCD_Print_String_At>:
  itoa(data, temp_buffer, 10);
  u8 i;
  for (i = 0; temp_buffer[i] != '\0'; i++)
	LCD_Print_Char(LCD, temp_buffer[i]); //Split the string using pointers and call the Char function
}
void LCD_Print_String_At(CLCD_I2C_Name *LCD, u8 a, u8 b, char *data) {
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b084      	sub	sp, #16
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	60f8      	str	r0, [r7, #12]
 8001dc2:	607b      	str	r3, [r7, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	72fb      	strb	r3, [r7, #11]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	72bb      	strb	r3, [r7, #10]
  LCD_Set_Cursor(LCD, a, b);
 8001dcc:	7aba      	ldrb	r2, [r7, #10]
 8001dce:	7afb      	ldrb	r3, [r7, #11]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f7ff ffbe 	bl	8001d54 <LCD_Set_Cursor>
  LCD_Print_String(LCD, data);
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f7ff ffe0 	bl	8001da0 <LCD_Print_String>
}
 8001de0:	bf00      	nop
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <start_up>:

u8 menu2_subCounter = 1;
bool firstMinSelected = 0, lastMinSelected = 0;
bool firstSecSelected = 0, lastSecSelected = 0;

void start_up() {
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af02      	add	r7, sp, #8
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001dee:	213c      	movs	r1, #60	; 0x3c
 8001df0:	4846      	ldr	r0, [pc, #280]	; (8001f0c <start_up+0x124>)
 8001df2:	f003 fcbd 	bl	8005770 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001df6:	213c      	movs	r1, #60	; 0x3c
 8001df8:	4845      	ldr	r0, [pc, #276]	; (8001f10 <start_up+0x128>)
 8001dfa:	f003 fcb9 	bl	8005770 <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start_IT(&htim4); //1ms
 8001dfe:	4845      	ldr	r0, [pc, #276]	; (8001f14 <start_up+0x12c>)
 8001e00:	f003 fad0 	bl	80053a4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);	//PWM2B
 8001e04:	2108      	movs	r1, #8
 8001e06:	4843      	ldr	r0, [pc, #268]	; (8001f14 <start_up+0x12c>)
 8001e08:	f003 fb6e 	bl	80054e8 <HAL_TIM_PWM_Start>

  HAL_Delay(10);
 8001e0c:	200a      	movs	r0, #10
 8001e0e:	f001 fd63 	bl	80038d8 <HAL_Delay>

  buttonInit(&BTN_Start, BTN_Start_GPIO_Port, BTN_Start_Pin);
 8001e12:	2208      	movs	r2, #8
 8001e14:	4940      	ldr	r1, [pc, #256]	; (8001f18 <start_up+0x130>)
 8001e16:	4841      	ldr	r0, [pc, #260]	; (8001f1c <start_up+0x134>)
 8001e18:	f7ff fda6 	bl	8001968 <buttonInit>
  buttonInit(&BTN_Stop, BTN_Stop_GPIO_Port, BTN_Stop_Pin);
 8001e1c:	2210      	movs	r2, #16
 8001e1e:	493e      	ldr	r1, [pc, #248]	; (8001f18 <start_up+0x130>)
 8001e20:	483f      	ldr	r0, [pc, #252]	; (8001f20 <start_up+0x138>)
 8001e22:	f7ff fda1 	bl	8001968 <buttonInit>
  buttonInit(&BTN_Mode, BTN_Mode_GPIO_Port, BTN_Mode_Pin);
 8001e26:	2220      	movs	r2, #32
 8001e28:	493b      	ldr	r1, [pc, #236]	; (8001f18 <start_up+0x130>)
 8001e2a:	483e      	ldr	r0, [pc, #248]	; (8001f24 <start_up+0x13c>)
 8001e2c:	f7ff fd9c 	bl	8001968 <buttonInit>

  // Splash screen
  LCD_Begin(&LCD, &hi2c2, 0x4E, 20, 4);
 8001e30:	2304      	movs	r3, #4
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	2314      	movs	r3, #20
 8001e36:	224e      	movs	r2, #78	; 0x4e
 8001e38:	493b      	ldr	r1, [pc, #236]	; (8001f28 <start_up+0x140>)
 8001e3a:	483c      	ldr	r0, [pc, #240]	; (8001f2c <start_up+0x144>)
 8001e3c:	f7ff ff72 	bl	8001d24 <LCD_Begin>
   |   CUTTING TESTER   |
   |                    |
   ----------------------
   **************************/

  LCD_Clear(&LCD);
 8001e40:	483a      	ldr	r0, [pc, #232]	; (8001f2c <start_up+0x144>)
 8001e42:	f7ff ff9f 	bl	8001d84 <LCD_Clear>
  LED_ON();
 8001e46:	f001 f817 	bl	8002e78 <LED_ON>
  LCD_Print_String_At(&LCD, 1, 4, "Safety Glove &");
 8001e4a:	4b39      	ldr	r3, [pc, #228]	; (8001f30 <start_up+0x148>)
 8001e4c:	2204      	movs	r2, #4
 8001e4e:	2101      	movs	r1, #1
 8001e50:	4836      	ldr	r0, [pc, #216]	; (8001f2c <start_up+0x144>)
 8001e52:	f7ff ffb2 	bl	8001dba <LCD_Print_String_At>
  LCD_Print_String_At(&LCD, 2, 6, "Shoe Upper");
 8001e56:	4b37      	ldr	r3, [pc, #220]	; (8001f34 <start_up+0x14c>)
 8001e58:	2206      	movs	r2, #6
 8001e5a:	2102      	movs	r1, #2
 8001e5c:	4833      	ldr	r0, [pc, #204]	; (8001f2c <start_up+0x144>)
 8001e5e:	f7ff ffac 	bl	8001dba <LCD_Print_String_At>
  LCD_Print_String_At(&LCD, 3, 4, "Cutting Tester");
 8001e62:	4b35      	ldr	r3, [pc, #212]	; (8001f38 <start_up+0x150>)
 8001e64:	2204      	movs	r2, #4
 8001e66:	2103      	movs	r1, #3
 8001e68:	4830      	ldr	r0, [pc, #192]	; (8001f2c <start_up+0x144>)
 8001e6a:	f7ff ffa6 	bl	8001dba <LCD_Print_String_At>

  // Restore value
  menu1_value = (u8) FLASH_ReadData(FLASH_USER_START_ADDR); // Speed
 8001e6e:	4833      	ldr	r0, [pc, #204]	; (8001f3c <start_up+0x154>)
 8001e70:	f001 f826 	bl	8002ec0 <FLASH_ReadData>
 8001e74:	4603      	mov	r3, r0
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	4b31      	ldr	r3, [pc, #196]	; (8001f40 <start_up+0x158>)
 8001e7a:	701a      	strb	r2, [r3, #0]
  menu2_value = (u32) FLASH_ReadData(FLASH_USER_START_ADDR + 4); // set sec
 8001e7c:	4831      	ldr	r0, [pc, #196]	; (8001f44 <start_up+0x15c>)
 8001e7e:	f001 f81f 	bl	8002ec0 <FLASH_ReadData>
 8001e82:	4603      	mov	r3, r0
 8001e84:	4a30      	ldr	r2, [pc, #192]	; (8001f48 <start_up+0x160>)
 8001e86:	6013      	str	r3, [r2, #0]
  menu3_value = (s32) FLASH_ReadData(FLASH_USER_START_ADDR + 8); //set count
 8001e88:	4830      	ldr	r0, [pc, #192]	; (8001f4c <start_up+0x164>)
 8001e8a:	f001 f819 	bl	8002ec0 <FLASH_ReadData>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	461a      	mov	r2, r3
 8001e92:	4b2f      	ldr	r3, [pc, #188]	; (8001f50 <start_up+0x168>)
 8001e94:	601a      	str	r2, [r3, #0]

  // speed
  if (menu1_value > maxMenu1Value)
 8001e96:	4b2a      	ldr	r3, [pc, #168]	; (8001f40 <start_up+0x158>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2b3c      	cmp	r3, #60	; 0x3c
 8001e9c:	d903      	bls.n	8001ea6 <start_up+0xbe>
	menu1_value = maxMenu1Value;
 8001e9e:	4b28      	ldr	r3, [pc, #160]	; (8001f40 <start_up+0x158>)
 8001ea0:	223c      	movs	r2, #60	; 0x3c
 8001ea2:	701a      	strb	r2, [r3, #0]
 8001ea4:	e006      	b.n	8001eb4 <start_up+0xcc>
  else if (menu1_value < minMenu1Value)
 8001ea6:	4b26      	ldr	r3, [pc, #152]	; (8001f40 <start_up+0x158>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2b1d      	cmp	r3, #29
 8001eac:	d802      	bhi.n	8001eb4 <start_up+0xcc>
	menu1_value = minMenu1Value;
 8001eae:	4b24      	ldr	r3, [pc, #144]	; (8001f40 <start_up+0x158>)
 8001eb0:	221e      	movs	r2, #30
 8001eb2:	701a      	strb	r2, [r3, #0]

  // count
  if (menu2_value > maxMenu2Value)
 8001eb4:	4b24      	ldr	r3, [pc, #144]	; (8001f48 <start_up+0x160>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8001ebc:	d904      	bls.n	8001ec8 <start_up+0xe0>
	menu2_value = maxMenu2Value;
 8001ebe:	4b22      	ldr	r3, [pc, #136]	; (8001f48 <start_up+0x160>)
 8001ec0:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	e006      	b.n	8001ed6 <start_up+0xee>
  else if (menu2_value < minMenu2Value)
 8001ec8:	4b1f      	ldr	r3, [pc, #124]	; (8001f48 <start_up+0x160>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b09      	cmp	r3, #9
 8001ece:	d802      	bhi.n	8001ed6 <start_up+0xee>
	menu2_value = minMenu2Value;
 8001ed0:	4b1d      	ldr	r3, [pc, #116]	; (8001f48 <start_up+0x160>)
 8001ed2:	220a      	movs	r2, #10
 8001ed4:	601a      	str	r2, [r3, #0]

  // time (second)
  if (menu3_value > maxMenu3Value)
 8001ed6:	4b1e      	ldr	r3, [pc, #120]	; (8001f50 <start_up+0x168>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2b63      	cmp	r3, #99	; 0x63
 8001edc:	dd03      	ble.n	8001ee6 <start_up+0xfe>
	menu3_value = maxMenu3Value;
 8001ede:	4b1c      	ldr	r3, [pc, #112]	; (8001f50 <start_up+0x168>)
 8001ee0:	2263      	movs	r2, #99	; 0x63
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	e006      	b.n	8001ef4 <start_up+0x10c>
  else if (menu3_value < minMenu3Value)
 8001ee6:	4b1a      	ldr	r3, [pc, #104]	; (8001f50 <start_up+0x168>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	dc02      	bgt.n	8001ef4 <start_up+0x10c>
	menu3_value = minMenu3Value;
 8001eee:	4b18      	ldr	r3, [pc, #96]	; (8001f50 <start_up+0x168>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]

  HAL_Delay(1000);
 8001ef4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ef8:	f001 fcee 	bl	80038d8 <HAL_Delay>
  LCD_Clear(&LCD);
 8001efc:	480b      	ldr	r0, [pc, #44]	; (8001f2c <start_up+0x144>)
 8001efe:	f7ff ff41 	bl	8001d84 <LCD_Clear>
  LED_OFF();
 8001f02:	f000 ffc5 	bl	8002e90 <LED_OFF>
}
 8001f06:	bf00      	nop
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	20000100 	.word	0x20000100
 8001f10:	20000148 	.word	0x20000148
 8001f14:	200001d8 	.word	0x200001d8
 8001f18:	40010c00 	.word	0x40010c00
 8001f1c:	20000230 	.word	0x20000230
 8001f20:	20000244 	.word	0x20000244
 8001f24:	20000258 	.word	0x20000258
 8001f28:	200000ac 	.word	0x200000ac
 8001f2c:	20000224 	.word	0x20000224
 8001f30:	08006acc 	.word	0x08006acc
 8001f34:	08006adc 	.word	0x08006adc
 8001f38:	08006ae8 	.word	0x08006ae8
 8001f3c:	0801f810 	.word	0x0801f810
 8001f40:	2000026c 	.word	0x2000026c
 8001f44:	0801f814 	.word	0x0801f814
 8001f48:	20000270 	.word	0x20000270
 8001f4c:	0801f818 	.word	0x0801f818
 8001f50:	20000004 	.word	0x20000004

08001f54 <main_loop>:

void main_loop() {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b088      	sub	sp, #32
 8001f58:	af00      	add	r7, sp, #0
  check_state();
 8001f5a:	f000 fd99 	bl	8002a90 <check_state>
  check_ecd();
 8001f5e:	f000 fdb9 	bl	8002ad4 <check_ecd>

  switch (state) {
 8001f62:	4b95      	ldr	r3, [pc, #596]	; (80021b8 <main_loop+0x264>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	f200 819b 	bhi.w	80022a4 <main_loop+0x350>
 8001f6e:	a201      	add	r2, pc, #4	; (adr r2, 8001f74 <main_loop+0x20>)
 8001f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f74:	08001f85 	.word	0x08001f85
 8001f78:	08001fa1 	.word	0x08001fa1
 8001f7c:	080020a1 	.word	0x080020a1
 8001f80:	08002229 	.word	0x08002229
	   |Set count: xxxx revs|
	   |Count:    0 revs    |
	   ----------------------
	   **************************/
	{
	  if (refreshLCD == true) {
 8001f84:	4b8d      	ldr	r3, [pc, #564]	; (80021bc <main_loop+0x268>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 818d 	beq.w	80022a8 <main_loop+0x354>
		printDefaultLCD();
 8001f8e:	f000 ffa5 	bl	8002edc <printDefaultLCD>
		HAL_Delay(10);
 8001f92:	200a      	movs	r0, #10
 8001f94:	f001 fca0 	bl	80038d8 <HAL_Delay>
		refreshLCD = false;
 8001f98:	4b88      	ldr	r3, [pc, #544]	; (80021bc <main_loop+0x268>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	701a      	strb	r2, [r3, #0]
	  }
	  break;
 8001f9e:	e183      	b.n	80022a8 <main_loop+0x354>
	   |                    |
	   ----------------------
	   **************************/
	{

	  if (menu2_selected == true) {
 8001fa0:	4b87      	ldr	r3, [pc, #540]	; (80021c0 <main_loop+0x26c>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d045      	beq.n	8002034 <main_loop+0xe0>
		if (firstMinSelected == true || lastMinSelected == true
 8001fa8:	4b86      	ldr	r3, [pc, #536]	; (80021c4 <main_loop+0x270>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10b      	bne.n	8001fc8 <main_loop+0x74>
 8001fb0:	4b85      	ldr	r3, [pc, #532]	; (80021c8 <main_loop+0x274>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d107      	bne.n	8001fc8 <main_loop+0x74>
			|| firstSecSelected == true || lastSecSelected == true) {
 8001fb8:	4b84      	ldr	r3, [pc, #528]	; (80021cc <main_loop+0x278>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d103      	bne.n	8001fc8 <main_loop+0x74>
 8001fc0:	4b83      	ldr	r3, [pc, #524]	; (80021d0 <main_loop+0x27c>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d032      	beq.n	800202e <main_loop+0xda>
		  // Do nothing
		  if (refreshMenu2) {
 8001fc8:	4b82      	ldr	r3, [pc, #520]	; (80021d4 <main_loop+0x280>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d04c      	beq.n	800206a <main_loop+0x116>
			update_Menu2();
 8001fd0:	f001 f84e 	bl	8003070 <update_Menu2>
			switch (menu2_subCounter) {
 8001fd4:	4b80      	ldr	r3, [pc, #512]	; (80021d8 <main_loop+0x284>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	2b03      	cmp	r3, #3
 8001fdc:	d822      	bhi.n	8002024 <main_loop+0xd0>
 8001fde:	a201      	add	r2, pc, #4	; (adr r2, 8001fe4 <main_loop+0x90>)
 8001fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe4:	08001ff5 	.word	0x08001ff5
 8001fe8:	08002001 	.word	0x08002001
 8001fec:	0800200d 	.word	0x0800200d
 8001ff0:	08002019 	.word	0x08002019
			  case 1:
				LCD_Set_Cursor(&LCD, 2, 9);
 8001ff4:	2209      	movs	r2, #9
 8001ff6:	2102      	movs	r1, #2
 8001ff8:	4878      	ldr	r0, [pc, #480]	; (80021dc <main_loop+0x288>)
 8001ffa:	f7ff feab 	bl	8001d54 <LCD_Set_Cursor>
				break;
 8001ffe:	e012      	b.n	8002026 <main_loop+0xd2>
			  case 2:
				LCD_Set_Cursor(&LCD, 2, 10);
 8002000:	220a      	movs	r2, #10
 8002002:	2102      	movs	r1, #2
 8002004:	4875      	ldr	r0, [pc, #468]	; (80021dc <main_loop+0x288>)
 8002006:	f7ff fea5 	bl	8001d54 <LCD_Set_Cursor>
				break;
 800200a:	e00c      	b.n	8002026 <main_loop+0xd2>
			  case 3:
				LCD_Set_Cursor(&LCD, 2, 12);
 800200c:	220c      	movs	r2, #12
 800200e:	2102      	movs	r1, #2
 8002010:	4872      	ldr	r0, [pc, #456]	; (80021dc <main_loop+0x288>)
 8002012:	f7ff fe9f 	bl	8001d54 <LCD_Set_Cursor>
				break;
 8002016:	e006      	b.n	8002026 <main_loop+0xd2>
			  case 4:
				LCD_Set_Cursor(&LCD, 2, 13);
 8002018:	220d      	movs	r2, #13
 800201a:	2102      	movs	r1, #2
 800201c:	486f      	ldr	r0, [pc, #444]	; (80021dc <main_loop+0x288>)
 800201e:	f7ff fe99 	bl	8001d54 <LCD_Set_Cursor>
				break;
 8002022:	e000      	b.n	8002026 <main_loop+0xd2>
			  default:
				break;
 8002024:	bf00      	nop
			}
			refreshMenu2 = false;
 8002026:	4b6b      	ldr	r3, [pc, #428]	; (80021d4 <main_loop+0x280>)
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]
		  if (refreshMenu2) {
 800202c:	e01d      	b.n	800206a <main_loop+0x116>
		  }
		} else
		  blinkCursor();
 800202e:	f001 f9d3 	bl	80033d8 <blinkCursor>
 8002032:	e01a      	b.n	800206a <main_loop+0x116>
	  } else if (menu1_selected == true) {
 8002034:	4b6a      	ldr	r3, [pc, #424]	; (80021e0 <main_loop+0x28c>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d009      	beq.n	8002050 <main_loop+0xfc>
		if (refreshMenu1) {
 800203c:	4b69      	ldr	r3, [pc, #420]	; (80021e4 <main_loop+0x290>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d012      	beq.n	800206a <main_loop+0x116>
		  refreshMenu1 = false;
 8002044:	4b67      	ldr	r3, [pc, #412]	; (80021e4 <main_loop+0x290>)
 8002046:	2200      	movs	r2, #0
 8002048:	701a      	strb	r2, [r3, #0]
		  update_Menu1();
 800204a:	f000 ffed 	bl	8003028 <update_Menu1>
 800204e:	e00c      	b.n	800206a <main_loop+0x116>
		}
	  } else if (menu3_selected == true) {
 8002050:	4b65      	ldr	r3, [pc, #404]	; (80021e8 <main_loop+0x294>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d008      	beq.n	800206a <main_loop+0x116>
		if (refreshMenu3) {
 8002058:	4b64      	ldr	r3, [pc, #400]	; (80021ec <main_loop+0x298>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d004      	beq.n	800206a <main_loop+0x116>
		  refreshMenu3 = false;
 8002060:	4b62      	ldr	r3, [pc, #392]	; (80021ec <main_loop+0x298>)
 8002062:	2200      	movs	r2, #0
 8002064:	701a      	strb	r2, [r3, #0]
		  update_Menu3();
 8002066:	f001 f8e3 	bl	8003230 <update_Menu3>
		}
	  }

	  if (refreshLCD == true) //If we are allowed to update the LCD ...
 800206a:	4b54      	ldr	r3, [pc, #336]	; (80021bc <main_loop+0x268>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00b      	beq.n	800208a <main_loop+0x136>
	  {
		refreshLCD = false; //reset the variable - wait for a new trigger
 8002072:	4b52      	ldr	r3, [pc, #328]	; (80021bc <main_loop+0x268>)
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]

		LCD_Clear(&LCD);
 8002078:	4858      	ldr	r0, [pc, #352]	; (80021dc <main_loop+0x288>)
 800207a:	f7ff fe83 	bl	8001d84 <LCD_Clear>
		printMenuName();
 800207e:	f001 f983 	bl	8003388 <printMenuName>
		printMenuValue(); // ... we update the LCD ...
 8002082:	f001 f99f 	bl	80033c4 <printMenuValue>

		//... also, if one of the menus are already selected...
		updateSelection(); //update the position
 8002086:	f001 f9d1 	bl	800342c <updateSelection>
	  }

	  if (refreshSelection == true) //if the selection is changed
 800208a:	4b59      	ldr	r3, [pc, #356]	; (80021f0 <main_loop+0x29c>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	f000 810c 	beq.w	80022ac <main_loop+0x358>
	  {
		refreshSelection = false; // reset the variable - wait for a new trigger
 8002094:	4b56      	ldr	r3, [pc, #344]	; (80021f0 <main_loop+0x29c>)
 8002096:	2200      	movs	r2, #0
 8002098:	701a      	strb	r2, [r3, #0]
		updateSelection(); //update the selection on the LCD
 800209a:	f001 f9c7 	bl	800342c <updateSelection>
	  }
	  break;
 800209e:	e105      	b.n	80022ac <main_loop+0x358>
	   |Count:    0 revs    |
	   ----------------------
	   **************************/
	{
	  //out to motor
	  set_motor(2, 1, pwm);
 80020a0:	4b54      	ldr	r3, [pc, #336]	; (80021f4 <main_loop+0x2a0>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	461a      	mov	r2, r3
 80020a8:	2101      	movs	r1, #1
 80020aa:	2002      	movs	r0, #2
 80020ac:	f001 fa4a 	bl	8003544 <set_motor>

	  if (refreshLCD) {
 80020b0:	4b42      	ldr	r3, [pc, #264]	; (80021bc <main_loop+0x268>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d004      	beq.n	80020c2 <main_loop+0x16e>
		printDefaultLCD();
 80020b8:	f000 ff10 	bl	8002edc <printDefaultLCD>
		refreshLCD = false;
 80020bc:	4b3f      	ldr	r3, [pc, #252]	; (80021bc <main_loop+0x268>)
 80020be:	2200      	movs	r2, #0
 80020c0:	701a      	strb	r2, [r3, #0]
	  }

	  u32 motor_posi = TIM1_count;
 80020c2:	4b4d      	ldr	r3, [pc, #308]	; (80021f8 <main_loop+0x2a4>)
 80020c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c6:	61fb      	str	r3, [r7, #28]
	  s32 delta = motor_posi - pre_posi;
 80020c8:	4b4c      	ldr	r3, [pc, #304]	; (80021fc <main_loop+0x2a8>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	69fa      	ldr	r2, [r7, #28]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	61bb      	str	r3, [r7, #24]
	  if (abs(delta) > totalPulse) {
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	bfb8      	it	lt
 80020d8:	425b      	neglt	r3, r3
 80020da:	f642 6268 	movw	r2, #11880	; 0x2e68
 80020de:	4293      	cmp	r3, r2
 80020e0:	dd08      	ble.n	80020f4 <main_loop+0x1a0>
		nLoop++;
 80020e2:	4b47      	ldr	r3, [pc, #284]	; (8002200 <main_loop+0x2ac>)
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	3301      	adds	r3, #1
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	4b45      	ldr	r3, [pc, #276]	; (8002200 <main_loop+0x2ac>)
 80020ec:	801a      	strh	r2, [r3, #0]
		pre_posi = motor_posi;
 80020ee:	4a43      	ldr	r2, [pc, #268]	; (80021fc <main_loop+0x2a8>)
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	6013      	str	r3, [r2, #0]
	  }

	  // Stop condition
	  if (nLoop >= menu3_value) {
 80020f4:	4b42      	ldr	r3, [pc, #264]	; (8002200 <main_loop+0x2ac>)
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	461a      	mov	r2, r3
 80020fa:	4b42      	ldr	r3, [pc, #264]	; (8002204 <main_loop+0x2b0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	db07      	blt.n	8002112 <main_loop+0x1be>
		nLoop = menu3_value;
 8002102:	4b40      	ldr	r3, [pc, #256]	; (8002204 <main_loop+0x2b0>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	b29a      	uxth	r2, r3
 8002108:	4b3d      	ldr	r3, [pc, #244]	; (8002200 <main_loop+0x2ac>)
 800210a:	801a      	strh	r2, [r3, #0]
		stopCmd();
 800210c:	f001 fb46 	bl	800379c <stopCmd>
 8002110:	e015      	b.n	800213e <main_loop+0x1ea>
	  } else if (HAL_GPIO_ReadPin(PROBE_GPIO_Port, PROBE_Pin) == GPIO_PIN_SET) {
 8002112:	2104      	movs	r1, #4
 8002114:	483c      	ldr	r0, [pc, #240]	; (8002208 <main_loop+0x2b4>)
 8002116:	f002 f895 	bl	8004244 <HAL_GPIO_ReadPin>
 800211a:	4603      	mov	r3, r0
 800211c:	2b01      	cmp	r3, #1
 800211e:	d102      	bne.n	8002126 <main_loop+0x1d2>
		stopCmd();
 8002120:	f001 fb3c 	bl	800379c <stopCmd>
 8002124:	e00b      	b.n	800213e <main_loop+0x1ea>
	  } else if (nSec >= menu2_value) {
 8002126:	4b39      	ldr	r3, [pc, #228]	; (800220c <main_loop+0x2b8>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	4b39      	ldr	r3, [pc, #228]	; (8002210 <main_loop+0x2bc>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d305      	bcc.n	800213e <main_loop+0x1ea>
		nSec = menu2_value;
 8002132:	4b37      	ldr	r3, [pc, #220]	; (8002210 <main_loop+0x2bc>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a35      	ldr	r2, [pc, #212]	; (800220c <main_loop+0x2b8>)
 8002138:	6013      	str	r3, [r2, #0]
		stopCmd();
 800213a:	f001 fb2f 	bl	800379c <stopCmd>
	  }

	  if (lastLoop != nLoop) {
 800213e:	4b35      	ldr	r3, [pc, #212]	; (8002214 <main_loop+0x2c0>)
 8002140:	881a      	ldrh	r2, [r3, #0]
 8002142:	4b2f      	ldr	r3, [pc, #188]	; (8002200 <main_loop+0x2ac>)
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	429a      	cmp	r2, r3
 8002148:	d027      	beq.n	800219a <main_loop+0x246>
		lastLoop = nLoop;
 800214a:	4b2d      	ldr	r3, [pc, #180]	; (8002200 <main_loop+0x2ac>)
 800214c:	881a      	ldrh	r2, [r3, #0]
 800214e:	4b31      	ldr	r3, [pc, #196]	; (8002214 <main_loop+0x2c0>)
 8002150:	801a      	strh	r2, [r3, #0]

		char holder[10];
		LCD_Print_String_At(&LCD, 4, 8, "         ");
 8002152:	4b31      	ldr	r3, [pc, #196]	; (8002218 <main_loop+0x2c4>)
 8002154:	2208      	movs	r2, #8
 8002156:	2104      	movs	r1, #4
 8002158:	4820      	ldr	r0, [pc, #128]	; (80021dc <main_loop+0x288>)
 800215a:	f7ff fe2e 	bl	8001dba <LCD_Print_String_At>
		if (nLoop < 2) {
 800215e:	4b28      	ldr	r3, [pc, #160]	; (8002200 <main_loop+0x2ac>)
 8002160:	881b      	ldrh	r3, [r3, #0]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d809      	bhi.n	800217a <main_loop+0x226>
		  sprintf(holder, "%4d rev", nLoop);
 8002166:	4b26      	ldr	r3, [pc, #152]	; (8002200 <main_loop+0x2ac>)
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	461a      	mov	r2, r3
 800216c:	f107 030c 	add.w	r3, r7, #12
 8002170:	492a      	ldr	r1, [pc, #168]	; (800221c <main_loop+0x2c8>)
 8002172:	4618      	mov	r0, r3
 8002174:	f004 f824 	bl	80061c0 <siprintf>
 8002178:	e008      	b.n	800218c <main_loop+0x238>
		} else {
		  sprintf(holder, "%4d revs", nLoop);
 800217a:	4b21      	ldr	r3, [pc, #132]	; (8002200 <main_loop+0x2ac>)
 800217c:	881b      	ldrh	r3, [r3, #0]
 800217e:	461a      	mov	r2, r3
 8002180:	f107 030c 	add.w	r3, r7, #12
 8002184:	4926      	ldr	r1, [pc, #152]	; (8002220 <main_loop+0x2cc>)
 8002186:	4618      	mov	r0, r3
 8002188:	f004 f81a 	bl	80061c0 <siprintf>
		}
		LCD_Print_String_At(&LCD, 4, 8, holder);
 800218c:	f107 030c 	add.w	r3, r7, #12
 8002190:	2208      	movs	r2, #8
 8002192:	2104      	movs	r1, #4
 8002194:	4811      	ldr	r0, [pc, #68]	; (80021dc <main_loop+0x288>)
 8002196:	f7ff fe10 	bl	8001dba <LCD_Print_String_At>
	  }

	  if (refreshClock) {
 800219a:	4b22      	ldr	r3, [pc, #136]	; (8002224 <main_loop+0x2d0>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 8086 	beq.w	80022b0 <main_loop+0x35c>
		refreshClock = false;
 80021a4:	4b1f      	ldr	r3, [pc, #124]	; (8002224 <main_loop+0x2d0>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	701a      	strb	r2, [r3, #0]
		LCD_Print_Clock(nSec);
 80021aa:	4b18      	ldr	r3, [pc, #96]	; (800220c <main_loop+0x2b8>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f001 f860 	bl	8003274 <LCD_Print_Clock>
	  }

	  break;
 80021b4:	e07c      	b.n	80022b0 <main_loop+0x35c>
 80021b6:	bf00      	nop
 80021b8:	20000008 	.word	0x20000008
 80021bc:	2000000b 	.word	0x2000000b
 80021c0:	20000281 	.word	0x20000281
 80021c4:	200002b5 	.word	0x200002b5
 80021c8:	200002b6 	.word	0x200002b6
 80021cc:	200002b7 	.word	0x200002b7
 80021d0:	200002b8 	.word	0x200002b8
 80021d4:	20000286 	.word	0x20000286
 80021d8:	2000001c 	.word	0x2000001c
 80021dc:	20000224 	.word	0x20000224
 80021e0:	20000280 	.word	0x20000280
 80021e4:	20000285 	.word	0x20000285
 80021e8:	20000282 	.word	0x20000282
 80021ec:	20000287 	.word	0x20000287
 80021f0:	20000284 	.word	0x20000284
 80021f4:	20000018 	.word	0x20000018
 80021f8:	40012c00 	.word	0x40012c00
 80021fc:	200002b0 	.word	0x200002b0
 8002200:	20000274 	.word	0x20000274
 8002204:	20000004 	.word	0x20000004
 8002208:	40010800 	.word	0x40010800
 800220c:	20000278 	.word	0x20000278
 8002210:	20000270 	.word	0x20000270
 8002214:	20000276 	.word	0x20000276
 8002218:	08006af8 	.word	0x08006af8
 800221c:	08006b04 	.word	0x08006b04
 8002220:	08006b0c 	.word	0x08006b0c
 8002224:	20000288 	.word	0x20000288
	   |Set count: xxxx revs|
	   |Count:    0 revs    |
	   ----------------------
	   **************************/
	{
	  if (refreshLCD) {
 8002228:	4b23      	ldr	r3, [pc, #140]	; (80022b8 <main_loop+0x364>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d02a      	beq.n	8002286 <main_loop+0x332>
		printDefaultLCD();
 8002230:	f000 fe54 	bl	8002edc <printDefaultLCD>
		refreshLCD = false;
 8002234:	4b20      	ldr	r3, [pc, #128]	; (80022b8 <main_loop+0x364>)
 8002236:	2200      	movs	r2, #0
 8002238:	701a      	strb	r2, [r3, #0]

		LCD_Print_Clock(nSec);
 800223a:	4b20      	ldr	r3, [pc, #128]	; (80022bc <main_loop+0x368>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f001 f818 	bl	8003274 <LCD_Print_Clock>

		char holder[10];
		LCD_Print_String_At(&LCD, 4, 8, "         ");
 8002244:	4b1e      	ldr	r3, [pc, #120]	; (80022c0 <main_loop+0x36c>)
 8002246:	2208      	movs	r2, #8
 8002248:	2104      	movs	r1, #4
 800224a:	481e      	ldr	r0, [pc, #120]	; (80022c4 <main_loop+0x370>)
 800224c:	f7ff fdb5 	bl	8001dba <LCD_Print_String_At>
		if (nLoop < 2) {
 8002250:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <main_loop+0x374>)
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d808      	bhi.n	800226a <main_loop+0x316>
		  sprintf(holder, "%4d rev", nLoop);
 8002258:	4b1b      	ldr	r3, [pc, #108]	; (80022c8 <main_loop+0x374>)
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	461a      	mov	r2, r3
 800225e:	463b      	mov	r3, r7
 8002260:	491a      	ldr	r1, [pc, #104]	; (80022cc <main_loop+0x378>)
 8002262:	4618      	mov	r0, r3
 8002264:	f003 ffac 	bl	80061c0 <siprintf>
 8002268:	e007      	b.n	800227a <main_loop+0x326>
		} else {
		  sprintf(holder, "%4d revs", nLoop);
 800226a:	4b17      	ldr	r3, [pc, #92]	; (80022c8 <main_loop+0x374>)
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	463b      	mov	r3, r7
 8002272:	4917      	ldr	r1, [pc, #92]	; (80022d0 <main_loop+0x37c>)
 8002274:	4618      	mov	r0, r3
 8002276:	f003 ffa3 	bl	80061c0 <siprintf>
		}
		LCD_Print_String_At(&LCD, 4, 8, holder);
 800227a:	463b      	mov	r3, r7
 800227c:	2208      	movs	r2, #8
 800227e:	2104      	movs	r1, #4
 8002280:	4810      	ldr	r0, [pc, #64]	; (80022c4 <main_loop+0x370>)
 8002282:	f7ff fd9a 	bl	8001dba <LCD_Print_String_At>
	  }
	  FLAG_run = false;
 8002286:	4b13      	ldr	r3, [pc, #76]	; (80022d4 <main_loop+0x380>)
 8002288:	2200      	movs	r2, #0
 800228a:	701a      	strb	r2, [r3, #0]
	  set_motor(2, 0, 0);
 800228c:	2200      	movs	r2, #0
 800228e:	2100      	movs	r1, #0
 8002290:	2002      	movs	r0, #2
 8002292:	f001 f957 	bl	8003544 <set_motor>
	  LED_TOGGLE();
 8002296:	f000 fe07 	bl	8002ea8 <LED_TOGGLE>

	  HAL_Delay(500);
 800229a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800229e:	f001 fb1b 	bl	80038d8 <HAL_Delay>
	  break;
 80022a2:	e006      	b.n	80022b2 <main_loop+0x35e>
	}
	default:
	  return;
 80022a4:	bf00      	nop
 80022a6:	e004      	b.n	80022b2 <main_loop+0x35e>
	  break;
 80022a8:	bf00      	nop
 80022aa:	e002      	b.n	80022b2 <main_loop+0x35e>
	  break;
 80022ac:	bf00      	nop
 80022ae:	e000      	b.n	80022b2 <main_loop+0x35e>
	  break;
 80022b0:	bf00      	nop
  } //Switch lvl1
}
 80022b2:	3720      	adds	r7, #32
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	2000000b 	.word	0x2000000b
 80022bc:	20000278 	.word	0x20000278
 80022c0:	08006af8 	.word	0x08006af8
 80022c4:	20000224 	.word	0x20000224
 80022c8:	20000274 	.word	0x20000274
 80022cc:	08006b04 	.word	0x08006b04
 80022d0:	08006b0c 	.word	0x08006b0c
 80022d4:	200002b4 	.word	0x200002b4

080022d8 <HAL_GPIO_EXTI_Callback>:

#define BTN_MODE_CLICK HAL_GPIO_ReadPin(BTN_Mode_GPIO_Port, BTN_Mode_Pin) == GPIO_PIN_RESET
#define BTN_START_CLICK HAL_GPIO_ReadPin(BTN_Start_GPIO_Port, BTN_Start_Pin) == GPIO_PIN_RESET
#define BTN_STOP_CLICK HAL_GPIO_ReadPin(BTN_Stop_GPIO_Port, BTN_Stop_Pin) == GPIO_PIN_RESET

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin) {
 80022e2:	88fb      	ldrh	r3, [r7, #6]
 80022e4:	3b04      	subs	r3, #4
 80022e6:	2b1c      	cmp	r3, #28
 80022e8:	f200 826c 	bhi.w	80027c4 <HAL_GPIO_EXTI_Callback+0x4ec>
 80022ec:	a201      	add	r2, pc, #4	; (adr r2, 80022f4 <HAL_GPIO_EXTI_Callback+0x1c>)
 80022ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f2:	bf00      	nop
 80022f4:	080027b7 	.word	0x080027b7
 80022f8:	080027c5 	.word	0x080027c5
 80022fc:	080027c5 	.word	0x080027c5
 8002300:	080027c5 	.word	0x080027c5
 8002304:	0800269d 	.word	0x0800269d
 8002308:	080027c5 	.word	0x080027c5
 800230c:	080027c5 	.word	0x080027c5
 8002310:	080027c5 	.word	0x080027c5
 8002314:	080027c5 	.word	0x080027c5
 8002318:	080027c5 	.word	0x080027c5
 800231c:	080027c5 	.word	0x080027c5
 8002320:	080027c5 	.word	0x080027c5
 8002324:	0800272f 	.word	0x0800272f
 8002328:	080027c5 	.word	0x080027c5
 800232c:	080027c5 	.word	0x080027c5
 8002330:	080027c5 	.word	0x080027c5
 8002334:	080027c5 	.word	0x080027c5
 8002338:	080027c5 	.word	0x080027c5
 800233c:	080027c5 	.word	0x080027c5
 8002340:	080027c5 	.word	0x080027c5
 8002344:	080027c5 	.word	0x080027c5
 8002348:	080027c5 	.word	0x080027c5
 800234c:	080027c5 	.word	0x080027c5
 8002350:	080027c5 	.word	0x080027c5
 8002354:	080027c5 	.word	0x080027c5
 8002358:	080027c5 	.word	0x080027c5
 800235c:	080027c5 	.word	0x080027c5
 8002360:	080027c5 	.word	0x080027c5
 8002364:	08002369 	.word	0x08002369
	case BTN_Mode_Pin: {
	  if (BTN_MODE_CLICK) {
 8002368:	2120      	movs	r1, #32
 800236a:	48a1      	ldr	r0, [pc, #644]	; (80025f0 <HAL_GPIO_EXTI_Callback+0x318>)
 800236c:	f001 ff6a 	bl	8004244 <HAL_GPIO_ReadPin>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d105      	bne.n	8002382 <HAL_GPIO_EXTI_Callback+0xaa>
		BTN_Mode.StartPress = HAL_GetTick(); //ms
 8002376:	f001 faa5 	bl	80038c4 <HAL_GetTick>
 800237a:	4603      	mov	r3, r0
 800237c:	4a9d      	ldr	r2, [pc, #628]	; (80025f4 <HAL_GPIO_EXTI_Callback+0x31c>)
 800237e:	60d3      	str	r3, [r2, #12]
			  state = 1;
			}
		  }
		}
	  }
	  break;
 8002380:	e222      	b.n	80027c8 <HAL_GPIO_EXTI_Callback+0x4f0>
		BTN_Mode.StopPress = HAL_GetTick();
 8002382:	f001 fa9f 	bl	80038c4 <HAL_GetTick>
 8002386:	4603      	mov	r3, r0
 8002388:	4a9a      	ldr	r2, [pc, #616]	; (80025f4 <HAL_GPIO_EXTI_Callback+0x31c>)
 800238a:	6113      	str	r3, [r2, #16]
		BTN_Mode.timePress = BTN_Mode.StopPress - BTN_Mode.StartPress;
 800238c:	4b99      	ldr	r3, [pc, #612]	; (80025f4 <HAL_GPIO_EXTI_Callback+0x31c>)
 800238e:	691a      	ldr	r2, [r3, #16]
 8002390:	4b98      	ldr	r3, [pc, #608]	; (80025f4 <HAL_GPIO_EXTI_Callback+0x31c>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	4a97      	ldr	r2, [pc, #604]	; (80025f4 <HAL_GPIO_EXTI_Callback+0x31c>)
 8002398:	6093      	str	r3, [r2, #8]
		u8 check = isShortClick(&BTN_Mode);
 800239a:	4896      	ldr	r0, [pc, #600]	; (80025f4 <HAL_GPIO_EXTI_Callback+0x31c>)
 800239c:	f7ff faf6 	bl	800198c <isShortClick>
 80023a0:	4603      	mov	r3, r0
 80023a2:	73fb      	strb	r3, [r7, #15]
		if (check == 1) // MODE click
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	f040 810c 	bne.w	80025c4 <HAL_GPIO_EXTI_Callback+0x2ec>
		  if (state == 1 || state == 2) {
 80023ac:	4b92      	ldr	r3, [pc, #584]	; (80025f8 <HAL_GPIO_EXTI_Callback+0x320>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d004      	beq.n	80023be <HAL_GPIO_EXTI_Callback+0xe6>
 80023b4:	4b90      	ldr	r3, [pc, #576]	; (80025f8 <HAL_GPIO_EXTI_Callback+0x320>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	f040 8205 	bne.w	80027c8 <HAL_GPIO_EXTI_Callback+0x4f0>
			state = state + 1;
 80023be:	4b8e      	ldr	r3, [pc, #568]	; (80025f8 <HAL_GPIO_EXTI_Callback+0x320>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	3301      	adds	r3, #1
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	4b8c      	ldr	r3, [pc, #560]	; (80025f8 <HAL_GPIO_EXTI_Callback+0x320>)
 80023c8:	701a      	strb	r2, [r3, #0]
			if (state == 3) {
 80023ca:	4b8b      	ldr	r3, [pc, #556]	; (80025f8 <HAL_GPIO_EXTI_Callback+0x320>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	2b03      	cmp	r3, #3
 80023d0:	f040 80ae 	bne.w	8002530 <HAL_GPIO_EXTI_Callback+0x258>
			  switch (menuCounter) {
 80023d4:	4b89      	ldr	r3, [pc, #548]	; (80025fc <HAL_GPIO_EXTI_Callback+0x324>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b03      	cmp	r3, #3
 80023da:	f000 8091 	beq.w	8002500 <HAL_GPIO_EXTI_Callback+0x228>
 80023de:	2b03      	cmp	r3, #3
 80023e0:	f300 80a1 	bgt.w	8002526 <HAL_GPIO_EXTI_Callback+0x24e>
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d002      	beq.n	80023ee <HAL_GPIO_EXTI_Callback+0x116>
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d013      	beq.n	8002414 <HAL_GPIO_EXTI_Callback+0x13c>
				  break;
 80023ec:	e09b      	b.n	8002526 <HAL_GPIO_EXTI_Callback+0x24e>
				  menu1_selected = !menu1_selected; //we change the status of the variable to the opposite
 80023ee:	4b84      	ldr	r3, [pc, #528]	; (8002600 <HAL_GPIO_EXTI_Callback+0x328>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	bf14      	ite	ne
 80023f6:	2301      	movne	r3, #1
 80023f8:	2300      	moveq	r3, #0
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	f083 0301 	eor.w	r3, r3, #1
 8002400:	b2db      	uxtb	r3, r3
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	b2da      	uxtb	r2, r3
 8002408:	4b7d      	ldr	r3, [pc, #500]	; (8002600 <HAL_GPIO_EXTI_Callback+0x328>)
 800240a:	701a      	strb	r2, [r3, #0]
				  refreshSelection = true;
 800240c:	4b7d      	ldr	r3, [pc, #500]	; (8002604 <HAL_GPIO_EXTI_Callback+0x32c>)
 800240e:	2201      	movs	r2, #1
 8002410:	701a      	strb	r2, [r3, #0]
				  break;
 8002412:	e089      	b.n	8002528 <HAL_GPIO_EXTI_Callback+0x250>
				  if (menu2_selected == true) {
 8002414:	4b7c      	ldr	r3, [pc, #496]	; (8002608 <HAL_GPIO_EXTI_Callback+0x330>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d06a      	beq.n	80024f2 <HAL_GPIO_EXTI_Callback+0x21a>
					switch (menu2_subCounter) {
 800241c:	4b7b      	ldr	r3, [pc, #492]	; (800260c <HAL_GPIO_EXTI_Callback+0x334>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	3b01      	subs	r3, #1
 8002422:	2b03      	cmp	r3, #3
 8002424:	d84a      	bhi.n	80024bc <HAL_GPIO_EXTI_Callback+0x1e4>
 8002426:	a201      	add	r2, pc, #4	; (adr r2, 800242c <HAL_GPIO_EXTI_Callback+0x154>)
 8002428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800242c:	0800243d 	.word	0x0800243d
 8002430:	0800245d 	.word	0x0800245d
 8002434:	0800247d 	.word	0x0800247d
 8002438:	0800249d 	.word	0x0800249d
						firstMinSelected = !firstMinSelected;
 800243c:	4b74      	ldr	r3, [pc, #464]	; (8002610 <HAL_GPIO_EXTI_Callback+0x338>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	bf14      	ite	ne
 8002444:	2301      	movne	r3, #1
 8002446:	2300      	moveq	r3, #0
 8002448:	b2db      	uxtb	r3, r3
 800244a:	f083 0301 	eor.w	r3, r3, #1
 800244e:	b2db      	uxtb	r3, r3
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	b2da      	uxtb	r2, r3
 8002456:	4b6e      	ldr	r3, [pc, #440]	; (8002610 <HAL_GPIO_EXTI_Callback+0x338>)
 8002458:	701a      	strb	r2, [r3, #0]
						break;
 800245a:	e02f      	b.n	80024bc <HAL_GPIO_EXTI_Callback+0x1e4>
						lastMinSelected = !lastMinSelected;
 800245c:	4b6d      	ldr	r3, [pc, #436]	; (8002614 <HAL_GPIO_EXTI_Callback+0x33c>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	bf14      	ite	ne
 8002464:	2301      	movne	r3, #1
 8002466:	2300      	moveq	r3, #0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	f083 0301 	eor.w	r3, r3, #1
 800246e:	b2db      	uxtb	r3, r3
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	b2da      	uxtb	r2, r3
 8002476:	4b67      	ldr	r3, [pc, #412]	; (8002614 <HAL_GPIO_EXTI_Callback+0x33c>)
 8002478:	701a      	strb	r2, [r3, #0]
						break;
 800247a:	e01f      	b.n	80024bc <HAL_GPIO_EXTI_Callback+0x1e4>
						firstSecSelected = !firstSecSelected;
 800247c:	4b66      	ldr	r3, [pc, #408]	; (8002618 <HAL_GPIO_EXTI_Callback+0x340>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	bf14      	ite	ne
 8002484:	2301      	movne	r3, #1
 8002486:	2300      	moveq	r3, #0
 8002488:	b2db      	uxtb	r3, r3
 800248a:	f083 0301 	eor.w	r3, r3, #1
 800248e:	b2db      	uxtb	r3, r3
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	b2da      	uxtb	r2, r3
 8002496:	4b60      	ldr	r3, [pc, #384]	; (8002618 <HAL_GPIO_EXTI_Callback+0x340>)
 8002498:	701a      	strb	r2, [r3, #0]
						break;
 800249a:	e00f      	b.n	80024bc <HAL_GPIO_EXTI_Callback+0x1e4>
						lastSecSelected = !lastSecSelected;
 800249c:	4b5f      	ldr	r3, [pc, #380]	; (800261c <HAL_GPIO_EXTI_Callback+0x344>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	bf14      	ite	ne
 80024a4:	2301      	movne	r3, #1
 80024a6:	2300      	moveq	r3, #0
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	f083 0301 	eor.w	r3, r3, #1
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	4b59      	ldr	r3, [pc, #356]	; (800261c <HAL_GPIO_EXTI_Callback+0x344>)
 80024b8:	701a      	strb	r2, [r3, #0]
						break;
 80024ba:	bf00      	nop
					if (firstMinSelected || lastMinSelected || firstSecSelected
 80024bc:	4b54      	ldr	r3, [pc, #336]	; (8002610 <HAL_GPIO_EXTI_Callback+0x338>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10b      	bne.n	80024dc <HAL_GPIO_EXTI_Callback+0x204>
 80024c4:	4b53      	ldr	r3, [pc, #332]	; (8002614 <HAL_GPIO_EXTI_Callback+0x33c>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d107      	bne.n	80024dc <HAL_GPIO_EXTI_Callback+0x204>
 80024cc:	4b52      	ldr	r3, [pc, #328]	; (8002618 <HAL_GPIO_EXTI_Callback+0x340>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d103      	bne.n	80024dc <HAL_GPIO_EXTI_Callback+0x204>
						|| lastSecSelected) {
 80024d4:	4b51      	ldr	r3, [pc, #324]	; (800261c <HAL_GPIO_EXTI_Callback+0x344>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d006      	beq.n	80024ea <HAL_GPIO_EXTI_Callback+0x212>
					  CLCD_I2C_CursorOff(&LCD);
 80024dc:	4850      	ldr	r0, [pc, #320]	; (8002620 <HAL_GPIO_EXTI_Callback+0x348>)
 80024de:	f7ff fbdf 	bl	8001ca0 <CLCD_I2C_CursorOff>
					  CLCD_I2C_BlinkOn(&LCD);
 80024e2:	484f      	ldr	r0, [pc, #316]	; (8002620 <HAL_GPIO_EXTI_Callback+0x348>)
 80024e4:	f7ff fbf2 	bl	8001ccc <CLCD_I2C_BlinkOn>
				  break;
 80024e8:	e01e      	b.n	8002528 <HAL_GPIO_EXTI_Callback+0x250>
					  CLCD_I2C_BlinkOff(&LCD);
 80024ea:	484d      	ldr	r0, [pc, #308]	; (8002620 <HAL_GPIO_EXTI_Callback+0x348>)
 80024ec:	f7ff fc04 	bl	8001cf8 <CLCD_I2C_BlinkOff>
				  break;
 80024f0:	e01a      	b.n	8002528 <HAL_GPIO_EXTI_Callback+0x250>
					menu2_selected = true;
 80024f2:	4b45      	ldr	r3, [pc, #276]	; (8002608 <HAL_GPIO_EXTI_Callback+0x330>)
 80024f4:	2201      	movs	r2, #1
 80024f6:	701a      	strb	r2, [r3, #0]
					refreshSelection = true;
 80024f8:	4b42      	ldr	r3, [pc, #264]	; (8002604 <HAL_GPIO_EXTI_Callback+0x32c>)
 80024fa:	2201      	movs	r2, #1
 80024fc:	701a      	strb	r2, [r3, #0]
				  break;
 80024fe:	e013      	b.n	8002528 <HAL_GPIO_EXTI_Callback+0x250>
				  menu3_selected = !menu3_selected;
 8002500:	4b48      	ldr	r3, [pc, #288]	; (8002624 <HAL_GPIO_EXTI_Callback+0x34c>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	bf14      	ite	ne
 8002508:	2301      	movne	r3, #1
 800250a:	2300      	moveq	r3, #0
 800250c:	b2db      	uxtb	r3, r3
 800250e:	f083 0301 	eor.w	r3, r3, #1
 8002512:	b2db      	uxtb	r3, r3
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	b2da      	uxtb	r2, r3
 800251a:	4b42      	ldr	r3, [pc, #264]	; (8002624 <HAL_GPIO_EXTI_Callback+0x34c>)
 800251c:	701a      	strb	r2, [r3, #0]
				  refreshSelection = true;
 800251e:	4b39      	ldr	r3, [pc, #228]	; (8002604 <HAL_GPIO_EXTI_Callback+0x32c>)
 8002520:	2201      	movs	r2, #1
 8002522:	701a      	strb	r2, [r3, #0]
				  break;
 8002524:	e000      	b.n	8002528 <HAL_GPIO_EXTI_Callback+0x250>
				  break;
 8002526:	bf00      	nop
			  state = 2;
 8002528:	4b33      	ldr	r3, [pc, #204]	; (80025f8 <HAL_GPIO_EXTI_Callback+0x320>)
 800252a:	2202      	movs	r2, #2
 800252c:	701a      	strb	r2, [r3, #0]
	  break;
 800252e:	e14b      	b.n	80027c8 <HAL_GPIO_EXTI_Callback+0x4f0>
			} else if (state == 2) {
 8002530:	4b31      	ldr	r3, [pc, #196]	; (80025f8 <HAL_GPIO_EXTI_Callback+0x320>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b02      	cmp	r3, #2
 8002536:	f040 8147 	bne.w	80027c8 <HAL_GPIO_EXTI_Callback+0x4f0>
			  firstMin = (u32) ((u32) menu2_value / 60) / 10;
 800253a:	4b3b      	ldr	r3, [pc, #236]	; (8002628 <HAL_GPIO_EXTI_Callback+0x350>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a3b      	ldr	r2, [pc, #236]	; (800262c <HAL_GPIO_EXTI_Callback+0x354>)
 8002540:	fba2 2303 	umull	r2, r3, r2, r3
 8002544:	099b      	lsrs	r3, r3, #6
 8002546:	b2da      	uxtb	r2, r3
 8002548:	4b39      	ldr	r3, [pc, #228]	; (8002630 <HAL_GPIO_EXTI_Callback+0x358>)
 800254a:	701a      	strb	r2, [r3, #0]
			  lastMin = (u32) ((u32) menu2_value / 60) % 10;
 800254c:	4b36      	ldr	r3, [pc, #216]	; (8002628 <HAL_GPIO_EXTI_Callback+0x350>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a38      	ldr	r2, [pc, #224]	; (8002634 <HAL_GPIO_EXTI_Callback+0x35c>)
 8002552:	fba2 2303 	umull	r2, r3, r2, r3
 8002556:	0959      	lsrs	r1, r3, #5
 8002558:	4b37      	ldr	r3, [pc, #220]	; (8002638 <HAL_GPIO_EXTI_Callback+0x360>)
 800255a:	fba3 2301 	umull	r2, r3, r3, r1
 800255e:	08da      	lsrs	r2, r3, #3
 8002560:	4613      	mov	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	1aca      	subs	r2, r1, r3
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	4b33      	ldr	r3, [pc, #204]	; (800263c <HAL_GPIO_EXTI_Callback+0x364>)
 800256e:	701a      	strb	r2, [r3, #0]
			  firstSec = (u32) ((u32) menu2_value % 60) / 10;
 8002570:	4b2d      	ldr	r3, [pc, #180]	; (8002628 <HAL_GPIO_EXTI_Callback+0x350>)
 8002572:	6819      	ldr	r1, [r3, #0]
 8002574:	4b2f      	ldr	r3, [pc, #188]	; (8002634 <HAL_GPIO_EXTI_Callback+0x35c>)
 8002576:	fba3 2301 	umull	r2, r3, r3, r1
 800257a:	095a      	lsrs	r2, r3, #5
 800257c:	4613      	mov	r3, r2
 800257e:	011b      	lsls	r3, r3, #4
 8002580:	1a9b      	subs	r3, r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	1aca      	subs	r2, r1, r3
 8002586:	4b2c      	ldr	r3, [pc, #176]	; (8002638 <HAL_GPIO_EXTI_Callback+0x360>)
 8002588:	fba3 2302 	umull	r2, r3, r3, r2
 800258c:	08db      	lsrs	r3, r3, #3
 800258e:	b2da      	uxtb	r2, r3
 8002590:	4b2b      	ldr	r3, [pc, #172]	; (8002640 <HAL_GPIO_EXTI_Callback+0x368>)
 8002592:	701a      	strb	r2, [r3, #0]
			  lastSec = (u32) ((u32) menu2_value % 60) % 10;
 8002594:	4b24      	ldr	r3, [pc, #144]	; (8002628 <HAL_GPIO_EXTI_Callback+0x350>)
 8002596:	6819      	ldr	r1, [r3, #0]
 8002598:	4b26      	ldr	r3, [pc, #152]	; (8002634 <HAL_GPIO_EXTI_Callback+0x35c>)
 800259a:	fba3 2301 	umull	r2, r3, r3, r1
 800259e:	095a      	lsrs	r2, r3, #5
 80025a0:	4613      	mov	r3, r2
 80025a2:	011b      	lsls	r3, r3, #4
 80025a4:	1a9b      	subs	r3, r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	1aca      	subs	r2, r1, r3
 80025aa:	4b23      	ldr	r3, [pc, #140]	; (8002638 <HAL_GPIO_EXTI_Callback+0x360>)
 80025ac:	fba3 1302 	umull	r1, r3, r3, r2
 80025b0:	08d9      	lsrs	r1, r3, #3
 80025b2:	460b      	mov	r3, r1
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	440b      	add	r3, r1
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	1ad1      	subs	r1, r2, r3
 80025bc:	b2ca      	uxtb	r2, r1
 80025be:	4b21      	ldr	r3, [pc, #132]	; (8002644 <HAL_GPIO_EXTI_Callback+0x36c>)
 80025c0:	701a      	strb	r2, [r3, #0]
	  break;
 80025c2:	e101      	b.n	80027c8 <HAL_GPIO_EXTI_Callback+0x4f0>
		else if (check == 2) {
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	f040 80fe 	bne.w	80027c8 <HAL_GPIO_EXTI_Callback+0x4f0>
		  if (state == 2) {
 80025cc:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <HAL_GPIO_EXTI_Callback+0x320>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	f040 80f9 	bne.w	80027c8 <HAL_GPIO_EXTI_Callback+0x4f0>
			if (menu2_selected == true) {
 80025d6:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <HAL_GPIO_EXTI_Callback+0x330>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d058      	beq.n	8002690 <HAL_GPIO_EXTI_Callback+0x3b8>
			  if (firstMinSelected) {
 80025de:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <HAL_GPIO_EXTI_Callback+0x338>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d030      	beq.n	8002648 <HAL_GPIO_EXTI_Callback+0x370>
				firstMinSelected = false;
 80025e6:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <HAL_GPIO_EXTI_Callback+0x338>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	701a      	strb	r2, [r3, #0]
 80025ec:	e043      	b.n	8002676 <HAL_GPIO_EXTI_Callback+0x39e>
 80025ee:	bf00      	nop
 80025f0:	40010c00 	.word	0x40010c00
 80025f4:	20000258 	.word	0x20000258
 80025f8:	20000008 	.word	0x20000008
 80025fc:	2000000a 	.word	0x2000000a
 8002600:	20000280 	.word	0x20000280
 8002604:	20000284 	.word	0x20000284
 8002608:	20000281 	.word	0x20000281
 800260c:	2000001c 	.word	0x2000001c
 8002610:	200002b5 	.word	0x200002b5
 8002614:	200002b6 	.word	0x200002b6
 8002618:	200002b7 	.word	0x200002b7
 800261c:	200002b8 	.word	0x200002b8
 8002620:	20000224 	.word	0x20000224
 8002624:	20000282 	.word	0x20000282
 8002628:	20000270 	.word	0x20000270
 800262c:	1b4e81b5 	.word	0x1b4e81b5
 8002630:	2000027c 	.word	0x2000027c
 8002634:	88888889 	.word	0x88888889
 8002638:	cccccccd 	.word	0xcccccccd
 800263c:	2000027d 	.word	0x2000027d
 8002640:	2000027e 	.word	0x2000027e
 8002644:	2000027f 	.word	0x2000027f
			  } else if (lastMinSelected) {
 8002648:	4b65      	ldr	r3, [pc, #404]	; (80027e0 <HAL_GPIO_EXTI_Callback+0x508>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <HAL_GPIO_EXTI_Callback+0x380>
				lastMinSelected = false;
 8002650:	4b63      	ldr	r3, [pc, #396]	; (80027e0 <HAL_GPIO_EXTI_Callback+0x508>)
 8002652:	2200      	movs	r2, #0
 8002654:	701a      	strb	r2, [r3, #0]
 8002656:	e00e      	b.n	8002676 <HAL_GPIO_EXTI_Callback+0x39e>
			  } else if (firstSecSelected) {
 8002658:	4b62      	ldr	r3, [pc, #392]	; (80027e4 <HAL_GPIO_EXTI_Callback+0x50c>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_GPIO_EXTI_Callback+0x390>
				firstSecSelected = false;
 8002660:	4b60      	ldr	r3, [pc, #384]	; (80027e4 <HAL_GPIO_EXTI_Callback+0x50c>)
 8002662:	2200      	movs	r2, #0
 8002664:	701a      	strb	r2, [r3, #0]
 8002666:	e006      	b.n	8002676 <HAL_GPIO_EXTI_Callback+0x39e>
			  } else if (lastSecSelected) {
 8002668:	4b5f      	ldr	r3, [pc, #380]	; (80027e8 <HAL_GPIO_EXTI_Callback+0x510>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d002      	beq.n	8002676 <HAL_GPIO_EXTI_Callback+0x39e>
				lastSecSelected = false;
 8002670:	4b5d      	ldr	r3, [pc, #372]	; (80027e8 <HAL_GPIO_EXTI_Callback+0x510>)
 8002672:	2200      	movs	r2, #0
 8002674:	701a      	strb	r2, [r3, #0]
			  CLCD_I2C_BlinkOff(&LCD);
 8002676:	485d      	ldr	r0, [pc, #372]	; (80027ec <HAL_GPIO_EXTI_Callback+0x514>)
 8002678:	f7ff fb3e 	bl	8001cf8 <CLCD_I2C_BlinkOff>
			  CLCD_I2C_CursorOff(&LCD);
 800267c:	485b      	ldr	r0, [pc, #364]	; (80027ec <HAL_GPIO_EXTI_Callback+0x514>)
 800267e:	f7ff fb0f 	bl	8001ca0 <CLCD_I2C_CursorOff>
			  menu2_selected = false;
 8002682:	4b5b      	ldr	r3, [pc, #364]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x518>)
 8002684:	2200      	movs	r2, #0
 8002686:	701a      	strb	r2, [r3, #0]
			  refreshSelection = true;
 8002688:	4b5a      	ldr	r3, [pc, #360]	; (80027f4 <HAL_GPIO_EXTI_Callback+0x51c>)
 800268a:	2201      	movs	r2, #1
 800268c:	701a      	strb	r2, [r3, #0]
	  break;
 800268e:	e09b      	b.n	80027c8 <HAL_GPIO_EXTI_Callback+0x4f0>
			  save_menu_value();
 8002690:	f001 f814 	bl	80036bc <save_menu_value>
			  state = 1;
 8002694:	4b58      	ldr	r3, [pc, #352]	; (80027f8 <HAL_GPIO_EXTI_Callback+0x520>)
 8002696:	2201      	movs	r2, #1
 8002698:	701a      	strb	r2, [r3, #0]
	  break;
 800269a:	e095      	b.n	80027c8 <HAL_GPIO_EXTI_Callback+0x4f0>
	}

	case BTN_Start_Pin: {
	  if (BTN_START_CLICK) {
 800269c:	2108      	movs	r1, #8
 800269e:	4857      	ldr	r0, [pc, #348]	; (80027fc <HAL_GPIO_EXTI_Callback+0x524>)
 80026a0:	f001 fdd0 	bl	8004244 <HAL_GPIO_ReadPin>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d105      	bne.n	80026b6 <HAL_GPIO_EXTI_Callback+0x3de>
		BTN_Start.StartPress = HAL_GetTick();
 80026aa:	f001 f90b 	bl	80038c4 <HAL_GetTick>
 80026ae:	4603      	mov	r3, r0
 80026b0:	4a53      	ldr	r2, [pc, #332]	; (8002800 <HAL_GPIO_EXTI_Callback+0x528>)
 80026b2:	60d3      	str	r3, [r2, #12]
			state = 1;
			save_menu_value();
		  }
		}
	  }
	  break;
 80026b4:	e08a      	b.n	80027cc <HAL_GPIO_EXTI_Callback+0x4f4>
		BTN_Start.StopPress = HAL_GetTick();
 80026b6:	f001 f905 	bl	80038c4 <HAL_GetTick>
 80026ba:	4603      	mov	r3, r0
 80026bc:	4a50      	ldr	r2, [pc, #320]	; (8002800 <HAL_GPIO_EXTI_Callback+0x528>)
 80026be:	6113      	str	r3, [r2, #16]
		BTN_Start.timePress = BTN_Start.StopPress - BTN_Start.StartPress;
 80026c0:	4b4f      	ldr	r3, [pc, #316]	; (8002800 <HAL_GPIO_EXTI_Callback+0x528>)
 80026c2:	691a      	ldr	r2, [r3, #16]
 80026c4:	4b4e      	ldr	r3, [pc, #312]	; (8002800 <HAL_GPIO_EXTI_Callback+0x528>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	4a4d      	ldr	r2, [pc, #308]	; (8002800 <HAL_GPIO_EXTI_Callback+0x528>)
 80026cc:	6093      	str	r3, [r2, #8]
		if (isShortClick(&BTN_Start)) {
 80026ce:	484c      	ldr	r0, [pc, #304]	; (8002800 <HAL_GPIO_EXTI_Callback+0x528>)
 80026d0:	f7ff f95c 	bl	800198c <isShortClick>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d078      	beq.n	80027cc <HAL_GPIO_EXTI_Callback+0x4f4>
		  if (state == 1) {
 80026da:	4b47      	ldr	r3, [pc, #284]	; (80027f8 <HAL_GPIO_EXTI_Callback+0x520>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d11b      	bne.n	800271a <HAL_GPIO_EXTI_Callback+0x442>
			state = 3;
 80026e2:	4b45      	ldr	r3, [pc, #276]	; (80027f8 <HAL_GPIO_EXTI_Callback+0x520>)
 80026e4:	2203      	movs	r2, #3
 80026e6:	701a      	strb	r2, [r3, #0]
			reset_state();
 80026e8:	f000 ffd6 	bl	8003698 <reset_state>
			if (menu2_value == 1)
 80026ec:	4b45      	ldr	r3, [pc, #276]	; (8002804 <HAL_GPIO_EXTI_Callback+0x52c>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d108      	bne.n	8002706 <HAL_GPIO_EXTI_Callback+0x42e>
			  set_motor(1, 1, pwm);
 80026f4:	4b44      	ldr	r3, [pc, #272]	; (8002808 <HAL_GPIO_EXTI_Callback+0x530>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	461a      	mov	r2, r3
 80026fc:	2101      	movs	r1, #1
 80026fe:	2001      	movs	r0, #1
 8002700:	f000 ff20 	bl	8003544 <set_motor>
	  break;
 8002704:	e062      	b.n	80027cc <HAL_GPIO_EXTI_Callback+0x4f4>
			  set_motor(1, -1, pwm);
 8002706:	4b40      	ldr	r3, [pc, #256]	; (8002808 <HAL_GPIO_EXTI_Callback+0x530>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	b29b      	uxth	r3, r3
 800270c:	461a      	mov	r2, r3
 800270e:	f04f 31ff 	mov.w	r1, #4294967295
 8002712:	2001      	movs	r0, #1
 8002714:	f000 ff16 	bl	8003544 <set_motor>
	  break;
 8002718:	e058      	b.n	80027cc <HAL_GPIO_EXTI_Callback+0x4f4>
		  } else if (state == 2) {
 800271a:	4b37      	ldr	r3, [pc, #220]	; (80027f8 <HAL_GPIO_EXTI_Callback+0x520>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b02      	cmp	r3, #2
 8002720:	d154      	bne.n	80027cc <HAL_GPIO_EXTI_Callback+0x4f4>
			state = 1;
 8002722:	4b35      	ldr	r3, [pc, #212]	; (80027f8 <HAL_GPIO_EXTI_Callback+0x520>)
 8002724:	2201      	movs	r2, #1
 8002726:	701a      	strb	r2, [r3, #0]
			save_menu_value();
 8002728:	f000 ffc8 	bl	80036bc <save_menu_value>
	  break;
 800272c:	e04e      	b.n	80027cc <HAL_GPIO_EXTI_Callback+0x4f4>
	}

	case BTN_Stop_Pin: {
	  if (BTN_STOP_CLICK) {
 800272e:	2110      	movs	r1, #16
 8002730:	4832      	ldr	r0, [pc, #200]	; (80027fc <HAL_GPIO_EXTI_Callback+0x524>)
 8002732:	f001 fd87 	bl	8004244 <HAL_GPIO_ReadPin>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d105      	bne.n	8002748 <HAL_GPIO_EXTI_Callback+0x470>
		BTN_Stop.StartPress = HAL_GetTick();
 800273c:	f001 f8c2 	bl	80038c4 <HAL_GetTick>
 8002740:	4603      	mov	r3, r0
 8002742:	4a32      	ldr	r2, [pc, #200]	; (800280c <HAL_GPIO_EXTI_Callback+0x534>)
 8002744:	60d3      	str	r3, [r2, #12]
			LED_OFF();
			set_motor(2, 0, 0);
		  }
		}
	  }
	  break;
 8002746:	e043      	b.n	80027d0 <HAL_GPIO_EXTI_Callback+0x4f8>
		BTN_Stop.StopPress = HAL_GetTick();
 8002748:	f001 f8bc 	bl	80038c4 <HAL_GetTick>
 800274c:	4603      	mov	r3, r0
 800274e:	4a2f      	ldr	r2, [pc, #188]	; (800280c <HAL_GPIO_EXTI_Callback+0x534>)
 8002750:	6113      	str	r3, [r2, #16]
		BTN_Stop.timePress = BTN_Stop.StopPress - BTN_Stop.StartPress;
 8002752:	4b2e      	ldr	r3, [pc, #184]	; (800280c <HAL_GPIO_EXTI_Callback+0x534>)
 8002754:	691a      	ldr	r2, [r3, #16]
 8002756:	4b2d      	ldr	r3, [pc, #180]	; (800280c <HAL_GPIO_EXTI_Callback+0x534>)
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	4a2b      	ldr	r2, [pc, #172]	; (800280c <HAL_GPIO_EXTI_Callback+0x534>)
 800275e:	6093      	str	r3, [r2, #8]
		if (isShortClick(&BTN_Stop)) {
 8002760:	482a      	ldr	r0, [pc, #168]	; (800280c <HAL_GPIO_EXTI_Callback+0x534>)
 8002762:	f7ff f913 	bl	800198c <isShortClick>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d031      	beq.n	80027d0 <HAL_GPIO_EXTI_Callback+0x4f8>
		  if (state == 3) {
 800276c:	4b22      	ldr	r3, [pc, #136]	; (80027f8 <HAL_GPIO_EXTI_Callback+0x520>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b03      	cmp	r3, #3
 8002772:	d108      	bne.n	8002786 <HAL_GPIO_EXTI_Callback+0x4ae>
			set_motor(2, 0, 0);
 8002774:	2200      	movs	r2, #0
 8002776:	2100      	movs	r1, #0
 8002778:	2002      	movs	r0, #2
 800277a:	f000 fee3 	bl	8003544 <set_motor>
			state = 4;
 800277e:	4b1e      	ldr	r3, [pc, #120]	; (80027f8 <HAL_GPIO_EXTI_Callback+0x520>)
 8002780:	2204      	movs	r2, #4
 8002782:	701a      	strb	r2, [r3, #0]
	  break;
 8002784:	e024      	b.n	80027d0 <HAL_GPIO_EXTI_Callback+0x4f8>
		  } else if (state == 4) {
 8002786:	4b1c      	ldr	r3, [pc, #112]	; (80027f8 <HAL_GPIO_EXTI_Callback+0x520>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b04      	cmp	r3, #4
 800278c:	d120      	bne.n	80027d0 <HAL_GPIO_EXTI_Callback+0x4f8>
			nLoop = 0;
 800278e:	4b20      	ldr	r3, [pc, #128]	; (8002810 <HAL_GPIO_EXTI_Callback+0x538>)
 8002790:	2200      	movs	r2, #0
 8002792:	801a      	strh	r2, [r3, #0]
			state = 1;
 8002794:	4b18      	ldr	r3, [pc, #96]	; (80027f8 <HAL_GPIO_EXTI_Callback+0x520>)
 8002796:	2201      	movs	r2, #1
 8002798:	701a      	strb	r2, [r3, #0]
			nSec = 0;
 800279a:	4b1e      	ldr	r3, [pc, #120]	; (8002814 <HAL_GPIO_EXTI_Callback+0x53c>)
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
			refreshLCD = true;
 80027a0:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <HAL_GPIO_EXTI_Callback+0x540>)
 80027a2:	2201      	movs	r2, #1
 80027a4:	701a      	strb	r2, [r3, #0]
			LED_OFF();
 80027a6:	f000 fb73 	bl	8002e90 <LED_OFF>
			set_motor(2, 0, 0);
 80027aa:	2200      	movs	r2, #0
 80027ac:	2100      	movs	r1, #0
 80027ae:	2002      	movs	r0, #2
 80027b0:	f000 fec8 	bl	8003544 <set_motor>
	  break;
 80027b4:	e00c      	b.n	80027d0 <HAL_GPIO_EXTI_Callback+0x4f8>
	}

	case PROBE_Pin:
	  if (state == 3)
 80027b6:	4b10      	ldr	r3, [pc, #64]	; (80027f8 <HAL_GPIO_EXTI_Callback+0x520>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	2b03      	cmp	r3, #3
 80027bc:	d10a      	bne.n	80027d4 <HAL_GPIO_EXTI_Callback+0x4fc>
		stopCmd();
 80027be:	f000 ffed 	bl	800379c <stopCmd>
	  break;
 80027c2:	e007      	b.n	80027d4 <HAL_GPIO_EXTI_Callback+0x4fc>

	default:
	  break;
 80027c4:	bf00      	nop
 80027c6:	e006      	b.n	80027d6 <HAL_GPIO_EXTI_Callback+0x4fe>
	  break;
 80027c8:	bf00      	nop
 80027ca:	e004      	b.n	80027d6 <HAL_GPIO_EXTI_Callback+0x4fe>
	  break;
 80027cc:	bf00      	nop
 80027ce:	e002      	b.n	80027d6 <HAL_GPIO_EXTI_Callback+0x4fe>
	  break;
 80027d0:	bf00      	nop
 80027d2:	e000      	b.n	80027d6 <HAL_GPIO_EXTI_Callback+0x4fe>
	  break;
 80027d4:	bf00      	nop
  } // End EXTI
}
 80027d6:	bf00      	nop
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	200002b6 	.word	0x200002b6
 80027e4:	200002b7 	.word	0x200002b7
 80027e8:	200002b8 	.word	0x200002b8
 80027ec:	20000224 	.word	0x20000224
 80027f0:	20000281 	.word	0x20000281
 80027f4:	20000284 	.word	0x20000284
 80027f8:	20000008 	.word	0x20000008
 80027fc:	40010c00 	.word	0x40010c00
 8002800:	20000230 	.word	0x20000230
 8002804:	20000270 	.word	0x20000270
 8002808:	20000018 	.word	0x20000018
 800280c:	20000244 	.word	0x20000244
 8002810:	20000274 	.word	0x20000274
 8002814:	20000278 	.word	0x20000278
 8002818:	2000000b 	.word	0x2000000b
 800281c:	00000000 	.word	0x00000000

08002820 <HAL_TIM_PeriodElapsedCallback>:

u32 timer_count = 0;
u32 tick1s = 0;
float u = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002820:	b5b0      	push	{r4, r5, r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4) // 1ms
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a80      	ldr	r2, [pc, #512]	; (8002a30 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800282e:	4293      	cmp	r3, r2
 8002830:	f040 80f5 	bne.w	8002a1e <HAL_TIM_PeriodElapsedCallback+0x1fe>
  {
	timer_count++;
 8002834:	4b7f      	ldr	r3, [pc, #508]	; (8002a34 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	3301      	adds	r3, #1
 800283a:	4a7e      	ldr	r2, [pc, #504]	; (8002a34 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800283c:	6013      	str	r3, [r2, #0]

	if (timer_count >= timeInterval) // 20ms 50Hz
 800283e:	4b7d      	ldr	r3, [pc, #500]	; (8002a34 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	4b7d      	ldr	r3, [pc, #500]	; (8002a38 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	429a      	cmp	r2, r3
 8002848:	f0c0 80d0 	bcc.w	80029ec <HAL_TIM_PeriodElapsedCallback+0x1cc>
		{
	  curPos = TIM1_count;
 800284c:	4b7b      	ldr	r3, [pc, #492]	; (8002a3c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	4a7b      	ldr	r2, [pc, #492]	; (8002a40 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002852:	6013      	str	r3, [r2, #0]
	  s32 deltaPos = curPos - prePos;
 8002854:	4b7a      	ldr	r3, [pc, #488]	; (8002a40 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	4b7a      	ldr	r3, [pc, #488]	; (8002a44 <HAL_TIM_PeriodElapsedCallback+0x224>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	60fb      	str	r3, [r7, #12]
	  prePos = curPos;
 8002860:	4b77      	ldr	r3, [pc, #476]	; (8002a40 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a77      	ldr	r2, [pc, #476]	; (8002a44 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002866:	6013      	str	r3, [r2, #0]
	  curSpeed = 60 * (fabs(deltaPos) / (totalPulse)) / (timeInterval / 1000.0);
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f7fd fdc3 	bl	80003f4 <__aeabi_i2d>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	4614      	mov	r4, r2
 8002874:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002878:	a36b      	add	r3, pc, #428	; (adr r3, 8002a28 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800287a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800287e:	4620      	mov	r0, r4
 8002880:	4629      	mov	r1, r5
 8002882:	f7fd ff4b 	bl	800071c <__aeabi_ddiv>
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	4610      	mov	r0, r2
 800288c:	4619      	mov	r1, r3
 800288e:	f04f 0200 	mov.w	r2, #0
 8002892:	4b6d      	ldr	r3, [pc, #436]	; (8002a48 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002894:	f7fd fe18 	bl	80004c8 <__aeabi_dmul>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	4614      	mov	r4, r2
 800289e:	461d      	mov	r5, r3
 80028a0:	4b65      	ldr	r3, [pc, #404]	; (8002a38 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7fd fd95 	bl	80003d4 <__aeabi_ui2d>
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	4b67      	ldr	r3, [pc, #412]	; (8002a4c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80028b0:	f7fd ff34 	bl	800071c <__aeabi_ddiv>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	4620      	mov	r0, r4
 80028ba:	4629      	mov	r1, r5
 80028bc:	f7fd ff2e 	bl	800071c <__aeabi_ddiv>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4610      	mov	r0, r2
 80028c6:	4619      	mov	r1, r3
 80028c8:	f7fe f838 	bl	800093c <__aeabi_d2f>
 80028cc:	4603      	mov	r3, r0
 80028ce:	4a60      	ldr	r2, [pc, #384]	; (8002a50 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80028d0:	6013      	str	r3, [r2, #0]
	  e = curSpeed - vref;
 80028d2:	4b5f      	ldr	r3, [pc, #380]	; (8002a50 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a5f      	ldr	r2, [pc, #380]	; (8002a54 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80028d8:	6812      	ldr	r2, [r2, #0]
 80028da:	4611      	mov	r1, r2
 80028dc:	4618      	mov	r0, r3
 80028de:	f7fe f881 	bl	80009e4 <__aeabi_fsub>
 80028e2:	4603      	mov	r3, r0
 80028e4:	461a      	mov	r2, r3
 80028e6:	4b5c      	ldr	r3, [pc, #368]	; (8002a58 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80028e8:	601a      	str	r2, [r3, #0]
	  eint = eint + e * timeInterval;
 80028ea:	4b53      	ldr	r3, [pc, #332]	; (8002a38 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fe f92a 	bl	8000b48 <__aeabi_ui2f>
 80028f4:	4602      	mov	r2, r0
 80028f6:	4b58      	ldr	r3, [pc, #352]	; (8002a58 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4619      	mov	r1, r3
 80028fc:	4610      	mov	r0, r2
 80028fe:	f7fe f97b 	bl	8000bf8 <__aeabi_fmul>
 8002902:	4603      	mov	r3, r0
 8002904:	461a      	mov	r2, r3
 8002906:	4b55      	ldr	r3, [pc, #340]	; (8002a5c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4619      	mov	r1, r3
 800290c:	4610      	mov	r0, r2
 800290e:	f7fe f86b 	bl	80009e8 <__addsf3>
 8002912:	4603      	mov	r3, r0
 8002914:	461a      	mov	r2, r3
 8002916:	4b51      	ldr	r3, [pc, #324]	; (8002a5c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002918:	601a      	str	r2, [r3, #0]
	  float de = (e - preE) / timeInterval;
 800291a:	4b4f      	ldr	r3, [pc, #316]	; (8002a58 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a50      	ldr	r2, [pc, #320]	; (8002a60 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002920:	6812      	ldr	r2, [r2, #0]
 8002922:	4611      	mov	r1, r2
 8002924:	4618      	mov	r0, r3
 8002926:	f7fe f85d 	bl	80009e4 <__aeabi_fsub>
 800292a:	4603      	mov	r3, r0
 800292c:	461c      	mov	r4, r3
 800292e:	4b42      	ldr	r3, [pc, #264]	; (8002a38 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7fe f908 	bl	8000b48 <__aeabi_ui2f>
 8002938:	4603      	mov	r3, r0
 800293a:	4619      	mov	r1, r3
 800293c:	4620      	mov	r0, r4
 800293e:	f7fe fa0f 	bl	8000d60 <__aeabi_fdiv>
 8002942:	4603      	mov	r3, r0
 8002944:	60bb      	str	r3, [r7, #8]
	  preE = e;
 8002946:	4b44      	ldr	r3, [pc, #272]	; (8002a58 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a45      	ldr	r2, [pc, #276]	; (8002a60 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800294c:	6013      	str	r3, [r2, #0]
	  u = kp * e + ki * eint + kd * de;   //%PWM
 800294e:	4b45      	ldr	r3, [pc, #276]	; (8002a64 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a41      	ldr	r2, [pc, #260]	; (8002a58 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8002954:	6812      	ldr	r2, [r2, #0]
 8002956:	4611      	mov	r1, r2
 8002958:	4618      	mov	r0, r3
 800295a:	f7fe f94d 	bl	8000bf8 <__aeabi_fmul>
 800295e:	4603      	mov	r3, r0
 8002960:	461c      	mov	r4, r3
 8002962:	4b41      	ldr	r3, [pc, #260]	; (8002a68 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a3d      	ldr	r2, [pc, #244]	; (8002a5c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002968:	6812      	ldr	r2, [r2, #0]
 800296a:	4611      	mov	r1, r2
 800296c:	4618      	mov	r0, r3
 800296e:	f7fe f943 	bl	8000bf8 <__aeabi_fmul>
 8002972:	4603      	mov	r3, r0
 8002974:	4619      	mov	r1, r3
 8002976:	4620      	mov	r0, r4
 8002978:	f7fe f836 	bl	80009e8 <__addsf3>
 800297c:	4603      	mov	r3, r0
 800297e:	461c      	mov	r4, r3
 8002980:	4b3a      	ldr	r3, [pc, #232]	; (8002a6c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68b9      	ldr	r1, [r7, #8]
 8002986:	4618      	mov	r0, r3
 8002988:	f7fe f936 	bl	8000bf8 <__aeabi_fmul>
 800298c:	4603      	mov	r3, r0
 800298e:	4619      	mov	r1, r3
 8002990:	4620      	mov	r0, r4
 8002992:	f7fe f829 	bl	80009e8 <__addsf3>
 8002996:	4603      	mov	r3, r0
 8002998:	461a      	mov	r2, r3
 800299a:	4b35      	ldr	r3, [pc, #212]	; (8002a70 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800299c:	601a      	str	r2, [r3, #0]

	  if (u < 0) {
 800299e:	4b34      	ldr	r3, [pc, #208]	; (8002a70 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f04f 0100 	mov.w	r1, #0
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fe fac4 	bl	8000f34 <__aeabi_fcmplt>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00d      	beq.n	80029ce <HAL_TIM_PeriodElapsedCallback+0x1ae>
		pidDir = -menu2_value;
 80029b2:	4b30      	ldr	r3, [pc, #192]	; (8002a74 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	425b      	negs	r3, r3
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	b25a      	sxtb	r2, r3
 80029be:	4b2e      	ldr	r3, [pc, #184]	; (8002a78 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80029c0:	701a      	strb	r2, [r3, #0]
		u = fabs(u);
 80029c2:	4b2b      	ldr	r3, [pc, #172]	; (8002a70 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029ca:	4a29      	ldr	r2, [pc, #164]	; (8002a70 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80029cc:	6013      	str	r3, [r2, #0]
	  }
	  if (u > 1000)
 80029ce:	4b28      	ldr	r3, [pc, #160]	; (8002a70 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	492a      	ldr	r1, [pc, #168]	; (8002a7c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fe facb 	bl	8000f70 <__aeabi_fcmpgt>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d002      	beq.n	80029e6 <HAL_TIM_PeriodElapsedCallback+0x1c6>
		u = 1000;
 80029e0:	4b23      	ldr	r3, [pc, #140]	; (8002a70 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80029e2:	4a26      	ldr	r2, [pc, #152]	; (8002a7c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80029e4:	601a      	str	r2, [r3, #0]

	  if (FLAG_run == true) {
//		set_motor(1, pidDir, (u32) u);
	  }
	  timer_count = 0;
 80029e6:	4b13      	ldr	r3, [pc, #76]	; (8002a34 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
	}

	tick1s++;
 80029ec:	4b24      	ldr	r3, [pc, #144]	; (8002a80 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	3301      	adds	r3, #1
 80029f2:	4a23      	ldr	r2, [pc, #140]	; (8002a80 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80029f4:	6013      	str	r3, [r2, #0]
	if (tick1s >= 1000) {
 80029f6:	4b22      	ldr	r3, [pc, #136]	; (8002a80 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029fe:	d30e      	bcc.n	8002a1e <HAL_TIM_PeriodElapsedCallback+0x1fe>
	  if (state == 3) {
 8002a00:	4b20      	ldr	r3, [pc, #128]	; (8002a84 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	d107      	bne.n	8002a18 <HAL_TIM_PeriodElapsedCallback+0x1f8>
		nSec++;
 8002a08:	4b1f      	ldr	r3, [pc, #124]	; (8002a88 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	4a1e      	ldr	r2, [pc, #120]	; (8002a88 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8002a10:	6013      	str	r3, [r2, #0]
		refreshClock = true;
 8002a12:	4b1e      	ldr	r3, [pc, #120]	; (8002a8c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8002a14:	2201      	movs	r2, #1
 8002a16:	701a      	strb	r2, [r3, #0]
	  }
	  tick1s = 0;
 8002a18:	4b19      	ldr	r3, [pc, #100]	; (8002a80 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
	}
  } // End TIM Elapsed
}
 8002a1e:	bf00      	nop
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bdb0      	pop	{r4, r5, r7, pc}
 8002a26:	bf00      	nop
 8002a28:	00000000 	.word	0x00000000
 8002a2c:	40c73400 	.word	0x40c73400
 8002a30:	40000800 	.word	0x40000800
 8002a34:	200002bc 	.word	0x200002bc
 8002a38:	2000000c 	.word	0x2000000c
 8002a3c:	40012c00 	.word	0x40012c00
 8002a40:	20000290 	.word	0x20000290
 8002a44:	20000294 	.word	0x20000294
 8002a48:	404e0000 	.word	0x404e0000
 8002a4c:	408f4000 	.word	0x408f4000
 8002a50:	2000028c 	.word	0x2000028c
 8002a54:	200002ac 	.word	0x200002ac
 8002a58:	200002a4 	.word	0x200002a4
 8002a5c:	200002a0 	.word	0x200002a0
 8002a60:	200002a8 	.word	0x200002a8
 8002a64:	20000010 	.word	0x20000010
 8002a68:	20000298 	.word	0x20000298
 8002a6c:	2000029c 	.word	0x2000029c
 8002a70:	200002c4 	.word	0x200002c4
 8002a74:	20000270 	.word	0x20000270
 8002a78:	20000014 	.word	0x20000014
 8002a7c:	447a0000 	.word	0x447a0000
 8002a80:	200002c0 	.word	0x200002c0
 8002a84:	20000008 	.word	0x20000008
 8002a88:	20000278 	.word	0x20000278
 8002a8c:	20000288 	.word	0x20000288

08002a90 <check_state>:

void check_state() {
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
// If Enter new state
  if (preState != state) {
 8002a94:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <check_state+0x30>)
 8002a96:	781a      	ldrb	r2, [r3, #0]
 8002a98:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <check_state+0x34>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d00c      	beq.n	8002aba <check_state+0x2a>
	LCD_Clear(&LCD);
 8002aa0:	4809      	ldr	r0, [pc, #36]	; (8002ac8 <check_state+0x38>)
 8002aa2:	f7ff f96f 	bl	8001d84 <LCD_Clear>
	preState = state;
 8002aa6:	4b07      	ldr	r3, [pc, #28]	; (8002ac4 <check_state+0x34>)
 8002aa8:	781a      	ldrb	r2, [r3, #0]
 8002aaa:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <check_state+0x30>)
 8002aac:	701a      	strb	r2, [r3, #0]
	refreshLCD = true;
 8002aae:	4b07      	ldr	r3, [pc, #28]	; (8002acc <check_state+0x3c>)
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	701a      	strb	r2, [r3, #0]
	refreshSelection = true;
 8002ab4:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <check_state+0x40>)
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	701a      	strb	r2, [r3, #0]
  }
}
 8002aba:	bf00      	nop
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	20000009 	.word	0x20000009
 8002ac4:	20000008 	.word	0x20000008
 8002ac8:	20000224 	.word	0x20000224
 8002acc:	2000000b 	.word	0x2000000b
 8002ad0:	20000284 	.word	0x20000284

08002ad4 <check_ecd>:

u32 preEcd = 0;
void check_ecd() {
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
  if (state == 2) {
 8002ada:	4b8b      	ldr	r3, [pc, #556]	; (8002d08 <check_ecd+0x234>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	f040 81b0 	bne.w	8002e44 <check_ecd+0x370>
	if (preEcd != TIM2_count) {
 8002ae4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ae8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002aea:	4b88      	ldr	r3, [pc, #544]	; (8002d0c <check_ecd+0x238>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	f000 81ae 	beq.w	8002e50 <check_ecd+0x37c>
	  s32 delta = preEcd - TIM2_count;
 8002af4:	4b85      	ldr	r3, [pc, #532]	; (8002d0c <check_ecd+0x238>)
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	603b      	str	r3, [r7, #0]
	  if (abs(delta) > 10000) // wrap
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	bfb8      	it	lt
 8002b08:	425b      	neglt	r3, r3
 8002b0a:	f242 7210 	movw	r2, #10000	; 0x2710
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	dd05      	ble.n	8002b1e <check_ecd+0x4a>
		preEcd = TIM2_count;
 8002b12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	4a7c      	ldr	r2, [pc, #496]	; (8002d0c <check_ecd+0x238>)
 8002b1a:	6013      	str	r3, [r2, #0]
	  }
	}
  } else {
	preEcd = TIM2_count;
  }
  return;
 8002b1c:	e198      	b.n	8002e50 <check_ecd+0x37c>
	  else if (abs(delta) > ecdFilter) {
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	bfb8      	it	lt
 8002b24:	425b      	neglt	r3, r3
 8002b26:	2b06      	cmp	r3, #6
 8002b28:	f340 8192 	ble.w	8002e50 <check_ecd+0x37c>
		preEcd = TIM2_count;
 8002b2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	4a76      	ldr	r2, [pc, #472]	; (8002d0c <check_ecd+0x238>)
 8002b34:	6013      	str	r3, [r2, #0]
		if (menu1_selected == true) {
 8002b36:	4b76      	ldr	r3, [pc, #472]	; (8002d10 <check_ecd+0x23c>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d024      	beq.n	8002b88 <check_ecd+0xb4>
		  if (delta > 0)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	dd06      	ble.n	8002b52 <check_ecd+0x7e>
			menu1_value++;
 8002b44:	4b73      	ldr	r3, [pc, #460]	; (8002d14 <check_ecd+0x240>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	4b71      	ldr	r3, [pc, #452]	; (8002d14 <check_ecd+0x240>)
 8002b4e:	701a      	strb	r2, [r3, #0]
 8002b50:	e008      	b.n	8002b64 <check_ecd+0x90>
		  else if (delta < 0)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	da05      	bge.n	8002b64 <check_ecd+0x90>
			menu1_value--;
 8002b58:	4b6e      	ldr	r3, [pc, #440]	; (8002d14 <check_ecd+0x240>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	4b6c      	ldr	r3, [pc, #432]	; (8002d14 <check_ecd+0x240>)
 8002b62:	701a      	strb	r2, [r3, #0]
		  if (menu1_value > maxMenu1Value) //we do not go above 100
 8002b64:	4b6b      	ldr	r3, [pc, #428]	; (8002d14 <check_ecd+0x240>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b3c      	cmp	r3, #60	; 0x3c
 8002b6a:	d902      	bls.n	8002b72 <check_ecd+0x9e>
			menu1_value = maxMenu1Value;
 8002b6c:	4b69      	ldr	r3, [pc, #420]	; (8002d14 <check_ecd+0x240>)
 8002b6e:	223c      	movs	r2, #60	; 0x3c
 8002b70:	701a      	strb	r2, [r3, #0]
		  if (menu1_value < minMenu1Value)
 8002b72:	4b68      	ldr	r3, [pc, #416]	; (8002d14 <check_ecd+0x240>)
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	2b1d      	cmp	r3, #29
 8002b78:	d802      	bhi.n	8002b80 <check_ecd+0xac>
			menu1_value = minMenu1Value;
 8002b7a:	4b66      	ldr	r3, [pc, #408]	; (8002d14 <check_ecd+0x240>)
 8002b7c:	221e      	movs	r2, #30
 8002b7e:	701a      	strb	r2, [r3, #0]
		  refreshMenu1 = true;
 8002b80:	4b65      	ldr	r3, [pc, #404]	; (8002d18 <check_ecd+0x244>)
 8002b82:	2201      	movs	r2, #1
 8002b84:	701a      	strb	r2, [r3, #0]
  return;
 8002b86:	e163      	b.n	8002e50 <check_ecd+0x37c>
		else if (menu2_selected == true) {
 8002b88:	4b64      	ldr	r3, [pc, #400]	; (8002d1c <check_ecd+0x248>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f000 8109 	beq.w	8002da4 <check_ecd+0x2d0>
		  if (firstMinSelected == true || lastMinSelected == true
 8002b92:	4b63      	ldr	r3, [pc, #396]	; (8002d20 <check_ecd+0x24c>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10c      	bne.n	8002bb4 <check_ecd+0xe0>
 8002b9a:	4b62      	ldr	r3, [pc, #392]	; (8002d24 <check_ecd+0x250>)
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d108      	bne.n	8002bb4 <check_ecd+0xe0>
			  || firstSecSelected == true || lastSecSelected == true) {
 8002ba2:	4b61      	ldr	r3, [pc, #388]	; (8002d28 <check_ecd+0x254>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d104      	bne.n	8002bb4 <check_ecd+0xe0>
 8002baa:	4b60      	ldr	r3, [pc, #384]	; (8002d2c <check_ecd+0x258>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 808f 	beq.w	8002cd2 <check_ecd+0x1fe>
			if (firstMinSelected) {
 8002bb4:	4b5a      	ldr	r3, [pc, #360]	; (8002d20 <check_ecd+0x24c>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d01e      	beq.n	8002bfa <check_ecd+0x126>
			  if (delta > 0)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	dd06      	ble.n	8002bd0 <check_ecd+0xfc>
				firstMin++;
 8002bc2:	4b5b      	ldr	r3, [pc, #364]	; (8002d30 <check_ecd+0x25c>)
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	4b59      	ldr	r3, [pc, #356]	; (8002d30 <check_ecd+0x25c>)
 8002bcc:	701a      	strb	r2, [r3, #0]
 8002bce:	e00c      	b.n	8002bea <check_ecd+0x116>
			  else if (delta < 0)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	da09      	bge.n	8002bea <check_ecd+0x116>
				if (firstMin > 0)
 8002bd6:	4b56      	ldr	r3, [pc, #344]	; (8002d30 <check_ecd+0x25c>)
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d005      	beq.n	8002bea <check_ecd+0x116>
				  firstMin--;
 8002bde:	4b54      	ldr	r3, [pc, #336]	; (8002d30 <check_ecd+0x25c>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	4b52      	ldr	r3, [pc, #328]	; (8002d30 <check_ecd+0x25c>)
 8002be8:	701a      	strb	r2, [r3, #0]
			  if (firstMin > 9) {
 8002bea:	4b51      	ldr	r3, [pc, #324]	; (8002d30 <check_ecd+0x25c>)
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	2b09      	cmp	r3, #9
 8002bf0:	d96b      	bls.n	8002cca <check_ecd+0x1f6>
				firstMin = 9;
 8002bf2:	4b4f      	ldr	r3, [pc, #316]	; (8002d30 <check_ecd+0x25c>)
 8002bf4:	2209      	movs	r2, #9
 8002bf6:	701a      	strb	r2, [r3, #0]
 8002bf8:	e067      	b.n	8002cca <check_ecd+0x1f6>
			} else if (lastMinSelected) {
 8002bfa:	4b4a      	ldr	r3, [pc, #296]	; (8002d24 <check_ecd+0x250>)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d01e      	beq.n	8002c40 <check_ecd+0x16c>
			  if (delta > 0)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	dd06      	ble.n	8002c16 <check_ecd+0x142>
				lastMin++;
 8002c08:	4b4a      	ldr	r3, [pc, #296]	; (8002d34 <check_ecd+0x260>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	4b48      	ldr	r3, [pc, #288]	; (8002d34 <check_ecd+0x260>)
 8002c12:	701a      	strb	r2, [r3, #0]
 8002c14:	e00c      	b.n	8002c30 <check_ecd+0x15c>
			  else if (delta < 0)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	da09      	bge.n	8002c30 <check_ecd+0x15c>
				if (lastMin > 0)
 8002c1c:	4b45      	ldr	r3, [pc, #276]	; (8002d34 <check_ecd+0x260>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d005      	beq.n	8002c30 <check_ecd+0x15c>
				  lastMin--;
 8002c24:	4b43      	ldr	r3, [pc, #268]	; (8002d34 <check_ecd+0x260>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	4b41      	ldr	r3, [pc, #260]	; (8002d34 <check_ecd+0x260>)
 8002c2e:	701a      	strb	r2, [r3, #0]
			  if (lastMin > 9) {
 8002c30:	4b40      	ldr	r3, [pc, #256]	; (8002d34 <check_ecd+0x260>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2b09      	cmp	r3, #9
 8002c36:	d948      	bls.n	8002cca <check_ecd+0x1f6>
				lastMin = 9;
 8002c38:	4b3e      	ldr	r3, [pc, #248]	; (8002d34 <check_ecd+0x260>)
 8002c3a:	2209      	movs	r2, #9
 8002c3c:	701a      	strb	r2, [r3, #0]
 8002c3e:	e044      	b.n	8002cca <check_ecd+0x1f6>
			} else if (firstSecSelected) {
 8002c40:	4b39      	ldr	r3, [pc, #228]	; (8002d28 <check_ecd+0x254>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d01e      	beq.n	8002c86 <check_ecd+0x1b2>
			  if (delta > 0)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	dd06      	ble.n	8002c5c <check_ecd+0x188>
				firstSec++;
 8002c4e:	4b3a      	ldr	r3, [pc, #232]	; (8002d38 <check_ecd+0x264>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	3301      	adds	r3, #1
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	4b38      	ldr	r3, [pc, #224]	; (8002d38 <check_ecd+0x264>)
 8002c58:	701a      	strb	r2, [r3, #0]
 8002c5a:	e00c      	b.n	8002c76 <check_ecd+0x1a2>
			  else if (delta < 0)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	da09      	bge.n	8002c76 <check_ecd+0x1a2>
				if (firstSec > 0)
 8002c62:	4b35      	ldr	r3, [pc, #212]	; (8002d38 <check_ecd+0x264>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d005      	beq.n	8002c76 <check_ecd+0x1a2>
				  firstSec--;
 8002c6a:	4b33      	ldr	r3, [pc, #204]	; (8002d38 <check_ecd+0x264>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	b2da      	uxtb	r2, r3
 8002c72:	4b31      	ldr	r3, [pc, #196]	; (8002d38 <check_ecd+0x264>)
 8002c74:	701a      	strb	r2, [r3, #0]
			  if (firstSec > 5) {
 8002c76:	4b30      	ldr	r3, [pc, #192]	; (8002d38 <check_ecd+0x264>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	2b05      	cmp	r3, #5
 8002c7c:	d925      	bls.n	8002cca <check_ecd+0x1f6>
				firstSec = 5;
 8002c7e:	4b2e      	ldr	r3, [pc, #184]	; (8002d38 <check_ecd+0x264>)
 8002c80:	2205      	movs	r2, #5
 8002c82:	701a      	strb	r2, [r3, #0]
 8002c84:	e021      	b.n	8002cca <check_ecd+0x1f6>
			} else if (lastSecSelected) {
 8002c86:	4b29      	ldr	r3, [pc, #164]	; (8002d2c <check_ecd+0x258>)
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d01d      	beq.n	8002cca <check_ecd+0x1f6>
			  if (delta > 0)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	dd06      	ble.n	8002ca2 <check_ecd+0x1ce>
				lastSec++;
 8002c94:	4b29      	ldr	r3, [pc, #164]	; (8002d3c <check_ecd+0x268>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	4b27      	ldr	r3, [pc, #156]	; (8002d3c <check_ecd+0x268>)
 8002c9e:	701a      	strb	r2, [r3, #0]
 8002ca0:	e00c      	b.n	8002cbc <check_ecd+0x1e8>
			  else if (delta < 0)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	da09      	bge.n	8002cbc <check_ecd+0x1e8>
				if (lastSec > 0)
 8002ca8:	4b24      	ldr	r3, [pc, #144]	; (8002d3c <check_ecd+0x268>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d005      	beq.n	8002cbc <check_ecd+0x1e8>
				  lastSec--;
 8002cb0:	4b22      	ldr	r3, [pc, #136]	; (8002d3c <check_ecd+0x268>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	b2da      	uxtb	r2, r3
 8002cb8:	4b20      	ldr	r3, [pc, #128]	; (8002d3c <check_ecd+0x268>)
 8002cba:	701a      	strb	r2, [r3, #0]
			  if (lastSec > 9) {
 8002cbc:	4b1f      	ldr	r3, [pc, #124]	; (8002d3c <check_ecd+0x268>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b09      	cmp	r3, #9
 8002cc2:	d902      	bls.n	8002cca <check_ecd+0x1f6>
				lastSec = 9;
 8002cc4:	4b1d      	ldr	r3, [pc, #116]	; (8002d3c <check_ecd+0x268>)
 8002cc6:	2209      	movs	r2, #9
 8002cc8:	701a      	strb	r2, [r3, #0]
			refreshMenu2 = true;
 8002cca:	4b1d      	ldr	r3, [pc, #116]	; (8002d40 <check_ecd+0x26c>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	701a      	strb	r2, [r3, #0]
 8002cd0:	e0bd      	b.n	8002e4e <check_ecd+0x37a>
			if (delta > 0)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	dd06      	ble.n	8002ce6 <check_ecd+0x212>
			  menu2_subCounter++;
 8002cd8:	4b1a      	ldr	r3, [pc, #104]	; (8002d44 <check_ecd+0x270>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	4b18      	ldr	r3, [pc, #96]	; (8002d44 <check_ecd+0x270>)
 8002ce2:	701a      	strb	r2, [r3, #0]
 8002ce4:	e008      	b.n	8002cf8 <check_ecd+0x224>
			else if (delta < 0)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	da05      	bge.n	8002cf8 <check_ecd+0x224>
			  menu2_subCounter--;
 8002cec:	4b15      	ldr	r3, [pc, #84]	; (8002d44 <check_ecd+0x270>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <check_ecd+0x270>)
 8002cf6:	701a      	strb	r2, [r3, #0]
			if (menu2_subCounter > 4) {
 8002cf8:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <check_ecd+0x270>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d923      	bls.n	8002d48 <check_ecd+0x274>
			  menu2_subCounter = 4;
 8002d00:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <check_ecd+0x270>)
 8002d02:	2204      	movs	r2, #4
 8002d04:	701a      	strb	r2, [r3, #0]
 8002d06:	e026      	b.n	8002d56 <check_ecd+0x282>
 8002d08:	20000008 	.word	0x20000008
 8002d0c:	200002c8 	.word	0x200002c8
 8002d10:	20000280 	.word	0x20000280
 8002d14:	2000026c 	.word	0x2000026c
 8002d18:	20000285 	.word	0x20000285
 8002d1c:	20000281 	.word	0x20000281
 8002d20:	200002b5 	.word	0x200002b5
 8002d24:	200002b6 	.word	0x200002b6
 8002d28:	200002b7 	.word	0x200002b7
 8002d2c:	200002b8 	.word	0x200002b8
 8002d30:	2000027c 	.word	0x2000027c
 8002d34:	2000027d 	.word	0x2000027d
 8002d38:	2000027e 	.word	0x2000027e
 8002d3c:	2000027f 	.word	0x2000027f
 8002d40:	20000286 	.word	0x20000286
 8002d44:	2000001c 	.word	0x2000001c
			} else if (menu2_subCounter < 1) {
 8002d48:	4b43      	ldr	r3, [pc, #268]	; (8002e58 <check_ecd+0x384>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d102      	bne.n	8002d56 <check_ecd+0x282>
			  menu2_subCounter = 1;
 8002d50:	4b41      	ldr	r3, [pc, #260]	; (8002e58 <check_ecd+0x384>)
 8002d52:	2201      	movs	r2, #1
 8002d54:	701a      	strb	r2, [r3, #0]
			u8 _mCursorPos = 1;
 8002d56:	2301      	movs	r3, #1
 8002d58:	71fb      	strb	r3, [r7, #7]
			switch (menu2_subCounter) {
 8002d5a:	4b3f      	ldr	r3, [pc, #252]	; (8002e58 <check_ecd+0x384>)
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	2b03      	cmp	r3, #3
 8002d62:	d817      	bhi.n	8002d94 <check_ecd+0x2c0>
 8002d64:	a201      	add	r2, pc, #4	; (adr r2, 8002d6c <check_ecd+0x298>)
 8002d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d6a:	bf00      	nop
 8002d6c:	08002d7d 	.word	0x08002d7d
 8002d70:	08002d83 	.word	0x08002d83
 8002d74:	08002d89 	.word	0x08002d89
 8002d78:	08002d8f 	.word	0x08002d8f
				_mCursorPos = 9;
 8002d7c:	2309      	movs	r3, #9
 8002d7e:	71fb      	strb	r3, [r7, #7]
				break;
 8002d80:	e009      	b.n	8002d96 <check_ecd+0x2c2>
				_mCursorPos = 10;
 8002d82:	230a      	movs	r3, #10
 8002d84:	71fb      	strb	r3, [r7, #7]
				break;
 8002d86:	e006      	b.n	8002d96 <check_ecd+0x2c2>
				_mCursorPos = 12;
 8002d88:	230c      	movs	r3, #12
 8002d8a:	71fb      	strb	r3, [r7, #7]
				break;
 8002d8c:	e003      	b.n	8002d96 <check_ecd+0x2c2>
				_mCursorPos = 13;
 8002d8e:	230d      	movs	r3, #13
 8002d90:	71fb      	strb	r3, [r7, #7]
				break;
 8002d92:	e000      	b.n	8002d96 <check_ecd+0x2c2>
				break;
 8002d94:	bf00      	nop
			LCD_Set_Cursor(&LCD, 2, _mCursorPos);
 8002d96:	79fb      	ldrb	r3, [r7, #7]
 8002d98:	461a      	mov	r2, r3
 8002d9a:	2102      	movs	r1, #2
 8002d9c:	482f      	ldr	r0, [pc, #188]	; (8002e5c <check_ecd+0x388>)
 8002d9e:	f7fe ffd9 	bl	8001d54 <LCD_Set_Cursor>
  return;
 8002da2:	e055      	b.n	8002e50 <check_ecd+0x37c>
		else if (menu3_selected == true) {
 8002da4:	4b2e      	ldr	r3, [pc, #184]	; (8002e60 <check_ecd+0x38c>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d022      	beq.n	8002df2 <check_ecd+0x31e>
		  if (delta > 0)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	dd05      	ble.n	8002dbe <check_ecd+0x2ea>
			menu3_value++;
 8002db2:	4b2c      	ldr	r3, [pc, #176]	; (8002e64 <check_ecd+0x390>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	3301      	adds	r3, #1
 8002db8:	4a2a      	ldr	r2, [pc, #168]	; (8002e64 <check_ecd+0x390>)
 8002dba:	6013      	str	r3, [r2, #0]
 8002dbc:	e007      	b.n	8002dce <check_ecd+0x2fa>
		  else if (delta < 0)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	da04      	bge.n	8002dce <check_ecd+0x2fa>
			menu3_value--;
 8002dc4:	4b27      	ldr	r3, [pc, #156]	; (8002e64 <check_ecd+0x390>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	4a26      	ldr	r2, [pc, #152]	; (8002e64 <check_ecd+0x390>)
 8002dcc:	6013      	str	r3, [r2, #0]
		  if (menu3_value > maxMenu3Value)
 8002dce:	4b25      	ldr	r3, [pc, #148]	; (8002e64 <check_ecd+0x390>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2b63      	cmp	r3, #99	; 0x63
 8002dd4:	dd02      	ble.n	8002ddc <check_ecd+0x308>
			menu3_value = maxMenu3Value;
 8002dd6:	4b23      	ldr	r3, [pc, #140]	; (8002e64 <check_ecd+0x390>)
 8002dd8:	2263      	movs	r2, #99	; 0x63
 8002dda:	601a      	str	r2, [r3, #0]
		  if (menu3_value < minMenu3Value)
 8002ddc:	4b21      	ldr	r3, [pc, #132]	; (8002e64 <check_ecd+0x390>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	dc02      	bgt.n	8002dea <check_ecd+0x316>
			menu3_value = minMenu3Value; //rpm
 8002de4:	4b1f      	ldr	r3, [pc, #124]	; (8002e64 <check_ecd+0x390>)
 8002de6:	2201      	movs	r2, #1
 8002de8:	601a      	str	r2, [r3, #0]
		  refreshMenu3 = true;
 8002dea:	4b1f      	ldr	r3, [pc, #124]	; (8002e68 <check_ecd+0x394>)
 8002dec:	2201      	movs	r2, #1
 8002dee:	701a      	strb	r2, [r3, #0]
  return;
 8002df0:	e02e      	b.n	8002e50 <check_ecd+0x37c>
		  if (delta > 0) {
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	dd06      	ble.n	8002e06 <check_ecd+0x332>
			menuCounter++;
 8002df8:	4b1c      	ldr	r3, [pc, #112]	; (8002e6c <check_ecd+0x398>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	4b1a      	ldr	r3, [pc, #104]	; (8002e6c <check_ecd+0x398>)
 8002e02:	701a      	strb	r2, [r3, #0]
 8002e04:	e00c      	b.n	8002e20 <check_ecd+0x34c>
		  } else if (delta < 0) {
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	da09      	bge.n	8002e20 <check_ecd+0x34c>
			if (menuCounter > 0)
 8002e0c:	4b17      	ldr	r3, [pc, #92]	; (8002e6c <check_ecd+0x398>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d005      	beq.n	8002e20 <check_ecd+0x34c>
			  menuCounter--;
 8002e14:	4b15      	ldr	r3, [pc, #84]	; (8002e6c <check_ecd+0x398>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	4b13      	ldr	r3, [pc, #76]	; (8002e6c <check_ecd+0x398>)
 8002e1e:	701a      	strb	r2, [r3, #0]
		  if (menuCounter > 3)
 8002e20:	4b12      	ldr	r3, [pc, #72]	; (8002e6c <check_ecd+0x398>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	2b03      	cmp	r3, #3
 8002e26:	d902      	bls.n	8002e2e <check_ecd+0x35a>
			menuCounter = 3;
 8002e28:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <check_ecd+0x398>)
 8002e2a:	2203      	movs	r2, #3
 8002e2c:	701a      	strb	r2, [r3, #0]
		  if (menuCounter < 1)
 8002e2e:	4b0f      	ldr	r3, [pc, #60]	; (8002e6c <check_ecd+0x398>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d102      	bne.n	8002e3c <check_ecd+0x368>
			menuCounter = 1; //rpm
 8002e36:	4b0d      	ldr	r3, [pc, #52]	; (8002e6c <check_ecd+0x398>)
 8002e38:	2201      	movs	r2, #1
 8002e3a:	701a      	strb	r2, [r3, #0]
		  refreshSelection = true;
 8002e3c:	4b0c      	ldr	r3, [pc, #48]	; (8002e70 <check_ecd+0x39c>)
 8002e3e:	2201      	movs	r2, #1
 8002e40:	701a      	strb	r2, [r3, #0]
  return;
 8002e42:	e005      	b.n	8002e50 <check_ecd+0x37c>
	preEcd = TIM2_count;
 8002e44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4a:	4a0a      	ldr	r2, [pc, #40]	; (8002e74 <check_ecd+0x3a0>)
 8002e4c:	6013      	str	r3, [r2, #0]
  return;
 8002e4e:	bf00      	nop
 8002e50:	bf00      	nop
}
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	2000001c 	.word	0x2000001c
 8002e5c:	20000224 	.word	0x20000224
 8002e60:	20000282 	.word	0x20000282
 8002e64:	20000004 	.word	0x20000004
 8002e68:	20000287 	.word	0x20000287
 8002e6c:	2000000a 	.word	0x2000000a
 8002e70:	20000284 	.word	0x20000284
 8002e74:	200002c8 	.word	0x200002c8

08002e78 <LED_ON>:

void LED_ON() {
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED_Panel_GPIO_Port, LED_Panel_Pin, GPIO_PIN_SET);
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e82:	4802      	ldr	r0, [pc, #8]	; (8002e8c <LED_ON+0x14>)
 8002e84:	f001 f9f5 	bl	8004272 <HAL_GPIO_WritePin>
}
 8002e88:	bf00      	nop
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40010c00 	.word	0x40010c00

08002e90 <LED_OFF>:
void LED_OFF() {
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED_Panel_GPIO_Port, LED_Panel_Pin, GPIO_PIN_RESET);
 8002e94:	2200      	movs	r2, #0
 8002e96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e9a:	4802      	ldr	r0, [pc, #8]	; (8002ea4 <LED_OFF+0x14>)
 8002e9c:	f001 f9e9 	bl	8004272 <HAL_GPIO_WritePin>
}
 8002ea0:	bf00      	nop
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40010c00 	.word	0x40010c00

08002ea8 <LED_TOGGLE>:
void LED_TOGGLE() {
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  HAL_GPIO_TogglePin(LED_Panel_GPIO_Port, LED_Panel_Pin);
 8002eac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002eb0:	4802      	ldr	r0, [pc, #8]	; (8002ebc <LED_TOGGLE+0x14>)
 8002eb2:	f001 f9f6 	bl	80042a2 <HAL_GPIO_TogglePin>
}
 8002eb6:	bf00      	nop
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40010c00 	.word	0x40010c00

08002ec0 <FLASH_ReadData>:
  uint32_t PageError = 0;
  HAL_FLASHEx_Erase(&EraseInit, &PageError);
  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, startPage, data);
  HAL_FLASH_Lock();
}
uint32_t FLASH_ReadData(uint32_t addr) {
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /*
   * Read 4 bytes
   * */
  uint32_t data = *(__IO uint32_t*) (addr);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	60fb      	str	r3, [r7, #12]
  return data;
 8002ece:	68fb      	ldr	r3, [r7, #12]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr
	...

08002edc <printDefaultLCD>:

void printDefaultLCD() {
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
   |Time:   mm:ss/mm:ss |
   |Set count: xxxx revs|
   |Count:    0 revs    |
   ----------------------
   **************************/
  LCD_Print_String_At(&LCD, 1, 1, "Speed: ");
 8002ee2:	4b40      	ldr	r3, [pc, #256]	; (8002fe4 <printDefaultLCD+0x108>)
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	483f      	ldr	r0, [pc, #252]	; (8002fe8 <printDefaultLCD+0x10c>)
 8002eea:	f7fe ff66 	bl	8001dba <LCD_Print_String_At>
//----------------------
  LCD_Print_String_At(&LCD, 2, 1, "Time: ");
 8002eee:	4b3f      	ldr	r3, [pc, #252]	; (8002fec <printDefaultLCD+0x110>)
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	2102      	movs	r1, #2
 8002ef4:	483c      	ldr	r0, [pc, #240]	; (8002fe8 <printDefaultLCD+0x10c>)
 8002ef6:	f7fe ff60 	bl	8001dba <LCD_Print_String_At>
  LCD_Print_String_At(&LCD, 3, 1, "Set count: ");
 8002efa:	4b3d      	ldr	r3, [pc, #244]	; (8002ff0 <printDefaultLCD+0x114>)
 8002efc:	2201      	movs	r2, #1
 8002efe:	2103      	movs	r1, #3
 8002f00:	4839      	ldr	r0, [pc, #228]	; (8002fe8 <printDefaultLCD+0x10c>)
 8002f02:	f7fe ff5a 	bl	8001dba <LCD_Print_String_At>
  LCD_Print_String_At(&LCD, 4, 1, "Count: ");
 8002f06:	4b3b      	ldr	r3, [pc, #236]	; (8002ff4 <printDefaultLCD+0x118>)
 8002f08:	2201      	movs	r2, #1
 8002f0a:	2104      	movs	r1, #4
 8002f0c:	4836      	ldr	r0, [pc, #216]	; (8002fe8 <printDefaultLCD+0x10c>)
 8002f0e:	f7fe ff54 	bl	8001dba <LCD_Print_String_At>

//Update value
  char holder[10];

  sprintf(holder, " ");
 8002f12:	1d3b      	adds	r3, r7, #4
 8002f14:	4938      	ldr	r1, [pc, #224]	; (8002ff8 <printDefaultLCD+0x11c>)
 8002f16:	4618      	mov	r0, r3
 8002f18:	f003 f952 	bl	80061c0 <siprintf>
  LCD_Print_String_At(&LCD, 1, 12, "      ");
 8002f1c:	4b37      	ldr	r3, [pc, #220]	; (8002ffc <printDefaultLCD+0x120>)
 8002f1e:	220c      	movs	r2, #12
 8002f20:	2101      	movs	r1, #1
 8002f22:	4831      	ldr	r0, [pc, #196]	; (8002fe8 <printDefaultLCD+0x10c>)
 8002f24:	f7fe ff49 	bl	8001dba <LCD_Print_String_At>
  sprintf(holder, "%2d rpm", menu1_value);
 8002f28:	4b35      	ldr	r3, [pc, #212]	; (8003000 <printDefaultLCD+0x124>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	1d3b      	adds	r3, r7, #4
 8002f30:	4934      	ldr	r1, [pc, #208]	; (8003004 <printDefaultLCD+0x128>)
 8002f32:	4618      	mov	r0, r3
 8002f34:	f003 f944 	bl	80061c0 <siprintf>
  LCD_Print_String_At(&LCD, 1, 12, holder);
 8002f38:	1d3b      	adds	r3, r7, #4
 8002f3a:	220c      	movs	r2, #12
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	482a      	ldr	r0, [pc, #168]	; (8002fe8 <printDefaultLCD+0x10c>)
 8002f40:	f7fe ff3b 	bl	8001dba <LCD_Print_String_At>

  sprintf(holder, " ");
 8002f44:	1d3b      	adds	r3, r7, #4
 8002f46:	492c      	ldr	r1, [pc, #176]	; (8002ff8 <printDefaultLCD+0x11c>)
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f003 f939 	bl	80061c0 <siprintf>
  LCD_Print_String_At(&LCD, 2, 8, "             ");
 8002f4e:	4b2e      	ldr	r3, [pc, #184]	; (8003008 <printDefaultLCD+0x12c>)
 8002f50:	2208      	movs	r2, #8
 8002f52:	2102      	movs	r1, #2
 8002f54:	4824      	ldr	r0, [pc, #144]	; (8002fe8 <printDefaultLCD+0x10c>)
 8002f56:	f7fe ff30 	bl	8001dba <LCD_Print_String_At>
  LCD_Set_Cursor(&LCD, 2, 8);
 8002f5a:	2208      	movs	r2, #8
 8002f5c:	2102      	movs	r1, #2
 8002f5e:	4822      	ldr	r0, [pc, #136]	; (8002fe8 <printDefaultLCD+0x10c>)
 8002f60:	f7fe fef8 	bl	8001d54 <LCD_Set_Cursor>
  LCD_Print_Clock(0);
 8002f64:	2000      	movs	r0, #0
 8002f66:	f000 f985 	bl	8003274 <LCD_Print_Clock>

  sprintf(holder, " ");
 8002f6a:	1d3b      	adds	r3, r7, #4
 8002f6c:	4922      	ldr	r1, [pc, #136]	; (8002ff8 <printDefaultLCD+0x11c>)
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f003 f926 	bl	80061c0 <siprintf>
  LCD_Print_String_At(&LCD, 3, 12, "        ");
 8002f74:	4b25      	ldr	r3, [pc, #148]	; (800300c <printDefaultLCD+0x130>)
 8002f76:	220c      	movs	r2, #12
 8002f78:	2103      	movs	r1, #3
 8002f7a:	481b      	ldr	r0, [pc, #108]	; (8002fe8 <printDefaultLCD+0x10c>)
 8002f7c:	f7fe ff1d 	bl	8001dba <LCD_Print_String_At>
  sprintf(holder, "%3d revs", (int) menu3_value);
 8002f80:	4b23      	ldr	r3, [pc, #140]	; (8003010 <printDefaultLCD+0x134>)
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	1d3b      	adds	r3, r7, #4
 8002f86:	4923      	ldr	r1, [pc, #140]	; (8003014 <printDefaultLCD+0x138>)
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f003 f919 	bl	80061c0 <siprintf>
  LCD_Print_String_At(&LCD, 3, 12, holder);
 8002f8e:	1d3b      	adds	r3, r7, #4
 8002f90:	220c      	movs	r2, #12
 8002f92:	2103      	movs	r1, #3
 8002f94:	4814      	ldr	r0, [pc, #80]	; (8002fe8 <printDefaultLCD+0x10c>)
 8002f96:	f7fe ff10 	bl	8001dba <LCD_Print_String_At>

  LCD_Print_String_At(&LCD, 4, 8, "         ");
 8002f9a:	4b1f      	ldr	r3, [pc, #124]	; (8003018 <printDefaultLCD+0x13c>)
 8002f9c:	2208      	movs	r2, #8
 8002f9e:	2104      	movs	r1, #4
 8002fa0:	4811      	ldr	r0, [pc, #68]	; (8002fe8 <printDefaultLCD+0x10c>)
 8002fa2:	f7fe ff0a 	bl	8001dba <LCD_Print_String_At>
  if (nLoop < 2) {
 8002fa6:	4b1d      	ldr	r3, [pc, #116]	; (800301c <printDefaultLCD+0x140>)
 8002fa8:	881b      	ldrh	r3, [r3, #0]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d808      	bhi.n	8002fc0 <printDefaultLCD+0xe4>
	sprintf(holder, "%4d rev", nLoop);
 8002fae:	4b1b      	ldr	r3, [pc, #108]	; (800301c <printDefaultLCD+0x140>)
 8002fb0:	881b      	ldrh	r3, [r3, #0]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	1d3b      	adds	r3, r7, #4
 8002fb6:	491a      	ldr	r1, [pc, #104]	; (8003020 <printDefaultLCD+0x144>)
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f003 f901 	bl	80061c0 <siprintf>
 8002fbe:	e007      	b.n	8002fd0 <printDefaultLCD+0xf4>
  } else {
	sprintf(holder, "%4d revs", nLoop);
 8002fc0:	4b16      	ldr	r3, [pc, #88]	; (800301c <printDefaultLCD+0x140>)
 8002fc2:	881b      	ldrh	r3, [r3, #0]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	1d3b      	adds	r3, r7, #4
 8002fc8:	4916      	ldr	r1, [pc, #88]	; (8003024 <printDefaultLCD+0x148>)
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f003 f8f8 	bl	80061c0 <siprintf>
  }
  LCD_Print_String_At(&LCD, 4, 8, holder);
 8002fd0:	1d3b      	adds	r3, r7, #4
 8002fd2:	2208      	movs	r2, #8
 8002fd4:	2104      	movs	r1, #4
 8002fd6:	4804      	ldr	r0, [pc, #16]	; (8002fe8 <printDefaultLCD+0x10c>)
 8002fd8:	f7fe feef 	bl	8001dba <LCD_Print_String_At>
}
 8002fdc:	bf00      	nop
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	08006b18 	.word	0x08006b18
 8002fe8:	20000224 	.word	0x20000224
 8002fec:	08006b20 	.word	0x08006b20
 8002ff0:	08006b28 	.word	0x08006b28
 8002ff4:	08006b34 	.word	0x08006b34
 8002ff8:	08006b3c 	.word	0x08006b3c
 8002ffc:	08006b40 	.word	0x08006b40
 8003000:	2000026c 	.word	0x2000026c
 8003004:	08006b48 	.word	0x08006b48
 8003008:	08006b50 	.word	0x08006b50
 800300c:	08006b60 	.word	0x08006b60
 8003010:	20000004 	.word	0x20000004
 8003014:	08006b6c 	.word	0x08006b6c
 8003018:	08006af8 	.word	0x08006af8
 800301c:	20000274 	.word	0x20000274
 8003020:	08006b04 	.word	0x08006b04
 8003024:	08006b0c 	.word	0x08006b0c

08003028 <update_Menu1>:
 |Time:   mm:ss/mm:ss |
 |Set count: xxxx revs|
 |Count:    0 revs    |
 ----------------------
 **************************/
void update_Menu1() {
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
  char holder[10];
  LCD_Print_String_At(&LCD, 1, 12, "      ");
 800302e:	4b0c      	ldr	r3, [pc, #48]	; (8003060 <update_Menu1+0x38>)
 8003030:	220c      	movs	r2, #12
 8003032:	2101      	movs	r1, #1
 8003034:	480b      	ldr	r0, [pc, #44]	; (8003064 <update_Menu1+0x3c>)
 8003036:	f7fe fec0 	bl	8001dba <LCD_Print_String_At>
  sprintf(holder, "%2d rpm", menu1_value);
 800303a:	4b0b      	ldr	r3, [pc, #44]	; (8003068 <update_Menu1+0x40>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	461a      	mov	r2, r3
 8003040:	1d3b      	adds	r3, r7, #4
 8003042:	490a      	ldr	r1, [pc, #40]	; (800306c <update_Menu1+0x44>)
 8003044:	4618      	mov	r0, r3
 8003046:	f003 f8bb 	bl	80061c0 <siprintf>
  LCD_Print_String_At(&LCD, 1, 12, holder);
 800304a:	1d3b      	adds	r3, r7, #4
 800304c:	220c      	movs	r2, #12
 800304e:	2101      	movs	r1, #1
 8003050:	4804      	ldr	r0, [pc, #16]	; (8003064 <update_Menu1+0x3c>)
 8003052:	f7fe feb2 	bl	8001dba <LCD_Print_String_At>
}
 8003056:	bf00      	nop
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	08006b40 	.word	0x08006b40
 8003064:	20000224 	.word	0x20000224
 8003068:	2000026c 	.word	0x2000026c
 800306c:	08006b48 	.word	0x08006b48

08003070 <update_Menu2>:
void update_Menu2() {
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
  char holder[10];
// fist Min
  if (firstMinSelected) {
 8003076:	4b61      	ldr	r3, [pc, #388]	; (80031fc <update_Menu2+0x18c>)
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d019      	beq.n	80030b2 <update_Menu2+0x42>
	LCD_Print_String_At(&LCD, 2, 8, "  ");
 800307e:	4b60      	ldr	r3, [pc, #384]	; (8003200 <update_Menu2+0x190>)
 8003080:	2208      	movs	r2, #8
 8003082:	2102      	movs	r1, #2
 8003084:	485f      	ldr	r0, [pc, #380]	; (8003204 <update_Menu2+0x194>)
 8003086:	f7fe fe98 	bl	8001dba <LCD_Print_String_At>
	sprintf(holder, "%2d", firstMin);
 800308a:	4b5f      	ldr	r3, [pc, #380]	; (8003208 <update_Menu2+0x198>)
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	461a      	mov	r2, r3
 8003090:	1d3b      	adds	r3, r7, #4
 8003092:	495e      	ldr	r1, [pc, #376]	; (800320c <update_Menu2+0x19c>)
 8003094:	4618      	mov	r0, r3
 8003096:	f003 f893 	bl	80061c0 <siprintf>
	LCD_Print_String_At(&LCD, 2, 8, holder);
 800309a:	1d3b      	adds	r3, r7, #4
 800309c:	2208      	movs	r2, #8
 800309e:	2102      	movs	r1, #2
 80030a0:	4858      	ldr	r0, [pc, #352]	; (8003204 <update_Menu2+0x194>)
 80030a2:	f7fe fe8a 	bl	8001dba <LCD_Print_String_At>
	LCD_Set_Cursor(&LCD, 2, 8);
 80030a6:	2208      	movs	r2, #8
 80030a8:	2102      	movs	r1, #2
 80030aa:	4856      	ldr	r0, [pc, #344]	; (8003204 <update_Menu2+0x194>)
 80030ac:	f7fe fe52 	bl	8001d54 <LCD_Set_Cursor>
 80030b0:	e099      	b.n	80031e6 <update_Menu2+0x176>
  }
// last Min
  else if (lastMinSelected) {
 80030b2:	4b57      	ldr	r3, [pc, #348]	; (8003210 <update_Menu2+0x1a0>)
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d013      	beq.n	80030e2 <update_Menu2+0x72>
	sprintf(holder, "%1d", lastMin);
 80030ba:	4b56      	ldr	r3, [pc, #344]	; (8003214 <update_Menu2+0x1a4>)
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	461a      	mov	r2, r3
 80030c0:	1d3b      	adds	r3, r7, #4
 80030c2:	4955      	ldr	r1, [pc, #340]	; (8003218 <update_Menu2+0x1a8>)
 80030c4:	4618      	mov	r0, r3
 80030c6:	f003 f87b 	bl	80061c0 <siprintf>
	LCD_Print_String_At(&LCD, 2, 10, holder);
 80030ca:	1d3b      	adds	r3, r7, #4
 80030cc:	220a      	movs	r2, #10
 80030ce:	2102      	movs	r1, #2
 80030d0:	484c      	ldr	r0, [pc, #304]	; (8003204 <update_Menu2+0x194>)
 80030d2:	f7fe fe72 	bl	8001dba <LCD_Print_String_At>
	LCD_Set_Cursor(&LCD, 2, 8);
 80030d6:	2208      	movs	r2, #8
 80030d8:	2102      	movs	r1, #2
 80030da:	484a      	ldr	r0, [pc, #296]	; (8003204 <update_Menu2+0x194>)
 80030dc:	f7fe fe3a 	bl	8001d54 <LCD_Set_Cursor>
 80030e0:	e081      	b.n	80031e6 <update_Menu2+0x176>
  }
// first Sec
  else if (firstSecSelected) {
 80030e2:	4b4e      	ldr	r3, [pc, #312]	; (800321c <update_Menu2+0x1ac>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d013      	beq.n	8003112 <update_Menu2+0xa2>
	sprintf(holder, "%1d", firstSec);
 80030ea:	4b4d      	ldr	r3, [pc, #308]	; (8003220 <update_Menu2+0x1b0>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	461a      	mov	r2, r3
 80030f0:	1d3b      	adds	r3, r7, #4
 80030f2:	4949      	ldr	r1, [pc, #292]	; (8003218 <update_Menu2+0x1a8>)
 80030f4:	4618      	mov	r0, r3
 80030f6:	f003 f863 	bl	80061c0 <siprintf>
	LCD_Print_String_At(&LCD, 2, 12, holder);
 80030fa:	1d3b      	adds	r3, r7, #4
 80030fc:	220c      	movs	r2, #12
 80030fe:	2102      	movs	r1, #2
 8003100:	4840      	ldr	r0, [pc, #256]	; (8003204 <update_Menu2+0x194>)
 8003102:	f7fe fe5a 	bl	8001dba <LCD_Print_String_At>
	LCD_Set_Cursor(&LCD, 2, 8);
 8003106:	2208      	movs	r2, #8
 8003108:	2102      	movs	r1, #2
 800310a:	483e      	ldr	r0, [pc, #248]	; (8003204 <update_Menu2+0x194>)
 800310c:	f7fe fe22 	bl	8001d54 <LCD_Set_Cursor>
 8003110:	e069      	b.n	80031e6 <update_Menu2+0x176>
  }
// last Sec
  else if (lastSecSelected) {
 8003112:	4b44      	ldr	r3, [pc, #272]	; (8003224 <update_Menu2+0x1b4>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d013      	beq.n	8003142 <update_Menu2+0xd2>
	sprintf(holder, "%1d", lastSec);
 800311a:	4b43      	ldr	r3, [pc, #268]	; (8003228 <update_Menu2+0x1b8>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	1d3b      	adds	r3, r7, #4
 8003122:	493d      	ldr	r1, [pc, #244]	; (8003218 <update_Menu2+0x1a8>)
 8003124:	4618      	mov	r0, r3
 8003126:	f003 f84b 	bl	80061c0 <siprintf>
	LCD_Print_String_At(&LCD, 2, 13, holder);
 800312a:	1d3b      	adds	r3, r7, #4
 800312c:	220d      	movs	r2, #13
 800312e:	2102      	movs	r1, #2
 8003130:	4834      	ldr	r0, [pc, #208]	; (8003204 <update_Menu2+0x194>)
 8003132:	f7fe fe42 	bl	8001dba <LCD_Print_String_At>
	LCD_Set_Cursor(&LCD, 2, 8);
 8003136:	2208      	movs	r2, #8
 8003138:	2102      	movs	r1, #2
 800313a:	4832      	ldr	r0, [pc, #200]	; (8003204 <update_Menu2+0x194>)
 800313c:	f7fe fe0a 	bl	8001d54 <LCD_Set_Cursor>
 8003140:	e051      	b.n	80031e6 <update_Menu2+0x176>
  } else {
	LCD_Print_String_At(&LCD, 2, 8, "  ");
 8003142:	4b2f      	ldr	r3, [pc, #188]	; (8003200 <update_Menu2+0x190>)
 8003144:	2208      	movs	r2, #8
 8003146:	2102      	movs	r1, #2
 8003148:	482e      	ldr	r0, [pc, #184]	; (8003204 <update_Menu2+0x194>)
 800314a:	f7fe fe36 	bl	8001dba <LCD_Print_String_At>
	sprintf(holder, "%2d", firstMin);
 800314e:	4b2e      	ldr	r3, [pc, #184]	; (8003208 <update_Menu2+0x198>)
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	461a      	mov	r2, r3
 8003154:	1d3b      	adds	r3, r7, #4
 8003156:	492d      	ldr	r1, [pc, #180]	; (800320c <update_Menu2+0x19c>)
 8003158:	4618      	mov	r0, r3
 800315a:	f003 f831 	bl	80061c0 <siprintf>
	LCD_Print_String_At(&LCD, 2, 8, holder);
 800315e:	1d3b      	adds	r3, r7, #4
 8003160:	2208      	movs	r2, #8
 8003162:	2102      	movs	r1, #2
 8003164:	4827      	ldr	r0, [pc, #156]	; (8003204 <update_Menu2+0x194>)
 8003166:	f7fe fe28 	bl	8001dba <LCD_Print_String_At>
	LCD_Set_Cursor(&LCD, 2, 8);
 800316a:	2208      	movs	r2, #8
 800316c:	2102      	movs	r1, #2
 800316e:	4825      	ldr	r0, [pc, #148]	; (8003204 <update_Menu2+0x194>)
 8003170:	f7fe fdf0 	bl	8001d54 <LCD_Set_Cursor>

	sprintf(holder, "%1d", lastMin);
 8003174:	4b27      	ldr	r3, [pc, #156]	; (8003214 <update_Menu2+0x1a4>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	461a      	mov	r2, r3
 800317a:	1d3b      	adds	r3, r7, #4
 800317c:	4926      	ldr	r1, [pc, #152]	; (8003218 <update_Menu2+0x1a8>)
 800317e:	4618      	mov	r0, r3
 8003180:	f003 f81e 	bl	80061c0 <siprintf>
	LCD_Print_String_At(&LCD, 2, 10, holder);
 8003184:	1d3b      	adds	r3, r7, #4
 8003186:	220a      	movs	r2, #10
 8003188:	2102      	movs	r1, #2
 800318a:	481e      	ldr	r0, [pc, #120]	; (8003204 <update_Menu2+0x194>)
 800318c:	f7fe fe15 	bl	8001dba <LCD_Print_String_At>
	LCD_Set_Cursor(&LCD, 2, 8);
 8003190:	2208      	movs	r2, #8
 8003192:	2102      	movs	r1, #2
 8003194:	481b      	ldr	r0, [pc, #108]	; (8003204 <update_Menu2+0x194>)
 8003196:	f7fe fddd 	bl	8001d54 <LCD_Set_Cursor>

	sprintf(holder, "%1d", firstSec);
 800319a:	4b21      	ldr	r3, [pc, #132]	; (8003220 <update_Menu2+0x1b0>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	461a      	mov	r2, r3
 80031a0:	1d3b      	adds	r3, r7, #4
 80031a2:	491d      	ldr	r1, [pc, #116]	; (8003218 <update_Menu2+0x1a8>)
 80031a4:	4618      	mov	r0, r3
 80031a6:	f003 f80b 	bl	80061c0 <siprintf>
	LCD_Print_String_At(&LCD, 2, 12, holder);
 80031aa:	1d3b      	adds	r3, r7, #4
 80031ac:	220c      	movs	r2, #12
 80031ae:	2102      	movs	r1, #2
 80031b0:	4814      	ldr	r0, [pc, #80]	; (8003204 <update_Menu2+0x194>)
 80031b2:	f7fe fe02 	bl	8001dba <LCD_Print_String_At>
	LCD_Set_Cursor(&LCD, 2, 8);
 80031b6:	2208      	movs	r2, #8
 80031b8:	2102      	movs	r1, #2
 80031ba:	4812      	ldr	r0, [pc, #72]	; (8003204 <update_Menu2+0x194>)
 80031bc:	f7fe fdca 	bl	8001d54 <LCD_Set_Cursor>

	sprintf(holder, "%1d", lastSec);
 80031c0:	4b19      	ldr	r3, [pc, #100]	; (8003228 <update_Menu2+0x1b8>)
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	461a      	mov	r2, r3
 80031c6:	1d3b      	adds	r3, r7, #4
 80031c8:	4913      	ldr	r1, [pc, #76]	; (8003218 <update_Menu2+0x1a8>)
 80031ca:	4618      	mov	r0, r3
 80031cc:	f002 fff8 	bl	80061c0 <siprintf>
	LCD_Print_String_At(&LCD, 2, 13, holder);
 80031d0:	1d3b      	adds	r3, r7, #4
 80031d2:	220d      	movs	r2, #13
 80031d4:	2102      	movs	r1, #2
 80031d6:	480b      	ldr	r0, [pc, #44]	; (8003204 <update_Menu2+0x194>)
 80031d8:	f7fe fdef 	bl	8001dba <LCD_Print_String_At>
	LCD_Set_Cursor(&LCD, 2, 8);
 80031dc:	2208      	movs	r2, #8
 80031de:	2102      	movs	r1, #2
 80031e0:	4808      	ldr	r0, [pc, #32]	; (8003204 <update_Menu2+0x194>)
 80031e2:	f7fe fdb7 	bl	8001d54 <LCD_Set_Cursor>
  }

  LCD_Print_String_At(&LCD, 2, 11, ":");
 80031e6:	4b11      	ldr	r3, [pc, #68]	; (800322c <update_Menu2+0x1bc>)
 80031e8:	220b      	movs	r2, #11
 80031ea:	2102      	movs	r1, #2
 80031ec:	4805      	ldr	r0, [pc, #20]	; (8003204 <update_Menu2+0x194>)
 80031ee:	f7fe fde4 	bl	8001dba <LCD_Print_String_At>
}
 80031f2:	bf00      	nop
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	200002b5 	.word	0x200002b5
 8003200:	08006b78 	.word	0x08006b78
 8003204:	20000224 	.word	0x20000224
 8003208:	2000027c 	.word	0x2000027c
 800320c:	08006b7c 	.word	0x08006b7c
 8003210:	200002b6 	.word	0x200002b6
 8003214:	2000027d 	.word	0x2000027d
 8003218:	08006b80 	.word	0x08006b80
 800321c:	200002b7 	.word	0x200002b7
 8003220:	2000027e 	.word	0x2000027e
 8003224:	200002b8 	.word	0x200002b8
 8003228:	2000027f 	.word	0x2000027f
 800322c:	08006b84 	.word	0x08006b84

08003230 <update_Menu3>:
void update_Menu3() {
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
  char holder[10];
  LCD_Print_String_At(&LCD, 3, 12, "        ");
 8003236:	4b0b      	ldr	r3, [pc, #44]	; (8003264 <update_Menu3+0x34>)
 8003238:	220c      	movs	r2, #12
 800323a:	2103      	movs	r1, #3
 800323c:	480a      	ldr	r0, [pc, #40]	; (8003268 <update_Menu3+0x38>)
 800323e:	f7fe fdbc 	bl	8001dba <LCD_Print_String_At>
  sprintf(holder, "%3d revs", (int) menu3_value);
 8003242:	4b0a      	ldr	r3, [pc, #40]	; (800326c <update_Menu3+0x3c>)
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	1d3b      	adds	r3, r7, #4
 8003248:	4909      	ldr	r1, [pc, #36]	; (8003270 <update_Menu3+0x40>)
 800324a:	4618      	mov	r0, r3
 800324c:	f002 ffb8 	bl	80061c0 <siprintf>
  LCD_Print_String_At(&LCD, 3, 12, holder);
 8003250:	1d3b      	adds	r3, r7, #4
 8003252:	220c      	movs	r2, #12
 8003254:	2103      	movs	r1, #3
 8003256:	4804      	ldr	r0, [pc, #16]	; (8003268 <update_Menu3+0x38>)
 8003258:	f7fe fdaf 	bl	8001dba <LCD_Print_String_At>
}
 800325c:	bf00      	nop
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	08006b60 	.word	0x08006b60
 8003268:	20000224 	.word	0x20000224
 800326c:	20000004 	.word	0x20000004
 8003270:	08006b6c 	.word	0x08006b6c

08003274 <LCD_Print_Clock>:

void LCD_Print_Clock(u32 sec) {
 8003274:	b590      	push	{r4, r7, lr}
 8003276:	b08b      	sub	sp, #44	; 0x2c
 8003278:	af02      	add	r7, sp, #8
 800327a:	6078      	str	r0, [r7, #4]
   *    |Time:   mm:ss/mm:ss |
   * */

  char holder[14];
  u8 setMin, setSec, curMin, curSec;
  curMin = sec / 60;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a3b      	ldr	r2, [pc, #236]	; (800336c <LCD_Print_Clock+0xf8>)
 8003280:	fba2 2303 	umull	r2, r3, r2, r3
 8003284:	095b      	lsrs	r3, r3, #5
 8003286:	77fb      	strb	r3, [r7, #31]
  curSec = sec % 60;
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	4b38      	ldr	r3, [pc, #224]	; (800336c <LCD_Print_Clock+0xf8>)
 800328c:	fba3 2301 	umull	r2, r3, r3, r1
 8003290:	095a      	lsrs	r2, r3, #5
 8003292:	4613      	mov	r3, r2
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	1a9b      	subs	r3, r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	1aca      	subs	r2, r1, r3
 800329c:	4613      	mov	r3, r2
 800329e:	77bb      	strb	r3, [r7, #30]
  setMin = menu2_value / 60;
 80032a0:	4b33      	ldr	r3, [pc, #204]	; (8003370 <LCD_Print_Clock+0xfc>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a31      	ldr	r2, [pc, #196]	; (800336c <LCD_Print_Clock+0xf8>)
 80032a6:	fba2 2303 	umull	r2, r3, r2, r3
 80032aa:	095b      	lsrs	r3, r3, #5
 80032ac:	777b      	strb	r3, [r7, #29]
  setSec = menu2_value % 60;
 80032ae:	4b30      	ldr	r3, [pc, #192]	; (8003370 <LCD_Print_Clock+0xfc>)
 80032b0:	6819      	ldr	r1, [r3, #0]
 80032b2:	4b2e      	ldr	r3, [pc, #184]	; (800336c <LCD_Print_Clock+0xf8>)
 80032b4:	fba3 2301 	umull	r2, r3, r3, r1
 80032b8:	095a      	lsrs	r2, r3, #5
 80032ba:	4613      	mov	r3, r2
 80032bc:	011b      	lsls	r3, r3, #4
 80032be:	1a9b      	subs	r3, r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	1aca      	subs	r2, r1, r3
 80032c4:	4613      	mov	r3, r2
 80032c6:	773b      	strb	r3, [r7, #28]
  if (curMin < 100) {
 80032c8:	7ffb      	ldrb	r3, [r7, #31]
 80032ca:	2b63      	cmp	r3, #99	; 0x63
 80032cc:	d825      	bhi.n	800331a <LCD_Print_Clock+0xa6>
	if (setMin >= 100) {
 80032ce:	7f7b      	ldrb	r3, [r7, #29]
 80032d0:	2b63      	cmp	r3, #99	; 0x63
 80032d2:	d90d      	bls.n	80032f0 <LCD_Print_Clock+0x7c>
	  sprintf(holder, "%02d:%02d/%03d:%02d", curMin, curSec, setMin, setSec);
 80032d4:	7ff9      	ldrb	r1, [r7, #31]
 80032d6:	7fbc      	ldrb	r4, [r7, #30]
 80032d8:	7f7b      	ldrb	r3, [r7, #29]
 80032da:	7f3a      	ldrb	r2, [r7, #28]
 80032dc:	f107 000c 	add.w	r0, r7, #12
 80032e0:	9201      	str	r2, [sp, #4]
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	4623      	mov	r3, r4
 80032e6:	460a      	mov	r2, r1
 80032e8:	4922      	ldr	r1, [pc, #136]	; (8003374 <LCD_Print_Clock+0x100>)
 80032ea:	f002 ff69 	bl	80061c0 <siprintf>
 80032ee:	e00c      	b.n	800330a <LCD_Print_Clock+0x96>
	} else {
	  sprintf(holder, "%02d:%02d/%02d:%02d", curMin, curSec, setMin, setSec);
 80032f0:	7ff9      	ldrb	r1, [r7, #31]
 80032f2:	7fbc      	ldrb	r4, [r7, #30]
 80032f4:	7f7b      	ldrb	r3, [r7, #29]
 80032f6:	7f3a      	ldrb	r2, [r7, #28]
 80032f8:	f107 000c 	add.w	r0, r7, #12
 80032fc:	9201      	str	r2, [sp, #4]
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	4623      	mov	r3, r4
 8003302:	460a      	mov	r2, r1
 8003304:	491c      	ldr	r1, [pc, #112]	; (8003378 <LCD_Print_Clock+0x104>)
 8003306:	f002 ff5b 	bl	80061c0 <siprintf>
	}
	LCD_Print_String_At(&LCD, 2, 9, holder);
 800330a:	f107 030c 	add.w	r3, r7, #12
 800330e:	2209      	movs	r2, #9
 8003310:	2102      	movs	r1, #2
 8003312:	481a      	ldr	r0, [pc, #104]	; (800337c <LCD_Print_Clock+0x108>)
 8003314:	f7fe fd51 	bl	8001dba <LCD_Print_String_At>
	} else {
	  sprintf(holder, "%3d:%02d/%02d:%02d", curMin, curSec, setMin, setSec);
	}
	LCD_Print_String_At(&LCD, 2, 8, holder);
  }
}
 8003318:	e024      	b.n	8003364 <LCD_Print_Clock+0xf0>
	if (setMin >= 100) {
 800331a:	7f7b      	ldrb	r3, [r7, #29]
 800331c:	2b63      	cmp	r3, #99	; 0x63
 800331e:	d90d      	bls.n	800333c <LCD_Print_Clock+0xc8>
	  sprintf(holder, "%3d:%02d/%03d:%02d", curMin, curSec, setMin, setSec);
 8003320:	7ff9      	ldrb	r1, [r7, #31]
 8003322:	7fbc      	ldrb	r4, [r7, #30]
 8003324:	7f7b      	ldrb	r3, [r7, #29]
 8003326:	7f3a      	ldrb	r2, [r7, #28]
 8003328:	f107 000c 	add.w	r0, r7, #12
 800332c:	9201      	str	r2, [sp, #4]
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	4623      	mov	r3, r4
 8003332:	460a      	mov	r2, r1
 8003334:	4912      	ldr	r1, [pc, #72]	; (8003380 <LCD_Print_Clock+0x10c>)
 8003336:	f002 ff43 	bl	80061c0 <siprintf>
 800333a:	e00c      	b.n	8003356 <LCD_Print_Clock+0xe2>
	  sprintf(holder, "%3d:%02d/%02d:%02d", curMin, curSec, setMin, setSec);
 800333c:	7ff9      	ldrb	r1, [r7, #31]
 800333e:	7fbc      	ldrb	r4, [r7, #30]
 8003340:	7f7b      	ldrb	r3, [r7, #29]
 8003342:	7f3a      	ldrb	r2, [r7, #28]
 8003344:	f107 000c 	add.w	r0, r7, #12
 8003348:	9201      	str	r2, [sp, #4]
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	4623      	mov	r3, r4
 800334e:	460a      	mov	r2, r1
 8003350:	490c      	ldr	r1, [pc, #48]	; (8003384 <LCD_Print_Clock+0x110>)
 8003352:	f002 ff35 	bl	80061c0 <siprintf>
	LCD_Print_String_At(&LCD, 2, 8, holder);
 8003356:	f107 030c 	add.w	r3, r7, #12
 800335a:	2208      	movs	r2, #8
 800335c:	2102      	movs	r1, #2
 800335e:	4807      	ldr	r0, [pc, #28]	; (800337c <LCD_Print_Clock+0x108>)
 8003360:	f7fe fd2b 	bl	8001dba <LCD_Print_String_At>
}
 8003364:	bf00      	nop
 8003366:	3724      	adds	r7, #36	; 0x24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd90      	pop	{r4, r7, pc}
 800336c:	88888889 	.word	0x88888889
 8003370:	20000270 	.word	0x20000270
 8003374:	08006b88 	.word	0x08006b88
 8003378:	08006b9c 	.word	0x08006b9c
 800337c:	20000224 	.word	0x20000224
 8003380:	08006bb0 	.word	0x08006bb0
 8003384:	08006bc4 	.word	0x08006bc4

08003388 <printMenuName>:

void printMenuName() {
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
   |                    |
   ----------------------
   **************************/

//These are the values which are not changing the operation
  LCD_Print_String_At(&LCD, 1, 2, "Speed: ");
 800338c:	4b09      	ldr	r3, [pc, #36]	; (80033b4 <printMenuName+0x2c>)
 800338e:	2202      	movs	r2, #2
 8003390:	2101      	movs	r1, #1
 8003392:	4809      	ldr	r0, [pc, #36]	; (80033b8 <printMenuName+0x30>)
 8003394:	f7fe fd11 	bl	8001dba <LCD_Print_String_At>
//----------------------
  LCD_Print_String_At(&LCD, 2, 2, "Time: ");
 8003398:	4b08      	ldr	r3, [pc, #32]	; (80033bc <printMenuName+0x34>)
 800339a:	2202      	movs	r2, #2
 800339c:	2102      	movs	r1, #2
 800339e:	4806      	ldr	r0, [pc, #24]	; (80033b8 <printMenuName+0x30>)
 80033a0:	f7fe fd0b 	bl	8001dba <LCD_Print_String_At>
  LCD_Print_String_At(&LCD, 3, 2, "Set count: ");
 80033a4:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <printMenuName+0x38>)
 80033a6:	2202      	movs	r2, #2
 80033a8:	2103      	movs	r1, #3
 80033aa:	4803      	ldr	r0, [pc, #12]	; (80033b8 <printMenuName+0x30>)
 80033ac:	f7fe fd05 	bl	8001dba <LCD_Print_String_At>
//----------------------
}
 80033b0:	bf00      	nop
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	08006b18 	.word	0x08006b18
 80033b8:	20000224 	.word	0x20000224
 80033bc:	08006b20 	.word	0x08006b20
 80033c0:	08006b28 	.word	0x08006b28

080033c4 <printMenuValue>:

void printMenuValue() {
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
   | Set count: xxxx    |
   |                    |
   ----------------------
   **************************/
//Update value
  update_Menu1();
 80033c8:	f7ff fe2e 	bl	8003028 <update_Menu1>
  update_Menu2();
 80033cc:	f7ff fe50 	bl	8003070 <update_Menu2>
  update_Menu3();
 80033d0:	f7ff ff2e 	bl	8003230 <update_Menu3>
}
 80033d4:	bf00      	nop
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <blinkCursor>:
 *    | Time:      mm:ss   |
 *
 * */
u32 lastBlink = 0;
bool _isBlink = false;
void blinkCursor() {
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
  u32 now = HAL_GetTick();
 80033de:	f000 fa71 	bl	80038c4 <HAL_GetTick>
 80033e2:	6078      	str	r0, [r7, #4]
  if (now - lastBlink > 250) {
 80033e4:	4b0e      	ldr	r3, [pc, #56]	; (8003420 <blinkCursor+0x48>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2bfa      	cmp	r3, #250	; 0xfa
 80033ee:	d913      	bls.n	8003418 <blinkCursor+0x40>
	lastBlink = now;
 80033f0:	4a0b      	ldr	r2, [pc, #44]	; (8003420 <blinkCursor+0x48>)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6013      	str	r3, [r2, #0]
	if (_isBlink) {
 80033f6:	4b0b      	ldr	r3, [pc, #44]	; (8003424 <blinkCursor+0x4c>)
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d006      	beq.n	800340c <blinkCursor+0x34>
	  CLCD_I2C_CursorOn(&LCD);
 80033fe:	480a      	ldr	r0, [pc, #40]	; (8003428 <blinkCursor+0x50>)
 8003400:	f7fe fc38 	bl	8001c74 <CLCD_I2C_CursorOn>
	  _isBlink = false;
 8003404:	4b07      	ldr	r3, [pc, #28]	; (8003424 <blinkCursor+0x4c>)
 8003406:	2200      	movs	r2, #0
 8003408:	701a      	strb	r2, [r3, #0]
	} else {
	  CLCD_I2C_CursorOff(&LCD);
	  _isBlink = true;
	}
  }
}
 800340a:	e005      	b.n	8003418 <blinkCursor+0x40>
	  CLCD_I2C_CursorOff(&LCD);
 800340c:	4806      	ldr	r0, [pc, #24]	; (8003428 <blinkCursor+0x50>)
 800340e:	f7fe fc47 	bl	8001ca0 <CLCD_I2C_CursorOff>
	  _isBlink = true;
 8003412:	4b04      	ldr	r3, [pc, #16]	; (8003424 <blinkCursor+0x4c>)
 8003414:	2201      	movs	r2, #1
 8003416:	701a      	strb	r2, [r3, #0]
}
 8003418:	bf00      	nop
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	200002cc 	.word	0x200002cc
 8003424:	200002d0 	.word	0x200002d0
 8003428:	20000224 	.word	0x20000224

0800342c <updateSelection>:

void updateSelection() {
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
//Clear display's ">" parts
  LCD_Print_String_At(&LCD, 1, 1, " ");
 8003430:	4b3b      	ldr	r3, [pc, #236]	; (8003520 <updateSelection+0xf4>)
 8003432:	2201      	movs	r2, #1
 8003434:	2101      	movs	r1, #1
 8003436:	483b      	ldr	r0, [pc, #236]	; (8003524 <updateSelection+0xf8>)
 8003438:	f7fe fcbf 	bl	8001dba <LCD_Print_String_At>
  LCD_Print_String_At(&LCD, 2, 1, " ");
 800343c:	4b38      	ldr	r3, [pc, #224]	; (8003520 <updateSelection+0xf4>)
 800343e:	2201      	movs	r2, #1
 8003440:	2102      	movs	r1, #2
 8003442:	4838      	ldr	r0, [pc, #224]	; (8003524 <updateSelection+0xf8>)
 8003444:	f7fe fcb9 	bl	8001dba <LCD_Print_String_At>
  LCD_Print_String_At(&LCD, 3, 1, " ");
 8003448:	4b35      	ldr	r3, [pc, #212]	; (8003520 <updateSelection+0xf4>)
 800344a:	2201      	movs	r2, #1
 800344c:	2103      	movs	r1, #3
 800344e:	4835      	ldr	r0, [pc, #212]	; (8003524 <updateSelection+0xf8>)
 8003450:	f7fe fcb3 	bl	8001dba <LCD_Print_String_At>
  LCD_Print_String_At(&LCD, 4, 1, " ");
 8003454:	4b32      	ldr	r3, [pc, #200]	; (8003520 <updateSelection+0xf4>)
 8003456:	2201      	movs	r2, #1
 8003458:	2104      	movs	r1, #4
 800345a:	4832      	ldr	r0, [pc, #200]	; (8003524 <updateSelection+0xf8>)
 800345c:	f7fe fcad 	bl	8001dba <LCD_Print_String_At>

//When a menu is selected ">" becomes "X"
  if (menu1_selected == true) {
 8003460:	4b31      	ldr	r3, [pc, #196]	; (8003528 <updateSelection+0xfc>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d006      	beq.n	8003476 <updateSelection+0x4a>
	LCD_Print_String_At(&LCD, 1, 1, "*");
 8003468:	4b30      	ldr	r3, [pc, #192]	; (800352c <updateSelection+0x100>)
 800346a:	2201      	movs	r2, #1
 800346c:	2101      	movs	r1, #1
 800346e:	482d      	ldr	r0, [pc, #180]	; (8003524 <updateSelection+0xf8>)
 8003470:	f7fe fca3 	bl	8001dba <LCD_Print_String_At>
	  case 4:
		LCD_Print_String_At(&LCD, 4, 1, ">");
		break;
	}
  }
}
 8003474:	e052      	b.n	800351c <updateSelection+0xf0>
  } else if (menu2_selected == true) {
 8003476:	4b2e      	ldr	r3, [pc, #184]	; (8003530 <updateSelection+0x104>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00b      	beq.n	8003496 <updateSelection+0x6a>
	LCD_Print_String_At(&LCD, 2, 1, "*");
 800347e:	4b2b      	ldr	r3, [pc, #172]	; (800352c <updateSelection+0x100>)
 8003480:	2201      	movs	r2, #1
 8003482:	2102      	movs	r1, #2
 8003484:	4827      	ldr	r0, [pc, #156]	; (8003524 <updateSelection+0xf8>)
 8003486:	f7fe fc98 	bl	8001dba <LCD_Print_String_At>
	LCD_Set_Cursor(&LCD, 2, 9);
 800348a:	2209      	movs	r2, #9
 800348c:	2102      	movs	r1, #2
 800348e:	4825      	ldr	r0, [pc, #148]	; (8003524 <updateSelection+0xf8>)
 8003490:	f7fe fc60 	bl	8001d54 <LCD_Set_Cursor>
}
 8003494:	e042      	b.n	800351c <updateSelection+0xf0>
  } else if (menu3_selected == true) {
 8003496:	4b27      	ldr	r3, [pc, #156]	; (8003534 <updateSelection+0x108>)
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d006      	beq.n	80034ac <updateSelection+0x80>
	LCD_Print_String_At(&LCD, 3, 1, "*");
 800349e:	4b23      	ldr	r3, [pc, #140]	; (800352c <updateSelection+0x100>)
 80034a0:	2201      	movs	r2, #1
 80034a2:	2103      	movs	r1, #3
 80034a4:	481f      	ldr	r0, [pc, #124]	; (8003524 <updateSelection+0xf8>)
 80034a6:	f7fe fc88 	bl	8001dba <LCD_Print_String_At>
}
 80034aa:	e037      	b.n	800351c <updateSelection+0xf0>
  } else if (menu4_selected == true) {
 80034ac:	4b22      	ldr	r3, [pc, #136]	; (8003538 <updateSelection+0x10c>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d006      	beq.n	80034c2 <updateSelection+0x96>
	LCD_Print_String_At(&LCD, 4, 1, "*");
 80034b4:	4b1d      	ldr	r3, [pc, #116]	; (800352c <updateSelection+0x100>)
 80034b6:	2201      	movs	r2, #1
 80034b8:	2104      	movs	r1, #4
 80034ba:	481a      	ldr	r0, [pc, #104]	; (8003524 <updateSelection+0xf8>)
 80034bc:	f7fe fc7d 	bl	8001dba <LCD_Print_String_At>
}
 80034c0:	e02c      	b.n	800351c <updateSelection+0xf0>
	switch (menuCounter) //this checks the value of the counter (0, 1, 2 or 3)
 80034c2:	4b1e      	ldr	r3, [pc, #120]	; (800353c <updateSelection+0x110>)
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	3b01      	subs	r3, #1
 80034c8:	2b03      	cmp	r3, #3
 80034ca:	d827      	bhi.n	800351c <updateSelection+0xf0>
 80034cc:	a201      	add	r2, pc, #4	; (adr r2, 80034d4 <updateSelection+0xa8>)
 80034ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d2:	bf00      	nop
 80034d4:	080034e5 	.word	0x080034e5
 80034d8:	080034f3 	.word	0x080034f3
 80034dc:	08003501 	.word	0x08003501
 80034e0:	0800350f 	.word	0x0800350f
		LCD_Print_String_At(&LCD, 1, 1, ">");
 80034e4:	4b16      	ldr	r3, [pc, #88]	; (8003540 <updateSelection+0x114>)
 80034e6:	2201      	movs	r2, #1
 80034e8:	2101      	movs	r1, #1
 80034ea:	480e      	ldr	r0, [pc, #56]	; (8003524 <updateSelection+0xf8>)
 80034ec:	f7fe fc65 	bl	8001dba <LCD_Print_String_At>
		break;
 80034f0:	e014      	b.n	800351c <updateSelection+0xf0>
		LCD_Print_String_At(&LCD, 2, 1, ">");
 80034f2:	4b13      	ldr	r3, [pc, #76]	; (8003540 <updateSelection+0x114>)
 80034f4:	2201      	movs	r2, #1
 80034f6:	2102      	movs	r1, #2
 80034f8:	480a      	ldr	r0, [pc, #40]	; (8003524 <updateSelection+0xf8>)
 80034fa:	f7fe fc5e 	bl	8001dba <LCD_Print_String_At>
		break;
 80034fe:	e00d      	b.n	800351c <updateSelection+0xf0>
		LCD_Print_String_At(&LCD, 3, 1, ">");
 8003500:	4b0f      	ldr	r3, [pc, #60]	; (8003540 <updateSelection+0x114>)
 8003502:	2201      	movs	r2, #1
 8003504:	2103      	movs	r1, #3
 8003506:	4807      	ldr	r0, [pc, #28]	; (8003524 <updateSelection+0xf8>)
 8003508:	f7fe fc57 	bl	8001dba <LCD_Print_String_At>
		break;
 800350c:	e006      	b.n	800351c <updateSelection+0xf0>
		LCD_Print_String_At(&LCD, 4, 1, ">");
 800350e:	4b0c      	ldr	r3, [pc, #48]	; (8003540 <updateSelection+0x114>)
 8003510:	2201      	movs	r2, #1
 8003512:	2104      	movs	r1, #4
 8003514:	4803      	ldr	r0, [pc, #12]	; (8003524 <updateSelection+0xf8>)
 8003516:	f7fe fc50 	bl	8001dba <LCD_Print_String_At>
		break;
 800351a:	bf00      	nop
}
 800351c:	bf00      	nop
 800351e:	bd80      	pop	{r7, pc}
 8003520:	08006b3c 	.word	0x08006b3c
 8003524:	20000224 	.word	0x20000224
 8003528:	20000280 	.word	0x20000280
 800352c:	08006bd8 	.word	0x08006bd8
 8003530:	20000281 	.word	0x20000281
 8003534:	20000282 	.word	0x20000282
 8003538:	20000283 	.word	0x20000283
 800353c:	2000000a 	.word	0x2000000a
 8003540:	08006bdc 	.word	0x08006bdc

08003544 <set_motor>:

void set_motor(u8 id, s8 dir, u16 val) {
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af02      	add	r7, sp, #8
 800354a:	4603      	mov	r3, r0
 800354c:	71fb      	strb	r3, [r7, #7]
 800354e:	460b      	mov	r3, r1
 8003550:	71bb      	strb	r3, [r7, #6]
 8003552:	4613      	mov	r3, r2
 8003554:	80bb      	strh	r3, [r7, #4]
  u16 pwm;
  switch (id) {
 8003556:	79fb      	ldrb	r3, [r7, #7]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d05d      	beq.n	8003618 <set_motor+0xd4>
 800355c:	2b02      	cmp	r3, #2
 800355e:	d000      	beq.n	8003562 <set_motor+0x1e>
		HAL_GPIO_WritePin(M2B_R_GPIO_Port, M2B_R_Pin, GPIO_PIN_RESET);
		M2B_Channel = 999;
	  }
	  break;
	default:
	  return;
 8003560:	e05b      	b.n	800361a <set_motor+0xd6>
	  pwm = map(val, 0, 1000, 0, 999);
 8003562:	88b8      	ldrh	r0, [r7, #4]
 8003564:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	2300      	movs	r3, #0
 800356c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003570:	2100      	movs	r1, #0
 8003572:	f000 f859 	bl	8003628 <map>
 8003576:	4603      	mov	r3, r0
 8003578:	81fb      	strh	r3, [r7, #14]
	  if (dir == -1) {
 800357a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800357e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003582:	d10f      	bne.n	80035a4 <set_motor+0x60>
		HAL_GPIO_WritePin(M2B_L_GPIO_Port, M2B_L_Pin, GPIO_PIN_SET);
 8003584:	2201      	movs	r2, #1
 8003586:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800358a:	4825      	ldr	r0, [pc, #148]	; (8003620 <set_motor+0xdc>)
 800358c:	f000 fe71 	bl	8004272 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2B_R_GPIO_Port, M2B_R_Pin, GPIO_PIN_RESET);
 8003590:	2200      	movs	r2, #0
 8003592:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003596:	4822      	ldr	r0, [pc, #136]	; (8003620 <set_motor+0xdc>)
 8003598:	f000 fe6b 	bl	8004272 <HAL_GPIO_WritePin>
		M2B_Channel = pwm;
 800359c:	4a21      	ldr	r2, [pc, #132]	; (8003624 <set_motor+0xe0>)
 800359e:	89fb      	ldrh	r3, [r7, #14]
 80035a0:	63d3      	str	r3, [r2, #60]	; 0x3c
	  break;
 80035a2:	e03a      	b.n	800361a <set_motor+0xd6>
	  } else if (dir == 1) {
 80035a4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d10f      	bne.n	80035cc <set_motor+0x88>
		HAL_GPIO_WritePin(M2B_L_GPIO_Port, M2B_L_Pin, GPIO_PIN_RESET);
 80035ac:	2200      	movs	r2, #0
 80035ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035b2:	481b      	ldr	r0, [pc, #108]	; (8003620 <set_motor+0xdc>)
 80035b4:	f000 fe5d 	bl	8004272 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2B_R_GPIO_Port, M2B_R_Pin, GPIO_PIN_SET);
 80035b8:	2201      	movs	r2, #1
 80035ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035be:	4818      	ldr	r0, [pc, #96]	; (8003620 <set_motor+0xdc>)
 80035c0:	f000 fe57 	bl	8004272 <HAL_GPIO_WritePin>
		M2B_Channel = pwm;
 80035c4:	4a17      	ldr	r2, [pc, #92]	; (8003624 <set_motor+0xe0>)
 80035c6:	89fb      	ldrh	r3, [r7, #14]
 80035c8:	63d3      	str	r3, [r2, #60]	; 0x3c
	  break;
 80035ca:	e026      	b.n	800361a <set_motor+0xd6>
	  } else if (dir == -2) //Freely run
 80035cc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80035d0:	f113 0f02 	cmn.w	r3, #2
 80035d4:	d10f      	bne.n	80035f6 <set_motor+0xb2>
		M2B_Channel = 0;
 80035d6:	4b13      	ldr	r3, [pc, #76]	; (8003624 <set_motor+0xe0>)
 80035d8:	2200      	movs	r2, #0
 80035da:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(M2B_L_GPIO_Port, M2B_L_Pin, GPIO_PIN_RESET);
 80035dc:	2200      	movs	r2, #0
 80035de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035e2:	480f      	ldr	r0, [pc, #60]	; (8003620 <set_motor+0xdc>)
 80035e4:	f000 fe45 	bl	8004272 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2B_R_GPIO_Port, M2B_R_Pin, GPIO_PIN_RESET);
 80035e8:	2200      	movs	r2, #0
 80035ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035ee:	480c      	ldr	r0, [pc, #48]	; (8003620 <set_motor+0xdc>)
 80035f0:	f000 fe3f 	bl	8004272 <HAL_GPIO_WritePin>
	  break;
 80035f4:	e011      	b.n	800361a <set_motor+0xd6>
		HAL_GPIO_WritePin(M2B_L_GPIO_Port, M2B_L_Pin, GPIO_PIN_RESET);
 80035f6:	2200      	movs	r2, #0
 80035f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035fc:	4808      	ldr	r0, [pc, #32]	; (8003620 <set_motor+0xdc>)
 80035fe:	f000 fe38 	bl	8004272 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2B_R_GPIO_Port, M2B_R_Pin, GPIO_PIN_RESET);
 8003602:	2200      	movs	r2, #0
 8003604:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003608:	4805      	ldr	r0, [pc, #20]	; (8003620 <set_motor+0xdc>)
 800360a:	f000 fe32 	bl	8004272 <HAL_GPIO_WritePin>
		M2B_Channel = 999;
 800360e:	4b05      	ldr	r3, [pc, #20]	; (8003624 <set_motor+0xe0>)
 8003610:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003614:	63da      	str	r2, [r3, #60]	; 0x3c
	  break;
 8003616:	e000      	b.n	800361a <set_motor+0xd6>
	  break;
 8003618:	bf00      	nop
  }
}
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	40010c00 	.word	0x40010c00
 8003624:	40000800 	.word	0x40000800

08003628 <map>:

s32 map(s32 x, s32 in_min, s32 in_max, s32 out_min, s32 out_max) {
 8003628:	b5b0      	push	{r4, r5, r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
 8003634:	603b      	str	r3, [r7, #0]
  return (s32) ((x - in_min) * (out_max - out_min) * 1.0 / (in_max - in_min)
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	6a39      	ldr	r1, [r7, #32]
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	1a8a      	subs	r2, r1, r2
 8003642:	fb02 f303 	mul.w	r3, r2, r3
 8003646:	4618      	mov	r0, r3
 8003648:	f7fc fed4 	bl	80003f4 <__aeabi_i2d>
 800364c:	4604      	mov	r4, r0
 800364e:	460d      	mov	r5, r1
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	4618      	mov	r0, r3
 8003658:	f7fc fecc 	bl	80003f4 <__aeabi_i2d>
 800365c:	4602      	mov	r2, r0
 800365e:	460b      	mov	r3, r1
 8003660:	4620      	mov	r0, r4
 8003662:	4629      	mov	r1, r5
 8003664:	f7fd f85a 	bl	800071c <__aeabi_ddiv>
 8003668:	4602      	mov	r2, r0
 800366a:	460b      	mov	r3, r1
 800366c:	4614      	mov	r4, r2
 800366e:	461d      	mov	r5, r3
	  + out_min);
 8003670:	6838      	ldr	r0, [r7, #0]
 8003672:	f7fc febf 	bl	80003f4 <__aeabi_i2d>
 8003676:	4602      	mov	r2, r0
 8003678:	460b      	mov	r3, r1
 800367a:	4620      	mov	r0, r4
 800367c:	4629      	mov	r1, r5
 800367e:	f7fc fd6d 	bl	800015c <__adddf3>
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
  return (s32) ((x - in_min) * (out_max - out_min) * 1.0 / (in_max - in_min)
 8003686:	4610      	mov	r0, r2
 8003688:	4619      	mov	r1, r3
 800368a:	f7fd f92f 	bl	80008ec <__aeabi_d2iz>
 800368e:	4603      	mov	r3, r0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bdb0      	pop	{r4, r5, r7, pc}

08003698 <reset_state>:

void reset_state() {
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  eint = 0;
 800369c:	4b05      	ldr	r3, [pc, #20]	; (80036b4 <reset_state+0x1c>)
 800369e:	f04f 0200 	mov.w	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]
  nSec = 0;
 80036a4:	4b04      	ldr	r3, [pc, #16]	; (80036b8 <reset_state+0x20>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	601a      	str	r2, [r3, #0]
}
 80036aa:	bf00      	nop
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bc80      	pop	{r7}
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	200002a0 	.word	0x200002a0
 80036b8:	20000278 	.word	0x20000278

080036bc <save_menu_value>:

void save_menu_value() {
 80036bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036c0:	b086      	sub	sp, #24
 80036c2:	af00      	add	r7, sp, #0
  menu2_value = (firstMin * 10 + lastMin) * 60 + firstSec * 10 + lastSec;
 80036c4:	4b2b      	ldr	r3, [pc, #172]	; (8003774 <save_menu_value+0xb8>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	461a      	mov	r2, r3
 80036ca:	4613      	mov	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4413      	add	r3, r2
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	461a      	mov	r2, r3
 80036d4:	4b28      	ldr	r3, [pc, #160]	; (8003778 <save_menu_value+0xbc>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	441a      	add	r2, r3
 80036da:	4613      	mov	r3, r2
 80036dc:	011b      	lsls	r3, r3, #4
 80036de:	1a9b      	subs	r3, r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4619      	mov	r1, r3
 80036e4:	4b25      	ldr	r3, [pc, #148]	; (800377c <save_menu_value+0xc0>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	461a      	mov	r2, r3
 80036ea:	4613      	mov	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4413      	add	r3, r2
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	440b      	add	r3, r1
 80036f4:	4a22      	ldr	r2, [pc, #136]	; (8003780 <save_menu_value+0xc4>)
 80036f6:	7812      	ldrb	r2, [r2, #0]
 80036f8:	4413      	add	r3, r2
 80036fa:	461a      	mov	r2, r3
 80036fc:	4b21      	ldr	r3, [pc, #132]	; (8003784 <save_menu_value+0xc8>)
 80036fe:	601a      	str	r2, [r3, #0]
  HAL_FLASH_Unlock();
 8003700:	f000 fa8c 	bl	8003c1c <HAL_FLASH_Unlock>
  FLASH_EraseInitTypeDef EraseInit;
  EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8003704:	2300      	movs	r3, #0
 8003706:	60bb      	str	r3, [r7, #8]
  EraseInit.PageAddress = FLASH_USER_START_ADDR;
 8003708:	4b1f      	ldr	r3, [pc, #124]	; (8003788 <save_menu_value+0xcc>)
 800370a:	613b      	str	r3, [r7, #16]
  EraseInit.NbPages = (FLASH_USER_END_ADDR - FLASH_USER_START_ADDR )
 800370c:	2301      	movs	r3, #1
 800370e:	617b      	str	r3, [r7, #20]
	  / FLASH_PAGE_SIZE;
  uint32_t PageError = 0;
 8003710:	2300      	movs	r3, #0
 8003712:	607b      	str	r3, [r7, #4]
  HAL_FLASHEx_Erase(&EraseInit, &PageError);
 8003714:	1d3a      	adds	r2, r7, #4
 8003716:	f107 0308 	add.w	r3, r7, #8
 800371a:	4611      	mov	r1, r2
 800371c:	4618      	mov	r0, r3
 800371e:	f000 fb65 	bl	8003dec <HAL_FLASHEx_Erase>
  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_USER_START_ADDR,
 8003722:	4b1a      	ldr	r3, [pc, #104]	; (800378c <save_menu_value+0xd0>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2200      	movs	r2, #0
 800372a:	469a      	mov	sl, r3
 800372c:	4693      	mov	fp, r2
 800372e:	4652      	mov	r2, sl
 8003730:	465b      	mov	r3, fp
 8003732:	4915      	ldr	r1, [pc, #84]	; (8003788 <save_menu_value+0xcc>)
 8003734:	2002      	movs	r0, #2
 8003736:	f000 fa01 	bl	8003b3c <HAL_FLASH_Program>
  menu1_value);
  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_USER_START_ADDR + 4,
 800373a:	4b12      	ldr	r3, [pc, #72]	; (8003784 <save_menu_value+0xc8>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2200      	movs	r2, #0
 8003740:	4698      	mov	r8, r3
 8003742:	4691      	mov	r9, r2
 8003744:	4642      	mov	r2, r8
 8003746:	464b      	mov	r3, r9
 8003748:	4911      	ldr	r1, [pc, #68]	; (8003790 <save_menu_value+0xd4>)
 800374a:	2002      	movs	r0, #2
 800374c:	f000 f9f6 	bl	8003b3c <HAL_FLASH_Program>
  menu2_value);
  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_USER_START_ADDR + 8,
 8003750:	4b10      	ldr	r3, [pc, #64]	; (8003794 <save_menu_value+0xd8>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	17da      	asrs	r2, r3, #31
 8003756:	461c      	mov	r4, r3
 8003758:	4615      	mov	r5, r2
 800375a:	4622      	mov	r2, r4
 800375c:	462b      	mov	r3, r5
 800375e:	490e      	ldr	r1, [pc, #56]	; (8003798 <save_menu_value+0xdc>)
 8003760:	2002      	movs	r0, #2
 8003762:	f000 f9eb 	bl	8003b3c <HAL_FLASH_Program>
  menu3_value);
  HAL_FLASH_Lock();
 8003766:	f000 fa7f 	bl	8003c68 <HAL_FLASH_Lock>
}
 800376a:	bf00      	nop
 800376c:	3718      	adds	r7, #24
 800376e:	46bd      	mov	sp, r7
 8003770:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003774:	2000027c 	.word	0x2000027c
 8003778:	2000027d 	.word	0x2000027d
 800377c:	2000027e 	.word	0x2000027e
 8003780:	2000027f 	.word	0x2000027f
 8003784:	20000270 	.word	0x20000270
 8003788:	0801f810 	.word	0x0801f810
 800378c:	2000026c 	.word	0x2000026c
 8003790:	0801f814 	.word	0x0801f814
 8003794:	20000004 	.word	0x20000004
 8003798:	0801f818 	.word	0x0801f818

0800379c <stopCmd>:

void stopCmd() {
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  state = 4;
 80037a0:	4b07      	ldr	r3, [pc, #28]	; (80037c0 <stopCmd+0x24>)
 80037a2:	2204      	movs	r2, #4
 80037a4:	701a      	strb	r2, [r3, #0]
  set_motor(2, 0, 0);
 80037a6:	2200      	movs	r2, #0
 80037a8:	2100      	movs	r1, #0
 80037aa:	2002      	movs	r0, #2
 80037ac:	f7ff feca 	bl	8003544 <set_motor>
  LED_OFF();
 80037b0:	f7ff fb6e 	bl	8002e90 <LED_OFF>
  refreshLCD = true;
 80037b4:	4b03      	ldr	r3, [pc, #12]	; (80037c4 <stopCmd+0x28>)
 80037b6:	2201      	movs	r2, #1
 80037b8:	701a      	strb	r2, [r3, #0]
}
 80037ba:	bf00      	nop
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	20000008 	.word	0x20000008
 80037c4:	2000000b 	.word	0x2000000b

080037c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80037c8:	480c      	ldr	r0, [pc, #48]	; (80037fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80037ca:	490d      	ldr	r1, [pc, #52]	; (8003800 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80037cc:	4a0d      	ldr	r2, [pc, #52]	; (8003804 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80037ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037d0:	e002      	b.n	80037d8 <LoopCopyDataInit>

080037d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037d6:	3304      	adds	r3, #4

080037d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037dc:	d3f9      	bcc.n	80037d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037de:	4a0a      	ldr	r2, [pc, #40]	; (8003808 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80037e0:	4c0a      	ldr	r4, [pc, #40]	; (800380c <LoopFillZerobss+0x22>)
  movs r3, #0
 80037e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037e4:	e001      	b.n	80037ea <LoopFillZerobss>

080037e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037e8:	3204      	adds	r2, #4

080037ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037ec:	d3fb      	bcc.n	80037e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80037ee:	f7fe f8b5 	bl	800195c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037f2:	f002 fcb9 	bl	8006168 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80037f6:	f7fd fbc5 	bl	8000f84 <main>
  bx lr
 80037fa:	4770      	bx	lr
  ldr r0, =_sdata
 80037fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003800:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8003804:	08006c44 	.word	0x08006c44
  ldr r2, =_sbss
 8003808:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800380c:	20000308 	.word	0x20000308

08003810 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003810:	e7fe      	b.n	8003810 <ADC1_2_IRQHandler>
	...

08003814 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003818:	4b08      	ldr	r3, [pc, #32]	; (800383c <HAL_Init+0x28>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a07      	ldr	r2, [pc, #28]	; (800383c <HAL_Init+0x28>)
 800381e:	f043 0310 	orr.w	r3, r3, #16
 8003822:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003824:	2003      	movs	r0, #3
 8003826:	f000 f947 	bl	8003ab8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800382a:	200f      	movs	r0, #15
 800382c:	f000 f808 	bl	8003840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003830:	f7fd feac 	bl	800158c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40022000 	.word	0x40022000

08003840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003848:	4b12      	ldr	r3, [pc, #72]	; (8003894 <HAL_InitTick+0x54>)
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	4b12      	ldr	r3, [pc, #72]	; (8003898 <HAL_InitTick+0x58>)
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	4619      	mov	r1, r3
 8003852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003856:	fbb3 f3f1 	udiv	r3, r3, r1
 800385a:	fbb2 f3f3 	udiv	r3, r2, r3
 800385e:	4618      	mov	r0, r3
 8003860:	f000 f95f 	bl	8003b22 <HAL_SYSTICK_Config>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e00e      	b.n	800388c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b0f      	cmp	r3, #15
 8003872:	d80a      	bhi.n	800388a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003874:	2200      	movs	r2, #0
 8003876:	6879      	ldr	r1, [r7, #4]
 8003878:	f04f 30ff 	mov.w	r0, #4294967295
 800387c:	f000 f927 	bl	8003ace <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003880:	4a06      	ldr	r2, [pc, #24]	; (800389c <HAL_InitTick+0x5c>)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003886:	2300      	movs	r3, #0
 8003888:	e000      	b.n	800388c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
}
 800388c:	4618      	mov	r0, r3
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	20000000 	.word	0x20000000
 8003898:	20000024 	.word	0x20000024
 800389c:	20000020 	.word	0x20000020

080038a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038a4:	4b05      	ldr	r3, [pc, #20]	; (80038bc <HAL_IncTick+0x1c>)
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	461a      	mov	r2, r3
 80038aa:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <HAL_IncTick+0x20>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4413      	add	r3, r2
 80038b0:	4a03      	ldr	r2, [pc, #12]	; (80038c0 <HAL_IncTick+0x20>)
 80038b2:	6013      	str	r3, [r2, #0]
}
 80038b4:	bf00      	nop
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bc80      	pop	{r7}
 80038ba:	4770      	bx	lr
 80038bc:	20000024 	.word	0x20000024
 80038c0:	200002d4 	.word	0x200002d4

080038c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  return uwTick;
 80038c8:	4b02      	ldr	r3, [pc, #8]	; (80038d4 <HAL_GetTick+0x10>)
 80038ca:	681b      	ldr	r3, [r3, #0]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bc80      	pop	{r7}
 80038d2:	4770      	bx	lr
 80038d4:	200002d4 	.word	0x200002d4

080038d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038e0:	f7ff fff0 	bl	80038c4 <HAL_GetTick>
 80038e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f0:	d005      	beq.n	80038fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038f2:	4b0a      	ldr	r3, [pc, #40]	; (800391c <HAL_Delay+0x44>)
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	461a      	mov	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4413      	add	r3, r2
 80038fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038fe:	bf00      	nop
 8003900:	f7ff ffe0 	bl	80038c4 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	429a      	cmp	r2, r3
 800390e:	d8f7      	bhi.n	8003900 <HAL_Delay+0x28>
  {
  }
}
 8003910:	bf00      	nop
 8003912:	bf00      	nop
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	20000024 	.word	0x20000024

08003920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003930:	4b0c      	ldr	r3, [pc, #48]	; (8003964 <__NVIC_SetPriorityGrouping+0x44>)
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003936:	68ba      	ldr	r2, [r7, #8]
 8003938:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800393c:	4013      	ands	r3, r2
 800393e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003948:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800394c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003952:	4a04      	ldr	r2, [pc, #16]	; (8003964 <__NVIC_SetPriorityGrouping+0x44>)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	60d3      	str	r3, [r2, #12]
}
 8003958:	bf00      	nop
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	bc80      	pop	{r7}
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	e000ed00 	.word	0xe000ed00

08003968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800396c:	4b04      	ldr	r3, [pc, #16]	; (8003980 <__NVIC_GetPriorityGrouping+0x18>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	0a1b      	lsrs	r3, r3, #8
 8003972:	f003 0307 	and.w	r3, r3, #7
}
 8003976:	4618      	mov	r0, r3
 8003978:	46bd      	mov	sp, r7
 800397a:	bc80      	pop	{r7}
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	e000ed00 	.word	0xe000ed00

08003984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	4603      	mov	r3, r0
 800398c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800398e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003992:	2b00      	cmp	r3, #0
 8003994:	db0b      	blt.n	80039ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003996:	79fb      	ldrb	r3, [r7, #7]
 8003998:	f003 021f 	and.w	r2, r3, #31
 800399c:	4906      	ldr	r1, [pc, #24]	; (80039b8 <__NVIC_EnableIRQ+0x34>)
 800399e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a2:	095b      	lsrs	r3, r3, #5
 80039a4:	2001      	movs	r0, #1
 80039a6:	fa00 f202 	lsl.w	r2, r0, r2
 80039aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bc80      	pop	{r7}
 80039b6:	4770      	bx	lr
 80039b8:	e000e100 	.word	0xe000e100

080039bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4603      	mov	r3, r0
 80039c4:	6039      	str	r1, [r7, #0]
 80039c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	db0a      	blt.n	80039e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	b2da      	uxtb	r2, r3
 80039d4:	490c      	ldr	r1, [pc, #48]	; (8003a08 <__NVIC_SetPriority+0x4c>)
 80039d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039da:	0112      	lsls	r2, r2, #4
 80039dc:	b2d2      	uxtb	r2, r2
 80039de:	440b      	add	r3, r1
 80039e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039e4:	e00a      	b.n	80039fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	4908      	ldr	r1, [pc, #32]	; (8003a0c <__NVIC_SetPriority+0x50>)
 80039ec:	79fb      	ldrb	r3, [r7, #7]
 80039ee:	f003 030f 	and.w	r3, r3, #15
 80039f2:	3b04      	subs	r3, #4
 80039f4:	0112      	lsls	r2, r2, #4
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	440b      	add	r3, r1
 80039fa:	761a      	strb	r2, [r3, #24]
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bc80      	pop	{r7}
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	e000e100 	.word	0xe000e100
 8003a0c:	e000ed00 	.word	0xe000ed00

08003a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b089      	sub	sp, #36	; 0x24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f003 0307 	and.w	r3, r3, #7
 8003a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	f1c3 0307 	rsb	r3, r3, #7
 8003a2a:	2b04      	cmp	r3, #4
 8003a2c:	bf28      	it	cs
 8003a2e:	2304      	movcs	r3, #4
 8003a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	3304      	adds	r3, #4
 8003a36:	2b06      	cmp	r3, #6
 8003a38:	d902      	bls.n	8003a40 <NVIC_EncodePriority+0x30>
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	3b03      	subs	r3, #3
 8003a3e:	e000      	b.n	8003a42 <NVIC_EncodePriority+0x32>
 8003a40:	2300      	movs	r3, #0
 8003a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a44:	f04f 32ff 	mov.w	r2, #4294967295
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4e:	43da      	mvns	r2, r3
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	401a      	ands	r2, r3
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a58:	f04f 31ff 	mov.w	r1, #4294967295
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a62:	43d9      	mvns	r1, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a68:	4313      	orrs	r3, r2
         );
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3724      	adds	r7, #36	; 0x24
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc80      	pop	{r7}
 8003a72:	4770      	bx	lr

08003a74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a84:	d301      	bcc.n	8003a8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a86:	2301      	movs	r3, #1
 8003a88:	e00f      	b.n	8003aaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a8a:	4a0a      	ldr	r2, [pc, #40]	; (8003ab4 <SysTick_Config+0x40>)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a92:	210f      	movs	r1, #15
 8003a94:	f04f 30ff 	mov.w	r0, #4294967295
 8003a98:	f7ff ff90 	bl	80039bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a9c:	4b05      	ldr	r3, [pc, #20]	; (8003ab4 <SysTick_Config+0x40>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003aa2:	4b04      	ldr	r3, [pc, #16]	; (8003ab4 <SysTick_Config+0x40>)
 8003aa4:	2207      	movs	r2, #7
 8003aa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	e000e010 	.word	0xe000e010

08003ab8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f7ff ff2d 	bl	8003920 <__NVIC_SetPriorityGrouping>
}
 8003ac6:	bf00      	nop
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b086      	sub	sp, #24
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	60b9      	str	r1, [r7, #8]
 8003ad8:	607a      	str	r2, [r7, #4]
 8003ada:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ae0:	f7ff ff42 	bl	8003968 <__NVIC_GetPriorityGrouping>
 8003ae4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	68b9      	ldr	r1, [r7, #8]
 8003aea:	6978      	ldr	r0, [r7, #20]
 8003aec:	f7ff ff90 	bl	8003a10 <NVIC_EncodePriority>
 8003af0:	4602      	mov	r2, r0
 8003af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003af6:	4611      	mov	r1, r2
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff ff5f 	bl	80039bc <__NVIC_SetPriority>
}
 8003afe:	bf00      	nop
 8003b00:	3718      	adds	r7, #24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b082      	sub	sp, #8
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7ff ff35 	bl	8003984 <__NVIC_EnableIRQ>
}
 8003b1a:	bf00      	nop
 8003b1c:	3708      	adds	r7, #8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b082      	sub	sp, #8
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7ff ffa2 	bl	8003a74 <SysTick_Config>
 8003b30:	4603      	mov	r3, r0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
	...

08003b3c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8003b52:	2300      	movs	r3, #0
 8003b54:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003b56:	4b2f      	ldr	r3, [pc, #188]	; (8003c14 <HAL_FLASH_Program+0xd8>)
 8003b58:	7e1b      	ldrb	r3, [r3, #24]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d101      	bne.n	8003b62 <HAL_FLASH_Program+0x26>
 8003b5e:	2302      	movs	r3, #2
 8003b60:	e054      	b.n	8003c0c <HAL_FLASH_Program+0xd0>
 8003b62:	4b2c      	ldr	r3, [pc, #176]	; (8003c14 <HAL_FLASH_Program+0xd8>)
 8003b64:	2201      	movs	r2, #1
 8003b66:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003b68:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b6c:	f000 f8a8 	bl	8003cc0 <FLASH_WaitForLastOperation>
 8003b70:	4603      	mov	r3, r0
 8003b72:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003b74:	7dfb      	ldrb	r3, [r7, #23]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d144      	bne.n	8003c04 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d102      	bne.n	8003b86 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003b80:	2301      	movs	r3, #1
 8003b82:	757b      	strb	r3, [r7, #21]
 8003b84:	e007      	b.n	8003b96 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d102      	bne.n	8003b92 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	757b      	strb	r3, [r7, #21]
 8003b90:	e001      	b.n	8003b96 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003b92:	2304      	movs	r3, #4
 8003b94:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003b96:	2300      	movs	r3, #0
 8003b98:	75bb      	strb	r3, [r7, #22]
 8003b9a:	e02d      	b.n	8003bf8 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003b9c:	7dbb      	ldrb	r3, [r7, #22]
 8003b9e:	005a      	lsls	r2, r3, #1
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	eb02 0c03 	add.w	ip, r2, r3
 8003ba6:	7dbb      	ldrb	r3, [r7, #22]
 8003ba8:	0119      	lsls	r1, r3, #4
 8003baa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bae:	f1c1 0620 	rsb	r6, r1, #32
 8003bb2:	f1a1 0020 	sub.w	r0, r1, #32
 8003bb6:	fa22 f401 	lsr.w	r4, r2, r1
 8003bba:	fa03 f606 	lsl.w	r6, r3, r6
 8003bbe:	4334      	orrs	r4, r6
 8003bc0:	fa23 f000 	lsr.w	r0, r3, r0
 8003bc4:	4304      	orrs	r4, r0
 8003bc6:	fa23 f501 	lsr.w	r5, r3, r1
 8003bca:	b2a3      	uxth	r3, r4
 8003bcc:	4619      	mov	r1, r3
 8003bce:	4660      	mov	r0, ip
 8003bd0:	f000 f85a 	bl	8003c88 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003bd4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003bd8:	f000 f872 	bl	8003cc0 <FLASH_WaitForLastOperation>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003be0:	4b0d      	ldr	r3, [pc, #52]	; (8003c18 <HAL_FLASH_Program+0xdc>)
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	4a0c      	ldr	r2, [pc, #48]	; (8003c18 <HAL_FLASH_Program+0xdc>)
 8003be6:	f023 0301 	bic.w	r3, r3, #1
 8003bea:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003bec:	7dfb      	ldrb	r3, [r7, #23]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d107      	bne.n	8003c02 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003bf2:	7dbb      	ldrb	r3, [r7, #22]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	75bb      	strb	r3, [r7, #22]
 8003bf8:	7dba      	ldrb	r2, [r7, #22]
 8003bfa:	7d7b      	ldrb	r3, [r7, #21]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d3cd      	bcc.n	8003b9c <HAL_FLASH_Program+0x60>
 8003c00:	e000      	b.n	8003c04 <HAL_FLASH_Program+0xc8>
      {
        break;
 8003c02:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003c04:	4b03      	ldr	r3, [pc, #12]	; (8003c14 <HAL_FLASH_Program+0xd8>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	761a      	strb	r2, [r3, #24]

  return status;
 8003c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	371c      	adds	r7, #28
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c14:	200002d8 	.word	0x200002d8
 8003c18:	40022000 	.word	0x40022000

08003c1c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003c22:	2300      	movs	r3, #0
 8003c24:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003c26:	4b0d      	ldr	r3, [pc, #52]	; (8003c5c <HAL_FLASH_Unlock+0x40>)
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00d      	beq.n	8003c4e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003c32:	4b0a      	ldr	r3, [pc, #40]	; (8003c5c <HAL_FLASH_Unlock+0x40>)
 8003c34:	4a0a      	ldr	r2, [pc, #40]	; (8003c60 <HAL_FLASH_Unlock+0x44>)
 8003c36:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003c38:	4b08      	ldr	r3, [pc, #32]	; (8003c5c <HAL_FLASH_Unlock+0x40>)
 8003c3a:	4a0a      	ldr	r2, [pc, #40]	; (8003c64 <HAL_FLASH_Unlock+0x48>)
 8003c3c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003c3e:	4b07      	ldr	r3, [pc, #28]	; (8003c5c <HAL_FLASH_Unlock+0x40>)
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8003c4e:	79fb      	ldrb	r3, [r7, #7]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bc80      	pop	{r7}
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	40022000 	.word	0x40022000
 8003c60:	45670123 	.word	0x45670123
 8003c64:	cdef89ab 	.word	0xcdef89ab

08003c68 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003c6c:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <HAL_FLASH_Lock+0x1c>)
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	4a04      	ldr	r2, [pc, #16]	; (8003c84 <HAL_FLASH_Lock+0x1c>)
 8003c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c76:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bc80      	pop	{r7}
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	40022000 	.word	0x40022000

08003c88 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c94:	4b08      	ldr	r3, [pc, #32]	; (8003cb8 <FLASH_Program_HalfWord+0x30>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003c9a:	4b08      	ldr	r3, [pc, #32]	; (8003cbc <FLASH_Program_HalfWord+0x34>)
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	4a07      	ldr	r2, [pc, #28]	; (8003cbc <FLASH_Program_HalfWord+0x34>)
 8003ca0:	f043 0301 	orr.w	r3, r3, #1
 8003ca4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	887a      	ldrh	r2, [r7, #2]
 8003caa:	801a      	strh	r2, [r3, #0]
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bc80      	pop	{r7}
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	200002d8 	.word	0x200002d8
 8003cbc:	40022000 	.word	0x40022000

08003cc0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003cc8:	f7ff fdfc 	bl	80038c4 <HAL_GetTick>
 8003ccc:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003cce:	e010      	b.n	8003cf2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd6:	d00c      	beq.n	8003cf2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d007      	beq.n	8003cee <FLASH_WaitForLastOperation+0x2e>
 8003cde:	f7ff fdf1 	bl	80038c4 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d201      	bcs.n	8003cf2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e025      	b.n	8003d3e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003cf2:	4b15      	ldr	r3, [pc, #84]	; (8003d48 <FLASH_WaitForLastOperation+0x88>)
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1e8      	bne.n	8003cd0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003cfe:	4b12      	ldr	r3, [pc, #72]	; (8003d48 <FLASH_WaitForLastOperation+0x88>)
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f003 0320 	and.w	r3, r3, #32
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d002      	beq.n	8003d10 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003d0a:	4b0f      	ldr	r3, [pc, #60]	; (8003d48 <FLASH_WaitForLastOperation+0x88>)
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003d10:	4b0d      	ldr	r3, [pc, #52]	; (8003d48 <FLASH_WaitForLastOperation+0x88>)
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f003 0310 	and.w	r3, r3, #16
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10b      	bne.n	8003d34 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003d1c:	4b0a      	ldr	r3, [pc, #40]	; (8003d48 <FLASH_WaitForLastOperation+0x88>)
 8003d1e:	69db      	ldr	r3, [r3, #28]
 8003d20:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d105      	bne.n	8003d34 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003d28:	4b07      	ldr	r3, [pc, #28]	; (8003d48 <FLASH_WaitForLastOperation+0x88>)
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d003      	beq.n	8003d3c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003d34:	f000 f80a 	bl	8003d4c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e000      	b.n	8003d3e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	40022000 	.word	0x40022000

08003d4c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003d52:	2300      	movs	r3, #0
 8003d54:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003d56:	4b23      	ldr	r3, [pc, #140]	; (8003de4 <FLASH_SetErrorCode+0x98>)
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	f003 0310 	and.w	r3, r3, #16
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d009      	beq.n	8003d76 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003d62:	4b21      	ldr	r3, [pc, #132]	; (8003de8 <FLASH_SetErrorCode+0x9c>)
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	f043 0302 	orr.w	r3, r3, #2
 8003d6a:	4a1f      	ldr	r2, [pc, #124]	; (8003de8 <FLASH_SetErrorCode+0x9c>)
 8003d6c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f043 0310 	orr.w	r3, r3, #16
 8003d74:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003d76:	4b1b      	ldr	r3, [pc, #108]	; (8003de4 <FLASH_SetErrorCode+0x98>)
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d009      	beq.n	8003d96 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003d82:	4b19      	ldr	r3, [pc, #100]	; (8003de8 <FLASH_SetErrorCode+0x9c>)
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	f043 0301 	orr.w	r3, r3, #1
 8003d8a:	4a17      	ldr	r2, [pc, #92]	; (8003de8 <FLASH_SetErrorCode+0x9c>)
 8003d8c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f043 0304 	orr.w	r3, r3, #4
 8003d94:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003d96:	4b13      	ldr	r3, [pc, #76]	; (8003de4 <FLASH_SetErrorCode+0x98>)
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00b      	beq.n	8003dba <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003da2:	4b11      	ldr	r3, [pc, #68]	; (8003de8 <FLASH_SetErrorCode+0x9c>)
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	f043 0304 	orr.w	r3, r3, #4
 8003daa:	4a0f      	ldr	r2, [pc, #60]	; (8003de8 <FLASH_SetErrorCode+0x9c>)
 8003dac:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003dae:	4b0d      	ldr	r3, [pc, #52]	; (8003de4 <FLASH_SetErrorCode+0x98>)
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	4a0c      	ldr	r2, [pc, #48]	; (8003de4 <FLASH_SetErrorCode+0x98>)
 8003db4:	f023 0301 	bic.w	r3, r3, #1
 8003db8:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f240 1201 	movw	r2, #257	; 0x101
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d106      	bne.n	8003dd2 <FLASH_SetErrorCode+0x86>
 8003dc4:	4b07      	ldr	r3, [pc, #28]	; (8003de4 <FLASH_SetErrorCode+0x98>)
 8003dc6:	69db      	ldr	r3, [r3, #28]
 8003dc8:	4a06      	ldr	r2, [pc, #24]	; (8003de4 <FLASH_SetErrorCode+0x98>)
 8003dca:	f023 0301 	bic.w	r3, r3, #1
 8003dce:	61d3      	str	r3, [r2, #28]
}  
 8003dd0:	e002      	b.n	8003dd8 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003dd2:	4a04      	ldr	r2, [pc, #16]	; (8003de4 <FLASH_SetErrorCode+0x98>)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	60d3      	str	r3, [r2, #12]
}  
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bc80      	pop	{r7}
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	40022000 	.word	0x40022000
 8003de8:	200002d8 	.word	0x200002d8

08003dec <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003dfe:	4b2f      	ldr	r3, [pc, #188]	; (8003ebc <HAL_FLASHEx_Erase+0xd0>)
 8003e00:	7e1b      	ldrb	r3, [r3, #24]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d101      	bne.n	8003e0a <HAL_FLASHEx_Erase+0x1e>
 8003e06:	2302      	movs	r3, #2
 8003e08:	e053      	b.n	8003eb2 <HAL_FLASHEx_Erase+0xc6>
 8003e0a:	4b2c      	ldr	r3, [pc, #176]	; (8003ebc <HAL_FLASHEx_Erase+0xd0>)
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d116      	bne.n	8003e46 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003e18:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e1c:	f7ff ff50 	bl	8003cc0 <FLASH_WaitForLastOperation>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d141      	bne.n	8003eaa <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8003e26:	2001      	movs	r0, #1
 8003e28:	f000 f84c 	bl	8003ec4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e2c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e30:	f7ff ff46 	bl	8003cc0 <FLASH_WaitForLastOperation>
 8003e34:	4603      	mov	r3, r0
 8003e36:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003e38:	4b21      	ldr	r3, [pc, #132]	; (8003ec0 <HAL_FLASHEx_Erase+0xd4>)
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	4a20      	ldr	r2, [pc, #128]	; (8003ec0 <HAL_FLASHEx_Erase+0xd4>)
 8003e3e:	f023 0304 	bic.w	r3, r3, #4
 8003e42:	6113      	str	r3, [r2, #16]
 8003e44:	e031      	b.n	8003eaa <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003e46:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e4a:	f7ff ff39 	bl	8003cc0 <FLASH_WaitForLastOperation>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d12a      	bne.n	8003eaa <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	f04f 32ff 	mov.w	r2, #4294967295
 8003e5a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	60bb      	str	r3, [r7, #8]
 8003e62:	e019      	b.n	8003e98 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003e64:	68b8      	ldr	r0, [r7, #8]
 8003e66:	f000 f849 	bl	8003efc <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e6a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e6e:	f7ff ff27 	bl	8003cc0 <FLASH_WaitForLastOperation>
 8003e72:	4603      	mov	r3, r0
 8003e74:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003e76:	4b12      	ldr	r3, [pc, #72]	; (8003ec0 <HAL_FLASHEx_Erase+0xd4>)
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	4a11      	ldr	r2, [pc, #68]	; (8003ec0 <HAL_FLASHEx_Erase+0xd4>)
 8003e7c:	f023 0302 	bic.w	r3, r3, #2
 8003e80:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003e82:	7bfb      	ldrb	r3, [r7, #15]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d003      	beq.n	8003e90 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	601a      	str	r2, [r3, #0]
            break;
 8003e8e:	e00c      	b.n	8003eaa <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e96:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	029a      	lsls	r2, r3, #10
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d3dc      	bcc.n	8003e64 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003eaa:	4b04      	ldr	r3, [pc, #16]	; (8003ebc <HAL_FLASHEx_Erase+0xd0>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	761a      	strb	r2, [r3, #24]

  return status;
 8003eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	200002d8 	.word	0x200002d8
 8003ec0:	40022000 	.word	0x40022000

08003ec4 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003ecc:	4b09      	ldr	r3, [pc, #36]	; (8003ef4 <FLASH_MassErase+0x30>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003ed2:	4b09      	ldr	r3, [pc, #36]	; (8003ef8 <FLASH_MassErase+0x34>)
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	4a08      	ldr	r2, [pc, #32]	; (8003ef8 <FLASH_MassErase+0x34>)
 8003ed8:	f043 0304 	orr.w	r3, r3, #4
 8003edc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003ede:	4b06      	ldr	r3, [pc, #24]	; (8003ef8 <FLASH_MassErase+0x34>)
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	4a05      	ldr	r2, [pc, #20]	; (8003ef8 <FLASH_MassErase+0x34>)
 8003ee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ee8:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003eea:	bf00      	nop
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bc80      	pop	{r7}
 8003ef2:	4770      	bx	lr
 8003ef4:	200002d8 	.word	0x200002d8
 8003ef8:	40022000 	.word	0x40022000

08003efc <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003f04:	4b0b      	ldr	r3, [pc, #44]	; (8003f34 <FLASH_PageErase+0x38>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003f0a:	4b0b      	ldr	r3, [pc, #44]	; (8003f38 <FLASH_PageErase+0x3c>)
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	4a0a      	ldr	r2, [pc, #40]	; (8003f38 <FLASH_PageErase+0x3c>)
 8003f10:	f043 0302 	orr.w	r3, r3, #2
 8003f14:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003f16:	4a08      	ldr	r2, [pc, #32]	; (8003f38 <FLASH_PageErase+0x3c>)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003f1c:	4b06      	ldr	r3, [pc, #24]	; (8003f38 <FLASH_PageErase+0x3c>)
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	4a05      	ldr	r2, [pc, #20]	; (8003f38 <FLASH_PageErase+0x3c>)
 8003f22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f26:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bc80      	pop	{r7}
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	200002d8 	.word	0x200002d8
 8003f38:	40022000 	.word	0x40022000

08003f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b08b      	sub	sp, #44	; 0x2c
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f46:	2300      	movs	r3, #0
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f4e:	e169      	b.n	8004224 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003f50:	2201      	movs	r2, #1
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	69fa      	ldr	r2, [r7, #28]
 8003f60:	4013      	ands	r3, r2
 8003f62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	f040 8158 	bne.w	800421e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	4a9a      	ldr	r2, [pc, #616]	; (80041dc <HAL_GPIO_Init+0x2a0>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d05e      	beq.n	8004036 <HAL_GPIO_Init+0xfa>
 8003f78:	4a98      	ldr	r2, [pc, #608]	; (80041dc <HAL_GPIO_Init+0x2a0>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d875      	bhi.n	800406a <HAL_GPIO_Init+0x12e>
 8003f7e:	4a98      	ldr	r2, [pc, #608]	; (80041e0 <HAL_GPIO_Init+0x2a4>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d058      	beq.n	8004036 <HAL_GPIO_Init+0xfa>
 8003f84:	4a96      	ldr	r2, [pc, #600]	; (80041e0 <HAL_GPIO_Init+0x2a4>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d86f      	bhi.n	800406a <HAL_GPIO_Init+0x12e>
 8003f8a:	4a96      	ldr	r2, [pc, #600]	; (80041e4 <HAL_GPIO_Init+0x2a8>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d052      	beq.n	8004036 <HAL_GPIO_Init+0xfa>
 8003f90:	4a94      	ldr	r2, [pc, #592]	; (80041e4 <HAL_GPIO_Init+0x2a8>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d869      	bhi.n	800406a <HAL_GPIO_Init+0x12e>
 8003f96:	4a94      	ldr	r2, [pc, #592]	; (80041e8 <HAL_GPIO_Init+0x2ac>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d04c      	beq.n	8004036 <HAL_GPIO_Init+0xfa>
 8003f9c:	4a92      	ldr	r2, [pc, #584]	; (80041e8 <HAL_GPIO_Init+0x2ac>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d863      	bhi.n	800406a <HAL_GPIO_Init+0x12e>
 8003fa2:	4a92      	ldr	r2, [pc, #584]	; (80041ec <HAL_GPIO_Init+0x2b0>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d046      	beq.n	8004036 <HAL_GPIO_Init+0xfa>
 8003fa8:	4a90      	ldr	r2, [pc, #576]	; (80041ec <HAL_GPIO_Init+0x2b0>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d85d      	bhi.n	800406a <HAL_GPIO_Init+0x12e>
 8003fae:	2b12      	cmp	r3, #18
 8003fb0:	d82a      	bhi.n	8004008 <HAL_GPIO_Init+0xcc>
 8003fb2:	2b12      	cmp	r3, #18
 8003fb4:	d859      	bhi.n	800406a <HAL_GPIO_Init+0x12e>
 8003fb6:	a201      	add	r2, pc, #4	; (adr r2, 8003fbc <HAL_GPIO_Init+0x80>)
 8003fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fbc:	08004037 	.word	0x08004037
 8003fc0:	08004011 	.word	0x08004011
 8003fc4:	08004023 	.word	0x08004023
 8003fc8:	08004065 	.word	0x08004065
 8003fcc:	0800406b 	.word	0x0800406b
 8003fd0:	0800406b 	.word	0x0800406b
 8003fd4:	0800406b 	.word	0x0800406b
 8003fd8:	0800406b 	.word	0x0800406b
 8003fdc:	0800406b 	.word	0x0800406b
 8003fe0:	0800406b 	.word	0x0800406b
 8003fe4:	0800406b 	.word	0x0800406b
 8003fe8:	0800406b 	.word	0x0800406b
 8003fec:	0800406b 	.word	0x0800406b
 8003ff0:	0800406b 	.word	0x0800406b
 8003ff4:	0800406b 	.word	0x0800406b
 8003ff8:	0800406b 	.word	0x0800406b
 8003ffc:	0800406b 	.word	0x0800406b
 8004000:	08004019 	.word	0x08004019
 8004004:	0800402d 	.word	0x0800402d
 8004008:	4a79      	ldr	r2, [pc, #484]	; (80041f0 <HAL_GPIO_Init+0x2b4>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d013      	beq.n	8004036 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800400e:	e02c      	b.n	800406a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	623b      	str	r3, [r7, #32]
          break;
 8004016:	e029      	b.n	800406c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	3304      	adds	r3, #4
 800401e:	623b      	str	r3, [r7, #32]
          break;
 8004020:	e024      	b.n	800406c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	3308      	adds	r3, #8
 8004028:	623b      	str	r3, [r7, #32]
          break;
 800402a:	e01f      	b.n	800406c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	330c      	adds	r3, #12
 8004032:	623b      	str	r3, [r7, #32]
          break;
 8004034:	e01a      	b.n	800406c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d102      	bne.n	8004044 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800403e:	2304      	movs	r3, #4
 8004040:	623b      	str	r3, [r7, #32]
          break;
 8004042:	e013      	b.n	800406c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d105      	bne.n	8004058 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800404c:	2308      	movs	r3, #8
 800404e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	69fa      	ldr	r2, [r7, #28]
 8004054:	611a      	str	r2, [r3, #16]
          break;
 8004056:	e009      	b.n	800406c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004058:	2308      	movs	r3, #8
 800405a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	69fa      	ldr	r2, [r7, #28]
 8004060:	615a      	str	r2, [r3, #20]
          break;
 8004062:	e003      	b.n	800406c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004064:	2300      	movs	r3, #0
 8004066:	623b      	str	r3, [r7, #32]
          break;
 8004068:	e000      	b.n	800406c <HAL_GPIO_Init+0x130>
          break;
 800406a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	2bff      	cmp	r3, #255	; 0xff
 8004070:	d801      	bhi.n	8004076 <HAL_GPIO_Init+0x13a>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	e001      	b.n	800407a <HAL_GPIO_Init+0x13e>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	3304      	adds	r3, #4
 800407a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	2bff      	cmp	r3, #255	; 0xff
 8004080:	d802      	bhi.n	8004088 <HAL_GPIO_Init+0x14c>
 8004082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	e002      	b.n	800408e <HAL_GPIO_Init+0x152>
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	3b08      	subs	r3, #8
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	210f      	movs	r1, #15
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	fa01 f303 	lsl.w	r3, r1, r3
 800409c:	43db      	mvns	r3, r3
 800409e:	401a      	ands	r2, r3
 80040a0:	6a39      	ldr	r1, [r7, #32]
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	fa01 f303 	lsl.w	r3, r1, r3
 80040a8:	431a      	orrs	r2, r3
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f000 80b1 	beq.w	800421e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80040bc:	4b4d      	ldr	r3, [pc, #308]	; (80041f4 <HAL_GPIO_Init+0x2b8>)
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	4a4c      	ldr	r2, [pc, #304]	; (80041f4 <HAL_GPIO_Init+0x2b8>)
 80040c2:	f043 0301 	orr.w	r3, r3, #1
 80040c6:	6193      	str	r3, [r2, #24]
 80040c8:	4b4a      	ldr	r3, [pc, #296]	; (80041f4 <HAL_GPIO_Init+0x2b8>)
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	60bb      	str	r3, [r7, #8]
 80040d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80040d4:	4a48      	ldr	r2, [pc, #288]	; (80041f8 <HAL_GPIO_Init+0x2bc>)
 80040d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d8:	089b      	lsrs	r3, r3, #2
 80040da:	3302      	adds	r3, #2
 80040dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	f003 0303 	and.w	r3, r3, #3
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	220f      	movs	r2, #15
 80040ec:	fa02 f303 	lsl.w	r3, r2, r3
 80040f0:	43db      	mvns	r3, r3
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	4013      	ands	r3, r2
 80040f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a40      	ldr	r2, [pc, #256]	; (80041fc <HAL_GPIO_Init+0x2c0>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d013      	beq.n	8004128 <HAL_GPIO_Init+0x1ec>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a3f      	ldr	r2, [pc, #252]	; (8004200 <HAL_GPIO_Init+0x2c4>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d00d      	beq.n	8004124 <HAL_GPIO_Init+0x1e8>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a3e      	ldr	r2, [pc, #248]	; (8004204 <HAL_GPIO_Init+0x2c8>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d007      	beq.n	8004120 <HAL_GPIO_Init+0x1e4>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a3d      	ldr	r2, [pc, #244]	; (8004208 <HAL_GPIO_Init+0x2cc>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d101      	bne.n	800411c <HAL_GPIO_Init+0x1e0>
 8004118:	2303      	movs	r3, #3
 800411a:	e006      	b.n	800412a <HAL_GPIO_Init+0x1ee>
 800411c:	2304      	movs	r3, #4
 800411e:	e004      	b.n	800412a <HAL_GPIO_Init+0x1ee>
 8004120:	2302      	movs	r3, #2
 8004122:	e002      	b.n	800412a <HAL_GPIO_Init+0x1ee>
 8004124:	2301      	movs	r3, #1
 8004126:	e000      	b.n	800412a <HAL_GPIO_Init+0x1ee>
 8004128:	2300      	movs	r3, #0
 800412a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800412c:	f002 0203 	and.w	r2, r2, #3
 8004130:	0092      	lsls	r2, r2, #2
 8004132:	4093      	lsls	r3, r2
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	4313      	orrs	r3, r2
 8004138:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800413a:	492f      	ldr	r1, [pc, #188]	; (80041f8 <HAL_GPIO_Init+0x2bc>)
 800413c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413e:	089b      	lsrs	r3, r3, #2
 8004140:	3302      	adds	r3, #2
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d006      	beq.n	8004162 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004154:	4b2d      	ldr	r3, [pc, #180]	; (800420c <HAL_GPIO_Init+0x2d0>)
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	492c      	ldr	r1, [pc, #176]	; (800420c <HAL_GPIO_Init+0x2d0>)
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	4313      	orrs	r3, r2
 800415e:	600b      	str	r3, [r1, #0]
 8004160:	e006      	b.n	8004170 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004162:	4b2a      	ldr	r3, [pc, #168]	; (800420c <HAL_GPIO_Init+0x2d0>)
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	43db      	mvns	r3, r3
 800416a:	4928      	ldr	r1, [pc, #160]	; (800420c <HAL_GPIO_Init+0x2d0>)
 800416c:	4013      	ands	r3, r2
 800416e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d006      	beq.n	800418a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800417c:	4b23      	ldr	r3, [pc, #140]	; (800420c <HAL_GPIO_Init+0x2d0>)
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	4922      	ldr	r1, [pc, #136]	; (800420c <HAL_GPIO_Init+0x2d0>)
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	4313      	orrs	r3, r2
 8004186:	604b      	str	r3, [r1, #4]
 8004188:	e006      	b.n	8004198 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800418a:	4b20      	ldr	r3, [pc, #128]	; (800420c <HAL_GPIO_Init+0x2d0>)
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	43db      	mvns	r3, r3
 8004192:	491e      	ldr	r1, [pc, #120]	; (800420c <HAL_GPIO_Init+0x2d0>)
 8004194:	4013      	ands	r3, r2
 8004196:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d006      	beq.n	80041b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80041a4:	4b19      	ldr	r3, [pc, #100]	; (800420c <HAL_GPIO_Init+0x2d0>)
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	4918      	ldr	r1, [pc, #96]	; (800420c <HAL_GPIO_Init+0x2d0>)
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	608b      	str	r3, [r1, #8]
 80041b0:	e006      	b.n	80041c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80041b2:	4b16      	ldr	r3, [pc, #88]	; (800420c <HAL_GPIO_Init+0x2d0>)
 80041b4:	689a      	ldr	r2, [r3, #8]
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	43db      	mvns	r3, r3
 80041ba:	4914      	ldr	r1, [pc, #80]	; (800420c <HAL_GPIO_Init+0x2d0>)
 80041bc:	4013      	ands	r3, r2
 80041be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d021      	beq.n	8004210 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80041cc:	4b0f      	ldr	r3, [pc, #60]	; (800420c <HAL_GPIO_Init+0x2d0>)
 80041ce:	68da      	ldr	r2, [r3, #12]
 80041d0:	490e      	ldr	r1, [pc, #56]	; (800420c <HAL_GPIO_Init+0x2d0>)
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60cb      	str	r3, [r1, #12]
 80041d8:	e021      	b.n	800421e <HAL_GPIO_Init+0x2e2>
 80041da:	bf00      	nop
 80041dc:	10320000 	.word	0x10320000
 80041e0:	10310000 	.word	0x10310000
 80041e4:	10220000 	.word	0x10220000
 80041e8:	10210000 	.word	0x10210000
 80041ec:	10120000 	.word	0x10120000
 80041f0:	10110000 	.word	0x10110000
 80041f4:	40021000 	.word	0x40021000
 80041f8:	40010000 	.word	0x40010000
 80041fc:	40010800 	.word	0x40010800
 8004200:	40010c00 	.word	0x40010c00
 8004204:	40011000 	.word	0x40011000
 8004208:	40011400 	.word	0x40011400
 800420c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004210:	4b0b      	ldr	r3, [pc, #44]	; (8004240 <HAL_GPIO_Init+0x304>)
 8004212:	68da      	ldr	r2, [r3, #12]
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	43db      	mvns	r3, r3
 8004218:	4909      	ldr	r1, [pc, #36]	; (8004240 <HAL_GPIO_Init+0x304>)
 800421a:	4013      	ands	r3, r2
 800421c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	3301      	adds	r3, #1
 8004222:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	fa22 f303 	lsr.w	r3, r2, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	f47f ae8e 	bne.w	8003f50 <HAL_GPIO_Init+0x14>
  }
}
 8004234:	bf00      	nop
 8004236:	bf00      	nop
 8004238:	372c      	adds	r7, #44	; 0x2c
 800423a:	46bd      	mov	sp, r7
 800423c:	bc80      	pop	{r7}
 800423e:	4770      	bx	lr
 8004240:	40010400 	.word	0x40010400

08004244 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	460b      	mov	r3, r1
 800424e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689a      	ldr	r2, [r3, #8]
 8004254:	887b      	ldrh	r3, [r7, #2]
 8004256:	4013      	ands	r3, r2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d002      	beq.n	8004262 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800425c:	2301      	movs	r3, #1
 800425e:	73fb      	strb	r3, [r7, #15]
 8004260:	e001      	b.n	8004266 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004262:	2300      	movs	r3, #0
 8004264:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004266:	7bfb      	ldrb	r3, [r7, #15]
}
 8004268:	4618      	mov	r0, r3
 800426a:	3714      	adds	r7, #20
 800426c:	46bd      	mov	sp, r7
 800426e:	bc80      	pop	{r7}
 8004270:	4770      	bx	lr

08004272 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004272:	b480      	push	{r7}
 8004274:	b083      	sub	sp, #12
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
 800427a:	460b      	mov	r3, r1
 800427c:	807b      	strh	r3, [r7, #2]
 800427e:	4613      	mov	r3, r2
 8004280:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004282:	787b      	ldrb	r3, [r7, #1]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d003      	beq.n	8004290 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004288:	887a      	ldrh	r2, [r7, #2]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800428e:	e003      	b.n	8004298 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004290:	887b      	ldrh	r3, [r7, #2]
 8004292:	041a      	lsls	r2, r3, #16
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	611a      	str	r2, [r3, #16]
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	bc80      	pop	{r7}
 80042a0:	4770      	bx	lr

080042a2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b085      	sub	sp, #20
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
 80042aa:	460b      	mov	r3, r1
 80042ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80042b4:	887a      	ldrh	r2, [r7, #2]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	4013      	ands	r3, r2
 80042ba:	041a      	lsls	r2, r3, #16
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	43d9      	mvns	r1, r3
 80042c0:	887b      	ldrh	r3, [r7, #2]
 80042c2:	400b      	ands	r3, r1
 80042c4:	431a      	orrs	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	611a      	str	r2, [r3, #16]
}
 80042ca:	bf00      	nop
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bc80      	pop	{r7}
 80042d2:	4770      	bx	lr

080042d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	4603      	mov	r3, r0
 80042dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80042de:	4b08      	ldr	r3, [pc, #32]	; (8004300 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042e0:	695a      	ldr	r2, [r3, #20]
 80042e2:	88fb      	ldrh	r3, [r7, #6]
 80042e4:	4013      	ands	r3, r2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d006      	beq.n	80042f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80042ea:	4a05      	ldr	r2, [pc, #20]	; (8004300 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042ec:	88fb      	ldrh	r3, [r7, #6]
 80042ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80042f0:	88fb      	ldrh	r3, [r7, #6]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fd fff0 	bl	80022d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80042f8:	bf00      	nop
 80042fa:	3708      	adds	r7, #8
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	40010400 	.word	0x40010400

08004304 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e12b      	b.n	800456e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d106      	bne.n	8004330 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7fd f960 	bl	80015f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2224      	movs	r2, #36	; 0x24
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 0201 	bic.w	r2, r2, #1
 8004346:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004356:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004366:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004368:	f000 ffea 	bl	8005340 <HAL_RCC_GetPCLK1Freq>
 800436c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	4a81      	ldr	r2, [pc, #516]	; (8004578 <HAL_I2C_Init+0x274>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d807      	bhi.n	8004388 <HAL_I2C_Init+0x84>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	4a80      	ldr	r2, [pc, #512]	; (800457c <HAL_I2C_Init+0x278>)
 800437c:	4293      	cmp	r3, r2
 800437e:	bf94      	ite	ls
 8004380:	2301      	movls	r3, #1
 8004382:	2300      	movhi	r3, #0
 8004384:	b2db      	uxtb	r3, r3
 8004386:	e006      	b.n	8004396 <HAL_I2C_Init+0x92>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	4a7d      	ldr	r2, [pc, #500]	; (8004580 <HAL_I2C_Init+0x27c>)
 800438c:	4293      	cmp	r3, r2
 800438e:	bf94      	ite	ls
 8004390:	2301      	movls	r3, #1
 8004392:	2300      	movhi	r3, #0
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e0e7      	b.n	800456e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	4a78      	ldr	r2, [pc, #480]	; (8004584 <HAL_I2C_Init+0x280>)
 80043a2:	fba2 2303 	umull	r2, r3, r2, r3
 80043a6:	0c9b      	lsrs	r3, r3, #18
 80043a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	4a6a      	ldr	r2, [pc, #424]	; (8004578 <HAL_I2C_Init+0x274>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d802      	bhi.n	80043d8 <HAL_I2C_Init+0xd4>
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	3301      	adds	r3, #1
 80043d6:	e009      	b.n	80043ec <HAL_I2C_Init+0xe8>
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80043de:	fb02 f303 	mul.w	r3, r2, r3
 80043e2:	4a69      	ldr	r2, [pc, #420]	; (8004588 <HAL_I2C_Init+0x284>)
 80043e4:	fba2 2303 	umull	r2, r3, r2, r3
 80043e8:	099b      	lsrs	r3, r3, #6
 80043ea:	3301      	adds	r3, #1
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6812      	ldr	r2, [r2, #0]
 80043f0:	430b      	orrs	r3, r1
 80043f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	69db      	ldr	r3, [r3, #28]
 80043fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80043fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	495c      	ldr	r1, [pc, #368]	; (8004578 <HAL_I2C_Init+0x274>)
 8004408:	428b      	cmp	r3, r1
 800440a:	d819      	bhi.n	8004440 <HAL_I2C_Init+0x13c>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	1e59      	subs	r1, r3, #1
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	fbb1 f3f3 	udiv	r3, r1, r3
 800441a:	1c59      	adds	r1, r3, #1
 800441c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004420:	400b      	ands	r3, r1
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00a      	beq.n	800443c <HAL_I2C_Init+0x138>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	1e59      	subs	r1, r3, #1
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	fbb1 f3f3 	udiv	r3, r1, r3
 8004434:	3301      	adds	r3, #1
 8004436:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800443a:	e051      	b.n	80044e0 <HAL_I2C_Init+0x1dc>
 800443c:	2304      	movs	r3, #4
 800443e:	e04f      	b.n	80044e0 <HAL_I2C_Init+0x1dc>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d111      	bne.n	800446c <HAL_I2C_Init+0x168>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	1e58      	subs	r0, r3, #1
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6859      	ldr	r1, [r3, #4]
 8004450:	460b      	mov	r3, r1
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	440b      	add	r3, r1
 8004456:	fbb0 f3f3 	udiv	r3, r0, r3
 800445a:	3301      	adds	r3, #1
 800445c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004460:	2b00      	cmp	r3, #0
 8004462:	bf0c      	ite	eq
 8004464:	2301      	moveq	r3, #1
 8004466:	2300      	movne	r3, #0
 8004468:	b2db      	uxtb	r3, r3
 800446a:	e012      	b.n	8004492 <HAL_I2C_Init+0x18e>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	1e58      	subs	r0, r3, #1
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6859      	ldr	r1, [r3, #4]
 8004474:	460b      	mov	r3, r1
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	440b      	add	r3, r1
 800447a:	0099      	lsls	r1, r3, #2
 800447c:	440b      	add	r3, r1
 800447e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004482:	3301      	adds	r3, #1
 8004484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004488:	2b00      	cmp	r3, #0
 800448a:	bf0c      	ite	eq
 800448c:	2301      	moveq	r3, #1
 800448e:	2300      	movne	r3, #0
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <HAL_I2C_Init+0x196>
 8004496:	2301      	movs	r3, #1
 8004498:	e022      	b.n	80044e0 <HAL_I2C_Init+0x1dc>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10e      	bne.n	80044c0 <HAL_I2C_Init+0x1bc>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	1e58      	subs	r0, r3, #1
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6859      	ldr	r1, [r3, #4]
 80044aa:	460b      	mov	r3, r1
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	440b      	add	r3, r1
 80044b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80044b4:	3301      	adds	r3, #1
 80044b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044be:	e00f      	b.n	80044e0 <HAL_I2C_Init+0x1dc>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	1e58      	subs	r0, r3, #1
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6859      	ldr	r1, [r3, #4]
 80044c8:	460b      	mov	r3, r1
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	440b      	add	r3, r1
 80044ce:	0099      	lsls	r1, r3, #2
 80044d0:	440b      	add	r3, r1
 80044d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80044d6:	3301      	adds	r3, #1
 80044d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044e0:	6879      	ldr	r1, [r7, #4]
 80044e2:	6809      	ldr	r1, [r1, #0]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	69da      	ldr	r2, [r3, #28]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	431a      	orrs	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800450e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	6911      	ldr	r1, [r2, #16]
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	68d2      	ldr	r2, [r2, #12]
 800451a:	4311      	orrs	r1, r2
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	6812      	ldr	r2, [r2, #0]
 8004520:	430b      	orrs	r3, r1
 8004522:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	695a      	ldr	r2, [r3, #20]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	431a      	orrs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	430a      	orrs	r2, r1
 800453e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f042 0201 	orr.w	r2, r2, #1
 800454e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2220      	movs	r2, #32
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	000186a0 	.word	0x000186a0
 800457c:	001e847f 	.word	0x001e847f
 8004580:	003d08ff 	.word	0x003d08ff
 8004584:	431bde83 	.word	0x431bde83
 8004588:	10624dd3 	.word	0x10624dd3

0800458c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b088      	sub	sp, #32
 8004590:	af02      	add	r7, sp, #8
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	607a      	str	r2, [r7, #4]
 8004596:	461a      	mov	r2, r3
 8004598:	460b      	mov	r3, r1
 800459a:	817b      	strh	r3, [r7, #10]
 800459c:	4613      	mov	r3, r2
 800459e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045a0:	f7ff f990 	bl	80038c4 <HAL_GetTick>
 80045a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b20      	cmp	r3, #32
 80045b0:	f040 80e0 	bne.w	8004774 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	2319      	movs	r3, #25
 80045ba:	2201      	movs	r2, #1
 80045bc:	4970      	ldr	r1, [pc, #448]	; (8004780 <HAL_I2C_Master_Transmit+0x1f4>)
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f000 f964 	bl	800488c <I2C_WaitOnFlagUntilTimeout>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d001      	beq.n	80045ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80045ca:	2302      	movs	r3, #2
 80045cc:	e0d3      	b.n	8004776 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d101      	bne.n	80045dc <HAL_I2C_Master_Transmit+0x50>
 80045d8:	2302      	movs	r3, #2
 80045da:	e0cc      	b.n	8004776 <HAL_I2C_Master_Transmit+0x1ea>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d007      	beq.n	8004602 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f042 0201 	orr.w	r2, r2, #1
 8004600:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004610:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2221      	movs	r2, #33	; 0x21
 8004616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2210      	movs	r2, #16
 800461e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	893a      	ldrh	r2, [r7, #8]
 8004632:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004638:	b29a      	uxth	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	4a50      	ldr	r2, [pc, #320]	; (8004784 <HAL_I2C_Master_Transmit+0x1f8>)
 8004642:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004644:	8979      	ldrh	r1, [r7, #10]
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	6a3a      	ldr	r2, [r7, #32]
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f000 f89c 	bl	8004788 <I2C_MasterRequestWrite>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e08d      	b.n	8004776 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800465a:	2300      	movs	r3, #0
 800465c:	613b      	str	r3, [r7, #16]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	613b      	str	r3, [r7, #16]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	613b      	str	r3, [r7, #16]
 800466e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004670:	e066      	b.n	8004740 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	6a39      	ldr	r1, [r7, #32]
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f000 f9de 	bl	8004a38 <I2C_WaitOnTXEFlagUntilTimeout>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00d      	beq.n	800469e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	2b04      	cmp	r3, #4
 8004688:	d107      	bne.n	800469a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004698:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e06b      	b.n	8004776 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a2:	781a      	ldrb	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ae:	1c5a      	adds	r2, r3, #1
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	3b01      	subs	r3, #1
 80046bc:	b29a      	uxth	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b04      	cmp	r3, #4
 80046da:	d11b      	bne.n	8004714 <HAL_I2C_Master_Transmit+0x188>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d017      	beq.n	8004714 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e8:	781a      	ldrb	r2, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	1c5a      	adds	r2, r3, #1
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046fe:	b29b      	uxth	r3, r3
 8004700:	3b01      	subs	r3, #1
 8004702:	b29a      	uxth	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800470c:	3b01      	subs	r3, #1
 800470e:	b29a      	uxth	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	6a39      	ldr	r1, [r7, #32]
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f000 f9ce 	bl	8004aba <I2C_WaitOnBTFFlagUntilTimeout>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00d      	beq.n	8004740 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004728:	2b04      	cmp	r3, #4
 800472a:	d107      	bne.n	800473c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800473a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e01a      	b.n	8004776 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004744:	2b00      	cmp	r3, #0
 8004746:	d194      	bne.n	8004672 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004756:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2220      	movs	r2, #32
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004770:	2300      	movs	r3, #0
 8004772:	e000      	b.n	8004776 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004774:	2302      	movs	r3, #2
  }
}
 8004776:	4618      	mov	r0, r3
 8004778:	3718      	adds	r7, #24
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	00100002 	.word	0x00100002
 8004784:	ffff0000 	.word	0xffff0000

08004788 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b088      	sub	sp, #32
 800478c:	af02      	add	r7, sp, #8
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	607a      	str	r2, [r7, #4]
 8004792:	603b      	str	r3, [r7, #0]
 8004794:	460b      	mov	r3, r1
 8004796:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	d006      	beq.n	80047b2 <I2C_MasterRequestWrite+0x2a>
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d003      	beq.n	80047b2 <I2C_MasterRequestWrite+0x2a>
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047b0:	d108      	bne.n	80047c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	e00b      	b.n	80047dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c8:	2b12      	cmp	r3, #18
 80047ca:	d107      	bne.n	80047dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	9300      	str	r3, [sp, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 f84f 	bl	800488c <I2C_WaitOnFlagUntilTimeout>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00d      	beq.n	8004810 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004802:	d103      	bne.n	800480c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f44f 7200 	mov.w	r2, #512	; 0x200
 800480a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e035      	b.n	800487c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004818:	d108      	bne.n	800482c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800481a:	897b      	ldrh	r3, [r7, #10]
 800481c:	b2db      	uxtb	r3, r3
 800481e:	461a      	mov	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004828:	611a      	str	r2, [r3, #16]
 800482a:	e01b      	b.n	8004864 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800482c:	897b      	ldrh	r3, [r7, #10]
 800482e:	11db      	asrs	r3, r3, #7
 8004830:	b2db      	uxtb	r3, r3
 8004832:	f003 0306 	and.w	r3, r3, #6
 8004836:	b2db      	uxtb	r3, r3
 8004838:	f063 030f 	orn	r3, r3, #15
 800483c:	b2da      	uxtb	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	490e      	ldr	r1, [pc, #56]	; (8004884 <I2C_MasterRequestWrite+0xfc>)
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f000 f875 	bl	800493a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e010      	b.n	800487c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800485a:	897b      	ldrh	r3, [r7, #10]
 800485c:	b2da      	uxtb	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	4907      	ldr	r1, [pc, #28]	; (8004888 <I2C_MasterRequestWrite+0x100>)
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f000 f865 	bl	800493a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e000      	b.n	800487c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3718      	adds	r7, #24
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	00010008 	.word	0x00010008
 8004888:	00010002 	.word	0x00010002

0800488c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	603b      	str	r3, [r7, #0]
 8004898:	4613      	mov	r3, r2
 800489a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800489c:	e025      	b.n	80048ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a4:	d021      	beq.n	80048ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048a6:	f7ff f80d 	bl	80038c4 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d302      	bcc.n	80048bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d116      	bne.n	80048ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2220      	movs	r2, #32
 80048c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	f043 0220 	orr.w	r2, r3, #32
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e023      	b.n	8004932 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	0c1b      	lsrs	r3, r3, #16
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d10d      	bne.n	8004910 <I2C_WaitOnFlagUntilTimeout+0x84>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	43da      	mvns	r2, r3
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	4013      	ands	r3, r2
 8004900:	b29b      	uxth	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	bf0c      	ite	eq
 8004906:	2301      	moveq	r3, #1
 8004908:	2300      	movne	r3, #0
 800490a:	b2db      	uxtb	r3, r3
 800490c:	461a      	mov	r2, r3
 800490e:	e00c      	b.n	800492a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	43da      	mvns	r2, r3
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	4013      	ands	r3, r2
 800491c:	b29b      	uxth	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	bf0c      	ite	eq
 8004922:	2301      	moveq	r3, #1
 8004924:	2300      	movne	r3, #0
 8004926:	b2db      	uxtb	r3, r3
 8004928:	461a      	mov	r2, r3
 800492a:	79fb      	ldrb	r3, [r7, #7]
 800492c:	429a      	cmp	r2, r3
 800492e:	d0b6      	beq.n	800489e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b084      	sub	sp, #16
 800493e:	af00      	add	r7, sp, #0
 8004940:	60f8      	str	r0, [r7, #12]
 8004942:	60b9      	str	r1, [r7, #8]
 8004944:	607a      	str	r2, [r7, #4]
 8004946:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004948:	e051      	b.n	80049ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004958:	d123      	bne.n	80049a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004968:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004972:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2220      	movs	r2, #32
 800497e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	f043 0204 	orr.w	r2, r3, #4
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e046      	b.n	8004a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a8:	d021      	beq.n	80049ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049aa:	f7fe ff8b 	bl	80038c4 <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d302      	bcc.n	80049c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d116      	bne.n	80049ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2220      	movs	r2, #32
 80049ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	f043 0220 	orr.w	r2, r3, #32
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e020      	b.n	8004a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	0c1b      	lsrs	r3, r3, #16
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d10c      	bne.n	8004a12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	43da      	mvns	r2, r3
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	4013      	ands	r3, r2
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	bf14      	ite	ne
 8004a0a:	2301      	movne	r3, #1
 8004a0c:	2300      	moveq	r3, #0
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	e00b      	b.n	8004a2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	43da      	mvns	r2, r3
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	bf14      	ite	ne
 8004a24:	2301      	movne	r3, #1
 8004a26:	2300      	moveq	r3, #0
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d18d      	bne.n	800494a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a44:	e02d      	b.n	8004aa2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f000 f878 	bl	8004b3c <I2C_IsAcknowledgeFailed>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d001      	beq.n	8004a56 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e02d      	b.n	8004ab2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a5c:	d021      	beq.n	8004aa2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a5e:	f7fe ff31 	bl	80038c4 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d302      	bcc.n	8004a74 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d116      	bne.n	8004aa2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8e:	f043 0220 	orr.w	r2, r3, #32
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e007      	b.n	8004ab2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aac:	2b80      	cmp	r3, #128	; 0x80
 8004aae:	d1ca      	bne.n	8004a46 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b084      	sub	sp, #16
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	60f8      	str	r0, [r7, #12]
 8004ac2:	60b9      	str	r1, [r7, #8]
 8004ac4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ac6:	e02d      	b.n	8004b24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f000 f837 	bl	8004b3c <I2C_IsAcknowledgeFailed>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d001      	beq.n	8004ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e02d      	b.n	8004b34 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ade:	d021      	beq.n	8004b24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ae0:	f7fe fef0 	bl	80038c4 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d302      	bcc.n	8004af6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d116      	bne.n	8004b24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2220      	movs	r2, #32
 8004b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b10:	f043 0220 	orr.w	r2, r3, #32
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e007      	b.n	8004b34 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	f003 0304 	and.w	r3, r3, #4
 8004b2e:	2b04      	cmp	r3, #4
 8004b30:	d1ca      	bne.n	8004ac8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b52:	d11b      	bne.n	8004b8c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b5c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2220      	movs	r2, #32
 8004b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b78:	f043 0204 	orr.w	r2, r3, #4
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e000      	b.n	8004b8e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	370c      	adds	r7, #12
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bc80      	pop	{r7}
 8004b96:	4770      	bx	lr

08004b98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d101      	bne.n	8004baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e272      	b.n	8005090 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f000 8087 	beq.w	8004cc6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004bb8:	4b92      	ldr	r3, [pc, #584]	; (8004e04 <HAL_RCC_OscConfig+0x26c>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f003 030c 	and.w	r3, r3, #12
 8004bc0:	2b04      	cmp	r3, #4
 8004bc2:	d00c      	beq.n	8004bde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004bc4:	4b8f      	ldr	r3, [pc, #572]	; (8004e04 <HAL_RCC_OscConfig+0x26c>)
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f003 030c 	and.w	r3, r3, #12
 8004bcc:	2b08      	cmp	r3, #8
 8004bce:	d112      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x5e>
 8004bd0:	4b8c      	ldr	r3, [pc, #560]	; (8004e04 <HAL_RCC_OscConfig+0x26c>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bdc:	d10b      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bde:	4b89      	ldr	r3, [pc, #548]	; (8004e04 <HAL_RCC_OscConfig+0x26c>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d06c      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x12c>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d168      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e24c      	b.n	8005090 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bfe:	d106      	bne.n	8004c0e <HAL_RCC_OscConfig+0x76>
 8004c00:	4b80      	ldr	r3, [pc, #512]	; (8004e04 <HAL_RCC_OscConfig+0x26c>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a7f      	ldr	r2, [pc, #508]	; (8004e04 <HAL_RCC_OscConfig+0x26c>)
 8004c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c0a:	6013      	str	r3, [r2, #0]
 8004c0c:	e02e      	b.n	8004c6c <HAL_RCC_OscConfig+0xd4>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10c      	bne.n	8004c30 <HAL_RCC_OscConfig+0x98>
 8004c16:	4b7b      	ldr	r3, [pc, #492]	; (8004e04 <HAL_RCC_OscConfig+0x26c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a7a      	ldr	r2, [pc, #488]	; (8004e04 <HAL_RCC_OscConfig+0x26c>)
 8004c1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c20:	6013      	str	r3, [r2, #0]
 8004c22:	4b78      	ldr	r3, [pc, #480]	; (8004e04 <HAL_RCC_OscConfig+0x26c>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a77      	ldr	r2, [pc, #476]	; (8004e04 <HAL_RCC_OscConfig+0x26c>)
 8004c28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c2c:	6013      	str	r3, [r2, #0]
 8004c2e:	e01d      	b.n	8004c6c <HAL_RCC_OscConfig+0xd4>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c38:	d10c      	bne.n	8004c54 <HAL_RCC_OscConfig+0xbc>
 8004c3a:	4b72      	ldr	r3, [pc, #456]	; (8004e04 <HAL_RCC_OscConfig+0x26c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a71      	ldr	r2, [pc, #452]	; (8004e04 <HAL_RCC_OscConfig+0x26c>)
 8004c40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c44:	6013      	str	r3, [r2, #0]
 8004c46:	4b6f      	ldr	r3, [pc, #444]	; (8004e04 <HAL_RCC_OscConfig+0x26c>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a6e      	ldr	r2, [pc, #440]	; (8004e04 <HAL_RCC_OscConfig+0x26c>)
 8004c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c50:	6013      	str	r3, [r2, #0]
 8004c52:	e00b      	b.n	8004c6c <HAL_RCC_OscConfig+0xd4>
 8004c54:	4b6b      	ldr	r3, [pc, #428]	; (8004e04 <HAL_RCC_OscConfig+0x26c>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a6a      	ldr	r2, [pc, #424]	; (8004e04 <HAL_RCC_OscConfig+0x26c>)
 8004c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c5e:	6013      	str	r3, [r2, #0]
 8004c60:	4b68      	ldr	r3, [pc, #416]	; (8004e04 <HAL_RCC_OscConfig+0x26c>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a67      	ldr	r2, [pc, #412]	; (8004e04 <HAL_RCC_OscConfig+0x26c>)
 8004c66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d013      	beq.n	8004c9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c74:	f7fe fe26 	bl	80038c4 <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c7c:	f7fe fe22 	bl	80038c4 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b64      	cmp	r3, #100	; 0x64
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e200      	b.n	8005090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c8e:	4b5d      	ldr	r3, [pc, #372]	; (8004e04 <HAL_RCC_OscConfig+0x26c>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d0f0      	beq.n	8004c7c <HAL_RCC_OscConfig+0xe4>
 8004c9a:	e014      	b.n	8004cc6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c9c:	f7fe fe12 	bl	80038c4 <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ca4:	f7fe fe0e 	bl	80038c4 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b64      	cmp	r3, #100	; 0x64
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e1ec      	b.n	8005090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cb6:	4b53      	ldr	r3, [pc, #332]	; (8004e04 <HAL_RCC_OscConfig+0x26c>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1f0      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x10c>
 8004cc2:	e000      	b.n	8004cc6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d063      	beq.n	8004d9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cd2:	4b4c      	ldr	r3, [pc, #304]	; (8004e04 <HAL_RCC_OscConfig+0x26c>)
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f003 030c 	and.w	r3, r3, #12
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00b      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004cde:	4b49      	ldr	r3, [pc, #292]	; (8004e04 <HAL_RCC_OscConfig+0x26c>)
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f003 030c 	and.w	r3, r3, #12
 8004ce6:	2b08      	cmp	r3, #8
 8004ce8:	d11c      	bne.n	8004d24 <HAL_RCC_OscConfig+0x18c>
 8004cea:	4b46      	ldr	r3, [pc, #280]	; (8004e04 <HAL_RCC_OscConfig+0x26c>)
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d116      	bne.n	8004d24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cf6:	4b43      	ldr	r3, [pc, #268]	; (8004e04 <HAL_RCC_OscConfig+0x26c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d005      	beq.n	8004d0e <HAL_RCC_OscConfig+0x176>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d001      	beq.n	8004d0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e1c0      	b.n	8005090 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d0e:	4b3d      	ldr	r3, [pc, #244]	; (8004e04 <HAL_RCC_OscConfig+0x26c>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	4939      	ldr	r1, [pc, #228]	; (8004e04 <HAL_RCC_OscConfig+0x26c>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d22:	e03a      	b.n	8004d9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d020      	beq.n	8004d6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d2c:	4b36      	ldr	r3, [pc, #216]	; (8004e08 <HAL_RCC_OscConfig+0x270>)
 8004d2e:	2201      	movs	r2, #1
 8004d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d32:	f7fe fdc7 	bl	80038c4 <HAL_GetTick>
 8004d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d38:	e008      	b.n	8004d4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d3a:	f7fe fdc3 	bl	80038c4 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d901      	bls.n	8004d4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e1a1      	b.n	8005090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d4c:	4b2d      	ldr	r3, [pc, #180]	; (8004e04 <HAL_RCC_OscConfig+0x26c>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0f0      	beq.n	8004d3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d58:	4b2a      	ldr	r3, [pc, #168]	; (8004e04 <HAL_RCC_OscConfig+0x26c>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	00db      	lsls	r3, r3, #3
 8004d66:	4927      	ldr	r1, [pc, #156]	; (8004e04 <HAL_RCC_OscConfig+0x26c>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	600b      	str	r3, [r1, #0]
 8004d6c:	e015      	b.n	8004d9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d6e:	4b26      	ldr	r3, [pc, #152]	; (8004e08 <HAL_RCC_OscConfig+0x270>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d74:	f7fe fda6 	bl	80038c4 <HAL_GetTick>
 8004d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d7a:	e008      	b.n	8004d8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d7c:	f7fe fda2 	bl	80038c4 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e180      	b.n	8005090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d8e:	4b1d      	ldr	r3, [pc, #116]	; (8004e04 <HAL_RCC_OscConfig+0x26c>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1f0      	bne.n	8004d7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0308 	and.w	r3, r3, #8
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d03a      	beq.n	8004e1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d019      	beq.n	8004de2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dae:	4b17      	ldr	r3, [pc, #92]	; (8004e0c <HAL_RCC_OscConfig+0x274>)
 8004db0:	2201      	movs	r2, #1
 8004db2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004db4:	f7fe fd86 	bl	80038c4 <HAL_GetTick>
 8004db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dba:	e008      	b.n	8004dce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dbc:	f7fe fd82 	bl	80038c4 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d901      	bls.n	8004dce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e160      	b.n	8005090 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dce:	4b0d      	ldr	r3, [pc, #52]	; (8004e04 <HAL_RCC_OscConfig+0x26c>)
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d0f0      	beq.n	8004dbc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004dda:	2001      	movs	r0, #1
 8004ddc:	f000 fac4 	bl	8005368 <RCC_Delay>
 8004de0:	e01c      	b.n	8004e1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004de2:	4b0a      	ldr	r3, [pc, #40]	; (8004e0c <HAL_RCC_OscConfig+0x274>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004de8:	f7fe fd6c 	bl	80038c4 <HAL_GetTick>
 8004dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dee:	e00f      	b.n	8004e10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004df0:	f7fe fd68 	bl	80038c4 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d908      	bls.n	8004e10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e146      	b.n	8005090 <HAL_RCC_OscConfig+0x4f8>
 8004e02:	bf00      	nop
 8004e04:	40021000 	.word	0x40021000
 8004e08:	42420000 	.word	0x42420000
 8004e0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e10:	4b92      	ldr	r3, [pc, #584]	; (800505c <HAL_RCC_OscConfig+0x4c4>)
 8004e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e14:	f003 0302 	and.w	r3, r3, #2
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1e9      	bne.n	8004df0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0304 	and.w	r3, r3, #4
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 80a6 	beq.w	8004f76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e2e:	4b8b      	ldr	r3, [pc, #556]	; (800505c <HAL_RCC_OscConfig+0x4c4>)
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10d      	bne.n	8004e56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e3a:	4b88      	ldr	r3, [pc, #544]	; (800505c <HAL_RCC_OscConfig+0x4c4>)
 8004e3c:	69db      	ldr	r3, [r3, #28]
 8004e3e:	4a87      	ldr	r2, [pc, #540]	; (800505c <HAL_RCC_OscConfig+0x4c4>)
 8004e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e44:	61d3      	str	r3, [r2, #28]
 8004e46:	4b85      	ldr	r3, [pc, #532]	; (800505c <HAL_RCC_OscConfig+0x4c4>)
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e4e:	60bb      	str	r3, [r7, #8]
 8004e50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e52:	2301      	movs	r3, #1
 8004e54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e56:	4b82      	ldr	r3, [pc, #520]	; (8005060 <HAL_RCC_OscConfig+0x4c8>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d118      	bne.n	8004e94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e62:	4b7f      	ldr	r3, [pc, #508]	; (8005060 <HAL_RCC_OscConfig+0x4c8>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a7e      	ldr	r2, [pc, #504]	; (8005060 <HAL_RCC_OscConfig+0x4c8>)
 8004e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e6e:	f7fe fd29 	bl	80038c4 <HAL_GetTick>
 8004e72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e74:	e008      	b.n	8004e88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e76:	f7fe fd25 	bl	80038c4 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	2b64      	cmp	r3, #100	; 0x64
 8004e82:	d901      	bls.n	8004e88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e103      	b.n	8005090 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e88:	4b75      	ldr	r3, [pc, #468]	; (8005060 <HAL_RCC_OscConfig+0x4c8>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d0f0      	beq.n	8004e76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d106      	bne.n	8004eaa <HAL_RCC_OscConfig+0x312>
 8004e9c:	4b6f      	ldr	r3, [pc, #444]	; (800505c <HAL_RCC_OscConfig+0x4c4>)
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	4a6e      	ldr	r2, [pc, #440]	; (800505c <HAL_RCC_OscConfig+0x4c4>)
 8004ea2:	f043 0301 	orr.w	r3, r3, #1
 8004ea6:	6213      	str	r3, [r2, #32]
 8004ea8:	e02d      	b.n	8004f06 <HAL_RCC_OscConfig+0x36e>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10c      	bne.n	8004ecc <HAL_RCC_OscConfig+0x334>
 8004eb2:	4b6a      	ldr	r3, [pc, #424]	; (800505c <HAL_RCC_OscConfig+0x4c4>)
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	4a69      	ldr	r2, [pc, #420]	; (800505c <HAL_RCC_OscConfig+0x4c4>)
 8004eb8:	f023 0301 	bic.w	r3, r3, #1
 8004ebc:	6213      	str	r3, [r2, #32]
 8004ebe:	4b67      	ldr	r3, [pc, #412]	; (800505c <HAL_RCC_OscConfig+0x4c4>)
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	4a66      	ldr	r2, [pc, #408]	; (800505c <HAL_RCC_OscConfig+0x4c4>)
 8004ec4:	f023 0304 	bic.w	r3, r3, #4
 8004ec8:	6213      	str	r3, [r2, #32]
 8004eca:	e01c      	b.n	8004f06 <HAL_RCC_OscConfig+0x36e>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	2b05      	cmp	r3, #5
 8004ed2:	d10c      	bne.n	8004eee <HAL_RCC_OscConfig+0x356>
 8004ed4:	4b61      	ldr	r3, [pc, #388]	; (800505c <HAL_RCC_OscConfig+0x4c4>)
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	4a60      	ldr	r2, [pc, #384]	; (800505c <HAL_RCC_OscConfig+0x4c4>)
 8004eda:	f043 0304 	orr.w	r3, r3, #4
 8004ede:	6213      	str	r3, [r2, #32]
 8004ee0:	4b5e      	ldr	r3, [pc, #376]	; (800505c <HAL_RCC_OscConfig+0x4c4>)
 8004ee2:	6a1b      	ldr	r3, [r3, #32]
 8004ee4:	4a5d      	ldr	r2, [pc, #372]	; (800505c <HAL_RCC_OscConfig+0x4c4>)
 8004ee6:	f043 0301 	orr.w	r3, r3, #1
 8004eea:	6213      	str	r3, [r2, #32]
 8004eec:	e00b      	b.n	8004f06 <HAL_RCC_OscConfig+0x36e>
 8004eee:	4b5b      	ldr	r3, [pc, #364]	; (800505c <HAL_RCC_OscConfig+0x4c4>)
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	4a5a      	ldr	r2, [pc, #360]	; (800505c <HAL_RCC_OscConfig+0x4c4>)
 8004ef4:	f023 0301 	bic.w	r3, r3, #1
 8004ef8:	6213      	str	r3, [r2, #32]
 8004efa:	4b58      	ldr	r3, [pc, #352]	; (800505c <HAL_RCC_OscConfig+0x4c4>)
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	4a57      	ldr	r2, [pc, #348]	; (800505c <HAL_RCC_OscConfig+0x4c4>)
 8004f00:	f023 0304 	bic.w	r3, r3, #4
 8004f04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d015      	beq.n	8004f3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f0e:	f7fe fcd9 	bl	80038c4 <HAL_GetTick>
 8004f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f14:	e00a      	b.n	8004f2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f16:	f7fe fcd5 	bl	80038c4 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d901      	bls.n	8004f2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e0b1      	b.n	8005090 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f2c:	4b4b      	ldr	r3, [pc, #300]	; (800505c <HAL_RCC_OscConfig+0x4c4>)
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d0ee      	beq.n	8004f16 <HAL_RCC_OscConfig+0x37e>
 8004f38:	e014      	b.n	8004f64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f3a:	f7fe fcc3 	bl	80038c4 <HAL_GetTick>
 8004f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f40:	e00a      	b.n	8004f58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f42:	f7fe fcbf 	bl	80038c4 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d901      	bls.n	8004f58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e09b      	b.n	8005090 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f58:	4b40      	ldr	r3, [pc, #256]	; (800505c <HAL_RCC_OscConfig+0x4c4>)
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
 8004f5c:	f003 0302 	and.w	r3, r3, #2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1ee      	bne.n	8004f42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f64:	7dfb      	ldrb	r3, [r7, #23]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d105      	bne.n	8004f76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f6a:	4b3c      	ldr	r3, [pc, #240]	; (800505c <HAL_RCC_OscConfig+0x4c4>)
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	4a3b      	ldr	r2, [pc, #236]	; (800505c <HAL_RCC_OscConfig+0x4c4>)
 8004f70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	69db      	ldr	r3, [r3, #28]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f000 8087 	beq.w	800508e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f80:	4b36      	ldr	r3, [pc, #216]	; (800505c <HAL_RCC_OscConfig+0x4c4>)
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f003 030c 	and.w	r3, r3, #12
 8004f88:	2b08      	cmp	r3, #8
 8004f8a:	d061      	beq.n	8005050 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	69db      	ldr	r3, [r3, #28]
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d146      	bne.n	8005022 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f94:	4b33      	ldr	r3, [pc, #204]	; (8005064 <HAL_RCC_OscConfig+0x4cc>)
 8004f96:	2200      	movs	r2, #0
 8004f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f9a:	f7fe fc93 	bl	80038c4 <HAL_GetTick>
 8004f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fa0:	e008      	b.n	8004fb4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fa2:	f7fe fc8f 	bl	80038c4 <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d901      	bls.n	8004fb4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e06d      	b.n	8005090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fb4:	4b29      	ldr	r3, [pc, #164]	; (800505c <HAL_RCC_OscConfig+0x4c4>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1f0      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fc8:	d108      	bne.n	8004fdc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004fca:	4b24      	ldr	r3, [pc, #144]	; (800505c <HAL_RCC_OscConfig+0x4c4>)
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	4921      	ldr	r1, [pc, #132]	; (800505c <HAL_RCC_OscConfig+0x4c4>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fdc:	4b1f      	ldr	r3, [pc, #124]	; (800505c <HAL_RCC_OscConfig+0x4c4>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a19      	ldr	r1, [r3, #32]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fec:	430b      	orrs	r3, r1
 8004fee:	491b      	ldr	r1, [pc, #108]	; (800505c <HAL_RCC_OscConfig+0x4c4>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ff4:	4b1b      	ldr	r3, [pc, #108]	; (8005064 <HAL_RCC_OscConfig+0x4cc>)
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ffa:	f7fe fc63 	bl	80038c4 <HAL_GetTick>
 8004ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005000:	e008      	b.n	8005014 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005002:	f7fe fc5f 	bl	80038c4 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d901      	bls.n	8005014 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e03d      	b.n	8005090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005014:	4b11      	ldr	r3, [pc, #68]	; (800505c <HAL_RCC_OscConfig+0x4c4>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d0f0      	beq.n	8005002 <HAL_RCC_OscConfig+0x46a>
 8005020:	e035      	b.n	800508e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005022:	4b10      	ldr	r3, [pc, #64]	; (8005064 <HAL_RCC_OscConfig+0x4cc>)
 8005024:	2200      	movs	r2, #0
 8005026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005028:	f7fe fc4c 	bl	80038c4 <HAL_GetTick>
 800502c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800502e:	e008      	b.n	8005042 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005030:	f7fe fc48 	bl	80038c4 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2b02      	cmp	r3, #2
 800503c:	d901      	bls.n	8005042 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e026      	b.n	8005090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005042:	4b06      	ldr	r3, [pc, #24]	; (800505c <HAL_RCC_OscConfig+0x4c4>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1f0      	bne.n	8005030 <HAL_RCC_OscConfig+0x498>
 800504e:	e01e      	b.n	800508e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	69db      	ldr	r3, [r3, #28]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d107      	bne.n	8005068 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e019      	b.n	8005090 <HAL_RCC_OscConfig+0x4f8>
 800505c:	40021000 	.word	0x40021000
 8005060:	40007000 	.word	0x40007000
 8005064:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005068:	4b0b      	ldr	r3, [pc, #44]	; (8005098 <HAL_RCC_OscConfig+0x500>)
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a1b      	ldr	r3, [r3, #32]
 8005078:	429a      	cmp	r2, r3
 800507a:	d106      	bne.n	800508a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005086:	429a      	cmp	r2, r3
 8005088:	d001      	beq.n	800508e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e000      	b.n	8005090 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3718      	adds	r7, #24
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	40021000 	.word	0x40021000

0800509c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d101      	bne.n	80050b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e0d0      	b.n	8005252 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050b0:	4b6a      	ldr	r3, [pc, #424]	; (800525c <HAL_RCC_ClockConfig+0x1c0>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0307 	and.w	r3, r3, #7
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d910      	bls.n	80050e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050be:	4b67      	ldr	r3, [pc, #412]	; (800525c <HAL_RCC_ClockConfig+0x1c0>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f023 0207 	bic.w	r2, r3, #7
 80050c6:	4965      	ldr	r1, [pc, #404]	; (800525c <HAL_RCC_ClockConfig+0x1c0>)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ce:	4b63      	ldr	r3, [pc, #396]	; (800525c <HAL_RCC_ClockConfig+0x1c0>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0307 	and.w	r3, r3, #7
 80050d6:	683a      	ldr	r2, [r7, #0]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d001      	beq.n	80050e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e0b8      	b.n	8005252 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0302 	and.w	r3, r3, #2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d020      	beq.n	800512e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0304 	and.w	r3, r3, #4
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d005      	beq.n	8005104 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050f8:	4b59      	ldr	r3, [pc, #356]	; (8005260 <HAL_RCC_ClockConfig+0x1c4>)
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	4a58      	ldr	r2, [pc, #352]	; (8005260 <HAL_RCC_ClockConfig+0x1c4>)
 80050fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005102:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0308 	and.w	r3, r3, #8
 800510c:	2b00      	cmp	r3, #0
 800510e:	d005      	beq.n	800511c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005110:	4b53      	ldr	r3, [pc, #332]	; (8005260 <HAL_RCC_ClockConfig+0x1c4>)
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	4a52      	ldr	r2, [pc, #328]	; (8005260 <HAL_RCC_ClockConfig+0x1c4>)
 8005116:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800511a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800511c:	4b50      	ldr	r3, [pc, #320]	; (8005260 <HAL_RCC_ClockConfig+0x1c4>)
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	494d      	ldr	r1, [pc, #308]	; (8005260 <HAL_RCC_ClockConfig+0x1c4>)
 800512a:	4313      	orrs	r3, r2
 800512c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	2b00      	cmp	r3, #0
 8005138:	d040      	beq.n	80051bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d107      	bne.n	8005152 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005142:	4b47      	ldr	r3, [pc, #284]	; (8005260 <HAL_RCC_ClockConfig+0x1c4>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d115      	bne.n	800517a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e07f      	b.n	8005252 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	2b02      	cmp	r3, #2
 8005158:	d107      	bne.n	800516a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800515a:	4b41      	ldr	r3, [pc, #260]	; (8005260 <HAL_RCC_ClockConfig+0x1c4>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d109      	bne.n	800517a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e073      	b.n	8005252 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800516a:	4b3d      	ldr	r3, [pc, #244]	; (8005260 <HAL_RCC_ClockConfig+0x1c4>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e06b      	b.n	8005252 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800517a:	4b39      	ldr	r3, [pc, #228]	; (8005260 <HAL_RCC_ClockConfig+0x1c4>)
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f023 0203 	bic.w	r2, r3, #3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	4936      	ldr	r1, [pc, #216]	; (8005260 <HAL_RCC_ClockConfig+0x1c4>)
 8005188:	4313      	orrs	r3, r2
 800518a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800518c:	f7fe fb9a 	bl	80038c4 <HAL_GetTick>
 8005190:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005192:	e00a      	b.n	80051aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005194:	f7fe fb96 	bl	80038c4 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e053      	b.n	8005252 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051aa:	4b2d      	ldr	r3, [pc, #180]	; (8005260 <HAL_RCC_ClockConfig+0x1c4>)
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f003 020c 	and.w	r2, r3, #12
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d1eb      	bne.n	8005194 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051bc:	4b27      	ldr	r3, [pc, #156]	; (800525c <HAL_RCC_ClockConfig+0x1c0>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0307 	and.w	r3, r3, #7
 80051c4:	683a      	ldr	r2, [r7, #0]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d210      	bcs.n	80051ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ca:	4b24      	ldr	r3, [pc, #144]	; (800525c <HAL_RCC_ClockConfig+0x1c0>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f023 0207 	bic.w	r2, r3, #7
 80051d2:	4922      	ldr	r1, [pc, #136]	; (800525c <HAL_RCC_ClockConfig+0x1c0>)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051da:	4b20      	ldr	r3, [pc, #128]	; (800525c <HAL_RCC_ClockConfig+0x1c0>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0307 	and.w	r3, r3, #7
 80051e2:	683a      	ldr	r2, [r7, #0]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d001      	beq.n	80051ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e032      	b.n	8005252 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0304 	and.w	r3, r3, #4
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d008      	beq.n	800520a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051f8:	4b19      	ldr	r3, [pc, #100]	; (8005260 <HAL_RCC_ClockConfig+0x1c4>)
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	4916      	ldr	r1, [pc, #88]	; (8005260 <HAL_RCC_ClockConfig+0x1c4>)
 8005206:	4313      	orrs	r3, r2
 8005208:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0308 	and.w	r3, r3, #8
 8005212:	2b00      	cmp	r3, #0
 8005214:	d009      	beq.n	800522a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005216:	4b12      	ldr	r3, [pc, #72]	; (8005260 <HAL_RCC_ClockConfig+0x1c4>)
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	00db      	lsls	r3, r3, #3
 8005224:	490e      	ldr	r1, [pc, #56]	; (8005260 <HAL_RCC_ClockConfig+0x1c4>)
 8005226:	4313      	orrs	r3, r2
 8005228:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800522a:	f000 f821 	bl	8005270 <HAL_RCC_GetSysClockFreq>
 800522e:	4602      	mov	r2, r0
 8005230:	4b0b      	ldr	r3, [pc, #44]	; (8005260 <HAL_RCC_ClockConfig+0x1c4>)
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	091b      	lsrs	r3, r3, #4
 8005236:	f003 030f 	and.w	r3, r3, #15
 800523a:	490a      	ldr	r1, [pc, #40]	; (8005264 <HAL_RCC_ClockConfig+0x1c8>)
 800523c:	5ccb      	ldrb	r3, [r1, r3]
 800523e:	fa22 f303 	lsr.w	r3, r2, r3
 8005242:	4a09      	ldr	r2, [pc, #36]	; (8005268 <HAL_RCC_ClockConfig+0x1cc>)
 8005244:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005246:	4b09      	ldr	r3, [pc, #36]	; (800526c <HAL_RCC_ClockConfig+0x1d0>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4618      	mov	r0, r3
 800524c:	f7fe faf8 	bl	8003840 <HAL_InitTick>

  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	40022000 	.word	0x40022000
 8005260:	40021000 	.word	0x40021000
 8005264:	08006bf0 	.word	0x08006bf0
 8005268:	20000000 	.word	0x20000000
 800526c:	20000020 	.word	0x20000020

08005270 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005270:	b490      	push	{r4, r7}
 8005272:	b08a      	sub	sp, #40	; 0x28
 8005274:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005276:	4b29      	ldr	r3, [pc, #164]	; (800531c <HAL_RCC_GetSysClockFreq+0xac>)
 8005278:	1d3c      	adds	r4, r7, #4
 800527a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800527c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005280:	f240 2301 	movw	r3, #513	; 0x201
 8005284:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005286:	2300      	movs	r3, #0
 8005288:	61fb      	str	r3, [r7, #28]
 800528a:	2300      	movs	r3, #0
 800528c:	61bb      	str	r3, [r7, #24]
 800528e:	2300      	movs	r3, #0
 8005290:	627b      	str	r3, [r7, #36]	; 0x24
 8005292:	2300      	movs	r3, #0
 8005294:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005296:	2300      	movs	r3, #0
 8005298:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800529a:	4b21      	ldr	r3, [pc, #132]	; (8005320 <HAL_RCC_GetSysClockFreq+0xb0>)
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	f003 030c 	and.w	r3, r3, #12
 80052a6:	2b04      	cmp	r3, #4
 80052a8:	d002      	beq.n	80052b0 <HAL_RCC_GetSysClockFreq+0x40>
 80052aa:	2b08      	cmp	r3, #8
 80052ac:	d003      	beq.n	80052b6 <HAL_RCC_GetSysClockFreq+0x46>
 80052ae:	e02b      	b.n	8005308 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80052b0:	4b1c      	ldr	r3, [pc, #112]	; (8005324 <HAL_RCC_GetSysClockFreq+0xb4>)
 80052b2:	623b      	str	r3, [r7, #32]
      break;
 80052b4:	e02b      	b.n	800530e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	0c9b      	lsrs	r3, r3, #18
 80052ba:	f003 030f 	and.w	r3, r3, #15
 80052be:	3328      	adds	r3, #40	; 0x28
 80052c0:	443b      	add	r3, r7
 80052c2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80052c6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d012      	beq.n	80052f8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80052d2:	4b13      	ldr	r3, [pc, #76]	; (8005320 <HAL_RCC_GetSysClockFreq+0xb0>)
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	0c5b      	lsrs	r3, r3, #17
 80052d8:	f003 0301 	and.w	r3, r3, #1
 80052dc:	3328      	adds	r3, #40	; 0x28
 80052de:	443b      	add	r3, r7
 80052e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80052e4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	4a0e      	ldr	r2, [pc, #56]	; (8005324 <HAL_RCC_GetSysClockFreq+0xb4>)
 80052ea:	fb03 f202 	mul.w	r2, r3, r2
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f4:	627b      	str	r3, [r7, #36]	; 0x24
 80052f6:	e004      	b.n	8005302 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	4a0b      	ldr	r2, [pc, #44]	; (8005328 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052fc:	fb02 f303 	mul.w	r3, r2, r3
 8005300:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	623b      	str	r3, [r7, #32]
      break;
 8005306:	e002      	b.n	800530e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005308:	4b06      	ldr	r3, [pc, #24]	; (8005324 <HAL_RCC_GetSysClockFreq+0xb4>)
 800530a:	623b      	str	r3, [r7, #32]
      break;
 800530c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800530e:	6a3b      	ldr	r3, [r7, #32]
}
 8005310:	4618      	mov	r0, r3
 8005312:	3728      	adds	r7, #40	; 0x28
 8005314:	46bd      	mov	sp, r7
 8005316:	bc90      	pop	{r4, r7}
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	08006be0 	.word	0x08006be0
 8005320:	40021000 	.word	0x40021000
 8005324:	007a1200 	.word	0x007a1200
 8005328:	003d0900 	.word	0x003d0900

0800532c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800532c:	b480      	push	{r7}
 800532e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005330:	4b02      	ldr	r3, [pc, #8]	; (800533c <HAL_RCC_GetHCLKFreq+0x10>)
 8005332:	681b      	ldr	r3, [r3, #0]
}
 8005334:	4618      	mov	r0, r3
 8005336:	46bd      	mov	sp, r7
 8005338:	bc80      	pop	{r7}
 800533a:	4770      	bx	lr
 800533c:	20000000 	.word	0x20000000

08005340 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005344:	f7ff fff2 	bl	800532c <HAL_RCC_GetHCLKFreq>
 8005348:	4602      	mov	r2, r0
 800534a:	4b05      	ldr	r3, [pc, #20]	; (8005360 <HAL_RCC_GetPCLK1Freq+0x20>)
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	0a1b      	lsrs	r3, r3, #8
 8005350:	f003 0307 	and.w	r3, r3, #7
 8005354:	4903      	ldr	r1, [pc, #12]	; (8005364 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005356:	5ccb      	ldrb	r3, [r1, r3]
 8005358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800535c:	4618      	mov	r0, r3
 800535e:	bd80      	pop	{r7, pc}
 8005360:	40021000 	.word	0x40021000
 8005364:	08006c00 	.word	0x08006c00

08005368 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005370:	4b0a      	ldr	r3, [pc, #40]	; (800539c <RCC_Delay+0x34>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a0a      	ldr	r2, [pc, #40]	; (80053a0 <RCC_Delay+0x38>)
 8005376:	fba2 2303 	umull	r2, r3, r2, r3
 800537a:	0a5b      	lsrs	r3, r3, #9
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	fb02 f303 	mul.w	r3, r2, r3
 8005382:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005384:	bf00      	nop
  }
  while (Delay --);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	1e5a      	subs	r2, r3, #1
 800538a:	60fa      	str	r2, [r7, #12]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1f9      	bne.n	8005384 <RCC_Delay+0x1c>
}
 8005390:	bf00      	nop
 8005392:	bf00      	nop
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	bc80      	pop	{r7}
 800539a:	4770      	bx	lr
 800539c:	20000000 	.word	0x20000000
 80053a0:	10624dd3 	.word	0x10624dd3

080053a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d001      	beq.n	80053bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e03a      	b.n	8005432 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2202      	movs	r2, #2
 80053c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f042 0201 	orr.w	r2, r2, #1
 80053d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a18      	ldr	r2, [pc, #96]	; (800543c <HAL_TIM_Base_Start_IT+0x98>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d00e      	beq.n	80053fc <HAL_TIM_Base_Start_IT+0x58>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053e6:	d009      	beq.n	80053fc <HAL_TIM_Base_Start_IT+0x58>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a14      	ldr	r2, [pc, #80]	; (8005440 <HAL_TIM_Base_Start_IT+0x9c>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d004      	beq.n	80053fc <HAL_TIM_Base_Start_IT+0x58>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a13      	ldr	r2, [pc, #76]	; (8005444 <HAL_TIM_Base_Start_IT+0xa0>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d111      	bne.n	8005420 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f003 0307 	and.w	r3, r3, #7
 8005406:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2b06      	cmp	r3, #6
 800540c:	d010      	beq.n	8005430 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f042 0201 	orr.w	r2, r2, #1
 800541c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800541e:	e007      	b.n	8005430 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f042 0201 	orr.w	r2, r2, #1
 800542e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3714      	adds	r7, #20
 8005436:	46bd      	mov	sp, r7
 8005438:	bc80      	pop	{r7}
 800543a:	4770      	bx	lr
 800543c:	40012c00 	.word	0x40012c00
 8005440:	40000400 	.word	0x40000400
 8005444:	40000800 	.word	0x40000800

08005448 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e041      	b.n	80054de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d106      	bne.n	8005474 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7fc f968 	bl	8001744 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2202      	movs	r2, #2
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	3304      	adds	r3, #4
 8005484:	4619      	mov	r1, r3
 8005486:	4610      	mov	r0, r2
 8005488:	f000 fbea 	bl	8005c60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3708      	adds	r7, #8
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
	...

080054e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d109      	bne.n	800550c <HAL_TIM_PWM_Start+0x24>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	2b01      	cmp	r3, #1
 8005502:	bf14      	ite	ne
 8005504:	2301      	movne	r3, #1
 8005506:	2300      	moveq	r3, #0
 8005508:	b2db      	uxtb	r3, r3
 800550a:	e022      	b.n	8005552 <HAL_TIM_PWM_Start+0x6a>
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	2b04      	cmp	r3, #4
 8005510:	d109      	bne.n	8005526 <HAL_TIM_PWM_Start+0x3e>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b01      	cmp	r3, #1
 800551c:	bf14      	ite	ne
 800551e:	2301      	movne	r3, #1
 8005520:	2300      	moveq	r3, #0
 8005522:	b2db      	uxtb	r3, r3
 8005524:	e015      	b.n	8005552 <HAL_TIM_PWM_Start+0x6a>
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	2b08      	cmp	r3, #8
 800552a:	d109      	bne.n	8005540 <HAL_TIM_PWM_Start+0x58>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005532:	b2db      	uxtb	r3, r3
 8005534:	2b01      	cmp	r3, #1
 8005536:	bf14      	ite	ne
 8005538:	2301      	movne	r3, #1
 800553a:	2300      	moveq	r3, #0
 800553c:	b2db      	uxtb	r3, r3
 800553e:	e008      	b.n	8005552 <HAL_TIM_PWM_Start+0x6a>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005546:	b2db      	uxtb	r3, r3
 8005548:	2b01      	cmp	r3, #1
 800554a:	bf14      	ite	ne
 800554c:	2301      	movne	r3, #1
 800554e:	2300      	moveq	r3, #0
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d001      	beq.n	800555a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e05e      	b.n	8005618 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d104      	bne.n	800556a <HAL_TIM_PWM_Start+0x82>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2202      	movs	r2, #2
 8005564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005568:	e013      	b.n	8005592 <HAL_TIM_PWM_Start+0xaa>
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b04      	cmp	r3, #4
 800556e:	d104      	bne.n	800557a <HAL_TIM_PWM_Start+0x92>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005578:	e00b      	b.n	8005592 <HAL_TIM_PWM_Start+0xaa>
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b08      	cmp	r3, #8
 800557e:	d104      	bne.n	800558a <HAL_TIM_PWM_Start+0xa2>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2202      	movs	r2, #2
 8005584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005588:	e003      	b.n	8005592 <HAL_TIM_PWM_Start+0xaa>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2202      	movs	r2, #2
 800558e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2201      	movs	r2, #1
 8005598:	6839      	ldr	r1, [r7, #0]
 800559a:	4618      	mov	r0, r3
 800559c:	f000 fd4a 	bl	8006034 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a1e      	ldr	r2, [pc, #120]	; (8005620 <HAL_TIM_PWM_Start+0x138>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d107      	bne.n	80055ba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a18      	ldr	r2, [pc, #96]	; (8005620 <HAL_TIM_PWM_Start+0x138>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d00e      	beq.n	80055e2 <HAL_TIM_PWM_Start+0xfa>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055cc:	d009      	beq.n	80055e2 <HAL_TIM_PWM_Start+0xfa>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a14      	ldr	r2, [pc, #80]	; (8005624 <HAL_TIM_PWM_Start+0x13c>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d004      	beq.n	80055e2 <HAL_TIM_PWM_Start+0xfa>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a12      	ldr	r2, [pc, #72]	; (8005628 <HAL_TIM_PWM_Start+0x140>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d111      	bne.n	8005606 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f003 0307 	and.w	r3, r3, #7
 80055ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2b06      	cmp	r3, #6
 80055f2:	d010      	beq.n	8005616 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f042 0201 	orr.w	r2, r2, #1
 8005602:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005604:	e007      	b.n	8005616 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f042 0201 	orr.w	r2, r2, #1
 8005614:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	40012c00 	.word	0x40012c00
 8005624:	40000400 	.word	0x40000400
 8005628:	40000800 	.word	0x40000800

0800562c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d101      	bne.n	8005640 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e093      	b.n	8005768 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005646:	b2db      	uxtb	r3, r3
 8005648:	2b00      	cmp	r3, #0
 800564a:	d106      	bne.n	800565a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f7fc f80b 	bl	8001670 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2202      	movs	r2, #2
 800565e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	6812      	ldr	r2, [r2, #0]
 800566c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005670:	f023 0307 	bic.w	r3, r3, #7
 8005674:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	3304      	adds	r3, #4
 800567e:	4619      	mov	r1, r3
 8005680:	4610      	mov	r0, r2
 8005682:	f000 faed 	bl	8005c60 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	6a1b      	ldr	r3, [r3, #32]
 800569c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ae:	f023 0303 	bic.w	r3, r3, #3
 80056b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	689a      	ldr	r2, [r3, #8]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	699b      	ldr	r3, [r3, #24]
 80056bc:	021b      	lsls	r3, r3, #8
 80056be:	4313      	orrs	r3, r2
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80056cc:	f023 030c 	bic.w	r3, r3, #12
 80056d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	68da      	ldr	r2, [r3, #12]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	69db      	ldr	r3, [r3, #28]
 80056e6:	021b      	lsls	r3, r3, #8
 80056e8:	4313      	orrs	r3, r2
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	011a      	lsls	r2, r3, #4
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	031b      	lsls	r3, r3, #12
 80056fc:	4313      	orrs	r3, r2
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	4313      	orrs	r3, r2
 8005702:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800570a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	011b      	lsls	r3, r3, #4
 8005716:	4313      	orrs	r3, r2
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	4313      	orrs	r3, r2
 800571c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	3718      	adds	r7, #24
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005780:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005788:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005790:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005798:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d110      	bne.n	80057c2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80057a0:	7bfb      	ldrb	r3, [r7, #15]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d102      	bne.n	80057ac <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80057a6:	7b7b      	ldrb	r3, [r7, #13]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d001      	beq.n	80057b0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e069      	b.n	8005884 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2202      	movs	r2, #2
 80057b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2202      	movs	r2, #2
 80057bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057c0:	e031      	b.n	8005826 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2b04      	cmp	r3, #4
 80057c6:	d110      	bne.n	80057ea <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80057c8:	7bbb      	ldrb	r3, [r7, #14]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d102      	bne.n	80057d4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80057ce:	7b3b      	ldrb	r3, [r7, #12]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d001      	beq.n	80057d8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e055      	b.n	8005884 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2202      	movs	r2, #2
 80057dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2202      	movs	r2, #2
 80057e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057e8:	e01d      	b.n	8005826 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80057ea:	7bfb      	ldrb	r3, [r7, #15]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d108      	bne.n	8005802 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80057f0:	7bbb      	ldrb	r3, [r7, #14]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d105      	bne.n	8005802 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80057f6:	7b7b      	ldrb	r3, [r7, #13]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d102      	bne.n	8005802 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80057fc:	7b3b      	ldrb	r3, [r7, #12]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d001      	beq.n	8005806 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e03e      	b.n	8005884 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2202      	movs	r2, #2
 800580a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2202      	movs	r2, #2
 8005812:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2202      	movs	r2, #2
 800581a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2202      	movs	r2, #2
 8005822:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d003      	beq.n	8005834 <HAL_TIM_Encoder_Start+0xc4>
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	2b04      	cmp	r3, #4
 8005830:	d008      	beq.n	8005844 <HAL_TIM_Encoder_Start+0xd4>
 8005832:	e00f      	b.n	8005854 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2201      	movs	r2, #1
 800583a:	2100      	movs	r1, #0
 800583c:	4618      	mov	r0, r3
 800583e:	f000 fbf9 	bl	8006034 <TIM_CCxChannelCmd>
      break;
 8005842:	e016      	b.n	8005872 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2201      	movs	r2, #1
 800584a:	2104      	movs	r1, #4
 800584c:	4618      	mov	r0, r3
 800584e:	f000 fbf1 	bl	8006034 <TIM_CCxChannelCmd>
      break;
 8005852:	e00e      	b.n	8005872 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2201      	movs	r2, #1
 800585a:	2100      	movs	r1, #0
 800585c:	4618      	mov	r0, r3
 800585e:	f000 fbe9 	bl	8006034 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2201      	movs	r2, #1
 8005868:	2104      	movs	r1, #4
 800586a:	4618      	mov	r0, r3
 800586c:	f000 fbe2 	bl	8006034 <TIM_CCxChannelCmd>
      break;
 8005870:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f042 0201 	orr.w	r2, r2, #1
 8005880:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	3710      	adds	r7, #16
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	f003 0302 	and.w	r3, r3, #2
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d122      	bne.n	80058e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f003 0302 	and.w	r3, r3, #2
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d11b      	bne.n	80058e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f06f 0202 	mvn.w	r2, #2
 80058b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2201      	movs	r2, #1
 80058be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	f003 0303 	and.w	r3, r3, #3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f9ab 	bl	8005c2a <HAL_TIM_IC_CaptureCallback>
 80058d4:	e005      	b.n	80058e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f99e 	bl	8005c18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 f9ad 	bl	8005c3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	f003 0304 	and.w	r3, r3, #4
 80058f2:	2b04      	cmp	r3, #4
 80058f4:	d122      	bne.n	800593c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f003 0304 	and.w	r3, r3, #4
 8005900:	2b04      	cmp	r3, #4
 8005902:	d11b      	bne.n	800593c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f06f 0204 	mvn.w	r2, #4
 800590c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2202      	movs	r2, #2
 8005912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800591e:	2b00      	cmp	r3, #0
 8005920:	d003      	beq.n	800592a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f981 	bl	8005c2a <HAL_TIM_IC_CaptureCallback>
 8005928:	e005      	b.n	8005936 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f974 	bl	8005c18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 f983 	bl	8005c3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	f003 0308 	and.w	r3, r3, #8
 8005946:	2b08      	cmp	r3, #8
 8005948:	d122      	bne.n	8005990 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f003 0308 	and.w	r3, r3, #8
 8005954:	2b08      	cmp	r3, #8
 8005956:	d11b      	bne.n	8005990 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f06f 0208 	mvn.w	r2, #8
 8005960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2204      	movs	r2, #4
 8005966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	69db      	ldr	r3, [r3, #28]
 800596e:	f003 0303 	and.w	r3, r3, #3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d003      	beq.n	800597e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f957 	bl	8005c2a <HAL_TIM_IC_CaptureCallback>
 800597c:	e005      	b.n	800598a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f94a 	bl	8005c18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 f959 	bl	8005c3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	f003 0310 	and.w	r3, r3, #16
 800599a:	2b10      	cmp	r3, #16
 800599c:	d122      	bne.n	80059e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	f003 0310 	and.w	r3, r3, #16
 80059a8:	2b10      	cmp	r3, #16
 80059aa:	d11b      	bne.n	80059e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f06f 0210 	mvn.w	r2, #16
 80059b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2208      	movs	r2, #8
 80059ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d003      	beq.n	80059d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f92d 	bl	8005c2a <HAL_TIM_IC_CaptureCallback>
 80059d0:	e005      	b.n	80059de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f920 	bl	8005c18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 f92f 	bl	8005c3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d10e      	bne.n	8005a10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d107      	bne.n	8005a10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f06f 0201 	mvn.w	r2, #1
 8005a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7fc ff08 	bl	8002820 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a1a:	2b80      	cmp	r3, #128	; 0x80
 8005a1c:	d10e      	bne.n	8005a3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a28:	2b80      	cmp	r3, #128	; 0x80
 8005a2a:	d107      	bne.n	8005a3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 fb87 	bl	800614a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a46:	2b40      	cmp	r3, #64	; 0x40
 8005a48:	d10e      	bne.n	8005a68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a54:	2b40      	cmp	r3, #64	; 0x40
 8005a56:	d107      	bne.n	8005a68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 f8f3 	bl	8005c4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	f003 0320 	and.w	r3, r3, #32
 8005a72:	2b20      	cmp	r3, #32
 8005a74:	d10e      	bne.n	8005a94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	f003 0320 	and.w	r3, r3, #32
 8005a80:	2b20      	cmp	r3, #32
 8005a82:	d107      	bne.n	8005a94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f06f 0220 	mvn.w	r2, #32
 8005a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 fb52 	bl	8006138 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a94:	bf00      	nop
 8005a96:	3708      	adds	r7, #8
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d101      	bne.n	8005ab6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	e0ac      	b.n	8005c10 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2b0c      	cmp	r3, #12
 8005ac2:	f200 809f 	bhi.w	8005c04 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005ac6:	a201      	add	r2, pc, #4	; (adr r2, 8005acc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005acc:	08005b01 	.word	0x08005b01
 8005ad0:	08005c05 	.word	0x08005c05
 8005ad4:	08005c05 	.word	0x08005c05
 8005ad8:	08005c05 	.word	0x08005c05
 8005adc:	08005b41 	.word	0x08005b41
 8005ae0:	08005c05 	.word	0x08005c05
 8005ae4:	08005c05 	.word	0x08005c05
 8005ae8:	08005c05 	.word	0x08005c05
 8005aec:	08005b83 	.word	0x08005b83
 8005af0:	08005c05 	.word	0x08005c05
 8005af4:	08005c05 	.word	0x08005c05
 8005af8:	08005c05 	.word	0x08005c05
 8005afc:	08005bc3 	.word	0x08005bc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68b9      	ldr	r1, [r7, #8]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f000 f90c 	bl	8005d24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699a      	ldr	r2, [r3, #24]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0208 	orr.w	r2, r2, #8
 8005b1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	699a      	ldr	r2, [r3, #24]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f022 0204 	bic.w	r2, r2, #4
 8005b2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6999      	ldr	r1, [r3, #24]
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	691a      	ldr	r2, [r3, #16]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	619a      	str	r2, [r3, #24]
      break;
 8005b3e:	e062      	b.n	8005c06 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68b9      	ldr	r1, [r7, #8]
 8005b46:	4618      	mov	r0, r3
 8005b48:	f000 f952 	bl	8005df0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	699a      	ldr	r2, [r3, #24]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	699a      	ldr	r2, [r3, #24]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6999      	ldr	r1, [r3, #24]
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	021a      	lsls	r2, r3, #8
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	619a      	str	r2, [r3, #24]
      break;
 8005b80:	e041      	b.n	8005c06 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68b9      	ldr	r1, [r7, #8]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f000 f99b 	bl	8005ec4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	69da      	ldr	r2, [r3, #28]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f042 0208 	orr.w	r2, r2, #8
 8005b9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	69da      	ldr	r2, [r3, #28]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f022 0204 	bic.w	r2, r2, #4
 8005bac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	69d9      	ldr	r1, [r3, #28]
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	691a      	ldr	r2, [r3, #16]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	61da      	str	r2, [r3, #28]
      break;
 8005bc0:	e021      	b.n	8005c06 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68b9      	ldr	r1, [r7, #8]
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f000 f9e5 	bl	8005f98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	69da      	ldr	r2, [r3, #28]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	69da      	ldr	r2, [r3, #28]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	69d9      	ldr	r1, [r3, #28]
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	021a      	lsls	r2, r3, #8
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	61da      	str	r2, [r3, #28]
      break;
 8005c02:	e000      	b.n	8005c06 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005c04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bc80      	pop	{r7}
 8005c28:	4770      	bx	lr

08005c2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b083      	sub	sp, #12
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c32:	bf00      	nop
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bc80      	pop	{r7}
 8005c3a:	4770      	bx	lr

08005c3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c44:	bf00      	nop
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bc80      	pop	{r7}
 8005c4c:	4770      	bx	lr

08005c4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b083      	sub	sp, #12
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c56:	bf00      	nop
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bc80      	pop	{r7}
 8005c5e:	4770      	bx	lr

08005c60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a29      	ldr	r2, [pc, #164]	; (8005d18 <TIM_Base_SetConfig+0xb8>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d00b      	beq.n	8005c90 <TIM_Base_SetConfig+0x30>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c7e:	d007      	beq.n	8005c90 <TIM_Base_SetConfig+0x30>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a26      	ldr	r2, [pc, #152]	; (8005d1c <TIM_Base_SetConfig+0xbc>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d003      	beq.n	8005c90 <TIM_Base_SetConfig+0x30>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a25      	ldr	r2, [pc, #148]	; (8005d20 <TIM_Base_SetConfig+0xc0>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d108      	bne.n	8005ca2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a1c      	ldr	r2, [pc, #112]	; (8005d18 <TIM_Base_SetConfig+0xb8>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d00b      	beq.n	8005cc2 <TIM_Base_SetConfig+0x62>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cb0:	d007      	beq.n	8005cc2 <TIM_Base_SetConfig+0x62>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a19      	ldr	r2, [pc, #100]	; (8005d1c <TIM_Base_SetConfig+0xbc>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d003      	beq.n	8005cc2 <TIM_Base_SetConfig+0x62>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a18      	ldr	r2, [pc, #96]	; (8005d20 <TIM_Base_SetConfig+0xc0>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d108      	bne.n	8005cd4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a07      	ldr	r2, [pc, #28]	; (8005d18 <TIM_Base_SetConfig+0xb8>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d103      	bne.n	8005d08 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	691a      	ldr	r2, [r3, #16]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	615a      	str	r2, [r3, #20]
}
 8005d0e:	bf00      	nop
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bc80      	pop	{r7}
 8005d16:	4770      	bx	lr
 8005d18:	40012c00 	.word	0x40012c00
 8005d1c:	40000400 	.word	0x40000400
 8005d20:	40000800 	.word	0x40000800

08005d24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b087      	sub	sp, #28
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	f023 0201 	bic.w	r2, r3, #1
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f023 0303 	bic.w	r3, r3, #3
 8005d5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	f023 0302 	bic.w	r3, r3, #2
 8005d6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a1c      	ldr	r2, [pc, #112]	; (8005dec <TIM_OC1_SetConfig+0xc8>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d10c      	bne.n	8005d9a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	f023 0308 	bic.w	r3, r3, #8
 8005d86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	f023 0304 	bic.w	r3, r3, #4
 8005d98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a13      	ldr	r2, [pc, #76]	; (8005dec <TIM_OC1_SetConfig+0xc8>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d111      	bne.n	8005dc6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005da8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005db0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	685a      	ldr	r2, [r3, #4]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	621a      	str	r2, [r3, #32]
}
 8005de0:	bf00      	nop
 8005de2:	371c      	adds	r7, #28
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bc80      	pop	{r7}
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	40012c00 	.word	0x40012c00

08005df0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b087      	sub	sp, #28
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	f023 0210 	bic.w	r2, r3, #16
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	021b      	lsls	r3, r3, #8
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	f023 0320 	bic.w	r3, r3, #32
 8005e3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	011b      	lsls	r3, r3, #4
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a1d      	ldr	r2, [pc, #116]	; (8005ec0 <TIM_OC2_SetConfig+0xd0>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d10d      	bne.n	8005e6c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	011b      	lsls	r3, r3, #4
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a14      	ldr	r2, [pc, #80]	; (8005ec0 <TIM_OC2_SetConfig+0xd0>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d113      	bne.n	8005e9c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	695b      	ldr	r3, [r3, #20]
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	621a      	str	r2, [r3, #32]
}
 8005eb6:	bf00      	nop
 8005eb8:	371c      	adds	r7, #28
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bc80      	pop	{r7}
 8005ebe:	4770      	bx	lr
 8005ec0:	40012c00 	.word	0x40012c00

08005ec4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b087      	sub	sp, #28
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a1b      	ldr	r3, [r3, #32]
 8005ed2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	69db      	ldr	r3, [r3, #28]
 8005eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f023 0303 	bic.w	r3, r3, #3
 8005efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	021b      	lsls	r3, r3, #8
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a1d      	ldr	r2, [pc, #116]	; (8005f94 <TIM_OC3_SetConfig+0xd0>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d10d      	bne.n	8005f3e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	021b      	lsls	r3, r3, #8
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a14      	ldr	r2, [pc, #80]	; (8005f94 <TIM_OC3_SetConfig+0xd0>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d113      	bne.n	8005f6e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	011b      	lsls	r3, r3, #4
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	011b      	lsls	r3, r3, #4
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	685a      	ldr	r2, [r3, #4]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	621a      	str	r2, [r3, #32]
}
 8005f88:	bf00      	nop
 8005f8a:	371c      	adds	r7, #28
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bc80      	pop	{r7}
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	40012c00 	.word	0x40012c00

08005f98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b087      	sub	sp, #28
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	69db      	ldr	r3, [r3, #28]
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	021b      	lsls	r3, r3, #8
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fe2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	031b      	lsls	r3, r3, #12
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a0f      	ldr	r2, [pc, #60]	; (8006030 <TIM_OC4_SetConfig+0x98>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d109      	bne.n	800600c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ffe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	695b      	ldr	r3, [r3, #20]
 8006004:	019b      	lsls	r3, r3, #6
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	4313      	orrs	r3, r2
 800600a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	693a      	ldr	r2, [r7, #16]
 8006024:	621a      	str	r2, [r3, #32]
}
 8006026:	bf00      	nop
 8006028:	371c      	adds	r7, #28
 800602a:	46bd      	mov	sp, r7
 800602c:	bc80      	pop	{r7}
 800602e:	4770      	bx	lr
 8006030:	40012c00 	.word	0x40012c00

08006034 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006034:	b480      	push	{r7}
 8006036:	b087      	sub	sp, #28
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	f003 031f 	and.w	r3, r3, #31
 8006046:	2201      	movs	r2, #1
 8006048:	fa02 f303 	lsl.w	r3, r2, r3
 800604c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6a1a      	ldr	r2, [r3, #32]
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	43db      	mvns	r3, r3
 8006056:	401a      	ands	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6a1a      	ldr	r2, [r3, #32]
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	f003 031f 	and.w	r3, r3, #31
 8006066:	6879      	ldr	r1, [r7, #4]
 8006068:	fa01 f303 	lsl.w	r3, r1, r3
 800606c:	431a      	orrs	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	621a      	str	r2, [r3, #32]
}
 8006072:	bf00      	nop
 8006074:	371c      	adds	r7, #28
 8006076:	46bd      	mov	sp, r7
 8006078:	bc80      	pop	{r7}
 800607a:	4770      	bx	lr

0800607c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800608c:	2b01      	cmp	r3, #1
 800608e:	d101      	bne.n	8006094 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006090:	2302      	movs	r3, #2
 8006092:	e046      	b.n	8006122 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2202      	movs	r2, #2
 80060a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a16      	ldr	r2, [pc, #88]	; (800612c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d00e      	beq.n	80060f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060e0:	d009      	beq.n	80060f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a12      	ldr	r2, [pc, #72]	; (8006130 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d004      	beq.n	80060f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a10      	ldr	r2, [pc, #64]	; (8006134 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d10c      	bne.n	8006110 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	4313      	orrs	r3, r2
 8006106:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	bc80      	pop	{r7}
 800612a:	4770      	bx	lr
 800612c:	40012c00 	.word	0x40012c00
 8006130:	40000400 	.word	0x40000400
 8006134:	40000800 	.word	0x40000800

08006138 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006140:	bf00      	nop
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	bc80      	pop	{r7}
 8006148:	4770      	bx	lr

0800614a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800614a:	b480      	push	{r7}
 800614c:	b083      	sub	sp, #12
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006152:	bf00      	nop
 8006154:	370c      	adds	r7, #12
 8006156:	46bd      	mov	sp, r7
 8006158:	bc80      	pop	{r7}
 800615a:	4770      	bx	lr

0800615c <__errno>:
 800615c:	4b01      	ldr	r3, [pc, #4]	; (8006164 <__errno+0x8>)
 800615e:	6818      	ldr	r0, [r3, #0]
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	20000028 	.word	0x20000028

08006168 <__libc_init_array>:
 8006168:	b570      	push	{r4, r5, r6, lr}
 800616a:	2600      	movs	r6, #0
 800616c:	4d0c      	ldr	r5, [pc, #48]	; (80061a0 <__libc_init_array+0x38>)
 800616e:	4c0d      	ldr	r4, [pc, #52]	; (80061a4 <__libc_init_array+0x3c>)
 8006170:	1b64      	subs	r4, r4, r5
 8006172:	10a4      	asrs	r4, r4, #2
 8006174:	42a6      	cmp	r6, r4
 8006176:	d109      	bne.n	800618c <__libc_init_array+0x24>
 8006178:	f000 fc9c 	bl	8006ab4 <_init>
 800617c:	2600      	movs	r6, #0
 800617e:	4d0a      	ldr	r5, [pc, #40]	; (80061a8 <__libc_init_array+0x40>)
 8006180:	4c0a      	ldr	r4, [pc, #40]	; (80061ac <__libc_init_array+0x44>)
 8006182:	1b64      	subs	r4, r4, r5
 8006184:	10a4      	asrs	r4, r4, #2
 8006186:	42a6      	cmp	r6, r4
 8006188:	d105      	bne.n	8006196 <__libc_init_array+0x2e>
 800618a:	bd70      	pop	{r4, r5, r6, pc}
 800618c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006190:	4798      	blx	r3
 8006192:	3601      	adds	r6, #1
 8006194:	e7ee      	b.n	8006174 <__libc_init_array+0xc>
 8006196:	f855 3b04 	ldr.w	r3, [r5], #4
 800619a:	4798      	blx	r3
 800619c:	3601      	adds	r6, #1
 800619e:	e7f2      	b.n	8006186 <__libc_init_array+0x1e>
 80061a0:	08006c3c 	.word	0x08006c3c
 80061a4:	08006c3c 	.word	0x08006c3c
 80061a8:	08006c3c 	.word	0x08006c3c
 80061ac:	08006c40 	.word	0x08006c40

080061b0 <memset>:
 80061b0:	4603      	mov	r3, r0
 80061b2:	4402      	add	r2, r0
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d100      	bne.n	80061ba <memset+0xa>
 80061b8:	4770      	bx	lr
 80061ba:	f803 1b01 	strb.w	r1, [r3], #1
 80061be:	e7f9      	b.n	80061b4 <memset+0x4>

080061c0 <siprintf>:
 80061c0:	b40e      	push	{r1, r2, r3}
 80061c2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80061c6:	b500      	push	{lr}
 80061c8:	b09c      	sub	sp, #112	; 0x70
 80061ca:	ab1d      	add	r3, sp, #116	; 0x74
 80061cc:	9002      	str	r0, [sp, #8]
 80061ce:	9006      	str	r0, [sp, #24]
 80061d0:	9107      	str	r1, [sp, #28]
 80061d2:	9104      	str	r1, [sp, #16]
 80061d4:	4808      	ldr	r0, [pc, #32]	; (80061f8 <siprintf+0x38>)
 80061d6:	4909      	ldr	r1, [pc, #36]	; (80061fc <siprintf+0x3c>)
 80061d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80061dc:	9105      	str	r1, [sp, #20]
 80061de:	6800      	ldr	r0, [r0, #0]
 80061e0:	a902      	add	r1, sp, #8
 80061e2:	9301      	str	r3, [sp, #4]
 80061e4:	f000 f868 	bl	80062b8 <_svfiprintf_r>
 80061e8:	2200      	movs	r2, #0
 80061ea:	9b02      	ldr	r3, [sp, #8]
 80061ec:	701a      	strb	r2, [r3, #0]
 80061ee:	b01c      	add	sp, #112	; 0x70
 80061f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80061f4:	b003      	add	sp, #12
 80061f6:	4770      	bx	lr
 80061f8:	20000028 	.word	0x20000028
 80061fc:	ffff0208 	.word	0xffff0208

08006200 <__ssputs_r>:
 8006200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006204:	688e      	ldr	r6, [r1, #8]
 8006206:	4682      	mov	sl, r0
 8006208:	429e      	cmp	r6, r3
 800620a:	460c      	mov	r4, r1
 800620c:	4690      	mov	r8, r2
 800620e:	461f      	mov	r7, r3
 8006210:	d838      	bhi.n	8006284 <__ssputs_r+0x84>
 8006212:	898a      	ldrh	r2, [r1, #12]
 8006214:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006218:	d032      	beq.n	8006280 <__ssputs_r+0x80>
 800621a:	6825      	ldr	r5, [r4, #0]
 800621c:	6909      	ldr	r1, [r1, #16]
 800621e:	3301      	adds	r3, #1
 8006220:	eba5 0901 	sub.w	r9, r5, r1
 8006224:	6965      	ldr	r5, [r4, #20]
 8006226:	444b      	add	r3, r9
 8006228:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800622c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006230:	106d      	asrs	r5, r5, #1
 8006232:	429d      	cmp	r5, r3
 8006234:	bf38      	it	cc
 8006236:	461d      	movcc	r5, r3
 8006238:	0553      	lsls	r3, r2, #21
 800623a:	d531      	bpl.n	80062a0 <__ssputs_r+0xa0>
 800623c:	4629      	mov	r1, r5
 800623e:	f000 fb6f 	bl	8006920 <_malloc_r>
 8006242:	4606      	mov	r6, r0
 8006244:	b950      	cbnz	r0, 800625c <__ssputs_r+0x5c>
 8006246:	230c      	movs	r3, #12
 8006248:	f04f 30ff 	mov.w	r0, #4294967295
 800624c:	f8ca 3000 	str.w	r3, [sl]
 8006250:	89a3      	ldrh	r3, [r4, #12]
 8006252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006256:	81a3      	strh	r3, [r4, #12]
 8006258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800625c:	464a      	mov	r2, r9
 800625e:	6921      	ldr	r1, [r4, #16]
 8006260:	f000 face 	bl	8006800 <memcpy>
 8006264:	89a3      	ldrh	r3, [r4, #12]
 8006266:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800626a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800626e:	81a3      	strh	r3, [r4, #12]
 8006270:	6126      	str	r6, [r4, #16]
 8006272:	444e      	add	r6, r9
 8006274:	6026      	str	r6, [r4, #0]
 8006276:	463e      	mov	r6, r7
 8006278:	6165      	str	r5, [r4, #20]
 800627a:	eba5 0509 	sub.w	r5, r5, r9
 800627e:	60a5      	str	r5, [r4, #8]
 8006280:	42be      	cmp	r6, r7
 8006282:	d900      	bls.n	8006286 <__ssputs_r+0x86>
 8006284:	463e      	mov	r6, r7
 8006286:	4632      	mov	r2, r6
 8006288:	4641      	mov	r1, r8
 800628a:	6820      	ldr	r0, [r4, #0]
 800628c:	f000 fac6 	bl	800681c <memmove>
 8006290:	68a3      	ldr	r3, [r4, #8]
 8006292:	2000      	movs	r0, #0
 8006294:	1b9b      	subs	r3, r3, r6
 8006296:	60a3      	str	r3, [r4, #8]
 8006298:	6823      	ldr	r3, [r4, #0]
 800629a:	4433      	add	r3, r6
 800629c:	6023      	str	r3, [r4, #0]
 800629e:	e7db      	b.n	8006258 <__ssputs_r+0x58>
 80062a0:	462a      	mov	r2, r5
 80062a2:	f000 fbb1 	bl	8006a08 <_realloc_r>
 80062a6:	4606      	mov	r6, r0
 80062a8:	2800      	cmp	r0, #0
 80062aa:	d1e1      	bne.n	8006270 <__ssputs_r+0x70>
 80062ac:	4650      	mov	r0, sl
 80062ae:	6921      	ldr	r1, [r4, #16]
 80062b0:	f000 face 	bl	8006850 <_free_r>
 80062b4:	e7c7      	b.n	8006246 <__ssputs_r+0x46>
	...

080062b8 <_svfiprintf_r>:
 80062b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062bc:	4698      	mov	r8, r3
 80062be:	898b      	ldrh	r3, [r1, #12]
 80062c0:	4607      	mov	r7, r0
 80062c2:	061b      	lsls	r3, r3, #24
 80062c4:	460d      	mov	r5, r1
 80062c6:	4614      	mov	r4, r2
 80062c8:	b09d      	sub	sp, #116	; 0x74
 80062ca:	d50e      	bpl.n	80062ea <_svfiprintf_r+0x32>
 80062cc:	690b      	ldr	r3, [r1, #16]
 80062ce:	b963      	cbnz	r3, 80062ea <_svfiprintf_r+0x32>
 80062d0:	2140      	movs	r1, #64	; 0x40
 80062d2:	f000 fb25 	bl	8006920 <_malloc_r>
 80062d6:	6028      	str	r0, [r5, #0]
 80062d8:	6128      	str	r0, [r5, #16]
 80062da:	b920      	cbnz	r0, 80062e6 <_svfiprintf_r+0x2e>
 80062dc:	230c      	movs	r3, #12
 80062de:	603b      	str	r3, [r7, #0]
 80062e0:	f04f 30ff 	mov.w	r0, #4294967295
 80062e4:	e0d1      	b.n	800648a <_svfiprintf_r+0x1d2>
 80062e6:	2340      	movs	r3, #64	; 0x40
 80062e8:	616b      	str	r3, [r5, #20]
 80062ea:	2300      	movs	r3, #0
 80062ec:	9309      	str	r3, [sp, #36]	; 0x24
 80062ee:	2320      	movs	r3, #32
 80062f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062f4:	2330      	movs	r3, #48	; 0x30
 80062f6:	f04f 0901 	mov.w	r9, #1
 80062fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80062fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80064a4 <_svfiprintf_r+0x1ec>
 8006302:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006306:	4623      	mov	r3, r4
 8006308:	469a      	mov	sl, r3
 800630a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800630e:	b10a      	cbz	r2, 8006314 <_svfiprintf_r+0x5c>
 8006310:	2a25      	cmp	r2, #37	; 0x25
 8006312:	d1f9      	bne.n	8006308 <_svfiprintf_r+0x50>
 8006314:	ebba 0b04 	subs.w	fp, sl, r4
 8006318:	d00b      	beq.n	8006332 <_svfiprintf_r+0x7a>
 800631a:	465b      	mov	r3, fp
 800631c:	4622      	mov	r2, r4
 800631e:	4629      	mov	r1, r5
 8006320:	4638      	mov	r0, r7
 8006322:	f7ff ff6d 	bl	8006200 <__ssputs_r>
 8006326:	3001      	adds	r0, #1
 8006328:	f000 80aa 	beq.w	8006480 <_svfiprintf_r+0x1c8>
 800632c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800632e:	445a      	add	r2, fp
 8006330:	9209      	str	r2, [sp, #36]	; 0x24
 8006332:	f89a 3000 	ldrb.w	r3, [sl]
 8006336:	2b00      	cmp	r3, #0
 8006338:	f000 80a2 	beq.w	8006480 <_svfiprintf_r+0x1c8>
 800633c:	2300      	movs	r3, #0
 800633e:	f04f 32ff 	mov.w	r2, #4294967295
 8006342:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006346:	f10a 0a01 	add.w	sl, sl, #1
 800634a:	9304      	str	r3, [sp, #16]
 800634c:	9307      	str	r3, [sp, #28]
 800634e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006352:	931a      	str	r3, [sp, #104]	; 0x68
 8006354:	4654      	mov	r4, sl
 8006356:	2205      	movs	r2, #5
 8006358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800635c:	4851      	ldr	r0, [pc, #324]	; (80064a4 <_svfiprintf_r+0x1ec>)
 800635e:	f000 fa41 	bl	80067e4 <memchr>
 8006362:	9a04      	ldr	r2, [sp, #16]
 8006364:	b9d8      	cbnz	r0, 800639e <_svfiprintf_r+0xe6>
 8006366:	06d0      	lsls	r0, r2, #27
 8006368:	bf44      	itt	mi
 800636a:	2320      	movmi	r3, #32
 800636c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006370:	0711      	lsls	r1, r2, #28
 8006372:	bf44      	itt	mi
 8006374:	232b      	movmi	r3, #43	; 0x2b
 8006376:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800637a:	f89a 3000 	ldrb.w	r3, [sl]
 800637e:	2b2a      	cmp	r3, #42	; 0x2a
 8006380:	d015      	beq.n	80063ae <_svfiprintf_r+0xf6>
 8006382:	4654      	mov	r4, sl
 8006384:	2000      	movs	r0, #0
 8006386:	f04f 0c0a 	mov.w	ip, #10
 800638a:	9a07      	ldr	r2, [sp, #28]
 800638c:	4621      	mov	r1, r4
 800638e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006392:	3b30      	subs	r3, #48	; 0x30
 8006394:	2b09      	cmp	r3, #9
 8006396:	d94e      	bls.n	8006436 <_svfiprintf_r+0x17e>
 8006398:	b1b0      	cbz	r0, 80063c8 <_svfiprintf_r+0x110>
 800639a:	9207      	str	r2, [sp, #28]
 800639c:	e014      	b.n	80063c8 <_svfiprintf_r+0x110>
 800639e:	eba0 0308 	sub.w	r3, r0, r8
 80063a2:	fa09 f303 	lsl.w	r3, r9, r3
 80063a6:	4313      	orrs	r3, r2
 80063a8:	46a2      	mov	sl, r4
 80063aa:	9304      	str	r3, [sp, #16]
 80063ac:	e7d2      	b.n	8006354 <_svfiprintf_r+0x9c>
 80063ae:	9b03      	ldr	r3, [sp, #12]
 80063b0:	1d19      	adds	r1, r3, #4
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	9103      	str	r1, [sp, #12]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	bfbb      	ittet	lt
 80063ba:	425b      	neglt	r3, r3
 80063bc:	f042 0202 	orrlt.w	r2, r2, #2
 80063c0:	9307      	strge	r3, [sp, #28]
 80063c2:	9307      	strlt	r3, [sp, #28]
 80063c4:	bfb8      	it	lt
 80063c6:	9204      	strlt	r2, [sp, #16]
 80063c8:	7823      	ldrb	r3, [r4, #0]
 80063ca:	2b2e      	cmp	r3, #46	; 0x2e
 80063cc:	d10c      	bne.n	80063e8 <_svfiprintf_r+0x130>
 80063ce:	7863      	ldrb	r3, [r4, #1]
 80063d0:	2b2a      	cmp	r3, #42	; 0x2a
 80063d2:	d135      	bne.n	8006440 <_svfiprintf_r+0x188>
 80063d4:	9b03      	ldr	r3, [sp, #12]
 80063d6:	3402      	adds	r4, #2
 80063d8:	1d1a      	adds	r2, r3, #4
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	9203      	str	r2, [sp, #12]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	bfb8      	it	lt
 80063e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80063e6:	9305      	str	r3, [sp, #20]
 80063e8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80064a8 <_svfiprintf_r+0x1f0>
 80063ec:	2203      	movs	r2, #3
 80063ee:	4650      	mov	r0, sl
 80063f0:	7821      	ldrb	r1, [r4, #0]
 80063f2:	f000 f9f7 	bl	80067e4 <memchr>
 80063f6:	b140      	cbz	r0, 800640a <_svfiprintf_r+0x152>
 80063f8:	2340      	movs	r3, #64	; 0x40
 80063fa:	eba0 000a 	sub.w	r0, r0, sl
 80063fe:	fa03 f000 	lsl.w	r0, r3, r0
 8006402:	9b04      	ldr	r3, [sp, #16]
 8006404:	3401      	adds	r4, #1
 8006406:	4303      	orrs	r3, r0
 8006408:	9304      	str	r3, [sp, #16]
 800640a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800640e:	2206      	movs	r2, #6
 8006410:	4826      	ldr	r0, [pc, #152]	; (80064ac <_svfiprintf_r+0x1f4>)
 8006412:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006416:	f000 f9e5 	bl	80067e4 <memchr>
 800641a:	2800      	cmp	r0, #0
 800641c:	d038      	beq.n	8006490 <_svfiprintf_r+0x1d8>
 800641e:	4b24      	ldr	r3, [pc, #144]	; (80064b0 <_svfiprintf_r+0x1f8>)
 8006420:	bb1b      	cbnz	r3, 800646a <_svfiprintf_r+0x1b2>
 8006422:	9b03      	ldr	r3, [sp, #12]
 8006424:	3307      	adds	r3, #7
 8006426:	f023 0307 	bic.w	r3, r3, #7
 800642a:	3308      	adds	r3, #8
 800642c:	9303      	str	r3, [sp, #12]
 800642e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006430:	4433      	add	r3, r6
 8006432:	9309      	str	r3, [sp, #36]	; 0x24
 8006434:	e767      	b.n	8006306 <_svfiprintf_r+0x4e>
 8006436:	460c      	mov	r4, r1
 8006438:	2001      	movs	r0, #1
 800643a:	fb0c 3202 	mla	r2, ip, r2, r3
 800643e:	e7a5      	b.n	800638c <_svfiprintf_r+0xd4>
 8006440:	2300      	movs	r3, #0
 8006442:	f04f 0c0a 	mov.w	ip, #10
 8006446:	4619      	mov	r1, r3
 8006448:	3401      	adds	r4, #1
 800644a:	9305      	str	r3, [sp, #20]
 800644c:	4620      	mov	r0, r4
 800644e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006452:	3a30      	subs	r2, #48	; 0x30
 8006454:	2a09      	cmp	r2, #9
 8006456:	d903      	bls.n	8006460 <_svfiprintf_r+0x1a8>
 8006458:	2b00      	cmp	r3, #0
 800645a:	d0c5      	beq.n	80063e8 <_svfiprintf_r+0x130>
 800645c:	9105      	str	r1, [sp, #20]
 800645e:	e7c3      	b.n	80063e8 <_svfiprintf_r+0x130>
 8006460:	4604      	mov	r4, r0
 8006462:	2301      	movs	r3, #1
 8006464:	fb0c 2101 	mla	r1, ip, r1, r2
 8006468:	e7f0      	b.n	800644c <_svfiprintf_r+0x194>
 800646a:	ab03      	add	r3, sp, #12
 800646c:	9300      	str	r3, [sp, #0]
 800646e:	462a      	mov	r2, r5
 8006470:	4638      	mov	r0, r7
 8006472:	4b10      	ldr	r3, [pc, #64]	; (80064b4 <_svfiprintf_r+0x1fc>)
 8006474:	a904      	add	r1, sp, #16
 8006476:	f3af 8000 	nop.w
 800647a:	1c42      	adds	r2, r0, #1
 800647c:	4606      	mov	r6, r0
 800647e:	d1d6      	bne.n	800642e <_svfiprintf_r+0x176>
 8006480:	89ab      	ldrh	r3, [r5, #12]
 8006482:	065b      	lsls	r3, r3, #25
 8006484:	f53f af2c 	bmi.w	80062e0 <_svfiprintf_r+0x28>
 8006488:	9809      	ldr	r0, [sp, #36]	; 0x24
 800648a:	b01d      	add	sp, #116	; 0x74
 800648c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006490:	ab03      	add	r3, sp, #12
 8006492:	9300      	str	r3, [sp, #0]
 8006494:	462a      	mov	r2, r5
 8006496:	4638      	mov	r0, r7
 8006498:	4b06      	ldr	r3, [pc, #24]	; (80064b4 <_svfiprintf_r+0x1fc>)
 800649a:	a904      	add	r1, sp, #16
 800649c:	f000 f87c 	bl	8006598 <_printf_i>
 80064a0:	e7eb      	b.n	800647a <_svfiprintf_r+0x1c2>
 80064a2:	bf00      	nop
 80064a4:	08006c08 	.word	0x08006c08
 80064a8:	08006c0e 	.word	0x08006c0e
 80064ac:	08006c12 	.word	0x08006c12
 80064b0:	00000000 	.word	0x00000000
 80064b4:	08006201 	.word	0x08006201

080064b8 <_printf_common>:
 80064b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064bc:	4616      	mov	r6, r2
 80064be:	4699      	mov	r9, r3
 80064c0:	688a      	ldr	r2, [r1, #8]
 80064c2:	690b      	ldr	r3, [r1, #16]
 80064c4:	4607      	mov	r7, r0
 80064c6:	4293      	cmp	r3, r2
 80064c8:	bfb8      	it	lt
 80064ca:	4613      	movlt	r3, r2
 80064cc:	6033      	str	r3, [r6, #0]
 80064ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064d2:	460c      	mov	r4, r1
 80064d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064d8:	b10a      	cbz	r2, 80064de <_printf_common+0x26>
 80064da:	3301      	adds	r3, #1
 80064dc:	6033      	str	r3, [r6, #0]
 80064de:	6823      	ldr	r3, [r4, #0]
 80064e0:	0699      	lsls	r1, r3, #26
 80064e2:	bf42      	ittt	mi
 80064e4:	6833      	ldrmi	r3, [r6, #0]
 80064e6:	3302      	addmi	r3, #2
 80064e8:	6033      	strmi	r3, [r6, #0]
 80064ea:	6825      	ldr	r5, [r4, #0]
 80064ec:	f015 0506 	ands.w	r5, r5, #6
 80064f0:	d106      	bne.n	8006500 <_printf_common+0x48>
 80064f2:	f104 0a19 	add.w	sl, r4, #25
 80064f6:	68e3      	ldr	r3, [r4, #12]
 80064f8:	6832      	ldr	r2, [r6, #0]
 80064fa:	1a9b      	subs	r3, r3, r2
 80064fc:	42ab      	cmp	r3, r5
 80064fe:	dc28      	bgt.n	8006552 <_printf_common+0x9a>
 8006500:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006504:	1e13      	subs	r3, r2, #0
 8006506:	6822      	ldr	r2, [r4, #0]
 8006508:	bf18      	it	ne
 800650a:	2301      	movne	r3, #1
 800650c:	0692      	lsls	r2, r2, #26
 800650e:	d42d      	bmi.n	800656c <_printf_common+0xb4>
 8006510:	4649      	mov	r1, r9
 8006512:	4638      	mov	r0, r7
 8006514:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006518:	47c0      	blx	r8
 800651a:	3001      	adds	r0, #1
 800651c:	d020      	beq.n	8006560 <_printf_common+0xa8>
 800651e:	6823      	ldr	r3, [r4, #0]
 8006520:	68e5      	ldr	r5, [r4, #12]
 8006522:	f003 0306 	and.w	r3, r3, #6
 8006526:	2b04      	cmp	r3, #4
 8006528:	bf18      	it	ne
 800652a:	2500      	movne	r5, #0
 800652c:	6832      	ldr	r2, [r6, #0]
 800652e:	f04f 0600 	mov.w	r6, #0
 8006532:	68a3      	ldr	r3, [r4, #8]
 8006534:	bf08      	it	eq
 8006536:	1aad      	subeq	r5, r5, r2
 8006538:	6922      	ldr	r2, [r4, #16]
 800653a:	bf08      	it	eq
 800653c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006540:	4293      	cmp	r3, r2
 8006542:	bfc4      	itt	gt
 8006544:	1a9b      	subgt	r3, r3, r2
 8006546:	18ed      	addgt	r5, r5, r3
 8006548:	341a      	adds	r4, #26
 800654a:	42b5      	cmp	r5, r6
 800654c:	d11a      	bne.n	8006584 <_printf_common+0xcc>
 800654e:	2000      	movs	r0, #0
 8006550:	e008      	b.n	8006564 <_printf_common+0xac>
 8006552:	2301      	movs	r3, #1
 8006554:	4652      	mov	r2, sl
 8006556:	4649      	mov	r1, r9
 8006558:	4638      	mov	r0, r7
 800655a:	47c0      	blx	r8
 800655c:	3001      	adds	r0, #1
 800655e:	d103      	bne.n	8006568 <_printf_common+0xb0>
 8006560:	f04f 30ff 	mov.w	r0, #4294967295
 8006564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006568:	3501      	adds	r5, #1
 800656a:	e7c4      	b.n	80064f6 <_printf_common+0x3e>
 800656c:	2030      	movs	r0, #48	; 0x30
 800656e:	18e1      	adds	r1, r4, r3
 8006570:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006574:	1c5a      	adds	r2, r3, #1
 8006576:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800657a:	4422      	add	r2, r4
 800657c:	3302      	adds	r3, #2
 800657e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006582:	e7c5      	b.n	8006510 <_printf_common+0x58>
 8006584:	2301      	movs	r3, #1
 8006586:	4622      	mov	r2, r4
 8006588:	4649      	mov	r1, r9
 800658a:	4638      	mov	r0, r7
 800658c:	47c0      	blx	r8
 800658e:	3001      	adds	r0, #1
 8006590:	d0e6      	beq.n	8006560 <_printf_common+0xa8>
 8006592:	3601      	adds	r6, #1
 8006594:	e7d9      	b.n	800654a <_printf_common+0x92>
	...

08006598 <_printf_i>:
 8006598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800659c:	7e0f      	ldrb	r7, [r1, #24]
 800659e:	4691      	mov	r9, r2
 80065a0:	2f78      	cmp	r7, #120	; 0x78
 80065a2:	4680      	mov	r8, r0
 80065a4:	460c      	mov	r4, r1
 80065a6:	469a      	mov	sl, r3
 80065a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80065aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80065ae:	d807      	bhi.n	80065c0 <_printf_i+0x28>
 80065b0:	2f62      	cmp	r7, #98	; 0x62
 80065b2:	d80a      	bhi.n	80065ca <_printf_i+0x32>
 80065b4:	2f00      	cmp	r7, #0
 80065b6:	f000 80d9 	beq.w	800676c <_printf_i+0x1d4>
 80065ba:	2f58      	cmp	r7, #88	; 0x58
 80065bc:	f000 80a4 	beq.w	8006708 <_printf_i+0x170>
 80065c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80065c8:	e03a      	b.n	8006640 <_printf_i+0xa8>
 80065ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80065ce:	2b15      	cmp	r3, #21
 80065d0:	d8f6      	bhi.n	80065c0 <_printf_i+0x28>
 80065d2:	a101      	add	r1, pc, #4	; (adr r1, 80065d8 <_printf_i+0x40>)
 80065d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065d8:	08006631 	.word	0x08006631
 80065dc:	08006645 	.word	0x08006645
 80065e0:	080065c1 	.word	0x080065c1
 80065e4:	080065c1 	.word	0x080065c1
 80065e8:	080065c1 	.word	0x080065c1
 80065ec:	080065c1 	.word	0x080065c1
 80065f0:	08006645 	.word	0x08006645
 80065f4:	080065c1 	.word	0x080065c1
 80065f8:	080065c1 	.word	0x080065c1
 80065fc:	080065c1 	.word	0x080065c1
 8006600:	080065c1 	.word	0x080065c1
 8006604:	08006753 	.word	0x08006753
 8006608:	08006675 	.word	0x08006675
 800660c:	08006735 	.word	0x08006735
 8006610:	080065c1 	.word	0x080065c1
 8006614:	080065c1 	.word	0x080065c1
 8006618:	08006775 	.word	0x08006775
 800661c:	080065c1 	.word	0x080065c1
 8006620:	08006675 	.word	0x08006675
 8006624:	080065c1 	.word	0x080065c1
 8006628:	080065c1 	.word	0x080065c1
 800662c:	0800673d 	.word	0x0800673d
 8006630:	682b      	ldr	r3, [r5, #0]
 8006632:	1d1a      	adds	r2, r3, #4
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	602a      	str	r2, [r5, #0]
 8006638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800663c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006640:	2301      	movs	r3, #1
 8006642:	e0a4      	b.n	800678e <_printf_i+0x1f6>
 8006644:	6820      	ldr	r0, [r4, #0]
 8006646:	6829      	ldr	r1, [r5, #0]
 8006648:	0606      	lsls	r6, r0, #24
 800664a:	f101 0304 	add.w	r3, r1, #4
 800664e:	d50a      	bpl.n	8006666 <_printf_i+0xce>
 8006650:	680e      	ldr	r6, [r1, #0]
 8006652:	602b      	str	r3, [r5, #0]
 8006654:	2e00      	cmp	r6, #0
 8006656:	da03      	bge.n	8006660 <_printf_i+0xc8>
 8006658:	232d      	movs	r3, #45	; 0x2d
 800665a:	4276      	negs	r6, r6
 800665c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006660:	230a      	movs	r3, #10
 8006662:	485e      	ldr	r0, [pc, #376]	; (80067dc <_printf_i+0x244>)
 8006664:	e019      	b.n	800669a <_printf_i+0x102>
 8006666:	680e      	ldr	r6, [r1, #0]
 8006668:	f010 0f40 	tst.w	r0, #64	; 0x40
 800666c:	602b      	str	r3, [r5, #0]
 800666e:	bf18      	it	ne
 8006670:	b236      	sxthne	r6, r6
 8006672:	e7ef      	b.n	8006654 <_printf_i+0xbc>
 8006674:	682b      	ldr	r3, [r5, #0]
 8006676:	6820      	ldr	r0, [r4, #0]
 8006678:	1d19      	adds	r1, r3, #4
 800667a:	6029      	str	r1, [r5, #0]
 800667c:	0601      	lsls	r1, r0, #24
 800667e:	d501      	bpl.n	8006684 <_printf_i+0xec>
 8006680:	681e      	ldr	r6, [r3, #0]
 8006682:	e002      	b.n	800668a <_printf_i+0xf2>
 8006684:	0646      	lsls	r6, r0, #25
 8006686:	d5fb      	bpl.n	8006680 <_printf_i+0xe8>
 8006688:	881e      	ldrh	r6, [r3, #0]
 800668a:	2f6f      	cmp	r7, #111	; 0x6f
 800668c:	bf0c      	ite	eq
 800668e:	2308      	moveq	r3, #8
 8006690:	230a      	movne	r3, #10
 8006692:	4852      	ldr	r0, [pc, #328]	; (80067dc <_printf_i+0x244>)
 8006694:	2100      	movs	r1, #0
 8006696:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800669a:	6865      	ldr	r5, [r4, #4]
 800669c:	2d00      	cmp	r5, #0
 800669e:	bfa8      	it	ge
 80066a0:	6821      	ldrge	r1, [r4, #0]
 80066a2:	60a5      	str	r5, [r4, #8]
 80066a4:	bfa4      	itt	ge
 80066a6:	f021 0104 	bicge.w	r1, r1, #4
 80066aa:	6021      	strge	r1, [r4, #0]
 80066ac:	b90e      	cbnz	r6, 80066b2 <_printf_i+0x11a>
 80066ae:	2d00      	cmp	r5, #0
 80066b0:	d04d      	beq.n	800674e <_printf_i+0x1b6>
 80066b2:	4615      	mov	r5, r2
 80066b4:	fbb6 f1f3 	udiv	r1, r6, r3
 80066b8:	fb03 6711 	mls	r7, r3, r1, r6
 80066bc:	5dc7      	ldrb	r7, [r0, r7]
 80066be:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80066c2:	4637      	mov	r7, r6
 80066c4:	42bb      	cmp	r3, r7
 80066c6:	460e      	mov	r6, r1
 80066c8:	d9f4      	bls.n	80066b4 <_printf_i+0x11c>
 80066ca:	2b08      	cmp	r3, #8
 80066cc:	d10b      	bne.n	80066e6 <_printf_i+0x14e>
 80066ce:	6823      	ldr	r3, [r4, #0]
 80066d0:	07de      	lsls	r6, r3, #31
 80066d2:	d508      	bpl.n	80066e6 <_printf_i+0x14e>
 80066d4:	6923      	ldr	r3, [r4, #16]
 80066d6:	6861      	ldr	r1, [r4, #4]
 80066d8:	4299      	cmp	r1, r3
 80066da:	bfde      	ittt	le
 80066dc:	2330      	movle	r3, #48	; 0x30
 80066de:	f805 3c01 	strble.w	r3, [r5, #-1]
 80066e2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80066e6:	1b52      	subs	r2, r2, r5
 80066e8:	6122      	str	r2, [r4, #16]
 80066ea:	464b      	mov	r3, r9
 80066ec:	4621      	mov	r1, r4
 80066ee:	4640      	mov	r0, r8
 80066f0:	f8cd a000 	str.w	sl, [sp]
 80066f4:	aa03      	add	r2, sp, #12
 80066f6:	f7ff fedf 	bl	80064b8 <_printf_common>
 80066fa:	3001      	adds	r0, #1
 80066fc:	d14c      	bne.n	8006798 <_printf_i+0x200>
 80066fe:	f04f 30ff 	mov.w	r0, #4294967295
 8006702:	b004      	add	sp, #16
 8006704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006708:	4834      	ldr	r0, [pc, #208]	; (80067dc <_printf_i+0x244>)
 800670a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800670e:	6829      	ldr	r1, [r5, #0]
 8006710:	6823      	ldr	r3, [r4, #0]
 8006712:	f851 6b04 	ldr.w	r6, [r1], #4
 8006716:	6029      	str	r1, [r5, #0]
 8006718:	061d      	lsls	r5, r3, #24
 800671a:	d514      	bpl.n	8006746 <_printf_i+0x1ae>
 800671c:	07df      	lsls	r7, r3, #31
 800671e:	bf44      	itt	mi
 8006720:	f043 0320 	orrmi.w	r3, r3, #32
 8006724:	6023      	strmi	r3, [r4, #0]
 8006726:	b91e      	cbnz	r6, 8006730 <_printf_i+0x198>
 8006728:	6823      	ldr	r3, [r4, #0]
 800672a:	f023 0320 	bic.w	r3, r3, #32
 800672e:	6023      	str	r3, [r4, #0]
 8006730:	2310      	movs	r3, #16
 8006732:	e7af      	b.n	8006694 <_printf_i+0xfc>
 8006734:	6823      	ldr	r3, [r4, #0]
 8006736:	f043 0320 	orr.w	r3, r3, #32
 800673a:	6023      	str	r3, [r4, #0]
 800673c:	2378      	movs	r3, #120	; 0x78
 800673e:	4828      	ldr	r0, [pc, #160]	; (80067e0 <_printf_i+0x248>)
 8006740:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006744:	e7e3      	b.n	800670e <_printf_i+0x176>
 8006746:	0659      	lsls	r1, r3, #25
 8006748:	bf48      	it	mi
 800674a:	b2b6      	uxthmi	r6, r6
 800674c:	e7e6      	b.n	800671c <_printf_i+0x184>
 800674e:	4615      	mov	r5, r2
 8006750:	e7bb      	b.n	80066ca <_printf_i+0x132>
 8006752:	682b      	ldr	r3, [r5, #0]
 8006754:	6826      	ldr	r6, [r4, #0]
 8006756:	1d18      	adds	r0, r3, #4
 8006758:	6961      	ldr	r1, [r4, #20]
 800675a:	6028      	str	r0, [r5, #0]
 800675c:	0635      	lsls	r5, r6, #24
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	d501      	bpl.n	8006766 <_printf_i+0x1ce>
 8006762:	6019      	str	r1, [r3, #0]
 8006764:	e002      	b.n	800676c <_printf_i+0x1d4>
 8006766:	0670      	lsls	r0, r6, #25
 8006768:	d5fb      	bpl.n	8006762 <_printf_i+0x1ca>
 800676a:	8019      	strh	r1, [r3, #0]
 800676c:	2300      	movs	r3, #0
 800676e:	4615      	mov	r5, r2
 8006770:	6123      	str	r3, [r4, #16]
 8006772:	e7ba      	b.n	80066ea <_printf_i+0x152>
 8006774:	682b      	ldr	r3, [r5, #0]
 8006776:	2100      	movs	r1, #0
 8006778:	1d1a      	adds	r2, r3, #4
 800677a:	602a      	str	r2, [r5, #0]
 800677c:	681d      	ldr	r5, [r3, #0]
 800677e:	6862      	ldr	r2, [r4, #4]
 8006780:	4628      	mov	r0, r5
 8006782:	f000 f82f 	bl	80067e4 <memchr>
 8006786:	b108      	cbz	r0, 800678c <_printf_i+0x1f4>
 8006788:	1b40      	subs	r0, r0, r5
 800678a:	6060      	str	r0, [r4, #4]
 800678c:	6863      	ldr	r3, [r4, #4]
 800678e:	6123      	str	r3, [r4, #16]
 8006790:	2300      	movs	r3, #0
 8006792:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006796:	e7a8      	b.n	80066ea <_printf_i+0x152>
 8006798:	462a      	mov	r2, r5
 800679a:	4649      	mov	r1, r9
 800679c:	4640      	mov	r0, r8
 800679e:	6923      	ldr	r3, [r4, #16]
 80067a0:	47d0      	blx	sl
 80067a2:	3001      	adds	r0, #1
 80067a4:	d0ab      	beq.n	80066fe <_printf_i+0x166>
 80067a6:	6823      	ldr	r3, [r4, #0]
 80067a8:	079b      	lsls	r3, r3, #30
 80067aa:	d413      	bmi.n	80067d4 <_printf_i+0x23c>
 80067ac:	68e0      	ldr	r0, [r4, #12]
 80067ae:	9b03      	ldr	r3, [sp, #12]
 80067b0:	4298      	cmp	r0, r3
 80067b2:	bfb8      	it	lt
 80067b4:	4618      	movlt	r0, r3
 80067b6:	e7a4      	b.n	8006702 <_printf_i+0x16a>
 80067b8:	2301      	movs	r3, #1
 80067ba:	4632      	mov	r2, r6
 80067bc:	4649      	mov	r1, r9
 80067be:	4640      	mov	r0, r8
 80067c0:	47d0      	blx	sl
 80067c2:	3001      	adds	r0, #1
 80067c4:	d09b      	beq.n	80066fe <_printf_i+0x166>
 80067c6:	3501      	adds	r5, #1
 80067c8:	68e3      	ldr	r3, [r4, #12]
 80067ca:	9903      	ldr	r1, [sp, #12]
 80067cc:	1a5b      	subs	r3, r3, r1
 80067ce:	42ab      	cmp	r3, r5
 80067d0:	dcf2      	bgt.n	80067b8 <_printf_i+0x220>
 80067d2:	e7eb      	b.n	80067ac <_printf_i+0x214>
 80067d4:	2500      	movs	r5, #0
 80067d6:	f104 0619 	add.w	r6, r4, #25
 80067da:	e7f5      	b.n	80067c8 <_printf_i+0x230>
 80067dc:	08006c19 	.word	0x08006c19
 80067e0:	08006c2a 	.word	0x08006c2a

080067e4 <memchr>:
 80067e4:	4603      	mov	r3, r0
 80067e6:	b510      	push	{r4, lr}
 80067e8:	b2c9      	uxtb	r1, r1
 80067ea:	4402      	add	r2, r0
 80067ec:	4293      	cmp	r3, r2
 80067ee:	4618      	mov	r0, r3
 80067f0:	d101      	bne.n	80067f6 <memchr+0x12>
 80067f2:	2000      	movs	r0, #0
 80067f4:	e003      	b.n	80067fe <memchr+0x1a>
 80067f6:	7804      	ldrb	r4, [r0, #0]
 80067f8:	3301      	adds	r3, #1
 80067fa:	428c      	cmp	r4, r1
 80067fc:	d1f6      	bne.n	80067ec <memchr+0x8>
 80067fe:	bd10      	pop	{r4, pc}

08006800 <memcpy>:
 8006800:	440a      	add	r2, r1
 8006802:	4291      	cmp	r1, r2
 8006804:	f100 33ff 	add.w	r3, r0, #4294967295
 8006808:	d100      	bne.n	800680c <memcpy+0xc>
 800680a:	4770      	bx	lr
 800680c:	b510      	push	{r4, lr}
 800680e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006812:	4291      	cmp	r1, r2
 8006814:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006818:	d1f9      	bne.n	800680e <memcpy+0xe>
 800681a:	bd10      	pop	{r4, pc}

0800681c <memmove>:
 800681c:	4288      	cmp	r0, r1
 800681e:	b510      	push	{r4, lr}
 8006820:	eb01 0402 	add.w	r4, r1, r2
 8006824:	d902      	bls.n	800682c <memmove+0x10>
 8006826:	4284      	cmp	r4, r0
 8006828:	4623      	mov	r3, r4
 800682a:	d807      	bhi.n	800683c <memmove+0x20>
 800682c:	1e43      	subs	r3, r0, #1
 800682e:	42a1      	cmp	r1, r4
 8006830:	d008      	beq.n	8006844 <memmove+0x28>
 8006832:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006836:	f803 2f01 	strb.w	r2, [r3, #1]!
 800683a:	e7f8      	b.n	800682e <memmove+0x12>
 800683c:	4601      	mov	r1, r0
 800683e:	4402      	add	r2, r0
 8006840:	428a      	cmp	r2, r1
 8006842:	d100      	bne.n	8006846 <memmove+0x2a>
 8006844:	bd10      	pop	{r4, pc}
 8006846:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800684a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800684e:	e7f7      	b.n	8006840 <memmove+0x24>

08006850 <_free_r>:
 8006850:	b538      	push	{r3, r4, r5, lr}
 8006852:	4605      	mov	r5, r0
 8006854:	2900      	cmp	r1, #0
 8006856:	d040      	beq.n	80068da <_free_r+0x8a>
 8006858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800685c:	1f0c      	subs	r4, r1, #4
 800685e:	2b00      	cmp	r3, #0
 8006860:	bfb8      	it	lt
 8006862:	18e4      	addlt	r4, r4, r3
 8006864:	f000 f910 	bl	8006a88 <__malloc_lock>
 8006868:	4a1c      	ldr	r2, [pc, #112]	; (80068dc <_free_r+0x8c>)
 800686a:	6813      	ldr	r3, [r2, #0]
 800686c:	b933      	cbnz	r3, 800687c <_free_r+0x2c>
 800686e:	6063      	str	r3, [r4, #4]
 8006870:	6014      	str	r4, [r2, #0]
 8006872:	4628      	mov	r0, r5
 8006874:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006878:	f000 b90c 	b.w	8006a94 <__malloc_unlock>
 800687c:	42a3      	cmp	r3, r4
 800687e:	d908      	bls.n	8006892 <_free_r+0x42>
 8006880:	6820      	ldr	r0, [r4, #0]
 8006882:	1821      	adds	r1, r4, r0
 8006884:	428b      	cmp	r3, r1
 8006886:	bf01      	itttt	eq
 8006888:	6819      	ldreq	r1, [r3, #0]
 800688a:	685b      	ldreq	r3, [r3, #4]
 800688c:	1809      	addeq	r1, r1, r0
 800688e:	6021      	streq	r1, [r4, #0]
 8006890:	e7ed      	b.n	800686e <_free_r+0x1e>
 8006892:	461a      	mov	r2, r3
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	b10b      	cbz	r3, 800689c <_free_r+0x4c>
 8006898:	42a3      	cmp	r3, r4
 800689a:	d9fa      	bls.n	8006892 <_free_r+0x42>
 800689c:	6811      	ldr	r1, [r2, #0]
 800689e:	1850      	adds	r0, r2, r1
 80068a0:	42a0      	cmp	r0, r4
 80068a2:	d10b      	bne.n	80068bc <_free_r+0x6c>
 80068a4:	6820      	ldr	r0, [r4, #0]
 80068a6:	4401      	add	r1, r0
 80068a8:	1850      	adds	r0, r2, r1
 80068aa:	4283      	cmp	r3, r0
 80068ac:	6011      	str	r1, [r2, #0]
 80068ae:	d1e0      	bne.n	8006872 <_free_r+0x22>
 80068b0:	6818      	ldr	r0, [r3, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	4401      	add	r1, r0
 80068b6:	6011      	str	r1, [r2, #0]
 80068b8:	6053      	str	r3, [r2, #4]
 80068ba:	e7da      	b.n	8006872 <_free_r+0x22>
 80068bc:	d902      	bls.n	80068c4 <_free_r+0x74>
 80068be:	230c      	movs	r3, #12
 80068c0:	602b      	str	r3, [r5, #0]
 80068c2:	e7d6      	b.n	8006872 <_free_r+0x22>
 80068c4:	6820      	ldr	r0, [r4, #0]
 80068c6:	1821      	adds	r1, r4, r0
 80068c8:	428b      	cmp	r3, r1
 80068ca:	bf01      	itttt	eq
 80068cc:	6819      	ldreq	r1, [r3, #0]
 80068ce:	685b      	ldreq	r3, [r3, #4]
 80068d0:	1809      	addeq	r1, r1, r0
 80068d2:	6021      	streq	r1, [r4, #0]
 80068d4:	6063      	str	r3, [r4, #4]
 80068d6:	6054      	str	r4, [r2, #4]
 80068d8:	e7cb      	b.n	8006872 <_free_r+0x22>
 80068da:	bd38      	pop	{r3, r4, r5, pc}
 80068dc:	200002f8 	.word	0x200002f8

080068e0 <sbrk_aligned>:
 80068e0:	b570      	push	{r4, r5, r6, lr}
 80068e2:	4e0e      	ldr	r6, [pc, #56]	; (800691c <sbrk_aligned+0x3c>)
 80068e4:	460c      	mov	r4, r1
 80068e6:	6831      	ldr	r1, [r6, #0]
 80068e8:	4605      	mov	r5, r0
 80068ea:	b911      	cbnz	r1, 80068f2 <sbrk_aligned+0x12>
 80068ec:	f000 f8bc 	bl	8006a68 <_sbrk_r>
 80068f0:	6030      	str	r0, [r6, #0]
 80068f2:	4621      	mov	r1, r4
 80068f4:	4628      	mov	r0, r5
 80068f6:	f000 f8b7 	bl	8006a68 <_sbrk_r>
 80068fa:	1c43      	adds	r3, r0, #1
 80068fc:	d00a      	beq.n	8006914 <sbrk_aligned+0x34>
 80068fe:	1cc4      	adds	r4, r0, #3
 8006900:	f024 0403 	bic.w	r4, r4, #3
 8006904:	42a0      	cmp	r0, r4
 8006906:	d007      	beq.n	8006918 <sbrk_aligned+0x38>
 8006908:	1a21      	subs	r1, r4, r0
 800690a:	4628      	mov	r0, r5
 800690c:	f000 f8ac 	bl	8006a68 <_sbrk_r>
 8006910:	3001      	adds	r0, #1
 8006912:	d101      	bne.n	8006918 <sbrk_aligned+0x38>
 8006914:	f04f 34ff 	mov.w	r4, #4294967295
 8006918:	4620      	mov	r0, r4
 800691a:	bd70      	pop	{r4, r5, r6, pc}
 800691c:	200002fc 	.word	0x200002fc

08006920 <_malloc_r>:
 8006920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006924:	1ccd      	adds	r5, r1, #3
 8006926:	f025 0503 	bic.w	r5, r5, #3
 800692a:	3508      	adds	r5, #8
 800692c:	2d0c      	cmp	r5, #12
 800692e:	bf38      	it	cc
 8006930:	250c      	movcc	r5, #12
 8006932:	2d00      	cmp	r5, #0
 8006934:	4607      	mov	r7, r0
 8006936:	db01      	blt.n	800693c <_malloc_r+0x1c>
 8006938:	42a9      	cmp	r1, r5
 800693a:	d905      	bls.n	8006948 <_malloc_r+0x28>
 800693c:	230c      	movs	r3, #12
 800693e:	2600      	movs	r6, #0
 8006940:	603b      	str	r3, [r7, #0]
 8006942:	4630      	mov	r0, r6
 8006944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006948:	4e2e      	ldr	r6, [pc, #184]	; (8006a04 <_malloc_r+0xe4>)
 800694a:	f000 f89d 	bl	8006a88 <__malloc_lock>
 800694e:	6833      	ldr	r3, [r6, #0]
 8006950:	461c      	mov	r4, r3
 8006952:	bb34      	cbnz	r4, 80069a2 <_malloc_r+0x82>
 8006954:	4629      	mov	r1, r5
 8006956:	4638      	mov	r0, r7
 8006958:	f7ff ffc2 	bl	80068e0 <sbrk_aligned>
 800695c:	1c43      	adds	r3, r0, #1
 800695e:	4604      	mov	r4, r0
 8006960:	d14d      	bne.n	80069fe <_malloc_r+0xde>
 8006962:	6834      	ldr	r4, [r6, #0]
 8006964:	4626      	mov	r6, r4
 8006966:	2e00      	cmp	r6, #0
 8006968:	d140      	bne.n	80069ec <_malloc_r+0xcc>
 800696a:	6823      	ldr	r3, [r4, #0]
 800696c:	4631      	mov	r1, r6
 800696e:	4638      	mov	r0, r7
 8006970:	eb04 0803 	add.w	r8, r4, r3
 8006974:	f000 f878 	bl	8006a68 <_sbrk_r>
 8006978:	4580      	cmp	r8, r0
 800697a:	d13a      	bne.n	80069f2 <_malloc_r+0xd2>
 800697c:	6821      	ldr	r1, [r4, #0]
 800697e:	3503      	adds	r5, #3
 8006980:	1a6d      	subs	r5, r5, r1
 8006982:	f025 0503 	bic.w	r5, r5, #3
 8006986:	3508      	adds	r5, #8
 8006988:	2d0c      	cmp	r5, #12
 800698a:	bf38      	it	cc
 800698c:	250c      	movcc	r5, #12
 800698e:	4638      	mov	r0, r7
 8006990:	4629      	mov	r1, r5
 8006992:	f7ff ffa5 	bl	80068e0 <sbrk_aligned>
 8006996:	3001      	adds	r0, #1
 8006998:	d02b      	beq.n	80069f2 <_malloc_r+0xd2>
 800699a:	6823      	ldr	r3, [r4, #0]
 800699c:	442b      	add	r3, r5
 800699e:	6023      	str	r3, [r4, #0]
 80069a0:	e00e      	b.n	80069c0 <_malloc_r+0xa0>
 80069a2:	6822      	ldr	r2, [r4, #0]
 80069a4:	1b52      	subs	r2, r2, r5
 80069a6:	d41e      	bmi.n	80069e6 <_malloc_r+0xc6>
 80069a8:	2a0b      	cmp	r2, #11
 80069aa:	d916      	bls.n	80069da <_malloc_r+0xba>
 80069ac:	1961      	adds	r1, r4, r5
 80069ae:	42a3      	cmp	r3, r4
 80069b0:	6025      	str	r5, [r4, #0]
 80069b2:	bf18      	it	ne
 80069b4:	6059      	strne	r1, [r3, #4]
 80069b6:	6863      	ldr	r3, [r4, #4]
 80069b8:	bf08      	it	eq
 80069ba:	6031      	streq	r1, [r6, #0]
 80069bc:	5162      	str	r2, [r4, r5]
 80069be:	604b      	str	r3, [r1, #4]
 80069c0:	4638      	mov	r0, r7
 80069c2:	f104 060b 	add.w	r6, r4, #11
 80069c6:	f000 f865 	bl	8006a94 <__malloc_unlock>
 80069ca:	f026 0607 	bic.w	r6, r6, #7
 80069ce:	1d23      	adds	r3, r4, #4
 80069d0:	1af2      	subs	r2, r6, r3
 80069d2:	d0b6      	beq.n	8006942 <_malloc_r+0x22>
 80069d4:	1b9b      	subs	r3, r3, r6
 80069d6:	50a3      	str	r3, [r4, r2]
 80069d8:	e7b3      	b.n	8006942 <_malloc_r+0x22>
 80069da:	6862      	ldr	r2, [r4, #4]
 80069dc:	42a3      	cmp	r3, r4
 80069de:	bf0c      	ite	eq
 80069e0:	6032      	streq	r2, [r6, #0]
 80069e2:	605a      	strne	r2, [r3, #4]
 80069e4:	e7ec      	b.n	80069c0 <_malloc_r+0xa0>
 80069e6:	4623      	mov	r3, r4
 80069e8:	6864      	ldr	r4, [r4, #4]
 80069ea:	e7b2      	b.n	8006952 <_malloc_r+0x32>
 80069ec:	4634      	mov	r4, r6
 80069ee:	6876      	ldr	r6, [r6, #4]
 80069f0:	e7b9      	b.n	8006966 <_malloc_r+0x46>
 80069f2:	230c      	movs	r3, #12
 80069f4:	4638      	mov	r0, r7
 80069f6:	603b      	str	r3, [r7, #0]
 80069f8:	f000 f84c 	bl	8006a94 <__malloc_unlock>
 80069fc:	e7a1      	b.n	8006942 <_malloc_r+0x22>
 80069fe:	6025      	str	r5, [r4, #0]
 8006a00:	e7de      	b.n	80069c0 <_malloc_r+0xa0>
 8006a02:	bf00      	nop
 8006a04:	200002f8 	.word	0x200002f8

08006a08 <_realloc_r>:
 8006a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a0c:	4680      	mov	r8, r0
 8006a0e:	4614      	mov	r4, r2
 8006a10:	460e      	mov	r6, r1
 8006a12:	b921      	cbnz	r1, 8006a1e <_realloc_r+0x16>
 8006a14:	4611      	mov	r1, r2
 8006a16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a1a:	f7ff bf81 	b.w	8006920 <_malloc_r>
 8006a1e:	b92a      	cbnz	r2, 8006a2c <_realloc_r+0x24>
 8006a20:	f7ff ff16 	bl	8006850 <_free_r>
 8006a24:	4625      	mov	r5, r4
 8006a26:	4628      	mov	r0, r5
 8006a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a2c:	f000 f838 	bl	8006aa0 <_malloc_usable_size_r>
 8006a30:	4284      	cmp	r4, r0
 8006a32:	4607      	mov	r7, r0
 8006a34:	d802      	bhi.n	8006a3c <_realloc_r+0x34>
 8006a36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006a3a:	d812      	bhi.n	8006a62 <_realloc_r+0x5a>
 8006a3c:	4621      	mov	r1, r4
 8006a3e:	4640      	mov	r0, r8
 8006a40:	f7ff ff6e 	bl	8006920 <_malloc_r>
 8006a44:	4605      	mov	r5, r0
 8006a46:	2800      	cmp	r0, #0
 8006a48:	d0ed      	beq.n	8006a26 <_realloc_r+0x1e>
 8006a4a:	42bc      	cmp	r4, r7
 8006a4c:	4622      	mov	r2, r4
 8006a4e:	4631      	mov	r1, r6
 8006a50:	bf28      	it	cs
 8006a52:	463a      	movcs	r2, r7
 8006a54:	f7ff fed4 	bl	8006800 <memcpy>
 8006a58:	4631      	mov	r1, r6
 8006a5a:	4640      	mov	r0, r8
 8006a5c:	f7ff fef8 	bl	8006850 <_free_r>
 8006a60:	e7e1      	b.n	8006a26 <_realloc_r+0x1e>
 8006a62:	4635      	mov	r5, r6
 8006a64:	e7df      	b.n	8006a26 <_realloc_r+0x1e>
	...

08006a68 <_sbrk_r>:
 8006a68:	b538      	push	{r3, r4, r5, lr}
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	4d05      	ldr	r5, [pc, #20]	; (8006a84 <_sbrk_r+0x1c>)
 8006a6e:	4604      	mov	r4, r0
 8006a70:	4608      	mov	r0, r1
 8006a72:	602b      	str	r3, [r5, #0]
 8006a74:	f7fa ff3c 	bl	80018f0 <_sbrk>
 8006a78:	1c43      	adds	r3, r0, #1
 8006a7a:	d102      	bne.n	8006a82 <_sbrk_r+0x1a>
 8006a7c:	682b      	ldr	r3, [r5, #0]
 8006a7e:	b103      	cbz	r3, 8006a82 <_sbrk_r+0x1a>
 8006a80:	6023      	str	r3, [r4, #0]
 8006a82:	bd38      	pop	{r3, r4, r5, pc}
 8006a84:	20000300 	.word	0x20000300

08006a88 <__malloc_lock>:
 8006a88:	4801      	ldr	r0, [pc, #4]	; (8006a90 <__malloc_lock+0x8>)
 8006a8a:	f000 b811 	b.w	8006ab0 <__retarget_lock_acquire_recursive>
 8006a8e:	bf00      	nop
 8006a90:	20000304 	.word	0x20000304

08006a94 <__malloc_unlock>:
 8006a94:	4801      	ldr	r0, [pc, #4]	; (8006a9c <__malloc_unlock+0x8>)
 8006a96:	f000 b80c 	b.w	8006ab2 <__retarget_lock_release_recursive>
 8006a9a:	bf00      	nop
 8006a9c:	20000304 	.word	0x20000304

08006aa0 <_malloc_usable_size_r>:
 8006aa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006aa4:	1f18      	subs	r0, r3, #4
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	bfbc      	itt	lt
 8006aaa:	580b      	ldrlt	r3, [r1, r0]
 8006aac:	18c0      	addlt	r0, r0, r3
 8006aae:	4770      	bx	lr

08006ab0 <__retarget_lock_acquire_recursive>:
 8006ab0:	4770      	bx	lr

08006ab2 <__retarget_lock_release_recursive>:
 8006ab2:	4770      	bx	lr

08006ab4 <_init>:
 8006ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ab6:	bf00      	nop
 8006ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aba:	bc08      	pop	{r3}
 8006abc:	469e      	mov	lr, r3
 8006abe:	4770      	bx	lr

08006ac0 <_fini>:
 8006ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ac2:	bf00      	nop
 8006ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ac6:	bc08      	pop	{r3}
 8006ac8:	469e      	mov	lr, r3
 8006aca:	4770      	bx	lr
