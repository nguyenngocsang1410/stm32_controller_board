
Re_Project_Glove_Abrasion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000301c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003128  08003128  00013128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003150  08003150  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003150  08003150  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003150  08003150  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003150  08003150  00013150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003154  08003154  00013154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b0  2000000c  08003164  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  08003164  000204bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001045a  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021d2  00000000  00000000  0003048f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  00032668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef8  00000000  00000000  00033640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180a5  00000000  00000000  00034538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011aff  00000000  00000000  0004c5dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ed50  00000000  00000000  0005e0dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ece2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004360  00000000  00000000  000ece7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003110 	.word	0x08003110

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003110 	.word	0x08003110

0800014c <Test_Handle>:
#include "test_handler.h"

#define X1 X1_GPIO_Port, X1_Pin

void Test_Handle(Test_Type test) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  switch (test) {
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	2b04      	cmp	r3, #4
 800015a:	d81c      	bhi.n	8000196 <Test_Handle+0x4a>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <Test_Handle+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	08000179 	.word	0x08000179
 8000168:	0800017f 	.word	0x0800017f
 800016c:	08000185 	.word	0x08000185
 8000170:	0800018b 	.word	0x0800018b
 8000174:	08000191 	.word	0x08000191
  case MOTOR_TEST:
	Test_Motor();
 8000178:	f000 f822 	bl	80001c0 <Test_Motor>
	break;
 800017c:	e00c      	b.n	8000198 <Test_Handle+0x4c>
  case ENCODER_TEST:
	Test_Encoder();
 800017e:	f000 f825 	bl	80001cc <Test_Encoder>
	break;
 8000182:	e009      	b.n	8000198 <Test_Handle+0x4c>
  case INPUT_TEST:
	Test_Input();
 8000184:	f000 f80c 	bl	80001a0 <Test_Input>
	break;
 8000188:	e006      	b.n	8000198 <Test_Handle+0x4c>
  case OUTPUT_TEST:
	Test_Output();
 800018a:	f000 f813 	bl	80001b4 <Test_Output>
	break;
 800018e:	e003      	b.n	8000198 <Test_Handle+0x4c>
  case LCD_TEST:
	Test_LCD();
 8000190:	f000 f822 	bl	80001d8 <Test_LCD>
	break;
 8000194:	e000      	b.n	8000198 <Test_Handle+0x4c>
  default:
	break;
 8000196:	bf00      	nop
  }
}
 8000198:	bf00      	nop
 800019a:	3708      	adds	r7, #8
 800019c:	46bd      	mov	sp, r7
 800019e:	bd80      	pop	{r7, pc}

080001a0 <Test_Input>:

void Test_Input(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	af00      	add	r7, sp, #0
  /*
   * Test X0 -> X7
   * Out to: Debug Monitor
   * 		 revert PC13
   **/
  HAL_GPIO_TogglePin(X1);
 80001a4:	2102      	movs	r1, #2
 80001a6:	4802      	ldr	r0, [pc, #8]	; (80001b0 <Test_Input+0x10>)
 80001a8:	f001 fa9e 	bl	80016e8 <HAL_GPIO_TogglePin>

}
 80001ac:	bf00      	nop
 80001ae:	bd80      	pop	{r7, pc}
 80001b0:	40010c00 	.word	0x40010c00

080001b4 <Test_Output>:
void Test_Output(){
 80001b4:	b480      	push	{r7}
 80001b6:	af00      	add	r7, sp, #0

}
 80001b8:	bf00      	nop
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bc80      	pop	{r7}
 80001be:	4770      	bx	lr

080001c0 <Test_Motor>:
void Test_Motor(){
 80001c0:	b480      	push	{r7}
 80001c2:	af00      	add	r7, sp, #0

}
 80001c4:	bf00      	nop
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bc80      	pop	{r7}
 80001ca:	4770      	bx	lr

080001cc <Test_Encoder>:
void Test_Encoder(){
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0

}
 80001d0:	bf00      	nop
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr

080001d8 <Test_LCD>:

void Test_LCD(){
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0

}
 80001dc:	bf00      	nop
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr

080001e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ea:	f000 fd5f 	bl	8000cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ee:	f000 f817 	bl	8000220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f2:	f000 fa75 	bl	80006e0 <MX_GPIO_Init>
  MX_TIM1_Init();
 80001f6:	f000 f8dd 	bl	80003b4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80001fa:	f000 f933 	bl	8000464 <MX_TIM2_Init>
  MX_TIM3_Init();
 80001fe:	f000 f985 	bl	800050c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000202:	f000 f9e7 	bl	80005d4 <MX_TIM4_Init>
  MX_I2C2_Init();
 8000206:	f000 f8a7 	bl	8000358 <MX_I2C2_Init>
  MX_ADC1_Init();
 800020a:	f000 f867 	bl	80002dc <MX_ADC1_Init>
  MX_USB_PCD_Init();
 800020e:	f000 fa45 	bl	800069c <MX_USB_PCD_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	//MOTOR_TEST, ENCODER_TEST, INPUT_TEST, OUTPUT_TEST, LCD_TEST
	Test_Type test = MOTOR_TEST;
 8000212:	2300      	movs	r3, #0
 8000214:	71fb      	strb	r3, [r7, #7]

	Test_Handle(test);
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	4618      	mov	r0, r3
 800021a:	f7ff ff97 	bl	800014c <Test_Handle>
  while (1) {
 800021e:	e7f8      	b.n	8000212 <main+0x2e>

08000220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b094      	sub	sp, #80	; 0x50
 8000224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000226:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800022a:	2228      	movs	r2, #40	; 0x28
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f002 ff66 	bl	8003100 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000234:	f107 0314 	add.w	r3, r7, #20
 8000238:	2200      	movs	r2, #0
 800023a:	601a      	str	r2, [r3, #0]
 800023c:	605a      	str	r2, [r3, #4]
 800023e:	609a      	str	r2, [r3, #8]
 8000240:	60da      	str	r2, [r3, #12]
 8000242:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000244:	1d3b      	adds	r3, r7, #4
 8000246:	2200      	movs	r2, #0
 8000248:	601a      	str	r2, [r3, #0]
 800024a:	605a      	str	r2, [r3, #4]
 800024c:	609a      	str	r2, [r3, #8]
 800024e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000250:	2301      	movs	r3, #1
 8000252:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000254:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000258:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025e:	2301      	movs	r3, #1
 8000260:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000262:	2302      	movs	r3, #2
 8000264:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000266:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800026a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800026c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000270:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000272:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000276:	4618      	mov	r0, r3
 8000278:	f001 fcc2 	bl	8001c00 <HAL_RCC_OscConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000282:	f000 fadf 	bl	8000844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000286:	230f      	movs	r3, #15
 8000288:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800028a:	2302      	movs	r3, #2
 800028c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800028e:	2300      	movs	r3, #0
 8000290:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000292:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000296:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800029c:	f107 0314 	add.w	r3, r7, #20
 80002a0:	2101      	movs	r1, #1
 80002a2:	4618      	mov	r0, r3
 80002a4:	f001 ff2e 	bl	8002104 <HAL_RCC_ClockConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002ae:	f000 fac9 	bl	8000844 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80002b2:	2312      	movs	r3, #18
 80002b4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80002b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80002ba:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80002bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80002c0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	4618      	mov	r0, r3
 80002c6:	f002 f8a1 	bl	800240c <HAL_RCCEx_PeriphCLKConfig>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80002d0:	f000 fab8 	bl	8000844 <Error_Handler>
  }
}
 80002d4:	bf00      	nop
 80002d6:	3750      	adds	r7, #80	; 0x50
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}

080002dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	605a      	str	r2, [r3, #4]
 80002ea:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002ec:	4b18      	ldr	r3, [pc, #96]	; (8000350 <MX_ADC1_Init+0x74>)
 80002ee:	4a19      	ldr	r2, [pc, #100]	; (8000354 <MX_ADC1_Init+0x78>)
 80002f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002f2:	4b17      	ldr	r3, [pc, #92]	; (8000350 <MX_ADC1_Init+0x74>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002f8:	4b15      	ldr	r3, [pc, #84]	; (8000350 <MX_ADC1_Init+0x74>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002fe:	4b14      	ldr	r3, [pc, #80]	; (8000350 <MX_ADC1_Init+0x74>)
 8000300:	2200      	movs	r2, #0
 8000302:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000304:	4b12      	ldr	r3, [pc, #72]	; (8000350 <MX_ADC1_Init+0x74>)
 8000306:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800030a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800030c:	4b10      	ldr	r3, [pc, #64]	; (8000350 <MX_ADC1_Init+0x74>)
 800030e:	2200      	movs	r2, #0
 8000310:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000312:	4b0f      	ldr	r3, [pc, #60]	; (8000350 <MX_ADC1_Init+0x74>)
 8000314:	2201      	movs	r2, #1
 8000316:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000318:	480d      	ldr	r0, [pc, #52]	; (8000350 <MX_ADC1_Init+0x74>)
 800031a:	f000 fd29 	bl	8000d70 <HAL_ADC_Init>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000324:	f000 fa8e 	bl	8000844 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000328:	2302      	movs	r3, #2
 800032a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800032c:	2301      	movs	r3, #1
 800032e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000330:	2300      	movs	r3, #0
 8000332:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	4619      	mov	r1, r3
 8000338:	4805      	ldr	r0, [pc, #20]	; (8000350 <MX_ADC1_Init+0x74>)
 800033a:	f000 fdf1 	bl	8000f20 <HAL_ADC_ConfigChannel>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000344:	f000 fa7e 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000348:	bf00      	nop
 800034a:	3710      	adds	r7, #16
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	20000028 	.word	0x20000028
 8000354:	40012400 	.word	0x40012400

08000358 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800035c:	4b12      	ldr	r3, [pc, #72]	; (80003a8 <MX_I2C2_Init+0x50>)
 800035e:	4a13      	ldr	r2, [pc, #76]	; (80003ac <MX_I2C2_Init+0x54>)
 8000360:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000362:	4b11      	ldr	r3, [pc, #68]	; (80003a8 <MX_I2C2_Init+0x50>)
 8000364:	4a12      	ldr	r2, [pc, #72]	; (80003b0 <MX_I2C2_Init+0x58>)
 8000366:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000368:	4b0f      	ldr	r3, [pc, #60]	; (80003a8 <MX_I2C2_Init+0x50>)
 800036a:	2200      	movs	r2, #0
 800036c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800036e:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <MX_I2C2_Init+0x50>)
 8000370:	2200      	movs	r2, #0
 8000372:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000374:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <MX_I2C2_Init+0x50>)
 8000376:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800037a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800037c:	4b0a      	ldr	r3, [pc, #40]	; (80003a8 <MX_I2C2_Init+0x50>)
 800037e:	2200      	movs	r2, #0
 8000380:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000382:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <MX_I2C2_Init+0x50>)
 8000384:	2200      	movs	r2, #0
 8000386:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000388:	4b07      	ldr	r3, [pc, #28]	; (80003a8 <MX_I2C2_Init+0x50>)
 800038a:	2200      	movs	r2, #0
 800038c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800038e:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <MX_I2C2_Init+0x50>)
 8000390:	2200      	movs	r2, #0
 8000392:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000394:	4804      	ldr	r0, [pc, #16]	; (80003a8 <MX_I2C2_Init+0x50>)
 8000396:	f001 f9e3 	bl	8001760 <HAL_I2C_Init>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80003a0:	f000 fa50 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80003a4:	bf00      	nop
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	20000058 	.word	0x20000058
 80003ac:	40005800 	.word	0x40005800
 80003b0:	000186a0 	.word	0x000186a0

080003b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b08c      	sub	sp, #48	; 0x30
 80003b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80003ba:	f107 030c 	add.w	r3, r7, #12
 80003be:	2224      	movs	r2, #36	; 0x24
 80003c0:	2100      	movs	r1, #0
 80003c2:	4618      	mov	r0, r3
 80003c4:	f002 fe9c 	bl	8003100 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003c8:	1d3b      	adds	r3, r7, #4
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003d0:	4b22      	ldr	r3, [pc, #136]	; (800045c <MX_TIM1_Init+0xa8>)
 80003d2:	4a23      	ldr	r2, [pc, #140]	; (8000460 <MX_TIM1_Init+0xac>)
 80003d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80003d6:	4b21      	ldr	r3, [pc, #132]	; (800045c <MX_TIM1_Init+0xa8>)
 80003d8:	2200      	movs	r2, #0
 80003da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003dc:	4b1f      	ldr	r3, [pc, #124]	; (800045c <MX_TIM1_Init+0xa8>)
 80003de:	2200      	movs	r2, #0
 80003e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80003e2:	4b1e      	ldr	r3, [pc, #120]	; (800045c <MX_TIM1_Init+0xa8>)
 80003e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ea:	4b1c      	ldr	r3, [pc, #112]	; (800045c <MX_TIM1_Init+0xa8>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003f0:	4b1a      	ldr	r3, [pc, #104]	; (800045c <MX_TIM1_Init+0xa8>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003f6:	4b19      	ldr	r3, [pc, #100]	; (800045c <MX_TIM1_Init+0xa8>)
 80003f8:	2280      	movs	r2, #128	; 0x80
 80003fa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80003fc:	2303      	movs	r3, #3
 80003fe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000400:	2300      	movs	r3, #0
 8000402:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000404:	2301      	movs	r3, #1
 8000406:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000408:	2300      	movs	r3, #0
 800040a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800040c:	230a      	movs	r3, #10
 800040e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000410:	2300      	movs	r3, #0
 8000412:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000414:	2301      	movs	r3, #1
 8000416:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000418:	2300      	movs	r3, #0
 800041a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800041c:	230a      	movs	r3, #10
 800041e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000420:	f107 030c 	add.w	r3, r7, #12
 8000424:	4619      	mov	r1, r3
 8000426:	480d      	ldr	r0, [pc, #52]	; (800045c <MX_TIM1_Init+0xa8>)
 8000428:	f002 f8f5 	bl	8002616 <HAL_TIM_Encoder_Init>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000432:	f000 fa07 	bl	8000844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000436:	2300      	movs	r3, #0
 8000438:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800043a:	2300      	movs	r3, #0
 800043c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	4619      	mov	r1, r3
 8000442:	4806      	ldr	r0, [pc, #24]	; (800045c <MX_TIM1_Init+0xa8>)
 8000444:	f002 fd68 	bl	8002f18 <HAL_TIMEx_MasterConfigSynchronization>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800044e:	f000 f9f9 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000452:	bf00      	nop
 8000454:	3730      	adds	r7, #48	; 0x30
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	200000ac 	.word	0x200000ac
 8000460:	40012c00 	.word	0x40012c00

08000464 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b08c      	sub	sp, #48	; 0x30
 8000468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800046a:	f107 030c 	add.w	r3, r7, #12
 800046e:	2224      	movs	r2, #36	; 0x24
 8000470:	2100      	movs	r1, #0
 8000472:	4618      	mov	r0, r3
 8000474:	f002 fe44 	bl	8003100 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000480:	4b21      	ldr	r3, [pc, #132]	; (8000508 <MX_TIM2_Init+0xa4>)
 8000482:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000486:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000488:	4b1f      	ldr	r3, [pc, #124]	; (8000508 <MX_TIM2_Init+0xa4>)
 800048a:	2200      	movs	r2, #0
 800048c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800048e:	4b1e      	ldr	r3, [pc, #120]	; (8000508 <MX_TIM2_Init+0xa4>)
 8000490:	2200      	movs	r2, #0
 8000492:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000494:	4b1c      	ldr	r3, [pc, #112]	; (8000508 <MX_TIM2_Init+0xa4>)
 8000496:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800049a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800049c:	4b1a      	ldr	r3, [pc, #104]	; (8000508 <MX_TIM2_Init+0xa4>)
 800049e:	2200      	movs	r2, #0
 80004a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004a2:	4b19      	ldr	r3, [pc, #100]	; (8000508 <MX_TIM2_Init+0xa4>)
 80004a4:	2280      	movs	r2, #128	; 0x80
 80004a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80004a8:	2303      	movs	r3, #3
 80004aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80004ac:	2300      	movs	r3, #0
 80004ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80004b0:	2301      	movs	r3, #1
 80004b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80004b4:	2300      	movs	r3, #0
 80004b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 80004b8:	2301      	movs	r3, #1
 80004ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80004bc:	2300      	movs	r3, #0
 80004be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80004c0:	2301      	movs	r3, #1
 80004c2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80004c4:	2300      	movs	r3, #0
 80004c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 80004c8:	2301      	movs	r3, #1
 80004ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80004cc:	f107 030c 	add.w	r3, r7, #12
 80004d0:	4619      	mov	r1, r3
 80004d2:	480d      	ldr	r0, [pc, #52]	; (8000508 <MX_TIM2_Init+0xa4>)
 80004d4:	f002 f89f 	bl	8002616 <HAL_TIM_Encoder_Init>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80004de:	f000 f9b1 	bl	8000844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004e2:	2300      	movs	r3, #0
 80004e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004e6:	2300      	movs	r3, #0
 80004e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	4619      	mov	r1, r3
 80004ee:	4806      	ldr	r0, [pc, #24]	; (8000508 <MX_TIM2_Init+0xa4>)
 80004f0:	f002 fd12 	bl	8002f18 <HAL_TIMEx_MasterConfigSynchronization>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80004fa:	f000 f9a3 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004fe:	bf00      	nop
 8000500:	3730      	adds	r7, #48	; 0x30
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	200000f4 	.word	0x200000f4

0800050c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b08a      	sub	sp, #40	; 0x28
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000512:	f107 0320 	add.w	r3, r7, #32
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]
 8000528:	611a      	str	r2, [r3, #16]
 800052a:	615a      	str	r2, [r3, #20]
 800052c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800052e:	4b27      	ldr	r3, [pc, #156]	; (80005cc <MX_TIM3_Init+0xc0>)
 8000530:	4a27      	ldr	r2, [pc, #156]	; (80005d0 <MX_TIM3_Init+0xc4>)
 8000532:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48;
 8000534:	4b25      	ldr	r3, [pc, #148]	; (80005cc <MX_TIM3_Init+0xc0>)
 8000536:	2230      	movs	r2, #48	; 0x30
 8000538:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800053a:	4b24      	ldr	r3, [pc, #144]	; (80005cc <MX_TIM3_Init+0xc0>)
 800053c:	2200      	movs	r2, #0
 800053e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 8000540:	4b22      	ldr	r3, [pc, #136]	; (80005cc <MX_TIM3_Init+0xc0>)
 8000542:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000546:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000548:	4b20      	ldr	r3, [pc, #128]	; (80005cc <MX_TIM3_Init+0xc0>)
 800054a:	2200      	movs	r2, #0
 800054c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800054e:	4b1f      	ldr	r3, [pc, #124]	; (80005cc <MX_TIM3_Init+0xc0>)
 8000550:	2280      	movs	r2, #128	; 0x80
 8000552:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000554:	481d      	ldr	r0, [pc, #116]	; (80005cc <MX_TIM3_Init+0xc0>)
 8000556:	f002 f80f 	bl	8002578 <HAL_TIM_PWM_Init>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000560:	f000 f970 	bl	8000844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000564:	2300      	movs	r3, #0
 8000566:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000568:	2300      	movs	r3, #0
 800056a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800056c:	f107 0320 	add.w	r3, r7, #32
 8000570:	4619      	mov	r1, r3
 8000572:	4816      	ldr	r0, [pc, #88]	; (80005cc <MX_TIM3_Init+0xc0>)
 8000574:	f002 fcd0 	bl	8002f18 <HAL_TIMEx_MasterConfigSynchronization>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800057e:	f000 f961 	bl	8000844 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000582:	2360      	movs	r3, #96	; 0x60
 8000584:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800058a:	2300      	movs	r3, #0
 800058c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800058e:	2300      	movs	r3, #0
 8000590:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2200      	movs	r2, #0
 8000596:	4619      	mov	r1, r3
 8000598:	480c      	ldr	r0, [pc, #48]	; (80005cc <MX_TIM3_Init+0xc0>)
 800059a:	f002 f9e7 	bl	800296c <HAL_TIM_PWM_ConfigChannel>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80005a4:	f000 f94e 	bl	8000844 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	2204      	movs	r2, #4
 80005ac:	4619      	mov	r1, r3
 80005ae:	4807      	ldr	r0, [pc, #28]	; (80005cc <MX_TIM3_Init+0xc0>)
 80005b0:	f002 f9dc 	bl	800296c <HAL_TIM_PWM_ConfigChannel>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80005ba:	f000 f943 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80005be:	4803      	ldr	r0, [pc, #12]	; (80005cc <MX_TIM3_Init+0xc0>)
 80005c0:	f000 fa98 	bl	8000af4 <HAL_TIM_MspPostInit>

}
 80005c4:	bf00      	nop
 80005c6:	3728      	adds	r7, #40	; 0x28
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	2000013c 	.word	0x2000013c
 80005d0:	40000400 	.word	0x40000400

080005d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08a      	sub	sp, #40	; 0x28
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]
 80005f2:	615a      	str	r2, [r3, #20]
 80005f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80005f6:	4b27      	ldr	r3, [pc, #156]	; (8000694 <MX_TIM4_Init+0xc0>)
 80005f8:	4a27      	ldr	r2, [pc, #156]	; (8000698 <MX_TIM4_Init+0xc4>)
 80005fa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48;
 80005fc:	4b25      	ldr	r3, [pc, #148]	; (8000694 <MX_TIM4_Init+0xc0>)
 80005fe:	2230      	movs	r2, #48	; 0x30
 8000600:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000602:	4b24      	ldr	r3, [pc, #144]	; (8000694 <MX_TIM4_Init+0xc0>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000608:	4b22      	ldr	r3, [pc, #136]	; (8000694 <MX_TIM4_Init+0xc0>)
 800060a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800060e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000610:	4b20      	ldr	r3, [pc, #128]	; (8000694 <MX_TIM4_Init+0xc0>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000616:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <MX_TIM4_Init+0xc0>)
 8000618:	2280      	movs	r2, #128	; 0x80
 800061a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800061c:	481d      	ldr	r0, [pc, #116]	; (8000694 <MX_TIM4_Init+0xc0>)
 800061e:	f001 ffab 	bl	8002578 <HAL_TIM_PWM_Init>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000628:	f000 f90c 	bl	8000844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800062c:	2300      	movs	r3, #0
 800062e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000630:	2300      	movs	r3, #0
 8000632:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000634:	f107 0320 	add.w	r3, r7, #32
 8000638:	4619      	mov	r1, r3
 800063a:	4816      	ldr	r0, [pc, #88]	; (8000694 <MX_TIM4_Init+0xc0>)
 800063c:	f002 fc6c 	bl	8002f18 <HAL_TIMEx_MasterConfigSynchronization>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000646:	f000 f8fd 	bl	8000844 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800064a:	2360      	movs	r3, #96	; 0x60
 800064c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	2204      	movs	r2, #4
 800065e:	4619      	mov	r1, r3
 8000660:	480c      	ldr	r0, [pc, #48]	; (8000694 <MX_TIM4_Init+0xc0>)
 8000662:	f002 f983 	bl	800296c <HAL_TIM_PWM_ConfigChannel>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800066c:	f000 f8ea 	bl	8000844 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2208      	movs	r2, #8
 8000674:	4619      	mov	r1, r3
 8000676:	4807      	ldr	r0, [pc, #28]	; (8000694 <MX_TIM4_Init+0xc0>)
 8000678:	f002 f978 	bl	800296c <HAL_TIM_PWM_ConfigChannel>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000682:	f000 f8df 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000686:	4803      	ldr	r0, [pc, #12]	; (8000694 <MX_TIM4_Init+0xc0>)
 8000688:	f000 fa34 	bl	8000af4 <HAL_TIM_MspPostInit>

}
 800068c:	bf00      	nop
 800068e:	3728      	adds	r7, #40	; 0x28
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000184 	.word	0x20000184
 8000698:	40000800 	.word	0x40000800

0800069c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80006a0:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <MX_USB_PCD_Init+0x3c>)
 80006a2:	4a0e      	ldr	r2, [pc, #56]	; (80006dc <MX_USB_PCD_Init+0x40>)
 80006a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_USB_PCD_Init+0x3c>)
 80006a8:	2208      	movs	r2, #8
 80006aa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80006ac:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <MX_USB_PCD_Init+0x3c>)
 80006ae:	2202      	movs	r2, #2
 80006b0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_USB_PCD_Init+0x3c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80006b8:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <MX_USB_PCD_Init+0x3c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_USB_PCD_Init+0x3c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <MX_USB_PCD_Init+0x3c>)
 80006c6:	f001 f98f 	bl	80019e8 <HAL_PCD_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80006d0:	f000 f8b8 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	200001cc 	.word	0x200001cc
 80006dc:	40005c00 	.word	0x40005c00

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 0310 	add.w	r3, r7, #16
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006f4:	4b4f      	ldr	r3, [pc, #316]	; (8000834 <MX_GPIO_Init+0x154>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	4a4e      	ldr	r2, [pc, #312]	; (8000834 <MX_GPIO_Init+0x154>)
 80006fa:	f043 0320 	orr.w	r3, r3, #32
 80006fe:	6193      	str	r3, [r2, #24]
 8000700:	4b4c      	ldr	r3, [pc, #304]	; (8000834 <MX_GPIO_Init+0x154>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	f003 0320 	and.w	r3, r3, #32
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070c:	4b49      	ldr	r3, [pc, #292]	; (8000834 <MX_GPIO_Init+0x154>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	4a48      	ldr	r2, [pc, #288]	; (8000834 <MX_GPIO_Init+0x154>)
 8000712:	f043 0304 	orr.w	r3, r3, #4
 8000716:	6193      	str	r3, [r2, #24]
 8000718:	4b46      	ldr	r3, [pc, #280]	; (8000834 <MX_GPIO_Init+0x154>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	f003 0304 	and.w	r3, r3, #4
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000724:	4b43      	ldr	r3, [pc, #268]	; (8000834 <MX_GPIO_Init+0x154>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	4a42      	ldr	r2, [pc, #264]	; (8000834 <MX_GPIO_Init+0x154>)
 800072a:	f043 0308 	orr.w	r3, r3, #8
 800072e:	6193      	str	r3, [r2, #24]
 8000730:	4b40      	ldr	r3, [pc, #256]	; (8000834 <MX_GPIO_Init+0x154>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	f003 0308 	and.w	r3, r3, #8
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Y10_Pin|Y11_Pin|Y7_Pin, GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8000742:	483d      	ldr	r0, [pc, #244]	; (8000838 <MX_GPIO_Init+0x158>)
 8000744:	f000 ffb8 	bl	80016b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Y3_Pin|Y4_Pin|Y5_Pin|Y6_Pin, GPIO_PIN_RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800074e:	483b      	ldr	r0, [pc, #236]	; (800083c <MX_GPIO_Init+0x15c>)
 8000750:	f000 ffb2 	bl	80016b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000754:	2308      	movs	r3, #8
 8000756:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000758:	2303      	movs	r3, #3
 800075a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075c:	f107 0310 	add.w	r3, r7, #16
 8000760:	4619      	mov	r1, r3
 8000762:	4835      	ldr	r0, [pc, #212]	; (8000838 <MX_GPIO_Init+0x158>)
 8000764:	f000 fe24 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Y10_Pin Y11_Pin Y7_Pin */
  GPIO_InitStruct.Pin = Y10_Pin|Y11_Pin|Y7_Pin;
 8000768:	f44f 6386 	mov.w	r3, #1072	; 0x430
 800076c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076e:	2301      	movs	r3, #1
 8000770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2302      	movs	r3, #2
 8000778:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077a:	f107 0310 	add.w	r3, r7, #16
 800077e:	4619      	mov	r1, r3
 8000780:	482d      	ldr	r0, [pc, #180]	; (8000838 <MX_GPIO_Init+0x158>)
 8000782:	f000 fe15 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : X0_Pin X1_Pin */
  GPIO_InitStruct.Pin = X0_Pin|X1_Pin;
 8000786:	2303      	movs	r3, #3
 8000788:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000792:	f107 0310 	add.w	r3, r7, #16
 8000796:	4619      	mov	r1, r3
 8000798:	4828      	ldr	r0, [pc, #160]	; (800083c <MX_GPIO_Init+0x15c>)
 800079a:	f000 fe09 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800079e:	2304      	movs	r3, #4
 80007a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007a2:	2303      	movs	r3, #3
 80007a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a6:	f107 0310 	add.w	r3, r7, #16
 80007aa:	4619      	mov	r1, r3
 80007ac:	4823      	ldr	r0, [pc, #140]	; (800083c <MX_GPIO_Init+0x15c>)
 80007ae:	f000 fdff 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Y3_Pin Y4_Pin Y5_Pin Y6_Pin */
  GPIO_InitStruct.Pin = Y3_Pin|Y4_Pin|Y5_Pin|Y6_Pin;
 80007b2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80007b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b8:	2301      	movs	r3, #1
 80007ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2302      	movs	r3, #2
 80007c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c4:	f107 0310 	add.w	r3, r7, #16
 80007c8:	4619      	mov	r1, r3
 80007ca:	481c      	ldr	r0, [pc, #112]	; (800083c <MX_GPIO_Init+0x15c>)
 80007cc:	f000 fdf0 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : X2_Pin */
  GPIO_InitStruct.Pin = X2_Pin;
 80007d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007da:	2301      	movs	r3, #1
 80007dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(X2_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 0310 	add.w	r3, r7, #16
 80007e2:	4619      	mov	r1, r3
 80007e4:	4814      	ldr	r0, [pc, #80]	; (8000838 <MX_GPIO_Init+0x158>)
 80007e6:	f000 fde3 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : X3_Pin X4_Pin X7_Pin */
  GPIO_InitStruct.Pin = X3_Pin|X4_Pin|X7_Pin;
 80007ea:	f44f 7306 	mov.w	r3, #536	; 0x218
 80007ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f8:	f107 0310 	add.w	r3, r7, #16
 80007fc:	4619      	mov	r1, r3
 80007fe:	480f      	ldr	r0, [pc, #60]	; (800083c <MX_GPIO_Init+0x15c>)
 8000800:	f000 fdd6 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : X5_Pin X6_Pin */
  GPIO_InitStruct.Pin = X5_Pin|X6_Pin;
 8000804:	2360      	movs	r3, #96	; 0x60
 8000806:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000808:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <MX_GPIO_Init+0x160>)
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800080c:	2301      	movs	r3, #1
 800080e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000810:	f107 0310 	add.w	r3, r7, #16
 8000814:	4619      	mov	r1, r3
 8000816:	4809      	ldr	r0, [pc, #36]	; (800083c <MX_GPIO_Init+0x15c>)
 8000818:	f000 fdca 	bl	80013b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 800081c:	2200      	movs	r2, #0
 800081e:	2102      	movs	r1, #2
 8000820:	2017      	movs	r0, #23
 8000822:	f000 fd8e 	bl	8001342 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000826:	2017      	movs	r0, #23
 8000828:	f000 fda7 	bl	800137a <HAL_NVIC_EnableIRQ>

}
 800082c:	bf00      	nop
 800082e:	3720      	adds	r7, #32
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40021000 	.word	0x40021000
 8000838:	40010800 	.word	0x40010800
 800083c:	40010c00 	.word	0x40010c00
 8000840:	10310000 	.word	0x10310000

08000844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000848:	b672      	cpsid	i
}
 800084a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 800084c:	e7fe      	b.n	800084c <Error_Handler+0x8>
	...

08000850 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <HAL_MspInit+0x5c>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	4a14      	ldr	r2, [pc, #80]	; (80008ac <HAL_MspInit+0x5c>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6193      	str	r3, [r2, #24]
 8000862:	4b12      	ldr	r3, [pc, #72]	; (80008ac <HAL_MspInit+0x5c>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086e:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <HAL_MspInit+0x5c>)
 8000870:	69db      	ldr	r3, [r3, #28]
 8000872:	4a0e      	ldr	r2, [pc, #56]	; (80008ac <HAL_MspInit+0x5c>)
 8000874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000878:	61d3      	str	r3, [r2, #28]
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <HAL_MspInit+0x5c>)
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000886:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <HAL_MspInit+0x60>)
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <HAL_MspInit+0x60>)
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a2:	bf00      	nop
 80008a4:	3714      	adds	r7, #20
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr
 80008ac:	40021000 	.word	0x40021000
 80008b0:	40010000 	.word	0x40010000

080008b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 0310 	add.w	r3, r7, #16
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a14      	ldr	r2, [pc, #80]	; (8000920 <HAL_ADC_MspInit+0x6c>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d121      	bne.n	8000918 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008d4:	4b13      	ldr	r3, [pc, #76]	; (8000924 <HAL_ADC_MspInit+0x70>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	4a12      	ldr	r2, [pc, #72]	; (8000924 <HAL_ADC_MspInit+0x70>)
 80008da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008de:	6193      	str	r3, [r2, #24]
 80008e0:	4b10      	ldr	r3, [pc, #64]	; (8000924 <HAL_ADC_MspInit+0x70>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ec:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <HAL_ADC_MspInit+0x70>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	4a0c      	ldr	r2, [pc, #48]	; (8000924 <HAL_ADC_MspInit+0x70>)
 80008f2:	f043 0304 	orr.w	r3, r3, #4
 80008f6:	6193      	str	r3, [r2, #24]
 80008f8:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <HAL_ADC_MspInit+0x70>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	f003 0304 	and.w	r3, r3, #4
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000904:	2304      	movs	r3, #4
 8000906:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000908:	2303      	movs	r3, #3
 800090a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090c:	f107 0310 	add.w	r3, r7, #16
 8000910:	4619      	mov	r1, r3
 8000912:	4805      	ldr	r0, [pc, #20]	; (8000928 <HAL_ADC_MspInit+0x74>)
 8000914:	f000 fd4c 	bl	80013b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000918:	bf00      	nop
 800091a:	3720      	adds	r7, #32
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40012400 	.word	0x40012400
 8000924:	40021000 	.word	0x40021000
 8000928:	40010800 	.word	0x40010800

0800092c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 0310 	add.w	r3, r7, #16
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a16      	ldr	r2, [pc, #88]	; (80009a0 <HAL_I2C_MspInit+0x74>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d124      	bne.n	8000996 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800094c:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <HAL_I2C_MspInit+0x78>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	4a14      	ldr	r2, [pc, #80]	; (80009a4 <HAL_I2C_MspInit+0x78>)
 8000952:	f043 0308 	orr.w	r3, r3, #8
 8000956:	6193      	str	r3, [r2, #24]
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <HAL_I2C_MspInit+0x78>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	f003 0308 	and.w	r3, r3, #8
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8000964:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000968:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800096a:	2312      	movs	r3, #18
 800096c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800096e:	2303      	movs	r3, #3
 8000970:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000972:	f107 0310 	add.w	r3, r7, #16
 8000976:	4619      	mov	r1, r3
 8000978:	480b      	ldr	r0, [pc, #44]	; (80009a8 <HAL_I2C_MspInit+0x7c>)
 800097a:	f000 fd19 	bl	80013b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <HAL_I2C_MspInit+0x78>)
 8000980:	69db      	ldr	r3, [r3, #28]
 8000982:	4a08      	ldr	r2, [pc, #32]	; (80009a4 <HAL_I2C_MspInit+0x78>)
 8000984:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000988:	61d3      	str	r3, [r2, #28]
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_I2C_MspInit+0x78>)
 800098c:	69db      	ldr	r3, [r3, #28]
 800098e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000996:	bf00      	nop
 8000998:	3720      	adds	r7, #32
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40005800 	.word	0x40005800
 80009a4:	40021000 	.word	0x40021000
 80009a8:	40010c00 	.word	0x40010c00

080009ac <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	; 0x28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 0318 	add.w	r3, r7, #24
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a2b      	ldr	r2, [pc, #172]	; (8000a74 <HAL_TIM_Encoder_MspInit+0xc8>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d125      	bne.n	8000a18 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009cc:	4b2a      	ldr	r3, [pc, #168]	; (8000a78 <HAL_TIM_Encoder_MspInit+0xcc>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	4a29      	ldr	r2, [pc, #164]	; (8000a78 <HAL_TIM_Encoder_MspInit+0xcc>)
 80009d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009d6:	6193      	str	r3, [r2, #24]
 80009d8:	4b27      	ldr	r3, [pc, #156]	; (8000a78 <HAL_TIM_Encoder_MspInit+0xcc>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009e0:	617b      	str	r3, [r7, #20]
 80009e2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e4:	4b24      	ldr	r3, [pc, #144]	; (8000a78 <HAL_TIM_Encoder_MspInit+0xcc>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	4a23      	ldr	r2, [pc, #140]	; (8000a78 <HAL_TIM_Encoder_MspInit+0xcc>)
 80009ea:	f043 0304 	orr.w	r3, r3, #4
 80009ee:	6193      	str	r3, [r2, #24]
 80009f0:	4b21      	ldr	r3, [pc, #132]	; (8000a78 <HAL_TIM_Encoder_MspInit+0xcc>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	f003 0304 	and.w	r3, r3, #4
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ECD_1A_Pin|ECD_1B_Pin;
 80009fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0a:	f107 0318 	add.w	r3, r7, #24
 8000a0e:	4619      	mov	r1, r3
 8000a10:	481a      	ldr	r0, [pc, #104]	; (8000a7c <HAL_TIM_Encoder_MspInit+0xd0>)
 8000a12:	f000 fccd 	bl	80013b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a16:	e028      	b.n	8000a6a <HAL_TIM_Encoder_MspInit+0xbe>
  else if(htim_encoder->Instance==TIM2)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a20:	d123      	bne.n	8000a6a <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a22:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <HAL_TIM_Encoder_MspInit+0xcc>)
 8000a24:	69db      	ldr	r3, [r3, #28]
 8000a26:	4a14      	ldr	r2, [pc, #80]	; (8000a78 <HAL_TIM_Encoder_MspInit+0xcc>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	61d3      	str	r3, [r2, #28]
 8000a2e:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <HAL_TIM_Encoder_MspInit+0xcc>)
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <HAL_TIM_Encoder_MspInit+0xcc>)
 8000a3c:	699b      	ldr	r3, [r3, #24]
 8000a3e:	4a0e      	ldr	r2, [pc, #56]	; (8000a78 <HAL_TIM_Encoder_MspInit+0xcc>)
 8000a40:	f043 0304 	orr.w	r3, r3, #4
 8000a44:	6193      	str	r3, [r2, #24]
 8000a46:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <HAL_TIM_Encoder_MspInit+0xcc>)
 8000a48:	699b      	ldr	r3, [r3, #24]
 8000a4a:	f003 0304 	and.w	r3, r3, #4
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ECD_2A_Pin|ECD_2B_Pin;
 8000a52:	2303      	movs	r3, #3
 8000a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5e:	f107 0318 	add.w	r3, r7, #24
 8000a62:	4619      	mov	r1, r3
 8000a64:	4805      	ldr	r0, [pc, #20]	; (8000a7c <HAL_TIM_Encoder_MspInit+0xd0>)
 8000a66:	f000 fca3 	bl	80013b0 <HAL_GPIO_Init>
}
 8000a6a:	bf00      	nop
 8000a6c:	3728      	adds	r7, #40	; 0x28
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40012c00 	.word	0x40012c00
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	40010800 	.word	0x40010800

08000a80 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a16      	ldr	r2, [pc, #88]	; (8000ae8 <HAL_TIM_PWM_MspInit+0x68>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d10c      	bne.n	8000aac <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a92:	4b16      	ldr	r3, [pc, #88]	; (8000aec <HAL_TIM_PWM_MspInit+0x6c>)
 8000a94:	69db      	ldr	r3, [r3, #28]
 8000a96:	4a15      	ldr	r2, [pc, #84]	; (8000aec <HAL_TIM_PWM_MspInit+0x6c>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	61d3      	str	r3, [r2, #28]
 8000a9e:	4b13      	ldr	r3, [pc, #76]	; (8000aec <HAL_TIM_PWM_MspInit+0x6c>)
 8000aa0:	69db      	ldr	r3, [r3, #28]
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000aaa:	e018      	b.n	8000ade <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM4)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a0f      	ldr	r2, [pc, #60]	; (8000af0 <HAL_TIM_PWM_MspInit+0x70>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d113      	bne.n	8000ade <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <HAL_TIM_PWM_MspInit+0x6c>)
 8000ab8:	69db      	ldr	r3, [r3, #28]
 8000aba:	4a0c      	ldr	r2, [pc, #48]	; (8000aec <HAL_TIM_PWM_MspInit+0x6c>)
 8000abc:	f043 0304 	orr.w	r3, r3, #4
 8000ac0:	61d3      	str	r3, [r2, #28]
 8000ac2:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <HAL_TIM_PWM_MspInit+0x6c>)
 8000ac4:	69db      	ldr	r3, [r3, #28]
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	201e      	movs	r0, #30
 8000ad4:	f000 fc35 	bl	8001342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000ad8:	201e      	movs	r0, #30
 8000ada:	f000 fc4e 	bl	800137a <HAL_NVIC_EnableIRQ>
}
 8000ade:	bf00      	nop
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40000400 	.word	0x40000400
 8000aec:	40021000 	.word	0x40021000
 8000af0:	40000800 	.word	0x40000800

08000af4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b088      	sub	sp, #32
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0310 	add.w	r3, r7, #16
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a1f      	ldr	r2, [pc, #124]	; (8000b8c <HAL_TIM_MspPostInit+0x98>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d118      	bne.n	8000b46 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b14:	4b1e      	ldr	r3, [pc, #120]	; (8000b90 <HAL_TIM_MspPostInit+0x9c>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	4a1d      	ldr	r2, [pc, #116]	; (8000b90 <HAL_TIM_MspPostInit+0x9c>)
 8000b1a:	f043 0304 	orr.w	r3, r3, #4
 8000b1e:	6193      	str	r3, [r2, #24]
 8000b20:	4b1b      	ldr	r3, [pc, #108]	; (8000b90 <HAL_TIM_MspPostInit+0x9c>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	f003 0304 	and.w	r3, r3, #4
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWM_1A_Pin|PWM_1B_Pin;
 8000b2c:	23c0      	movs	r3, #192	; 0xc0
 8000b2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b30:	2302      	movs	r3, #2
 8000b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2302      	movs	r3, #2
 8000b36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b38:	f107 0310 	add.w	r3, r7, #16
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4815      	ldr	r0, [pc, #84]	; (8000b94 <HAL_TIM_MspPostInit+0xa0>)
 8000b40:	f000 fc36 	bl	80013b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000b44:	e01d      	b.n	8000b82 <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM4)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a13      	ldr	r2, [pc, #76]	; (8000b98 <HAL_TIM_MspPostInit+0xa4>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d118      	bne.n	8000b82 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_TIM_MspPostInit+0x9c>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_TIM_MspPostInit+0x9c>)
 8000b56:	f043 0308 	orr.w	r3, r3, #8
 8000b5a:	6193      	str	r3, [r2, #24]
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_TIM_MspPostInit+0x9c>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	f003 0308 	and.w	r3, r3, #8
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_2A_Pin|PWM_2B_Pin;
 8000b68:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000b6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2302      	movs	r3, #2
 8000b74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b76:	f107 0310 	add.w	r3, r7, #16
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4807      	ldr	r0, [pc, #28]	; (8000b9c <HAL_TIM_MspPostInit+0xa8>)
 8000b7e:	f000 fc17 	bl	80013b0 <HAL_GPIO_Init>
}
 8000b82:	bf00      	nop
 8000b84:	3720      	adds	r7, #32
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40000400 	.word	0x40000400
 8000b90:	40021000 	.word	0x40021000
 8000b94:	40010800 	.word	0x40010800
 8000b98:	40000800 	.word	0x40000800
 8000b9c:	40010c00 	.word	0x40010c00

08000ba0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a09      	ldr	r2, [pc, #36]	; (8000bd4 <HAL_PCD_MspInit+0x34>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d10b      	bne.n	8000bca <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <HAL_PCD_MspInit+0x38>)
 8000bb4:	69db      	ldr	r3, [r3, #28]
 8000bb6:	4a08      	ldr	r2, [pc, #32]	; (8000bd8 <HAL_PCD_MspInit+0x38>)
 8000bb8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000bbc:	61d3      	str	r3, [r2, #28]
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_PCD_MspInit+0x38>)
 8000bc0:	69db      	ldr	r3, [r3, #28]
 8000bc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000bca:	bf00      	nop
 8000bcc:	3714      	adds	r7, #20
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr
 8000bd4:	40005c00 	.word	0x40005c00
 8000bd8:	40021000 	.word	0x40021000

08000bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <NMI_Handler+0x4>

08000be2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <HardFault_Handler+0x4>

08000be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <MemManage_Handler+0x4>

08000bee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <BusFault_Handler+0x4>

08000bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <UsageFault_Handler+0x4>

08000bfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr

08000c06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr

08000c12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr

08000c1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c22:	f000 f889 	bl	8000d38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(X5_Pin);
 8000c2e:	2020      	movs	r0, #32
 8000c30:	f000 fd74 	bl	800171c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(X6_Pin);
 8000c34:	2040      	movs	r0, #64	; 0x40
 8000c36:	f000 fd71 	bl	800171c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000c44:	4802      	ldr	r0, [pc, #8]	; (8000c50 <TIM4_IRQHandler+0x10>)
 8000c46:	f001 fd88 	bl	800275a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000184 	.word	0x20000184

08000c54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr

08000c60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c60:	480c      	ldr	r0, [pc, #48]	; (8000c94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c62:	490d      	ldr	r1, [pc, #52]	; (8000c98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c64:	4a0d      	ldr	r2, [pc, #52]	; (8000c9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c68:	e002      	b.n	8000c70 <LoopCopyDataInit>

08000c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6e:	3304      	adds	r3, #4

08000c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c74:	d3f9      	bcc.n	8000c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c76:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c78:	4c0a      	ldr	r4, [pc, #40]	; (8000ca4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c7c:	e001      	b.n	8000c82 <LoopFillZerobss>

08000c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c80:	3204      	adds	r2, #4

08000c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c84:	d3fb      	bcc.n	8000c7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c86:	f7ff ffe5 	bl	8000c54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c8a:	f002 fa15 	bl	80030b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c8e:	f7ff faa9 	bl	80001e4 <main>
  bx lr
 8000c92:	4770      	bx	lr
  ldr r0, =_sdata
 8000c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c98:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c9c:	08003158 	.word	0x08003158
  ldr r2, =_sbss
 8000ca0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ca4:	200004bc 	.word	0x200004bc

08000ca8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ca8:	e7fe      	b.n	8000ca8 <ADC1_2_IRQHandler>
	...

08000cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <HAL_Init+0x28>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a07      	ldr	r2, [pc, #28]	; (8000cd4 <HAL_Init+0x28>)
 8000cb6:	f043 0310 	orr.w	r3, r3, #16
 8000cba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cbc:	2003      	movs	r0, #3
 8000cbe:	f000 fb35 	bl	800132c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc2:	200f      	movs	r0, #15
 8000cc4:	f000 f808 	bl	8000cd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc8:	f7ff fdc2 	bl	8000850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40022000 	.word	0x40022000

08000cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <HAL_InitTick+0x54>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <HAL_InitTick+0x58>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	4619      	mov	r1, r3
 8000cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f000 fb4d 	bl	8001396 <HAL_SYSTICK_Config>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e00e      	b.n	8000d24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2b0f      	cmp	r3, #15
 8000d0a:	d80a      	bhi.n	8000d22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	6879      	ldr	r1, [r7, #4]
 8000d10:	f04f 30ff 	mov.w	r0, #4294967295
 8000d14:	f000 fb15 	bl	8001342 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d18:	4a06      	ldr	r2, [pc, #24]	; (8000d34 <HAL_InitTick+0x5c>)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	e000      	b.n	8000d24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000000 	.word	0x20000000
 8000d30:	20000008 	.word	0x20000008
 8000d34:	20000004 	.word	0x20000004

08000d38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d3c:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <HAL_IncTick+0x1c>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	461a      	mov	r2, r3
 8000d42:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <HAL_IncTick+0x20>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4413      	add	r3, r2
 8000d48:	4a03      	ldr	r2, [pc, #12]	; (8000d58 <HAL_IncTick+0x20>)
 8000d4a:	6013      	str	r3, [r2, #0]
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr
 8000d54:	20000008 	.word	0x20000008
 8000d58:	200004b8 	.word	0x200004b8

08000d5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d60:	4b02      	ldr	r3, [pc, #8]	; (8000d6c <HAL_GetTick+0x10>)
 8000d62:	681b      	ldr	r3, [r3, #0]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr
 8000d6c:	200004b8 	.word	0x200004b8

08000d70 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d101      	bne.n	8000d92 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e0be      	b.n	8000f10 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d109      	bne.n	8000db4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2200      	movs	r2, #0
 8000da4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2200      	movs	r2, #0
 8000daa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff fd80 	bl	80008b4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f000 f9ab 	bl	8001110 <ADC_ConversionStop_Disable>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc2:	f003 0310 	and.w	r3, r3, #16
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	f040 8099 	bne.w	8000efe <HAL_ADC_Init+0x18e>
 8000dcc:	7dfb      	ldrb	r3, [r7, #23]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	f040 8095 	bne.w	8000efe <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ddc:	f023 0302 	bic.w	r3, r3, #2
 8000de0:	f043 0202 	orr.w	r2, r3, #2
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000df0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	7b1b      	ldrb	r3, [r3, #12]
 8000df6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000df8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000dfa:	68ba      	ldr	r2, [r7, #8]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e08:	d003      	beq.n	8000e12 <HAL_ADC_Init+0xa2>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d102      	bne.n	8000e18 <HAL_ADC_Init+0xa8>
 8000e12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e16:	e000      	b.n	8000e1a <HAL_ADC_Init+0xaa>
 8000e18:	2300      	movs	r3, #0
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	7d1b      	ldrb	r3, [r3, #20]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d119      	bne.n	8000e5c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	7b1b      	ldrb	r3, [r3, #12]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d109      	bne.n	8000e44 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	3b01      	subs	r3, #1
 8000e36:	035a      	lsls	r2, r3, #13
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	e00b      	b.n	8000e5c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e48:	f043 0220 	orr.w	r2, r3, #32
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e54:	f043 0201 	orr.w	r2, r3, #1
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	689a      	ldr	r2, [r3, #8]
 8000e76:	4b28      	ldr	r3, [pc, #160]	; (8000f18 <HAL_ADC_Init+0x1a8>)
 8000e78:	4013      	ands	r3, r2
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	6812      	ldr	r2, [r2, #0]
 8000e7e:	68b9      	ldr	r1, [r7, #8]
 8000e80:	430b      	orrs	r3, r1
 8000e82:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e8c:	d003      	beq.n	8000e96 <HAL_ADC_Init+0x126>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d104      	bne.n	8000ea0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	691b      	ldr	r3, [r3, #16]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	051b      	lsls	r3, r3, #20
 8000e9e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	68fa      	ldr	r2, [r7, #12]
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	689a      	ldr	r2, [r3, #8]
 8000eba:	4b18      	ldr	r3, [pc, #96]	; (8000f1c <HAL_ADC_Init+0x1ac>)
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d10b      	bne.n	8000edc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ece:	f023 0303 	bic.w	r3, r3, #3
 8000ed2:	f043 0201 	orr.w	r2, r3, #1
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000eda:	e018      	b.n	8000f0e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee0:	f023 0312 	bic.w	r3, r3, #18
 8000ee4:	f043 0210 	orr.w	r2, r3, #16
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef0:	f043 0201 	orr.w	r2, r3, #1
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000efc:	e007      	b.n	8000f0e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f02:	f043 0210 	orr.w	r2, r3, #16
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	ffe1f7fd 	.word	0xffe1f7fd
 8000f1c:	ff1f0efe 	.word	0xff1f0efe

08000f20 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d101      	bne.n	8000f40 <HAL_ADC_ConfigChannel+0x20>
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	e0dc      	b.n	80010fa <HAL_ADC_ConfigChannel+0x1da>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2201      	movs	r2, #1
 8000f44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	2b06      	cmp	r3, #6
 8000f4e:	d81c      	bhi.n	8000f8a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685a      	ldr	r2, [r3, #4]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	4413      	add	r3, r2
 8000f60:	3b05      	subs	r3, #5
 8000f62:	221f      	movs	r2, #31
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	4019      	ands	r1, r3
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	6818      	ldr	r0, [r3, #0]
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685a      	ldr	r2, [r3, #4]
 8000f74:	4613      	mov	r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	4413      	add	r3, r2
 8000f7a:	3b05      	subs	r3, #5
 8000f7c:	fa00 f203 	lsl.w	r2, r0, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	430a      	orrs	r2, r1
 8000f86:	635a      	str	r2, [r3, #52]	; 0x34
 8000f88:	e03c      	b.n	8001004 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	2b0c      	cmp	r3, #12
 8000f90:	d81c      	bhi.n	8000fcc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685a      	ldr	r2, [r3, #4]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	3b23      	subs	r3, #35	; 0x23
 8000fa4:	221f      	movs	r2, #31
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	4019      	ands	r1, r3
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	6818      	ldr	r0, [r3, #0]
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685a      	ldr	r2, [r3, #4]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4413      	add	r3, r2
 8000fbc:	3b23      	subs	r3, #35	; 0x23
 8000fbe:	fa00 f203 	lsl.w	r2, r0, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	631a      	str	r2, [r3, #48]	; 0x30
 8000fca:	e01b      	b.n	8001004 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685a      	ldr	r2, [r3, #4]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	4413      	add	r3, r2
 8000fdc:	3b41      	subs	r3, #65	; 0x41
 8000fde:	221f      	movs	r2, #31
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	4019      	ands	r1, r3
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	6818      	ldr	r0, [r3, #0]
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	4413      	add	r3, r2
 8000ff6:	3b41      	subs	r3, #65	; 0x41
 8000ff8:	fa00 f203 	lsl.w	r2, r0, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	430a      	orrs	r2, r1
 8001002:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b09      	cmp	r3, #9
 800100a:	d91c      	bls.n	8001046 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	68d9      	ldr	r1, [r3, #12]
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	4613      	mov	r3, r2
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	4413      	add	r3, r2
 800101c:	3b1e      	subs	r3, #30
 800101e:	2207      	movs	r2, #7
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	4019      	ands	r1, r3
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	6898      	ldr	r0, [r3, #8]
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4613      	mov	r3, r2
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	4413      	add	r3, r2
 8001036:	3b1e      	subs	r3, #30
 8001038:	fa00 f203 	lsl.w	r2, r0, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	430a      	orrs	r2, r1
 8001042:	60da      	str	r2, [r3, #12]
 8001044:	e019      	b.n	800107a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	6919      	ldr	r1, [r3, #16]
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4613      	mov	r3, r2
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	4413      	add	r3, r2
 8001056:	2207      	movs	r2, #7
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	4019      	ands	r1, r3
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	6898      	ldr	r0, [r3, #8]
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4613      	mov	r3, r2
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	4413      	add	r3, r2
 800106e:	fa00 f203 	lsl.w	r2, r0, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	430a      	orrs	r2, r1
 8001078:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2b10      	cmp	r3, #16
 8001080:	d003      	beq.n	800108a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001086:	2b11      	cmp	r3, #17
 8001088:	d132      	bne.n	80010f0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a1d      	ldr	r2, [pc, #116]	; (8001104 <HAL_ADC_ConfigChannel+0x1e4>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d125      	bne.n	80010e0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d126      	bne.n	80010f0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80010b0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2b10      	cmp	r3, #16
 80010b8:	d11a      	bne.n	80010f0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010ba:	4b13      	ldr	r3, [pc, #76]	; (8001108 <HAL_ADC_ConfigChannel+0x1e8>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a13      	ldr	r2, [pc, #76]	; (800110c <HAL_ADC_ConfigChannel+0x1ec>)
 80010c0:	fba2 2303 	umull	r2, r3, r2, r3
 80010c4:	0c9a      	lsrs	r2, r3, #18
 80010c6:	4613      	mov	r3, r2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4413      	add	r3, r2
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010d0:	e002      	b.n	80010d8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	3b01      	subs	r3, #1
 80010d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d1f9      	bne.n	80010d2 <HAL_ADC_ConfigChannel+0x1b2>
 80010de:	e007      	b.n	80010f0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e4:	f043 0220 	orr.w	r2, r3, #32
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3714      	adds	r7, #20
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr
 8001104:	40012400 	.word	0x40012400
 8001108:	20000000 	.word	0x20000000
 800110c:	431bde83 	.word	0x431bde83

08001110 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001118:	2300      	movs	r3, #0
 800111a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b01      	cmp	r3, #1
 8001128:	d12e      	bne.n	8001188 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	689a      	ldr	r2, [r3, #8]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f022 0201 	bic.w	r2, r2, #1
 8001138:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800113a:	f7ff fe0f 	bl	8000d5c <HAL_GetTick>
 800113e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001140:	e01b      	b.n	800117a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001142:	f7ff fe0b 	bl	8000d5c <HAL_GetTick>
 8001146:	4602      	mov	r2, r0
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	2b02      	cmp	r3, #2
 800114e:	d914      	bls.n	800117a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	2b01      	cmp	r3, #1
 800115c:	d10d      	bne.n	800117a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001162:	f043 0210 	orr.w	r2, r3, #16
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800116e:	f043 0201 	orr.w	r2, r3, #1
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e007      	b.n	800118a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	2b01      	cmp	r3, #1
 8001186:	d0dc      	beq.n	8001142 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <__NVIC_SetPriorityGrouping+0x44>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b0:	4013      	ands	r3, r2
 80011b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c6:	4a04      	ldr	r2, [pc, #16]	; (80011d8 <__NVIC_SetPriorityGrouping+0x44>)
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	60d3      	str	r3, [r2, #12]
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <__NVIC_GetPriorityGrouping+0x18>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	0a1b      	lsrs	r3, r3, #8
 80011e6:	f003 0307 	and.w	r3, r3, #7
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	2b00      	cmp	r3, #0
 8001208:	db0b      	blt.n	8001222 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	f003 021f 	and.w	r2, r3, #31
 8001210:	4906      	ldr	r1, [pc, #24]	; (800122c <__NVIC_EnableIRQ+0x34>)
 8001212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001216:	095b      	lsrs	r3, r3, #5
 8001218:	2001      	movs	r0, #1
 800121a:	fa00 f202 	lsl.w	r2, r0, r2
 800121e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr
 800122c:	e000e100 	.word	0xe000e100

08001230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	6039      	str	r1, [r7, #0]
 800123a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001240:	2b00      	cmp	r3, #0
 8001242:	db0a      	blt.n	800125a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	b2da      	uxtb	r2, r3
 8001248:	490c      	ldr	r1, [pc, #48]	; (800127c <__NVIC_SetPriority+0x4c>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	0112      	lsls	r2, r2, #4
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	440b      	add	r3, r1
 8001254:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001258:	e00a      	b.n	8001270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	b2da      	uxtb	r2, r3
 800125e:	4908      	ldr	r1, [pc, #32]	; (8001280 <__NVIC_SetPriority+0x50>)
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	3b04      	subs	r3, #4
 8001268:	0112      	lsls	r2, r2, #4
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	440b      	add	r3, r1
 800126e:	761a      	strb	r2, [r3, #24]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000e100 	.word	0xe000e100
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001284:	b480      	push	{r7}
 8001286:	b089      	sub	sp, #36	; 0x24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f1c3 0307 	rsb	r3, r3, #7
 800129e:	2b04      	cmp	r3, #4
 80012a0:	bf28      	it	cs
 80012a2:	2304      	movcs	r3, #4
 80012a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3304      	adds	r3, #4
 80012aa:	2b06      	cmp	r3, #6
 80012ac:	d902      	bls.n	80012b4 <NVIC_EncodePriority+0x30>
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3b03      	subs	r3, #3
 80012b2:	e000      	b.n	80012b6 <NVIC_EncodePriority+0x32>
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	f04f 32ff 	mov.w	r2, #4294967295
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43da      	mvns	r2, r3
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	401a      	ands	r2, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012cc:	f04f 31ff 	mov.w	r1, #4294967295
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	fa01 f303 	lsl.w	r3, r1, r3
 80012d6:	43d9      	mvns	r1, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012dc:	4313      	orrs	r3, r2
         );
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3724      	adds	r7, #36	; 0x24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr

080012e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012f8:	d301      	bcc.n	80012fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fa:	2301      	movs	r3, #1
 80012fc:	e00f      	b.n	800131e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012fe:	4a0a      	ldr	r2, [pc, #40]	; (8001328 <SysTick_Config+0x40>)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3b01      	subs	r3, #1
 8001304:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001306:	210f      	movs	r1, #15
 8001308:	f04f 30ff 	mov.w	r0, #4294967295
 800130c:	f7ff ff90 	bl	8001230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001310:	4b05      	ldr	r3, [pc, #20]	; (8001328 <SysTick_Config+0x40>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001316:	4b04      	ldr	r3, [pc, #16]	; (8001328 <SysTick_Config+0x40>)
 8001318:	2207      	movs	r2, #7
 800131a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	e000e010 	.word	0xe000e010

0800132c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ff2d 	bl	8001194 <__NVIC_SetPriorityGrouping>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001342:	b580      	push	{r7, lr}
 8001344:	b086      	sub	sp, #24
 8001346:	af00      	add	r7, sp, #0
 8001348:	4603      	mov	r3, r0
 800134a:	60b9      	str	r1, [r7, #8]
 800134c:	607a      	str	r2, [r7, #4]
 800134e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001354:	f7ff ff42 	bl	80011dc <__NVIC_GetPriorityGrouping>
 8001358:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	68b9      	ldr	r1, [r7, #8]
 800135e:	6978      	ldr	r0, [r7, #20]
 8001360:	f7ff ff90 	bl	8001284 <NVIC_EncodePriority>
 8001364:	4602      	mov	r2, r0
 8001366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136a:	4611      	mov	r1, r2
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff5f 	bl	8001230 <__NVIC_SetPriority>
}
 8001372:	bf00      	nop
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	4603      	mov	r3, r0
 8001382:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff35 	bl	80011f8 <__NVIC_EnableIRQ>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff ffa2 	bl	80012e8 <SysTick_Config>
 80013a4:	4603      	mov	r3, r0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b08b      	sub	sp, #44	; 0x2c
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ba:	2300      	movs	r3, #0
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013be:	2300      	movs	r3, #0
 80013c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c2:	e169      	b.n	8001698 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013c4:	2201      	movs	r2, #1
 80013c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	69fa      	ldr	r2, [r7, #28]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	429a      	cmp	r2, r3
 80013de:	f040 8158 	bne.w	8001692 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	4a9a      	ldr	r2, [pc, #616]	; (8001650 <HAL_GPIO_Init+0x2a0>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d05e      	beq.n	80014aa <HAL_GPIO_Init+0xfa>
 80013ec:	4a98      	ldr	r2, [pc, #608]	; (8001650 <HAL_GPIO_Init+0x2a0>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d875      	bhi.n	80014de <HAL_GPIO_Init+0x12e>
 80013f2:	4a98      	ldr	r2, [pc, #608]	; (8001654 <HAL_GPIO_Init+0x2a4>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d058      	beq.n	80014aa <HAL_GPIO_Init+0xfa>
 80013f8:	4a96      	ldr	r2, [pc, #600]	; (8001654 <HAL_GPIO_Init+0x2a4>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d86f      	bhi.n	80014de <HAL_GPIO_Init+0x12e>
 80013fe:	4a96      	ldr	r2, [pc, #600]	; (8001658 <HAL_GPIO_Init+0x2a8>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d052      	beq.n	80014aa <HAL_GPIO_Init+0xfa>
 8001404:	4a94      	ldr	r2, [pc, #592]	; (8001658 <HAL_GPIO_Init+0x2a8>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d869      	bhi.n	80014de <HAL_GPIO_Init+0x12e>
 800140a:	4a94      	ldr	r2, [pc, #592]	; (800165c <HAL_GPIO_Init+0x2ac>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d04c      	beq.n	80014aa <HAL_GPIO_Init+0xfa>
 8001410:	4a92      	ldr	r2, [pc, #584]	; (800165c <HAL_GPIO_Init+0x2ac>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d863      	bhi.n	80014de <HAL_GPIO_Init+0x12e>
 8001416:	4a92      	ldr	r2, [pc, #584]	; (8001660 <HAL_GPIO_Init+0x2b0>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d046      	beq.n	80014aa <HAL_GPIO_Init+0xfa>
 800141c:	4a90      	ldr	r2, [pc, #576]	; (8001660 <HAL_GPIO_Init+0x2b0>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d85d      	bhi.n	80014de <HAL_GPIO_Init+0x12e>
 8001422:	2b12      	cmp	r3, #18
 8001424:	d82a      	bhi.n	800147c <HAL_GPIO_Init+0xcc>
 8001426:	2b12      	cmp	r3, #18
 8001428:	d859      	bhi.n	80014de <HAL_GPIO_Init+0x12e>
 800142a:	a201      	add	r2, pc, #4	; (adr r2, 8001430 <HAL_GPIO_Init+0x80>)
 800142c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001430:	080014ab 	.word	0x080014ab
 8001434:	08001485 	.word	0x08001485
 8001438:	08001497 	.word	0x08001497
 800143c:	080014d9 	.word	0x080014d9
 8001440:	080014df 	.word	0x080014df
 8001444:	080014df 	.word	0x080014df
 8001448:	080014df 	.word	0x080014df
 800144c:	080014df 	.word	0x080014df
 8001450:	080014df 	.word	0x080014df
 8001454:	080014df 	.word	0x080014df
 8001458:	080014df 	.word	0x080014df
 800145c:	080014df 	.word	0x080014df
 8001460:	080014df 	.word	0x080014df
 8001464:	080014df 	.word	0x080014df
 8001468:	080014df 	.word	0x080014df
 800146c:	080014df 	.word	0x080014df
 8001470:	080014df 	.word	0x080014df
 8001474:	0800148d 	.word	0x0800148d
 8001478:	080014a1 	.word	0x080014a1
 800147c:	4a79      	ldr	r2, [pc, #484]	; (8001664 <HAL_GPIO_Init+0x2b4>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d013      	beq.n	80014aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001482:	e02c      	b.n	80014de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	623b      	str	r3, [r7, #32]
          break;
 800148a:	e029      	b.n	80014e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	3304      	adds	r3, #4
 8001492:	623b      	str	r3, [r7, #32]
          break;
 8001494:	e024      	b.n	80014e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	3308      	adds	r3, #8
 800149c:	623b      	str	r3, [r7, #32]
          break;
 800149e:	e01f      	b.n	80014e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	330c      	adds	r3, #12
 80014a6:	623b      	str	r3, [r7, #32]
          break;
 80014a8:	e01a      	b.n	80014e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d102      	bne.n	80014b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014b2:	2304      	movs	r3, #4
 80014b4:	623b      	str	r3, [r7, #32]
          break;
 80014b6:	e013      	b.n	80014e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d105      	bne.n	80014cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014c0:	2308      	movs	r3, #8
 80014c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	69fa      	ldr	r2, [r7, #28]
 80014c8:	611a      	str	r2, [r3, #16]
          break;
 80014ca:	e009      	b.n	80014e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014cc:	2308      	movs	r3, #8
 80014ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	69fa      	ldr	r2, [r7, #28]
 80014d4:	615a      	str	r2, [r3, #20]
          break;
 80014d6:	e003      	b.n	80014e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014d8:	2300      	movs	r3, #0
 80014da:	623b      	str	r3, [r7, #32]
          break;
 80014dc:	e000      	b.n	80014e0 <HAL_GPIO_Init+0x130>
          break;
 80014de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	2bff      	cmp	r3, #255	; 0xff
 80014e4:	d801      	bhi.n	80014ea <HAL_GPIO_Init+0x13a>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	e001      	b.n	80014ee <HAL_GPIO_Init+0x13e>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	3304      	adds	r3, #4
 80014ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	2bff      	cmp	r3, #255	; 0xff
 80014f4:	d802      	bhi.n	80014fc <HAL_GPIO_Init+0x14c>
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	e002      	b.n	8001502 <HAL_GPIO_Init+0x152>
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	3b08      	subs	r3, #8
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	210f      	movs	r1, #15
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	fa01 f303 	lsl.w	r3, r1, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	401a      	ands	r2, r3
 8001514:	6a39      	ldr	r1, [r7, #32]
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	fa01 f303 	lsl.w	r3, r1, r3
 800151c:	431a      	orrs	r2, r3
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152a:	2b00      	cmp	r3, #0
 800152c:	f000 80b1 	beq.w	8001692 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001530:	4b4d      	ldr	r3, [pc, #308]	; (8001668 <HAL_GPIO_Init+0x2b8>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	4a4c      	ldr	r2, [pc, #304]	; (8001668 <HAL_GPIO_Init+0x2b8>)
 8001536:	f043 0301 	orr.w	r3, r3, #1
 800153a:	6193      	str	r3, [r2, #24]
 800153c:	4b4a      	ldr	r3, [pc, #296]	; (8001668 <HAL_GPIO_Init+0x2b8>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001548:	4a48      	ldr	r2, [pc, #288]	; (800166c <HAL_GPIO_Init+0x2bc>)
 800154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154c:	089b      	lsrs	r3, r3, #2
 800154e:	3302      	adds	r3, #2
 8001550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001554:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001558:	f003 0303 	and.w	r3, r3, #3
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	220f      	movs	r2, #15
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	4013      	ands	r3, r2
 800156a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a40      	ldr	r2, [pc, #256]	; (8001670 <HAL_GPIO_Init+0x2c0>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d013      	beq.n	800159c <HAL_GPIO_Init+0x1ec>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4a3f      	ldr	r2, [pc, #252]	; (8001674 <HAL_GPIO_Init+0x2c4>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d00d      	beq.n	8001598 <HAL_GPIO_Init+0x1e8>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a3e      	ldr	r2, [pc, #248]	; (8001678 <HAL_GPIO_Init+0x2c8>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d007      	beq.n	8001594 <HAL_GPIO_Init+0x1e4>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a3d      	ldr	r2, [pc, #244]	; (800167c <HAL_GPIO_Init+0x2cc>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d101      	bne.n	8001590 <HAL_GPIO_Init+0x1e0>
 800158c:	2303      	movs	r3, #3
 800158e:	e006      	b.n	800159e <HAL_GPIO_Init+0x1ee>
 8001590:	2304      	movs	r3, #4
 8001592:	e004      	b.n	800159e <HAL_GPIO_Init+0x1ee>
 8001594:	2302      	movs	r3, #2
 8001596:	e002      	b.n	800159e <HAL_GPIO_Init+0x1ee>
 8001598:	2301      	movs	r3, #1
 800159a:	e000      	b.n	800159e <HAL_GPIO_Init+0x1ee>
 800159c:	2300      	movs	r3, #0
 800159e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015a0:	f002 0203 	and.w	r2, r2, #3
 80015a4:	0092      	lsls	r2, r2, #2
 80015a6:	4093      	lsls	r3, r2
 80015a8:	68fa      	ldr	r2, [r7, #12]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015ae:	492f      	ldr	r1, [pc, #188]	; (800166c <HAL_GPIO_Init+0x2bc>)
 80015b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b2:	089b      	lsrs	r3, r3, #2
 80015b4:	3302      	adds	r3, #2
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d006      	beq.n	80015d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015c8:	4b2d      	ldr	r3, [pc, #180]	; (8001680 <HAL_GPIO_Init+0x2d0>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	492c      	ldr	r1, [pc, #176]	; (8001680 <HAL_GPIO_Init+0x2d0>)
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	600b      	str	r3, [r1, #0]
 80015d4:	e006      	b.n	80015e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015d6:	4b2a      	ldr	r3, [pc, #168]	; (8001680 <HAL_GPIO_Init+0x2d0>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	43db      	mvns	r3, r3
 80015de:	4928      	ldr	r1, [pc, #160]	; (8001680 <HAL_GPIO_Init+0x2d0>)
 80015e0:	4013      	ands	r3, r2
 80015e2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d006      	beq.n	80015fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015f0:	4b23      	ldr	r3, [pc, #140]	; (8001680 <HAL_GPIO_Init+0x2d0>)
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	4922      	ldr	r1, [pc, #136]	; (8001680 <HAL_GPIO_Init+0x2d0>)
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	604b      	str	r3, [r1, #4]
 80015fc:	e006      	b.n	800160c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015fe:	4b20      	ldr	r3, [pc, #128]	; (8001680 <HAL_GPIO_Init+0x2d0>)
 8001600:	685a      	ldr	r2, [r3, #4]
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	43db      	mvns	r3, r3
 8001606:	491e      	ldr	r1, [pc, #120]	; (8001680 <HAL_GPIO_Init+0x2d0>)
 8001608:	4013      	ands	r3, r2
 800160a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d006      	beq.n	8001626 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001618:	4b19      	ldr	r3, [pc, #100]	; (8001680 <HAL_GPIO_Init+0x2d0>)
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	4918      	ldr	r1, [pc, #96]	; (8001680 <HAL_GPIO_Init+0x2d0>)
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	4313      	orrs	r3, r2
 8001622:	608b      	str	r3, [r1, #8]
 8001624:	e006      	b.n	8001634 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001626:	4b16      	ldr	r3, [pc, #88]	; (8001680 <HAL_GPIO_Init+0x2d0>)
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	43db      	mvns	r3, r3
 800162e:	4914      	ldr	r1, [pc, #80]	; (8001680 <HAL_GPIO_Init+0x2d0>)
 8001630:	4013      	ands	r3, r2
 8001632:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d021      	beq.n	8001684 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001640:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <HAL_GPIO_Init+0x2d0>)
 8001642:	68da      	ldr	r2, [r3, #12]
 8001644:	490e      	ldr	r1, [pc, #56]	; (8001680 <HAL_GPIO_Init+0x2d0>)
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	4313      	orrs	r3, r2
 800164a:	60cb      	str	r3, [r1, #12]
 800164c:	e021      	b.n	8001692 <HAL_GPIO_Init+0x2e2>
 800164e:	bf00      	nop
 8001650:	10320000 	.word	0x10320000
 8001654:	10310000 	.word	0x10310000
 8001658:	10220000 	.word	0x10220000
 800165c:	10210000 	.word	0x10210000
 8001660:	10120000 	.word	0x10120000
 8001664:	10110000 	.word	0x10110000
 8001668:	40021000 	.word	0x40021000
 800166c:	40010000 	.word	0x40010000
 8001670:	40010800 	.word	0x40010800
 8001674:	40010c00 	.word	0x40010c00
 8001678:	40011000 	.word	0x40011000
 800167c:	40011400 	.word	0x40011400
 8001680:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001684:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <HAL_GPIO_Init+0x304>)
 8001686:	68da      	ldr	r2, [r3, #12]
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	43db      	mvns	r3, r3
 800168c:	4909      	ldr	r1, [pc, #36]	; (80016b4 <HAL_GPIO_Init+0x304>)
 800168e:	4013      	ands	r3, r2
 8001690:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001694:	3301      	adds	r3, #1
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	fa22 f303 	lsr.w	r3, r2, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f47f ae8e 	bne.w	80013c4 <HAL_GPIO_Init+0x14>
  }
}
 80016a8:	bf00      	nop
 80016aa:	bf00      	nop
 80016ac:	372c      	adds	r7, #44	; 0x2c
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr
 80016b4:	40010400 	.word	0x40010400

080016b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	460b      	mov	r3, r1
 80016c2:	807b      	strh	r3, [r7, #2]
 80016c4:	4613      	mov	r3, r2
 80016c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016c8:	787b      	ldrb	r3, [r7, #1]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ce:	887a      	ldrh	r2, [r7, #2]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016d4:	e003      	b.n	80016de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016d6:	887b      	ldrh	r3, [r7, #2]
 80016d8:	041a      	lsls	r2, r3, #16
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	611a      	str	r2, [r3, #16]
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr

080016e8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016fa:	887a      	ldrh	r2, [r7, #2]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4013      	ands	r3, r2
 8001700:	041a      	lsls	r2, r3, #16
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	43d9      	mvns	r1, r3
 8001706:	887b      	ldrh	r3, [r7, #2]
 8001708:	400b      	ands	r3, r1
 800170a:	431a      	orrs	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	611a      	str	r2, [r3, #16]
}
 8001710:	bf00      	nop
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr
	...

0800171c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001728:	695a      	ldr	r2, [r3, #20]
 800172a:	88fb      	ldrh	r3, [r7, #6]
 800172c:	4013      	ands	r3, r2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d006      	beq.n	8001740 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001732:	4a05      	ldr	r2, [pc, #20]	; (8001748 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001734:	88fb      	ldrh	r3, [r7, #6]
 8001736:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001738:	88fb      	ldrh	r3, [r7, #6]
 800173a:	4618      	mov	r0, r3
 800173c:	f000 f806 	bl	800174c <HAL_GPIO_EXTI_Callback>
  }
}
 8001740:	bf00      	nop
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40010400 	.word	0x40010400

0800174c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr

08001760 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e12b      	b.n	80019ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2b00      	cmp	r3, #0
 800177c:	d106      	bne.n	800178c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff f8d0 	bl	800092c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2224      	movs	r2, #36	; 0x24
 8001790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f022 0201 	bic.w	r2, r2, #1
 80017a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017c4:	f000 fdf0 	bl	80023a8 <HAL_RCC_GetPCLK1Freq>
 80017c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	4a81      	ldr	r2, [pc, #516]	; (80019d4 <HAL_I2C_Init+0x274>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d807      	bhi.n	80017e4 <HAL_I2C_Init+0x84>
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	4a80      	ldr	r2, [pc, #512]	; (80019d8 <HAL_I2C_Init+0x278>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	bf94      	ite	ls
 80017dc:	2301      	movls	r3, #1
 80017de:	2300      	movhi	r3, #0
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	e006      	b.n	80017f2 <HAL_I2C_Init+0x92>
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4a7d      	ldr	r2, [pc, #500]	; (80019dc <HAL_I2C_Init+0x27c>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	bf94      	ite	ls
 80017ec:	2301      	movls	r3, #1
 80017ee:	2300      	movhi	r3, #0
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e0e7      	b.n	80019ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	4a78      	ldr	r2, [pc, #480]	; (80019e0 <HAL_I2C_Init+0x280>)
 80017fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001802:	0c9b      	lsrs	r3, r3, #18
 8001804:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	68ba      	ldr	r2, [r7, #8]
 8001816:	430a      	orrs	r2, r1
 8001818:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	4a6a      	ldr	r2, [pc, #424]	; (80019d4 <HAL_I2C_Init+0x274>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d802      	bhi.n	8001834 <HAL_I2C_Init+0xd4>
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	3301      	adds	r3, #1
 8001832:	e009      	b.n	8001848 <HAL_I2C_Init+0xe8>
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800183a:	fb02 f303 	mul.w	r3, r2, r3
 800183e:	4a69      	ldr	r2, [pc, #420]	; (80019e4 <HAL_I2C_Init+0x284>)
 8001840:	fba2 2303 	umull	r2, r3, r2, r3
 8001844:	099b      	lsrs	r3, r3, #6
 8001846:	3301      	adds	r3, #1
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	6812      	ldr	r2, [r2, #0]
 800184c:	430b      	orrs	r3, r1
 800184e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800185a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	495c      	ldr	r1, [pc, #368]	; (80019d4 <HAL_I2C_Init+0x274>)
 8001864:	428b      	cmp	r3, r1
 8001866:	d819      	bhi.n	800189c <HAL_I2C_Init+0x13c>
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	1e59      	subs	r1, r3, #1
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	fbb1 f3f3 	udiv	r3, r1, r3
 8001876:	1c59      	adds	r1, r3, #1
 8001878:	f640 73fc 	movw	r3, #4092	; 0xffc
 800187c:	400b      	ands	r3, r1
 800187e:	2b00      	cmp	r3, #0
 8001880:	d00a      	beq.n	8001898 <HAL_I2C_Init+0x138>
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	1e59      	subs	r1, r3, #1
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001890:	3301      	adds	r3, #1
 8001892:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001896:	e051      	b.n	800193c <HAL_I2C_Init+0x1dc>
 8001898:	2304      	movs	r3, #4
 800189a:	e04f      	b.n	800193c <HAL_I2C_Init+0x1dc>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d111      	bne.n	80018c8 <HAL_I2C_Init+0x168>
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	1e58      	subs	r0, r3, #1
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6859      	ldr	r1, [r3, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	440b      	add	r3, r1
 80018b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80018b6:	3301      	adds	r3, #1
 80018b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018bc:	2b00      	cmp	r3, #0
 80018be:	bf0c      	ite	eq
 80018c0:	2301      	moveq	r3, #1
 80018c2:	2300      	movne	r3, #0
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	e012      	b.n	80018ee <HAL_I2C_Init+0x18e>
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	1e58      	subs	r0, r3, #1
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6859      	ldr	r1, [r3, #4]
 80018d0:	460b      	mov	r3, r1
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	440b      	add	r3, r1
 80018d6:	0099      	lsls	r1, r3, #2
 80018d8:	440b      	add	r3, r1
 80018da:	fbb0 f3f3 	udiv	r3, r0, r3
 80018de:	3301      	adds	r3, #1
 80018e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	bf0c      	ite	eq
 80018e8:	2301      	moveq	r3, #1
 80018ea:	2300      	movne	r3, #0
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <HAL_I2C_Init+0x196>
 80018f2:	2301      	movs	r3, #1
 80018f4:	e022      	b.n	800193c <HAL_I2C_Init+0x1dc>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10e      	bne.n	800191c <HAL_I2C_Init+0x1bc>
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	1e58      	subs	r0, r3, #1
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6859      	ldr	r1, [r3, #4]
 8001906:	460b      	mov	r3, r1
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	440b      	add	r3, r1
 800190c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001910:	3301      	adds	r3, #1
 8001912:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001916:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800191a:	e00f      	b.n	800193c <HAL_I2C_Init+0x1dc>
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	1e58      	subs	r0, r3, #1
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6859      	ldr	r1, [r3, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	440b      	add	r3, r1
 800192a:	0099      	lsls	r1, r3, #2
 800192c:	440b      	add	r3, r1
 800192e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001932:	3301      	adds	r3, #1
 8001934:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001938:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	6809      	ldr	r1, [r1, #0]
 8001940:	4313      	orrs	r3, r2
 8001942:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	69da      	ldr	r2, [r3, #28]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a1b      	ldr	r3, [r3, #32]
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	430a      	orrs	r2, r1
 800195e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800196a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	6911      	ldr	r1, [r2, #16]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	68d2      	ldr	r2, [r2, #12]
 8001976:	4311      	orrs	r1, r2
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	6812      	ldr	r2, [r2, #0]
 800197c:	430b      	orrs	r3, r1
 800197e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	695a      	ldr	r2, [r3, #20]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	431a      	orrs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	430a      	orrs	r2, r1
 800199a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f042 0201 	orr.w	r2, r2, #1
 80019aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2220      	movs	r2, #32
 80019b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	000186a0 	.word	0x000186a0
 80019d8:	001e847f 	.word	0x001e847f
 80019dc:	003d08ff 	.word	0x003d08ff
 80019e0:	431bde83 	.word	0x431bde83
 80019e4:	10624dd3 	.word	0x10624dd3

080019e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ea:	b08b      	sub	sp, #44	; 0x2c
 80019ec:	af06      	add	r7, sp, #24
 80019ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e0fd      	b.n	8001bf6 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d106      	bne.n	8001a14 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff f8c6 	bl	8000ba0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2203      	movs	r2, #3
 8001a18:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f001 faf9 	bl	8003018 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	603b      	str	r3, [r7, #0]
 8001a2c:	687e      	ldr	r6, [r7, #4]
 8001a2e:	466d      	mov	r5, sp
 8001a30:	f106 0410 	add.w	r4, r6, #16
 8001a34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a38:	6823      	ldr	r3, [r4, #0]
 8001a3a:	602b      	str	r3, [r5, #0]
 8001a3c:	1d33      	adds	r3, r6, #4
 8001a3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a40:	6838      	ldr	r0, [r7, #0]
 8001a42:	f001 fad9 	bl	8002ff8 <USB_CoreInit>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d005      	beq.n	8001a58 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2202      	movs	r2, #2
 8001a50:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e0ce      	b.n	8001bf6 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f001 faf4 	bl	800304c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a64:	2300      	movs	r3, #0
 8001a66:	73fb      	strb	r3, [r7, #15]
 8001a68:	e04c      	b.n	8001b04 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a6a:	7bfb      	ldrb	r3, [r7, #15]
 8001a6c:	6879      	ldr	r1, [r7, #4]
 8001a6e:	1c5a      	adds	r2, r3, #1
 8001a70:	4613      	mov	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4413      	add	r3, r2
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	440b      	add	r3, r1
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a80:	7bfb      	ldrb	r3, [r7, #15]
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	1c5a      	adds	r2, r3, #1
 8001a86:	4613      	mov	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4413      	add	r3, r2
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	440b      	add	r3, r1
 8001a90:	7bfa      	ldrb	r2, [r7, #15]
 8001a92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a94:	7bfa      	ldrb	r2, [r7, #15]
 8001a96:	7bfb      	ldrb	r3, [r7, #15]
 8001a98:	b298      	uxth	r0, r3
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	440b      	add	r3, r1
 8001aa6:	3336      	adds	r3, #54	; 0x36
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	1c5a      	adds	r2, r3, #1
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	4413      	add	r3, r2
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	440b      	add	r3, r1
 8001abc:	3303      	adds	r3, #3
 8001abe:	2200      	movs	r2, #0
 8001ac0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ac2:	7bfa      	ldrb	r2, [r7, #15]
 8001ac4:	6879      	ldr	r1, [r7, #4]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	440b      	add	r3, r1
 8001ad0:	3338      	adds	r3, #56	; 0x38
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ad6:	7bfa      	ldrb	r2, [r7, #15]
 8001ad8:	6879      	ldr	r1, [r7, #4]
 8001ada:	4613      	mov	r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4413      	add	r3, r2
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	440b      	add	r3, r1
 8001ae4:	333c      	adds	r3, #60	; 0x3c
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001aea:	7bfa      	ldrb	r2, [r7, #15]
 8001aec:	6879      	ldr	r1, [r7, #4]
 8001aee:	4613      	mov	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4413      	add	r3, r2
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	440b      	add	r3, r1
 8001af8:	3340      	adds	r3, #64	; 0x40
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
 8001b00:	3301      	adds	r3, #1
 8001b02:	73fb      	strb	r3, [r7, #15]
 8001b04:	7bfa      	ldrb	r2, [r7, #15]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d3ad      	bcc.n	8001a6a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b0e:	2300      	movs	r3, #0
 8001b10:	73fb      	strb	r3, [r7, #15]
 8001b12:	e044      	b.n	8001b9e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b14:	7bfa      	ldrb	r2, [r7, #15]
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	440b      	add	r3, r1
 8001b22:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001b26:	2200      	movs	r2, #0
 8001b28:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b2a:	7bfa      	ldrb	r2, [r7, #15]
 8001b2c:	6879      	ldr	r1, [r7, #4]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	440b      	add	r3, r1
 8001b38:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b3c:	7bfa      	ldrb	r2, [r7, #15]
 8001b3e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b40:	7bfa      	ldrb	r2, [r7, #15]
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	4613      	mov	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	440b      	add	r3, r1
 8001b4e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001b52:	2200      	movs	r2, #0
 8001b54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b56:	7bfa      	ldrb	r2, [r7, #15]
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4413      	add	r3, r2
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	440b      	add	r3, r1
 8001b64:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b6c:	7bfa      	ldrb	r2, [r7, #15]
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	4613      	mov	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	440b      	add	r3, r1
 8001b7a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b82:	7bfa      	ldrb	r2, [r7, #15]
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	4613      	mov	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	440b      	add	r3, r1
 8001b90:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	73fb      	strb	r3, [r7, #15]
 8001b9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d3b5      	bcc.n	8001b14 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	603b      	str	r3, [r7, #0]
 8001bae:	687e      	ldr	r6, [r7, #4]
 8001bb0:	466d      	mov	r5, sp
 8001bb2:	f106 0410 	add.w	r4, r6, #16
 8001bb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bba:	6823      	ldr	r3, [r4, #0]
 8001bbc:	602b      	str	r3, [r5, #0]
 8001bbe:	1d33      	adds	r3, r6, #4
 8001bc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bc2:	6838      	ldr	r0, [r7, #0]
 8001bc4:	f001 fa4e 	bl	8003064 <USB_DevInit>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d005      	beq.n	8001bda <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e00d      	b.n	8001bf6 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f001 fa58 	bl	80030a4 <USB_DevDisconnect>

  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3714      	adds	r7, #20
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001c00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e272      	b.n	80020f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f000 8087 	beq.w	8001d2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c20:	4b92      	ldr	r3, [pc, #584]	; (8001e6c <HAL_RCC_OscConfig+0x26c>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f003 030c 	and.w	r3, r3, #12
 8001c28:	2b04      	cmp	r3, #4
 8001c2a:	d00c      	beq.n	8001c46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c2c:	4b8f      	ldr	r3, [pc, #572]	; (8001e6c <HAL_RCC_OscConfig+0x26c>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 030c 	and.w	r3, r3, #12
 8001c34:	2b08      	cmp	r3, #8
 8001c36:	d112      	bne.n	8001c5e <HAL_RCC_OscConfig+0x5e>
 8001c38:	4b8c      	ldr	r3, [pc, #560]	; (8001e6c <HAL_RCC_OscConfig+0x26c>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c44:	d10b      	bne.n	8001c5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c46:	4b89      	ldr	r3, [pc, #548]	; (8001e6c <HAL_RCC_OscConfig+0x26c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d06c      	beq.n	8001d2c <HAL_RCC_OscConfig+0x12c>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d168      	bne.n	8001d2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e24c      	b.n	80020f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c66:	d106      	bne.n	8001c76 <HAL_RCC_OscConfig+0x76>
 8001c68:	4b80      	ldr	r3, [pc, #512]	; (8001e6c <HAL_RCC_OscConfig+0x26c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a7f      	ldr	r2, [pc, #508]	; (8001e6c <HAL_RCC_OscConfig+0x26c>)
 8001c6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c72:	6013      	str	r3, [r2, #0]
 8001c74:	e02e      	b.n	8001cd4 <HAL_RCC_OscConfig+0xd4>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10c      	bne.n	8001c98 <HAL_RCC_OscConfig+0x98>
 8001c7e:	4b7b      	ldr	r3, [pc, #492]	; (8001e6c <HAL_RCC_OscConfig+0x26c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a7a      	ldr	r2, [pc, #488]	; (8001e6c <HAL_RCC_OscConfig+0x26c>)
 8001c84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	4b78      	ldr	r3, [pc, #480]	; (8001e6c <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a77      	ldr	r2, [pc, #476]	; (8001e6c <HAL_RCC_OscConfig+0x26c>)
 8001c90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	e01d      	b.n	8001cd4 <HAL_RCC_OscConfig+0xd4>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ca0:	d10c      	bne.n	8001cbc <HAL_RCC_OscConfig+0xbc>
 8001ca2:	4b72      	ldr	r3, [pc, #456]	; (8001e6c <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a71      	ldr	r2, [pc, #452]	; (8001e6c <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	4b6f      	ldr	r3, [pc, #444]	; (8001e6c <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a6e      	ldr	r2, [pc, #440]	; (8001e6c <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb8:	6013      	str	r3, [r2, #0]
 8001cba:	e00b      	b.n	8001cd4 <HAL_RCC_OscConfig+0xd4>
 8001cbc:	4b6b      	ldr	r3, [pc, #428]	; (8001e6c <HAL_RCC_OscConfig+0x26c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a6a      	ldr	r2, [pc, #424]	; (8001e6c <HAL_RCC_OscConfig+0x26c>)
 8001cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	4b68      	ldr	r3, [pc, #416]	; (8001e6c <HAL_RCC_OscConfig+0x26c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a67      	ldr	r2, [pc, #412]	; (8001e6c <HAL_RCC_OscConfig+0x26c>)
 8001cce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d013      	beq.n	8001d04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cdc:	f7ff f83e 	bl	8000d5c <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce4:	f7ff f83a 	bl	8000d5c <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b64      	cmp	r3, #100	; 0x64
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e200      	b.n	80020f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf6:	4b5d      	ldr	r3, [pc, #372]	; (8001e6c <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0f0      	beq.n	8001ce4 <HAL_RCC_OscConfig+0xe4>
 8001d02:	e014      	b.n	8001d2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d04:	f7ff f82a 	bl	8000d5c <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d0c:	f7ff f826 	bl	8000d5c <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b64      	cmp	r3, #100	; 0x64
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e1ec      	b.n	80020f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d1e:	4b53      	ldr	r3, [pc, #332]	; (8001e6c <HAL_RCC_OscConfig+0x26c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1f0      	bne.n	8001d0c <HAL_RCC_OscConfig+0x10c>
 8001d2a:	e000      	b.n	8001d2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d063      	beq.n	8001e02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d3a:	4b4c      	ldr	r3, [pc, #304]	; (8001e6c <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f003 030c 	and.w	r3, r3, #12
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00b      	beq.n	8001d5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d46:	4b49      	ldr	r3, [pc, #292]	; (8001e6c <HAL_RCC_OscConfig+0x26c>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 030c 	and.w	r3, r3, #12
 8001d4e:	2b08      	cmp	r3, #8
 8001d50:	d11c      	bne.n	8001d8c <HAL_RCC_OscConfig+0x18c>
 8001d52:	4b46      	ldr	r3, [pc, #280]	; (8001e6c <HAL_RCC_OscConfig+0x26c>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d116      	bne.n	8001d8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d5e:	4b43      	ldr	r3, [pc, #268]	; (8001e6c <HAL_RCC_OscConfig+0x26c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d005      	beq.n	8001d76 <HAL_RCC_OscConfig+0x176>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d001      	beq.n	8001d76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e1c0      	b.n	80020f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d76:	4b3d      	ldr	r3, [pc, #244]	; (8001e6c <HAL_RCC_OscConfig+0x26c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	4939      	ldr	r1, [pc, #228]	; (8001e6c <HAL_RCC_OscConfig+0x26c>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8a:	e03a      	b.n	8001e02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d020      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d94:	4b36      	ldr	r3, [pc, #216]	; (8001e70 <HAL_RCC_OscConfig+0x270>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9a:	f7fe ffdf 	bl	8000d5c <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da2:	f7fe ffdb 	bl	8000d5c <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e1a1      	b.n	80020f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db4:	4b2d      	ldr	r3, [pc, #180]	; (8001e6c <HAL_RCC_OscConfig+0x26c>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0f0      	beq.n	8001da2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc0:	4b2a      	ldr	r3, [pc, #168]	; (8001e6c <HAL_RCC_OscConfig+0x26c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	4927      	ldr	r1, [pc, #156]	; (8001e6c <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	600b      	str	r3, [r1, #0]
 8001dd4:	e015      	b.n	8001e02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dd6:	4b26      	ldr	r3, [pc, #152]	; (8001e70 <HAL_RCC_OscConfig+0x270>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ddc:	f7fe ffbe 	bl	8000d5c <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de4:	f7fe ffba 	bl	8000d5c <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e180      	b.n	80020f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001df6:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <HAL_RCC_OscConfig+0x26c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1f0      	bne.n	8001de4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d03a      	beq.n	8001e84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d019      	beq.n	8001e4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e16:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <HAL_RCC_OscConfig+0x274>)
 8001e18:	2201      	movs	r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e1c:	f7fe ff9e 	bl	8000d5c <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e24:	f7fe ff9a 	bl	8000d5c <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e160      	b.n	80020f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e36:	4b0d      	ldr	r3, [pc, #52]	; (8001e6c <HAL_RCC_OscConfig+0x26c>)
 8001e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0f0      	beq.n	8001e24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e42:	2001      	movs	r0, #1
 8001e44:	f000 fac4 	bl	80023d0 <RCC_Delay>
 8001e48:	e01c      	b.n	8001e84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e4a:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <HAL_RCC_OscConfig+0x274>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e50:	f7fe ff84 	bl	8000d5c <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e56:	e00f      	b.n	8001e78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e58:	f7fe ff80 	bl	8000d5c <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d908      	bls.n	8001e78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e146      	b.n	80020f8 <HAL_RCC_OscConfig+0x4f8>
 8001e6a:	bf00      	nop
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	42420000 	.word	0x42420000
 8001e74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e78:	4b92      	ldr	r3, [pc, #584]	; (80020c4 <HAL_RCC_OscConfig+0x4c4>)
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d1e9      	bne.n	8001e58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 80a6 	beq.w	8001fde <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e92:	2300      	movs	r3, #0
 8001e94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e96:	4b8b      	ldr	r3, [pc, #556]	; (80020c4 <HAL_RCC_OscConfig+0x4c4>)
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d10d      	bne.n	8001ebe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ea2:	4b88      	ldr	r3, [pc, #544]	; (80020c4 <HAL_RCC_OscConfig+0x4c4>)
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	4a87      	ldr	r2, [pc, #540]	; (80020c4 <HAL_RCC_OscConfig+0x4c4>)
 8001ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eac:	61d3      	str	r3, [r2, #28]
 8001eae:	4b85      	ldr	r3, [pc, #532]	; (80020c4 <HAL_RCC_OscConfig+0x4c4>)
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ebe:	4b82      	ldr	r3, [pc, #520]	; (80020c8 <HAL_RCC_OscConfig+0x4c8>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d118      	bne.n	8001efc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eca:	4b7f      	ldr	r3, [pc, #508]	; (80020c8 <HAL_RCC_OscConfig+0x4c8>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a7e      	ldr	r2, [pc, #504]	; (80020c8 <HAL_RCC_OscConfig+0x4c8>)
 8001ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ed6:	f7fe ff41 	bl	8000d5c <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ede:	f7fe ff3d 	bl	8000d5c <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b64      	cmp	r3, #100	; 0x64
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e103      	b.n	80020f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef0:	4b75      	ldr	r3, [pc, #468]	; (80020c8 <HAL_RCC_OscConfig+0x4c8>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d0f0      	beq.n	8001ede <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d106      	bne.n	8001f12 <HAL_RCC_OscConfig+0x312>
 8001f04:	4b6f      	ldr	r3, [pc, #444]	; (80020c4 <HAL_RCC_OscConfig+0x4c4>)
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	4a6e      	ldr	r2, [pc, #440]	; (80020c4 <HAL_RCC_OscConfig+0x4c4>)
 8001f0a:	f043 0301 	orr.w	r3, r3, #1
 8001f0e:	6213      	str	r3, [r2, #32]
 8001f10:	e02d      	b.n	8001f6e <HAL_RCC_OscConfig+0x36e>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10c      	bne.n	8001f34 <HAL_RCC_OscConfig+0x334>
 8001f1a:	4b6a      	ldr	r3, [pc, #424]	; (80020c4 <HAL_RCC_OscConfig+0x4c4>)
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	4a69      	ldr	r2, [pc, #420]	; (80020c4 <HAL_RCC_OscConfig+0x4c4>)
 8001f20:	f023 0301 	bic.w	r3, r3, #1
 8001f24:	6213      	str	r3, [r2, #32]
 8001f26:	4b67      	ldr	r3, [pc, #412]	; (80020c4 <HAL_RCC_OscConfig+0x4c4>)
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	4a66      	ldr	r2, [pc, #408]	; (80020c4 <HAL_RCC_OscConfig+0x4c4>)
 8001f2c:	f023 0304 	bic.w	r3, r3, #4
 8001f30:	6213      	str	r3, [r2, #32]
 8001f32:	e01c      	b.n	8001f6e <HAL_RCC_OscConfig+0x36e>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	2b05      	cmp	r3, #5
 8001f3a:	d10c      	bne.n	8001f56 <HAL_RCC_OscConfig+0x356>
 8001f3c:	4b61      	ldr	r3, [pc, #388]	; (80020c4 <HAL_RCC_OscConfig+0x4c4>)
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	4a60      	ldr	r2, [pc, #384]	; (80020c4 <HAL_RCC_OscConfig+0x4c4>)
 8001f42:	f043 0304 	orr.w	r3, r3, #4
 8001f46:	6213      	str	r3, [r2, #32]
 8001f48:	4b5e      	ldr	r3, [pc, #376]	; (80020c4 <HAL_RCC_OscConfig+0x4c4>)
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	4a5d      	ldr	r2, [pc, #372]	; (80020c4 <HAL_RCC_OscConfig+0x4c4>)
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	6213      	str	r3, [r2, #32]
 8001f54:	e00b      	b.n	8001f6e <HAL_RCC_OscConfig+0x36e>
 8001f56:	4b5b      	ldr	r3, [pc, #364]	; (80020c4 <HAL_RCC_OscConfig+0x4c4>)
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	4a5a      	ldr	r2, [pc, #360]	; (80020c4 <HAL_RCC_OscConfig+0x4c4>)
 8001f5c:	f023 0301 	bic.w	r3, r3, #1
 8001f60:	6213      	str	r3, [r2, #32]
 8001f62:	4b58      	ldr	r3, [pc, #352]	; (80020c4 <HAL_RCC_OscConfig+0x4c4>)
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	4a57      	ldr	r2, [pc, #348]	; (80020c4 <HAL_RCC_OscConfig+0x4c4>)
 8001f68:	f023 0304 	bic.w	r3, r3, #4
 8001f6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d015      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f76:	f7fe fef1 	bl	8000d5c <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f7c:	e00a      	b.n	8001f94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f7e:	f7fe feed 	bl	8000d5c <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e0b1      	b.n	80020f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f94:	4b4b      	ldr	r3, [pc, #300]	; (80020c4 <HAL_RCC_OscConfig+0x4c4>)
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0ee      	beq.n	8001f7e <HAL_RCC_OscConfig+0x37e>
 8001fa0:	e014      	b.n	8001fcc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa2:	f7fe fedb 	bl	8000d5c <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa8:	e00a      	b.n	8001fc0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001faa:	f7fe fed7 	bl	8000d5c <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e09b      	b.n	80020f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc0:	4b40      	ldr	r3, [pc, #256]	; (80020c4 <HAL_RCC_OscConfig+0x4c4>)
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1ee      	bne.n	8001faa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fcc:	7dfb      	ldrb	r3, [r7, #23]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d105      	bne.n	8001fde <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fd2:	4b3c      	ldr	r3, [pc, #240]	; (80020c4 <HAL_RCC_OscConfig+0x4c4>)
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	4a3b      	ldr	r2, [pc, #236]	; (80020c4 <HAL_RCC_OscConfig+0x4c4>)
 8001fd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fdc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 8087 	beq.w	80020f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fe8:	4b36      	ldr	r3, [pc, #216]	; (80020c4 <HAL_RCC_OscConfig+0x4c4>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 030c 	and.w	r3, r3, #12
 8001ff0:	2b08      	cmp	r3, #8
 8001ff2:	d061      	beq.n	80020b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	69db      	ldr	r3, [r3, #28]
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d146      	bne.n	800208a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ffc:	4b33      	ldr	r3, [pc, #204]	; (80020cc <HAL_RCC_OscConfig+0x4cc>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002002:	f7fe feab 	bl	8000d5c <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002008:	e008      	b.n	800201c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800200a:	f7fe fea7 	bl	8000d5c <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e06d      	b.n	80020f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800201c:	4b29      	ldr	r3, [pc, #164]	; (80020c4 <HAL_RCC_OscConfig+0x4c4>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1f0      	bne.n	800200a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002030:	d108      	bne.n	8002044 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002032:	4b24      	ldr	r3, [pc, #144]	; (80020c4 <HAL_RCC_OscConfig+0x4c4>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	4921      	ldr	r1, [pc, #132]	; (80020c4 <HAL_RCC_OscConfig+0x4c4>)
 8002040:	4313      	orrs	r3, r2
 8002042:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002044:	4b1f      	ldr	r3, [pc, #124]	; (80020c4 <HAL_RCC_OscConfig+0x4c4>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a19      	ldr	r1, [r3, #32]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002054:	430b      	orrs	r3, r1
 8002056:	491b      	ldr	r1, [pc, #108]	; (80020c4 <HAL_RCC_OscConfig+0x4c4>)
 8002058:	4313      	orrs	r3, r2
 800205a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800205c:	4b1b      	ldr	r3, [pc, #108]	; (80020cc <HAL_RCC_OscConfig+0x4cc>)
 800205e:	2201      	movs	r2, #1
 8002060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002062:	f7fe fe7b 	bl	8000d5c <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800206a:	f7fe fe77 	bl	8000d5c <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e03d      	b.n	80020f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800207c:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <HAL_RCC_OscConfig+0x4c4>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0f0      	beq.n	800206a <HAL_RCC_OscConfig+0x46a>
 8002088:	e035      	b.n	80020f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800208a:	4b10      	ldr	r3, [pc, #64]	; (80020cc <HAL_RCC_OscConfig+0x4cc>)
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002090:	f7fe fe64 	bl	8000d5c <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002098:	f7fe fe60 	bl	8000d5c <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e026      	b.n	80020f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <HAL_RCC_OscConfig+0x4c4>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f0      	bne.n	8002098 <HAL_RCC_OscConfig+0x498>
 80020b6:	e01e      	b.n	80020f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	69db      	ldr	r3, [r3, #28]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d107      	bne.n	80020d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e019      	b.n	80020f8 <HAL_RCC_OscConfig+0x4f8>
 80020c4:	40021000 	.word	0x40021000
 80020c8:	40007000 	.word	0x40007000
 80020cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020d0:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <HAL_RCC_OscConfig+0x500>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d106      	bne.n	80020f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d001      	beq.n	80020f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e000      	b.n	80020f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40021000 	.word	0x40021000

08002104 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e0d0      	b.n	80022ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002118:	4b6a      	ldr	r3, [pc, #424]	; (80022c4 <HAL_RCC_ClockConfig+0x1c0>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0307 	and.w	r3, r3, #7
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	429a      	cmp	r2, r3
 8002124:	d910      	bls.n	8002148 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002126:	4b67      	ldr	r3, [pc, #412]	; (80022c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f023 0207 	bic.w	r2, r3, #7
 800212e:	4965      	ldr	r1, [pc, #404]	; (80022c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	4313      	orrs	r3, r2
 8002134:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002136:	4b63      	ldr	r3, [pc, #396]	; (80022c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	429a      	cmp	r2, r3
 8002142:	d001      	beq.n	8002148 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e0b8      	b.n	80022ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d020      	beq.n	8002196 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	d005      	beq.n	800216c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002160:	4b59      	ldr	r3, [pc, #356]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	4a58      	ldr	r2, [pc, #352]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002166:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800216a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0308 	and.w	r3, r3, #8
 8002174:	2b00      	cmp	r3, #0
 8002176:	d005      	beq.n	8002184 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002178:	4b53      	ldr	r3, [pc, #332]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	4a52      	ldr	r2, [pc, #328]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 800217e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002182:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002184:	4b50      	ldr	r3, [pc, #320]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	494d      	ldr	r1, [pc, #308]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002192:	4313      	orrs	r3, r2
 8002194:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d040      	beq.n	8002224 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d107      	bne.n	80021ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021aa:	4b47      	ldr	r3, [pc, #284]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d115      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e07f      	b.n	80022ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d107      	bne.n	80021d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c2:	4b41      	ldr	r3, [pc, #260]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d109      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e073      	b.n	80022ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d2:	4b3d      	ldr	r3, [pc, #244]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e06b      	b.n	80022ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021e2:	4b39      	ldr	r3, [pc, #228]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f023 0203 	bic.w	r2, r3, #3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	4936      	ldr	r1, [pc, #216]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021f4:	f7fe fdb2 	bl	8000d5c <HAL_GetTick>
 80021f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fa:	e00a      	b.n	8002212 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021fc:	f7fe fdae 	bl	8000d5c <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	f241 3288 	movw	r2, #5000	; 0x1388
 800220a:	4293      	cmp	r3, r2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e053      	b.n	80022ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002212:	4b2d      	ldr	r3, [pc, #180]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f003 020c 	and.w	r2, r3, #12
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	429a      	cmp	r2, r3
 8002222:	d1eb      	bne.n	80021fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002224:	4b27      	ldr	r3, [pc, #156]	; (80022c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	429a      	cmp	r2, r3
 8002230:	d210      	bcs.n	8002254 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002232:	4b24      	ldr	r3, [pc, #144]	; (80022c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f023 0207 	bic.w	r2, r3, #7
 800223a:	4922      	ldr	r1, [pc, #136]	; (80022c4 <HAL_RCC_ClockConfig+0x1c0>)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	4313      	orrs	r3, r2
 8002240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002242:	4b20      	ldr	r3, [pc, #128]	; (80022c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	429a      	cmp	r2, r3
 800224e:	d001      	beq.n	8002254 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e032      	b.n	80022ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	d008      	beq.n	8002272 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002260:	4b19      	ldr	r3, [pc, #100]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	4916      	ldr	r1, [pc, #88]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 800226e:	4313      	orrs	r3, r2
 8002270:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b00      	cmp	r3, #0
 800227c:	d009      	beq.n	8002292 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800227e:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	490e      	ldr	r1, [pc, #56]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 800228e:	4313      	orrs	r3, r2
 8002290:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002292:	f000 f821 	bl	80022d8 <HAL_RCC_GetSysClockFreq>
 8002296:	4602      	mov	r2, r0
 8002298:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	091b      	lsrs	r3, r3, #4
 800229e:	f003 030f 	and.w	r3, r3, #15
 80022a2:	490a      	ldr	r1, [pc, #40]	; (80022cc <HAL_RCC_ClockConfig+0x1c8>)
 80022a4:	5ccb      	ldrb	r3, [r1, r3]
 80022a6:	fa22 f303 	lsr.w	r3, r2, r3
 80022aa:	4a09      	ldr	r2, [pc, #36]	; (80022d0 <HAL_RCC_ClockConfig+0x1cc>)
 80022ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022ae:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <HAL_RCC_ClockConfig+0x1d0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe fd10 	bl	8000cd8 <HAL_InitTick>

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40022000 	.word	0x40022000
 80022c8:	40021000 	.word	0x40021000
 80022cc:	08003138 	.word	0x08003138
 80022d0:	20000000 	.word	0x20000000
 80022d4:	20000004 	.word	0x20000004

080022d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022d8:	b490      	push	{r4, r7}
 80022da:	b08a      	sub	sp, #40	; 0x28
 80022dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80022de:	4b29      	ldr	r3, [pc, #164]	; (8002384 <HAL_RCC_GetSysClockFreq+0xac>)
 80022e0:	1d3c      	adds	r4, r7, #4
 80022e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80022e8:	f240 2301 	movw	r3, #513	; 0x201
 80022ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	61fb      	str	r3, [r7, #28]
 80022f2:	2300      	movs	r3, #0
 80022f4:	61bb      	str	r3, [r7, #24]
 80022f6:	2300      	movs	r3, #0
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
 80022fa:	2300      	movs	r3, #0
 80022fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022fe:	2300      	movs	r3, #0
 8002300:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002302:	4b21      	ldr	r3, [pc, #132]	; (8002388 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	f003 030c 	and.w	r3, r3, #12
 800230e:	2b04      	cmp	r3, #4
 8002310:	d002      	beq.n	8002318 <HAL_RCC_GetSysClockFreq+0x40>
 8002312:	2b08      	cmp	r3, #8
 8002314:	d003      	beq.n	800231e <HAL_RCC_GetSysClockFreq+0x46>
 8002316:	e02b      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002318:	4b1c      	ldr	r3, [pc, #112]	; (800238c <HAL_RCC_GetSysClockFreq+0xb4>)
 800231a:	623b      	str	r3, [r7, #32]
      break;
 800231c:	e02b      	b.n	8002376 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	0c9b      	lsrs	r3, r3, #18
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	3328      	adds	r3, #40	; 0x28
 8002328:	443b      	add	r3, r7
 800232a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800232e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d012      	beq.n	8002360 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800233a:	4b13      	ldr	r3, [pc, #76]	; (8002388 <HAL_RCC_GetSysClockFreq+0xb0>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	0c5b      	lsrs	r3, r3, #17
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	3328      	adds	r3, #40	; 0x28
 8002346:	443b      	add	r3, r7
 8002348:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800234c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	4a0e      	ldr	r2, [pc, #56]	; (800238c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002352:	fb03 f202 	mul.w	r2, r3, r2
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	fbb2 f3f3 	udiv	r3, r2, r3
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
 800235e:	e004      	b.n	800236a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	4a0b      	ldr	r2, [pc, #44]	; (8002390 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002364:	fb02 f303 	mul.w	r3, r2, r3
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	623b      	str	r3, [r7, #32]
      break;
 800236e:	e002      	b.n	8002376 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002370:	4b06      	ldr	r3, [pc, #24]	; (800238c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002372:	623b      	str	r3, [r7, #32]
      break;
 8002374:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002376:	6a3b      	ldr	r3, [r7, #32]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3728      	adds	r7, #40	; 0x28
 800237c:	46bd      	mov	sp, r7
 800237e:	bc90      	pop	{r4, r7}
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	08003128 	.word	0x08003128
 8002388:	40021000 	.word	0x40021000
 800238c:	007a1200 	.word	0x007a1200
 8002390:	003d0900 	.word	0x003d0900

08002394 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002398:	4b02      	ldr	r3, [pc, #8]	; (80023a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800239a:	681b      	ldr	r3, [r3, #0]
}
 800239c:	4618      	mov	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr
 80023a4:	20000000 	.word	0x20000000

080023a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023ac:	f7ff fff2 	bl	8002394 <HAL_RCC_GetHCLKFreq>
 80023b0:	4602      	mov	r2, r0
 80023b2:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	0a1b      	lsrs	r3, r3, #8
 80023b8:	f003 0307 	and.w	r3, r3, #7
 80023bc:	4903      	ldr	r1, [pc, #12]	; (80023cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80023be:	5ccb      	ldrb	r3, [r1, r3]
 80023c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40021000 	.word	0x40021000
 80023cc:	08003148 	.word	0x08003148

080023d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023d8:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <RCC_Delay+0x34>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a0a      	ldr	r2, [pc, #40]	; (8002408 <RCC_Delay+0x38>)
 80023de:	fba2 2303 	umull	r2, r3, r2, r3
 80023e2:	0a5b      	lsrs	r3, r3, #9
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	fb02 f303 	mul.w	r3, r2, r3
 80023ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023ec:	bf00      	nop
  }
  while (Delay --);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	1e5a      	subs	r2, r3, #1
 80023f2:	60fa      	str	r2, [r7, #12]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1f9      	bne.n	80023ec <RCC_Delay+0x1c>
}
 80023f8:	bf00      	nop
 80023fa:	bf00      	nop
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr
 8002404:	20000000 	.word	0x20000000
 8002408:	10624dd3 	.word	0x10624dd3

0800240c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002414:	2300      	movs	r3, #0
 8002416:	613b      	str	r3, [r7, #16]
 8002418:	2300      	movs	r3, #0
 800241a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	2b00      	cmp	r3, #0
 8002426:	d07d      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002428:	2300      	movs	r3, #0
 800242a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800242c:	4b4f      	ldr	r3, [pc, #316]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d10d      	bne.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002438:	4b4c      	ldr	r3, [pc, #304]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	4a4b      	ldr	r2, [pc, #300]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800243e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002442:	61d3      	str	r3, [r2, #28]
 8002444:	4b49      	ldr	r3, [pc, #292]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002446:	69db      	ldr	r3, [r3, #28]
 8002448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244c:	60bb      	str	r3, [r7, #8]
 800244e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002450:	2301      	movs	r3, #1
 8002452:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002454:	4b46      	ldr	r3, [pc, #280]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245c:	2b00      	cmp	r3, #0
 800245e:	d118      	bne.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002460:	4b43      	ldr	r3, [pc, #268]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a42      	ldr	r2, [pc, #264]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800246a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800246c:	f7fe fc76 	bl	8000d5c <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002472:	e008      	b.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002474:	f7fe fc72 	bl	8000d5c <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b64      	cmp	r3, #100	; 0x64
 8002480:	d901      	bls.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e06d      	b.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002486:	4b3a      	ldr	r3, [pc, #232]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0f0      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002492:	4b36      	ldr	r3, [pc, #216]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800249a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d02e      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d027      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024b0:	4b2e      	ldr	r3, [pc, #184]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024b8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024ba:	4b2e      	ldr	r3, [pc, #184]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024bc:	2201      	movs	r2, #1
 80024be:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024c0:	4b2c      	ldr	r3, [pc, #176]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80024c6:	4a29      	ldr	r2, [pc, #164]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d014      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d6:	f7fe fc41 	bl	8000d5c <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024dc:	e00a      	b.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024de:	f7fe fc3d 	bl	8000d5c <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e036      	b.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f4:	4b1d      	ldr	r3, [pc, #116]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0ee      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002500:	4b1a      	ldr	r3, [pc, #104]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	4917      	ldr	r1, [pc, #92]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800250e:	4313      	orrs	r3, r2
 8002510:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002512:	7dfb      	ldrb	r3, [r7, #23]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d105      	bne.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002518:	4b14      	ldr	r3, [pc, #80]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800251a:	69db      	ldr	r3, [r3, #28]
 800251c:	4a13      	ldr	r2, [pc, #76]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800251e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002522:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d008      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002530:	4b0e      	ldr	r3, [pc, #56]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	490b      	ldr	r1, [pc, #44]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800253e:	4313      	orrs	r3, r2
 8002540:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0310 	and.w	r3, r3, #16
 800254a:	2b00      	cmp	r3, #0
 800254c:	d008      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800254e:	4b07      	ldr	r3, [pc, #28]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	4904      	ldr	r1, [pc, #16]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800255c:	4313      	orrs	r3, r2
 800255e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3718      	adds	r7, #24
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40021000 	.word	0x40021000
 8002570:	40007000 	.word	0x40007000
 8002574:	42420440 	.word	0x42420440

08002578 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e041      	b.n	800260e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d106      	bne.n	80025a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7fe fa6e 	bl	8000a80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2202      	movs	r2, #2
 80025a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3304      	adds	r3, #4
 80025b4:	4619      	mov	r1, r3
 80025b6:	4610      	mov	r0, r2
 80025b8:	f000 fac4 	bl	8002b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b086      	sub	sp, #24
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
 800261e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e093      	b.n	8002752 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d106      	bne.n	8002644 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7fe f9b4 	bl	80009ac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2202      	movs	r2, #2
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6812      	ldr	r2, [r2, #0]
 8002656:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800265a:	f023 0307 	bic.w	r3, r3, #7
 800265e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3304      	adds	r3, #4
 8002668:	4619      	mov	r1, r3
 800266a:	4610      	mov	r0, r2
 800266c:	f000 fa6a 	bl	8002b44 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	4313      	orrs	r3, r2
 8002690:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002698:	f023 0303 	bic.w	r3, r3, #3
 800269c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	689a      	ldr	r2, [r3, #8]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	021b      	lsls	r3, r3, #8
 80026a8:	4313      	orrs	r3, r2
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80026b6:	f023 030c 	bic.w	r3, r3, #12
 80026ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80026c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	68da      	ldr	r2, [r3, #12]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	021b      	lsls	r3, r3, #8
 80026d2:	4313      	orrs	r3, r2
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	011a      	lsls	r2, r3, #4
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	031b      	lsls	r3, r3, #12
 80026e6:	4313      	orrs	r3, r2
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80026f4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	4313      	orrs	r3, r2
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	4313      	orrs	r3, r2
 8002706:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3718      	adds	r7, #24
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b02      	cmp	r3, #2
 800276e:	d122      	bne.n	80027b6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b02      	cmp	r3, #2
 800277c:	d11b      	bne.n	80027b6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f06f 0202 	mvn.w	r2, #2
 8002786:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	f003 0303 	and.w	r3, r3, #3
 8002798:	2b00      	cmp	r3, #0
 800279a:	d003      	beq.n	80027a4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 f9b5 	bl	8002b0c <HAL_TIM_IC_CaptureCallback>
 80027a2:	e005      	b.n	80027b0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 f9a8 	bl	8002afa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f9b7 	bl	8002b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b04      	cmp	r3, #4
 80027c2:	d122      	bne.n	800280a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	f003 0304 	and.w	r3, r3, #4
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d11b      	bne.n	800280a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f06f 0204 	mvn.w	r2, #4
 80027da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2202      	movs	r2, #2
 80027e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 f98b 	bl	8002b0c <HAL_TIM_IC_CaptureCallback>
 80027f6:	e005      	b.n	8002804 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 f97e 	bl	8002afa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f98d 	bl	8002b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	f003 0308 	and.w	r3, r3, #8
 8002814:	2b08      	cmp	r3, #8
 8002816:	d122      	bne.n	800285e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	f003 0308 	and.w	r3, r3, #8
 8002822:	2b08      	cmp	r3, #8
 8002824:	d11b      	bne.n	800285e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f06f 0208 	mvn.w	r2, #8
 800282e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2204      	movs	r2, #4
 8002834:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	69db      	ldr	r3, [r3, #28]
 800283c:	f003 0303 	and.w	r3, r3, #3
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 f961 	bl	8002b0c <HAL_TIM_IC_CaptureCallback>
 800284a:	e005      	b.n	8002858 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 f954 	bl	8002afa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f963 	bl	8002b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	f003 0310 	and.w	r3, r3, #16
 8002868:	2b10      	cmp	r3, #16
 800286a:	d122      	bne.n	80028b2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f003 0310 	and.w	r3, r3, #16
 8002876:	2b10      	cmp	r3, #16
 8002878:	d11b      	bne.n	80028b2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f06f 0210 	mvn.w	r2, #16
 8002882:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2208      	movs	r2, #8
 8002888:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002894:	2b00      	cmp	r3, #0
 8002896:	d003      	beq.n	80028a0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 f937 	bl	8002b0c <HAL_TIM_IC_CaptureCallback>
 800289e:	e005      	b.n	80028ac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 f92a 	bl	8002afa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f939 	bl	8002b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d10e      	bne.n	80028de <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d107      	bne.n	80028de <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f06f 0201 	mvn.w	r2, #1
 80028d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 f905 	bl	8002ae8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e8:	2b80      	cmp	r3, #128	; 0x80
 80028ea:	d10e      	bne.n	800290a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f6:	2b80      	cmp	r3, #128	; 0x80
 80028f8:	d107      	bne.n	800290a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 fb6e 	bl	8002fe6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002914:	2b40      	cmp	r3, #64	; 0x40
 8002916:	d10e      	bne.n	8002936 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002922:	2b40      	cmp	r3, #64	; 0x40
 8002924:	d107      	bne.n	8002936 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800292e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f8fd 	bl	8002b30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	f003 0320 	and.w	r3, r3, #32
 8002940:	2b20      	cmp	r3, #32
 8002942:	d10e      	bne.n	8002962 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	f003 0320 	and.w	r3, r3, #32
 800294e:	2b20      	cmp	r3, #32
 8002950:	d107      	bne.n	8002962 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f06f 0220 	mvn.w	r2, #32
 800295a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 fb39 	bl	8002fd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002962:	bf00      	nop
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
	...

0800296c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800297e:	2b01      	cmp	r3, #1
 8002980:	d101      	bne.n	8002986 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002982:	2302      	movs	r3, #2
 8002984:	e0ac      	b.n	8002ae0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b0c      	cmp	r3, #12
 8002992:	f200 809f 	bhi.w	8002ad4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002996:	a201      	add	r2, pc, #4	; (adr r2, 800299c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800299c:	080029d1 	.word	0x080029d1
 80029a0:	08002ad5 	.word	0x08002ad5
 80029a4:	08002ad5 	.word	0x08002ad5
 80029a8:	08002ad5 	.word	0x08002ad5
 80029ac:	08002a11 	.word	0x08002a11
 80029b0:	08002ad5 	.word	0x08002ad5
 80029b4:	08002ad5 	.word	0x08002ad5
 80029b8:	08002ad5 	.word	0x08002ad5
 80029bc:	08002a53 	.word	0x08002a53
 80029c0:	08002ad5 	.word	0x08002ad5
 80029c4:	08002ad5 	.word	0x08002ad5
 80029c8:	08002ad5 	.word	0x08002ad5
 80029cc:	08002a93 	.word	0x08002a93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68b9      	ldr	r1, [r7, #8]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 f916 	bl	8002c08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	699a      	ldr	r2, [r3, #24]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0208 	orr.w	r2, r2, #8
 80029ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	699a      	ldr	r2, [r3, #24]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 0204 	bic.w	r2, r2, #4
 80029fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6999      	ldr	r1, [r3, #24]
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	691a      	ldr	r2, [r3, #16]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	619a      	str	r2, [r3, #24]
      break;
 8002a0e:	e062      	b.n	8002ad6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68b9      	ldr	r1, [r7, #8]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 f95c 	bl	8002cd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	699a      	ldr	r2, [r3, #24]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	699a      	ldr	r2, [r3, #24]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6999      	ldr	r1, [r3, #24]
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	021a      	lsls	r2, r3, #8
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	619a      	str	r2, [r3, #24]
      break;
 8002a50:	e041      	b.n	8002ad6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68b9      	ldr	r1, [r7, #8]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f000 f9a5 	bl	8002da8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	69da      	ldr	r2, [r3, #28]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f042 0208 	orr.w	r2, r2, #8
 8002a6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	69da      	ldr	r2, [r3, #28]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0204 	bic.w	r2, r2, #4
 8002a7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	69d9      	ldr	r1, [r3, #28]
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	691a      	ldr	r2, [r3, #16]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	61da      	str	r2, [r3, #28]
      break;
 8002a90:	e021      	b.n	8002ad6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68b9      	ldr	r1, [r7, #8]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 f9ef 	bl	8002e7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	69da      	ldr	r2, [r3, #28]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	69da      	ldr	r2, [r3, #28]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002abc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	69d9      	ldr	r1, [r3, #28]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	021a      	lsls	r2, r3, #8
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	61da      	str	r2, [r3, #28]
      break;
 8002ad2:	e000      	b.n	8002ad6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002ad4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bc80      	pop	{r7}
 8002af8:	4770      	bx	lr

08002afa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr

08002b0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr

08002b1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b083      	sub	sp, #12
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr

08002b30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr
	...

08002b44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a29      	ldr	r2, [pc, #164]	; (8002bfc <TIM_Base_SetConfig+0xb8>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d00b      	beq.n	8002b74 <TIM_Base_SetConfig+0x30>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b62:	d007      	beq.n	8002b74 <TIM_Base_SetConfig+0x30>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a26      	ldr	r2, [pc, #152]	; (8002c00 <TIM_Base_SetConfig+0xbc>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d003      	beq.n	8002b74 <TIM_Base_SetConfig+0x30>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a25      	ldr	r2, [pc, #148]	; (8002c04 <TIM_Base_SetConfig+0xc0>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d108      	bne.n	8002b86 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a1c      	ldr	r2, [pc, #112]	; (8002bfc <TIM_Base_SetConfig+0xb8>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d00b      	beq.n	8002ba6 <TIM_Base_SetConfig+0x62>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b94:	d007      	beq.n	8002ba6 <TIM_Base_SetConfig+0x62>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a19      	ldr	r2, [pc, #100]	; (8002c00 <TIM_Base_SetConfig+0xbc>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d003      	beq.n	8002ba6 <TIM_Base_SetConfig+0x62>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a18      	ldr	r2, [pc, #96]	; (8002c04 <TIM_Base_SetConfig+0xc0>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d108      	bne.n	8002bb8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a07      	ldr	r2, [pc, #28]	; (8002bfc <TIM_Base_SetConfig+0xb8>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d103      	bne.n	8002bec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	691a      	ldr	r2, [r3, #16]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	615a      	str	r2, [r3, #20]
}
 8002bf2:	bf00      	nop
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr
 8002bfc:	40012c00 	.word	0x40012c00
 8002c00:	40000400 	.word	0x40000400
 8002c04:	40000800 	.word	0x40000800

08002c08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	f023 0201 	bic.w	r2, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f023 0303 	bic.w	r3, r3, #3
 8002c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f023 0302 	bic.w	r3, r3, #2
 8002c50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a1c      	ldr	r2, [pc, #112]	; (8002cd0 <TIM_OC1_SetConfig+0xc8>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d10c      	bne.n	8002c7e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	f023 0308 	bic.w	r3, r3, #8
 8002c6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	f023 0304 	bic.w	r3, r3, #4
 8002c7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a13      	ldr	r2, [pc, #76]	; (8002cd0 <TIM_OC1_SetConfig+0xc8>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d111      	bne.n	8002caa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	621a      	str	r2, [r3, #32]
}
 8002cc4:	bf00      	nop
 8002cc6:	371c      	adds	r7, #28
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bc80      	pop	{r7}
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	40012c00 	.word	0x40012c00

08002cd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b087      	sub	sp, #28
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	f023 0210 	bic.w	r2, r3, #16
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	021b      	lsls	r3, r3, #8
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	f023 0320 	bic.w	r3, r3, #32
 8002d1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	011b      	lsls	r3, r3, #4
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a1d      	ldr	r2, [pc, #116]	; (8002da4 <TIM_OC2_SetConfig+0xd0>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d10d      	bne.n	8002d50 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	011b      	lsls	r3, r3, #4
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a14      	ldr	r2, [pc, #80]	; (8002da4 <TIM_OC2_SetConfig+0xd0>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d113      	bne.n	8002d80 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	621a      	str	r2, [r3, #32]
}
 8002d9a:	bf00      	nop
 8002d9c:	371c      	adds	r7, #28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr
 8002da4:	40012c00 	.word	0x40012c00

08002da8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b087      	sub	sp, #28
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f023 0303 	bic.w	r3, r3, #3
 8002dde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002df0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	021b      	lsls	r3, r3, #8
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a1d      	ldr	r2, [pc, #116]	; (8002e78 <TIM_OC3_SetConfig+0xd0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d10d      	bne.n	8002e22 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	021b      	lsls	r3, r3, #8
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a14      	ldr	r2, [pc, #80]	; (8002e78 <TIM_OC3_SetConfig+0xd0>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d113      	bne.n	8002e52 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	011b      	lsls	r3, r3, #4
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	011b      	lsls	r3, r3, #4
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	621a      	str	r2, [r3, #32]
}
 8002e6c:	bf00      	nop
 8002e6e:	371c      	adds	r7, #28
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bc80      	pop	{r7}
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	40012c00 	.word	0x40012c00

08002e7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b087      	sub	sp, #28
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	021b      	lsls	r3, r3, #8
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ec6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	031b      	lsls	r3, r3, #12
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a0f      	ldr	r2, [pc, #60]	; (8002f14 <TIM_OC4_SetConfig+0x98>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d109      	bne.n	8002ef0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ee2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	019b      	lsls	r3, r3, #6
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	621a      	str	r2, [r3, #32]
}
 8002f0a:	bf00      	nop
 8002f0c:	371c      	adds	r7, #28
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr
 8002f14:	40012c00 	.word	0x40012c00

08002f18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d101      	bne.n	8002f30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	e046      	b.n	8002fbe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a16      	ldr	r2, [pc, #88]	; (8002fc8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d00e      	beq.n	8002f92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f7c:	d009      	beq.n	8002f92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a12      	ldr	r2, [pc, #72]	; (8002fcc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d004      	beq.n	8002f92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a10      	ldr	r2, [pc, #64]	; (8002fd0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d10c      	bne.n	8002fac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr
 8002fc8:	40012c00 	.word	0x40012c00
 8002fcc:	40000400 	.word	0x40000400
 8002fd0:	40000800 	.word	0x40000800

08002fd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bc80      	pop	{r7}
 8002fe4:	4770      	bx	lr

08002fe6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b083      	sub	sp, #12
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bc80      	pop	{r7}
 8002ff6:	4770      	bx	lr

08002ff8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002ff8:	b084      	sub	sp, #16
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
 8003002:	f107 0014 	add.w	r0, r7, #20
 8003006:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	bc80      	pop	{r7}
 8003014:	b004      	add	sp, #16
 8003016:	4770      	bx	lr

08003018 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003020:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003024:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800302c:	b29a      	uxth	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	b29b      	uxth	r3, r3
 8003032:	43db      	mvns	r3, r3
 8003034:	b29b      	uxth	r3, r3
 8003036:	4013      	ands	r3, r2
 8003038:	b29a      	uxth	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3714      	adds	r7, #20
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr

0800304c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	460b      	mov	r3, r1
 8003056:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	bc80      	pop	{r7}
 8003062:	4770      	bx	lr

08003064 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003064:	b084      	sub	sp, #16
 8003066:	b480      	push	{r7}
 8003068:	b083      	sub	sp, #12
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
 800306e:	f107 0014 	add.w	r0, r7, #20
 8003072:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	bc80      	pop	{r7}
 80030a0:	b004      	add	sp, #16
 80030a2:	4770      	bx	lr

080030a4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bc80      	pop	{r7}
 80030b6:	4770      	bx	lr

080030b8 <__libc_init_array>:
 80030b8:	b570      	push	{r4, r5, r6, lr}
 80030ba:	2600      	movs	r6, #0
 80030bc:	4d0c      	ldr	r5, [pc, #48]	; (80030f0 <__libc_init_array+0x38>)
 80030be:	4c0d      	ldr	r4, [pc, #52]	; (80030f4 <__libc_init_array+0x3c>)
 80030c0:	1b64      	subs	r4, r4, r5
 80030c2:	10a4      	asrs	r4, r4, #2
 80030c4:	42a6      	cmp	r6, r4
 80030c6:	d109      	bne.n	80030dc <__libc_init_array+0x24>
 80030c8:	f000 f822 	bl	8003110 <_init>
 80030cc:	2600      	movs	r6, #0
 80030ce:	4d0a      	ldr	r5, [pc, #40]	; (80030f8 <__libc_init_array+0x40>)
 80030d0:	4c0a      	ldr	r4, [pc, #40]	; (80030fc <__libc_init_array+0x44>)
 80030d2:	1b64      	subs	r4, r4, r5
 80030d4:	10a4      	asrs	r4, r4, #2
 80030d6:	42a6      	cmp	r6, r4
 80030d8:	d105      	bne.n	80030e6 <__libc_init_array+0x2e>
 80030da:	bd70      	pop	{r4, r5, r6, pc}
 80030dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80030e0:	4798      	blx	r3
 80030e2:	3601      	adds	r6, #1
 80030e4:	e7ee      	b.n	80030c4 <__libc_init_array+0xc>
 80030e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80030ea:	4798      	blx	r3
 80030ec:	3601      	adds	r6, #1
 80030ee:	e7f2      	b.n	80030d6 <__libc_init_array+0x1e>
 80030f0:	08003150 	.word	0x08003150
 80030f4:	08003150 	.word	0x08003150
 80030f8:	08003150 	.word	0x08003150
 80030fc:	08003154 	.word	0x08003154

08003100 <memset>:
 8003100:	4603      	mov	r3, r0
 8003102:	4402      	add	r2, r0
 8003104:	4293      	cmp	r3, r2
 8003106:	d100      	bne.n	800310a <memset+0xa>
 8003108:	4770      	bx	lr
 800310a:	f803 1b01 	strb.w	r1, [r3], #1
 800310e:	e7f9      	b.n	8003104 <memset+0x4>

08003110 <_init>:
 8003110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003112:	bf00      	nop
 8003114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003116:	bc08      	pop	{r3}
 8003118:	469e      	mov	lr, r3
 800311a:	4770      	bx	lr

0800311c <_fini>:
 800311c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800311e:	bf00      	nop
 8003120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003122:	bc08      	pop	{r3}
 8003124:	469e      	mov	lr, r3
 8003126:	4770      	bx	lr
