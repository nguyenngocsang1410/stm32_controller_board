
Re_Project_Shoe_Bending.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066fc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  0800680c  0800680c  0001680c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006928  08006928  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08006928  08006928  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006928  08006928  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006928  08006928  00016928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800692c  0800692c  0001692c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08006930  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000090  080069bc  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  080069bc  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fbb3  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002869  00000000  00000000  0002fc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  000324d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f40  00000000  00000000  00033528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195c8  00000000  00000000  00034468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012946  00000000  00000000  0004da30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000916da  00000000  00000000  00060376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f1a50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ad4  00000000  00000000  000f1aa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000090 	.word	0x20000090
 800012c:	00000000 	.word	0x00000000
 8000130:	080067f4 	.word	0x080067f4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000094 	.word	0x20000094
 800014c:	080067f4 	.word	0x080067f4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_d2f>:
 800093c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000944:	bf24      	itt	cs
 8000946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800094a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800094e:	d90d      	bls.n	800096c <__aeabi_d2f+0x30>
 8000950:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800095c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000964:	bf08      	it	eq
 8000966:	f020 0001 	biceq.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000970:	d121      	bne.n	80009b6 <__aeabi_d2f+0x7a>
 8000972:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000976:	bfbc      	itt	lt
 8000978:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800097c:	4770      	bxlt	lr
 800097e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000982:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000986:	f1c2 0218 	rsb	r2, r2, #24
 800098a:	f1c2 0c20 	rsb	ip, r2, #32
 800098e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000992:	fa20 f002 	lsr.w	r0, r0, r2
 8000996:	bf18      	it	ne
 8000998:	f040 0001 	orrne.w	r0, r0, #1
 800099c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a8:	ea40 000c 	orr.w	r0, r0, ip
 80009ac:	fa23 f302 	lsr.w	r3, r3, r2
 80009b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b4:	e7cc      	b.n	8000950 <__aeabi_d2f+0x14>
 80009b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ba:	d107      	bne.n	80009cc <__aeabi_d2f+0x90>
 80009bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009c0:	bf1e      	ittt	ne
 80009c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ca:	4770      	bxne	lr
 80009cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_frsub>:
 80009dc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009e0:	e002      	b.n	80009e8 <__addsf3>
 80009e2:	bf00      	nop

080009e4 <__aeabi_fsub>:
 80009e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009e8 <__addsf3>:
 80009e8:	0042      	lsls	r2, r0, #1
 80009ea:	bf1f      	itttt	ne
 80009ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009f0:	ea92 0f03 	teqne	r2, r3
 80009f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009fc:	d06a      	beq.n	8000ad4 <__addsf3+0xec>
 80009fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a06:	bfc1      	itttt	gt
 8000a08:	18d2      	addgt	r2, r2, r3
 8000a0a:	4041      	eorgt	r1, r0
 8000a0c:	4048      	eorgt	r0, r1
 8000a0e:	4041      	eorgt	r1, r0
 8000a10:	bfb8      	it	lt
 8000a12:	425b      	neglt	r3, r3
 8000a14:	2b19      	cmp	r3, #25
 8000a16:	bf88      	it	hi
 8000a18:	4770      	bxhi	lr
 8000a1a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a2e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4249      	negne	r1, r1
 8000a3a:	ea92 0f03 	teq	r2, r3
 8000a3e:	d03f      	beq.n	8000ac0 <__addsf3+0xd8>
 8000a40:	f1a2 0201 	sub.w	r2, r2, #1
 8000a44:	fa41 fc03 	asr.w	ip, r1, r3
 8000a48:	eb10 000c 	adds.w	r0, r0, ip
 8000a4c:	f1c3 0320 	rsb	r3, r3, #32
 8000a50:	fa01 f103 	lsl.w	r1, r1, r3
 8000a54:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a58:	d502      	bpl.n	8000a60 <__addsf3+0x78>
 8000a5a:	4249      	negs	r1, r1
 8000a5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a64:	d313      	bcc.n	8000a8e <__addsf3+0xa6>
 8000a66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a6a:	d306      	bcc.n	8000a7a <__addsf3+0x92>
 8000a6c:	0840      	lsrs	r0, r0, #1
 8000a6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a72:	f102 0201 	add.w	r2, r2, #1
 8000a76:	2afe      	cmp	r2, #254	; 0xfe
 8000a78:	d251      	bcs.n	8000b1e <__addsf3+0x136>
 8000a7a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a82:	bf08      	it	eq
 8000a84:	f020 0001 	biceq.w	r0, r0, #1
 8000a88:	ea40 0003 	orr.w	r0, r0, r3
 8000a8c:	4770      	bx	lr
 8000a8e:	0049      	lsls	r1, r1, #1
 8000a90:	eb40 0000 	adc.w	r0, r0, r0
 8000a94:	3a01      	subs	r2, #1
 8000a96:	bf28      	it	cs
 8000a98:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a9c:	d2ed      	bcs.n	8000a7a <__addsf3+0x92>
 8000a9e:	fab0 fc80 	clz	ip, r0
 8000aa2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000aa6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aaa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aae:	bfaa      	itet	ge
 8000ab0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ab4:	4252      	neglt	r2, r2
 8000ab6:	4318      	orrge	r0, r3
 8000ab8:	bfbc      	itt	lt
 8000aba:	40d0      	lsrlt	r0, r2
 8000abc:	4318      	orrlt	r0, r3
 8000abe:	4770      	bx	lr
 8000ac0:	f092 0f00 	teq	r2, #0
 8000ac4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ac8:	bf06      	itte	eq
 8000aca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ace:	3201      	addeq	r2, #1
 8000ad0:	3b01      	subne	r3, #1
 8000ad2:	e7b5      	b.n	8000a40 <__addsf3+0x58>
 8000ad4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ad8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000adc:	bf18      	it	ne
 8000ade:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae2:	d021      	beq.n	8000b28 <__addsf3+0x140>
 8000ae4:	ea92 0f03 	teq	r2, r3
 8000ae8:	d004      	beq.n	8000af4 <__addsf3+0x10c>
 8000aea:	f092 0f00 	teq	r2, #0
 8000aee:	bf08      	it	eq
 8000af0:	4608      	moveq	r0, r1
 8000af2:	4770      	bx	lr
 8000af4:	ea90 0f01 	teq	r0, r1
 8000af8:	bf1c      	itt	ne
 8000afa:	2000      	movne	r0, #0
 8000afc:	4770      	bxne	lr
 8000afe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b02:	d104      	bne.n	8000b0e <__addsf3+0x126>
 8000b04:	0040      	lsls	r0, r0, #1
 8000b06:	bf28      	it	cs
 8000b08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b0c:	4770      	bx	lr
 8000b0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b12:	bf3c      	itt	cc
 8000b14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b18:	4770      	bxcc	lr
 8000b1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b26:	4770      	bx	lr
 8000b28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b2c:	bf16      	itet	ne
 8000b2e:	4608      	movne	r0, r1
 8000b30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b34:	4601      	movne	r1, r0
 8000b36:	0242      	lsls	r2, r0, #9
 8000b38:	bf06      	itte	eq
 8000b3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b3e:	ea90 0f01 	teqeq	r0, r1
 8000b42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_ui2f>:
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	e004      	b.n	8000b58 <__aeabi_i2f+0x8>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_i2f>:
 8000b50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b54:	bf48      	it	mi
 8000b56:	4240      	negmi	r0, r0
 8000b58:	ea5f 0c00 	movs.w	ip, r0
 8000b5c:	bf08      	it	eq
 8000b5e:	4770      	bxeq	lr
 8000b60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b64:	4601      	mov	r1, r0
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	e01c      	b.n	8000ba6 <__aeabi_l2f+0x2a>

08000b6c <__aeabi_ul2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	e00a      	b.n	8000b90 <__aeabi_l2f+0x14>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_l2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b88:	d502      	bpl.n	8000b90 <__aeabi_l2f+0x14>
 8000b8a:	4240      	negs	r0, r0
 8000b8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b90:	ea5f 0c01 	movs.w	ip, r1
 8000b94:	bf02      	ittt	eq
 8000b96:	4684      	moveq	ip, r0
 8000b98:	4601      	moveq	r1, r0
 8000b9a:	2000      	moveq	r0, #0
 8000b9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000baa:	fabc f28c 	clz	r2, ip
 8000bae:	3a08      	subs	r2, #8
 8000bb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bb4:	db10      	blt.n	8000bd8 <__aeabi_l2f+0x5c>
 8000bb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bba:	4463      	add	r3, ip
 8000bbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bc0:	f1c2 0220 	rsb	r2, r2, #32
 8000bc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bcc:	eb43 0002 	adc.w	r0, r3, r2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f102 0220 	add.w	r2, r2, #32
 8000bdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000be0:	f1c2 0220 	rsb	r2, r2, #32
 8000be4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000be8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bec:	eb43 0002 	adc.w	r0, r3, r2
 8000bf0:	bf08      	it	eq
 8000bf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_fmul>:
 8000bf8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c00:	bf1e      	ittt	ne
 8000c02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c06:	ea92 0f0c 	teqne	r2, ip
 8000c0a:	ea93 0f0c 	teqne	r3, ip
 8000c0e:	d06f      	beq.n	8000cf0 <__aeabi_fmul+0xf8>
 8000c10:	441a      	add	r2, r3
 8000c12:	ea80 0c01 	eor.w	ip, r0, r1
 8000c16:	0240      	lsls	r0, r0, #9
 8000c18:	bf18      	it	ne
 8000c1a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c1e:	d01e      	beq.n	8000c5e <__aeabi_fmul+0x66>
 8000c20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c24:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c28:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c2c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c34:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c38:	bf3e      	ittt	cc
 8000c3a:	0049      	lslcc	r1, r1, #1
 8000c3c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c40:	005b      	lslcc	r3, r3, #1
 8000c42:	ea40 0001 	orr.w	r0, r0, r1
 8000c46:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c4a:	2afd      	cmp	r2, #253	; 0xfd
 8000c4c:	d81d      	bhi.n	8000c8a <__aeabi_fmul+0x92>
 8000c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c56:	bf08      	it	eq
 8000c58:	f020 0001 	biceq.w	r0, r0, #1
 8000c5c:	4770      	bx	lr
 8000c5e:	f090 0f00 	teq	r0, #0
 8000c62:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c66:	bf08      	it	eq
 8000c68:	0249      	lsleq	r1, r1, #9
 8000c6a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c6e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c72:	3a7f      	subs	r2, #127	; 0x7f
 8000c74:	bfc2      	ittt	gt
 8000c76:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c7a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c7e:	4770      	bxgt	lr
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	dc5d      	bgt.n	8000d48 <__aeabi_fmul+0x150>
 8000c8c:	f112 0f19 	cmn.w	r2, #25
 8000c90:	bfdc      	itt	le
 8000c92:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c96:	4770      	bxle	lr
 8000c98:	f1c2 0200 	rsb	r2, r2, #0
 8000c9c:	0041      	lsls	r1, r0, #1
 8000c9e:	fa21 f102 	lsr.w	r1, r1, r2
 8000ca2:	f1c2 0220 	rsb	r2, r2, #32
 8000ca6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000caa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cae:	f140 0000 	adc.w	r0, r0, #0
 8000cb2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cb6:	bf08      	it	eq
 8000cb8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cbc:	4770      	bx	lr
 8000cbe:	f092 0f00 	teq	r2, #0
 8000cc2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cc6:	bf02      	ittt	eq
 8000cc8:	0040      	lsleq	r0, r0, #1
 8000cca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cce:	3a01      	subeq	r2, #1
 8000cd0:	d0f9      	beq.n	8000cc6 <__aeabi_fmul+0xce>
 8000cd2:	ea40 000c 	orr.w	r0, r0, ip
 8000cd6:	f093 0f00 	teq	r3, #0
 8000cda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cde:	bf02      	ittt	eq
 8000ce0:	0049      	lsleq	r1, r1, #1
 8000ce2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ce6:	3b01      	subeq	r3, #1
 8000ce8:	d0f9      	beq.n	8000cde <__aeabi_fmul+0xe6>
 8000cea:	ea41 010c 	orr.w	r1, r1, ip
 8000cee:	e78f      	b.n	8000c10 <__aeabi_fmul+0x18>
 8000cf0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cf4:	ea92 0f0c 	teq	r2, ip
 8000cf8:	bf18      	it	ne
 8000cfa:	ea93 0f0c 	teqne	r3, ip
 8000cfe:	d00a      	beq.n	8000d16 <__aeabi_fmul+0x11e>
 8000d00:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d04:	bf18      	it	ne
 8000d06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d0a:	d1d8      	bne.n	8000cbe <__aeabi_fmul+0xc6>
 8000d0c:	ea80 0001 	eor.w	r0, r0, r1
 8000d10:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d14:	4770      	bx	lr
 8000d16:	f090 0f00 	teq	r0, #0
 8000d1a:	bf17      	itett	ne
 8000d1c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d20:	4608      	moveq	r0, r1
 8000d22:	f091 0f00 	teqne	r1, #0
 8000d26:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d2a:	d014      	beq.n	8000d56 <__aeabi_fmul+0x15e>
 8000d2c:	ea92 0f0c 	teq	r2, ip
 8000d30:	d101      	bne.n	8000d36 <__aeabi_fmul+0x13e>
 8000d32:	0242      	lsls	r2, r0, #9
 8000d34:	d10f      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d36:	ea93 0f0c 	teq	r3, ip
 8000d3a:	d103      	bne.n	8000d44 <__aeabi_fmul+0x14c>
 8000d3c:	024b      	lsls	r3, r1, #9
 8000d3e:	bf18      	it	ne
 8000d40:	4608      	movne	r0, r1
 8000d42:	d108      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d44:	ea80 0001 	eor.w	r0, r0, r1
 8000d48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d54:	4770      	bx	lr
 8000d56:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d5a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_fdiv>:
 8000d60:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d68:	bf1e      	ittt	ne
 8000d6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d6e:	ea92 0f0c 	teqne	r2, ip
 8000d72:	ea93 0f0c 	teqne	r3, ip
 8000d76:	d069      	beq.n	8000e4c <__aeabi_fdiv+0xec>
 8000d78:	eba2 0203 	sub.w	r2, r2, r3
 8000d7c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d80:	0249      	lsls	r1, r1, #9
 8000d82:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d86:	d037      	beq.n	8000df8 <__aeabi_fdiv+0x98>
 8000d88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d8c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	bf38      	it	cc
 8000d9c:	005b      	lslcc	r3, r3, #1
 8000d9e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000da2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000da6:	428b      	cmp	r3, r1
 8000da8:	bf24      	itt	cs
 8000daa:	1a5b      	subcs	r3, r3, r1
 8000dac:	ea40 000c 	orrcs.w	r0, r0, ip
 8000db0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000db4:	bf24      	itt	cs
 8000db6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dbe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dc2:	bf24      	itt	cs
 8000dc4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dc8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dcc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dd0:	bf24      	itt	cs
 8000dd2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dd6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dda:	011b      	lsls	r3, r3, #4
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000de2:	d1e0      	bne.n	8000da6 <__aeabi_fdiv+0x46>
 8000de4:	2afd      	cmp	r2, #253	; 0xfd
 8000de6:	f63f af50 	bhi.w	8000c8a <__aeabi_fmul+0x92>
 8000dea:	428b      	cmp	r3, r1
 8000dec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df0:	bf08      	it	eq
 8000df2:	f020 0001 	biceq.w	r0, r0, #1
 8000df6:	4770      	bx	lr
 8000df8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dfc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e00:	327f      	adds	r2, #127	; 0x7f
 8000e02:	bfc2      	ittt	gt
 8000e04:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0c:	4770      	bxgt	lr
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e12:	f04f 0300 	mov.w	r3, #0
 8000e16:	3a01      	subs	r2, #1
 8000e18:	e737      	b.n	8000c8a <__aeabi_fmul+0x92>
 8000e1a:	f092 0f00 	teq	r2, #0
 8000e1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e22:	bf02      	ittt	eq
 8000e24:	0040      	lsleq	r0, r0, #1
 8000e26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e2a:	3a01      	subeq	r2, #1
 8000e2c:	d0f9      	beq.n	8000e22 <__aeabi_fdiv+0xc2>
 8000e2e:	ea40 000c 	orr.w	r0, r0, ip
 8000e32:	f093 0f00 	teq	r3, #0
 8000e36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0049      	lsleq	r1, r1, #1
 8000e3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e42:	3b01      	subeq	r3, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fdiv+0xda>
 8000e46:	ea41 010c 	orr.w	r1, r1, ip
 8000e4a:	e795      	b.n	8000d78 <__aeabi_fdiv+0x18>
 8000e4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e50:	ea92 0f0c 	teq	r2, ip
 8000e54:	d108      	bne.n	8000e68 <__aeabi_fdiv+0x108>
 8000e56:	0242      	lsls	r2, r0, #9
 8000e58:	f47f af7d 	bne.w	8000d56 <__aeabi_fmul+0x15e>
 8000e5c:	ea93 0f0c 	teq	r3, ip
 8000e60:	f47f af70 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e776      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e68:	ea93 0f0c 	teq	r3, ip
 8000e6c:	d104      	bne.n	8000e78 <__aeabi_fdiv+0x118>
 8000e6e:	024b      	lsls	r3, r1, #9
 8000e70:	f43f af4c 	beq.w	8000d0c <__aeabi_fmul+0x114>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e76e      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e78:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e7c:	bf18      	it	ne
 8000e7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e82:	d1ca      	bne.n	8000e1a <__aeabi_fdiv+0xba>
 8000e84:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e88:	f47f af5c 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e8c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e90:	f47f af3c 	bne.w	8000d0c <__aeabi_fmul+0x114>
 8000e94:	e75f      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e96:	bf00      	nop

08000e98 <__gesf2>:
 8000e98:	f04f 3cff 	mov.w	ip, #4294967295
 8000e9c:	e006      	b.n	8000eac <__cmpsf2+0x4>
 8000e9e:	bf00      	nop

08000ea0 <__lesf2>:
 8000ea0:	f04f 0c01 	mov.w	ip, #1
 8000ea4:	e002      	b.n	8000eac <__cmpsf2+0x4>
 8000ea6:	bf00      	nop

08000ea8 <__cmpsf2>:
 8000ea8:	f04f 0c01 	mov.w	ip, #1
 8000eac:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000eb0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000eb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000eb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ebc:	bf18      	it	ne
 8000ebe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ec2:	d011      	beq.n	8000ee8 <__cmpsf2+0x40>
 8000ec4:	b001      	add	sp, #4
 8000ec6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eca:	bf18      	it	ne
 8000ecc:	ea90 0f01 	teqne	r0, r1
 8000ed0:	bf58      	it	pl
 8000ed2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ed6:	bf88      	it	hi
 8000ed8:	17c8      	asrhi	r0, r1, #31
 8000eda:	bf38      	it	cc
 8000edc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ee0:	bf18      	it	ne
 8000ee2:	f040 0001 	orrne.w	r0, r0, #1
 8000ee6:	4770      	bx	lr
 8000ee8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eec:	d102      	bne.n	8000ef4 <__cmpsf2+0x4c>
 8000eee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ef2:	d105      	bne.n	8000f00 <__cmpsf2+0x58>
 8000ef4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ef8:	d1e4      	bne.n	8000ec4 <__cmpsf2+0x1c>
 8000efa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000efe:	d0e1      	beq.n	8000ec4 <__cmpsf2+0x1c>
 8000f00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <__aeabi_cfrcmple>:
 8000f08:	4684      	mov	ip, r0
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	4661      	mov	r1, ip
 8000f0e:	e7ff      	b.n	8000f10 <__aeabi_cfcmpeq>

08000f10 <__aeabi_cfcmpeq>:
 8000f10:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f12:	f7ff ffc9 	bl	8000ea8 <__cmpsf2>
 8000f16:	2800      	cmp	r0, #0
 8000f18:	bf48      	it	mi
 8000f1a:	f110 0f00 	cmnmi.w	r0, #0
 8000f1e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f20 <__aeabi_fcmpeq>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff fff4 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f28:	bf0c      	ite	eq
 8000f2a:	2001      	moveq	r0, #1
 8000f2c:	2000      	movne	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_fcmplt>:
 8000f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f38:	f7ff ffea 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f3c:	bf34      	ite	cc
 8000f3e:	2001      	movcc	r0, #1
 8000f40:	2000      	movcs	r0, #0
 8000f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f46:	bf00      	nop

08000f48 <__aeabi_fcmple>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff ffe0 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f50:	bf94      	ite	ls
 8000f52:	2001      	movls	r0, #1
 8000f54:	2000      	movhi	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_fcmpge>:
 8000f5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f60:	f7ff ffd2 	bl	8000f08 <__aeabi_cfrcmple>
 8000f64:	bf94      	ite	ls
 8000f66:	2001      	movls	r0, #1
 8000f68:	2000      	movhi	r0, #0
 8000f6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6e:	bf00      	nop

08000f70 <__aeabi_fcmpgt>:
 8000f70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f74:	f7ff ffc8 	bl	8000f08 <__aeabi_cfrcmple>
 8000f78:	bf34      	ite	cc
 8000f7a:	2001      	movcc	r0, #1
 8000f7c:	2000      	movcs	r0, #0
 8000f7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f82:	bf00      	nop

08000f84 <__aeabi_f2iz>:
 8000f84:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f88:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f8c:	d30f      	bcc.n	8000fae <__aeabi_f2iz+0x2a>
 8000f8e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f96:	d90d      	bls.n	8000fb4 <__aeabi_f2iz+0x30>
 8000f98:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fa0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fa4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa8:	bf18      	it	ne
 8000faa:	4240      	negne	r0, r0
 8000fac:	4770      	bx	lr
 8000fae:	f04f 0000 	mov.w	r0, #0
 8000fb2:	4770      	bx	lr
 8000fb4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fb8:	d101      	bne.n	8000fbe <__aeabi_f2iz+0x3a>
 8000fba:	0242      	lsls	r2, r0, #9
 8000fbc:	d105      	bne.n	8000fca <__aeabi_f2iz+0x46>
 8000fbe:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fc2:	bf08      	it	eq
 8000fc4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fc8:	4770      	bx	lr
 8000fca:	f04f 0000 	mov.w	r0, #0
 8000fce:	4770      	bx	lr

08000fd0 <__aeabi_f2ulz>:
 8000fd0:	b5d0      	push	{r4, r6, r7, lr}
 8000fd2:	f7ff fa21 	bl	8000418 <__aeabi_f2d>
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <__aeabi_f2ulz+0x38>)
 8000fda:	4606      	mov	r6, r0
 8000fdc:	460f      	mov	r7, r1
 8000fde:	f7ff fa73 	bl	80004c8 <__aeabi_dmul>
 8000fe2:	f000 f815 	bl	8001010 <__aeabi_d2uiz>
 8000fe6:	4604      	mov	r4, r0
 8000fe8:	f7ff f9f4 	bl	80003d4 <__aeabi_ui2d>
 8000fec:	2200      	movs	r2, #0
 8000fee:	4b07      	ldr	r3, [pc, #28]	; (800100c <__aeabi_f2ulz+0x3c>)
 8000ff0:	f7ff fa6a 	bl	80004c8 <__aeabi_dmul>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	4630      	mov	r0, r6
 8000ffa:	4639      	mov	r1, r7
 8000ffc:	f7ff f8ac 	bl	8000158 <__aeabi_dsub>
 8001000:	f000 f806 	bl	8001010 <__aeabi_d2uiz>
 8001004:	4621      	mov	r1, r4
 8001006:	bdd0      	pop	{r4, r6, r7, pc}
 8001008:	3df00000 	.word	0x3df00000
 800100c:	41f00000 	.word	0x41f00000

08001010 <__aeabi_d2uiz>:
 8001010:	004a      	lsls	r2, r1, #1
 8001012:	d211      	bcs.n	8001038 <__aeabi_d2uiz+0x28>
 8001014:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8001018:	d211      	bcs.n	800103e <__aeabi_d2uiz+0x2e>
 800101a:	d50d      	bpl.n	8001038 <__aeabi_d2uiz+0x28>
 800101c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8001020:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001024:	d40e      	bmi.n	8001044 <__aeabi_d2uiz+0x34>
 8001026:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800102a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800102e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001032:	fa23 f002 	lsr.w	r0, r3, r2
 8001036:	4770      	bx	lr
 8001038:	f04f 0000 	mov.w	r0, #0
 800103c:	4770      	bx	lr
 800103e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001042:	d102      	bne.n	800104a <__aeabi_d2uiz+0x3a>
 8001044:	f04f 30ff 	mov.w	r0, #4294967295
 8001048:	4770      	bx	lr
 800104a:	f04f 0000 	mov.w	r0, #0
 800104e:	4770      	bx	lr

08001050 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001054:	f001 ffb6 	bl	8002fc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001058:	f000 f815 	bl	8001086 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800105c:	f000 fa72 	bl	8001544 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001060:	f000 f8fc 	bl	800125c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001064:	f000 f952 	bl	800130c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001068:	f000 f9a4 	bl	80013b4 <MX_TIM3_Init>
  MX_TIM4_Init();
 800106c:	f000 fa06 	bl	800147c <MX_TIM4_Init>
  MX_I2C2_Init();
 8001070:	f000 f8c6 	bl	8001200 <MX_I2C2_Init>
  MX_ADC1_Init();
 8001074:	f000 f886 	bl	8001184 <MX_ADC1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001078:	f000 f860 	bl	800113c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  start_up();
 800107c:	f000 ff2e 	bl	8001edc <start_up>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	main_loop();
 8001080:	f000 ffe0 	bl	8002044 <main_loop>
 8001084:	e7fc      	b.n	8001080 <main+0x30>

08001086 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b094      	sub	sp, #80	; 0x50
 800108a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001090:	2228      	movs	r2, #40	; 0x28
 8001092:	2100      	movs	r1, #0
 8001094:	4618      	mov	r0, r3
 8001096:	f004 ff2b 	bl	8005ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010b6:	2301      	movs	r3, #1
 80010b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010c0:	2300      	movs	r3, #0
 80010c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c4:	2301      	movs	r3, #1
 80010c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c8:	2302      	movs	r3, #2
 80010ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80010d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80010d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010dc:	4618      	mov	r0, r3
 80010de:	f003 fb45 	bl	800476c <HAL_RCC_OscConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <SystemClock_Config+0x66>
  {
    Error_Handler();
 80010e8:	f000 fad8 	bl	800169c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ec:	230f      	movs	r3, #15
 80010ee:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f0:	2302      	movs	r3, #2
 80010f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010fc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	2101      	movs	r1, #1
 8001108:	4618      	mov	r0, r3
 800110a:	f003 fdb1 	bl	8004c70 <HAL_RCC_ClockConfig>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001114:	f000 fac2 	bl	800169c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001118:	2302      	movs	r3, #2
 800111a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800111c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001120:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	4618      	mov	r0, r3
 8001126:	f003 ff27 	bl	8004f78 <HAL_RCCEx_PeriphCLKConfig>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001130:	f000 fab4 	bl	800169c <Error_Handler>
  }
}
 8001134:	bf00      	nop
 8001136:	3750      	adds	r7, #80	; 0x50
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 8001140:	2200      	movs	r2, #0
 8001142:	2102      	movs	r1, #2
 8001144:	2009      	movs	r0, #9
 8001146:	f002 faac 	bl	80036a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800114a:	2009      	movs	r0, #9
 800114c:	f002 fac5 	bl	80036da <HAL_NVIC_EnableIRQ>
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 8001150:	2200      	movs	r2, #0
 8001152:	2102      	movs	r1, #2
 8001154:	200a      	movs	r0, #10
 8001156:	f002 faa4 	bl	80036a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800115a:	200a      	movs	r0, #10
 800115c:	f002 fabd 	bl	80036da <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8001160:	2200      	movs	r2, #0
 8001162:	2102      	movs	r1, #2
 8001164:	2017      	movs	r0, #23
 8001166:	f002 fa9c 	bl	80036a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800116a:	2017      	movs	r0, #23
 800116c:	f002 fab5 	bl	80036da <HAL_NVIC_EnableIRQ>
  /* TIM4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8001170:	2200      	movs	r2, #0
 8001172:	2101      	movs	r1, #1
 8001174:	201e      	movs	r0, #30
 8001176:	f002 fa94 	bl	80036a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800117a:	201e      	movs	r0, #30
 800117c:	f002 faad 	bl	80036da <HAL_NVIC_EnableIRQ>
}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}

08001184 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001194:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <MX_ADC1_Init+0x74>)
 8001196:	4a19      	ldr	r2, [pc, #100]	; (80011fc <MX_ADC1_Init+0x78>)
 8001198:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800119a:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <MX_ADC1_Init+0x74>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011a0:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <MX_ADC1_Init+0x74>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011a6:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <MX_ADC1_Init+0x74>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <MX_ADC1_Init+0x74>)
 80011ae:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80011b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011b4:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <MX_ADC1_Init+0x74>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80011ba:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <MX_ADC1_Init+0x74>)
 80011bc:	2201      	movs	r2, #1
 80011be:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011c0:	480d      	ldr	r0, [pc, #52]	; (80011f8 <MX_ADC1_Init+0x74>)
 80011c2:	f001 ff85 	bl	80030d0 <HAL_ADC_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80011cc:	f000 fa66 	bl	800169c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80011d0:	2303      	movs	r3, #3
 80011d2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011d4:	2301      	movs	r3, #1
 80011d6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	4619      	mov	r1, r3
 80011e0:	4805      	ldr	r0, [pc, #20]	; (80011f8 <MX_ADC1_Init+0x74>)
 80011e2:	f002 f84d 	bl	8003280 <HAL_ADC_ConfigChannel>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80011ec:	f000 fa56 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	200000ac 	.word	0x200000ac
 80011fc:	40012400 	.word	0x40012400

08001200 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001204:	4b12      	ldr	r3, [pc, #72]	; (8001250 <MX_I2C2_Init+0x50>)
 8001206:	4a13      	ldr	r2, [pc, #76]	; (8001254 <MX_I2C2_Init+0x54>)
 8001208:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <MX_I2C2_Init+0x50>)
 800120c:	4a12      	ldr	r2, [pc, #72]	; (8001258 <MX_I2C2_Init+0x58>)
 800120e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001210:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <MX_I2C2_Init+0x50>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <MX_I2C2_Init+0x50>)
 8001218:	2200      	movs	r2, #0
 800121a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <MX_I2C2_Init+0x50>)
 800121e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001222:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001224:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <MX_I2C2_Init+0x50>)
 8001226:	2200      	movs	r2, #0
 8001228:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <MX_I2C2_Init+0x50>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001230:	4b07      	ldr	r3, [pc, #28]	; (8001250 <MX_I2C2_Init+0x50>)
 8001232:	2200      	movs	r2, #0
 8001234:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <MX_I2C2_Init+0x50>)
 8001238:	2200      	movs	r2, #0
 800123a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800123c:	4804      	ldr	r0, [pc, #16]	; (8001250 <MX_I2C2_Init+0x50>)
 800123e:	f002 fe4b 	bl	8003ed8 <HAL_I2C_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001248:	f000 fa28 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	200000dc 	.word	0x200000dc
 8001254:	40005800 	.word	0x40005800
 8001258:	000186a0 	.word	0x000186a0

0800125c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08c      	sub	sp, #48	; 0x30
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	2224      	movs	r2, #36	; 0x24
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f004 fe40 	bl	8005ef0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001278:	4b22      	ldr	r3, [pc, #136]	; (8001304 <MX_TIM1_Init+0xa8>)
 800127a:	4a23      	ldr	r2, [pc, #140]	; (8001308 <MX_TIM1_Init+0xac>)
 800127c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800127e:	4b21      	ldr	r3, [pc, #132]	; (8001304 <MX_TIM1_Init+0xa8>)
 8001280:	2200      	movs	r2, #0
 8001282:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001284:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <MX_TIM1_Init+0xa8>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800128a:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <MX_TIM1_Init+0xa8>)
 800128c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001290:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001292:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <MX_TIM1_Init+0xa8>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001298:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <MX_TIM1_Init+0xa8>)
 800129a:	2200      	movs	r2, #0
 800129c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800129e:	4b19      	ldr	r3, [pc, #100]	; (8001304 <MX_TIM1_Init+0xa8>)
 80012a0:	2280      	movs	r2, #128	; 0x80
 80012a2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012a4:	2303      	movs	r3, #3
 80012a6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012a8:	2300      	movs	r3, #0
 80012aa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012ac:	2301      	movs	r3, #1
 80012ae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80012b4:	230a      	movs	r3, #10
 80012b6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012bc:	2301      	movs	r3, #1
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80012c4:	230a      	movs	r3, #10
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	4619      	mov	r1, r3
 80012ce:	480d      	ldr	r0, [pc, #52]	; (8001304 <MX_TIM1_Init+0xa8>)
 80012d0:	f004 f84c 	bl	800536c <HAL_TIM_Encoder_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80012da:	f000 f9df 	bl	800169c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	4619      	mov	r1, r3
 80012ea:	4806      	ldr	r0, [pc, #24]	; (8001304 <MX_TIM1_Init+0xa8>)
 80012ec:	f004 fd66 	bl	8005dbc <HAL_TIMEx_MasterConfigSynchronization>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80012f6:	f000 f9d1 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012fa:	bf00      	nop
 80012fc:	3730      	adds	r7, #48	; 0x30
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000130 	.word	0x20000130
 8001308:	40012c00 	.word	0x40012c00

0800130c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08c      	sub	sp, #48	; 0x30
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	2224      	movs	r2, #36	; 0x24
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f004 fde8 	bl	8005ef0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001328:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <MX_TIM2_Init+0xa4>)
 800132a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800132e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001330:	4b1f      	ldr	r3, [pc, #124]	; (80013b0 <MX_TIM2_Init+0xa4>)
 8001332:	2200      	movs	r2, #0
 8001334:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001336:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <MX_TIM2_Init+0xa4>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800133c:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <MX_TIM2_Init+0xa4>)
 800133e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001342:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001344:	4b1a      	ldr	r3, [pc, #104]	; (80013b0 <MX_TIM2_Init+0xa4>)
 8001346:	2200      	movs	r2, #0
 8001348:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800134a:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <MX_TIM2_Init+0xa4>)
 800134c:	2280      	movs	r2, #128	; 0x80
 800134e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001350:	2303      	movs	r3, #3
 8001352:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001354:	2300      	movs	r3, #0
 8001356:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001358:	2301      	movs	r3, #1
 800135a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800135c:	2300      	movs	r3, #0
 800135e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001360:	230a      	movs	r3, #10
 8001362:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001364:	2300      	movs	r3, #0
 8001366:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001368:	2301      	movs	r3, #1
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800136c:	2300      	movs	r3, #0
 800136e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001370:	230a      	movs	r3, #10
 8001372:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	4619      	mov	r1, r3
 800137a:	480d      	ldr	r0, [pc, #52]	; (80013b0 <MX_TIM2_Init+0xa4>)
 800137c:	f003 fff6 	bl	800536c <HAL_TIM_Encoder_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001386:	f000 f989 	bl	800169c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	4619      	mov	r1, r3
 8001396:	4806      	ldr	r0, [pc, #24]	; (80013b0 <MX_TIM2_Init+0xa4>)
 8001398:	f004 fd10 	bl	8005dbc <HAL_TIMEx_MasterConfigSynchronization>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80013a2:	f000 f97b 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	3730      	adds	r7, #48	; 0x30
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000178 	.word	0x20000178

080013b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08a      	sub	sp, #40	; 0x28
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ba:	f107 0320 	add.w	r3, r7, #32
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]
 80013d2:	615a      	str	r2, [r3, #20]
 80013d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013d6:	4b27      	ldr	r3, [pc, #156]	; (8001474 <MX_TIM3_Init+0xc0>)
 80013d8:	4a27      	ldr	r2, [pc, #156]	; (8001478 <MX_TIM3_Init+0xc4>)
 80013da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48;
 80013dc:	4b25      	ldr	r3, [pc, #148]	; (8001474 <MX_TIM3_Init+0xc0>)
 80013de:	2230      	movs	r2, #48	; 0x30
 80013e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e2:	4b24      	ldr	r3, [pc, #144]	; (8001474 <MX_TIM3_Init+0xc0>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 80013e8:	4b22      	ldr	r3, [pc, #136]	; (8001474 <MX_TIM3_Init+0xc0>)
 80013ea:	f240 12f3 	movw	r2, #499	; 0x1f3
 80013ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f0:	4b20      	ldr	r3, [pc, #128]	; (8001474 <MX_TIM3_Init+0xc0>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013f6:	4b1f      	ldr	r3, [pc, #124]	; (8001474 <MX_TIM3_Init+0xc0>)
 80013f8:	2280      	movs	r2, #128	; 0x80
 80013fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013fc:	481d      	ldr	r0, [pc, #116]	; (8001474 <MX_TIM3_Init+0xc0>)
 80013fe:	f003 fec3 	bl	8005188 <HAL_TIM_PWM_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001408:	f000 f948 	bl	800169c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140c:	2300      	movs	r3, #0
 800140e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001410:	2300      	movs	r3, #0
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001414:	f107 0320 	add.w	r3, r7, #32
 8001418:	4619      	mov	r1, r3
 800141a:	4816      	ldr	r0, [pc, #88]	; (8001474 <MX_TIM3_Init+0xc0>)
 800141c:	f004 fcce 	bl	8005dbc <HAL_TIMEx_MasterConfigSynchronization>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001426:	f000 f939 	bl	800169c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800142a:	2360      	movs	r3, #96	; 0x60
 800142c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	2200      	movs	r2, #0
 800143e:	4619      	mov	r1, r3
 8001440:	480c      	ldr	r0, [pc, #48]	; (8001474 <MX_TIM3_Init+0xc0>)
 8001442:	f004 f9cb 	bl	80057dc <HAL_TIM_PWM_ConfigChannel>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800144c:	f000 f926 	bl	800169c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	2204      	movs	r2, #4
 8001454:	4619      	mov	r1, r3
 8001456:	4807      	ldr	r0, [pc, #28]	; (8001474 <MX_TIM3_Init+0xc0>)
 8001458:	f004 f9c0 	bl	80057dc <HAL_TIM_PWM_ConfigChannel>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001462:	f000 f91b 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001466:	4803      	ldr	r0, [pc, #12]	; (8001474 <MX_TIM3_Init+0xc0>)
 8001468:	f000 fa68 	bl	800193c <HAL_TIM_MspPostInit>

}
 800146c:	bf00      	nop
 800146e:	3728      	adds	r7, #40	; 0x28
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	200001c0 	.word	0x200001c0
 8001478:	40000400 	.word	0x40000400

0800147c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08a      	sub	sp, #40	; 0x28
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001482:	f107 0320 	add.w	r3, r7, #32
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
 8001498:	611a      	str	r2, [r3, #16]
 800149a:	615a      	str	r2, [r3, #20]
 800149c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800149e:	4b27      	ldr	r3, [pc, #156]	; (800153c <MX_TIM4_Init+0xc0>)
 80014a0:	4a27      	ldr	r2, [pc, #156]	; (8001540 <MX_TIM4_Init+0xc4>)
 80014a2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48;
 80014a4:	4b25      	ldr	r3, [pc, #148]	; (800153c <MX_TIM4_Init+0xc0>)
 80014a6:	2230      	movs	r2, #48	; 0x30
 80014a8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014aa:	4b24      	ldr	r3, [pc, #144]	; (800153c <MX_TIM4_Init+0xc0>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80014b0:	4b22      	ldr	r3, [pc, #136]	; (800153c <MX_TIM4_Init+0xc0>)
 80014b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014b6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b8:	4b20      	ldr	r3, [pc, #128]	; (800153c <MX_TIM4_Init+0xc0>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014be:	4b1f      	ldr	r3, [pc, #124]	; (800153c <MX_TIM4_Init+0xc0>)
 80014c0:	2280      	movs	r2, #128	; 0x80
 80014c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014c4:	481d      	ldr	r0, [pc, #116]	; (800153c <MX_TIM4_Init+0xc0>)
 80014c6:	f003 fe5f 	bl	8005188 <HAL_TIM_PWM_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80014d0:	f000 f8e4 	bl	800169c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d4:	2300      	movs	r3, #0
 80014d6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d8:	2300      	movs	r3, #0
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014dc:	f107 0320 	add.w	r3, r7, #32
 80014e0:	4619      	mov	r1, r3
 80014e2:	4816      	ldr	r0, [pc, #88]	; (800153c <MX_TIM4_Init+0xc0>)
 80014e4:	f004 fc6a 	bl	8005dbc <HAL_TIMEx_MasterConfigSynchronization>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80014ee:	f000 f8d5 	bl	800169c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014f2:	2360      	movs	r3, #96	; 0x60
 80014f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	2204      	movs	r2, #4
 8001506:	4619      	mov	r1, r3
 8001508:	480c      	ldr	r0, [pc, #48]	; (800153c <MX_TIM4_Init+0xc0>)
 800150a:	f004 f967 	bl	80057dc <HAL_TIM_PWM_ConfigChannel>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001514:	f000 f8c2 	bl	800169c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	2208      	movs	r2, #8
 800151c:	4619      	mov	r1, r3
 800151e:	4807      	ldr	r0, [pc, #28]	; (800153c <MX_TIM4_Init+0xc0>)
 8001520:	f004 f95c 	bl	80057dc <HAL_TIM_PWM_ConfigChannel>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800152a:	f000 f8b7 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800152e:	4803      	ldr	r0, [pc, #12]	; (800153c <MX_TIM4_Init+0xc0>)
 8001530:	f000 fa04 	bl	800193c <HAL_TIM_MspPostInit>

}
 8001534:	bf00      	nop
 8001536:	3728      	adds	r7, #40	; 0x28
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000208 	.word	0x20000208
 8001540:	40000800 	.word	0x40000800

08001544 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b088      	sub	sp, #32
 8001548:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154a:	f107 0310 	add.w	r3, r7, #16
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001558:	4b4c      	ldr	r3, [pc, #304]	; (800168c <MX_GPIO_Init+0x148>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	4a4b      	ldr	r2, [pc, #300]	; (800168c <MX_GPIO_Init+0x148>)
 800155e:	f043 0320 	orr.w	r3, r3, #32
 8001562:	6193      	str	r3, [r2, #24]
 8001564:	4b49      	ldr	r3, [pc, #292]	; (800168c <MX_GPIO_Init+0x148>)
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	f003 0320 	and.w	r3, r3, #32
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001570:	4b46      	ldr	r3, [pc, #280]	; (800168c <MX_GPIO_Init+0x148>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	4a45      	ldr	r2, [pc, #276]	; (800168c <MX_GPIO_Init+0x148>)
 8001576:	f043 0304 	orr.w	r3, r3, #4
 800157a:	6193      	str	r3, [r2, #24]
 800157c:	4b43      	ldr	r3, [pc, #268]	; (800168c <MX_GPIO_Init+0x148>)
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001588:	4b40      	ldr	r3, [pc, #256]	; (800168c <MX_GPIO_Init+0x148>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	4a3f      	ldr	r2, [pc, #252]	; (800168c <MX_GPIO_Init+0x148>)
 800158e:	f043 0308 	orr.w	r3, r3, #8
 8001592:	6193      	str	r3, [r2, #24]
 8001594:	4b3d      	ldr	r3, [pc, #244]	; (800168c <MX_GPIO_Init+0x148>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	f003 0308 	and.w	r3, r3, #8
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_EN_Pin|Y10_Pin|Y11_Pin|Y7_Pin, GPIO_PIN_RESET);
 80015a0:	2200      	movs	r2, #0
 80015a2:	f240 4134 	movw	r1, #1076	; 0x434
 80015a6:	483a      	ldr	r0, [pc, #232]	; (8001690 <MX_GPIO_Init+0x14c>)
 80015a8:	f002 fc4d 	bl	8003e46 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Y3_Pin|Y4_Pin|Y5_Pin|Y6_Pin, GPIO_PIN_RESET);
 80015ac:	2200      	movs	r2, #0
 80015ae:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80015b2:	4838      	ldr	r0, [pc, #224]	; (8001694 <MX_GPIO_Init+0x150>)
 80015b4:	f002 fc47 	bl	8003e46 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M1_EN_Pin Y10_Pin Y11_Pin Y7_Pin */
  GPIO_InitStruct.Pin = M1_EN_Pin|Y10_Pin|Y11_Pin|Y7_Pin;
 80015b8:	f240 4334 	movw	r3, #1076	; 0x434
 80015bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015be:	2301      	movs	r3, #1
 80015c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c6:	2302      	movs	r3, #2
 80015c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ca:	f107 0310 	add.w	r3, r7, #16
 80015ce:	4619      	mov	r1, r3
 80015d0:	482f      	ldr	r0, [pc, #188]	; (8001690 <MX_GPIO_Init+0x14c>)
 80015d2:	f002 fa9d 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : X0_Pin X1_Pin X7_Pin */
  GPIO_InitStruct.Pin = X0_Pin|X1_Pin|X7_Pin;
 80015d6:	f240 2303 	movw	r3, #515	; 0x203
 80015da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015e0:	2301      	movs	r3, #1
 80015e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e4:	f107 0310 	add.w	r3, r7, #16
 80015e8:	4619      	mov	r1, r3
 80015ea:	482a      	ldr	r0, [pc, #168]	; (8001694 <MX_GPIO_Init+0x150>)
 80015ec:	f002 fa90 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015f0:	2304      	movs	r3, #4
 80015f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015f4:	2303      	movs	r3, #3
 80015f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f8:	f107 0310 	add.w	r3, r7, #16
 80015fc:	4619      	mov	r1, r3
 80015fe:	4825      	ldr	r0, [pc, #148]	; (8001694 <MX_GPIO_Init+0x150>)
 8001600:	f002 fa86 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : Y3_Pin Y4_Pin Y5_Pin Y6_Pin */
  GPIO_InitStruct.Pin = Y3_Pin|Y4_Pin|Y5_Pin|Y6_Pin;
 8001604:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001608:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160a:	2301      	movs	r3, #1
 800160c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001612:	2302      	movs	r3, #2
 8001614:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001616:	f107 0310 	add.w	r3, r7, #16
 800161a:	4619      	mov	r1, r3
 800161c:	481d      	ldr	r0, [pc, #116]	; (8001694 <MX_GPIO_Init+0x150>)
 800161e:	f002 fa77 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001622:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001626:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001628:	2303      	movs	r3, #3
 800162a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162c:	f107 0310 	add.w	r3, r7, #16
 8001630:	4619      	mov	r1, r3
 8001632:	4817      	ldr	r0, [pc, #92]	; (8001690 <MX_GPIO_Init+0x14c>)
 8001634:	f002 fa6c 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : X2_Pin */
  GPIO_InitStruct.Pin = X2_Pin;
 8001638:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800163c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001642:	2301      	movs	r3, #1
 8001644:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(X2_GPIO_Port, &GPIO_InitStruct);
 8001646:	f107 0310 	add.w	r3, r7, #16
 800164a:	4619      	mov	r1, r3
 800164c:	4810      	ldr	r0, [pc, #64]	; (8001690 <MX_GPIO_Init+0x14c>)
 800164e:	f002 fa5f 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : X3_Pin X4_Pin X5_Pin */
  GPIO_InitStruct.Pin = X3_Pin|X4_Pin|X5_Pin;
 8001652:	2338      	movs	r3, #56	; 0x38
 8001654:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <MX_GPIO_Init+0x154>)
 8001658:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800165a:	2301      	movs	r3, #1
 800165c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800165e:	f107 0310 	add.w	r3, r7, #16
 8001662:	4619      	mov	r1, r3
 8001664:	480b      	ldr	r0, [pc, #44]	; (8001694 <MX_GPIO_Init+0x150>)
 8001666:	f002 fa53 	bl	8003b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : X6_Pin */
  GPIO_InitStruct.Pin = X6_Pin;
 800166a:	2340      	movs	r3, #64	; 0x40
 800166c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(X6_GPIO_Port, &GPIO_InitStruct);
 8001676:	f107 0310 	add.w	r3, r7, #16
 800167a:	4619      	mov	r1, r3
 800167c:	4805      	ldr	r0, [pc, #20]	; (8001694 <MX_GPIO_Init+0x150>)
 800167e:	f002 fa47 	bl	8003b10 <HAL_GPIO_Init>

}
 8001682:	bf00      	nop
 8001684:	3720      	adds	r7, #32
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40021000 	.word	0x40021000
 8001690:	40010800 	.word	0x40010800
 8001694:	40010c00 	.word	0x40010c00
 8001698:	10310000 	.word	0x10310000

0800169c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a0:	b672      	cpsid	i
}
 80016a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80016a4:	e7fe      	b.n	80016a4 <Error_Handler+0x8>
	...

080016a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016ae:	4b15      	ldr	r3, [pc, #84]	; (8001704 <HAL_MspInit+0x5c>)
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	4a14      	ldr	r2, [pc, #80]	; (8001704 <HAL_MspInit+0x5c>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6193      	str	r3, [r2, #24]
 80016ba:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_MspInit+0x5c>)
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c6:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <HAL_MspInit+0x5c>)
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	4a0e      	ldr	r2, [pc, #56]	; (8001704 <HAL_MspInit+0x5c>)
 80016cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d0:	61d3      	str	r3, [r2, #28]
 80016d2:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <HAL_MspInit+0x5c>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016de:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <HAL_MspInit+0x60>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	4a04      	ldr	r2, [pc, #16]	; (8001708 <HAL_MspInit+0x60>)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016fa:	bf00      	nop
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	40021000 	.word	0x40021000
 8001708:	40010000 	.word	0x40010000

0800170c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a14      	ldr	r2, [pc, #80]	; (8001778 <HAL_ADC_MspInit+0x6c>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d121      	bne.n	8001770 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800172c:	4b13      	ldr	r3, [pc, #76]	; (800177c <HAL_ADC_MspInit+0x70>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	4a12      	ldr	r2, [pc, #72]	; (800177c <HAL_ADC_MspInit+0x70>)
 8001732:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001736:	6193      	str	r3, [r2, #24]
 8001738:	4b10      	ldr	r3, [pc, #64]	; (800177c <HAL_ADC_MspInit+0x70>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001744:	4b0d      	ldr	r3, [pc, #52]	; (800177c <HAL_ADC_MspInit+0x70>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	4a0c      	ldr	r2, [pc, #48]	; (800177c <HAL_ADC_MspInit+0x70>)
 800174a:	f043 0304 	orr.w	r3, r3, #4
 800174e:	6193      	str	r3, [r2, #24]
 8001750:	4b0a      	ldr	r3, [pc, #40]	; (800177c <HAL_ADC_MspInit+0x70>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800175c:	2308      	movs	r3, #8
 800175e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001760:	2303      	movs	r3, #3
 8001762:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001764:	f107 0310 	add.w	r3, r7, #16
 8001768:	4619      	mov	r1, r3
 800176a:	4805      	ldr	r0, [pc, #20]	; (8001780 <HAL_ADC_MspInit+0x74>)
 800176c:	f002 f9d0 	bl	8003b10 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001770:	bf00      	nop
 8001772:	3720      	adds	r7, #32
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40012400 	.word	0x40012400
 800177c:	40021000 	.word	0x40021000
 8001780:	40010800 	.word	0x40010800

08001784 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b088      	sub	sp, #32
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	f107 0310 	add.w	r3, r7, #16
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a16      	ldr	r2, [pc, #88]	; (80017f8 <HAL_I2C_MspInit+0x74>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d124      	bne.n	80017ee <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a4:	4b15      	ldr	r3, [pc, #84]	; (80017fc <HAL_I2C_MspInit+0x78>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	4a14      	ldr	r2, [pc, #80]	; (80017fc <HAL_I2C_MspInit+0x78>)
 80017aa:	f043 0308 	orr.w	r3, r3, #8
 80017ae:	6193      	str	r3, [r2, #24]
 80017b0:	4b12      	ldr	r3, [pc, #72]	; (80017fc <HAL_I2C_MspInit+0x78>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	f003 0308 	and.w	r3, r3, #8
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 80017bc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017c2:	2312      	movs	r3, #18
 80017c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017c6:	2303      	movs	r3, #3
 80017c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ca:	f107 0310 	add.w	r3, r7, #16
 80017ce:	4619      	mov	r1, r3
 80017d0:	480b      	ldr	r0, [pc, #44]	; (8001800 <HAL_I2C_MspInit+0x7c>)
 80017d2:	f002 f99d 	bl	8003b10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80017d6:	4b09      	ldr	r3, [pc, #36]	; (80017fc <HAL_I2C_MspInit+0x78>)
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	4a08      	ldr	r2, [pc, #32]	; (80017fc <HAL_I2C_MspInit+0x78>)
 80017dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017e0:	61d3      	str	r3, [r2, #28]
 80017e2:	4b06      	ldr	r3, [pc, #24]	; (80017fc <HAL_I2C_MspInit+0x78>)
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80017ee:	bf00      	nop
 80017f0:	3720      	adds	r7, #32
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40005800 	.word	0x40005800
 80017fc:	40021000 	.word	0x40021000
 8001800:	40010c00 	.word	0x40010c00

08001804 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08a      	sub	sp, #40	; 0x28
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 0318 	add.w	r3, r7, #24
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a2b      	ldr	r2, [pc, #172]	; (80018cc <HAL_TIM_Encoder_MspInit+0xc8>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d125      	bne.n	8001870 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001824:	4b2a      	ldr	r3, [pc, #168]	; (80018d0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	4a29      	ldr	r2, [pc, #164]	; (80018d0 <HAL_TIM_Encoder_MspInit+0xcc>)
 800182a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800182e:	6193      	str	r3, [r2, #24]
 8001830:	4b27      	ldr	r3, [pc, #156]	; (80018d0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001838:	617b      	str	r3, [r7, #20]
 800183a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183c:	4b24      	ldr	r3, [pc, #144]	; (80018d0 <HAL_TIM_Encoder_MspInit+0xcc>)
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	4a23      	ldr	r2, [pc, #140]	; (80018d0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001842:	f043 0304 	orr.w	r3, r3, #4
 8001846:	6193      	str	r3, [r2, #24]
 8001848:	4b21      	ldr	r3, [pc, #132]	; (80018d0 <HAL_TIM_Encoder_MspInit+0xcc>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ECD_1A_Pin|ECD_1B_Pin;
 8001854:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001862:	f107 0318 	add.w	r3, r7, #24
 8001866:	4619      	mov	r1, r3
 8001868:	481a      	ldr	r0, [pc, #104]	; (80018d4 <HAL_TIM_Encoder_MspInit+0xd0>)
 800186a:	f002 f951 	bl	8003b10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800186e:	e028      	b.n	80018c2 <HAL_TIM_Encoder_MspInit+0xbe>
  else if(htim_encoder->Instance==TIM2)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001878:	d123      	bne.n	80018c2 <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800187a:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <HAL_TIM_Encoder_MspInit+0xcc>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	4a14      	ldr	r2, [pc, #80]	; (80018d0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	61d3      	str	r3, [r2, #28]
 8001886:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001892:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	4a0e      	ldr	r2, [pc, #56]	; (80018d0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001898:	f043 0304 	orr.w	r3, r3, #4
 800189c:	6193      	str	r3, [r2, #24]
 800189e:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <HAL_TIM_Encoder_MspInit+0xcc>)
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	f003 0304 	and.w	r3, r3, #4
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ECD_2A_Pin|ECD_2B_Pin;
 80018aa:	2303      	movs	r3, #3
 80018ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ae:	2300      	movs	r3, #0
 80018b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b6:	f107 0318 	add.w	r3, r7, #24
 80018ba:	4619      	mov	r1, r3
 80018bc:	4805      	ldr	r0, [pc, #20]	; (80018d4 <HAL_TIM_Encoder_MspInit+0xd0>)
 80018be:	f002 f927 	bl	8003b10 <HAL_GPIO_Init>
}
 80018c2:	bf00      	nop
 80018c4:	3728      	adds	r7, #40	; 0x28
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40012c00 	.word	0x40012c00
 80018d0:	40021000 	.word	0x40021000
 80018d4:	40010800 	.word	0x40010800

080018d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a12      	ldr	r2, [pc, #72]	; (8001930 <HAL_TIM_PWM_MspInit+0x58>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d10c      	bne.n	8001904 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018ea:	4b12      	ldr	r3, [pc, #72]	; (8001934 <HAL_TIM_PWM_MspInit+0x5c>)
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	4a11      	ldr	r2, [pc, #68]	; (8001934 <HAL_TIM_PWM_MspInit+0x5c>)
 80018f0:	f043 0302 	orr.w	r3, r3, #2
 80018f4:	61d3      	str	r3, [r2, #28]
 80018f6:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <HAL_TIM_PWM_MspInit+0x5c>)
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001902:	e010      	b.n	8001926 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a0b      	ldr	r2, [pc, #44]	; (8001938 <HAL_TIM_PWM_MspInit+0x60>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d10b      	bne.n	8001926 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800190e:	4b09      	ldr	r3, [pc, #36]	; (8001934 <HAL_TIM_PWM_MspInit+0x5c>)
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	4a08      	ldr	r2, [pc, #32]	; (8001934 <HAL_TIM_PWM_MspInit+0x5c>)
 8001914:	f043 0304 	orr.w	r3, r3, #4
 8001918:	61d3      	str	r3, [r2, #28]
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <HAL_TIM_PWM_MspInit+0x5c>)
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	f003 0304 	and.w	r3, r3, #4
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	68bb      	ldr	r3, [r7, #8]
}
 8001926:	bf00      	nop
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr
 8001930:	40000400 	.word	0x40000400
 8001934:	40021000 	.word	0x40021000
 8001938:	40000800 	.word	0x40000800

0800193c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b088      	sub	sp, #32
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	f107 0310 	add.w	r3, r7, #16
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a1f      	ldr	r2, [pc, #124]	; (80019d4 <HAL_TIM_MspPostInit+0x98>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d118      	bne.n	800198e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195c:	4b1e      	ldr	r3, [pc, #120]	; (80019d8 <HAL_TIM_MspPostInit+0x9c>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	4a1d      	ldr	r2, [pc, #116]	; (80019d8 <HAL_TIM_MspPostInit+0x9c>)
 8001962:	f043 0304 	orr.w	r3, r3, #4
 8001966:	6193      	str	r3, [r2, #24]
 8001968:	4b1b      	ldr	r3, [pc, #108]	; (80019d8 <HAL_TIM_MspPostInit+0x9c>)
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWM_1A_Pin|PWM_1B_Pin;
 8001974:	23c0      	movs	r3, #192	; 0xc0
 8001976:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001978:	2302      	movs	r3, #2
 800197a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197c:	2302      	movs	r3, #2
 800197e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001980:	f107 0310 	add.w	r3, r7, #16
 8001984:	4619      	mov	r1, r3
 8001986:	4815      	ldr	r0, [pc, #84]	; (80019dc <HAL_TIM_MspPostInit+0xa0>)
 8001988:	f002 f8c2 	bl	8003b10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800198c:	e01d      	b.n	80019ca <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM4)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a13      	ldr	r2, [pc, #76]	; (80019e0 <HAL_TIM_MspPostInit+0xa4>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d118      	bne.n	80019ca <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001998:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <HAL_TIM_MspPostInit+0x9c>)
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	4a0e      	ldr	r2, [pc, #56]	; (80019d8 <HAL_TIM_MspPostInit+0x9c>)
 800199e:	f043 0308 	orr.w	r3, r3, #8
 80019a2:	6193      	str	r3, [r2, #24]
 80019a4:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <HAL_TIM_MspPostInit+0x9c>)
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	f003 0308 	and.w	r3, r3, #8
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_2A_Pin|PWM_2B_Pin;
 80019b0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80019b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	2302      	movs	r3, #2
 80019b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ba:	2302      	movs	r3, #2
 80019bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019be:	f107 0310 	add.w	r3, r7, #16
 80019c2:	4619      	mov	r1, r3
 80019c4:	4807      	ldr	r0, [pc, #28]	; (80019e4 <HAL_TIM_MspPostInit+0xa8>)
 80019c6:	f002 f8a3 	bl	8003b10 <HAL_GPIO_Init>
}
 80019ca:	bf00      	nop
 80019cc:	3720      	adds	r7, #32
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40000400 	.word	0x40000400
 80019d8:	40021000 	.word	0x40021000
 80019dc:	40010800 	.word	0x40010800
 80019e0:	40000800 	.word	0x40000800
 80019e4:	40010c00 	.word	0x40010c00

080019e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019ec:	e7fe      	b.n	80019ec <NMI_Handler+0x4>

080019ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f2:	e7fe      	b.n	80019f2 <HardFault_Handler+0x4>

080019f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <MemManage_Handler+0x4>

080019fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019fe:	e7fe      	b.n	80019fe <BusFault_Handler+0x4>

08001a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a04:	e7fe      	b.n	8001a04 <UsageFault_Handler+0x4>

08001a06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr

08001a12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr

08001a1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr

08001a2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a2e:	f001 fb0f 	bl	8003050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(X3_Pin);
 8001a3a:	2008      	movs	r0, #8
 8001a3c:	f002 fa34 	bl	8003ea8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001a40:	bf00      	nop
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(X4_Pin);
 8001a48:	2010      	movs	r0, #16
 8001a4a:	f002 fa2d 	bl	8003ea8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(X5_Pin);
 8001a56:	2020      	movs	r0, #32
 8001a58:	f002 fa26 	bl	8003ea8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001a64:	4802      	ldr	r0, [pc, #8]	; (8001a70 <TIM4_IRQHandler+0x10>)
 8001a66:	f003 fdb1 	bl	80055cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000208 	.word	0x20000208

08001a74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a7c:	4a14      	ldr	r2, [pc, #80]	; (8001ad0 <_sbrk+0x5c>)
 8001a7e:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <_sbrk+0x60>)
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a88:	4b13      	ldr	r3, [pc, #76]	; (8001ad8 <_sbrk+0x64>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d102      	bne.n	8001a96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a90:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <_sbrk+0x64>)
 8001a92:	4a12      	ldr	r2, [pc, #72]	; (8001adc <_sbrk+0x68>)
 8001a94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a96:	4b10      	ldr	r3, [pc, #64]	; (8001ad8 <_sbrk+0x64>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d207      	bcs.n	8001ab4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aa4:	f004 f9fa 	bl	8005e9c <__errno>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	220c      	movs	r2, #12
 8001aac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aae:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab2:	e009      	b.n	8001ac8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ab4:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <_sbrk+0x64>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aba:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <_sbrk+0x64>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	4a05      	ldr	r2, [pc, #20]	; (8001ad8 <_sbrk+0x64>)
 8001ac4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3718      	adds	r7, #24
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20005000 	.word	0x20005000
 8001ad4:	00000400 	.word	0x00000400
 8001ad8:	20000250 	.word	0x20000250
 8001adc:	20000340 	.word	0x20000340

08001ae0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr

08001aec <BUTTON_ReadPin>:
#include "BUTTON.h"
// (FINAL x3)

// ************************** Low Level Layer *****************************************************//
static ButtonState BUTTON_ReadPin(Button *Button) {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  return HAL_GPIO_ReadPin(Button->Port, Button->Pin);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	889b      	ldrh	r3, [r3, #4]
 8001afc:	4619      	mov	r1, r3
 8001afe:	4610      	mov	r0, r2
 8001b00:	f002 f98a 	bl	8003e18 <HAL_GPIO_ReadPin>
 8001b04:	4603      	mov	r3, r0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <buttonInit>:
// ************************** High Level Layer *****************************************************//
void buttonInit(Button *Button, GPIO_TypeDef *BUTTON_PORT, uint16_t BUTTON_Pin) {
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b084      	sub	sp, #16
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	60f8      	str	r0, [r7, #12]
 8001b16:	60b9      	str	r1, [r7, #8]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	80fb      	strh	r3, [r7, #6]
  Button->Port = BUTTON_PORT;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	68ba      	ldr	r2, [r7, #8]
 8001b20:	601a      	str	r2, [r3, #0]
  Button->Pin = BUTTON_Pin;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	88fa      	ldrh	r2, [r7, #6]
 8001b26:	809a      	strh	r2, [r3, #4]

  Button->state = BUTTON_ReadPin(Button);
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f7ff ffdf 	bl	8001aec <BUTTON_ReadPin>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	461a      	mov	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	71da      	strb	r2, [r3, #7]
  Button->preState = Button->state;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	79da      	ldrb	r2, [r3, #7]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	719a      	strb	r2, [r3, #6]
  Button->timeIn = HAL_GetTick();
 8001b3e:	f001 fa99 	bl	8003074 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	609a      	str	r2, [r3, #8]
  Button->hasChanged = false;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	741a      	strb	r2, [r3, #16]
  Button->_change = false;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2200      	movs	r2, #0
 8001b52:	745a      	strb	r2, [r3, #17]
}
 8001b54:	bf00      	nop
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <CLCD_Delay>:
******************************************************************************************************************/
#include "CLCD_I2C.h"

//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 8001b66:	88fb      	ldrh	r3, [r7, #6]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f001 fa8d 	bl	8003088 <HAL_Delay>
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b086      	sub	sp, #24
 8001b7a:	af02      	add	r7, sp, #8
 8001b7c:	6078      	str	r0, [r7, #4]
 8001b7e:	460b      	mov	r3, r1
 8001b80:	70fb      	strb	r3, [r7, #3]
 8001b82:	4613      	mov	r3, r2
 8001b84:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 8001b86:	78fb      	ldrb	r3, [r7, #3]
 8001b88:	f023 030f 	bic.w	r3, r3, #15
 8001b8c:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 8001b8e:	78fb      	ldrb	r3, [r7, #3]
 8001b90:	011b      	lsls	r3, r3, #4
 8001b92:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	7adb      	ldrb	r3, [r3, #11]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d007      	beq.n	8001bac <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT; 
 8001b9c:	7bfb      	ldrb	r3, [r7, #15]
 8001b9e:	f043 0308 	orr.w	r3, r3, #8
 8001ba2:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT; 
 8001ba4:	7bbb      	ldrb	r3, [r7, #14]
 8001ba6:	f043 0308 	orr.w	r3, r3, #8
 8001baa:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 8001bac:	78bb      	ldrb	r3, [r7, #2]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d108      	bne.n	8001bc4 <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 8001bba:	7bbb      	ldrb	r3, [r7, #14]
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	73bb      	strb	r3, [r7, #14]
 8001bc2:	e00a      	b.n	8001bda <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 8001bc4:	78bb      	ldrb	r3, [r7, #2]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d107      	bne.n	8001bda <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 8001bca:	7bfb      	ldrb	r3, [r7, #15]
 8001bcc:	f023 0301 	bic.w	r3, r3, #1
 8001bd0:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 8001bd2:	7bbb      	ldrb	r3, [r7, #14]
 8001bd4:	f023 0301 	bic.w	r3, r3, #1
 8001bd8:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
 8001bdc:	f043 0304 	orr.w	r3, r3, #4
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 8001be4:	2001      	movs	r0, #1
 8001be6:	f7ff ffb9 	bl	8001b5c <CLCD_Delay>
	Data_I2C[1] = Data_H;
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
 8001bec:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 8001bee:	7bbb      	ldrb	r3, [r7, #14]
 8001bf0:	f043 0304 	orr.w	r3, r3, #4
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	f7ff ffaf 	bl	8001b5c <CLCD_Delay>
	Data_I2C[3] = Data_L;
 8001bfe:	7bbb      	ldrb	r3, [r7, #14]
 8001c00:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6818      	ldr	r0, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	791b      	ldrb	r3, [r3, #4]
 8001c0a:	b299      	uxth	r1, r3
 8001c0c:	f107 0208 	add.w	r2, r7, #8
 8001c10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	2304      	movs	r3, #4
 8001c18:	f002 faa2 	bl	8004160 <HAL_I2C_Master_Transmit>
}
 8001c1c:	bf00      	nop
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <CLCD_I2C_Init>:


//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	4611      	mov	r1, r2
 8001c30:	461a      	mov	r2, r3
 8001c32:	460b      	mov	r3, r1
 8001c34:	71fb      	strb	r3, [r7, #7]
 8001c36:	4613      	mov	r3, r2
 8001c38:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	68ba      	ldr	r2, [r7, #8]
 8001c3e:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	79fa      	ldrb	r2, [r7, #7]
 8001c44:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	79ba      	ldrb	r2, [r7, #6]
 8001c4a:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	7e3a      	ldrb	r2, [r7, #24]
 8001c50:	719a      	strb	r2, [r3, #6]
	
	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2228      	movs	r2, #40	; 0x28
 8001c56:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2206      	movs	r2, #6
 8001c5c:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	220c      	movs	r2, #12
 8001c62:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2214      	movs	r2, #20
 8001c68:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2208      	movs	r2, #8
 8001c6e:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 8001c70:	2032      	movs	r0, #50	; 0x32
 8001c72:	f7ff ff73 	bl	8001b5c <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2133      	movs	r1, #51	; 0x33
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f7ff ff7b 	bl	8001b76 <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8001c80:	2200      	movs	r2, #0
 8001c82:	2133      	movs	r1, #51	; 0x33
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	f7ff ff76 	bl	8001b76 <CLCD_WriteI2C>
	CLCD_Delay(5);
 8001c8a:	2005      	movs	r0, #5
 8001c8c:	f7ff ff66 	bl	8001b5c <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8001c90:	2200      	movs	r2, #0
 8001c92:	2132      	movs	r1, #50	; 0x32
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f7ff ff6e 	bl	8001b76 <CLCD_WriteI2C>
	CLCD_Delay(5);
 8001c9a:	2005      	movs	r0, #5
 8001c9c:	f7ff ff5e 	bl	8001b5c <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2120      	movs	r1, #32
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f7ff ff66 	bl	8001b76 <CLCD_WriteI2C>
	CLCD_Delay(5);
 8001caa:	2005      	movs	r0, #5
 8001cac:	f7ff ff56 	bl	8001b5c <CLCD_Delay>
	
	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	79db      	ldrb	r3, [r3, #7]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	f7ff ff5c 	bl	8001b76 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	7a1b      	ldrb	r3, [r3, #8]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	f7ff ff55 	bl	8001b76 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	7a5b      	ldrb	r3, [r3, #9]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f7ff ff4e 	bl	8001b76 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	7a9b      	ldrb	r3, [r3, #10]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f7ff ff47 	bl	8001b76 <CLCD_WriteI2C>
	
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2101      	movs	r1, #1
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f7ff ff42 	bl	8001b76 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2102      	movs	r1, #2
 8001cf6:	68f8      	ldr	r0, [r7, #12]
 8001cf8:	f7ff ff3d 	bl	8001b76 <CLCD_WriteI2C>
}
 8001cfc:	bf00      	nop
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	70fb      	strb	r3, [r7, #3]
 8001d10:	4613      	mov	r3, r2
 8001d12:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 8001d14:	2300      	movs	r3, #0
 8001d16:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	795b      	ldrb	r3, [r3, #5]
 8001d1c:	78fa      	ldrb	r2, [r7, #3]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d303      	bcc.n	8001d2a <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	795b      	ldrb	r3, [r3, #5]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	799b      	ldrb	r3, [r3, #6]
 8001d2e:	78ba      	ldrb	r2, [r7, #2]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d303      	bcc.n	8001d3c <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	799b      	ldrb	r3, [r3, #6]
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 8001d3c:	78bb      	ldrb	r3, [r7, #2]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d102      	bne.n	8001d48 <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 8001d42:	78fb      	ldrb	r3, [r7, #3]
 8001d44:	73fb      	strb	r3, [r7, #15]
 8001d46:	e013      	b.n	8001d70 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 8001d48:	78bb      	ldrb	r3, [r7, #2]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d103      	bne.n	8001d56 <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 8001d4e:	78fb      	ldrb	r3, [r7, #3]
 8001d50:	3340      	adds	r3, #64	; 0x40
 8001d52:	73fb      	strb	r3, [r7, #15]
 8001d54:	e00c      	b.n	8001d70 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 8001d56:	78bb      	ldrb	r3, [r7, #2]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d103      	bne.n	8001d64 <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x14 + Xpos;
 8001d5c:	78fb      	ldrb	r3, [r7, #3]
 8001d5e:	3314      	adds	r3, #20
 8001d60:	73fb      	strb	r3, [r7, #15]
 8001d62:	e005      	b.n	8001d70 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 8001d64:	78bb      	ldrb	r3, [r7, #2]
 8001d66:	2b03      	cmp	r3, #3
 8001d68:	d102      	bne.n	8001d70 <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x54 + Xpos;
 8001d6a:	78fb      	ldrb	r3, [r7, #3]
 8001d6c:	3354      	adds	r3, #84	; 0x54
 8001d6e:	73fb      	strb	r3, [r7, #15]
	}
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
 8001d72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2200      	movs	r2, #0
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f7ff fefa 	bl	8001b76 <CLCD_WriteI2C>
}
 8001d82:	bf00      	nop
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
 8001d92:	460b      	mov	r3, r1
 8001d94:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 8001d96:	78fb      	ldrb	r3, [r7, #3]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f7ff feea 	bl	8001b76 <CLCD_WriteI2C>
}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
 8001db2:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_I2C_WriteChar(LCD, *String++);
 8001db4:	e007      	b.n	8001dc6 <CLCD_I2C_WriteString+0x1c>
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	1c5a      	adds	r2, r3, #1
 8001dba:	603a      	str	r2, [r7, #0]
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff ffe2 	bl	8001d8a <CLCD_I2C_WriteChar>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f3      	bne.n	8001db6 <CLCD_I2C_WriteString+0xc>
}
 8001dce:	bf00      	nop
 8001dd0:	bf00      	nop
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <CLCD_I2C_Clear>:
void CLCD_I2C_Clear(CLCD_I2C_Name* LCD)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 8001de0:	2200      	movs	r2, #0
 8001de2:	2101      	movs	r1, #1
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff fec6 	bl	8001b76 <CLCD_WriteI2C>
	CLCD_Delay(5);
 8001dea:	2005      	movs	r0, #5
 8001dec:	f7ff feb6 	bl	8001b5c <CLCD_Delay>
}
 8001df0:	bf00      	nop
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <CLCD_I2C_ReturnHome>:
void CLCD_I2C_ReturnHome(CLCD_I2C_Name* LCD)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
	CLCD_WriteI2C(LCD, LCD_RETURNHOME, CLCD_COMMAND);
 8001e00:	2200      	movs	r2, #0
 8001e02:	2102      	movs	r1, #2
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff feb6 	bl	8001b76 <CLCD_WriteI2C>
	CLCD_Delay(5);
 8001e0a:	2005      	movs	r0, #5
 8001e0c:	f7ff fea6 	bl	8001b5c <CLCD_Delay>
}
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <LCD_Begin>:
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
}

/* Short code */
void LCD_Begin(CLCD_I2C_Name *LCD, I2C_HandleTypeDef *hi2c_CLCD,
	uint8_t Address, uint8_t Colums, uint8_t Rows) {
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af02      	add	r7, sp, #8
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	4611      	mov	r1, r2
 8001e24:	461a      	mov	r2, r3
 8001e26:	460b      	mov	r3, r1
 8001e28:	71fb      	strb	r3, [r7, #7]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	71bb      	strb	r3, [r7, #6]
  CLCD_I2C_Init(LCD, hi2c_CLCD, Address, Colums, Rows);
 8001e2e:	79b9      	ldrb	r1, [r7, #6]
 8001e30:	79fa      	ldrb	r2, [r7, #7]
 8001e32:	7e3b      	ldrb	r3, [r7, #24]
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	460b      	mov	r3, r1
 8001e38:	68b9      	ldr	r1, [r7, #8]
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	f7ff fef2 	bl	8001c24 <CLCD_I2C_Init>
}
 8001e40:	bf00      	nop
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <LCD_Set_Cursor>:
void LCD_Set_Cursor(CLCD_I2C_Name *LCD, u8 a, u8 b) {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	70fb      	strb	r3, [r7, #3]
 8001e54:	4613      	mov	r3, r2
 8001e56:	70bb      	strb	r3, [r7, #2]
  a -= 1;
 8001e58:	78fb      	ldrb	r3, [r7, #3]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	70fb      	strb	r3, [r7, #3]
  b -= 1;
 8001e5e:	78bb      	ldrb	r3, [r7, #2]
 8001e60:	3b01      	subs	r3, #1
 8001e62:	70bb      	strb	r3, [r7, #2]
  CLCD_I2C_SetCursor(LCD, b, a);
 8001e64:	78fa      	ldrb	r2, [r7, #3]
 8001e66:	78bb      	ldrb	r3, [r7, #2]
 8001e68:	4619      	mov	r1, r3
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff ff4a 	bl	8001d04 <CLCD_I2C_SetCursor>
}
 8001e70:	bf00      	nop
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <LCD_Clear>:
void LCD_Print_Char(CLCD_I2C_Name *LCD, char data) {
  CLCD_I2C_WriteChar(LCD, data);
}
void LCD_Clear(CLCD_I2C_Name *LCD) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  CLCD_I2C_Clear(LCD);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff ffa9 	bl	8001dd8 <CLCD_I2C_Clear>
  CLCD_I2C_ReturnHome(LCD);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7ff ffb6 	bl	8001df8 <CLCD_I2C_ReturnHome>
}
 8001e8c:	bf00      	nop
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <LCD_Print_String>:
void LCD_Print_String(CLCD_I2C_Name *LCD, char *data) {
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  CLCD_I2C_WriteString(LCD, data);
 8001e9e:	6839      	ldr	r1, [r7, #0]
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7ff ff82 	bl	8001daa <CLCD_I2C_WriteString>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <LCD_Print_String_At>:
  itoa(data, temp_buffer, 10);
  u8 i;
  for (i = 0; temp_buffer[i] != '\0'; i++)
	LCD_Print_Char(LCD, temp_buffer[i]); //Split the string using pointers and call the Char function
}
void LCD_Print_String_At(CLCD_I2C_Name *LCD, u8 a, u8 b, char *data) {
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b084      	sub	sp, #16
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	60f8      	str	r0, [r7, #12]
 8001eb6:	607b      	str	r3, [r7, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	72fb      	strb	r3, [r7, #11]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	72bb      	strb	r3, [r7, #10]
  LCD_Set_Cursor(LCD, a, b);
 8001ec0:	7aba      	ldrb	r2, [r7, #10]
 8001ec2:	7afb      	ldrb	r3, [r7, #11]
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f7ff ffbe 	bl	8001e48 <LCD_Set_Cursor>
  LCD_Print_String(LCD, data);
 8001ecc:	6879      	ldr	r1, [r7, #4]
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f7ff ffe0 	bl	8001e94 <LCD_Print_String>
}
 8001ed4:	bf00      	nop
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <start_up>:

bool FLAG_run = false;

u32 pwm = 500;

void start_up() {
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af02      	add	r7, sp, #8
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001ee2:	213c      	movs	r1, #60	; 0x3c
 8001ee4:	4833      	ldr	r0, [pc, #204]	; (8001fb4 <start_up+0xd8>)
 8001ee6:	f003 fae3 	bl	80054b0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001eea:	213c      	movs	r1, #60	; 0x3c
 8001eec:	4832      	ldr	r0, [pc, #200]	; (8001fb8 <start_up+0xdc>)
 8001eee:	f003 fadf 	bl	80054b0 <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start_IT(&htim4);
 8001ef2:	4832      	ldr	r0, [pc, #200]	; (8001fbc <start_up+0xe0>)
 8001ef4:	f003 f8f6 	bl	80050e4 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);	//PWM1
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4831      	ldr	r0, [pc, #196]	; (8001fc0 <start_up+0xe4>)
 8001efc:	f003 f994 	bl	8005228 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //PWM1
 8001f00:	2104      	movs	r1, #4
 8001f02:	482f      	ldr	r0, [pc, #188]	; (8001fc0 <start_up+0xe4>)
 8001f04:	f003 f990 	bl	8005228 <HAL_TIM_PWM_Start>
//  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);	//PWM2
//  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);	//PWM2
  HAL_Delay(10);
 8001f08:	200a      	movs	r0, #10
 8001f0a:	f001 f8bd 	bl	8003088 <HAL_Delay>

  buttonInit(&BTN_Start, BTN_Start_GPIO_Port, BTN_Start_Pin);
 8001f0e:	2208      	movs	r2, #8
 8001f10:	492c      	ldr	r1, [pc, #176]	; (8001fc4 <start_up+0xe8>)
 8001f12:	482d      	ldr	r0, [pc, #180]	; (8001fc8 <start_up+0xec>)
 8001f14:	f7ff fdfb 	bl	8001b0e <buttonInit>
  buttonInit(&BTN_Stop, BTN_Stop_GPIO_Port, BTN_Stop_Pin);
 8001f18:	2210      	movs	r2, #16
 8001f1a:	492a      	ldr	r1, [pc, #168]	; (8001fc4 <start_up+0xe8>)
 8001f1c:	482b      	ldr	r0, [pc, #172]	; (8001fcc <start_up+0xf0>)
 8001f1e:	f7ff fdf6 	bl	8001b0e <buttonInit>
  buttonInit(&BTN_Mode, BTN_Mode_GPIO_Port, BTN_Mode_Pin);
 8001f22:	2220      	movs	r2, #32
 8001f24:	4927      	ldr	r1, [pc, #156]	; (8001fc4 <start_up+0xe8>)
 8001f26:	482a      	ldr	r0, [pc, #168]	; (8001fd0 <start_up+0xf4>)
 8001f28:	f7ff fdf1 	bl	8001b0e <buttonInit>

  // Splash screen
  LCD_Begin(&LCD, &hi2c2, 0x4E, 20, 4);
 8001f2c:	2304      	movs	r3, #4
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	2314      	movs	r3, #20
 8001f32:	224e      	movs	r2, #78	; 0x4e
 8001f34:	4927      	ldr	r1, [pc, #156]	; (8001fd4 <start_up+0xf8>)
 8001f36:	4828      	ldr	r0, [pc, #160]	; (8001fd8 <start_up+0xfc>)
 8001f38:	f7ff ff6e 	bl	8001e18 <LCD_Begin>
   | Resistance Testing |
   |       Machine      |
   |                    |
   ----------------------
   **************************/
  LCD_Clear(&LCD);
 8001f3c:	4826      	ldr	r0, [pc, #152]	; (8001fd8 <start_up+0xfc>)
 8001f3e:	f7ff ff9b 	bl	8001e78 <LCD_Clear>
  LED_ON();
 8001f42:	f000 f981 	bl	8002248 <LED_ON>
  LCD_Print_String_At(&LCD, 1, 4, "Taber Abrasion");
 8001f46:	4b25      	ldr	r3, [pc, #148]	; (8001fdc <start_up+0x100>)
 8001f48:	2204      	movs	r2, #4
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	4822      	ldr	r0, [pc, #136]	; (8001fd8 <start_up+0xfc>)
 8001f4e:	f7ff ffae 	bl	8001eae <LCD_Print_String_At>
  LCD_Print_String_At(&LCD, 2, 2, "Resistance Testing");
 8001f52:	4b23      	ldr	r3, [pc, #140]	; (8001fe0 <start_up+0x104>)
 8001f54:	2202      	movs	r2, #2
 8001f56:	2102      	movs	r1, #2
 8001f58:	481f      	ldr	r0, [pc, #124]	; (8001fd8 <start_up+0xfc>)
 8001f5a:	f7ff ffa8 	bl	8001eae <LCD_Print_String_At>
  LCD_Print_String_At(&LCD, 3, 8, "Machine");
 8001f5e:	4b21      	ldr	r3, [pc, #132]	; (8001fe4 <start_up+0x108>)
 8001f60:	2208      	movs	r2, #8
 8001f62:	2103      	movs	r1, #3
 8001f64:	481c      	ldr	r0, [pc, #112]	; (8001fd8 <start_up+0xfc>)
 8001f66:	f7ff ffa2 	bl	8001eae <LCD_Print_String_At>

  // Restore value
  menu1_value = (float) FLASH_ReadData(FLASH_USER_START_ADDR); // Speed
 8001f6a:	481f      	ldr	r0, [pc, #124]	; (8001fe8 <start_up+0x10c>)
 8001f6c:	f000 f990 	bl	8002290 <FLASH_ReadData>
 8001f70:	4603      	mov	r3, r0
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fde8 	bl	8000b48 <__aeabi_ui2f>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	4a1c      	ldr	r2, [pc, #112]	; (8001fec <start_up+0x110>)
 8001f7c:	6013      	str	r3, [r2, #0]
  menu2_value = (s8) FLASH_ReadData(FLASH_USER_START_ADDR + 4); // Dir
 8001f7e:	481c      	ldr	r0, [pc, #112]	; (8001ff0 <start_up+0x114>)
 8001f80:	f000 f986 	bl	8002290 <FLASH_ReadData>
 8001f84:	4603      	mov	r3, r0
 8001f86:	b25a      	sxtb	r2, r3
 8001f88:	4b1a      	ldr	r3, [pc, #104]	; (8001ff4 <start_up+0x118>)
 8001f8a:	701a      	strb	r2, [r3, #0]
  menu3_value = (s32) FLASH_ReadData(FLASH_USER_START_ADDR + 8); //set count
 8001f8c:	481a      	ldr	r0, [pc, #104]	; (8001ff8 <start_up+0x11c>)
 8001f8e:	f000 f97f 	bl	8002290 <FLASH_ReadData>
 8001f92:	4603      	mov	r3, r0
 8001f94:	461a      	mov	r2, r3
 8001f96:	4b19      	ldr	r3, [pc, #100]	; (8001ffc <start_up+0x120>)
 8001f98:	601a      	str	r2, [r3, #0]

  HAL_Delay(1000);
 8001f9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f9e:	f001 f873 	bl	8003088 <HAL_Delay>
  LCD_Clear(&LCD);
 8001fa2:	480d      	ldr	r0, [pc, #52]	; (8001fd8 <start_up+0xfc>)
 8001fa4:	f7ff ff68 	bl	8001e78 <LCD_Clear>
  LED_OFF();
 8001fa8:	f000 f95a 	bl	8002260 <LED_OFF>
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000130 	.word	0x20000130
 8001fb8:	20000178 	.word	0x20000178
 8001fbc:	20000208 	.word	0x20000208
 8001fc0:	200001c0 	.word	0x200001c0
 8001fc4:	40010c00 	.word	0x40010c00
 8001fc8:	20000260 	.word	0x20000260
 8001fcc:	20000280 	.word	0x20000280
 8001fd0:	200002a0 	.word	0x200002a0
 8001fd4:	200000dc 	.word	0x200000dc
 8001fd8:	20000254 	.word	0x20000254
 8001fdc:	0800680c 	.word	0x0800680c
 8001fe0:	0800681c 	.word	0x0800681c
 8001fe4:	08006830 	.word	0x08006830
 8001fe8:	0801f810 	.word	0x0801f810
 8001fec:	200002c0 	.word	0x200002c0
 8001ff0:	0801f814 	.word	0x0801f814
 8001ff4:	20000004 	.word	0x20000004
 8001ff8:	0801f818 	.word	0x0801f818
 8001ffc:	20000008 	.word	0x20000008

08002000 <check_state>:

void check_state() {
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  // If Enter new state
  if (preState != state) {
 8002004:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <check_state+0x30>)
 8002006:	781a      	ldrb	r2, [r3, #0]
 8002008:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <check_state+0x34>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	429a      	cmp	r2, r3
 800200e:	d00c      	beq.n	800202a <check_state+0x2a>
	LCD_Clear(&LCD);
 8002010:	4809      	ldr	r0, [pc, #36]	; (8002038 <check_state+0x38>)
 8002012:	f7ff ff31 	bl	8001e78 <LCD_Clear>
	preState = state;
 8002016:	4b07      	ldr	r3, [pc, #28]	; (8002034 <check_state+0x34>)
 8002018:	781a      	ldrb	r2, [r3, #0]
 800201a:	4b05      	ldr	r3, [pc, #20]	; (8002030 <check_state+0x30>)
 800201c:	701a      	strb	r2, [r3, #0]
	refreshLCD = true;
 800201e:	4b07      	ldr	r3, [pc, #28]	; (800203c <check_state+0x3c>)
 8002020:	2201      	movs	r2, #1
 8002022:	701a      	strb	r2, [r3, #0]
	refreshSelection = true;
 8002024:	4b06      	ldr	r3, [pc, #24]	; (8002040 <check_state+0x40>)
 8002026:	2201      	movs	r2, #1
 8002028:	701a      	strb	r2, [r3, #0]
  }
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	2000000d 	.word	0x2000000d
 8002034:	2000000c 	.word	0x2000000c
 8002038:	20000254 	.word	0x20000254
 800203c:	2000000f 	.word	0x2000000f
 8002040:	200002ca 	.word	0x200002ca

08002044 <main_loop>:
void main_loop() {
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
  check_state();
 800204a:	f7ff ffd9 	bl	8002000 <check_state>
  check_ecd();
 800204e:	f000 fd77 	bl	8002b40 <check_ecd>

  switch (state) {
 8002052:	4b6b      	ldr	r3, [pc, #428]	; (8002200 <main_loop+0x1bc>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	3b01      	subs	r3, #1
 8002058:	2b03      	cmp	r3, #3
 800205a:	f200 80c8 	bhi.w	80021ee <main_loop+0x1aa>
 800205e:	a201      	add	r2, pc, #4	; (adr r2, 8002064 <main_loop+0x20>)
 8002060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002064:	08002075 	.word	0x08002075
 8002068:	08002091 	.word	0x08002091
 800206c:	080020e1 	.word	0x080020e1
 8002070:	080021cb 	.word	0x080021cb
	   |Count:    0 revs    |
	   |Set count: xxxx     |
	   ----------------------
	   **************************/
	{
	  if (refreshLCD == true) {
 8002074:	4b63      	ldr	r3, [pc, #396]	; (8002204 <main_loop+0x1c0>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	f000 80ba 	beq.w	80021f2 <main_loop+0x1ae>
		printDefaultLCD();
 800207e:	f000 fa1f 	bl	80024c0 <printDefaultLCD>
		HAL_Delay(10);
 8002082:	200a      	movs	r0, #10
 8002084:	f001 f800 	bl	8003088 <HAL_Delay>
		refreshLCD = false;
 8002088:	4b5e      	ldr	r3, [pc, #376]	; (8002204 <main_loop+0x1c0>)
 800208a:	2200      	movs	r2, #0
 800208c:	701a      	strb	r2, [r3, #0]
	  }
	  break;
 800208e:	e0b0      	b.n	80021f2 <main_loop+0x1ae>
	   | Set count: xxxx    |
	   |                    |
	   ----------------------
	   **************************/
	{
	  if (refreshLCD == true) //If we are allowed to update the LCD ...
 8002090:	4b5c      	ldr	r3, [pc, #368]	; (8002204 <main_loop+0x1c0>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d018      	beq.n	80020ca <main_loop+0x86>
	  {
		printLCD();
 8002098:	f000 f908 	bl	80022ac <printLCD>
		updateLCD(); // ... we update the LCD ...
 800209c:	f000 f924 	bl	80022e8 <updateLCD>

		//... also, if one of the menus are already selected...
		if (menu1_selected == true || menu2_selected == true
 80020a0:	4b59      	ldr	r3, [pc, #356]	; (8002208 <main_loop+0x1c4>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d10d      	bne.n	80020c4 <main_loop+0x80>
 80020a8:	4b58      	ldr	r3, [pc, #352]	; (800220c <main_loop+0x1c8>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d109      	bne.n	80020c4 <main_loop+0x80>
			|| menu3_selected == true || menu4_selected == true) {
 80020b0:	4b57      	ldr	r3, [pc, #348]	; (8002210 <main_loop+0x1cc>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d105      	bne.n	80020c4 <main_loop+0x80>
 80020b8:	4b56      	ldr	r3, [pc, #344]	; (8002214 <main_loop+0x1d0>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <main_loop+0x80>
		  // do nothing
		} else {
		  updateCursorPosition(); //update the position
 80020c0:	f000 f976 	bl	80023b0 <updateCursorPosition>
		}

		refreshLCD = false; //reset the variable - wait for a new trigger
 80020c4:	4b4f      	ldr	r3, [pc, #316]	; (8002204 <main_loop+0x1c0>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	701a      	strb	r2, [r3, #0]
	  }
	  if (refreshSelection == true) //if the selection is changed
 80020ca:	4b53      	ldr	r3, [pc, #332]	; (8002218 <main_loop+0x1d4>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 8091 	beq.w	80021f6 <main_loop+0x1b2>
	  {
		updateSelection(); //update the selection on the LCD
 80020d4:	f000 f9bc 	bl	8002450 <updateSelection>
		refreshSelection = false; // reset the variable - wait for a new trigger
 80020d8:	4b4f      	ldr	r3, [pc, #316]	; (8002218 <main_loop+0x1d4>)
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]
	  }
	  break;
 80020de:	e08a      	b.n	80021f6 <main_loop+0x1b2>
	   |Set count: xxxx     |
	   |Count:    0 revs    |
	   ----------------------
	   **************************/
	{
	  printDefaultLCD();
 80020e0:	f000 f9ee 	bl	80024c0 <printDefaultLCD>
	  s32 motor_posi = TIM1_count;
 80020e4:	4b4d      	ldr	r3, [pc, #308]	; (800221c <main_loop+0x1d8>)
 80020e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e8:	617b      	str	r3, [r7, #20]
	  s32 delta = motor_posi - pre_posi;
 80020ea:	4b4d      	ldr	r3, [pc, #308]	; (8002220 <main_loop+0x1dc>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	613b      	str	r3, [r7, #16]
	  if (abs(delta) > totalPulse) {
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	bfb8      	it	lt
 80020fa:	425b      	neglt	r3, r3
 80020fc:	f640 7278 	movw	r2, #3960	; 0xf78
 8002100:	4293      	cmp	r3, r2
 8002102:	dd08      	ble.n	8002116 <main_loop+0xd2>
		n_loop++;
 8002104:	4b47      	ldr	r3, [pc, #284]	; (8002224 <main_loop+0x1e0>)
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	3301      	adds	r3, #1
 800210a:	b29a      	uxth	r2, r3
 800210c:	4b45      	ldr	r3, [pc, #276]	; (8002224 <main_loop+0x1e0>)
 800210e:	801a      	strh	r2, [r3, #0]
		pre_posi = motor_posi;
 8002110:	4a43      	ldr	r2, [pc, #268]	; (8002220 <main_loop+0x1dc>)
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	6013      	str	r3, [r2, #0]
	  }

	  if (n_loop >= mNumLoopCount)
 8002116:	4b43      	ldr	r3, [pc, #268]	; (8002224 <main_loop+0x1e0>)
 8002118:	881b      	ldrh	r3, [r3, #0]
 800211a:	461a      	mov	r2, r3
 800211c:	4b42      	ldr	r3, [pc, #264]	; (8002228 <main_loop+0x1e4>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	db04      	blt.n	800212e <main_loop+0xea>
		n_loop = mNumLoopCount;
 8002124:	4b40      	ldr	r3, [pc, #256]	; (8002228 <main_loop+0x1e4>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	b29a      	uxth	r2, r3
 800212a:	4b3e      	ldr	r3, [pc, #248]	; (8002224 <main_loop+0x1e0>)
 800212c:	801a      	strh	r2, [r3, #0]
	  char holder[10];
	  LCD_Print_String_At(&LCD, 4, 8, "         ");
 800212e:	4b3f      	ldr	r3, [pc, #252]	; (800222c <main_loop+0x1e8>)
 8002130:	2208      	movs	r2, #8
 8002132:	2104      	movs	r1, #4
 8002134:	483e      	ldr	r0, [pc, #248]	; (8002230 <main_loop+0x1ec>)
 8002136:	f7ff feba 	bl	8001eae <LCD_Print_String_At>
	  if (n_loop < 2) {
 800213a:	4b3a      	ldr	r3, [pc, #232]	; (8002224 <main_loop+0x1e0>)
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d808      	bhi.n	8002154 <main_loop+0x110>
		sprintf(holder, "%4d rev", n_loop);
 8002142:	4b38      	ldr	r3, [pc, #224]	; (8002224 <main_loop+0x1e0>)
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	461a      	mov	r2, r3
 8002148:	463b      	mov	r3, r7
 800214a:	493a      	ldr	r1, [pc, #232]	; (8002234 <main_loop+0x1f0>)
 800214c:	4618      	mov	r0, r3
 800214e:	f003 fed7 	bl	8005f00 <siprintf>
 8002152:	e007      	b.n	8002164 <main_loop+0x120>
	  } else {
		sprintf(holder, "%4d revs", n_loop);
 8002154:	4b33      	ldr	r3, [pc, #204]	; (8002224 <main_loop+0x1e0>)
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	461a      	mov	r2, r3
 800215a:	463b      	mov	r3, r7
 800215c:	4936      	ldr	r1, [pc, #216]	; (8002238 <main_loop+0x1f4>)
 800215e:	4618      	mov	r0, r3
 8002160:	f003 fece 	bl	8005f00 <siprintf>
	  }
	  LCD_Print_String_At(&LCD, 4, 8, holder);
 8002164:	463b      	mov	r3, r7
 8002166:	2208      	movs	r2, #8
 8002168:	2104      	movs	r1, #4
 800216a:	4831      	ldr	r0, [pc, #196]	; (8002230 <main_loop+0x1ec>)
 800216c:	f7ff fe9f 	bl	8001eae <LCD_Print_String_At>

	  // Stop condition
	  if (n_loop >= mNumLoopCount) {
 8002170:	4b2c      	ldr	r3, [pc, #176]	; (8002224 <main_loop+0x1e0>)
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	461a      	mov	r2, r3
 8002176:	4b2c      	ldr	r3, [pc, #176]	; (8002228 <main_loop+0x1e4>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	429a      	cmp	r2, r3
 800217c:	db0a      	blt.n	8002194 <main_loop+0x150>
		state = 4;
 800217e:	4b20      	ldr	r3, [pc, #128]	; (8002200 <main_loop+0x1bc>)
 8002180:	2204      	movs	r2, #4
 8002182:	701a      	strb	r2, [r3, #0]
		set_motor(1, -2, 0);
 8002184:	2200      	movs	r2, #0
 8002186:	f06f 0101 	mvn.w	r1, #1
 800218a:	2001      	movs	r0, #1
 800218c:	f000 fa44 	bl	8002618 <set_motor>
		LED_OFF();
 8002190:	f000 f866 	bl	8002260 <LED_OFF>
	  }

	  //out to motor

//	  s32 mSpeedPwm = map(mSpeed,minSpeed,maxSpeed,0,1000);
	  s32 mSpeedPwm = 700;
 8002194:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002198:	60fb      	str	r3, [r7, #12]
	  if (mDir == 1) {
 800219a:	4b28      	ldr	r3, [pc, #160]	; (800223c <main_loop+0x1f8>)
 800219c:	f993 3000 	ldrsb.w	r3, [r3]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d108      	bne.n	80021b6 <main_loop+0x172>
		set_motor(1, 1, pwm);
 80021a4:	4b26      	ldr	r3, [pc, #152]	; (8002240 <main_loop+0x1fc>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	461a      	mov	r2, r3
 80021ac:	2101      	movs	r1, #1
 80021ae:	2001      	movs	r0, #1
 80021b0:	f000 fa32 	bl	8002618 <set_motor>
	  } else {
		set_motor(1, -1, pwm);
	  }
	  break;
 80021b4:	e020      	b.n	80021f8 <main_loop+0x1b4>
		set_motor(1, -1, pwm);
 80021b6:	4b22      	ldr	r3, [pc, #136]	; (8002240 <main_loop+0x1fc>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	461a      	mov	r2, r3
 80021be:	f04f 31ff 	mov.w	r1, #4294967295
 80021c2:	2001      	movs	r0, #1
 80021c4:	f000 fa28 	bl	8002618 <set_motor>
	  break;
 80021c8:	e016      	b.n	80021f8 <main_loop+0x1b4>
	   |Count:    0 revs    |
	   |Set count: xxxx     |
	   ----------------------
	   **************************/
	{
	  FLAG_run = false;
 80021ca:	4b1e      	ldr	r3, [pc, #120]	; (8002244 <main_loop+0x200>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	701a      	strb	r2, [r3, #0]
	  set_motor(1, -2, 0);
 80021d0:	2200      	movs	r2, #0
 80021d2:	f06f 0101 	mvn.w	r1, #1
 80021d6:	2001      	movs	r0, #1
 80021d8:	f000 fa1e 	bl	8002618 <set_motor>
	  LED_TOGGLE();
 80021dc:	f000 f84c 	bl	8002278 <LED_TOGGLE>
	  printDefaultLCD();
 80021e0:	f000 f96e 	bl	80024c0 <printDefaultLCD>

	  HAL_Delay(300);
 80021e4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80021e8:	f000 ff4e 	bl	8003088 <HAL_Delay>
	  break;
 80021ec:	e004      	b.n	80021f8 <main_loop+0x1b4>
	}
	default:
	  return;
 80021ee:	bf00      	nop
 80021f0:	e002      	b.n	80021f8 <main_loop+0x1b4>
	  break;
 80021f2:	bf00      	nop
 80021f4:	e000      	b.n	80021f8 <main_loop+0x1b4>
	  break;
 80021f6:	bf00      	nop
  } //Switch lvl1
}
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	2000000c 	.word	0x2000000c
 8002204:	2000000f 	.word	0x2000000f
 8002208:	200002c6 	.word	0x200002c6
 800220c:	200002c7 	.word	0x200002c7
 8002210:	200002c8 	.word	0x200002c8
 8002214:	200002c9 	.word	0x200002c9
 8002218:	200002ca 	.word	0x200002ca
 800221c:	40012c00 	.word	0x40012c00
 8002220:	200002f8 	.word	0x200002f8
 8002224:	200002c4 	.word	0x200002c4
 8002228:	20000008 	.word	0x20000008
 800222c:	08006838 	.word	0x08006838
 8002230:	20000254 	.word	0x20000254
 8002234:	08006844 	.word	0x08006844
 8002238:	0800684c 	.word	0x0800684c
 800223c:	20000004 	.word	0x20000004
 8002240:	2000001c 	.word	0x2000001c
 8002244:	200002fc 	.word	0x200002fc

08002248 <LED_ON>:

void LED_ON() {
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED_Panel_GPIO_Port, LED_Panel_Pin, GPIO_PIN_SET);
 800224c:	2201      	movs	r2, #1
 800224e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002252:	4802      	ldr	r0, [pc, #8]	; (800225c <LED_ON+0x14>)
 8002254:	f001 fdf7 	bl	8003e46 <HAL_GPIO_WritePin>
}
 8002258:	bf00      	nop
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40010c00 	.word	0x40010c00

08002260 <LED_OFF>:
void LED_OFF() {
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED_Panel_GPIO_Port, LED_Panel_Pin, GPIO_PIN_RESET);
 8002264:	2200      	movs	r2, #0
 8002266:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800226a:	4802      	ldr	r0, [pc, #8]	; (8002274 <LED_OFF+0x14>)
 800226c:	f001 fdeb 	bl	8003e46 <HAL_GPIO_WritePin>
}
 8002270:	bf00      	nop
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40010c00 	.word	0x40010c00

08002278 <LED_TOGGLE>:
void LED_TOGGLE() {
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  HAL_GPIO_TogglePin(LED_Panel_GPIO_Port, LED_Panel_Pin);
 800227c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002280:	4802      	ldr	r0, [pc, #8]	; (800228c <LED_TOGGLE+0x14>)
 8002282:	f001 fdf8 	bl	8003e76 <HAL_GPIO_TogglePin>
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40010c00 	.word	0x40010c00

08002290 <FLASH_ReadData>:
  uint32_t PageError = 0;
  HAL_FLASHEx_Erase(&EraseInit, &PageError);
  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, startPage, data);
  HAL_FLASH_Lock();
}
uint32_t FLASH_ReadData(uint32_t addr) {
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /*
   * Read 4 bytes
   * */
  uint32_t data = *(__IO uint32_t*) (addr);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	60fb      	str	r3, [r7, #12]
  return data;
 800229e:	68fb      	ldr	r3, [r7, #12]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr
	...

080022ac <printLCD>:

void printLCD() {
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
   |                    |
   ----------------------
   **************************/

  //These are the values which are not changing the operation
  LCD_Print_String_At(&LCD, 1, 2, "Speed: ");
 80022b0:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <printLCD+0x2c>)
 80022b2:	2202      	movs	r2, #2
 80022b4:	2101      	movs	r1, #1
 80022b6:	4809      	ldr	r0, [pc, #36]	; (80022dc <printLCD+0x30>)
 80022b8:	f7ff fdf9 	bl	8001eae <LCD_Print_String_At>
  //----------------------
  LCD_Print_String_At(&LCD, 2, 2, "Direction: ");
 80022bc:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <printLCD+0x34>)
 80022be:	2202      	movs	r2, #2
 80022c0:	2102      	movs	r1, #2
 80022c2:	4806      	ldr	r0, [pc, #24]	; (80022dc <printLCD+0x30>)
 80022c4:	f7ff fdf3 	bl	8001eae <LCD_Print_String_At>
  LCD_Print_String_At(&LCD, 3, 2, "Set count: ");
 80022c8:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <printLCD+0x38>)
 80022ca:	2202      	movs	r2, #2
 80022cc:	2103      	movs	r1, #3
 80022ce:	4803      	ldr	r0, [pc, #12]	; (80022dc <printLCD+0x30>)
 80022d0:	f7ff fded 	bl	8001eae <LCD_Print_String_At>
  //----------------------
}
 80022d4:	bf00      	nop
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	08006858 	.word	0x08006858
 80022dc:	20000254 	.word	0x20000254
 80022e0:	08006860 	.word	0x08006860
 80022e4:	0800686c 	.word	0x0800686c

080022e8 <updateLCD>:
void updateLCD() {
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
   | Set count: xxxx    |
   |                    |
   ----------------------
   **************************/
  //Update value
  LCD_Print_String_At(&LCD, 1, 9, "      ");
 80022ee:	4b25      	ldr	r3, [pc, #148]	; (8002384 <updateLCD+0x9c>)
 80022f0:	2209      	movs	r2, #9
 80022f2:	2101      	movs	r1, #1
 80022f4:	4824      	ldr	r0, [pc, #144]	; (8002388 <updateLCD+0xa0>)
 80022f6:	f7ff fdda 	bl	8001eae <LCD_Print_String_At>
  char holder[10];
  sprintf(holder, "%3d rpm", (int) menu1_value);
 80022fa:	4b24      	ldr	r3, [pc, #144]	; (800238c <updateLCD+0xa4>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe fe40 	bl	8000f84 <__aeabi_f2iz>
 8002304:	4602      	mov	r2, r0
 8002306:	1d3b      	adds	r3, r7, #4
 8002308:	4921      	ldr	r1, [pc, #132]	; (8002390 <updateLCD+0xa8>)
 800230a:	4618      	mov	r0, r3
 800230c:	f003 fdf8 	bl	8005f00 <siprintf>
  LCD_Print_String_At(&LCD, 1, 9, holder);
 8002310:	1d3b      	adds	r3, r7, #4
 8002312:	2209      	movs	r2, #9
 8002314:	2101      	movs	r1, #1
 8002316:	481c      	ldr	r0, [pc, #112]	; (8002388 <updateLCD+0xa0>)
 8002318:	f7ff fdc9 	bl	8001eae <LCD_Print_String_At>

  LCD_Print_String_At(&LCD, 2, 13, "    ");
 800231c:	4b1d      	ldr	r3, [pc, #116]	; (8002394 <updateLCD+0xac>)
 800231e:	220d      	movs	r2, #13
 8002320:	2102      	movs	r1, #2
 8002322:	4819      	ldr	r0, [pc, #100]	; (8002388 <updateLCD+0xa0>)
 8002324:	f7ff fdc3 	bl	8001eae <LCD_Print_String_At>
  if (menu2_value == 1) {
 8002328:	4b1b      	ldr	r3, [pc, #108]	; (8002398 <updateLCD+0xb0>)
 800232a:	f993 3000 	ldrsb.w	r3, [r3]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d105      	bne.n	800233e <updateLCD+0x56>
	sprintf(holder, " CW");
 8002332:	1d3b      	adds	r3, r7, #4
 8002334:	4919      	ldr	r1, [pc, #100]	; (800239c <updateLCD+0xb4>)
 8002336:	4618      	mov	r0, r3
 8002338:	f003 fde2 	bl	8005f00 <siprintf>
 800233c:	e004      	b.n	8002348 <updateLCD+0x60>
  } else {
	sprintf(holder, "CCW");
 800233e:	1d3b      	adds	r3, r7, #4
 8002340:	4917      	ldr	r1, [pc, #92]	; (80023a0 <updateLCD+0xb8>)
 8002342:	4618      	mov	r0, r3
 8002344:	f003 fddc 	bl	8005f00 <siprintf>
  }
  LCD_Print_String_At(&LCD, 2, 13, holder);
 8002348:	1d3b      	adds	r3, r7, #4
 800234a:	220d      	movs	r2, #13
 800234c:	2102      	movs	r1, #2
 800234e:	480e      	ldr	r0, [pc, #56]	; (8002388 <updateLCD+0xa0>)
 8002350:	f7ff fdad 	bl	8001eae <LCD_Print_String_At>

  LCD_Print_String_At(&LCD, 3, 13, "        ");
 8002354:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <updateLCD+0xbc>)
 8002356:	220d      	movs	r2, #13
 8002358:	2103      	movs	r1, #3
 800235a:	480b      	ldr	r0, [pc, #44]	; (8002388 <updateLCD+0xa0>)
 800235c:	f7ff fda7 	bl	8001eae <LCD_Print_String_At>
  sprintf(holder, "%3d revs", (int) menu3_value);
 8002360:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <updateLCD+0xc0>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	1d3b      	adds	r3, r7, #4
 8002366:	4911      	ldr	r1, [pc, #68]	; (80023ac <updateLCD+0xc4>)
 8002368:	4618      	mov	r0, r3
 800236a:	f003 fdc9 	bl	8005f00 <siprintf>
  LCD_Print_String_At(&LCD, 3, 13, holder);
 800236e:	1d3b      	adds	r3, r7, #4
 8002370:	220d      	movs	r2, #13
 8002372:	2103      	movs	r1, #3
 8002374:	4804      	ldr	r0, [pc, #16]	; (8002388 <updateLCD+0xa0>)
 8002376:	f7ff fd9a 	bl	8001eae <LCD_Print_String_At>
}
 800237a:	bf00      	nop
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	08006878 	.word	0x08006878
 8002388:	20000254 	.word	0x20000254
 800238c:	200002c0 	.word	0x200002c0
 8002390:	08006880 	.word	0x08006880
 8002394:	08006888 	.word	0x08006888
 8002398:	20000004 	.word	0x20000004
 800239c:	08006890 	.word	0x08006890
 80023a0:	08006894 	.word	0x08006894
 80023a4:	08006898 	.word	0x08006898
 80023a8:	20000008 	.word	0x20000008
 80023ac:	080068a4 	.word	0x080068a4

080023b0 <updateCursorPosition>:

void updateCursorPosition() {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  //Clear display's ">" parts
  LCD_Print_String_At(&LCD, 1, 1, " ");
 80023b4:	4b22      	ldr	r3, [pc, #136]	; (8002440 <updateCursorPosition+0x90>)
 80023b6:	2201      	movs	r2, #1
 80023b8:	2101      	movs	r1, #1
 80023ba:	4822      	ldr	r0, [pc, #136]	; (8002444 <updateCursorPosition+0x94>)
 80023bc:	f7ff fd77 	bl	8001eae <LCD_Print_String_At>
  LCD_Print_String_At(&LCD, 2, 1, " ");
 80023c0:	4b1f      	ldr	r3, [pc, #124]	; (8002440 <updateCursorPosition+0x90>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	2102      	movs	r1, #2
 80023c6:	481f      	ldr	r0, [pc, #124]	; (8002444 <updateCursorPosition+0x94>)
 80023c8:	f7ff fd71 	bl	8001eae <LCD_Print_String_At>
  LCD_Print_String_At(&LCD, 3, 1, " ");
 80023cc:	4b1c      	ldr	r3, [pc, #112]	; (8002440 <updateCursorPosition+0x90>)
 80023ce:	2201      	movs	r2, #1
 80023d0:	2103      	movs	r1, #3
 80023d2:	481c      	ldr	r0, [pc, #112]	; (8002444 <updateCursorPosition+0x94>)
 80023d4:	f7ff fd6b 	bl	8001eae <LCD_Print_String_At>
  LCD_Print_String_At(&LCD, 4, 1, " ");
 80023d8:	4b19      	ldr	r3, [pc, #100]	; (8002440 <updateCursorPosition+0x90>)
 80023da:	2201      	movs	r2, #1
 80023dc:	2104      	movs	r1, #4
 80023de:	4819      	ldr	r0, [pc, #100]	; (8002444 <updateCursorPosition+0x94>)
 80023e0:	f7ff fd65 	bl	8001eae <LCD_Print_String_At>

  //Place cursor to the new position
  switch (menuCounter) //this checks the value of the counter (0, 1, 2 or 3)
 80023e4:	4b18      	ldr	r3, [pc, #96]	; (8002448 <updateCursorPosition+0x98>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	3b01      	subs	r3, #1
 80023ea:	2b03      	cmp	r3, #3
 80023ec:	d826      	bhi.n	800243c <updateCursorPosition+0x8c>
 80023ee:	a201      	add	r2, pc, #4	; (adr r2, 80023f4 <updateCursorPosition+0x44>)
 80023f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f4:	08002405 	.word	0x08002405
 80023f8:	08002413 	.word	0x08002413
 80023fc:	08002421 	.word	0x08002421
 8002400:	0800242f 	.word	0x0800242f
  {
	case 1:
	  LCD_Print_String_At(&LCD, 1, 1, ">");
 8002404:	4b11      	ldr	r3, [pc, #68]	; (800244c <updateCursorPosition+0x9c>)
 8002406:	2201      	movs	r2, #1
 8002408:	2101      	movs	r1, #1
 800240a:	480e      	ldr	r0, [pc, #56]	; (8002444 <updateCursorPosition+0x94>)
 800240c:	f7ff fd4f 	bl	8001eae <LCD_Print_String_At>
	  break;
 8002410:	e014      	b.n	800243c <updateCursorPosition+0x8c>
	  //-------------------------------
	case 2:
	  LCD_Print_String_At(&LCD, 2, 1, ">");
 8002412:	4b0e      	ldr	r3, [pc, #56]	; (800244c <updateCursorPosition+0x9c>)
 8002414:	2201      	movs	r2, #1
 8002416:	2102      	movs	r1, #2
 8002418:	480a      	ldr	r0, [pc, #40]	; (8002444 <updateCursorPosition+0x94>)
 800241a:	f7ff fd48 	bl	8001eae <LCD_Print_String_At>
	  break;
 800241e:	e00d      	b.n	800243c <updateCursorPosition+0x8c>
	  //-------------------------------
	case 3:
	  LCD_Print_String_At(&LCD, 3, 1, ">");
 8002420:	4b0a      	ldr	r3, [pc, #40]	; (800244c <updateCursorPosition+0x9c>)
 8002422:	2201      	movs	r2, #1
 8002424:	2103      	movs	r1, #3
 8002426:	4807      	ldr	r0, [pc, #28]	; (8002444 <updateCursorPosition+0x94>)
 8002428:	f7ff fd41 	bl	8001eae <LCD_Print_String_At>
	  break;
 800242c:	e006      	b.n	800243c <updateCursorPosition+0x8c>
	  //-------------------------------
	case 4:
	  LCD_Print_String_At(&LCD, 4, 1, ">");
 800242e:	4b07      	ldr	r3, [pc, #28]	; (800244c <updateCursorPosition+0x9c>)
 8002430:	2201      	movs	r2, #1
 8002432:	2104      	movs	r1, #4
 8002434:	4803      	ldr	r0, [pc, #12]	; (8002444 <updateCursorPosition+0x94>)
 8002436:	f7ff fd3a 	bl	8001eae <LCD_Print_String_At>
	  break;
 800243a:	bf00      	nop
  }
}
 800243c:	bf00      	nop
 800243e:	bd80      	pop	{r7, pc}
 8002440:	080068b0 	.word	0x080068b0
 8002444:	20000254 	.word	0x20000254
 8002448:	2000000e 	.word	0x2000000e
 800244c:	080068b4 	.word	0x080068b4

08002450 <updateSelection>:
void updateSelection() {
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  //When a menu is selected ">" becomes "X"

  if (menu1_selected == true) {
 8002454:	4b14      	ldr	r3, [pc, #80]	; (80024a8 <updateSelection+0x58>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <updateSelection+0x18>
	LCD_Print_String_At(&LCD, 1, 1, "*");
 800245c:	4b13      	ldr	r3, [pc, #76]	; (80024ac <updateSelection+0x5c>)
 800245e:	2201      	movs	r2, #1
 8002460:	2101      	movs	r1, #1
 8002462:	4813      	ldr	r0, [pc, #76]	; (80024b0 <updateSelection+0x60>)
 8002464:	f7ff fd23 	bl	8001eae <LCD_Print_String_At>
  }
  //-------------------
  if (menu2_selected == true) {
 8002468:	4b12      	ldr	r3, [pc, #72]	; (80024b4 <updateSelection+0x64>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d005      	beq.n	800247c <updateSelection+0x2c>
	LCD_Print_String_At(&LCD, 2, 1, "*");
 8002470:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <updateSelection+0x5c>)
 8002472:	2201      	movs	r2, #1
 8002474:	2102      	movs	r1, #2
 8002476:	480e      	ldr	r0, [pc, #56]	; (80024b0 <updateSelection+0x60>)
 8002478:	f7ff fd19 	bl	8001eae <LCD_Print_String_At>
  }
  //-------------------
  if (menu3_selected == true) {
 800247c:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <updateSelection+0x68>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d005      	beq.n	8002490 <updateSelection+0x40>
	LCD_Print_String_At(&LCD, 3, 1, "*");
 8002484:	4b09      	ldr	r3, [pc, #36]	; (80024ac <updateSelection+0x5c>)
 8002486:	2201      	movs	r2, #1
 8002488:	2103      	movs	r1, #3
 800248a:	4809      	ldr	r0, [pc, #36]	; (80024b0 <updateSelection+0x60>)
 800248c:	f7ff fd0f 	bl	8001eae <LCD_Print_String_At>
  }
  //-------------------
  if (menu4_selected == true) {
 8002490:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <updateSelection+0x6c>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <updateSelection+0x54>
	LCD_Print_String_At(&LCD, 4, 1, "*");
 8002498:	4b04      	ldr	r3, [pc, #16]	; (80024ac <updateSelection+0x5c>)
 800249a:	2201      	movs	r2, #1
 800249c:	2104      	movs	r1, #4
 800249e:	4804      	ldr	r0, [pc, #16]	; (80024b0 <updateSelection+0x60>)
 80024a0:	f7ff fd05 	bl	8001eae <LCD_Print_String_At>
  }
}
 80024a4:	bf00      	nop
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	200002c6 	.word	0x200002c6
 80024ac:	080068b8 	.word	0x080068b8
 80024b0:	20000254 	.word	0x20000254
 80024b4:	200002c7 	.word	0x200002c7
 80024b8:	200002c8 	.word	0x200002c8
 80024bc:	200002c9 	.word	0x200002c9

080024c0 <printDefaultLCD>:

void printDefaultLCD() {
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
   |Direction: CW       |
   |Set count: xxxx     |
   |Count:    0 revs    |
   ----------------------
   **************************/
  LCD_Print_String_At(&LCD, 1, 1, "Speed: ");
 80024c6:	4b41      	ldr	r3, [pc, #260]	; (80025cc <printDefaultLCD+0x10c>)
 80024c8:	2201      	movs	r2, #1
 80024ca:	2101      	movs	r1, #1
 80024cc:	4840      	ldr	r0, [pc, #256]	; (80025d0 <printDefaultLCD+0x110>)
 80024ce:	f7ff fcee 	bl	8001eae <LCD_Print_String_At>
  //----------------------
  LCD_Print_String_At(&LCD, 2, 1, "Direction: ");
 80024d2:	4b40      	ldr	r3, [pc, #256]	; (80025d4 <printDefaultLCD+0x114>)
 80024d4:	2201      	movs	r2, #1
 80024d6:	2102      	movs	r1, #2
 80024d8:	483d      	ldr	r0, [pc, #244]	; (80025d0 <printDefaultLCD+0x110>)
 80024da:	f7ff fce8 	bl	8001eae <LCD_Print_String_At>
  LCD_Print_String_At(&LCD, 3, 1, "Set count: ");
 80024de:	4b3e      	ldr	r3, [pc, #248]	; (80025d8 <printDefaultLCD+0x118>)
 80024e0:	2201      	movs	r2, #1
 80024e2:	2103      	movs	r1, #3
 80024e4:	483a      	ldr	r0, [pc, #232]	; (80025d0 <printDefaultLCD+0x110>)
 80024e6:	f7ff fce2 	bl	8001eae <LCD_Print_String_At>
  LCD_Print_String_At(&LCD, 4, 1, "Count: ");
 80024ea:	4b3c      	ldr	r3, [pc, #240]	; (80025dc <printDefaultLCD+0x11c>)
 80024ec:	2201      	movs	r2, #1
 80024ee:	2104      	movs	r1, #4
 80024f0:	4837      	ldr	r0, [pc, #220]	; (80025d0 <printDefaultLCD+0x110>)
 80024f2:	f7ff fcdc 	bl	8001eae <LCD_Print_String_At>

  //Update value
  LCD_Print_String_At(&LCD, 1, 8, "      ");
 80024f6:	4b3a      	ldr	r3, [pc, #232]	; (80025e0 <printDefaultLCD+0x120>)
 80024f8:	2208      	movs	r2, #8
 80024fa:	2101      	movs	r1, #1
 80024fc:	4834      	ldr	r0, [pc, #208]	; (80025d0 <printDefaultLCD+0x110>)
 80024fe:	f7ff fcd6 	bl	8001eae <LCD_Print_String_At>
  char holder[10];
  sprintf(holder, "%2d rpm", (int) menu1_value);
 8002502:	4b38      	ldr	r3, [pc, #224]	; (80025e4 <printDefaultLCD+0x124>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f7fe fd3c 	bl	8000f84 <__aeabi_f2iz>
 800250c:	4602      	mov	r2, r0
 800250e:	1d3b      	adds	r3, r7, #4
 8002510:	4935      	ldr	r1, [pc, #212]	; (80025e8 <printDefaultLCD+0x128>)
 8002512:	4618      	mov	r0, r3
 8002514:	f003 fcf4 	bl	8005f00 <siprintf>
  LCD_Print_String_At(&LCD, 1, 8, holder);
 8002518:	1d3b      	adds	r3, r7, #4
 800251a:	2208      	movs	r2, #8
 800251c:	2101      	movs	r1, #1
 800251e:	482c      	ldr	r0, [pc, #176]	; (80025d0 <printDefaultLCD+0x110>)
 8002520:	f7ff fcc5 	bl	8001eae <LCD_Print_String_At>

  LCD_Print_String_At(&LCD, 2, 12, "    ");
 8002524:	4b31      	ldr	r3, [pc, #196]	; (80025ec <printDefaultLCD+0x12c>)
 8002526:	220c      	movs	r2, #12
 8002528:	2102      	movs	r1, #2
 800252a:	4829      	ldr	r0, [pc, #164]	; (80025d0 <printDefaultLCD+0x110>)
 800252c:	f7ff fcbf 	bl	8001eae <LCD_Print_String_At>
  if (menu2_value == 1) {
 8002530:	4b2f      	ldr	r3, [pc, #188]	; (80025f0 <printDefaultLCD+0x130>)
 8002532:	f993 3000 	ldrsb.w	r3, [r3]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d105      	bne.n	8002546 <printDefaultLCD+0x86>
	sprintf(holder, " CW");
 800253a:	1d3b      	adds	r3, r7, #4
 800253c:	492d      	ldr	r1, [pc, #180]	; (80025f4 <printDefaultLCD+0x134>)
 800253e:	4618      	mov	r0, r3
 8002540:	f003 fcde 	bl	8005f00 <siprintf>
 8002544:	e004      	b.n	8002550 <printDefaultLCD+0x90>
  } else {
	sprintf(holder, "CCW");
 8002546:	1d3b      	adds	r3, r7, #4
 8002548:	492b      	ldr	r1, [pc, #172]	; (80025f8 <printDefaultLCD+0x138>)
 800254a:	4618      	mov	r0, r3
 800254c:	f003 fcd8 	bl	8005f00 <siprintf>
  }
  LCD_Print_String_At(&LCD, 2, 12, holder);
 8002550:	1d3b      	adds	r3, r7, #4
 8002552:	220c      	movs	r2, #12
 8002554:	2102      	movs	r1, #2
 8002556:	481e      	ldr	r0, [pc, #120]	; (80025d0 <printDefaultLCD+0x110>)
 8002558:	f7ff fca9 	bl	8001eae <LCD_Print_String_At>

  LCD_Print_String_At(&LCD, 3, 12, "        ");
 800255c:	4b27      	ldr	r3, [pc, #156]	; (80025fc <printDefaultLCD+0x13c>)
 800255e:	220c      	movs	r2, #12
 8002560:	2103      	movs	r1, #3
 8002562:	481b      	ldr	r0, [pc, #108]	; (80025d0 <printDefaultLCD+0x110>)
 8002564:	f7ff fca3 	bl	8001eae <LCD_Print_String_At>

  sprintf(holder, "%3d revs", (int) menu3_value);
 8002568:	4b25      	ldr	r3, [pc, #148]	; (8002600 <printDefaultLCD+0x140>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	1d3b      	adds	r3, r7, #4
 800256e:	4925      	ldr	r1, [pc, #148]	; (8002604 <printDefaultLCD+0x144>)
 8002570:	4618      	mov	r0, r3
 8002572:	f003 fcc5 	bl	8005f00 <siprintf>
  LCD_Print_String_At(&LCD, 3, 12, holder);
 8002576:	1d3b      	adds	r3, r7, #4
 8002578:	220c      	movs	r2, #12
 800257a:	2103      	movs	r1, #3
 800257c:	4814      	ldr	r0, [pc, #80]	; (80025d0 <printDefaultLCD+0x110>)
 800257e:	f7ff fc96 	bl	8001eae <LCD_Print_String_At>

  LCD_Print_String_At(&LCD, 4, 8, "         ");
 8002582:	4b21      	ldr	r3, [pc, #132]	; (8002608 <printDefaultLCD+0x148>)
 8002584:	2208      	movs	r2, #8
 8002586:	2104      	movs	r1, #4
 8002588:	4811      	ldr	r0, [pc, #68]	; (80025d0 <printDefaultLCD+0x110>)
 800258a:	f7ff fc90 	bl	8001eae <LCD_Print_String_At>
  if (n_loop < 2) {
 800258e:	4b1f      	ldr	r3, [pc, #124]	; (800260c <printDefaultLCD+0x14c>)
 8002590:	881b      	ldrh	r3, [r3, #0]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d808      	bhi.n	80025a8 <printDefaultLCD+0xe8>
	sprintf(holder, "%4d rev", n_loop);
 8002596:	4b1d      	ldr	r3, [pc, #116]	; (800260c <printDefaultLCD+0x14c>)
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	461a      	mov	r2, r3
 800259c:	1d3b      	adds	r3, r7, #4
 800259e:	491c      	ldr	r1, [pc, #112]	; (8002610 <printDefaultLCD+0x150>)
 80025a0:	4618      	mov	r0, r3
 80025a2:	f003 fcad 	bl	8005f00 <siprintf>
 80025a6:	e007      	b.n	80025b8 <printDefaultLCD+0xf8>
  } else {
	sprintf(holder, "%4d revs", n_loop);
 80025a8:	4b18      	ldr	r3, [pc, #96]	; (800260c <printDefaultLCD+0x14c>)
 80025aa:	881b      	ldrh	r3, [r3, #0]
 80025ac:	461a      	mov	r2, r3
 80025ae:	1d3b      	adds	r3, r7, #4
 80025b0:	4918      	ldr	r1, [pc, #96]	; (8002614 <printDefaultLCD+0x154>)
 80025b2:	4618      	mov	r0, r3
 80025b4:	f003 fca4 	bl	8005f00 <siprintf>
  }
  LCD_Print_String_At(&LCD, 4, 8, holder);
 80025b8:	1d3b      	adds	r3, r7, #4
 80025ba:	2208      	movs	r2, #8
 80025bc:	2104      	movs	r1, #4
 80025be:	4804      	ldr	r0, [pc, #16]	; (80025d0 <printDefaultLCD+0x110>)
 80025c0:	f7ff fc75 	bl	8001eae <LCD_Print_String_At>
}
 80025c4:	bf00      	nop
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	08006858 	.word	0x08006858
 80025d0:	20000254 	.word	0x20000254
 80025d4:	08006860 	.word	0x08006860
 80025d8:	0800686c 	.word	0x0800686c
 80025dc:	080068bc 	.word	0x080068bc
 80025e0:	08006878 	.word	0x08006878
 80025e4:	200002c0 	.word	0x200002c0
 80025e8:	080068c4 	.word	0x080068c4
 80025ec:	08006888 	.word	0x08006888
 80025f0:	20000004 	.word	0x20000004
 80025f4:	08006890 	.word	0x08006890
 80025f8:	08006894 	.word	0x08006894
 80025fc:	08006898 	.word	0x08006898
 8002600:	20000008 	.word	0x20000008
 8002604:	080068a4 	.word	0x080068a4
 8002608:	08006838 	.word	0x08006838
 800260c:	200002c4 	.word	0x200002c4
 8002610:	08006844 	.word	0x08006844
 8002614:	0800684c 	.word	0x0800684c

08002618 <set_motor>:

void set_motor(u8 id, s8 dir, u16 val) {
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af02      	add	r7, sp, #8
 800261e:	4603      	mov	r3, r0
 8002620:	71fb      	strb	r3, [r7, #7]
 8002622:	460b      	mov	r3, r1
 8002624:	71bb      	strb	r3, [r7, #6]
 8002626:	4613      	mov	r3, r2
 8002628:	80bb      	strh	r3, [r7, #4]
  u16 pwm;
  switch (id) {
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d002      	beq.n	8002636 <set_motor+0x1e>
 8002630:	2b02      	cmp	r3, #2
 8002632:	d049      	beq.n	80026c8 <set_motor+0xb0>
		HAL_GPIO_WritePin(M2B_R_GPIO_Port, M2B_R_Pin, GPIO_PIN_RESET);
		M2B_Channel = 999;
	  }
	  break;
	default:
	  return;
 8002634:	e0a3      	b.n	800277e <set_motor+0x166>
	  pwm = map(val, 0, 1000, 0, 499);
 8002636:	88b8      	ldrh	r0, [r7, #4]
 8002638:	f240 13f3 	movw	r3, #499	; 0x1f3
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	2300      	movs	r3, #0
 8002640:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002644:	2100      	movs	r1, #0
 8002646:	f000 f8a5 	bl	8002794 <map>
 800264a:	4603      	mov	r3, r0
 800264c:	81fb      	strh	r3, [r7, #14]
	  if (dir == 1) {
 800264e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d10b      	bne.n	800266e <set_motor+0x56>
		HAL_GPIO_WritePin(M1_EN_GPIO_Port, M1_EN_Pin, GPIO_PIN_SET);
 8002656:	2201      	movs	r2, #1
 8002658:	2104      	movs	r1, #4
 800265a:	484a      	ldr	r0, [pc, #296]	; (8002784 <set_motor+0x16c>)
 800265c:	f001 fbf3 	bl	8003e46 <HAL_GPIO_WritePin>
		M1A_Channel = pwm;
 8002660:	4a49      	ldr	r2, [pc, #292]	; (8002788 <set_motor+0x170>)
 8002662:	89fb      	ldrh	r3, [r7, #14]
 8002664:	6353      	str	r3, [r2, #52]	; 0x34
		M1B_Channel = 0;
 8002666:	4b48      	ldr	r3, [pc, #288]	; (8002788 <set_motor+0x170>)
 8002668:	2200      	movs	r2, #0
 800266a:	639a      	str	r2, [r3, #56]	; 0x38
	  break;
 800266c:	e087      	b.n	800277e <set_motor+0x166>
	  } else if (dir == -1) {
 800266e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002676:	d10b      	bne.n	8002690 <set_motor+0x78>
		HAL_GPIO_WritePin(M1_EN_GPIO_Port, M1_EN_Pin, GPIO_PIN_SET);
 8002678:	2201      	movs	r2, #1
 800267a:	2104      	movs	r1, #4
 800267c:	4841      	ldr	r0, [pc, #260]	; (8002784 <set_motor+0x16c>)
 800267e:	f001 fbe2 	bl	8003e46 <HAL_GPIO_WritePin>
		M1B_Channel = pwm;
 8002682:	4a41      	ldr	r2, [pc, #260]	; (8002788 <set_motor+0x170>)
 8002684:	89fb      	ldrh	r3, [r7, #14]
 8002686:	6393      	str	r3, [r2, #56]	; 0x38
		M1A_Channel = 0;
 8002688:	4b3f      	ldr	r3, [pc, #252]	; (8002788 <set_motor+0x170>)
 800268a:	2200      	movs	r2, #0
 800268c:	635a      	str	r2, [r3, #52]	; 0x34
	  break;
 800268e:	e076      	b.n	800277e <set_motor+0x166>
	  } else if (dir == 0) //Freely run
 8002690:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10b      	bne.n	80026b0 <set_motor+0x98>
		HAL_GPIO_WritePin(M1_EN_GPIO_Port, M1_EN_Pin, GPIO_PIN_RESET);
 8002698:	2200      	movs	r2, #0
 800269a:	2104      	movs	r1, #4
 800269c:	4839      	ldr	r0, [pc, #228]	; (8002784 <set_motor+0x16c>)
 800269e:	f001 fbd2 	bl	8003e46 <HAL_GPIO_WritePin>
		M1A_Channel = 0;
 80026a2:	4b39      	ldr	r3, [pc, #228]	; (8002788 <set_motor+0x170>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	635a      	str	r2, [r3, #52]	; 0x34
		M1B_Channel = 0;
 80026a8:	4b37      	ldr	r3, [pc, #220]	; (8002788 <set_motor+0x170>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	639a      	str	r2, [r3, #56]	; 0x38
	  break;
 80026ae:	e066      	b.n	800277e <set_motor+0x166>
		HAL_GPIO_WritePin(M1_EN_GPIO_Port, M1_EN_Pin, GPIO_PIN_SET);
 80026b0:	2201      	movs	r2, #1
 80026b2:	2104      	movs	r1, #4
 80026b4:	4833      	ldr	r0, [pc, #204]	; (8002784 <set_motor+0x16c>)
 80026b6:	f001 fbc6 	bl	8003e46 <HAL_GPIO_WritePin>
		M1B_Channel = 0;
 80026ba:	4b33      	ldr	r3, [pc, #204]	; (8002788 <set_motor+0x170>)
 80026bc:	2200      	movs	r2, #0
 80026be:	639a      	str	r2, [r3, #56]	; 0x38
		M1A_Channel = 0;
 80026c0:	4b31      	ldr	r3, [pc, #196]	; (8002788 <set_motor+0x170>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	635a      	str	r2, [r3, #52]	; 0x34
	  break;
 80026c6:	e05a      	b.n	800277e <set_motor+0x166>
	  pwm = map(val, 0, 1000, 0, 999);
 80026c8:	88b8      	ldrh	r0, [r7, #4]
 80026ca:	f240 33e7 	movw	r3, #999	; 0x3e7
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	2300      	movs	r3, #0
 80026d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026d6:	2100      	movs	r1, #0
 80026d8:	f000 f85c 	bl	8002794 <map>
 80026dc:	4603      	mov	r3, r0
 80026de:	81fb      	strh	r3, [r7, #14]
	  if (dir == -1) {
 80026e0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80026e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e8:	d10f      	bne.n	800270a <set_motor+0xf2>
		HAL_GPIO_WritePin(M2B_L_GPIO_Port, M2B_L_Pin, GPIO_PIN_SET);
 80026ea:	2201      	movs	r2, #1
 80026ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026f0:	4826      	ldr	r0, [pc, #152]	; (800278c <set_motor+0x174>)
 80026f2:	f001 fba8 	bl	8003e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2B_R_GPIO_Port, M2B_R_Pin, GPIO_PIN_RESET);
 80026f6:	2200      	movs	r2, #0
 80026f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80026fc:	4823      	ldr	r0, [pc, #140]	; (800278c <set_motor+0x174>)
 80026fe:	f001 fba2 	bl	8003e46 <HAL_GPIO_WritePin>
		M2B_Channel = pwm;
 8002702:	4a23      	ldr	r2, [pc, #140]	; (8002790 <set_motor+0x178>)
 8002704:	89fb      	ldrh	r3, [r7, #14]
 8002706:	63d3      	str	r3, [r2, #60]	; 0x3c
	  break;
 8002708:	e038      	b.n	800277c <set_motor+0x164>
	  } else if (dir == 1) {
 800270a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d10f      	bne.n	8002732 <set_motor+0x11a>
		HAL_GPIO_WritePin(M2B_L_GPIO_Port, M2B_L_Pin, GPIO_PIN_RESET);
 8002712:	2200      	movs	r2, #0
 8002714:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002718:	481c      	ldr	r0, [pc, #112]	; (800278c <set_motor+0x174>)
 800271a:	f001 fb94 	bl	8003e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2B_R_GPIO_Port, M2B_R_Pin, GPIO_PIN_SET);
 800271e:	2201      	movs	r2, #1
 8002720:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002724:	4819      	ldr	r0, [pc, #100]	; (800278c <set_motor+0x174>)
 8002726:	f001 fb8e 	bl	8003e46 <HAL_GPIO_WritePin>
		M2B_Channel = pwm;
 800272a:	4a19      	ldr	r2, [pc, #100]	; (8002790 <set_motor+0x178>)
 800272c:	89fb      	ldrh	r3, [r7, #14]
 800272e:	63d3      	str	r3, [r2, #60]	; 0x3c
	  break;
 8002730:	e024      	b.n	800277c <set_motor+0x164>
	  } else if (dir == -2) //Freely run
 8002732:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002736:	f113 0f02 	cmn.w	r3, #2
 800273a:	d10f      	bne.n	800275c <set_motor+0x144>
		M2B_Channel = 0;
 800273c:	4b14      	ldr	r3, [pc, #80]	; (8002790 <set_motor+0x178>)
 800273e:	2200      	movs	r2, #0
 8002740:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(M2B_L_GPIO_Port, M2B_L_Pin, GPIO_PIN_RESET);
 8002742:	2200      	movs	r2, #0
 8002744:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002748:	4810      	ldr	r0, [pc, #64]	; (800278c <set_motor+0x174>)
 800274a:	f001 fb7c 	bl	8003e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2B_R_GPIO_Port, M2B_R_Pin, GPIO_PIN_RESET);
 800274e:	2200      	movs	r2, #0
 8002750:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002754:	480d      	ldr	r0, [pc, #52]	; (800278c <set_motor+0x174>)
 8002756:	f001 fb76 	bl	8003e46 <HAL_GPIO_WritePin>
	  break;
 800275a:	e00f      	b.n	800277c <set_motor+0x164>
		HAL_GPIO_WritePin(M2B_L_GPIO_Port, M2B_L_Pin, GPIO_PIN_RESET);
 800275c:	2200      	movs	r2, #0
 800275e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002762:	480a      	ldr	r0, [pc, #40]	; (800278c <set_motor+0x174>)
 8002764:	f001 fb6f 	bl	8003e46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2B_R_GPIO_Port, M2B_R_Pin, GPIO_PIN_RESET);
 8002768:	2200      	movs	r2, #0
 800276a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800276e:	4807      	ldr	r0, [pc, #28]	; (800278c <set_motor+0x174>)
 8002770:	f001 fb69 	bl	8003e46 <HAL_GPIO_WritePin>
		M2B_Channel = 999;
 8002774:	4b06      	ldr	r3, [pc, #24]	; (8002790 <set_motor+0x178>)
 8002776:	f240 32e7 	movw	r2, #999	; 0x3e7
 800277a:	63da      	str	r2, [r3, #60]	; 0x3c
	  break;
 800277c:	bf00      	nop
  }
}
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40010800 	.word	0x40010800
 8002788:	40000400 	.word	0x40000400
 800278c:	40010c00 	.word	0x40010c00
 8002790:	40000800 	.word	0x40000800

08002794 <map>:

s32 map(s32 x, s32 in_min, s32 in_max, s32 out_min, s32 out_max) {
 8002794:	b5b0      	push	{r4, r5, r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
 80027a0:	603b      	str	r3, [r7, #0]
  return (s32) ((x - in_min) * (out_max - out_min) * 1.0 / (in_max - in_min)
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	6a39      	ldr	r1, [r7, #32]
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	1a8a      	subs	r2, r1, r2
 80027ae:	fb02 f303 	mul.w	r3, r2, r3
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fd fe1e 	bl	80003f4 <__aeabi_i2d>
 80027b8:	4604      	mov	r4, r0
 80027ba:	460d      	mov	r5, r1
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fd fe16 	bl	80003f4 <__aeabi_i2d>
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	4620      	mov	r0, r4
 80027ce:	4629      	mov	r1, r5
 80027d0:	f7fd ffa4 	bl	800071c <__aeabi_ddiv>
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	4614      	mov	r4, r2
 80027da:	461d      	mov	r5, r3
	  + out_min);
 80027dc:	6838      	ldr	r0, [r7, #0]
 80027de:	f7fd fe09 	bl	80003f4 <__aeabi_i2d>
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	4620      	mov	r0, r4
 80027e8:	4629      	mov	r1, r5
 80027ea:	f7fd fcb7 	bl	800015c <__adddf3>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
  return (s32) ((x - in_min) * (out_max - out_min) * 1.0 / (in_max - in_min)
 80027f2:	4610      	mov	r0, r2
 80027f4:	4619      	mov	r1, r3
 80027f6:	f7fe f879 	bl	80008ec <__aeabi_d2iz>
 80027fa:	4603      	mov	r3, r0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bdb0      	pop	{r4, r5, r7, pc}

08002804 <reset_state>:

void reset_state() {
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  eint = 0;
 8002808:	4b03      	ldr	r3, [pc, #12]	; (8002818 <reset_state+0x14>)
 800280a:	f04f 0200 	mov.w	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
}
 8002810:	bf00      	nop
 8002812:	46bd      	mov	sp, r7
 8002814:	bc80      	pop	{r7}
 8002816:	4770      	bx	lr
 8002818:	200002e8 	.word	0x200002e8

0800281c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800281c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002820:	b08e      	sub	sp, #56	; 0x38
 8002822:	af00      	add	r7, sp, #0
 8002824:	4603      	mov	r3, r0
 8002826:	81fb      	strh	r3, [r7, #14]
  if (GPIO_Pin == BTN_Mode_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
 8002828:	89fb      	ldrh	r3, [r7, #14]
 800282a:	2b20      	cmp	r3, #32
 800282c:	f040 80ce 	bne.w	80029cc <HAL_GPIO_EXTI_Callback+0x1b0>
  {
	if (HAL_GPIO_ReadPin(BTN_Mode_GPIO_Port, BTN_Mode_Pin) == GPIO_PIN_RESET) {
 8002830:	2120      	movs	r1, #32
 8002832:	48a7      	ldr	r0, [pc, #668]	; (8002ad0 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002834:	f001 faf0 	bl	8003e18 <HAL_GPIO_ReadPin>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d105      	bne.n	800284a <HAL_GPIO_EXTI_Callback+0x2e>
	  BTN_Mode.StartPress = HAL_GetTick(); //ms
 800283e:	f000 fc19 	bl	8003074 <HAL_GetTick>
 8002842:	4603      	mov	r3, r0
 8002844:	4aa3      	ldr	r2, [pc, #652]	; (8002ad4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8002846:	6193      	str	r3, [r2, #24]
 8002848:	e0c0      	b.n	80029cc <HAL_GPIO_EXTI_Callback+0x1b0>
	} else {
	  BTN_Mode.StopPress = HAL_GetTick();
 800284a:	f000 fc13 	bl	8003074 <HAL_GetTick>
 800284e:	4603      	mov	r3, r0
 8002850:	4aa0      	ldr	r2, [pc, #640]	; (8002ad4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8002852:	61d3      	str	r3, [r2, #28]
	  BTN_Mode.timePress = BTN_Mode.StopPress - BTN_Mode.StartPress;
 8002854:	4b9f      	ldr	r3, [pc, #636]	; (8002ad4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8002856:	69da      	ldr	r2, [r3, #28]
 8002858:	4b9e      	ldr	r3, [pc, #632]	; (8002ad4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	4a9d      	ldr	r2, [pc, #628]	; (8002ad4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8002860:	6153      	str	r3, [r2, #20]
	  if (BTN_Mode.timePress > DEBOUND_TIME
 8002862:	4b9c      	ldr	r3, [pc, #624]	; (8002ad4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	2b32      	cmp	r3, #50	; 0x32
 8002868:	d95e      	bls.n	8002928 <HAL_GPIO_EXTI_Callback+0x10c>
		  && BTN_Mode.timePress <= SINGLE_CLICK_TIME) {
 800286a:	4b9a      	ldr	r3, [pc, #616]	; (8002ad4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002872:	d859      	bhi.n	8002928 <HAL_GPIO_EXTI_Callback+0x10c>
		if (state == 1 || state == 2) {
 8002874:	4b98      	ldr	r3, [pc, #608]	; (8002ad8 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d004      	beq.n	8002886 <HAL_GPIO_EXTI_Callback+0x6a>
 800287c:	4b96      	ldr	r3, [pc, #600]	; (8002ad8 <HAL_GPIO_EXTI_Callback+0x2bc>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b02      	cmp	r3, #2
 8002882:	f040 80a2 	bne.w	80029ca <HAL_GPIO_EXTI_Callback+0x1ae>
		  state = state + 1;
 8002886:	4b94      	ldr	r3, [pc, #592]	; (8002ad8 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	3301      	adds	r3, #1
 800288c:	b2da      	uxtb	r2, r3
 800288e:	4b92      	ldr	r3, [pc, #584]	; (8002ad8 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8002890:	701a      	strb	r2, [r3, #0]
		  if (state > 2) {
 8002892:	4b91      	ldr	r3, [pc, #580]	; (8002ad8 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b02      	cmp	r3, #2
 8002898:	f240 8097 	bls.w	80029ca <HAL_GPIO_EXTI_Callback+0x1ae>
			switch (menuCounter) {
 800289c:	4b8f      	ldr	r3, [pc, #572]	; (8002adc <HAL_GPIO_EXTI_Callback+0x2c0>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b03      	cmp	r3, #3
 80028a2:	d026      	beq.n	80028f2 <HAL_GPIO_EXTI_Callback+0xd6>
 80028a4:	2b03      	cmp	r3, #3
 80028a6:	dc34      	bgt.n	8002912 <HAL_GPIO_EXTI_Callback+0xf6>
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d002      	beq.n	80028b2 <HAL_GPIO_EXTI_Callback+0x96>
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d010      	beq.n	80028d2 <HAL_GPIO_EXTI_Callback+0xb6>

			  case 3:
				menu3_selected = !menu3_selected;
				break;
			  default:
				break;
 80028b0:	e02f      	b.n	8002912 <HAL_GPIO_EXTI_Callback+0xf6>
				menu1_selected = !menu1_selected; //we change the status of the variable to the opposite
 80028b2:	4b8b      	ldr	r3, [pc, #556]	; (8002ae0 <HAL_GPIO_EXTI_Callback+0x2c4>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	bf14      	ite	ne
 80028ba:	2301      	movne	r3, #1
 80028bc:	2300      	moveq	r3, #0
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	f083 0301 	eor.w	r3, r3, #1
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	4b84      	ldr	r3, [pc, #528]	; (8002ae0 <HAL_GPIO_EXTI_Callback+0x2c4>)
 80028ce:	701a      	strb	r2, [r3, #0]
				break;
 80028d0:	e020      	b.n	8002914 <HAL_GPIO_EXTI_Callback+0xf8>
				menu2_selected = !menu2_selected;
 80028d2:	4b84      	ldr	r3, [pc, #528]	; (8002ae4 <HAL_GPIO_EXTI_Callback+0x2c8>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	bf14      	ite	ne
 80028da:	2301      	movne	r3, #1
 80028dc:	2300      	moveq	r3, #0
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	f083 0301 	eor.w	r3, r3, #1
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	4b7d      	ldr	r3, [pc, #500]	; (8002ae4 <HAL_GPIO_EXTI_Callback+0x2c8>)
 80028ee:	701a      	strb	r2, [r3, #0]
				break;
 80028f0:	e010      	b.n	8002914 <HAL_GPIO_EXTI_Callback+0xf8>
				menu3_selected = !menu3_selected;
 80028f2:	4b7d      	ldr	r3, [pc, #500]	; (8002ae8 <HAL_GPIO_EXTI_Callback+0x2cc>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	bf14      	ite	ne
 80028fa:	2301      	movne	r3, #1
 80028fc:	2300      	moveq	r3, #0
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	f083 0301 	eor.w	r3, r3, #1
 8002904:	b2db      	uxtb	r3, r3
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	b2da      	uxtb	r2, r3
 800290c:	4b76      	ldr	r3, [pc, #472]	; (8002ae8 <HAL_GPIO_EXTI_Callback+0x2cc>)
 800290e:	701a      	strb	r2, [r3, #0]
				break;
 8002910:	e000      	b.n	8002914 <HAL_GPIO_EXTI_Callback+0xf8>
				break;
 8002912:	bf00      	nop
			}
			refreshSelection = true;
 8002914:	4b75      	ldr	r3, [pc, #468]	; (8002aec <HAL_GPIO_EXTI_Callback+0x2d0>)
 8002916:	2201      	movs	r2, #1
 8002918:	701a      	strb	r2, [r3, #0]
			refreshLCD = true;
 800291a:	4b75      	ldr	r3, [pc, #468]	; (8002af0 <HAL_GPIO_EXTI_Callback+0x2d4>)
 800291c:	2201      	movs	r2, #1
 800291e:	701a      	strb	r2, [r3, #0]
			state = 2;
 8002920:	4b6d      	ldr	r3, [pc, #436]	; (8002ad8 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8002922:	2202      	movs	r2, #2
 8002924:	701a      	strb	r2, [r3, #0]
		if (state == 1 || state == 2) {
 8002926:	e050      	b.n	80029ca <HAL_GPIO_EXTI_Callback+0x1ae>
		  }
		}
	  } else if (BTN_Mode.timePress > SINGLE_CLICK_TIME) {
 8002928:	4b6a      	ldr	r3, [pc, #424]	; (8002ad4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002930:	d94c      	bls.n	80029cc <HAL_GPIO_EXTI_Callback+0x1b0>
		if (state == 2) {
 8002932:	4b69      	ldr	r3, [pc, #420]	; (8002ad8 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b02      	cmp	r3, #2
 8002938:	d13a      	bne.n	80029b0 <HAL_GPIO_EXTI_Callback+0x194>
		  state = 1;
 800293a:	4b67      	ldr	r3, [pc, #412]	; (8002ad8 <HAL_GPIO_EXTI_Callback+0x2bc>)
 800293c:	2201      	movs	r2, #1
 800293e:	701a      	strb	r2, [r3, #0]
		  HAL_FLASH_Unlock();
 8002940:	f000 ff56 	bl	80037f0 <HAL_FLASH_Unlock>
		  FLASH_EraseInitTypeDef EraseInit;
		  EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8002944:	2300      	movs	r3, #0
 8002946:	62bb      	str	r3, [r7, #40]	; 0x28
		  EraseInit.PageAddress = FLASH_USER_START_ADDR;
 8002948:	4b6a      	ldr	r3, [pc, #424]	; (8002af4 <HAL_GPIO_EXTI_Callback+0x2d8>)
 800294a:	633b      	str	r3, [r7, #48]	; 0x30
		  EraseInit.NbPages = (FLASH_USER_END_ADDR - FLASH_USER_START_ADDR )
 800294c:	2301      	movs	r3, #1
 800294e:	637b      	str	r3, [r7, #52]	; 0x34
			  / FLASH_PAGE_SIZE;
		  uint32_t PageError = 0;
 8002950:	2300      	movs	r3, #0
 8002952:	627b      	str	r3, [r7, #36]	; 0x24
		  HAL_FLASHEx_Erase(&EraseInit, &PageError);
 8002954:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002958:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800295c:	4611      	mov	r1, r2
 800295e:	4618      	mov	r0, r3
 8002960:	f001 f82e 	bl	80039c0 <HAL_FLASHEx_Erase>
		  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_USER_START_ADDR,
 8002964:	4b64      	ldr	r3, [pc, #400]	; (8002af8 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f7fe fb31 	bl	8000fd0 <__aeabi_f2ulz>
 800296e:	4602      	mov	r2, r0
 8002970:	460b      	mov	r3, r1
 8002972:	4960      	ldr	r1, [pc, #384]	; (8002af4 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8002974:	2002      	movs	r0, #2
 8002976:	f000 fecb 	bl	8003710 <HAL_FLASH_Program>
		  menu1_value);
		  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_USER_START_ADDR + 4,
 800297a:	4b60      	ldr	r3, [pc, #384]	; (8002afc <HAL_GPIO_EXTI_Callback+0x2e0>)
 800297c:	f993 3000 	ldrsb.w	r3, [r3]
 8002980:	b25b      	sxtb	r3, r3
 8002982:	17da      	asrs	r2, r3, #31
 8002984:	603b      	str	r3, [r7, #0]
 8002986:	607a      	str	r2, [r7, #4]
 8002988:	e9d7 2300 	ldrd	r2, r3, [r7]
 800298c:	495c      	ldr	r1, [pc, #368]	; (8002b00 <HAL_GPIO_EXTI_Callback+0x2e4>)
 800298e:	2002      	movs	r0, #2
 8002990:	f000 febe 	bl	8003710 <HAL_FLASH_Program>
		  menu2_value);
		  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_USER_START_ADDR + 8,
 8002994:	4b5b      	ldr	r3, [pc, #364]	; (8002b04 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	17da      	asrs	r2, r3, #31
 800299a:	469a      	mov	sl, r3
 800299c:	4693      	mov	fp, r2
 800299e:	4652      	mov	r2, sl
 80029a0:	465b      	mov	r3, fp
 80029a2:	4959      	ldr	r1, [pc, #356]	; (8002b08 <HAL_GPIO_EXTI_Callback+0x2ec>)
 80029a4:	2002      	movs	r0, #2
 80029a6:	f000 feb3 	bl	8003710 <HAL_FLASH_Program>
		  menu3_value);
		  HAL_FLASH_Lock();
 80029aa:	f000 ff47 	bl	800383c <HAL_FLASH_Lock>
 80029ae:	e00d      	b.n	80029cc <HAL_GPIO_EXTI_Callback+0x1b0>
		} else if (state >= 4) {
 80029b0:	4b49      	ldr	r3, [pc, #292]	; (8002ad8 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	d909      	bls.n	80029cc <HAL_GPIO_EXTI_Callback+0x1b0>
		  STOP_cmd = true;
 80029b8:	4b54      	ldr	r3, [pc, #336]	; (8002b0c <HAL_GPIO_EXTI_Callback+0x2f0>)
 80029ba:	2201      	movs	r2, #1
 80029bc:	701a      	strb	r2, [r3, #0]
		  STOP_from = HAL_GetTick();
 80029be:	f000 fb59 	bl	8003074 <HAL_GetTick>
 80029c2:	4603      	mov	r3, r0
 80029c4:	4a52      	ldr	r2, [pc, #328]	; (8002b10 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80029c6:	6013      	str	r3, [r2, #0]
 80029c8:	e000      	b.n	80029cc <HAL_GPIO_EXTI_Callback+0x1b0>
		if (state == 1 || state == 2) {
 80029ca:	bf00      	nop
		}
	  }
	}
  }

  if (GPIO_Pin == BTN_Start_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
 80029cc:	89fb      	ldrh	r3, [r7, #14]
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d165      	bne.n	8002a9e <HAL_GPIO_EXTI_Callback+0x282>
  {
	if (HAL_GPIO_ReadPin(BTN_Mode_GPIO_Port, BTN_Start_Pin) == GPIO_PIN_RESET) {
 80029d2:	2108      	movs	r1, #8
 80029d4:	483e      	ldr	r0, [pc, #248]	; (8002ad0 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80029d6:	f001 fa1f 	bl	8003e18 <HAL_GPIO_ReadPin>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d15e      	bne.n	8002a9e <HAL_GPIO_EXTI_Callback+0x282>
	  if (state == 1) {
 80029e0:	4b3d      	ldr	r3, [pc, #244]	; (8002ad8 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d11c      	bne.n	8002a22 <HAL_GPIO_EXTI_Callback+0x206>
		state = 3;
 80029e8:	4b3b      	ldr	r3, [pc, #236]	; (8002ad8 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80029ea:	2203      	movs	r2, #3
 80029ec:	701a      	strb	r2, [r3, #0]
		reset_state();
 80029ee:	f7ff ff09 	bl	8002804 <reset_state>

		if (mDir == 1)
 80029f2:	4b42      	ldr	r3, [pc, #264]	; (8002afc <HAL_GPIO_EXTI_Callback+0x2e0>)
 80029f4:	f993 3000 	ldrsb.w	r3, [r3]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d108      	bne.n	8002a0e <HAL_GPIO_EXTI_Callback+0x1f2>
		  set_motor(1, 1, pwm);
 80029fc:	4b45      	ldr	r3, [pc, #276]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x2f8>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	461a      	mov	r2, r3
 8002a04:	2101      	movs	r1, #1
 8002a06:	2001      	movs	r0, #1
 8002a08:	f7ff fe06 	bl	8002618 <set_motor>
 8002a0c:	e047      	b.n	8002a9e <HAL_GPIO_EXTI_Callback+0x282>
		else
		  set_motor(1, -1, pwm);
 8002a0e:	4b41      	ldr	r3, [pc, #260]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	461a      	mov	r2, r3
 8002a16:	f04f 31ff 	mov.w	r1, #4294967295
 8002a1a:	2001      	movs	r0, #1
 8002a1c:	f7ff fdfc 	bl	8002618 <set_motor>
 8002a20:	e03d      	b.n	8002a9e <HAL_GPIO_EXTI_Callback+0x282>
//		vref = mSpeed;
//		FLAG_run = true;
	  } else if (state == 2) {
 8002a22:	4b2d      	ldr	r3, [pc, #180]	; (8002ad8 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d139      	bne.n	8002a9e <HAL_GPIO_EXTI_Callback+0x282>
		state = 1;
 8002a2a:	4b2b      	ldr	r3, [pc, #172]	; (8002ad8 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	701a      	strb	r2, [r3, #0]
		HAL_FLASH_Unlock();
 8002a30:	f000 fede 	bl	80037f0 <HAL_FLASH_Unlock>
		FLASH_EraseInitTypeDef EraseInit;
		EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8002a34:	2300      	movs	r3, #0
 8002a36:	617b      	str	r3, [r7, #20]
		EraseInit.PageAddress = FLASH_USER_START_ADDR;
 8002a38:	4b2e      	ldr	r3, [pc, #184]	; (8002af4 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8002a3a:	61fb      	str	r3, [r7, #28]
		EraseInit.NbPages = (FLASH_USER_END_ADDR - FLASH_USER_START_ADDR )
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	623b      	str	r3, [r7, #32]
			/ FLASH_PAGE_SIZE;
		uint32_t PageError = 0;
 8002a40:	2300      	movs	r3, #0
 8002a42:	613b      	str	r3, [r7, #16]
		HAL_FLASHEx_Erase(&EraseInit, &PageError);
 8002a44:	f107 0210 	add.w	r2, r7, #16
 8002a48:	f107 0314 	add.w	r3, r7, #20
 8002a4c:	4611      	mov	r1, r2
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 ffb6 	bl	80039c0 <HAL_FLASHEx_Erase>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_USER_START_ADDR,
 8002a54:	4b28      	ldr	r3, [pc, #160]	; (8002af8 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fe fab9 	bl	8000fd0 <__aeabi_f2ulz>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	4924      	ldr	r1, [pc, #144]	; (8002af4 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8002a64:	2002      	movs	r0, #2
 8002a66:	f000 fe53 	bl	8003710 <HAL_FLASH_Program>
		menu1_value);
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_USER_START_ADDR + 4,
 8002a6a:	4b24      	ldr	r3, [pc, #144]	; (8002afc <HAL_GPIO_EXTI_Callback+0x2e0>)
 8002a6c:	f993 3000 	ldrsb.w	r3, [r3]
 8002a70:	b25b      	sxtb	r3, r3
 8002a72:	17da      	asrs	r2, r3, #31
 8002a74:	4698      	mov	r8, r3
 8002a76:	4691      	mov	r9, r2
 8002a78:	4642      	mov	r2, r8
 8002a7a:	464b      	mov	r3, r9
 8002a7c:	4920      	ldr	r1, [pc, #128]	; (8002b00 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8002a7e:	2002      	movs	r0, #2
 8002a80:	f000 fe46 	bl	8003710 <HAL_FLASH_Program>
		menu2_value);
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_USER_START_ADDR + 8,
 8002a84:	4b1f      	ldr	r3, [pc, #124]	; (8002b04 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	17da      	asrs	r2, r3, #31
 8002a8a:	461c      	mov	r4, r3
 8002a8c:	4615      	mov	r5, r2
 8002a8e:	4622      	mov	r2, r4
 8002a90:	462b      	mov	r3, r5
 8002a92:	491d      	ldr	r1, [pc, #116]	; (8002b08 <HAL_GPIO_EXTI_Callback+0x2ec>)
 8002a94:	2002      	movs	r0, #2
 8002a96:	f000 fe3b 	bl	8003710 <HAL_FLASH_Program>
		menu3_value);
		HAL_FLASH_Lock();
 8002a9a:	f000 fecf 	bl	800383c <HAL_FLASH_Lock>
	  }
	}
  }
  if (GPIO_Pin == BTN_Stop_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
 8002a9e:	89fb      	ldrh	r3, [r7, #14]
 8002aa0:	2b10      	cmp	r3, #16
 8002aa2:	d143      	bne.n	8002b2c <HAL_GPIO_EXTI_Callback+0x310>
  {
	if (HAL_GPIO_ReadPin(BTN_Mode_GPIO_Port, BTN_Stop_Pin) == GPIO_PIN_RESET) {
 8002aa4:	2110      	movs	r1, #16
 8002aa6:	480a      	ldr	r0, [pc, #40]	; (8002ad0 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002aa8:	f001 f9b6 	bl	8003e18 <HAL_GPIO_ReadPin>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d13c      	bne.n	8002b2c <HAL_GPIO_EXTI_Callback+0x310>
	  if (state == 3) {
 8002ab2:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	2b03      	cmp	r3, #3
 8002ab8:	d12e      	bne.n	8002b18 <HAL_GPIO_EXTI_Callback+0x2fc>
		set_motor(1, -2, 0);
 8002aba:	2200      	movs	r2, #0
 8002abc:	f06f 0101 	mvn.w	r1, #1
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	f7ff fda9 	bl	8002618 <set_motor>
		state = 4;
 8002ac6:	4b04      	ldr	r3, [pc, #16]	; (8002ad8 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8002ac8:	2204      	movs	r2, #4
 8002aca:	701a      	strb	r2, [r3, #0]
		n_loop = 0;
		state = 1;
	  }
	}
  }
}
 8002acc:	e02e      	b.n	8002b2c <HAL_GPIO_EXTI_Callback+0x310>
 8002ace:	bf00      	nop
 8002ad0:	40010c00 	.word	0x40010c00
 8002ad4:	200002a0 	.word	0x200002a0
 8002ad8:	2000000c 	.word	0x2000000c
 8002adc:	2000000e 	.word	0x2000000e
 8002ae0:	200002c6 	.word	0x200002c6
 8002ae4:	200002c7 	.word	0x200002c7
 8002ae8:	200002c8 	.word	0x200002c8
 8002aec:	200002ca 	.word	0x200002ca
 8002af0:	2000000f 	.word	0x2000000f
 8002af4:	0801f810 	.word	0x0801f810
 8002af8:	200002c0 	.word	0x200002c0
 8002afc:	20000004 	.word	0x20000004
 8002b00:	0801f814 	.word	0x0801f814
 8002b04:	20000008 	.word	0x20000008
 8002b08:	0801f818 	.word	0x0801f818
 8002b0c:	200002d0 	.word	0x200002d0
 8002b10:	200002cc 	.word	0x200002cc
 8002b14:	2000001c 	.word	0x2000001c
	  } else if (state == 4) {
 8002b18:	4b07      	ldr	r3, [pc, #28]	; (8002b38 <HAL_GPIO_EXTI_Callback+0x31c>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d105      	bne.n	8002b2c <HAL_GPIO_EXTI_Callback+0x310>
		n_loop = 0;
 8002b20:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <HAL_GPIO_EXTI_Callback+0x320>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	801a      	strh	r2, [r3, #0]
		state = 1;
 8002b26:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <HAL_GPIO_EXTI_Callback+0x31c>)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	701a      	strb	r2, [r3, #0]
}
 8002b2c:	bf00      	nop
 8002b2e:	3738      	adds	r7, #56	; 0x38
 8002b30:	46bd      	mov	sp, r7
 8002b32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b36:	bf00      	nop
 8002b38:	2000000c 	.word	0x2000000c
 8002b3c:	200002c4 	.word	0x200002c4

08002b40 <check_ecd>:
	last_flash = now;
  }
}

u32 preEcd = 0;
void check_ecd() {
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
  if (state == 2) {
 8002b46:	4b73      	ldr	r3, [pc, #460]	; (8002d14 <check_ecd+0x1d4>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	f040 80d7 	bne.w	8002cfe <check_ecd+0x1be>
	if (preEcd != TIM2_count) {
 8002b50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b56:	4b70      	ldr	r3, [pc, #448]	; (8002d18 <check_ecd+0x1d8>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	f000 80d5 	beq.w	8002d0a <check_ecd+0x1ca>
	  s32 delta = TIM2_count - preEcd;
 8002b60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b66:	4b6c      	ldr	r3, [pc, #432]	; (8002d18 <check_ecd+0x1d8>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	607b      	str	r3, [r7, #4]
	  if (abs(delta) > ecdFilter) {
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	bfb8      	it	lt
 8002b74:	425b      	neglt	r3, r3
 8002b76:	2b06      	cmp	r3, #6
 8002b78:	f340 80c7 	ble.w	8002d0a <check_ecd+0x1ca>
		if (menu1_selected == true) {
 8002b7c:	4b67      	ldr	r3, [pc, #412]	; (8002d1c <check_ecd+0x1dc>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d036      	beq.n	8002bf2 <check_ecd+0xb2>
		  if (delta > 0)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	dd0b      	ble.n	8002ba2 <check_ecd+0x62>
			menu1_value++;
 8002b8a:	4b65      	ldr	r3, [pc, #404]	; (8002d20 <check_ecd+0x1e0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7fd ff28 	bl	80009e8 <__addsf3>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	4b60      	ldr	r3, [pc, #384]	; (8002d20 <check_ecd+0x1e0>)
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	e00d      	b.n	8002bbe <check_ecd+0x7e>
		  else if (delta < 0)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	da0a      	bge.n	8002bbe <check_ecd+0x7e>
			menu1_value--;
 8002ba8:	4b5d      	ldr	r3, [pc, #372]	; (8002d20 <check_ecd+0x1e0>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7fd ff17 	bl	80009e4 <__aeabi_fsub>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4b59      	ldr	r3, [pc, #356]	; (8002d20 <check_ecd+0x1e0>)
 8002bbc:	601a      	str	r2, [r3, #0]

		  if (menu1_value > maxSpeed) //we do not go above 100
 8002bbe:	4b58      	ldr	r3, [pc, #352]	; (8002d20 <check_ecd+0x1e0>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4958      	ldr	r1, [pc, #352]	; (8002d24 <check_ecd+0x1e4>)
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7fe f9d3 	bl	8000f70 <__aeabi_fcmpgt>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d002      	beq.n	8002bd6 <check_ecd+0x96>
			menu1_value = maxSpeed;
 8002bd0:	4b53      	ldr	r3, [pc, #332]	; (8002d20 <check_ecd+0x1e0>)
 8002bd2:	4a54      	ldr	r2, [pc, #336]	; (8002d24 <check_ecd+0x1e4>)
 8002bd4:	601a      	str	r2, [r3, #0]
		  if (menu1_value < minSpeed)
 8002bd6:	4b52      	ldr	r3, [pc, #328]	; (8002d20 <check_ecd+0x1e0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4953      	ldr	r1, [pc, #332]	; (8002d28 <check_ecd+0x1e8>)
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7fe f9a9 	bl	8000f34 <__aeabi_fcmplt>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 8081 	beq.w	8002cec <check_ecd+0x1ac>
			menu1_value = minSpeed;
 8002bea:	4b4d      	ldr	r3, [pc, #308]	; (8002d20 <check_ecd+0x1e0>)
 8002bec:	4a4e      	ldr	r2, [pc, #312]	; (8002d28 <check_ecd+0x1e8>)
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	e07c      	b.n	8002cec <check_ecd+0x1ac>
		} else if (menu2_selected == true) {
 8002bf2:	4b4e      	ldr	r3, [pc, #312]	; (8002d2c <check_ecd+0x1ec>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d029      	beq.n	8002c4e <check_ecd+0x10e>
		  if (delta > 0)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	dd09      	ble.n	8002c14 <check_ecd+0xd4>
			menu2_value++;
 8002c00:	4b4b      	ldr	r3, [pc, #300]	; (8002d30 <check_ecd+0x1f0>)
 8002c02:	f993 3000 	ldrsb.w	r3, [r3]
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	3301      	adds	r3, #1
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	b25a      	sxtb	r2, r3
 8002c0e:	4b48      	ldr	r3, [pc, #288]	; (8002d30 <check_ecd+0x1f0>)
 8002c10:	701a      	strb	r2, [r3, #0]
 8002c12:	e00b      	b.n	8002c2c <check_ecd+0xec>
		  else if (delta < 0)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	da08      	bge.n	8002c2c <check_ecd+0xec>
			menu2_value--;
 8002c1a:	4b45      	ldr	r3, [pc, #276]	; (8002d30 <check_ecd+0x1f0>)
 8002c1c:	f993 3000 	ldrsb.w	r3, [r3]
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	3b01      	subs	r3, #1
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	b25a      	sxtb	r2, r3
 8002c28:	4b41      	ldr	r3, [pc, #260]	; (8002d30 <check_ecd+0x1f0>)
 8002c2a:	701a      	strb	r2, [r3, #0]

		  if (menu2_value > 1)
 8002c2c:	4b40      	ldr	r3, [pc, #256]	; (8002d30 <check_ecd+0x1f0>)
 8002c2e:	f993 3000 	ldrsb.w	r3, [r3]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	dd02      	ble.n	8002c3c <check_ecd+0xfc>
			menu2_value = 1;
 8002c36:	4b3e      	ldr	r3, [pc, #248]	; (8002d30 <check_ecd+0x1f0>)
 8002c38:	2201      	movs	r2, #1
 8002c3a:	701a      	strb	r2, [r3, #0]
		  if (menu2_value < 0)
 8002c3c:	4b3c      	ldr	r3, [pc, #240]	; (8002d30 <check_ecd+0x1f0>)
 8002c3e:	f993 3000 	ldrsb.w	r3, [r3]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	da52      	bge.n	8002cec <check_ecd+0x1ac>
			menu2_value = 0;
 8002c46:	4b3a      	ldr	r3, [pc, #232]	; (8002d30 <check_ecd+0x1f0>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	701a      	strb	r2, [r3, #0]
 8002c4c:	e04e      	b.n	8002cec <check_ecd+0x1ac>
		} else if (menu3_selected == true) {
 8002c4e:	4b39      	ldr	r3, [pc, #228]	; (8002d34 <check_ecd+0x1f4>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d021      	beq.n	8002c9a <check_ecd+0x15a>
		  if (delta > 0)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	dd05      	ble.n	8002c68 <check_ecd+0x128>
			menu3_value++;
 8002c5c:	4b36      	ldr	r3, [pc, #216]	; (8002d38 <check_ecd+0x1f8>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	3301      	adds	r3, #1
 8002c62:	4a35      	ldr	r2, [pc, #212]	; (8002d38 <check_ecd+0x1f8>)
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	e007      	b.n	8002c78 <check_ecd+0x138>
		  else if (delta < 0)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	da04      	bge.n	8002c78 <check_ecd+0x138>
			menu3_value--;
 8002c6e:	4b32      	ldr	r3, [pc, #200]	; (8002d38 <check_ecd+0x1f8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	3b01      	subs	r3, #1
 8002c74:	4a30      	ldr	r2, [pc, #192]	; (8002d38 <check_ecd+0x1f8>)
 8002c76:	6013      	str	r3, [r2, #0]

		  if (menu3_value > 999)
 8002c78:	4b2f      	ldr	r3, [pc, #188]	; (8002d38 <check_ecd+0x1f8>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c80:	db03      	blt.n	8002c8a <check_ecd+0x14a>
			menu3_value = 999;
 8002c82:	4b2d      	ldr	r3, [pc, #180]	; (8002d38 <check_ecd+0x1f8>)
 8002c84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c88:	601a      	str	r2, [r3, #0]
		  if (menu3_value < 10)
 8002c8a:	4b2b      	ldr	r3, [pc, #172]	; (8002d38 <check_ecd+0x1f8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2b09      	cmp	r3, #9
 8002c90:	dc2c      	bgt.n	8002cec <check_ecd+0x1ac>
			menu3_value = 10; //rpm
 8002c92:	4b29      	ldr	r3, [pc, #164]	; (8002d38 <check_ecd+0x1f8>)
 8002c94:	220a      	movs	r2, #10
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	e028      	b.n	8002cec <check_ecd+0x1ac>

		} else if (state == 2) {
 8002c9a:	4b1e      	ldr	r3, [pc, #120]	; (8002d14 <check_ecd+0x1d4>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d124      	bne.n	8002cec <check_ecd+0x1ac>
		  if (delta > 0)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	dd06      	ble.n	8002cb6 <check_ecd+0x176>
			menuCounter++;
 8002ca8:	4b24      	ldr	r3, [pc, #144]	; (8002d3c <check_ecd+0x1fc>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	3301      	adds	r3, #1
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	4b22      	ldr	r3, [pc, #136]	; (8002d3c <check_ecd+0x1fc>)
 8002cb2:	701a      	strb	r2, [r3, #0]
 8002cb4:	e00c      	b.n	8002cd0 <check_ecd+0x190>
		  else if (delta < 0)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	da09      	bge.n	8002cd0 <check_ecd+0x190>
			if (menuCounter > 0)
 8002cbc:	4b1f      	ldr	r3, [pc, #124]	; (8002d3c <check_ecd+0x1fc>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d005      	beq.n	8002cd0 <check_ecd+0x190>
			  menuCounter--;
 8002cc4:	4b1d      	ldr	r3, [pc, #116]	; (8002d3c <check_ecd+0x1fc>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	4b1b      	ldr	r3, [pc, #108]	; (8002d3c <check_ecd+0x1fc>)
 8002cce:	701a      	strb	r2, [r3, #0]

		  if (menuCounter > 3)
 8002cd0:	4b1a      	ldr	r3, [pc, #104]	; (8002d3c <check_ecd+0x1fc>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	2b03      	cmp	r3, #3
 8002cd6:	d902      	bls.n	8002cde <check_ecd+0x19e>
			menuCounter = 3;
 8002cd8:	4b18      	ldr	r3, [pc, #96]	; (8002d3c <check_ecd+0x1fc>)
 8002cda:	2203      	movs	r2, #3
 8002cdc:	701a      	strb	r2, [r3, #0]
		  if (menuCounter < 1)
 8002cde:	4b17      	ldr	r3, [pc, #92]	; (8002d3c <check_ecd+0x1fc>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d102      	bne.n	8002cec <check_ecd+0x1ac>
			menuCounter = 1; //rpm
 8002ce6:	4b15      	ldr	r3, [pc, #84]	; (8002d3c <check_ecd+0x1fc>)
 8002ce8:	2201      	movs	r2, #1
 8002cea:	701a      	strb	r2, [r3, #0]

		}
		refreshLCD = true;
 8002cec:	4b14      	ldr	r3, [pc, #80]	; (8002d40 <check_ecd+0x200>)
 8002cee:	2201      	movs	r2, #1
 8002cf0:	701a      	strb	r2, [r3, #0]
		preEcd = TIM2_count;
 8002cf2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	4a07      	ldr	r2, [pc, #28]	; (8002d18 <check_ecd+0x1d8>)
 8002cfa:	6013      	str	r3, [r2, #0]
	  }
	}
  } else {
	preEcd = TIM2_count;
  }
  return;
 8002cfc:	e005      	b.n	8002d0a <check_ecd+0x1ca>
	preEcd = TIM2_count;
 8002cfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	4a04      	ldr	r2, [pc, #16]	; (8002d18 <check_ecd+0x1d8>)
 8002d06:	6013      	str	r3, [r2, #0]
  return;
 8002d08:	bf00      	nop
 8002d0a:	bf00      	nop
}
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	2000000c 	.word	0x2000000c
 8002d18:	20000300 	.word	0x20000300
 8002d1c:	200002c6 	.word	0x200002c6
 8002d20:	200002c0 	.word	0x200002c0
 8002d24:	428c0000 	.word	0x428c0000
 8002d28:	41f00000 	.word	0x41f00000
 8002d2c:	200002c7 	.word	0x200002c7
 8002d30:	20000004 	.word	0x20000004
 8002d34:	200002c8 	.word	0x200002c8
 8002d38:	20000008 	.word	0x20000008
 8002d3c:	2000000e 	.word	0x2000000e
 8002d40:	2000000f 	.word	0x2000000f
 8002d44:	00000000 	.word	0x00000000

08002d48 <HAL_TIM_PeriodElapsedCallback>:

u32 timer_count = 0;
float u = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002d48:	b5b0      	push	{r4, r5, r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4) // 1ms
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a74      	ldr	r2, [pc, #464]	; (8002f28 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	f040 80dd 	bne.w	8002f16 <HAL_TIM_PeriodElapsedCallback+0x1ce>
  {
	timer_count++;
 8002d5c:	4b73      	ldr	r3, [pc, #460]	; (8002f2c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	3301      	adds	r3, #1
 8002d62:	4a72      	ldr	r2, [pc, #456]	; (8002f2c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8002d64:	6013      	str	r3, [r2, #0]
	if (timer_count >= timeInterval) // 20ms 50Hz
 8002d66:	4b71      	ldr	r3, [pc, #452]	; (8002f2c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	4b71      	ldr	r3, [pc, #452]	; (8002f30 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	f0c0 80d1 	bcc.w	8002f16 <HAL_TIM_PeriodElapsedCallback+0x1ce>
		{
	  curPos = TIM1_count;
 8002d74:	4b6f      	ldr	r3, [pc, #444]	; (8002f34 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	4a6f      	ldr	r2, [pc, #444]	; (8002f38 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002d7a:	6013      	str	r3, [r2, #0]
	  s32 deltaPos = curPos - prePos;
 8002d7c:	4b6e      	ldr	r3, [pc, #440]	; (8002f38 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	4b6e      	ldr	r3, [pc, #440]	; (8002f3c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	60fb      	str	r3, [r7, #12]
	  prePos = curPos;
 8002d88:	4b6b      	ldr	r3, [pc, #428]	; (8002f38 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a6b      	ldr	r2, [pc, #428]	; (8002f3c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8002d8e:	6013      	str	r3, [r2, #0]
	  curSpeed = 60 * (fabs(deltaPos) / (totalPulse)) / (timeInterval / 1000.0);
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f7fd fb2f 	bl	80003f4 <__aeabi_i2d>
 8002d96:	4602      	mov	r2, r0
 8002d98:	460b      	mov	r3, r1
 8002d9a:	4614      	mov	r4, r2
 8002d9c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002da0:	a35f      	add	r3, pc, #380	; (adr r3, 8002f20 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da6:	4620      	mov	r0, r4
 8002da8:	4629      	mov	r1, r5
 8002daa:	f7fd fcb7 	bl	800071c <__aeabi_ddiv>
 8002dae:	4602      	mov	r2, r0
 8002db0:	460b      	mov	r3, r1
 8002db2:	4610      	mov	r0, r2
 8002db4:	4619      	mov	r1, r3
 8002db6:	f04f 0200 	mov.w	r2, #0
 8002dba:	4b61      	ldr	r3, [pc, #388]	; (8002f40 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002dbc:	f7fd fb84 	bl	80004c8 <__aeabi_dmul>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	4614      	mov	r4, r2
 8002dc6:	461d      	mov	r5, r3
 8002dc8:	4b59      	ldr	r3, [pc, #356]	; (8002f30 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fd fb01 	bl	80003d4 <__aeabi_ui2d>
 8002dd2:	f04f 0200 	mov.w	r2, #0
 8002dd6:	4b5b      	ldr	r3, [pc, #364]	; (8002f44 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8002dd8:	f7fd fca0 	bl	800071c <__aeabi_ddiv>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	4620      	mov	r0, r4
 8002de2:	4629      	mov	r1, r5
 8002de4:	f7fd fc9a 	bl	800071c <__aeabi_ddiv>
 8002de8:	4602      	mov	r2, r0
 8002dea:	460b      	mov	r3, r1
 8002dec:	4610      	mov	r0, r2
 8002dee:	4619      	mov	r1, r3
 8002df0:	f7fd fda4 	bl	800093c <__aeabi_d2f>
 8002df4:	4603      	mov	r3, r0
 8002df6:	4a54      	ldr	r2, [pc, #336]	; (8002f48 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002df8:	6013      	str	r3, [r2, #0]
	  e = curSpeed - vref;
 8002dfa:	4b53      	ldr	r3, [pc, #332]	; (8002f48 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a53      	ldr	r2, [pc, #332]	; (8002f4c <HAL_TIM_PeriodElapsedCallback+0x204>)
 8002e00:	6812      	ldr	r2, [r2, #0]
 8002e02:	4611      	mov	r1, r2
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7fd fded 	bl	80009e4 <__aeabi_fsub>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	4b50      	ldr	r3, [pc, #320]	; (8002f50 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002e10:	601a      	str	r2, [r3, #0]
	  eint = eint + e * timeInterval;
 8002e12:	4b47      	ldr	r3, [pc, #284]	; (8002f30 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fd fe96 	bl	8000b48 <__aeabi_ui2f>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	4b4c      	ldr	r3, [pc, #304]	; (8002f50 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4619      	mov	r1, r3
 8002e24:	4610      	mov	r0, r2
 8002e26:	f7fd fee7 	bl	8000bf8 <__aeabi_fmul>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4b49      	ldr	r3, [pc, #292]	; (8002f54 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4619      	mov	r1, r3
 8002e34:	4610      	mov	r0, r2
 8002e36:	f7fd fdd7 	bl	80009e8 <__addsf3>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	4b45      	ldr	r3, [pc, #276]	; (8002f54 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002e40:	601a      	str	r2, [r3, #0]
	  float de = (e - preE) / timeInterval;
 8002e42:	4b43      	ldr	r3, [pc, #268]	; (8002f50 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a44      	ldr	r2, [pc, #272]	; (8002f58 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002e48:	6812      	ldr	r2, [r2, #0]
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7fd fdc9 	bl	80009e4 <__aeabi_fsub>
 8002e52:	4603      	mov	r3, r0
 8002e54:	461c      	mov	r4, r3
 8002e56:	4b36      	ldr	r3, [pc, #216]	; (8002f30 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fd fe74 	bl	8000b48 <__aeabi_ui2f>
 8002e60:	4603      	mov	r3, r0
 8002e62:	4619      	mov	r1, r3
 8002e64:	4620      	mov	r0, r4
 8002e66:	f7fd ff7b 	bl	8000d60 <__aeabi_fdiv>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	60bb      	str	r3, [r7, #8]
	  preE = e;
 8002e6e:	4b38      	ldr	r3, [pc, #224]	; (8002f50 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a39      	ldr	r2, [pc, #228]	; (8002f58 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002e74:	6013      	str	r3, [r2, #0]
	  u = kp * e + ki * eint + kd * de;   //%PWM
 8002e76:	4b39      	ldr	r3, [pc, #228]	; (8002f5c <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a35      	ldr	r2, [pc, #212]	; (8002f50 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002e7c:	6812      	ldr	r2, [r2, #0]
 8002e7e:	4611      	mov	r1, r2
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7fd feb9 	bl	8000bf8 <__aeabi_fmul>
 8002e86:	4603      	mov	r3, r0
 8002e88:	461c      	mov	r4, r3
 8002e8a:	4b35      	ldr	r3, [pc, #212]	; (8002f60 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a31      	ldr	r2, [pc, #196]	; (8002f54 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002e90:	6812      	ldr	r2, [r2, #0]
 8002e92:	4611      	mov	r1, r2
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7fd feaf 	bl	8000bf8 <__aeabi_fmul>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4620      	mov	r0, r4
 8002ea0:	f7fd fda2 	bl	80009e8 <__addsf3>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	461c      	mov	r4, r3
 8002ea8:	4b2e      	ldr	r3, [pc, #184]	; (8002f64 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68b9      	ldr	r1, [r7, #8]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fd fea2 	bl	8000bf8 <__aeabi_fmul>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4620      	mov	r0, r4
 8002eba:	f7fd fd95 	bl	80009e8 <__addsf3>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	4b29      	ldr	r3, [pc, #164]	; (8002f68 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002ec4:	601a      	str	r2, [r3, #0]

	  if (u < 0) {
 8002ec6:	4b28      	ldr	r3, [pc, #160]	; (8002f68 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f04f 0100 	mov.w	r1, #0
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7fe f830 	bl	8000f34 <__aeabi_fcmplt>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00e      	beq.n	8002ef8 <HAL_TIM_PeriodElapsedCallback+0x1b0>
		pidDir = -mDir;
 8002eda:	4b24      	ldr	r3, [pc, #144]	; (8002f6c <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002edc:	f993 3000 	ldrsb.w	r3, [r3]
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	425b      	negs	r3, r3
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	b25a      	sxtb	r2, r3
 8002ee8:	4b21      	ldr	r3, [pc, #132]	; (8002f70 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002eea:	701a      	strb	r2, [r3, #0]
		u = fabs(u);
 8002eec:	4b1e      	ldr	r3, [pc, #120]	; (8002f68 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ef4:	4a1c      	ldr	r2, [pc, #112]	; (8002f68 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002ef6:	6013      	str	r3, [r2, #0]
	  }
	  if (u > 1000)
 8002ef8:	4b1b      	ldr	r3, [pc, #108]	; (8002f68 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	491d      	ldr	r1, [pc, #116]	; (8002f74 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fe f836 	bl	8000f70 <__aeabi_fcmpgt>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d002      	beq.n	8002f10 <HAL_TIM_PeriodElapsedCallback+0x1c8>
		u = 1000;
 8002f0a:	4b17      	ldr	r3, [pc, #92]	; (8002f68 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002f0c:	4a19      	ldr	r2, [pc, #100]	; (8002f74 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002f0e:	601a      	str	r2, [r3, #0]

	  if (FLAG_run == true) {
//		set_motor(1, pidDir, (u32) u);
	  }
	  timer_count = 0;
 8002f10:	4b06      	ldr	r3, [pc, #24]	; (8002f2c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]
	}
  }
}
 8002f16:	bf00      	nop
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	00000000 	.word	0x00000000
 8002f24:	40aef000 	.word	0x40aef000
 8002f28:	40000800 	.word	0x40000800
 8002f2c:	20000304 	.word	0x20000304
 8002f30:	20000010 	.word	0x20000010
 8002f34:	40012c00 	.word	0x40012c00
 8002f38:	200002d8 	.word	0x200002d8
 8002f3c:	200002dc 	.word	0x200002dc
 8002f40:	404e0000 	.word	0x404e0000
 8002f44:	408f4000 	.word	0x408f4000
 8002f48:	200002d4 	.word	0x200002d4
 8002f4c:	200002f4 	.word	0x200002f4
 8002f50:	200002ec 	.word	0x200002ec
 8002f54:	200002e8 	.word	0x200002e8
 8002f58:	200002f0 	.word	0x200002f0
 8002f5c:	20000014 	.word	0x20000014
 8002f60:	200002e0 	.word	0x200002e0
 8002f64:	200002e4 	.word	0x200002e4
 8002f68:	20000308 	.word	0x20000308
 8002f6c:	20000004 	.word	0x20000004
 8002f70:	20000018 	.word	0x20000018
 8002f74:	447a0000 	.word	0x447a0000

08002f78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f78:	480c      	ldr	r0, [pc, #48]	; (8002fac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f7a:	490d      	ldr	r1, [pc, #52]	; (8002fb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f7c:	4a0d      	ldr	r2, [pc, #52]	; (8002fb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f80:	e002      	b.n	8002f88 <LoopCopyDataInit>

08002f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f86:	3304      	adds	r3, #4

08002f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f8c:	d3f9      	bcc.n	8002f82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f8e:	4a0a      	ldr	r2, [pc, #40]	; (8002fb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f90:	4c0a      	ldr	r4, [pc, #40]	; (8002fbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f94:	e001      	b.n	8002f9a <LoopFillZerobss>

08002f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f98:	3204      	adds	r2, #4

08002f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f9c:	d3fb      	bcc.n	8002f96 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002f9e:	f7fe fd9f 	bl	8001ae0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fa2:	f002 ff81 	bl	8005ea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002fa6:	f7fe f853 	bl	8001050 <main>
  bx lr
 8002faa:	4770      	bx	lr
  ldr r0, =_sdata
 8002fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fb0:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002fb4:	08006930 	.word	0x08006930
  ldr r2, =_sbss
 8002fb8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002fbc:	20000340 	.word	0x20000340

08002fc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002fc0:	e7fe      	b.n	8002fc0 <ADC1_2_IRQHandler>
	...

08002fc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fc8:	4b08      	ldr	r3, [pc, #32]	; (8002fec <HAL_Init+0x28>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a07      	ldr	r2, [pc, #28]	; (8002fec <HAL_Init+0x28>)
 8002fce:	f043 0310 	orr.w	r3, r3, #16
 8002fd2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fd4:	2003      	movs	r0, #3
 8002fd6:	f000 fb59 	bl	800368c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fda:	200f      	movs	r0, #15
 8002fdc:	f000 f808 	bl	8002ff0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fe0:	f7fe fb62 	bl	80016a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40022000 	.word	0x40022000

08002ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ff8:	4b12      	ldr	r3, [pc, #72]	; (8003044 <HAL_InitTick+0x54>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	4b12      	ldr	r3, [pc, #72]	; (8003048 <HAL_InitTick+0x58>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	4619      	mov	r1, r3
 8003002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003006:	fbb3 f3f1 	udiv	r3, r3, r1
 800300a:	fbb2 f3f3 	udiv	r3, r2, r3
 800300e:	4618      	mov	r0, r3
 8003010:	f000 fb71 	bl	80036f6 <HAL_SYSTICK_Config>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e00e      	b.n	800303c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b0f      	cmp	r3, #15
 8003022:	d80a      	bhi.n	800303a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003024:	2200      	movs	r2, #0
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	f04f 30ff 	mov.w	r0, #4294967295
 800302c:	f000 fb39 	bl	80036a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003030:	4a06      	ldr	r2, [pc, #24]	; (800304c <HAL_InitTick+0x5c>)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003036:	2300      	movs	r3, #0
 8003038:	e000      	b.n	800303c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
}
 800303c:	4618      	mov	r0, r3
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	20000000 	.word	0x20000000
 8003048:	20000024 	.word	0x20000024
 800304c:	20000020 	.word	0x20000020

08003050 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003054:	4b05      	ldr	r3, [pc, #20]	; (800306c <HAL_IncTick+0x1c>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	461a      	mov	r2, r3
 800305a:	4b05      	ldr	r3, [pc, #20]	; (8003070 <HAL_IncTick+0x20>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4413      	add	r3, r2
 8003060:	4a03      	ldr	r2, [pc, #12]	; (8003070 <HAL_IncTick+0x20>)
 8003062:	6013      	str	r3, [r2, #0]
}
 8003064:	bf00      	nop
 8003066:	46bd      	mov	sp, r7
 8003068:	bc80      	pop	{r7}
 800306a:	4770      	bx	lr
 800306c:	20000024 	.word	0x20000024
 8003070:	2000030c 	.word	0x2000030c

08003074 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  return uwTick;
 8003078:	4b02      	ldr	r3, [pc, #8]	; (8003084 <HAL_GetTick+0x10>)
 800307a:	681b      	ldr	r3, [r3, #0]
}
 800307c:	4618      	mov	r0, r3
 800307e:	46bd      	mov	sp, r7
 8003080:	bc80      	pop	{r7}
 8003082:	4770      	bx	lr
 8003084:	2000030c 	.word	0x2000030c

08003088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003090:	f7ff fff0 	bl	8003074 <HAL_GetTick>
 8003094:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a0:	d005      	beq.n	80030ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030a2:	4b0a      	ldr	r3, [pc, #40]	; (80030cc <HAL_Delay+0x44>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	461a      	mov	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	4413      	add	r3, r2
 80030ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030ae:	bf00      	nop
 80030b0:	f7ff ffe0 	bl	8003074 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d8f7      	bhi.n	80030b0 <HAL_Delay+0x28>
  {
  }
}
 80030c0:	bf00      	nop
 80030c2:	bf00      	nop
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	20000024 	.word	0x20000024

080030d0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030d8:	2300      	movs	r3, #0
 80030da:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80030dc:	2300      	movs	r3, #0
 80030de:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e0be      	b.n	8003270 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d109      	bne.n	8003114 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7fe fafc 	bl	800170c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f9ab 	bl	8003470 <ADC_ConversionStop_Disable>
 800311a:	4603      	mov	r3, r0
 800311c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003122:	f003 0310 	and.w	r3, r3, #16
 8003126:	2b00      	cmp	r3, #0
 8003128:	f040 8099 	bne.w	800325e <HAL_ADC_Init+0x18e>
 800312c:	7dfb      	ldrb	r3, [r7, #23]
 800312e:	2b00      	cmp	r3, #0
 8003130:	f040 8095 	bne.w	800325e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003138:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800313c:	f023 0302 	bic.w	r3, r3, #2
 8003140:	f043 0202 	orr.w	r2, r3, #2
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003150:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	7b1b      	ldrb	r3, [r3, #12]
 8003156:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003158:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	4313      	orrs	r3, r2
 800315e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003168:	d003      	beq.n	8003172 <HAL_ADC_Init+0xa2>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d102      	bne.n	8003178 <HAL_ADC_Init+0xa8>
 8003172:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003176:	e000      	b.n	800317a <HAL_ADC_Init+0xaa>
 8003178:	2300      	movs	r3, #0
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	4313      	orrs	r3, r2
 800317e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	7d1b      	ldrb	r3, [r3, #20]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d119      	bne.n	80031bc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	7b1b      	ldrb	r3, [r3, #12]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d109      	bne.n	80031a4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	3b01      	subs	r3, #1
 8003196:	035a      	lsls	r2, r3, #13
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	4313      	orrs	r3, r2
 800319c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031a0:	613b      	str	r3, [r7, #16]
 80031a2:	e00b      	b.n	80031bc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a8:	f043 0220 	orr.w	r2, r3, #32
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b4:	f043 0201 	orr.w	r2, r3, #1
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	4b28      	ldr	r3, [pc, #160]	; (8003278 <HAL_ADC_Init+0x1a8>)
 80031d8:	4013      	ands	r3, r2
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	6812      	ldr	r2, [r2, #0]
 80031de:	68b9      	ldr	r1, [r7, #8]
 80031e0:	430b      	orrs	r3, r1
 80031e2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031ec:	d003      	beq.n	80031f6 <HAL_ADC_Init+0x126>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d104      	bne.n	8003200 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	3b01      	subs	r3, #1
 80031fc:	051b      	lsls	r3, r3, #20
 80031fe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003206:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	430a      	orrs	r2, r1
 8003212:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	4b18      	ldr	r3, [pc, #96]	; (800327c <HAL_ADC_Init+0x1ac>)
 800321c:	4013      	ands	r3, r2
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	429a      	cmp	r2, r3
 8003222:	d10b      	bne.n	800323c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322e:	f023 0303 	bic.w	r3, r3, #3
 8003232:	f043 0201 	orr.w	r2, r3, #1
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800323a:	e018      	b.n	800326e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003240:	f023 0312 	bic.w	r3, r3, #18
 8003244:	f043 0210 	orr.w	r2, r3, #16
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003250:	f043 0201 	orr.w	r2, r3, #1
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800325c:	e007      	b.n	800326e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003262:	f043 0210 	orr.w	r2, r3, #16
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800326e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3718      	adds	r7, #24
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	ffe1f7fd 	.word	0xffe1f7fd
 800327c:	ff1f0efe 	.word	0xff1f0efe

08003280 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800328a:	2300      	movs	r3, #0
 800328c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800328e:	2300      	movs	r3, #0
 8003290:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003298:	2b01      	cmp	r3, #1
 800329a:	d101      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x20>
 800329c:	2302      	movs	r3, #2
 800329e:	e0dc      	b.n	800345a <HAL_ADC_ConfigChannel+0x1da>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2b06      	cmp	r3, #6
 80032ae:	d81c      	bhi.n	80032ea <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	4613      	mov	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	3b05      	subs	r3, #5
 80032c2:	221f      	movs	r2, #31
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	43db      	mvns	r3, r3
 80032ca:	4019      	ands	r1, r3
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	6818      	ldr	r0, [r3, #0]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	4613      	mov	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4413      	add	r3, r2
 80032da:	3b05      	subs	r3, #5
 80032dc:	fa00 f203 	lsl.w	r2, r0, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	635a      	str	r2, [r3, #52]	; 0x34
 80032e8:	e03c      	b.n	8003364 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2b0c      	cmp	r3, #12
 80032f0:	d81c      	bhi.n	800332c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	4613      	mov	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4413      	add	r3, r2
 8003302:	3b23      	subs	r3, #35	; 0x23
 8003304:	221f      	movs	r2, #31
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	43db      	mvns	r3, r3
 800330c:	4019      	ands	r1, r3
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	6818      	ldr	r0, [r3, #0]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	3b23      	subs	r3, #35	; 0x23
 800331e:	fa00 f203 	lsl.w	r2, r0, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	631a      	str	r2, [r3, #48]	; 0x30
 800332a:	e01b      	b.n	8003364 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	4613      	mov	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	3b41      	subs	r3, #65	; 0x41
 800333e:	221f      	movs	r2, #31
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	43db      	mvns	r3, r3
 8003346:	4019      	ands	r1, r3
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	6818      	ldr	r0, [r3, #0]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	4613      	mov	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	3b41      	subs	r3, #65	; 0x41
 8003358:	fa00 f203 	lsl.w	r2, r0, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	430a      	orrs	r2, r1
 8003362:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b09      	cmp	r3, #9
 800336a:	d91c      	bls.n	80033a6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68d9      	ldr	r1, [r3, #12]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	4613      	mov	r3, r2
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	4413      	add	r3, r2
 800337c:	3b1e      	subs	r3, #30
 800337e:	2207      	movs	r2, #7
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	43db      	mvns	r3, r3
 8003386:	4019      	ands	r1, r3
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	6898      	ldr	r0, [r3, #8]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	4613      	mov	r3, r2
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	4413      	add	r3, r2
 8003396:	3b1e      	subs	r3, #30
 8003398:	fa00 f203 	lsl.w	r2, r0, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	60da      	str	r2, [r3, #12]
 80033a4:	e019      	b.n	80033da <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6919      	ldr	r1, [r3, #16]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	4613      	mov	r3, r2
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	4413      	add	r3, r2
 80033b6:	2207      	movs	r2, #7
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	43db      	mvns	r3, r3
 80033be:	4019      	ands	r1, r3
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	6898      	ldr	r0, [r3, #8]
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	4613      	mov	r3, r2
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	4413      	add	r3, r2
 80033ce:	fa00 f203 	lsl.w	r2, r0, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b10      	cmp	r3, #16
 80033e0:	d003      	beq.n	80033ea <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80033e6:	2b11      	cmp	r3, #17
 80033e8:	d132      	bne.n	8003450 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a1d      	ldr	r2, [pc, #116]	; (8003464 <HAL_ADC_ConfigChannel+0x1e4>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d125      	bne.n	8003440 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d126      	bne.n	8003450 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003410:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2b10      	cmp	r3, #16
 8003418:	d11a      	bne.n	8003450 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800341a:	4b13      	ldr	r3, [pc, #76]	; (8003468 <HAL_ADC_ConfigChannel+0x1e8>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a13      	ldr	r2, [pc, #76]	; (800346c <HAL_ADC_ConfigChannel+0x1ec>)
 8003420:	fba2 2303 	umull	r2, r3, r2, r3
 8003424:	0c9a      	lsrs	r2, r3, #18
 8003426:	4613      	mov	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	4413      	add	r3, r2
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003430:	e002      	b.n	8003438 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	3b01      	subs	r3, #1
 8003436:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1f9      	bne.n	8003432 <HAL_ADC_ConfigChannel+0x1b2>
 800343e:	e007      	b.n	8003450 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	f043 0220 	orr.w	r2, r3, #32
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003458:	7bfb      	ldrb	r3, [r7, #15]
}
 800345a:	4618      	mov	r0, r3
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	bc80      	pop	{r7}
 8003462:	4770      	bx	lr
 8003464:	40012400 	.word	0x40012400
 8003468:	20000000 	.word	0x20000000
 800346c:	431bde83 	.word	0x431bde83

08003470 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003478:	2300      	movs	r3, #0
 800347a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b01      	cmp	r3, #1
 8003488:	d12e      	bne.n	80034e8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0201 	bic.w	r2, r2, #1
 8003498:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800349a:	f7ff fdeb 	bl	8003074 <HAL_GetTick>
 800349e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80034a0:	e01b      	b.n	80034da <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80034a2:	f7ff fde7 	bl	8003074 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d914      	bls.n	80034da <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d10d      	bne.n	80034da <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c2:	f043 0210 	orr.w	r2, r3, #16
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ce:	f043 0201 	orr.w	r2, r3, #1
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e007      	b.n	80034ea <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d0dc      	beq.n	80034a2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
	...

080034f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003504:	4b0c      	ldr	r3, [pc, #48]	; (8003538 <__NVIC_SetPriorityGrouping+0x44>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003510:	4013      	ands	r3, r2
 8003512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800351c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003526:	4a04      	ldr	r2, [pc, #16]	; (8003538 <__NVIC_SetPriorityGrouping+0x44>)
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	60d3      	str	r3, [r2, #12]
}
 800352c:	bf00      	nop
 800352e:	3714      	adds	r7, #20
 8003530:	46bd      	mov	sp, r7
 8003532:	bc80      	pop	{r7}
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	e000ed00 	.word	0xe000ed00

0800353c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003540:	4b04      	ldr	r3, [pc, #16]	; (8003554 <__NVIC_GetPriorityGrouping+0x18>)
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	0a1b      	lsrs	r3, r3, #8
 8003546:	f003 0307 	and.w	r3, r3, #7
}
 800354a:	4618      	mov	r0, r3
 800354c:	46bd      	mov	sp, r7
 800354e:	bc80      	pop	{r7}
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	e000ed00 	.word	0xe000ed00

08003558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	4603      	mov	r3, r0
 8003560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003566:	2b00      	cmp	r3, #0
 8003568:	db0b      	blt.n	8003582 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800356a:	79fb      	ldrb	r3, [r7, #7]
 800356c:	f003 021f 	and.w	r2, r3, #31
 8003570:	4906      	ldr	r1, [pc, #24]	; (800358c <__NVIC_EnableIRQ+0x34>)
 8003572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003576:	095b      	lsrs	r3, r3, #5
 8003578:	2001      	movs	r0, #1
 800357a:	fa00 f202 	lsl.w	r2, r0, r2
 800357e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	bc80      	pop	{r7}
 800358a:	4770      	bx	lr
 800358c:	e000e100 	.word	0xe000e100

08003590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	4603      	mov	r3, r0
 8003598:	6039      	str	r1, [r7, #0]
 800359a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800359c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	db0a      	blt.n	80035ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	490c      	ldr	r1, [pc, #48]	; (80035dc <__NVIC_SetPriority+0x4c>)
 80035aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ae:	0112      	lsls	r2, r2, #4
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	440b      	add	r3, r1
 80035b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035b8:	e00a      	b.n	80035d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	4908      	ldr	r1, [pc, #32]	; (80035e0 <__NVIC_SetPriority+0x50>)
 80035c0:	79fb      	ldrb	r3, [r7, #7]
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	3b04      	subs	r3, #4
 80035c8:	0112      	lsls	r2, r2, #4
 80035ca:	b2d2      	uxtb	r2, r2
 80035cc:	440b      	add	r3, r1
 80035ce:	761a      	strb	r2, [r3, #24]
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bc80      	pop	{r7}
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	e000e100 	.word	0xe000e100
 80035e0:	e000ed00 	.word	0xe000ed00

080035e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b089      	sub	sp, #36	; 0x24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	f1c3 0307 	rsb	r3, r3, #7
 80035fe:	2b04      	cmp	r3, #4
 8003600:	bf28      	it	cs
 8003602:	2304      	movcs	r3, #4
 8003604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	3304      	adds	r3, #4
 800360a:	2b06      	cmp	r3, #6
 800360c:	d902      	bls.n	8003614 <NVIC_EncodePriority+0x30>
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	3b03      	subs	r3, #3
 8003612:	e000      	b.n	8003616 <NVIC_EncodePriority+0x32>
 8003614:	2300      	movs	r3, #0
 8003616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003618:	f04f 32ff 	mov.w	r2, #4294967295
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	fa02 f303 	lsl.w	r3, r2, r3
 8003622:	43da      	mvns	r2, r3
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	401a      	ands	r2, r3
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800362c:	f04f 31ff 	mov.w	r1, #4294967295
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	fa01 f303 	lsl.w	r3, r1, r3
 8003636:	43d9      	mvns	r1, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800363c:	4313      	orrs	r3, r2
         );
}
 800363e:	4618      	mov	r0, r3
 8003640:	3724      	adds	r7, #36	; 0x24
 8003642:	46bd      	mov	sp, r7
 8003644:	bc80      	pop	{r7}
 8003646:	4770      	bx	lr

08003648 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3b01      	subs	r3, #1
 8003654:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003658:	d301      	bcc.n	800365e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800365a:	2301      	movs	r3, #1
 800365c:	e00f      	b.n	800367e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800365e:	4a0a      	ldr	r2, [pc, #40]	; (8003688 <SysTick_Config+0x40>)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3b01      	subs	r3, #1
 8003664:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003666:	210f      	movs	r1, #15
 8003668:	f04f 30ff 	mov.w	r0, #4294967295
 800366c:	f7ff ff90 	bl	8003590 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003670:	4b05      	ldr	r3, [pc, #20]	; (8003688 <SysTick_Config+0x40>)
 8003672:	2200      	movs	r2, #0
 8003674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003676:	4b04      	ldr	r3, [pc, #16]	; (8003688 <SysTick_Config+0x40>)
 8003678:	2207      	movs	r2, #7
 800367a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	e000e010 	.word	0xe000e010

0800368c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f7ff ff2d 	bl	80034f4 <__NVIC_SetPriorityGrouping>
}
 800369a:	bf00      	nop
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b086      	sub	sp, #24
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	4603      	mov	r3, r0
 80036aa:	60b9      	str	r1, [r7, #8]
 80036ac:	607a      	str	r2, [r7, #4]
 80036ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036b0:	2300      	movs	r3, #0
 80036b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036b4:	f7ff ff42 	bl	800353c <__NVIC_GetPriorityGrouping>
 80036b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	68b9      	ldr	r1, [r7, #8]
 80036be:	6978      	ldr	r0, [r7, #20]
 80036c0:	f7ff ff90 	bl	80035e4 <NVIC_EncodePriority>
 80036c4:	4602      	mov	r2, r0
 80036c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ca:	4611      	mov	r1, r2
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7ff ff5f 	bl	8003590 <__NVIC_SetPriority>
}
 80036d2:	bf00      	nop
 80036d4:	3718      	adds	r7, #24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b082      	sub	sp, #8
 80036de:	af00      	add	r7, sp, #0
 80036e0:	4603      	mov	r3, r0
 80036e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff ff35 	bl	8003558 <__NVIC_EnableIRQ>
}
 80036ee:	bf00      	nop
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b082      	sub	sp, #8
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7ff ffa2 	bl	8003648 <SysTick_Config>
 8003704:	4603      	mov	r3, r0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
	...

08003710 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003712:	b087      	sub	sp, #28
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003722:	2300      	movs	r3, #0
 8003724:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8003726:	2300      	movs	r3, #0
 8003728:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800372a:	4b2f      	ldr	r3, [pc, #188]	; (80037e8 <HAL_FLASH_Program+0xd8>)
 800372c:	7e1b      	ldrb	r3, [r3, #24]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d101      	bne.n	8003736 <HAL_FLASH_Program+0x26>
 8003732:	2302      	movs	r3, #2
 8003734:	e054      	b.n	80037e0 <HAL_FLASH_Program+0xd0>
 8003736:	4b2c      	ldr	r3, [pc, #176]	; (80037e8 <HAL_FLASH_Program+0xd8>)
 8003738:	2201      	movs	r2, #1
 800373a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800373c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003740:	f000 f8a8 	bl	8003894 <FLASH_WaitForLastOperation>
 8003744:	4603      	mov	r3, r0
 8003746:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003748:	7dfb      	ldrb	r3, [r7, #23]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d144      	bne.n	80037d8 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d102      	bne.n	800375a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003754:	2301      	movs	r3, #1
 8003756:	757b      	strb	r3, [r7, #21]
 8003758:	e007      	b.n	800376a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2b02      	cmp	r3, #2
 800375e:	d102      	bne.n	8003766 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003760:	2302      	movs	r3, #2
 8003762:	757b      	strb	r3, [r7, #21]
 8003764:	e001      	b.n	800376a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003766:	2304      	movs	r3, #4
 8003768:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800376a:	2300      	movs	r3, #0
 800376c:	75bb      	strb	r3, [r7, #22]
 800376e:	e02d      	b.n	80037cc <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003770:	7dbb      	ldrb	r3, [r7, #22]
 8003772:	005a      	lsls	r2, r3, #1
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	eb02 0c03 	add.w	ip, r2, r3
 800377a:	7dbb      	ldrb	r3, [r7, #22]
 800377c:	0119      	lsls	r1, r3, #4
 800377e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003782:	f1c1 0620 	rsb	r6, r1, #32
 8003786:	f1a1 0020 	sub.w	r0, r1, #32
 800378a:	fa22 f401 	lsr.w	r4, r2, r1
 800378e:	fa03 f606 	lsl.w	r6, r3, r6
 8003792:	4334      	orrs	r4, r6
 8003794:	fa23 f000 	lsr.w	r0, r3, r0
 8003798:	4304      	orrs	r4, r0
 800379a:	fa23 f501 	lsr.w	r5, r3, r1
 800379e:	b2a3      	uxth	r3, r4
 80037a0:	4619      	mov	r1, r3
 80037a2:	4660      	mov	r0, ip
 80037a4:	f000 f85a 	bl	800385c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80037a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80037ac:	f000 f872 	bl	8003894 <FLASH_WaitForLastOperation>
 80037b0:	4603      	mov	r3, r0
 80037b2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80037b4:	4b0d      	ldr	r3, [pc, #52]	; (80037ec <HAL_FLASH_Program+0xdc>)
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	4a0c      	ldr	r2, [pc, #48]	; (80037ec <HAL_FLASH_Program+0xdc>)
 80037ba:	f023 0301 	bic.w	r3, r3, #1
 80037be:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80037c0:	7dfb      	ldrb	r3, [r7, #23]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d107      	bne.n	80037d6 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80037c6:	7dbb      	ldrb	r3, [r7, #22]
 80037c8:	3301      	adds	r3, #1
 80037ca:	75bb      	strb	r3, [r7, #22]
 80037cc:	7dba      	ldrb	r2, [r7, #22]
 80037ce:	7d7b      	ldrb	r3, [r7, #21]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d3cd      	bcc.n	8003770 <HAL_FLASH_Program+0x60>
 80037d4:	e000      	b.n	80037d8 <HAL_FLASH_Program+0xc8>
      {
        break;
 80037d6:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80037d8:	4b03      	ldr	r3, [pc, #12]	; (80037e8 <HAL_FLASH_Program+0xd8>)
 80037da:	2200      	movs	r2, #0
 80037dc:	761a      	strb	r2, [r3, #24]

  return status;
 80037de:	7dfb      	ldrb	r3, [r7, #23]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	371c      	adds	r7, #28
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037e8:	20000310 	.word	0x20000310
 80037ec:	40022000 	.word	0x40022000

080037f0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80037f6:	2300      	movs	r3, #0
 80037f8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80037fa:	4b0d      	ldr	r3, [pc, #52]	; (8003830 <HAL_FLASH_Unlock+0x40>)
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00d      	beq.n	8003822 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003806:	4b0a      	ldr	r3, [pc, #40]	; (8003830 <HAL_FLASH_Unlock+0x40>)
 8003808:	4a0a      	ldr	r2, [pc, #40]	; (8003834 <HAL_FLASH_Unlock+0x44>)
 800380a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800380c:	4b08      	ldr	r3, [pc, #32]	; (8003830 <HAL_FLASH_Unlock+0x40>)
 800380e:	4a0a      	ldr	r2, [pc, #40]	; (8003838 <HAL_FLASH_Unlock+0x48>)
 8003810:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003812:	4b07      	ldr	r3, [pc, #28]	; (8003830 <HAL_FLASH_Unlock+0x40>)
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8003822:	79fb      	ldrb	r3, [r7, #7]
}
 8003824:	4618      	mov	r0, r3
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	bc80      	pop	{r7}
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	40022000 	.word	0x40022000
 8003834:	45670123 	.word	0x45670123
 8003838:	cdef89ab 	.word	0xcdef89ab

0800383c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003840:	4b05      	ldr	r3, [pc, #20]	; (8003858 <HAL_FLASH_Lock+0x1c>)
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	4a04      	ldr	r2, [pc, #16]	; (8003858 <HAL_FLASH_Lock+0x1c>)
 8003846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800384a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	46bd      	mov	sp, r7
 8003852:	bc80      	pop	{r7}
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	40022000 	.word	0x40022000

0800385c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	460b      	mov	r3, r1
 8003866:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003868:	4b08      	ldr	r3, [pc, #32]	; (800388c <FLASH_Program_HalfWord+0x30>)
 800386a:	2200      	movs	r2, #0
 800386c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800386e:	4b08      	ldr	r3, [pc, #32]	; (8003890 <FLASH_Program_HalfWord+0x34>)
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	4a07      	ldr	r2, [pc, #28]	; (8003890 <FLASH_Program_HalfWord+0x34>)
 8003874:	f043 0301 	orr.w	r3, r3, #1
 8003878:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	887a      	ldrh	r2, [r7, #2]
 800387e:	801a      	strh	r2, [r3, #0]
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	bc80      	pop	{r7}
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	20000310 	.word	0x20000310
 8003890:	40022000 	.word	0x40022000

08003894 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800389c:	f7ff fbea 	bl	8003074 <HAL_GetTick>
 80038a0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80038a2:	e010      	b.n	80038c6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038aa:	d00c      	beq.n	80038c6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d007      	beq.n	80038c2 <FLASH_WaitForLastOperation+0x2e>
 80038b2:	f7ff fbdf 	bl	8003074 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d201      	bcs.n	80038c6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e025      	b.n	8003912 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80038c6:	4b15      	ldr	r3, [pc, #84]	; (800391c <FLASH_WaitForLastOperation+0x88>)
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1e8      	bne.n	80038a4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80038d2:	4b12      	ldr	r3, [pc, #72]	; (800391c <FLASH_WaitForLastOperation+0x88>)
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f003 0320 	and.w	r3, r3, #32
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d002      	beq.n	80038e4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80038de:	4b0f      	ldr	r3, [pc, #60]	; (800391c <FLASH_WaitForLastOperation+0x88>)
 80038e0:	2220      	movs	r2, #32
 80038e2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80038e4:	4b0d      	ldr	r3, [pc, #52]	; (800391c <FLASH_WaitForLastOperation+0x88>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f003 0310 	and.w	r3, r3, #16
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10b      	bne.n	8003908 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80038f0:	4b0a      	ldr	r3, [pc, #40]	; (800391c <FLASH_WaitForLastOperation+0x88>)
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d105      	bne.n	8003908 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80038fc:	4b07      	ldr	r3, [pc, #28]	; (800391c <FLASH_WaitForLastOperation+0x88>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003908:	f000 f80a 	bl	8003920 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e000      	b.n	8003912 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	40022000 	.word	0x40022000

08003920 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003926:	2300      	movs	r3, #0
 8003928:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800392a:	4b23      	ldr	r3, [pc, #140]	; (80039b8 <FLASH_SetErrorCode+0x98>)
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f003 0310 	and.w	r3, r3, #16
 8003932:	2b00      	cmp	r3, #0
 8003934:	d009      	beq.n	800394a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003936:	4b21      	ldr	r3, [pc, #132]	; (80039bc <FLASH_SetErrorCode+0x9c>)
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	f043 0302 	orr.w	r3, r3, #2
 800393e:	4a1f      	ldr	r2, [pc, #124]	; (80039bc <FLASH_SetErrorCode+0x9c>)
 8003940:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f043 0310 	orr.w	r3, r3, #16
 8003948:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800394a:	4b1b      	ldr	r3, [pc, #108]	; (80039b8 <FLASH_SetErrorCode+0x98>)
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	f003 0304 	and.w	r3, r3, #4
 8003952:	2b00      	cmp	r3, #0
 8003954:	d009      	beq.n	800396a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003956:	4b19      	ldr	r3, [pc, #100]	; (80039bc <FLASH_SetErrorCode+0x9c>)
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	f043 0301 	orr.w	r3, r3, #1
 800395e:	4a17      	ldr	r2, [pc, #92]	; (80039bc <FLASH_SetErrorCode+0x9c>)
 8003960:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f043 0304 	orr.w	r3, r3, #4
 8003968:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800396a:	4b13      	ldr	r3, [pc, #76]	; (80039b8 <FLASH_SetErrorCode+0x98>)
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00b      	beq.n	800398e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003976:	4b11      	ldr	r3, [pc, #68]	; (80039bc <FLASH_SetErrorCode+0x9c>)
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	f043 0304 	orr.w	r3, r3, #4
 800397e:	4a0f      	ldr	r2, [pc, #60]	; (80039bc <FLASH_SetErrorCode+0x9c>)
 8003980:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003982:	4b0d      	ldr	r3, [pc, #52]	; (80039b8 <FLASH_SetErrorCode+0x98>)
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	4a0c      	ldr	r2, [pc, #48]	; (80039b8 <FLASH_SetErrorCode+0x98>)
 8003988:	f023 0301 	bic.w	r3, r3, #1
 800398c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f240 1201 	movw	r2, #257	; 0x101
 8003994:	4293      	cmp	r3, r2
 8003996:	d106      	bne.n	80039a6 <FLASH_SetErrorCode+0x86>
 8003998:	4b07      	ldr	r3, [pc, #28]	; (80039b8 <FLASH_SetErrorCode+0x98>)
 800399a:	69db      	ldr	r3, [r3, #28]
 800399c:	4a06      	ldr	r2, [pc, #24]	; (80039b8 <FLASH_SetErrorCode+0x98>)
 800399e:	f023 0301 	bic.w	r3, r3, #1
 80039a2:	61d3      	str	r3, [r2, #28]
}  
 80039a4:	e002      	b.n	80039ac <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80039a6:	4a04      	ldr	r2, [pc, #16]	; (80039b8 <FLASH_SetErrorCode+0x98>)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	60d3      	str	r3, [r2, #12]
}  
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bc80      	pop	{r7}
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	40022000 	.word	0x40022000
 80039bc:	20000310 	.word	0x20000310

080039c0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80039ce:	2300      	movs	r3, #0
 80039d0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80039d2:	4b2f      	ldr	r3, [pc, #188]	; (8003a90 <HAL_FLASHEx_Erase+0xd0>)
 80039d4:	7e1b      	ldrb	r3, [r3, #24]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d101      	bne.n	80039de <HAL_FLASHEx_Erase+0x1e>
 80039da:	2302      	movs	r3, #2
 80039dc:	e053      	b.n	8003a86 <HAL_FLASHEx_Erase+0xc6>
 80039de:	4b2c      	ldr	r3, [pc, #176]	; (8003a90 <HAL_FLASHEx_Erase+0xd0>)
 80039e0:	2201      	movs	r2, #1
 80039e2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d116      	bne.n	8003a1a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80039ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80039f0:	f7ff ff50 	bl	8003894 <FLASH_WaitForLastOperation>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d141      	bne.n	8003a7e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80039fa:	2001      	movs	r0, #1
 80039fc:	f000 f84c 	bl	8003a98 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003a00:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003a04:	f7ff ff46 	bl	8003894 <FLASH_WaitForLastOperation>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003a0c:	4b21      	ldr	r3, [pc, #132]	; (8003a94 <HAL_FLASHEx_Erase+0xd4>)
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	4a20      	ldr	r2, [pc, #128]	; (8003a94 <HAL_FLASHEx_Erase+0xd4>)
 8003a12:	f023 0304 	bic.w	r3, r3, #4
 8003a16:	6113      	str	r3, [r2, #16]
 8003a18:	e031      	b.n	8003a7e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003a1a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003a1e:	f7ff ff39 	bl	8003894 <FLASH_WaitForLastOperation>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d12a      	bne.n	8003a7e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a2e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	60bb      	str	r3, [r7, #8]
 8003a36:	e019      	b.n	8003a6c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003a38:	68b8      	ldr	r0, [r7, #8]
 8003a3a:	f000 f849 	bl	8003ad0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003a3e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003a42:	f7ff ff27 	bl	8003894 <FLASH_WaitForLastOperation>
 8003a46:	4603      	mov	r3, r0
 8003a48:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003a4a:	4b12      	ldr	r3, [pc, #72]	; (8003a94 <HAL_FLASHEx_Erase+0xd4>)
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	4a11      	ldr	r2, [pc, #68]	; (8003a94 <HAL_FLASHEx_Erase+0xd4>)
 8003a50:	f023 0302 	bic.w	r3, r3, #2
 8003a54:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003a56:	7bfb      	ldrb	r3, [r7, #15]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	601a      	str	r2, [r3, #0]
            break;
 8003a62:	e00c      	b.n	8003a7e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a6a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	029a      	lsls	r2, r3, #10
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d3dc      	bcc.n	8003a38 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003a7e:	4b04      	ldr	r3, [pc, #16]	; (8003a90 <HAL_FLASHEx_Erase+0xd0>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	761a      	strb	r2, [r3, #24]

  return status;
 8003a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	20000310 	.word	0x20000310
 8003a94:	40022000 	.word	0x40022000

08003a98 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003aa0:	4b09      	ldr	r3, [pc, #36]	; (8003ac8 <FLASH_MassErase+0x30>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003aa6:	4b09      	ldr	r3, [pc, #36]	; (8003acc <FLASH_MassErase+0x34>)
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	4a08      	ldr	r2, [pc, #32]	; (8003acc <FLASH_MassErase+0x34>)
 8003aac:	f043 0304 	orr.w	r3, r3, #4
 8003ab0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003ab2:	4b06      	ldr	r3, [pc, #24]	; (8003acc <FLASH_MassErase+0x34>)
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	4a05      	ldr	r2, [pc, #20]	; (8003acc <FLASH_MassErase+0x34>)
 8003ab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003abc:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003abe:	bf00      	nop
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bc80      	pop	{r7}
 8003ac6:	4770      	bx	lr
 8003ac8:	20000310 	.word	0x20000310
 8003acc:	40022000 	.word	0x40022000

08003ad0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003ad8:	4b0b      	ldr	r3, [pc, #44]	; (8003b08 <FLASH_PageErase+0x38>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003ade:	4b0b      	ldr	r3, [pc, #44]	; (8003b0c <FLASH_PageErase+0x3c>)
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	4a0a      	ldr	r2, [pc, #40]	; (8003b0c <FLASH_PageErase+0x3c>)
 8003ae4:	f043 0302 	orr.w	r3, r3, #2
 8003ae8:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003aea:	4a08      	ldr	r2, [pc, #32]	; (8003b0c <FLASH_PageErase+0x3c>)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003af0:	4b06      	ldr	r3, [pc, #24]	; (8003b0c <FLASH_PageErase+0x3c>)
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	4a05      	ldr	r2, [pc, #20]	; (8003b0c <FLASH_PageErase+0x3c>)
 8003af6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003afa:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bc80      	pop	{r7}
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	20000310 	.word	0x20000310
 8003b0c:	40022000 	.word	0x40022000

08003b10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b08b      	sub	sp, #44	; 0x2c
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b22:	e169      	b.n	8003df8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003b24:	2201      	movs	r2, #1
 8003b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	69fa      	ldr	r2, [r7, #28]
 8003b34:	4013      	ands	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	f040 8158 	bne.w	8003df2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	4a9a      	ldr	r2, [pc, #616]	; (8003db0 <HAL_GPIO_Init+0x2a0>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d05e      	beq.n	8003c0a <HAL_GPIO_Init+0xfa>
 8003b4c:	4a98      	ldr	r2, [pc, #608]	; (8003db0 <HAL_GPIO_Init+0x2a0>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d875      	bhi.n	8003c3e <HAL_GPIO_Init+0x12e>
 8003b52:	4a98      	ldr	r2, [pc, #608]	; (8003db4 <HAL_GPIO_Init+0x2a4>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d058      	beq.n	8003c0a <HAL_GPIO_Init+0xfa>
 8003b58:	4a96      	ldr	r2, [pc, #600]	; (8003db4 <HAL_GPIO_Init+0x2a4>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d86f      	bhi.n	8003c3e <HAL_GPIO_Init+0x12e>
 8003b5e:	4a96      	ldr	r2, [pc, #600]	; (8003db8 <HAL_GPIO_Init+0x2a8>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d052      	beq.n	8003c0a <HAL_GPIO_Init+0xfa>
 8003b64:	4a94      	ldr	r2, [pc, #592]	; (8003db8 <HAL_GPIO_Init+0x2a8>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d869      	bhi.n	8003c3e <HAL_GPIO_Init+0x12e>
 8003b6a:	4a94      	ldr	r2, [pc, #592]	; (8003dbc <HAL_GPIO_Init+0x2ac>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d04c      	beq.n	8003c0a <HAL_GPIO_Init+0xfa>
 8003b70:	4a92      	ldr	r2, [pc, #584]	; (8003dbc <HAL_GPIO_Init+0x2ac>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d863      	bhi.n	8003c3e <HAL_GPIO_Init+0x12e>
 8003b76:	4a92      	ldr	r2, [pc, #584]	; (8003dc0 <HAL_GPIO_Init+0x2b0>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d046      	beq.n	8003c0a <HAL_GPIO_Init+0xfa>
 8003b7c:	4a90      	ldr	r2, [pc, #576]	; (8003dc0 <HAL_GPIO_Init+0x2b0>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d85d      	bhi.n	8003c3e <HAL_GPIO_Init+0x12e>
 8003b82:	2b12      	cmp	r3, #18
 8003b84:	d82a      	bhi.n	8003bdc <HAL_GPIO_Init+0xcc>
 8003b86:	2b12      	cmp	r3, #18
 8003b88:	d859      	bhi.n	8003c3e <HAL_GPIO_Init+0x12e>
 8003b8a:	a201      	add	r2, pc, #4	; (adr r2, 8003b90 <HAL_GPIO_Init+0x80>)
 8003b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b90:	08003c0b 	.word	0x08003c0b
 8003b94:	08003be5 	.word	0x08003be5
 8003b98:	08003bf7 	.word	0x08003bf7
 8003b9c:	08003c39 	.word	0x08003c39
 8003ba0:	08003c3f 	.word	0x08003c3f
 8003ba4:	08003c3f 	.word	0x08003c3f
 8003ba8:	08003c3f 	.word	0x08003c3f
 8003bac:	08003c3f 	.word	0x08003c3f
 8003bb0:	08003c3f 	.word	0x08003c3f
 8003bb4:	08003c3f 	.word	0x08003c3f
 8003bb8:	08003c3f 	.word	0x08003c3f
 8003bbc:	08003c3f 	.word	0x08003c3f
 8003bc0:	08003c3f 	.word	0x08003c3f
 8003bc4:	08003c3f 	.word	0x08003c3f
 8003bc8:	08003c3f 	.word	0x08003c3f
 8003bcc:	08003c3f 	.word	0x08003c3f
 8003bd0:	08003c3f 	.word	0x08003c3f
 8003bd4:	08003bed 	.word	0x08003bed
 8003bd8:	08003c01 	.word	0x08003c01
 8003bdc:	4a79      	ldr	r2, [pc, #484]	; (8003dc4 <HAL_GPIO_Init+0x2b4>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d013      	beq.n	8003c0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003be2:	e02c      	b.n	8003c3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	623b      	str	r3, [r7, #32]
          break;
 8003bea:	e029      	b.n	8003c40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	623b      	str	r3, [r7, #32]
          break;
 8003bf4:	e024      	b.n	8003c40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	3308      	adds	r3, #8
 8003bfc:	623b      	str	r3, [r7, #32]
          break;
 8003bfe:	e01f      	b.n	8003c40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	330c      	adds	r3, #12
 8003c06:	623b      	str	r3, [r7, #32]
          break;
 8003c08:	e01a      	b.n	8003c40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d102      	bne.n	8003c18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003c12:	2304      	movs	r3, #4
 8003c14:	623b      	str	r3, [r7, #32]
          break;
 8003c16:	e013      	b.n	8003c40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d105      	bne.n	8003c2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c20:	2308      	movs	r3, #8
 8003c22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	69fa      	ldr	r2, [r7, #28]
 8003c28:	611a      	str	r2, [r3, #16]
          break;
 8003c2a:	e009      	b.n	8003c40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c2c:	2308      	movs	r3, #8
 8003c2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	69fa      	ldr	r2, [r7, #28]
 8003c34:	615a      	str	r2, [r3, #20]
          break;
 8003c36:	e003      	b.n	8003c40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	623b      	str	r3, [r7, #32]
          break;
 8003c3c:	e000      	b.n	8003c40 <HAL_GPIO_Init+0x130>
          break;
 8003c3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	2bff      	cmp	r3, #255	; 0xff
 8003c44:	d801      	bhi.n	8003c4a <HAL_GPIO_Init+0x13a>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	e001      	b.n	8003c4e <HAL_GPIO_Init+0x13e>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	2bff      	cmp	r3, #255	; 0xff
 8003c54:	d802      	bhi.n	8003c5c <HAL_GPIO_Init+0x14c>
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	e002      	b.n	8003c62 <HAL_GPIO_Init+0x152>
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	3b08      	subs	r3, #8
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	210f      	movs	r1, #15
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c70:	43db      	mvns	r3, r3
 8003c72:	401a      	ands	r2, r3
 8003c74:	6a39      	ldr	r1, [r7, #32]
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	fa01 f303 	lsl.w	r3, r1, r3
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f000 80b1 	beq.w	8003df2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003c90:	4b4d      	ldr	r3, [pc, #308]	; (8003dc8 <HAL_GPIO_Init+0x2b8>)
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	4a4c      	ldr	r2, [pc, #304]	; (8003dc8 <HAL_GPIO_Init+0x2b8>)
 8003c96:	f043 0301 	orr.w	r3, r3, #1
 8003c9a:	6193      	str	r3, [r2, #24]
 8003c9c:	4b4a      	ldr	r3, [pc, #296]	; (8003dc8 <HAL_GPIO_Init+0x2b8>)
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	60bb      	str	r3, [r7, #8]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003ca8:	4a48      	ldr	r2, [pc, #288]	; (8003dcc <HAL_GPIO_Init+0x2bc>)
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	089b      	lsrs	r3, r3, #2
 8003cae:	3302      	adds	r3, #2
 8003cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cb4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	f003 0303 	and.w	r3, r3, #3
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	220f      	movs	r2, #15
 8003cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc4:	43db      	mvns	r3, r3
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a40      	ldr	r2, [pc, #256]	; (8003dd0 <HAL_GPIO_Init+0x2c0>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d013      	beq.n	8003cfc <HAL_GPIO_Init+0x1ec>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a3f      	ldr	r2, [pc, #252]	; (8003dd4 <HAL_GPIO_Init+0x2c4>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d00d      	beq.n	8003cf8 <HAL_GPIO_Init+0x1e8>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a3e      	ldr	r2, [pc, #248]	; (8003dd8 <HAL_GPIO_Init+0x2c8>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d007      	beq.n	8003cf4 <HAL_GPIO_Init+0x1e4>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a3d      	ldr	r2, [pc, #244]	; (8003ddc <HAL_GPIO_Init+0x2cc>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d101      	bne.n	8003cf0 <HAL_GPIO_Init+0x1e0>
 8003cec:	2303      	movs	r3, #3
 8003cee:	e006      	b.n	8003cfe <HAL_GPIO_Init+0x1ee>
 8003cf0:	2304      	movs	r3, #4
 8003cf2:	e004      	b.n	8003cfe <HAL_GPIO_Init+0x1ee>
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	e002      	b.n	8003cfe <HAL_GPIO_Init+0x1ee>
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e000      	b.n	8003cfe <HAL_GPIO_Init+0x1ee>
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d00:	f002 0203 	and.w	r2, r2, #3
 8003d04:	0092      	lsls	r2, r2, #2
 8003d06:	4093      	lsls	r3, r2
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003d0e:	492f      	ldr	r1, [pc, #188]	; (8003dcc <HAL_GPIO_Init+0x2bc>)
 8003d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d12:	089b      	lsrs	r3, r3, #2
 8003d14:	3302      	adds	r3, #2
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d006      	beq.n	8003d36 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003d28:	4b2d      	ldr	r3, [pc, #180]	; (8003de0 <HAL_GPIO_Init+0x2d0>)
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	492c      	ldr	r1, [pc, #176]	; (8003de0 <HAL_GPIO_Init+0x2d0>)
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	600b      	str	r3, [r1, #0]
 8003d34:	e006      	b.n	8003d44 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003d36:	4b2a      	ldr	r3, [pc, #168]	; (8003de0 <HAL_GPIO_Init+0x2d0>)
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	43db      	mvns	r3, r3
 8003d3e:	4928      	ldr	r1, [pc, #160]	; (8003de0 <HAL_GPIO_Init+0x2d0>)
 8003d40:	4013      	ands	r3, r2
 8003d42:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d006      	beq.n	8003d5e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003d50:	4b23      	ldr	r3, [pc, #140]	; (8003de0 <HAL_GPIO_Init+0x2d0>)
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	4922      	ldr	r1, [pc, #136]	; (8003de0 <HAL_GPIO_Init+0x2d0>)
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	604b      	str	r3, [r1, #4]
 8003d5c:	e006      	b.n	8003d6c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003d5e:	4b20      	ldr	r3, [pc, #128]	; (8003de0 <HAL_GPIO_Init+0x2d0>)
 8003d60:	685a      	ldr	r2, [r3, #4]
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	43db      	mvns	r3, r3
 8003d66:	491e      	ldr	r1, [pc, #120]	; (8003de0 <HAL_GPIO_Init+0x2d0>)
 8003d68:	4013      	ands	r3, r2
 8003d6a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d006      	beq.n	8003d86 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003d78:	4b19      	ldr	r3, [pc, #100]	; (8003de0 <HAL_GPIO_Init+0x2d0>)
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	4918      	ldr	r1, [pc, #96]	; (8003de0 <HAL_GPIO_Init+0x2d0>)
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	608b      	str	r3, [r1, #8]
 8003d84:	e006      	b.n	8003d94 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003d86:	4b16      	ldr	r3, [pc, #88]	; (8003de0 <HAL_GPIO_Init+0x2d0>)
 8003d88:	689a      	ldr	r2, [r3, #8]
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	4914      	ldr	r1, [pc, #80]	; (8003de0 <HAL_GPIO_Init+0x2d0>)
 8003d90:	4013      	ands	r3, r2
 8003d92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d021      	beq.n	8003de4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003da0:	4b0f      	ldr	r3, [pc, #60]	; (8003de0 <HAL_GPIO_Init+0x2d0>)
 8003da2:	68da      	ldr	r2, [r3, #12]
 8003da4:	490e      	ldr	r1, [pc, #56]	; (8003de0 <HAL_GPIO_Init+0x2d0>)
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	60cb      	str	r3, [r1, #12]
 8003dac:	e021      	b.n	8003df2 <HAL_GPIO_Init+0x2e2>
 8003dae:	bf00      	nop
 8003db0:	10320000 	.word	0x10320000
 8003db4:	10310000 	.word	0x10310000
 8003db8:	10220000 	.word	0x10220000
 8003dbc:	10210000 	.word	0x10210000
 8003dc0:	10120000 	.word	0x10120000
 8003dc4:	10110000 	.word	0x10110000
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	40010000 	.word	0x40010000
 8003dd0:	40010800 	.word	0x40010800
 8003dd4:	40010c00 	.word	0x40010c00
 8003dd8:	40011000 	.word	0x40011000
 8003ddc:	40011400 	.word	0x40011400
 8003de0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003de4:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <HAL_GPIO_Init+0x304>)
 8003de6:	68da      	ldr	r2, [r3, #12]
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	43db      	mvns	r3, r3
 8003dec:	4909      	ldr	r1, [pc, #36]	; (8003e14 <HAL_GPIO_Init+0x304>)
 8003dee:	4013      	ands	r3, r2
 8003df0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df4:	3301      	adds	r3, #1
 8003df6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f47f ae8e 	bne.w	8003b24 <HAL_GPIO_Init+0x14>
  }
}
 8003e08:	bf00      	nop
 8003e0a:	bf00      	nop
 8003e0c:	372c      	adds	r7, #44	; 0x2c
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bc80      	pop	{r7}
 8003e12:	4770      	bx	lr
 8003e14:	40010400 	.word	0x40010400

08003e18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	460b      	mov	r3, r1
 8003e22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689a      	ldr	r2, [r3, #8]
 8003e28:	887b      	ldrh	r3, [r7, #2]
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d002      	beq.n	8003e36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e30:	2301      	movs	r3, #1
 8003e32:	73fb      	strb	r3, [r7, #15]
 8003e34:	e001      	b.n	8003e3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e36:	2300      	movs	r3, #0
 8003e38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3714      	adds	r7, #20
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bc80      	pop	{r7}
 8003e44:	4770      	bx	lr

08003e46 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
 8003e4e:	460b      	mov	r3, r1
 8003e50:	807b      	strh	r3, [r7, #2]
 8003e52:	4613      	mov	r3, r2
 8003e54:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e56:	787b      	ldrb	r3, [r7, #1]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d003      	beq.n	8003e64 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e5c:	887a      	ldrh	r2, [r7, #2]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003e62:	e003      	b.n	8003e6c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e64:	887b      	ldrh	r3, [r7, #2]
 8003e66:	041a      	lsls	r2, r3, #16
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	611a      	str	r2, [r3, #16]
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bc80      	pop	{r7}
 8003e74:	4770      	bx	lr

08003e76 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e76:	b480      	push	{r7}
 8003e78:	b085      	sub	sp, #20
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
 8003e7e:	460b      	mov	r3, r1
 8003e80:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e88:	887a      	ldrh	r2, [r7, #2]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	041a      	lsls	r2, r3, #16
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	43d9      	mvns	r1, r3
 8003e94:	887b      	ldrh	r3, [r7, #2]
 8003e96:	400b      	ands	r3, r1
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	611a      	str	r2, [r3, #16]
}
 8003e9e:	bf00      	nop
 8003ea0:	3714      	adds	r7, #20
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bc80      	pop	{r7}
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	4603      	mov	r3, r0
 8003eb0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003eb2:	4b08      	ldr	r3, [pc, #32]	; (8003ed4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003eb4:	695a      	ldr	r2, [r3, #20]
 8003eb6:	88fb      	ldrh	r3, [r7, #6]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d006      	beq.n	8003ecc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ebe:	4a05      	ldr	r2, [pc, #20]	; (8003ed4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ec0:	88fb      	ldrh	r3, [r7, #6]
 8003ec2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ec4:	88fb      	ldrh	r3, [r7, #6]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fe fca8 	bl	800281c <HAL_GPIO_EXTI_Callback>
  }
}
 8003ecc:	bf00      	nop
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	40010400 	.word	0x40010400

08003ed8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e12b      	b.n	8004142 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d106      	bne.n	8003f04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7fd fc40 	bl	8001784 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2224      	movs	r2, #36	; 0x24
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 0201 	bic.w	r2, r2, #1
 8003f1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f3c:	f000 ffea 	bl	8004f14 <HAL_RCC_GetPCLK1Freq>
 8003f40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	4a81      	ldr	r2, [pc, #516]	; (800414c <HAL_I2C_Init+0x274>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d807      	bhi.n	8003f5c <HAL_I2C_Init+0x84>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	4a80      	ldr	r2, [pc, #512]	; (8004150 <HAL_I2C_Init+0x278>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	bf94      	ite	ls
 8003f54:	2301      	movls	r3, #1
 8003f56:	2300      	movhi	r3, #0
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	e006      	b.n	8003f6a <HAL_I2C_Init+0x92>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	4a7d      	ldr	r2, [pc, #500]	; (8004154 <HAL_I2C_Init+0x27c>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	bf94      	ite	ls
 8003f64:	2301      	movls	r3, #1
 8003f66:	2300      	movhi	r3, #0
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e0e7      	b.n	8004142 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4a78      	ldr	r2, [pc, #480]	; (8004158 <HAL_I2C_Init+0x280>)
 8003f76:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7a:	0c9b      	lsrs	r3, r3, #18
 8003f7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	4a6a      	ldr	r2, [pc, #424]	; (800414c <HAL_I2C_Init+0x274>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d802      	bhi.n	8003fac <HAL_I2C_Init+0xd4>
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	e009      	b.n	8003fc0 <HAL_I2C_Init+0xe8>
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003fb2:	fb02 f303 	mul.w	r3, r2, r3
 8003fb6:	4a69      	ldr	r2, [pc, #420]	; (800415c <HAL_I2C_Init+0x284>)
 8003fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbc:	099b      	lsrs	r3, r3, #6
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6812      	ldr	r2, [r2, #0]
 8003fc4:	430b      	orrs	r3, r1
 8003fc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003fd2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	495c      	ldr	r1, [pc, #368]	; (800414c <HAL_I2C_Init+0x274>)
 8003fdc:	428b      	cmp	r3, r1
 8003fde:	d819      	bhi.n	8004014 <HAL_I2C_Init+0x13c>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	1e59      	subs	r1, r3, #1
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	005b      	lsls	r3, r3, #1
 8003fea:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fee:	1c59      	adds	r1, r3, #1
 8003ff0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ff4:	400b      	ands	r3, r1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <HAL_I2C_Init+0x138>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	1e59      	subs	r1, r3, #1
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	fbb1 f3f3 	udiv	r3, r1, r3
 8004008:	3301      	adds	r3, #1
 800400a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800400e:	e051      	b.n	80040b4 <HAL_I2C_Init+0x1dc>
 8004010:	2304      	movs	r3, #4
 8004012:	e04f      	b.n	80040b4 <HAL_I2C_Init+0x1dc>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d111      	bne.n	8004040 <HAL_I2C_Init+0x168>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	1e58      	subs	r0, r3, #1
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6859      	ldr	r1, [r3, #4]
 8004024:	460b      	mov	r3, r1
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	440b      	add	r3, r1
 800402a:	fbb0 f3f3 	udiv	r3, r0, r3
 800402e:	3301      	adds	r3, #1
 8004030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004034:	2b00      	cmp	r3, #0
 8004036:	bf0c      	ite	eq
 8004038:	2301      	moveq	r3, #1
 800403a:	2300      	movne	r3, #0
 800403c:	b2db      	uxtb	r3, r3
 800403e:	e012      	b.n	8004066 <HAL_I2C_Init+0x18e>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	1e58      	subs	r0, r3, #1
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6859      	ldr	r1, [r3, #4]
 8004048:	460b      	mov	r3, r1
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	440b      	add	r3, r1
 800404e:	0099      	lsls	r1, r3, #2
 8004050:	440b      	add	r3, r1
 8004052:	fbb0 f3f3 	udiv	r3, r0, r3
 8004056:	3301      	adds	r3, #1
 8004058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800405c:	2b00      	cmp	r3, #0
 800405e:	bf0c      	ite	eq
 8004060:	2301      	moveq	r3, #1
 8004062:	2300      	movne	r3, #0
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <HAL_I2C_Init+0x196>
 800406a:	2301      	movs	r3, #1
 800406c:	e022      	b.n	80040b4 <HAL_I2C_Init+0x1dc>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10e      	bne.n	8004094 <HAL_I2C_Init+0x1bc>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	1e58      	subs	r0, r3, #1
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6859      	ldr	r1, [r3, #4]
 800407e:	460b      	mov	r3, r1
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	440b      	add	r3, r1
 8004084:	fbb0 f3f3 	udiv	r3, r0, r3
 8004088:	3301      	adds	r3, #1
 800408a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800408e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004092:	e00f      	b.n	80040b4 <HAL_I2C_Init+0x1dc>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	1e58      	subs	r0, r3, #1
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6859      	ldr	r1, [r3, #4]
 800409c:	460b      	mov	r3, r1
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	440b      	add	r3, r1
 80040a2:	0099      	lsls	r1, r3, #2
 80040a4:	440b      	add	r3, r1
 80040a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80040aa:	3301      	adds	r3, #1
 80040ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040b4:	6879      	ldr	r1, [r7, #4]
 80040b6:	6809      	ldr	r1, [r1, #0]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	69da      	ldr	r2, [r3, #28]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	431a      	orrs	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80040e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	6911      	ldr	r1, [r2, #16]
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	68d2      	ldr	r2, [r2, #12]
 80040ee:	4311      	orrs	r1, r2
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6812      	ldr	r2, [r2, #0]
 80040f4:	430b      	orrs	r3, r1
 80040f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	695a      	ldr	r2, [r3, #20]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 0201 	orr.w	r2, r2, #1
 8004122:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2220      	movs	r2, #32
 800412e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	000186a0 	.word	0x000186a0
 8004150:	001e847f 	.word	0x001e847f
 8004154:	003d08ff 	.word	0x003d08ff
 8004158:	431bde83 	.word	0x431bde83
 800415c:	10624dd3 	.word	0x10624dd3

08004160 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b088      	sub	sp, #32
 8004164:	af02      	add	r7, sp, #8
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	607a      	str	r2, [r7, #4]
 800416a:	461a      	mov	r2, r3
 800416c:	460b      	mov	r3, r1
 800416e:	817b      	strh	r3, [r7, #10]
 8004170:	4613      	mov	r3, r2
 8004172:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004174:	f7fe ff7e 	bl	8003074 <HAL_GetTick>
 8004178:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b20      	cmp	r3, #32
 8004184:	f040 80e0 	bne.w	8004348 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	9300      	str	r3, [sp, #0]
 800418c:	2319      	movs	r3, #25
 800418e:	2201      	movs	r2, #1
 8004190:	4970      	ldr	r1, [pc, #448]	; (8004354 <HAL_I2C_Master_Transmit+0x1f4>)
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f000 f964 	bl	8004460 <I2C_WaitOnFlagUntilTimeout>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800419e:	2302      	movs	r3, #2
 80041a0:	e0d3      	b.n	800434a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d101      	bne.n	80041b0 <HAL_I2C_Master_Transmit+0x50>
 80041ac:	2302      	movs	r3, #2
 80041ae:	e0cc      	b.n	800434a <HAL_I2C_Master_Transmit+0x1ea>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d007      	beq.n	80041d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f042 0201 	orr.w	r2, r2, #1
 80041d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2221      	movs	r2, #33	; 0x21
 80041ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2210      	movs	r2, #16
 80041f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	893a      	ldrh	r2, [r7, #8]
 8004206:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420c:	b29a      	uxth	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	4a50      	ldr	r2, [pc, #320]	; (8004358 <HAL_I2C_Master_Transmit+0x1f8>)
 8004216:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004218:	8979      	ldrh	r1, [r7, #10]
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	6a3a      	ldr	r2, [r7, #32]
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f000 f89c 	bl	800435c <I2C_MasterRequestWrite>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e08d      	b.n	800434a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800422e:	2300      	movs	r3, #0
 8004230:	613b      	str	r3, [r7, #16]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	613b      	str	r3, [r7, #16]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	613b      	str	r3, [r7, #16]
 8004242:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004244:	e066      	b.n	8004314 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	6a39      	ldr	r1, [r7, #32]
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 f9de 	bl	800460c <I2C_WaitOnTXEFlagUntilTimeout>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00d      	beq.n	8004272 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	2b04      	cmp	r3, #4
 800425c:	d107      	bne.n	800426e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800426c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e06b      	b.n	800434a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	781a      	ldrb	r2, [r3, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004282:	1c5a      	adds	r2, r3, #1
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428c:	b29b      	uxth	r3, r3
 800428e:	3b01      	subs	r3, #1
 8004290:	b29a      	uxth	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800429a:	3b01      	subs	r3, #1
 800429c:	b29a      	uxth	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	d11b      	bne.n	80042e8 <HAL_I2C_Master_Transmit+0x188>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d017      	beq.n	80042e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	781a      	ldrb	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	1c5a      	adds	r2, r3, #1
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	3b01      	subs	r3, #1
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e0:	3b01      	subs	r3, #1
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	6a39      	ldr	r1, [r7, #32]
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 f9ce 	bl	800468e <I2C_WaitOnBTFFlagUntilTimeout>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00d      	beq.n	8004314 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fc:	2b04      	cmp	r3, #4
 80042fe:	d107      	bne.n	8004310 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800430e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e01a      	b.n	800434a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004318:	2b00      	cmp	r3, #0
 800431a:	d194      	bne.n	8004246 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800432a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2220      	movs	r2, #32
 8004330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004344:	2300      	movs	r3, #0
 8004346:	e000      	b.n	800434a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004348:	2302      	movs	r3, #2
  }
}
 800434a:	4618      	mov	r0, r3
 800434c:	3718      	adds	r7, #24
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	00100002 	.word	0x00100002
 8004358:	ffff0000 	.word	0xffff0000

0800435c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b088      	sub	sp, #32
 8004360:	af02      	add	r7, sp, #8
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	607a      	str	r2, [r7, #4]
 8004366:	603b      	str	r3, [r7, #0]
 8004368:	460b      	mov	r3, r1
 800436a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004370:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	2b08      	cmp	r3, #8
 8004376:	d006      	beq.n	8004386 <I2C_MasterRequestWrite+0x2a>
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d003      	beq.n	8004386 <I2C_MasterRequestWrite+0x2a>
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004384:	d108      	bne.n	8004398 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004394:	601a      	str	r2, [r3, #0]
 8004396:	e00b      	b.n	80043b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439c:	2b12      	cmp	r3, #18
 800439e:	d107      	bne.n	80043b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 f84f 	bl	8004460 <I2C_WaitOnFlagUntilTimeout>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00d      	beq.n	80043e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043d6:	d103      	bne.n	80043e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e035      	b.n	8004450 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043ec:	d108      	bne.n	8004400 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043ee:	897b      	ldrh	r3, [r7, #10]
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	461a      	mov	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043fc:	611a      	str	r2, [r3, #16]
 80043fe:	e01b      	b.n	8004438 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004400:	897b      	ldrh	r3, [r7, #10]
 8004402:	11db      	asrs	r3, r3, #7
 8004404:	b2db      	uxtb	r3, r3
 8004406:	f003 0306 	and.w	r3, r3, #6
 800440a:	b2db      	uxtb	r3, r3
 800440c:	f063 030f 	orn	r3, r3, #15
 8004410:	b2da      	uxtb	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	490e      	ldr	r1, [pc, #56]	; (8004458 <I2C_MasterRequestWrite+0xfc>)
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 f875 	bl	800450e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e010      	b.n	8004450 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800442e:	897b      	ldrh	r3, [r7, #10]
 8004430:	b2da      	uxtb	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	4907      	ldr	r1, [pc, #28]	; (800445c <I2C_MasterRequestWrite+0x100>)
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f000 f865 	bl	800450e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e000      	b.n	8004450 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3718      	adds	r7, #24
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	00010008 	.word	0x00010008
 800445c:	00010002 	.word	0x00010002

08004460 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	603b      	str	r3, [r7, #0]
 800446c:	4613      	mov	r3, r2
 800446e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004470:	e025      	b.n	80044be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004478:	d021      	beq.n	80044be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800447a:	f7fe fdfb 	bl	8003074 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	429a      	cmp	r2, r3
 8004488:	d302      	bcc.n	8004490 <I2C_WaitOnFlagUntilTimeout+0x30>
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d116      	bne.n	80044be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2220      	movs	r2, #32
 800449a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044aa:	f043 0220 	orr.w	r2, r3, #32
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e023      	b.n	8004506 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	0c1b      	lsrs	r3, r3, #16
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d10d      	bne.n	80044e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	43da      	mvns	r2, r3
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4013      	ands	r3, r2
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	bf0c      	ite	eq
 80044da:	2301      	moveq	r3, #1
 80044dc:	2300      	movne	r3, #0
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	461a      	mov	r2, r3
 80044e2:	e00c      	b.n	80044fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	43da      	mvns	r2, r3
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	4013      	ands	r3, r2
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	bf0c      	ite	eq
 80044f6:	2301      	moveq	r3, #1
 80044f8:	2300      	movne	r3, #0
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	461a      	mov	r2, r3
 80044fe:	79fb      	ldrb	r3, [r7, #7]
 8004500:	429a      	cmp	r2, r3
 8004502:	d0b6      	beq.n	8004472 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b084      	sub	sp, #16
 8004512:	af00      	add	r7, sp, #0
 8004514:	60f8      	str	r0, [r7, #12]
 8004516:	60b9      	str	r1, [r7, #8]
 8004518:	607a      	str	r2, [r7, #4]
 800451a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800451c:	e051      	b.n	80045c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800452c:	d123      	bne.n	8004576 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800453c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004546:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2220      	movs	r2, #32
 8004552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	f043 0204 	orr.w	r2, r3, #4
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e046      	b.n	8004604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457c:	d021      	beq.n	80045c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800457e:	f7fe fd79 	bl	8003074 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	429a      	cmp	r2, r3
 800458c:	d302      	bcc.n	8004594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d116      	bne.n	80045c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2220      	movs	r2, #32
 800459e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	f043 0220 	orr.w	r2, r3, #32
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e020      	b.n	8004604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	0c1b      	lsrs	r3, r3, #16
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d10c      	bne.n	80045e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	43da      	mvns	r2, r3
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	4013      	ands	r3, r2
 80045d8:	b29b      	uxth	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	bf14      	ite	ne
 80045de:	2301      	movne	r3, #1
 80045e0:	2300      	moveq	r3, #0
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	e00b      	b.n	80045fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	43da      	mvns	r2, r3
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	4013      	ands	r3, r2
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	bf14      	ite	ne
 80045f8:	2301      	movne	r3, #1
 80045fa:	2300      	moveq	r3, #0
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d18d      	bne.n	800451e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004618:	e02d      	b.n	8004676 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f000 f878 	bl	8004710 <I2C_IsAcknowledgeFailed>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e02d      	b.n	8004686 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004630:	d021      	beq.n	8004676 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004632:	f7fe fd1f 	bl	8003074 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	429a      	cmp	r2, r3
 8004640:	d302      	bcc.n	8004648 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d116      	bne.n	8004676 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2220      	movs	r2, #32
 8004652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	f043 0220 	orr.w	r2, r3, #32
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e007      	b.n	8004686 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004680:	2b80      	cmp	r3, #128	; 0x80
 8004682:	d1ca      	bne.n	800461a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b084      	sub	sp, #16
 8004692:	af00      	add	r7, sp, #0
 8004694:	60f8      	str	r0, [r7, #12]
 8004696:	60b9      	str	r1, [r7, #8]
 8004698:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800469a:	e02d      	b.n	80046f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f000 f837 	bl	8004710 <I2C_IsAcknowledgeFailed>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d001      	beq.n	80046ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e02d      	b.n	8004708 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b2:	d021      	beq.n	80046f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b4:	f7fe fcde 	bl	8003074 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d302      	bcc.n	80046ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d116      	bne.n	80046f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2220      	movs	r2, #32
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e4:	f043 0220 	orr.w	r2, r3, #32
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e007      	b.n	8004708 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	f003 0304 	and.w	r3, r3, #4
 8004702:	2b04      	cmp	r3, #4
 8004704:	d1ca      	bne.n	800469c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004726:	d11b      	bne.n	8004760 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004730:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2220      	movs	r2, #32
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474c:	f043 0204 	orr.w	r2, r3, #4
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e000      	b.n	8004762 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	bc80      	pop	{r7}
 800476a:	4770      	bx	lr

0800476c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e272      	b.n	8004c64 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	f000 8087 	beq.w	800489a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800478c:	4b92      	ldr	r3, [pc, #584]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f003 030c 	and.w	r3, r3, #12
 8004794:	2b04      	cmp	r3, #4
 8004796:	d00c      	beq.n	80047b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004798:	4b8f      	ldr	r3, [pc, #572]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f003 030c 	and.w	r3, r3, #12
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	d112      	bne.n	80047ca <HAL_RCC_OscConfig+0x5e>
 80047a4:	4b8c      	ldr	r3, [pc, #560]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047b0:	d10b      	bne.n	80047ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047b2:	4b89      	ldr	r3, [pc, #548]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d06c      	beq.n	8004898 <HAL_RCC_OscConfig+0x12c>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d168      	bne.n	8004898 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e24c      	b.n	8004c64 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047d2:	d106      	bne.n	80047e2 <HAL_RCC_OscConfig+0x76>
 80047d4:	4b80      	ldr	r3, [pc, #512]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a7f      	ldr	r2, [pc, #508]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 80047da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047de:	6013      	str	r3, [r2, #0]
 80047e0:	e02e      	b.n	8004840 <HAL_RCC_OscConfig+0xd4>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10c      	bne.n	8004804 <HAL_RCC_OscConfig+0x98>
 80047ea:	4b7b      	ldr	r3, [pc, #492]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a7a      	ldr	r2, [pc, #488]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 80047f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047f4:	6013      	str	r3, [r2, #0]
 80047f6:	4b78      	ldr	r3, [pc, #480]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a77      	ldr	r2, [pc, #476]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 80047fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004800:	6013      	str	r3, [r2, #0]
 8004802:	e01d      	b.n	8004840 <HAL_RCC_OscConfig+0xd4>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800480c:	d10c      	bne.n	8004828 <HAL_RCC_OscConfig+0xbc>
 800480e:	4b72      	ldr	r3, [pc, #456]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a71      	ldr	r2, [pc, #452]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 8004814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	4b6f      	ldr	r3, [pc, #444]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a6e      	ldr	r2, [pc, #440]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 8004820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004824:	6013      	str	r3, [r2, #0]
 8004826:	e00b      	b.n	8004840 <HAL_RCC_OscConfig+0xd4>
 8004828:	4b6b      	ldr	r3, [pc, #428]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a6a      	ldr	r2, [pc, #424]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 800482e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004832:	6013      	str	r3, [r2, #0]
 8004834:	4b68      	ldr	r3, [pc, #416]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a67      	ldr	r2, [pc, #412]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 800483a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800483e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d013      	beq.n	8004870 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004848:	f7fe fc14 	bl	8003074 <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004850:	f7fe fc10 	bl	8003074 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b64      	cmp	r3, #100	; 0x64
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e200      	b.n	8004c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004862:	4b5d      	ldr	r3, [pc, #372]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d0f0      	beq.n	8004850 <HAL_RCC_OscConfig+0xe4>
 800486e:	e014      	b.n	800489a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004870:	f7fe fc00 	bl	8003074 <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004878:	f7fe fbfc 	bl	8003074 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b64      	cmp	r3, #100	; 0x64
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e1ec      	b.n	8004c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800488a:	4b53      	ldr	r3, [pc, #332]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1f0      	bne.n	8004878 <HAL_RCC_OscConfig+0x10c>
 8004896:	e000      	b.n	800489a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d063      	beq.n	800496e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80048a6:	4b4c      	ldr	r3, [pc, #304]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f003 030c 	and.w	r3, r3, #12
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00b      	beq.n	80048ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80048b2:	4b49      	ldr	r3, [pc, #292]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f003 030c 	and.w	r3, r3, #12
 80048ba:	2b08      	cmp	r3, #8
 80048bc:	d11c      	bne.n	80048f8 <HAL_RCC_OscConfig+0x18c>
 80048be:	4b46      	ldr	r3, [pc, #280]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d116      	bne.n	80048f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ca:	4b43      	ldr	r3, [pc, #268]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d005      	beq.n	80048e2 <HAL_RCC_OscConfig+0x176>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d001      	beq.n	80048e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e1c0      	b.n	8004c64 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048e2:	4b3d      	ldr	r3, [pc, #244]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	4939      	ldr	r1, [pc, #228]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048f6:	e03a      	b.n	800496e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d020      	beq.n	8004942 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004900:	4b36      	ldr	r3, [pc, #216]	; (80049dc <HAL_RCC_OscConfig+0x270>)
 8004902:	2201      	movs	r2, #1
 8004904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004906:	f7fe fbb5 	bl	8003074 <HAL_GetTick>
 800490a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800490c:	e008      	b.n	8004920 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800490e:	f7fe fbb1 	bl	8003074 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e1a1      	b.n	8004c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004920:	4b2d      	ldr	r3, [pc, #180]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d0f0      	beq.n	800490e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800492c:	4b2a      	ldr	r3, [pc, #168]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	00db      	lsls	r3, r3, #3
 800493a:	4927      	ldr	r1, [pc, #156]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 800493c:	4313      	orrs	r3, r2
 800493e:	600b      	str	r3, [r1, #0]
 8004940:	e015      	b.n	800496e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004942:	4b26      	ldr	r3, [pc, #152]	; (80049dc <HAL_RCC_OscConfig+0x270>)
 8004944:	2200      	movs	r2, #0
 8004946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004948:	f7fe fb94 	bl	8003074 <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004950:	f7fe fb90 	bl	8003074 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e180      	b.n	8004c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004962:	4b1d      	ldr	r3, [pc, #116]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1f0      	bne.n	8004950 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0308 	and.w	r3, r3, #8
 8004976:	2b00      	cmp	r3, #0
 8004978:	d03a      	beq.n	80049f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d019      	beq.n	80049b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004982:	4b17      	ldr	r3, [pc, #92]	; (80049e0 <HAL_RCC_OscConfig+0x274>)
 8004984:	2201      	movs	r2, #1
 8004986:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004988:	f7fe fb74 	bl	8003074 <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004990:	f7fe fb70 	bl	8003074 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e160      	b.n	8004c64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049a2:	4b0d      	ldr	r3, [pc, #52]	; (80049d8 <HAL_RCC_OscConfig+0x26c>)
 80049a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0f0      	beq.n	8004990 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80049ae:	2001      	movs	r0, #1
 80049b0:	f000 fac4 	bl	8004f3c <RCC_Delay>
 80049b4:	e01c      	b.n	80049f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049b6:	4b0a      	ldr	r3, [pc, #40]	; (80049e0 <HAL_RCC_OscConfig+0x274>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049bc:	f7fe fb5a 	bl	8003074 <HAL_GetTick>
 80049c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049c2:	e00f      	b.n	80049e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049c4:	f7fe fb56 	bl	8003074 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d908      	bls.n	80049e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e146      	b.n	8004c64 <HAL_RCC_OscConfig+0x4f8>
 80049d6:	bf00      	nop
 80049d8:	40021000 	.word	0x40021000
 80049dc:	42420000 	.word	0x42420000
 80049e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049e4:	4b92      	ldr	r3, [pc, #584]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 80049e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1e9      	bne.n	80049c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0304 	and.w	r3, r3, #4
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 80a6 	beq.w	8004b4a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049fe:	2300      	movs	r3, #0
 8004a00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a02:	4b8b      	ldr	r3, [pc, #556]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10d      	bne.n	8004a2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a0e:	4b88      	ldr	r3, [pc, #544]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004a10:	69db      	ldr	r3, [r3, #28]
 8004a12:	4a87      	ldr	r2, [pc, #540]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a18:	61d3      	str	r3, [r2, #28]
 8004a1a:	4b85      	ldr	r3, [pc, #532]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a22:	60bb      	str	r3, [r7, #8]
 8004a24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a26:	2301      	movs	r3, #1
 8004a28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a2a:	4b82      	ldr	r3, [pc, #520]	; (8004c34 <HAL_RCC_OscConfig+0x4c8>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d118      	bne.n	8004a68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a36:	4b7f      	ldr	r3, [pc, #508]	; (8004c34 <HAL_RCC_OscConfig+0x4c8>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a7e      	ldr	r2, [pc, #504]	; (8004c34 <HAL_RCC_OscConfig+0x4c8>)
 8004a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a42:	f7fe fb17 	bl	8003074 <HAL_GetTick>
 8004a46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a48:	e008      	b.n	8004a5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a4a:	f7fe fb13 	bl	8003074 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b64      	cmp	r3, #100	; 0x64
 8004a56:	d901      	bls.n	8004a5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e103      	b.n	8004c64 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a5c:	4b75      	ldr	r3, [pc, #468]	; (8004c34 <HAL_RCC_OscConfig+0x4c8>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d0f0      	beq.n	8004a4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d106      	bne.n	8004a7e <HAL_RCC_OscConfig+0x312>
 8004a70:	4b6f      	ldr	r3, [pc, #444]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	4a6e      	ldr	r2, [pc, #440]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004a76:	f043 0301 	orr.w	r3, r3, #1
 8004a7a:	6213      	str	r3, [r2, #32]
 8004a7c:	e02d      	b.n	8004ada <HAL_RCC_OscConfig+0x36e>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10c      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x334>
 8004a86:	4b6a      	ldr	r3, [pc, #424]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	4a69      	ldr	r2, [pc, #420]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004a8c:	f023 0301 	bic.w	r3, r3, #1
 8004a90:	6213      	str	r3, [r2, #32]
 8004a92:	4b67      	ldr	r3, [pc, #412]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	4a66      	ldr	r2, [pc, #408]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004a98:	f023 0304 	bic.w	r3, r3, #4
 8004a9c:	6213      	str	r3, [r2, #32]
 8004a9e:	e01c      	b.n	8004ada <HAL_RCC_OscConfig+0x36e>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	2b05      	cmp	r3, #5
 8004aa6:	d10c      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x356>
 8004aa8:	4b61      	ldr	r3, [pc, #388]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	4a60      	ldr	r2, [pc, #384]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004aae:	f043 0304 	orr.w	r3, r3, #4
 8004ab2:	6213      	str	r3, [r2, #32]
 8004ab4:	4b5e      	ldr	r3, [pc, #376]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	4a5d      	ldr	r2, [pc, #372]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004aba:	f043 0301 	orr.w	r3, r3, #1
 8004abe:	6213      	str	r3, [r2, #32]
 8004ac0:	e00b      	b.n	8004ada <HAL_RCC_OscConfig+0x36e>
 8004ac2:	4b5b      	ldr	r3, [pc, #364]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	4a5a      	ldr	r2, [pc, #360]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004ac8:	f023 0301 	bic.w	r3, r3, #1
 8004acc:	6213      	str	r3, [r2, #32]
 8004ace:	4b58      	ldr	r3, [pc, #352]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	4a57      	ldr	r2, [pc, #348]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004ad4:	f023 0304 	bic.w	r3, r3, #4
 8004ad8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d015      	beq.n	8004b0e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ae2:	f7fe fac7 	bl	8003074 <HAL_GetTick>
 8004ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ae8:	e00a      	b.n	8004b00 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aea:	f7fe fac3 	bl	8003074 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d901      	bls.n	8004b00 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e0b1      	b.n	8004c64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b00:	4b4b      	ldr	r3, [pc, #300]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004b02:	6a1b      	ldr	r3, [r3, #32]
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d0ee      	beq.n	8004aea <HAL_RCC_OscConfig+0x37e>
 8004b0c:	e014      	b.n	8004b38 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b0e:	f7fe fab1 	bl	8003074 <HAL_GetTick>
 8004b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b14:	e00a      	b.n	8004b2c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b16:	f7fe faad 	bl	8003074 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e09b      	b.n	8004c64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b2c:	4b40      	ldr	r3, [pc, #256]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004b2e:	6a1b      	ldr	r3, [r3, #32]
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1ee      	bne.n	8004b16 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b38:	7dfb      	ldrb	r3, [r7, #23]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d105      	bne.n	8004b4a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b3e:	4b3c      	ldr	r3, [pc, #240]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	4a3b      	ldr	r2, [pc, #236]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004b44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b48:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f000 8087 	beq.w	8004c62 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b54:	4b36      	ldr	r3, [pc, #216]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f003 030c 	and.w	r3, r3, #12
 8004b5c:	2b08      	cmp	r3, #8
 8004b5e:	d061      	beq.n	8004c24 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	69db      	ldr	r3, [r3, #28]
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d146      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b68:	4b33      	ldr	r3, [pc, #204]	; (8004c38 <HAL_RCC_OscConfig+0x4cc>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b6e:	f7fe fa81 	bl	8003074 <HAL_GetTick>
 8004b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b74:	e008      	b.n	8004b88 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b76:	f7fe fa7d 	bl	8003074 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e06d      	b.n	8004c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b88:	4b29      	ldr	r3, [pc, #164]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1f0      	bne.n	8004b76 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b9c:	d108      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b9e:	4b24      	ldr	r3, [pc, #144]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	4921      	ldr	r1, [pc, #132]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bb0:	4b1f      	ldr	r3, [pc, #124]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a19      	ldr	r1, [r3, #32]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc0:	430b      	orrs	r3, r1
 8004bc2:	491b      	ldr	r1, [pc, #108]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bc8:	4b1b      	ldr	r3, [pc, #108]	; (8004c38 <HAL_RCC_OscConfig+0x4cc>)
 8004bca:	2201      	movs	r2, #1
 8004bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bce:	f7fe fa51 	bl	8003074 <HAL_GetTick>
 8004bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004bd4:	e008      	b.n	8004be8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd6:	f7fe fa4d 	bl	8003074 <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d901      	bls.n	8004be8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e03d      	b.n	8004c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004be8:	4b11      	ldr	r3, [pc, #68]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d0f0      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x46a>
 8004bf4:	e035      	b.n	8004c62 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bf6:	4b10      	ldr	r3, [pc, #64]	; (8004c38 <HAL_RCC_OscConfig+0x4cc>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bfc:	f7fe fa3a 	bl	8003074 <HAL_GetTick>
 8004c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c02:	e008      	b.n	8004c16 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c04:	f7fe fa36 	bl	8003074 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e026      	b.n	8004c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c16:	4b06      	ldr	r3, [pc, #24]	; (8004c30 <HAL_RCC_OscConfig+0x4c4>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1f0      	bne.n	8004c04 <HAL_RCC_OscConfig+0x498>
 8004c22:	e01e      	b.n	8004c62 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d107      	bne.n	8004c3c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e019      	b.n	8004c64 <HAL_RCC_OscConfig+0x4f8>
 8004c30:	40021000 	.word	0x40021000
 8004c34:	40007000 	.word	0x40007000
 8004c38:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004c3c:	4b0b      	ldr	r3, [pc, #44]	; (8004c6c <HAL_RCC_OscConfig+0x500>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a1b      	ldr	r3, [r3, #32]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d106      	bne.n	8004c5e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d001      	beq.n	8004c62 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e000      	b.n	8004c64 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3718      	adds	r7, #24
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40021000 	.word	0x40021000

08004c70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d101      	bne.n	8004c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e0d0      	b.n	8004e26 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c84:	4b6a      	ldr	r3, [pc, #424]	; (8004e30 <HAL_RCC_ClockConfig+0x1c0>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0307 	and.w	r3, r3, #7
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d910      	bls.n	8004cb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c92:	4b67      	ldr	r3, [pc, #412]	; (8004e30 <HAL_RCC_ClockConfig+0x1c0>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f023 0207 	bic.w	r2, r3, #7
 8004c9a:	4965      	ldr	r1, [pc, #404]	; (8004e30 <HAL_RCC_ClockConfig+0x1c0>)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ca2:	4b63      	ldr	r3, [pc, #396]	; (8004e30 <HAL_RCC_ClockConfig+0x1c0>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0307 	and.w	r3, r3, #7
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d001      	beq.n	8004cb4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e0b8      	b.n	8004e26 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d020      	beq.n	8004d02 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0304 	and.w	r3, r3, #4
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d005      	beq.n	8004cd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ccc:	4b59      	ldr	r3, [pc, #356]	; (8004e34 <HAL_RCC_ClockConfig+0x1c4>)
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	4a58      	ldr	r2, [pc, #352]	; (8004e34 <HAL_RCC_ClockConfig+0x1c4>)
 8004cd2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004cd6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0308 	and.w	r3, r3, #8
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d005      	beq.n	8004cf0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ce4:	4b53      	ldr	r3, [pc, #332]	; (8004e34 <HAL_RCC_ClockConfig+0x1c4>)
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	4a52      	ldr	r2, [pc, #328]	; (8004e34 <HAL_RCC_ClockConfig+0x1c4>)
 8004cea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004cee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cf0:	4b50      	ldr	r3, [pc, #320]	; (8004e34 <HAL_RCC_ClockConfig+0x1c4>)
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	494d      	ldr	r1, [pc, #308]	; (8004e34 <HAL_RCC_ClockConfig+0x1c4>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d040      	beq.n	8004d90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d107      	bne.n	8004d26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d16:	4b47      	ldr	r3, [pc, #284]	; (8004e34 <HAL_RCC_ClockConfig+0x1c4>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d115      	bne.n	8004d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e07f      	b.n	8004e26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d107      	bne.n	8004d3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d2e:	4b41      	ldr	r3, [pc, #260]	; (8004e34 <HAL_RCC_ClockConfig+0x1c4>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d109      	bne.n	8004d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e073      	b.n	8004e26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d3e:	4b3d      	ldr	r3, [pc, #244]	; (8004e34 <HAL_RCC_ClockConfig+0x1c4>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e06b      	b.n	8004e26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d4e:	4b39      	ldr	r3, [pc, #228]	; (8004e34 <HAL_RCC_ClockConfig+0x1c4>)
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f023 0203 	bic.w	r2, r3, #3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	4936      	ldr	r1, [pc, #216]	; (8004e34 <HAL_RCC_ClockConfig+0x1c4>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d60:	f7fe f988 	bl	8003074 <HAL_GetTick>
 8004d64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d66:	e00a      	b.n	8004d7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d68:	f7fe f984 	bl	8003074 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e053      	b.n	8004e26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d7e:	4b2d      	ldr	r3, [pc, #180]	; (8004e34 <HAL_RCC_ClockConfig+0x1c4>)
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f003 020c 	and.w	r2, r3, #12
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d1eb      	bne.n	8004d68 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d90:	4b27      	ldr	r3, [pc, #156]	; (8004e30 <HAL_RCC_ClockConfig+0x1c0>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0307 	and.w	r3, r3, #7
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d210      	bcs.n	8004dc0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d9e:	4b24      	ldr	r3, [pc, #144]	; (8004e30 <HAL_RCC_ClockConfig+0x1c0>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f023 0207 	bic.w	r2, r3, #7
 8004da6:	4922      	ldr	r1, [pc, #136]	; (8004e30 <HAL_RCC_ClockConfig+0x1c0>)
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dae:	4b20      	ldr	r3, [pc, #128]	; (8004e30 <HAL_RCC_ClockConfig+0x1c0>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0307 	and.w	r3, r3, #7
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d001      	beq.n	8004dc0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e032      	b.n	8004e26 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0304 	and.w	r3, r3, #4
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d008      	beq.n	8004dde <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dcc:	4b19      	ldr	r3, [pc, #100]	; (8004e34 <HAL_RCC_ClockConfig+0x1c4>)
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	4916      	ldr	r1, [pc, #88]	; (8004e34 <HAL_RCC_ClockConfig+0x1c4>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0308 	and.w	r3, r3, #8
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d009      	beq.n	8004dfe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004dea:	4b12      	ldr	r3, [pc, #72]	; (8004e34 <HAL_RCC_ClockConfig+0x1c4>)
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	00db      	lsls	r3, r3, #3
 8004df8:	490e      	ldr	r1, [pc, #56]	; (8004e34 <HAL_RCC_ClockConfig+0x1c4>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004dfe:	f000 f821 	bl	8004e44 <HAL_RCC_GetSysClockFreq>
 8004e02:	4602      	mov	r2, r0
 8004e04:	4b0b      	ldr	r3, [pc, #44]	; (8004e34 <HAL_RCC_ClockConfig+0x1c4>)
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	091b      	lsrs	r3, r3, #4
 8004e0a:	f003 030f 	and.w	r3, r3, #15
 8004e0e:	490a      	ldr	r1, [pc, #40]	; (8004e38 <HAL_RCC_ClockConfig+0x1c8>)
 8004e10:	5ccb      	ldrb	r3, [r1, r3]
 8004e12:	fa22 f303 	lsr.w	r3, r2, r3
 8004e16:	4a09      	ldr	r2, [pc, #36]	; (8004e3c <HAL_RCC_ClockConfig+0x1cc>)
 8004e18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004e1a:	4b09      	ldr	r3, [pc, #36]	; (8004e40 <HAL_RCC_ClockConfig+0x1d0>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7fe f8e6 	bl	8002ff0 <HAL_InitTick>

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	40022000 	.word	0x40022000
 8004e34:	40021000 	.word	0x40021000
 8004e38:	080068dc 	.word	0x080068dc
 8004e3c:	20000000 	.word	0x20000000
 8004e40:	20000020 	.word	0x20000020

08004e44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e44:	b490      	push	{r4, r7}
 8004e46:	b08a      	sub	sp, #40	; 0x28
 8004e48:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004e4a:	4b29      	ldr	r3, [pc, #164]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0xac>)
 8004e4c:	1d3c      	adds	r4, r7, #4
 8004e4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004e54:	f240 2301 	movw	r3, #513	; 0x201
 8004e58:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	61fb      	str	r3, [r7, #28]
 8004e5e:	2300      	movs	r3, #0
 8004e60:	61bb      	str	r3, [r7, #24]
 8004e62:	2300      	movs	r3, #0
 8004e64:	627b      	str	r3, [r7, #36]	; 0x24
 8004e66:	2300      	movs	r3, #0
 8004e68:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004e6e:	4b21      	ldr	r3, [pc, #132]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	f003 030c 	and.w	r3, r3, #12
 8004e7a:	2b04      	cmp	r3, #4
 8004e7c:	d002      	beq.n	8004e84 <HAL_RCC_GetSysClockFreq+0x40>
 8004e7e:	2b08      	cmp	r3, #8
 8004e80:	d003      	beq.n	8004e8a <HAL_RCC_GetSysClockFreq+0x46>
 8004e82:	e02b      	b.n	8004edc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e84:	4b1c      	ldr	r3, [pc, #112]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004e86:	623b      	str	r3, [r7, #32]
      break;
 8004e88:	e02b      	b.n	8004ee2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	0c9b      	lsrs	r3, r3, #18
 8004e8e:	f003 030f 	and.w	r3, r3, #15
 8004e92:	3328      	adds	r3, #40	; 0x28
 8004e94:	443b      	add	r3, r7
 8004e96:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004e9a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d012      	beq.n	8004ecc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ea6:	4b13      	ldr	r3, [pc, #76]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	0c5b      	lsrs	r3, r3, #17
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	3328      	adds	r3, #40	; 0x28
 8004eb2:	443b      	add	r3, r7
 8004eb4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004eb8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	4a0e      	ldr	r2, [pc, #56]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004ebe:	fb03 f202 	mul.w	r2, r3, r2
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8004eca:	e004      	b.n	8004ed6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	4a0b      	ldr	r2, [pc, #44]	; (8004efc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ed0:	fb02 f303 	mul.w	r3, r2, r3
 8004ed4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed8:	623b      	str	r3, [r7, #32]
      break;
 8004eda:	e002      	b.n	8004ee2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004edc:	4b06      	ldr	r3, [pc, #24]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004ede:	623b      	str	r3, [r7, #32]
      break;
 8004ee0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ee2:	6a3b      	ldr	r3, [r7, #32]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3728      	adds	r7, #40	; 0x28
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bc90      	pop	{r4, r7}
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	080068cc 	.word	0x080068cc
 8004ef4:	40021000 	.word	0x40021000
 8004ef8:	007a1200 	.word	0x007a1200
 8004efc:	003d0900 	.word	0x003d0900

08004f00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f00:	b480      	push	{r7}
 8004f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f04:	4b02      	ldr	r3, [pc, #8]	; (8004f10 <HAL_RCC_GetHCLKFreq+0x10>)
 8004f06:	681b      	ldr	r3, [r3, #0]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bc80      	pop	{r7}
 8004f0e:	4770      	bx	lr
 8004f10:	20000000 	.word	0x20000000

08004f14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f18:	f7ff fff2 	bl	8004f00 <HAL_RCC_GetHCLKFreq>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	4b05      	ldr	r3, [pc, #20]	; (8004f34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	0a1b      	lsrs	r3, r3, #8
 8004f24:	f003 0307 	and.w	r3, r3, #7
 8004f28:	4903      	ldr	r1, [pc, #12]	; (8004f38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f2a:	5ccb      	ldrb	r3, [r1, r3]
 8004f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	40021000 	.word	0x40021000
 8004f38:	080068ec 	.word	0x080068ec

08004f3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004f44:	4b0a      	ldr	r3, [pc, #40]	; (8004f70 <RCC_Delay+0x34>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a0a      	ldr	r2, [pc, #40]	; (8004f74 <RCC_Delay+0x38>)
 8004f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4e:	0a5b      	lsrs	r3, r3, #9
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	fb02 f303 	mul.w	r3, r2, r3
 8004f56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004f58:	bf00      	nop
  }
  while (Delay --);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	1e5a      	subs	r2, r3, #1
 8004f5e:	60fa      	str	r2, [r7, #12]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1f9      	bne.n	8004f58 <RCC_Delay+0x1c>
}
 8004f64:	bf00      	nop
 8004f66:	bf00      	nop
 8004f68:	3714      	adds	r7, #20
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bc80      	pop	{r7}
 8004f6e:	4770      	bx	lr
 8004f70:	20000000 	.word	0x20000000
 8004f74:	10624dd3 	.word	0x10624dd3

08004f78 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004f80:	2300      	movs	r3, #0
 8004f82:	613b      	str	r3, [r7, #16]
 8004f84:	2300      	movs	r3, #0
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d07d      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004f94:	2300      	movs	r3, #0
 8004f96:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f98:	4b4f      	ldr	r3, [pc, #316]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f9a:	69db      	ldr	r3, [r3, #28]
 8004f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d10d      	bne.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fa4:	4b4c      	ldr	r3, [pc, #304]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fa6:	69db      	ldr	r3, [r3, #28]
 8004fa8:	4a4b      	ldr	r2, [pc, #300]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fae:	61d3      	str	r3, [r2, #28]
 8004fb0:	4b49      	ldr	r3, [pc, #292]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fb2:	69db      	ldr	r3, [r3, #28]
 8004fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb8:	60bb      	str	r3, [r7, #8]
 8004fba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fc0:	4b46      	ldr	r3, [pc, #280]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d118      	bne.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fcc:	4b43      	ldr	r3, [pc, #268]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a42      	ldr	r2, [pc, #264]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fd6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fd8:	f7fe f84c 	bl	8003074 <HAL_GetTick>
 8004fdc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fde:	e008      	b.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fe0:	f7fe f848 	bl	8003074 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b64      	cmp	r3, #100	; 0x64
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e06d      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ff2:	4b3a      	ldr	r3, [pc, #232]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d0f0      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ffe:	4b36      	ldr	r3, [pc, #216]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005006:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d02e      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	429a      	cmp	r2, r3
 800501a:	d027      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800501c:	4b2e      	ldr	r3, [pc, #184]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800501e:	6a1b      	ldr	r3, [r3, #32]
 8005020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005024:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005026:	4b2e      	ldr	r3, [pc, #184]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005028:	2201      	movs	r2, #1
 800502a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800502c:	4b2c      	ldr	r3, [pc, #176]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800502e:	2200      	movs	r2, #0
 8005030:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005032:	4a29      	ldr	r2, [pc, #164]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d014      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005042:	f7fe f817 	bl	8003074 <HAL_GetTick>
 8005046:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005048:	e00a      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800504a:	f7fe f813 	bl	8003074 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	f241 3288 	movw	r2, #5000	; 0x1388
 8005058:	4293      	cmp	r3, r2
 800505a:	d901      	bls.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e036      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005060:	4b1d      	ldr	r3, [pc, #116]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	f003 0302 	and.w	r3, r3, #2
 8005068:	2b00      	cmp	r3, #0
 800506a:	d0ee      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800506c:	4b1a      	ldr	r3, [pc, #104]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800506e:	6a1b      	ldr	r3, [r3, #32]
 8005070:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	4917      	ldr	r1, [pc, #92]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800507a:	4313      	orrs	r3, r2
 800507c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800507e:	7dfb      	ldrb	r3, [r7, #23]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d105      	bne.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005084:	4b14      	ldr	r3, [pc, #80]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005086:	69db      	ldr	r3, [r3, #28]
 8005088:	4a13      	ldr	r2, [pc, #76]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800508a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800508e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0302 	and.w	r3, r3, #2
 8005098:	2b00      	cmp	r3, #0
 800509a:	d008      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800509c:	4b0e      	ldr	r3, [pc, #56]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	490b      	ldr	r1, [pc, #44]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0310 	and.w	r3, r3, #16
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d008      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050ba:	4b07      	ldr	r3, [pc, #28]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	4904      	ldr	r1, [pc, #16]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3718      	adds	r7, #24
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	40021000 	.word	0x40021000
 80050dc:	40007000 	.word	0x40007000
 80050e0:	42420440 	.word	0x42420440

080050e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d001      	beq.n	80050fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e03a      	b.n	8005172 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68da      	ldr	r2, [r3, #12]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f042 0201 	orr.w	r2, r2, #1
 8005112:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a18      	ldr	r2, [pc, #96]	; (800517c <HAL_TIM_Base_Start_IT+0x98>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d00e      	beq.n	800513c <HAL_TIM_Base_Start_IT+0x58>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005126:	d009      	beq.n	800513c <HAL_TIM_Base_Start_IT+0x58>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a14      	ldr	r2, [pc, #80]	; (8005180 <HAL_TIM_Base_Start_IT+0x9c>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d004      	beq.n	800513c <HAL_TIM_Base_Start_IT+0x58>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a13      	ldr	r2, [pc, #76]	; (8005184 <HAL_TIM_Base_Start_IT+0xa0>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d111      	bne.n	8005160 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f003 0307 	and.w	r3, r3, #7
 8005146:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2b06      	cmp	r3, #6
 800514c:	d010      	beq.n	8005170 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f042 0201 	orr.w	r2, r2, #1
 800515c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800515e:	e007      	b.n	8005170 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f042 0201 	orr.w	r2, r2, #1
 800516e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3714      	adds	r7, #20
 8005176:	46bd      	mov	sp, r7
 8005178:	bc80      	pop	{r7}
 800517a:	4770      	bx	lr
 800517c:	40012c00 	.word	0x40012c00
 8005180:	40000400 	.word	0x40000400
 8005184:	40000800 	.word	0x40000800

08005188 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d101      	bne.n	800519a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e041      	b.n	800521e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d106      	bne.n	80051b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f7fc fb92 	bl	80018d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2202      	movs	r2, #2
 80051b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	3304      	adds	r3, #4
 80051c4:	4619      	mov	r1, r3
 80051c6:	4610      	mov	r0, r2
 80051c8:	f000 fbea 	bl	80059a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3708      	adds	r7, #8
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
	...

08005228 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d109      	bne.n	800524c <HAL_TIM_PWM_Start+0x24>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800523e:	b2db      	uxtb	r3, r3
 8005240:	2b01      	cmp	r3, #1
 8005242:	bf14      	ite	ne
 8005244:	2301      	movne	r3, #1
 8005246:	2300      	moveq	r3, #0
 8005248:	b2db      	uxtb	r3, r3
 800524a:	e022      	b.n	8005292 <HAL_TIM_PWM_Start+0x6a>
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	2b04      	cmp	r3, #4
 8005250:	d109      	bne.n	8005266 <HAL_TIM_PWM_Start+0x3e>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b01      	cmp	r3, #1
 800525c:	bf14      	ite	ne
 800525e:	2301      	movne	r3, #1
 8005260:	2300      	moveq	r3, #0
 8005262:	b2db      	uxtb	r3, r3
 8005264:	e015      	b.n	8005292 <HAL_TIM_PWM_Start+0x6a>
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	2b08      	cmp	r3, #8
 800526a:	d109      	bne.n	8005280 <HAL_TIM_PWM_Start+0x58>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005272:	b2db      	uxtb	r3, r3
 8005274:	2b01      	cmp	r3, #1
 8005276:	bf14      	ite	ne
 8005278:	2301      	movne	r3, #1
 800527a:	2300      	moveq	r3, #0
 800527c:	b2db      	uxtb	r3, r3
 800527e:	e008      	b.n	8005292 <HAL_TIM_PWM_Start+0x6a>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2b01      	cmp	r3, #1
 800528a:	bf14      	ite	ne
 800528c:	2301      	movne	r3, #1
 800528e:	2300      	moveq	r3, #0
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d001      	beq.n	800529a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e05e      	b.n	8005358 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d104      	bne.n	80052aa <HAL_TIM_PWM_Start+0x82>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2202      	movs	r2, #2
 80052a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052a8:	e013      	b.n	80052d2 <HAL_TIM_PWM_Start+0xaa>
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	2b04      	cmp	r3, #4
 80052ae:	d104      	bne.n	80052ba <HAL_TIM_PWM_Start+0x92>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2202      	movs	r2, #2
 80052b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052b8:	e00b      	b.n	80052d2 <HAL_TIM_PWM_Start+0xaa>
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2b08      	cmp	r3, #8
 80052be:	d104      	bne.n	80052ca <HAL_TIM_PWM_Start+0xa2>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2202      	movs	r2, #2
 80052c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052c8:	e003      	b.n	80052d2 <HAL_TIM_PWM_Start+0xaa>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2202      	movs	r2, #2
 80052ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2201      	movs	r2, #1
 80052d8:	6839      	ldr	r1, [r7, #0]
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 fd4a 	bl	8005d74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a1e      	ldr	r2, [pc, #120]	; (8005360 <HAL_TIM_PWM_Start+0x138>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d107      	bne.n	80052fa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a18      	ldr	r2, [pc, #96]	; (8005360 <HAL_TIM_PWM_Start+0x138>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d00e      	beq.n	8005322 <HAL_TIM_PWM_Start+0xfa>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800530c:	d009      	beq.n	8005322 <HAL_TIM_PWM_Start+0xfa>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a14      	ldr	r2, [pc, #80]	; (8005364 <HAL_TIM_PWM_Start+0x13c>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d004      	beq.n	8005322 <HAL_TIM_PWM_Start+0xfa>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a12      	ldr	r2, [pc, #72]	; (8005368 <HAL_TIM_PWM_Start+0x140>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d111      	bne.n	8005346 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f003 0307 	and.w	r3, r3, #7
 800532c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2b06      	cmp	r3, #6
 8005332:	d010      	beq.n	8005356 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f042 0201 	orr.w	r2, r2, #1
 8005342:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005344:	e007      	b.n	8005356 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f042 0201 	orr.w	r2, r2, #1
 8005354:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	40012c00 	.word	0x40012c00
 8005364:	40000400 	.word	0x40000400
 8005368:	40000800 	.word	0x40000800

0800536c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b086      	sub	sp, #24
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d101      	bne.n	8005380 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e093      	b.n	80054a8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b00      	cmp	r3, #0
 800538a:	d106      	bne.n	800539a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f7fc fa35 	bl	8001804 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2202      	movs	r2, #2
 800539e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	6812      	ldr	r2, [r2, #0]
 80053ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053b0:	f023 0307 	bic.w	r3, r3, #7
 80053b4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	3304      	adds	r3, #4
 80053be:	4619      	mov	r1, r3
 80053c0:	4610      	mov	r0, r2
 80053c2:	f000 faed 	bl	80059a0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	6a1b      	ldr	r3, [r3, #32]
 80053dc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ee:	f023 0303 	bic.w	r3, r3, #3
 80053f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	689a      	ldr	r2, [r3, #8]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	699b      	ldr	r3, [r3, #24]
 80053fc:	021b      	lsls	r3, r3, #8
 80053fe:	4313      	orrs	r3, r2
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	4313      	orrs	r3, r2
 8005404:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800540c:	f023 030c 	bic.w	r3, r3, #12
 8005410:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005418:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800541c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	68da      	ldr	r2, [r3, #12]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	021b      	lsls	r3, r3, #8
 8005428:	4313      	orrs	r3, r2
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	4313      	orrs	r3, r2
 800542e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	011a      	lsls	r2, r3, #4
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	031b      	lsls	r3, r3, #12
 800543c:	4313      	orrs	r3, r2
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	4313      	orrs	r3, r2
 8005442:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800544a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	695b      	ldr	r3, [r3, #20]
 8005454:	011b      	lsls	r3, r3, #4
 8005456:	4313      	orrs	r3, r2
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	4313      	orrs	r3, r2
 800545c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3718      	adds	r7, #24
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054c0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054c8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80054d0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80054d8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d110      	bne.n	8005502 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054e0:	7bfb      	ldrb	r3, [r7, #15]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d102      	bne.n	80054ec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80054e6:	7b7b      	ldrb	r3, [r7, #13]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d001      	beq.n	80054f0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e069      	b.n	80055c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2202      	movs	r2, #2
 80054f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2202      	movs	r2, #2
 80054fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005500:	e031      	b.n	8005566 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	2b04      	cmp	r3, #4
 8005506:	d110      	bne.n	800552a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005508:	7bbb      	ldrb	r3, [r7, #14]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d102      	bne.n	8005514 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800550e:	7b3b      	ldrb	r3, [r7, #12]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d001      	beq.n	8005518 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e055      	b.n	80055c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2202      	movs	r2, #2
 800551c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2202      	movs	r2, #2
 8005524:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005528:	e01d      	b.n	8005566 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800552a:	7bfb      	ldrb	r3, [r7, #15]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d108      	bne.n	8005542 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005530:	7bbb      	ldrb	r3, [r7, #14]
 8005532:	2b01      	cmp	r3, #1
 8005534:	d105      	bne.n	8005542 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005536:	7b7b      	ldrb	r3, [r7, #13]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d102      	bne.n	8005542 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800553c:	7b3b      	ldrb	r3, [r7, #12]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d001      	beq.n	8005546 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e03e      	b.n	80055c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2202      	movs	r2, #2
 800554a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2202      	movs	r2, #2
 8005552:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2202      	movs	r2, #2
 800555a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2202      	movs	r2, #2
 8005562:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d003      	beq.n	8005574 <HAL_TIM_Encoder_Start+0xc4>
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	2b04      	cmp	r3, #4
 8005570:	d008      	beq.n	8005584 <HAL_TIM_Encoder_Start+0xd4>
 8005572:	e00f      	b.n	8005594 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2201      	movs	r2, #1
 800557a:	2100      	movs	r1, #0
 800557c:	4618      	mov	r0, r3
 800557e:	f000 fbf9 	bl	8005d74 <TIM_CCxChannelCmd>
      break;
 8005582:	e016      	b.n	80055b2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2201      	movs	r2, #1
 800558a:	2104      	movs	r1, #4
 800558c:	4618      	mov	r0, r3
 800558e:	f000 fbf1 	bl	8005d74 <TIM_CCxChannelCmd>
      break;
 8005592:	e00e      	b.n	80055b2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2201      	movs	r2, #1
 800559a:	2100      	movs	r1, #0
 800559c:	4618      	mov	r0, r3
 800559e:	f000 fbe9 	bl	8005d74 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2201      	movs	r2, #1
 80055a8:	2104      	movs	r1, #4
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 fbe2 	bl	8005d74 <TIM_CCxChannelCmd>
      break;
 80055b0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f042 0201 	orr.w	r2, r2, #1
 80055c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	f003 0302 	and.w	r3, r3, #2
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d122      	bne.n	8005628 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d11b      	bne.n	8005628 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f06f 0202 	mvn.w	r2, #2
 80055f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	f003 0303 	and.w	r3, r3, #3
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f9ab 	bl	800596a <HAL_TIM_IC_CaptureCallback>
 8005614:	e005      	b.n	8005622 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f99e 	bl	8005958 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f9ad 	bl	800597c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	f003 0304 	and.w	r3, r3, #4
 8005632:	2b04      	cmp	r3, #4
 8005634:	d122      	bne.n	800567c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f003 0304 	and.w	r3, r3, #4
 8005640:	2b04      	cmp	r3, #4
 8005642:	d11b      	bne.n	800567c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f06f 0204 	mvn.w	r2, #4
 800564c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2202      	movs	r2, #2
 8005652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800565e:	2b00      	cmp	r3, #0
 8005660:	d003      	beq.n	800566a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f981 	bl	800596a <HAL_TIM_IC_CaptureCallback>
 8005668:	e005      	b.n	8005676 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f974 	bl	8005958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 f983 	bl	800597c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	f003 0308 	and.w	r3, r3, #8
 8005686:	2b08      	cmp	r3, #8
 8005688:	d122      	bne.n	80056d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	f003 0308 	and.w	r3, r3, #8
 8005694:	2b08      	cmp	r3, #8
 8005696:	d11b      	bne.n	80056d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f06f 0208 	mvn.w	r2, #8
 80056a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2204      	movs	r2, #4
 80056a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	f003 0303 	and.w	r3, r3, #3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d003      	beq.n	80056be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f957 	bl	800596a <HAL_TIM_IC_CaptureCallback>
 80056bc:	e005      	b.n	80056ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 f94a 	bl	8005958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 f959 	bl	800597c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	f003 0310 	and.w	r3, r3, #16
 80056da:	2b10      	cmp	r3, #16
 80056dc:	d122      	bne.n	8005724 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f003 0310 	and.w	r3, r3, #16
 80056e8:	2b10      	cmp	r3, #16
 80056ea:	d11b      	bne.n	8005724 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f06f 0210 	mvn.w	r2, #16
 80056f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2208      	movs	r2, #8
 80056fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f92d 	bl	800596a <HAL_TIM_IC_CaptureCallback>
 8005710:	e005      	b.n	800571e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f920 	bl	8005958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 f92f 	bl	800597c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	2b01      	cmp	r3, #1
 8005730:	d10e      	bne.n	8005750 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	f003 0301 	and.w	r3, r3, #1
 800573c:	2b01      	cmp	r3, #1
 800573e:	d107      	bne.n	8005750 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f06f 0201 	mvn.w	r2, #1
 8005748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f7fd fafc 	bl	8002d48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800575a:	2b80      	cmp	r3, #128	; 0x80
 800575c:	d10e      	bne.n	800577c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005768:	2b80      	cmp	r3, #128	; 0x80
 800576a:	d107      	bne.n	800577c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 fb87 	bl	8005e8a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005786:	2b40      	cmp	r3, #64	; 0x40
 8005788:	d10e      	bne.n	80057a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005794:	2b40      	cmp	r3, #64	; 0x40
 8005796:	d107      	bne.n	80057a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f8f3 	bl	800598e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	f003 0320 	and.w	r3, r3, #32
 80057b2:	2b20      	cmp	r3, #32
 80057b4:	d10e      	bne.n	80057d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	f003 0320 	and.w	r3, r3, #32
 80057c0:	2b20      	cmp	r3, #32
 80057c2:	d107      	bne.n	80057d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f06f 0220 	mvn.w	r2, #32
 80057cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 fb52 	bl	8005e78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057d4:	bf00      	nop
 80057d6:	3708      	adds	r7, #8
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d101      	bne.n	80057f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80057f2:	2302      	movs	r3, #2
 80057f4:	e0ac      	b.n	8005950 <HAL_TIM_PWM_ConfigChannel+0x174>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2b0c      	cmp	r3, #12
 8005802:	f200 809f 	bhi.w	8005944 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005806:	a201      	add	r2, pc, #4	; (adr r2, 800580c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800580c:	08005841 	.word	0x08005841
 8005810:	08005945 	.word	0x08005945
 8005814:	08005945 	.word	0x08005945
 8005818:	08005945 	.word	0x08005945
 800581c:	08005881 	.word	0x08005881
 8005820:	08005945 	.word	0x08005945
 8005824:	08005945 	.word	0x08005945
 8005828:	08005945 	.word	0x08005945
 800582c:	080058c3 	.word	0x080058c3
 8005830:	08005945 	.word	0x08005945
 8005834:	08005945 	.word	0x08005945
 8005838:	08005945 	.word	0x08005945
 800583c:	08005903 	.word	0x08005903
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68b9      	ldr	r1, [r7, #8]
 8005846:	4618      	mov	r0, r3
 8005848:	f000 f90c 	bl	8005a64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	699a      	ldr	r2, [r3, #24]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f042 0208 	orr.w	r2, r2, #8
 800585a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	699a      	ldr	r2, [r3, #24]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f022 0204 	bic.w	r2, r2, #4
 800586a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6999      	ldr	r1, [r3, #24]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	691a      	ldr	r2, [r3, #16]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	430a      	orrs	r2, r1
 800587c:	619a      	str	r2, [r3, #24]
      break;
 800587e:	e062      	b.n	8005946 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68b9      	ldr	r1, [r7, #8]
 8005886:	4618      	mov	r0, r3
 8005888:	f000 f952 	bl	8005b30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	699a      	ldr	r2, [r3, #24]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800589a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	699a      	ldr	r2, [r3, #24]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6999      	ldr	r1, [r3, #24]
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	021a      	lsls	r2, r3, #8
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	430a      	orrs	r2, r1
 80058be:	619a      	str	r2, [r3, #24]
      break;
 80058c0:	e041      	b.n	8005946 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68b9      	ldr	r1, [r7, #8]
 80058c8:	4618      	mov	r0, r3
 80058ca:	f000 f99b 	bl	8005c04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	69da      	ldr	r2, [r3, #28]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f042 0208 	orr.w	r2, r2, #8
 80058dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	69da      	ldr	r2, [r3, #28]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f022 0204 	bic.w	r2, r2, #4
 80058ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	69d9      	ldr	r1, [r3, #28]
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	691a      	ldr	r2, [r3, #16]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	430a      	orrs	r2, r1
 80058fe:	61da      	str	r2, [r3, #28]
      break;
 8005900:	e021      	b.n	8005946 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68b9      	ldr	r1, [r7, #8]
 8005908:	4618      	mov	r0, r3
 800590a:	f000 f9e5 	bl	8005cd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	69da      	ldr	r2, [r3, #28]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800591c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	69da      	ldr	r2, [r3, #28]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800592c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	69d9      	ldr	r1, [r3, #28]
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	021a      	lsls	r2, r3, #8
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	430a      	orrs	r2, r1
 8005940:	61da      	str	r2, [r3, #28]
      break;
 8005942:	e000      	b.n	8005946 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005944:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	bc80      	pop	{r7}
 8005968:	4770      	bx	lr

0800596a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800596a:	b480      	push	{r7}
 800596c:	b083      	sub	sp, #12
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005972:	bf00      	nop
 8005974:	370c      	adds	r7, #12
 8005976:	46bd      	mov	sp, r7
 8005978:	bc80      	pop	{r7}
 800597a:	4770      	bx	lr

0800597c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	bc80      	pop	{r7}
 800598c:	4770      	bx	lr

0800598e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800598e:	b480      	push	{r7}
 8005990:	b083      	sub	sp, #12
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005996:	bf00      	nop
 8005998:	370c      	adds	r7, #12
 800599a:	46bd      	mov	sp, r7
 800599c:	bc80      	pop	{r7}
 800599e:	4770      	bx	lr

080059a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a29      	ldr	r2, [pc, #164]	; (8005a58 <TIM_Base_SetConfig+0xb8>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d00b      	beq.n	80059d0 <TIM_Base_SetConfig+0x30>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059be:	d007      	beq.n	80059d0 <TIM_Base_SetConfig+0x30>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a26      	ldr	r2, [pc, #152]	; (8005a5c <TIM_Base_SetConfig+0xbc>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d003      	beq.n	80059d0 <TIM_Base_SetConfig+0x30>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a25      	ldr	r2, [pc, #148]	; (8005a60 <TIM_Base_SetConfig+0xc0>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d108      	bne.n	80059e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	4313      	orrs	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a1c      	ldr	r2, [pc, #112]	; (8005a58 <TIM_Base_SetConfig+0xb8>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d00b      	beq.n	8005a02 <TIM_Base_SetConfig+0x62>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059f0:	d007      	beq.n	8005a02 <TIM_Base_SetConfig+0x62>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a19      	ldr	r2, [pc, #100]	; (8005a5c <TIM_Base_SetConfig+0xbc>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d003      	beq.n	8005a02 <TIM_Base_SetConfig+0x62>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a18      	ldr	r2, [pc, #96]	; (8005a60 <TIM_Base_SetConfig+0xc0>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d108      	bne.n	8005a14 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	689a      	ldr	r2, [r3, #8]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a07      	ldr	r2, [pc, #28]	; (8005a58 <TIM_Base_SetConfig+0xb8>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d103      	bne.n	8005a48 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	691a      	ldr	r2, [r3, #16]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	615a      	str	r2, [r3, #20]
}
 8005a4e:	bf00      	nop
 8005a50:	3714      	adds	r7, #20
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bc80      	pop	{r7}
 8005a56:	4770      	bx	lr
 8005a58:	40012c00 	.word	0x40012c00
 8005a5c:	40000400 	.word	0x40000400
 8005a60:	40000800 	.word	0x40000800

08005a64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b087      	sub	sp, #28
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	f023 0201 	bic.w	r2, r3, #1
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f023 0303 	bic.w	r3, r3, #3
 8005a9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f023 0302 	bic.w	r3, r3, #2
 8005aac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a1c      	ldr	r2, [pc, #112]	; (8005b2c <TIM_OC1_SetConfig+0xc8>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d10c      	bne.n	8005ada <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	f023 0308 	bic.w	r3, r3, #8
 8005ac6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	f023 0304 	bic.w	r3, r3, #4
 8005ad8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a13      	ldr	r2, [pc, #76]	; (8005b2c <TIM_OC1_SetConfig+0xc8>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d111      	bne.n	8005b06 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ae8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005af0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	621a      	str	r2, [r3, #32]
}
 8005b20:	bf00      	nop
 8005b22:	371c      	adds	r7, #28
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bc80      	pop	{r7}
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	40012c00 	.word	0x40012c00

08005b30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b087      	sub	sp, #28
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	f023 0210 	bic.w	r2, r3, #16
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	021b      	lsls	r3, r3, #8
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	f023 0320 	bic.w	r3, r3, #32
 8005b7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	011b      	lsls	r3, r3, #4
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a1d      	ldr	r2, [pc, #116]	; (8005c00 <TIM_OC2_SetConfig+0xd0>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d10d      	bne.n	8005bac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	011b      	lsls	r3, r3, #4
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005baa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a14      	ldr	r2, [pc, #80]	; (8005c00 <TIM_OC2_SetConfig+0xd0>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d113      	bne.n	8005bdc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	695b      	ldr	r3, [r3, #20]
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	693a      	ldr	r2, [r7, #16]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	621a      	str	r2, [r3, #32]
}
 8005bf6:	bf00      	nop
 8005bf8:	371c      	adds	r7, #28
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bc80      	pop	{r7}
 8005bfe:	4770      	bx	lr
 8005c00:	40012c00 	.word	0x40012c00

08005c04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b087      	sub	sp, #28
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	69db      	ldr	r3, [r3, #28]
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f023 0303 	bic.w	r3, r3, #3
 8005c3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	021b      	lsls	r3, r3, #8
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a1d      	ldr	r2, [pc, #116]	; (8005cd4 <TIM_OC3_SetConfig+0xd0>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d10d      	bne.n	8005c7e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	021b      	lsls	r3, r3, #8
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a14      	ldr	r2, [pc, #80]	; (8005cd4 <TIM_OC3_SetConfig+0xd0>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d113      	bne.n	8005cae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	011b      	lsls	r3, r3, #4
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	011b      	lsls	r3, r3, #4
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	685a      	ldr	r2, [r3, #4]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	621a      	str	r2, [r3, #32]
}
 8005cc8:	bf00      	nop
 8005cca:	371c      	adds	r7, #28
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bc80      	pop	{r7}
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	40012c00 	.word	0x40012c00

08005cd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b087      	sub	sp, #28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	021b      	lsls	r3, r3, #8
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	031b      	lsls	r3, r3, #12
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a0f      	ldr	r2, [pc, #60]	; (8005d70 <TIM_OC4_SetConfig+0x98>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d109      	bne.n	8005d4c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	695b      	ldr	r3, [r3, #20]
 8005d44:	019b      	lsls	r3, r3, #6
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	685a      	ldr	r2, [r3, #4]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	621a      	str	r2, [r3, #32]
}
 8005d66:	bf00      	nop
 8005d68:	371c      	adds	r7, #28
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bc80      	pop	{r7}
 8005d6e:	4770      	bx	lr
 8005d70:	40012c00 	.word	0x40012c00

08005d74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b087      	sub	sp, #28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	f003 031f 	and.w	r3, r3, #31
 8005d86:	2201      	movs	r2, #1
 8005d88:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6a1a      	ldr	r2, [r3, #32]
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	43db      	mvns	r3, r3
 8005d96:	401a      	ands	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6a1a      	ldr	r2, [r3, #32]
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	f003 031f 	and.w	r3, r3, #31
 8005da6:	6879      	ldr	r1, [r7, #4]
 8005da8:	fa01 f303 	lsl.w	r3, r1, r3
 8005dac:	431a      	orrs	r2, r3
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	621a      	str	r2, [r3, #32]
}
 8005db2:	bf00      	nop
 8005db4:	371c      	adds	r7, #28
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bc80      	pop	{r7}
 8005dba:	4770      	bx	lr

08005dbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d101      	bne.n	8005dd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	e046      	b.n	8005e62 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2202      	movs	r2, #2
 8005de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a16      	ldr	r2, [pc, #88]	; (8005e6c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d00e      	beq.n	8005e36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e20:	d009      	beq.n	8005e36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a12      	ldr	r2, [pc, #72]	; (8005e70 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d004      	beq.n	8005e36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a10      	ldr	r2, [pc, #64]	; (8005e74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d10c      	bne.n	8005e50 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	68ba      	ldr	r2, [r7, #8]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68ba      	ldr	r2, [r7, #8]
 8005e4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3714      	adds	r7, #20
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bc80      	pop	{r7}
 8005e6a:	4770      	bx	lr
 8005e6c:	40012c00 	.word	0x40012c00
 8005e70:	40000400 	.word	0x40000400
 8005e74:	40000800 	.word	0x40000800

08005e78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bc80      	pop	{r7}
 8005e88:	4770      	bx	lr

08005e8a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	b083      	sub	sp, #12
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e92:	bf00      	nop
 8005e94:	370c      	adds	r7, #12
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bc80      	pop	{r7}
 8005e9a:	4770      	bx	lr

08005e9c <__errno>:
 8005e9c:	4b01      	ldr	r3, [pc, #4]	; (8005ea4 <__errno+0x8>)
 8005e9e:	6818      	ldr	r0, [r3, #0]
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	20000028 	.word	0x20000028

08005ea8 <__libc_init_array>:
 8005ea8:	b570      	push	{r4, r5, r6, lr}
 8005eaa:	2600      	movs	r6, #0
 8005eac:	4d0c      	ldr	r5, [pc, #48]	; (8005ee0 <__libc_init_array+0x38>)
 8005eae:	4c0d      	ldr	r4, [pc, #52]	; (8005ee4 <__libc_init_array+0x3c>)
 8005eb0:	1b64      	subs	r4, r4, r5
 8005eb2:	10a4      	asrs	r4, r4, #2
 8005eb4:	42a6      	cmp	r6, r4
 8005eb6:	d109      	bne.n	8005ecc <__libc_init_array+0x24>
 8005eb8:	f000 fc9c 	bl	80067f4 <_init>
 8005ebc:	2600      	movs	r6, #0
 8005ebe:	4d0a      	ldr	r5, [pc, #40]	; (8005ee8 <__libc_init_array+0x40>)
 8005ec0:	4c0a      	ldr	r4, [pc, #40]	; (8005eec <__libc_init_array+0x44>)
 8005ec2:	1b64      	subs	r4, r4, r5
 8005ec4:	10a4      	asrs	r4, r4, #2
 8005ec6:	42a6      	cmp	r6, r4
 8005ec8:	d105      	bne.n	8005ed6 <__libc_init_array+0x2e>
 8005eca:	bd70      	pop	{r4, r5, r6, pc}
 8005ecc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ed0:	4798      	blx	r3
 8005ed2:	3601      	adds	r6, #1
 8005ed4:	e7ee      	b.n	8005eb4 <__libc_init_array+0xc>
 8005ed6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eda:	4798      	blx	r3
 8005edc:	3601      	adds	r6, #1
 8005ede:	e7f2      	b.n	8005ec6 <__libc_init_array+0x1e>
 8005ee0:	08006928 	.word	0x08006928
 8005ee4:	08006928 	.word	0x08006928
 8005ee8:	08006928 	.word	0x08006928
 8005eec:	0800692c 	.word	0x0800692c

08005ef0 <memset>:
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	4402      	add	r2, r0
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d100      	bne.n	8005efa <memset+0xa>
 8005ef8:	4770      	bx	lr
 8005efa:	f803 1b01 	strb.w	r1, [r3], #1
 8005efe:	e7f9      	b.n	8005ef4 <memset+0x4>

08005f00 <siprintf>:
 8005f00:	b40e      	push	{r1, r2, r3}
 8005f02:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f06:	b500      	push	{lr}
 8005f08:	b09c      	sub	sp, #112	; 0x70
 8005f0a:	ab1d      	add	r3, sp, #116	; 0x74
 8005f0c:	9002      	str	r0, [sp, #8]
 8005f0e:	9006      	str	r0, [sp, #24]
 8005f10:	9107      	str	r1, [sp, #28]
 8005f12:	9104      	str	r1, [sp, #16]
 8005f14:	4808      	ldr	r0, [pc, #32]	; (8005f38 <siprintf+0x38>)
 8005f16:	4909      	ldr	r1, [pc, #36]	; (8005f3c <siprintf+0x3c>)
 8005f18:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f1c:	9105      	str	r1, [sp, #20]
 8005f1e:	6800      	ldr	r0, [r0, #0]
 8005f20:	a902      	add	r1, sp, #8
 8005f22:	9301      	str	r3, [sp, #4]
 8005f24:	f000 f868 	bl	8005ff8 <_svfiprintf_r>
 8005f28:	2200      	movs	r2, #0
 8005f2a:	9b02      	ldr	r3, [sp, #8]
 8005f2c:	701a      	strb	r2, [r3, #0]
 8005f2e:	b01c      	add	sp, #112	; 0x70
 8005f30:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f34:	b003      	add	sp, #12
 8005f36:	4770      	bx	lr
 8005f38:	20000028 	.word	0x20000028
 8005f3c:	ffff0208 	.word	0xffff0208

08005f40 <__ssputs_r>:
 8005f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f44:	688e      	ldr	r6, [r1, #8]
 8005f46:	4682      	mov	sl, r0
 8005f48:	429e      	cmp	r6, r3
 8005f4a:	460c      	mov	r4, r1
 8005f4c:	4690      	mov	r8, r2
 8005f4e:	461f      	mov	r7, r3
 8005f50:	d838      	bhi.n	8005fc4 <__ssputs_r+0x84>
 8005f52:	898a      	ldrh	r2, [r1, #12]
 8005f54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005f58:	d032      	beq.n	8005fc0 <__ssputs_r+0x80>
 8005f5a:	6825      	ldr	r5, [r4, #0]
 8005f5c:	6909      	ldr	r1, [r1, #16]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	eba5 0901 	sub.w	r9, r5, r1
 8005f64:	6965      	ldr	r5, [r4, #20]
 8005f66:	444b      	add	r3, r9
 8005f68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f70:	106d      	asrs	r5, r5, #1
 8005f72:	429d      	cmp	r5, r3
 8005f74:	bf38      	it	cc
 8005f76:	461d      	movcc	r5, r3
 8005f78:	0553      	lsls	r3, r2, #21
 8005f7a:	d531      	bpl.n	8005fe0 <__ssputs_r+0xa0>
 8005f7c:	4629      	mov	r1, r5
 8005f7e:	f000 fb6f 	bl	8006660 <_malloc_r>
 8005f82:	4606      	mov	r6, r0
 8005f84:	b950      	cbnz	r0, 8005f9c <__ssputs_r+0x5c>
 8005f86:	230c      	movs	r3, #12
 8005f88:	f04f 30ff 	mov.w	r0, #4294967295
 8005f8c:	f8ca 3000 	str.w	r3, [sl]
 8005f90:	89a3      	ldrh	r3, [r4, #12]
 8005f92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f96:	81a3      	strh	r3, [r4, #12]
 8005f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f9c:	464a      	mov	r2, r9
 8005f9e:	6921      	ldr	r1, [r4, #16]
 8005fa0:	f000 face 	bl	8006540 <memcpy>
 8005fa4:	89a3      	ldrh	r3, [r4, #12]
 8005fa6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fae:	81a3      	strh	r3, [r4, #12]
 8005fb0:	6126      	str	r6, [r4, #16]
 8005fb2:	444e      	add	r6, r9
 8005fb4:	6026      	str	r6, [r4, #0]
 8005fb6:	463e      	mov	r6, r7
 8005fb8:	6165      	str	r5, [r4, #20]
 8005fba:	eba5 0509 	sub.w	r5, r5, r9
 8005fbe:	60a5      	str	r5, [r4, #8]
 8005fc0:	42be      	cmp	r6, r7
 8005fc2:	d900      	bls.n	8005fc6 <__ssputs_r+0x86>
 8005fc4:	463e      	mov	r6, r7
 8005fc6:	4632      	mov	r2, r6
 8005fc8:	4641      	mov	r1, r8
 8005fca:	6820      	ldr	r0, [r4, #0]
 8005fcc:	f000 fac6 	bl	800655c <memmove>
 8005fd0:	68a3      	ldr	r3, [r4, #8]
 8005fd2:	2000      	movs	r0, #0
 8005fd4:	1b9b      	subs	r3, r3, r6
 8005fd6:	60a3      	str	r3, [r4, #8]
 8005fd8:	6823      	ldr	r3, [r4, #0]
 8005fda:	4433      	add	r3, r6
 8005fdc:	6023      	str	r3, [r4, #0]
 8005fde:	e7db      	b.n	8005f98 <__ssputs_r+0x58>
 8005fe0:	462a      	mov	r2, r5
 8005fe2:	f000 fbb1 	bl	8006748 <_realloc_r>
 8005fe6:	4606      	mov	r6, r0
 8005fe8:	2800      	cmp	r0, #0
 8005fea:	d1e1      	bne.n	8005fb0 <__ssputs_r+0x70>
 8005fec:	4650      	mov	r0, sl
 8005fee:	6921      	ldr	r1, [r4, #16]
 8005ff0:	f000 face 	bl	8006590 <_free_r>
 8005ff4:	e7c7      	b.n	8005f86 <__ssputs_r+0x46>
	...

08005ff8 <_svfiprintf_r>:
 8005ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ffc:	4698      	mov	r8, r3
 8005ffe:	898b      	ldrh	r3, [r1, #12]
 8006000:	4607      	mov	r7, r0
 8006002:	061b      	lsls	r3, r3, #24
 8006004:	460d      	mov	r5, r1
 8006006:	4614      	mov	r4, r2
 8006008:	b09d      	sub	sp, #116	; 0x74
 800600a:	d50e      	bpl.n	800602a <_svfiprintf_r+0x32>
 800600c:	690b      	ldr	r3, [r1, #16]
 800600e:	b963      	cbnz	r3, 800602a <_svfiprintf_r+0x32>
 8006010:	2140      	movs	r1, #64	; 0x40
 8006012:	f000 fb25 	bl	8006660 <_malloc_r>
 8006016:	6028      	str	r0, [r5, #0]
 8006018:	6128      	str	r0, [r5, #16]
 800601a:	b920      	cbnz	r0, 8006026 <_svfiprintf_r+0x2e>
 800601c:	230c      	movs	r3, #12
 800601e:	603b      	str	r3, [r7, #0]
 8006020:	f04f 30ff 	mov.w	r0, #4294967295
 8006024:	e0d1      	b.n	80061ca <_svfiprintf_r+0x1d2>
 8006026:	2340      	movs	r3, #64	; 0x40
 8006028:	616b      	str	r3, [r5, #20]
 800602a:	2300      	movs	r3, #0
 800602c:	9309      	str	r3, [sp, #36]	; 0x24
 800602e:	2320      	movs	r3, #32
 8006030:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006034:	2330      	movs	r3, #48	; 0x30
 8006036:	f04f 0901 	mov.w	r9, #1
 800603a:	f8cd 800c 	str.w	r8, [sp, #12]
 800603e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80061e4 <_svfiprintf_r+0x1ec>
 8006042:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006046:	4623      	mov	r3, r4
 8006048:	469a      	mov	sl, r3
 800604a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800604e:	b10a      	cbz	r2, 8006054 <_svfiprintf_r+0x5c>
 8006050:	2a25      	cmp	r2, #37	; 0x25
 8006052:	d1f9      	bne.n	8006048 <_svfiprintf_r+0x50>
 8006054:	ebba 0b04 	subs.w	fp, sl, r4
 8006058:	d00b      	beq.n	8006072 <_svfiprintf_r+0x7a>
 800605a:	465b      	mov	r3, fp
 800605c:	4622      	mov	r2, r4
 800605e:	4629      	mov	r1, r5
 8006060:	4638      	mov	r0, r7
 8006062:	f7ff ff6d 	bl	8005f40 <__ssputs_r>
 8006066:	3001      	adds	r0, #1
 8006068:	f000 80aa 	beq.w	80061c0 <_svfiprintf_r+0x1c8>
 800606c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800606e:	445a      	add	r2, fp
 8006070:	9209      	str	r2, [sp, #36]	; 0x24
 8006072:	f89a 3000 	ldrb.w	r3, [sl]
 8006076:	2b00      	cmp	r3, #0
 8006078:	f000 80a2 	beq.w	80061c0 <_svfiprintf_r+0x1c8>
 800607c:	2300      	movs	r3, #0
 800607e:	f04f 32ff 	mov.w	r2, #4294967295
 8006082:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006086:	f10a 0a01 	add.w	sl, sl, #1
 800608a:	9304      	str	r3, [sp, #16]
 800608c:	9307      	str	r3, [sp, #28]
 800608e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006092:	931a      	str	r3, [sp, #104]	; 0x68
 8006094:	4654      	mov	r4, sl
 8006096:	2205      	movs	r2, #5
 8006098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800609c:	4851      	ldr	r0, [pc, #324]	; (80061e4 <_svfiprintf_r+0x1ec>)
 800609e:	f000 fa41 	bl	8006524 <memchr>
 80060a2:	9a04      	ldr	r2, [sp, #16]
 80060a4:	b9d8      	cbnz	r0, 80060de <_svfiprintf_r+0xe6>
 80060a6:	06d0      	lsls	r0, r2, #27
 80060a8:	bf44      	itt	mi
 80060aa:	2320      	movmi	r3, #32
 80060ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060b0:	0711      	lsls	r1, r2, #28
 80060b2:	bf44      	itt	mi
 80060b4:	232b      	movmi	r3, #43	; 0x2b
 80060b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060ba:	f89a 3000 	ldrb.w	r3, [sl]
 80060be:	2b2a      	cmp	r3, #42	; 0x2a
 80060c0:	d015      	beq.n	80060ee <_svfiprintf_r+0xf6>
 80060c2:	4654      	mov	r4, sl
 80060c4:	2000      	movs	r0, #0
 80060c6:	f04f 0c0a 	mov.w	ip, #10
 80060ca:	9a07      	ldr	r2, [sp, #28]
 80060cc:	4621      	mov	r1, r4
 80060ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060d2:	3b30      	subs	r3, #48	; 0x30
 80060d4:	2b09      	cmp	r3, #9
 80060d6:	d94e      	bls.n	8006176 <_svfiprintf_r+0x17e>
 80060d8:	b1b0      	cbz	r0, 8006108 <_svfiprintf_r+0x110>
 80060da:	9207      	str	r2, [sp, #28]
 80060dc:	e014      	b.n	8006108 <_svfiprintf_r+0x110>
 80060de:	eba0 0308 	sub.w	r3, r0, r8
 80060e2:	fa09 f303 	lsl.w	r3, r9, r3
 80060e6:	4313      	orrs	r3, r2
 80060e8:	46a2      	mov	sl, r4
 80060ea:	9304      	str	r3, [sp, #16]
 80060ec:	e7d2      	b.n	8006094 <_svfiprintf_r+0x9c>
 80060ee:	9b03      	ldr	r3, [sp, #12]
 80060f0:	1d19      	adds	r1, r3, #4
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	9103      	str	r1, [sp, #12]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	bfbb      	ittet	lt
 80060fa:	425b      	neglt	r3, r3
 80060fc:	f042 0202 	orrlt.w	r2, r2, #2
 8006100:	9307      	strge	r3, [sp, #28]
 8006102:	9307      	strlt	r3, [sp, #28]
 8006104:	bfb8      	it	lt
 8006106:	9204      	strlt	r2, [sp, #16]
 8006108:	7823      	ldrb	r3, [r4, #0]
 800610a:	2b2e      	cmp	r3, #46	; 0x2e
 800610c:	d10c      	bne.n	8006128 <_svfiprintf_r+0x130>
 800610e:	7863      	ldrb	r3, [r4, #1]
 8006110:	2b2a      	cmp	r3, #42	; 0x2a
 8006112:	d135      	bne.n	8006180 <_svfiprintf_r+0x188>
 8006114:	9b03      	ldr	r3, [sp, #12]
 8006116:	3402      	adds	r4, #2
 8006118:	1d1a      	adds	r2, r3, #4
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	9203      	str	r2, [sp, #12]
 800611e:	2b00      	cmp	r3, #0
 8006120:	bfb8      	it	lt
 8006122:	f04f 33ff 	movlt.w	r3, #4294967295
 8006126:	9305      	str	r3, [sp, #20]
 8006128:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80061e8 <_svfiprintf_r+0x1f0>
 800612c:	2203      	movs	r2, #3
 800612e:	4650      	mov	r0, sl
 8006130:	7821      	ldrb	r1, [r4, #0]
 8006132:	f000 f9f7 	bl	8006524 <memchr>
 8006136:	b140      	cbz	r0, 800614a <_svfiprintf_r+0x152>
 8006138:	2340      	movs	r3, #64	; 0x40
 800613a:	eba0 000a 	sub.w	r0, r0, sl
 800613e:	fa03 f000 	lsl.w	r0, r3, r0
 8006142:	9b04      	ldr	r3, [sp, #16]
 8006144:	3401      	adds	r4, #1
 8006146:	4303      	orrs	r3, r0
 8006148:	9304      	str	r3, [sp, #16]
 800614a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800614e:	2206      	movs	r2, #6
 8006150:	4826      	ldr	r0, [pc, #152]	; (80061ec <_svfiprintf_r+0x1f4>)
 8006152:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006156:	f000 f9e5 	bl	8006524 <memchr>
 800615a:	2800      	cmp	r0, #0
 800615c:	d038      	beq.n	80061d0 <_svfiprintf_r+0x1d8>
 800615e:	4b24      	ldr	r3, [pc, #144]	; (80061f0 <_svfiprintf_r+0x1f8>)
 8006160:	bb1b      	cbnz	r3, 80061aa <_svfiprintf_r+0x1b2>
 8006162:	9b03      	ldr	r3, [sp, #12]
 8006164:	3307      	adds	r3, #7
 8006166:	f023 0307 	bic.w	r3, r3, #7
 800616a:	3308      	adds	r3, #8
 800616c:	9303      	str	r3, [sp, #12]
 800616e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006170:	4433      	add	r3, r6
 8006172:	9309      	str	r3, [sp, #36]	; 0x24
 8006174:	e767      	b.n	8006046 <_svfiprintf_r+0x4e>
 8006176:	460c      	mov	r4, r1
 8006178:	2001      	movs	r0, #1
 800617a:	fb0c 3202 	mla	r2, ip, r2, r3
 800617e:	e7a5      	b.n	80060cc <_svfiprintf_r+0xd4>
 8006180:	2300      	movs	r3, #0
 8006182:	f04f 0c0a 	mov.w	ip, #10
 8006186:	4619      	mov	r1, r3
 8006188:	3401      	adds	r4, #1
 800618a:	9305      	str	r3, [sp, #20]
 800618c:	4620      	mov	r0, r4
 800618e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006192:	3a30      	subs	r2, #48	; 0x30
 8006194:	2a09      	cmp	r2, #9
 8006196:	d903      	bls.n	80061a0 <_svfiprintf_r+0x1a8>
 8006198:	2b00      	cmp	r3, #0
 800619a:	d0c5      	beq.n	8006128 <_svfiprintf_r+0x130>
 800619c:	9105      	str	r1, [sp, #20]
 800619e:	e7c3      	b.n	8006128 <_svfiprintf_r+0x130>
 80061a0:	4604      	mov	r4, r0
 80061a2:	2301      	movs	r3, #1
 80061a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80061a8:	e7f0      	b.n	800618c <_svfiprintf_r+0x194>
 80061aa:	ab03      	add	r3, sp, #12
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	462a      	mov	r2, r5
 80061b0:	4638      	mov	r0, r7
 80061b2:	4b10      	ldr	r3, [pc, #64]	; (80061f4 <_svfiprintf_r+0x1fc>)
 80061b4:	a904      	add	r1, sp, #16
 80061b6:	f3af 8000 	nop.w
 80061ba:	1c42      	adds	r2, r0, #1
 80061bc:	4606      	mov	r6, r0
 80061be:	d1d6      	bne.n	800616e <_svfiprintf_r+0x176>
 80061c0:	89ab      	ldrh	r3, [r5, #12]
 80061c2:	065b      	lsls	r3, r3, #25
 80061c4:	f53f af2c 	bmi.w	8006020 <_svfiprintf_r+0x28>
 80061c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061ca:	b01d      	add	sp, #116	; 0x74
 80061cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061d0:	ab03      	add	r3, sp, #12
 80061d2:	9300      	str	r3, [sp, #0]
 80061d4:	462a      	mov	r2, r5
 80061d6:	4638      	mov	r0, r7
 80061d8:	4b06      	ldr	r3, [pc, #24]	; (80061f4 <_svfiprintf_r+0x1fc>)
 80061da:	a904      	add	r1, sp, #16
 80061dc:	f000 f87c 	bl	80062d8 <_printf_i>
 80061e0:	e7eb      	b.n	80061ba <_svfiprintf_r+0x1c2>
 80061e2:	bf00      	nop
 80061e4:	080068f4 	.word	0x080068f4
 80061e8:	080068fa 	.word	0x080068fa
 80061ec:	080068fe 	.word	0x080068fe
 80061f0:	00000000 	.word	0x00000000
 80061f4:	08005f41 	.word	0x08005f41

080061f8 <_printf_common>:
 80061f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061fc:	4616      	mov	r6, r2
 80061fe:	4699      	mov	r9, r3
 8006200:	688a      	ldr	r2, [r1, #8]
 8006202:	690b      	ldr	r3, [r1, #16]
 8006204:	4607      	mov	r7, r0
 8006206:	4293      	cmp	r3, r2
 8006208:	bfb8      	it	lt
 800620a:	4613      	movlt	r3, r2
 800620c:	6033      	str	r3, [r6, #0]
 800620e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006212:	460c      	mov	r4, r1
 8006214:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006218:	b10a      	cbz	r2, 800621e <_printf_common+0x26>
 800621a:	3301      	adds	r3, #1
 800621c:	6033      	str	r3, [r6, #0]
 800621e:	6823      	ldr	r3, [r4, #0]
 8006220:	0699      	lsls	r1, r3, #26
 8006222:	bf42      	ittt	mi
 8006224:	6833      	ldrmi	r3, [r6, #0]
 8006226:	3302      	addmi	r3, #2
 8006228:	6033      	strmi	r3, [r6, #0]
 800622a:	6825      	ldr	r5, [r4, #0]
 800622c:	f015 0506 	ands.w	r5, r5, #6
 8006230:	d106      	bne.n	8006240 <_printf_common+0x48>
 8006232:	f104 0a19 	add.w	sl, r4, #25
 8006236:	68e3      	ldr	r3, [r4, #12]
 8006238:	6832      	ldr	r2, [r6, #0]
 800623a:	1a9b      	subs	r3, r3, r2
 800623c:	42ab      	cmp	r3, r5
 800623e:	dc28      	bgt.n	8006292 <_printf_common+0x9a>
 8006240:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006244:	1e13      	subs	r3, r2, #0
 8006246:	6822      	ldr	r2, [r4, #0]
 8006248:	bf18      	it	ne
 800624a:	2301      	movne	r3, #1
 800624c:	0692      	lsls	r2, r2, #26
 800624e:	d42d      	bmi.n	80062ac <_printf_common+0xb4>
 8006250:	4649      	mov	r1, r9
 8006252:	4638      	mov	r0, r7
 8006254:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006258:	47c0      	blx	r8
 800625a:	3001      	adds	r0, #1
 800625c:	d020      	beq.n	80062a0 <_printf_common+0xa8>
 800625e:	6823      	ldr	r3, [r4, #0]
 8006260:	68e5      	ldr	r5, [r4, #12]
 8006262:	f003 0306 	and.w	r3, r3, #6
 8006266:	2b04      	cmp	r3, #4
 8006268:	bf18      	it	ne
 800626a:	2500      	movne	r5, #0
 800626c:	6832      	ldr	r2, [r6, #0]
 800626e:	f04f 0600 	mov.w	r6, #0
 8006272:	68a3      	ldr	r3, [r4, #8]
 8006274:	bf08      	it	eq
 8006276:	1aad      	subeq	r5, r5, r2
 8006278:	6922      	ldr	r2, [r4, #16]
 800627a:	bf08      	it	eq
 800627c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006280:	4293      	cmp	r3, r2
 8006282:	bfc4      	itt	gt
 8006284:	1a9b      	subgt	r3, r3, r2
 8006286:	18ed      	addgt	r5, r5, r3
 8006288:	341a      	adds	r4, #26
 800628a:	42b5      	cmp	r5, r6
 800628c:	d11a      	bne.n	80062c4 <_printf_common+0xcc>
 800628e:	2000      	movs	r0, #0
 8006290:	e008      	b.n	80062a4 <_printf_common+0xac>
 8006292:	2301      	movs	r3, #1
 8006294:	4652      	mov	r2, sl
 8006296:	4649      	mov	r1, r9
 8006298:	4638      	mov	r0, r7
 800629a:	47c0      	blx	r8
 800629c:	3001      	adds	r0, #1
 800629e:	d103      	bne.n	80062a8 <_printf_common+0xb0>
 80062a0:	f04f 30ff 	mov.w	r0, #4294967295
 80062a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062a8:	3501      	adds	r5, #1
 80062aa:	e7c4      	b.n	8006236 <_printf_common+0x3e>
 80062ac:	2030      	movs	r0, #48	; 0x30
 80062ae:	18e1      	adds	r1, r4, r3
 80062b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062b4:	1c5a      	adds	r2, r3, #1
 80062b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062ba:	4422      	add	r2, r4
 80062bc:	3302      	adds	r3, #2
 80062be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062c2:	e7c5      	b.n	8006250 <_printf_common+0x58>
 80062c4:	2301      	movs	r3, #1
 80062c6:	4622      	mov	r2, r4
 80062c8:	4649      	mov	r1, r9
 80062ca:	4638      	mov	r0, r7
 80062cc:	47c0      	blx	r8
 80062ce:	3001      	adds	r0, #1
 80062d0:	d0e6      	beq.n	80062a0 <_printf_common+0xa8>
 80062d2:	3601      	adds	r6, #1
 80062d4:	e7d9      	b.n	800628a <_printf_common+0x92>
	...

080062d8 <_printf_i>:
 80062d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062dc:	7e0f      	ldrb	r7, [r1, #24]
 80062de:	4691      	mov	r9, r2
 80062e0:	2f78      	cmp	r7, #120	; 0x78
 80062e2:	4680      	mov	r8, r0
 80062e4:	460c      	mov	r4, r1
 80062e6:	469a      	mov	sl, r3
 80062e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80062ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80062ee:	d807      	bhi.n	8006300 <_printf_i+0x28>
 80062f0:	2f62      	cmp	r7, #98	; 0x62
 80062f2:	d80a      	bhi.n	800630a <_printf_i+0x32>
 80062f4:	2f00      	cmp	r7, #0
 80062f6:	f000 80d9 	beq.w	80064ac <_printf_i+0x1d4>
 80062fa:	2f58      	cmp	r7, #88	; 0x58
 80062fc:	f000 80a4 	beq.w	8006448 <_printf_i+0x170>
 8006300:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006304:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006308:	e03a      	b.n	8006380 <_printf_i+0xa8>
 800630a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800630e:	2b15      	cmp	r3, #21
 8006310:	d8f6      	bhi.n	8006300 <_printf_i+0x28>
 8006312:	a101      	add	r1, pc, #4	; (adr r1, 8006318 <_printf_i+0x40>)
 8006314:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006318:	08006371 	.word	0x08006371
 800631c:	08006385 	.word	0x08006385
 8006320:	08006301 	.word	0x08006301
 8006324:	08006301 	.word	0x08006301
 8006328:	08006301 	.word	0x08006301
 800632c:	08006301 	.word	0x08006301
 8006330:	08006385 	.word	0x08006385
 8006334:	08006301 	.word	0x08006301
 8006338:	08006301 	.word	0x08006301
 800633c:	08006301 	.word	0x08006301
 8006340:	08006301 	.word	0x08006301
 8006344:	08006493 	.word	0x08006493
 8006348:	080063b5 	.word	0x080063b5
 800634c:	08006475 	.word	0x08006475
 8006350:	08006301 	.word	0x08006301
 8006354:	08006301 	.word	0x08006301
 8006358:	080064b5 	.word	0x080064b5
 800635c:	08006301 	.word	0x08006301
 8006360:	080063b5 	.word	0x080063b5
 8006364:	08006301 	.word	0x08006301
 8006368:	08006301 	.word	0x08006301
 800636c:	0800647d 	.word	0x0800647d
 8006370:	682b      	ldr	r3, [r5, #0]
 8006372:	1d1a      	adds	r2, r3, #4
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	602a      	str	r2, [r5, #0]
 8006378:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800637c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006380:	2301      	movs	r3, #1
 8006382:	e0a4      	b.n	80064ce <_printf_i+0x1f6>
 8006384:	6820      	ldr	r0, [r4, #0]
 8006386:	6829      	ldr	r1, [r5, #0]
 8006388:	0606      	lsls	r6, r0, #24
 800638a:	f101 0304 	add.w	r3, r1, #4
 800638e:	d50a      	bpl.n	80063a6 <_printf_i+0xce>
 8006390:	680e      	ldr	r6, [r1, #0]
 8006392:	602b      	str	r3, [r5, #0]
 8006394:	2e00      	cmp	r6, #0
 8006396:	da03      	bge.n	80063a0 <_printf_i+0xc8>
 8006398:	232d      	movs	r3, #45	; 0x2d
 800639a:	4276      	negs	r6, r6
 800639c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063a0:	230a      	movs	r3, #10
 80063a2:	485e      	ldr	r0, [pc, #376]	; (800651c <_printf_i+0x244>)
 80063a4:	e019      	b.n	80063da <_printf_i+0x102>
 80063a6:	680e      	ldr	r6, [r1, #0]
 80063a8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80063ac:	602b      	str	r3, [r5, #0]
 80063ae:	bf18      	it	ne
 80063b0:	b236      	sxthne	r6, r6
 80063b2:	e7ef      	b.n	8006394 <_printf_i+0xbc>
 80063b4:	682b      	ldr	r3, [r5, #0]
 80063b6:	6820      	ldr	r0, [r4, #0]
 80063b8:	1d19      	adds	r1, r3, #4
 80063ba:	6029      	str	r1, [r5, #0]
 80063bc:	0601      	lsls	r1, r0, #24
 80063be:	d501      	bpl.n	80063c4 <_printf_i+0xec>
 80063c0:	681e      	ldr	r6, [r3, #0]
 80063c2:	e002      	b.n	80063ca <_printf_i+0xf2>
 80063c4:	0646      	lsls	r6, r0, #25
 80063c6:	d5fb      	bpl.n	80063c0 <_printf_i+0xe8>
 80063c8:	881e      	ldrh	r6, [r3, #0]
 80063ca:	2f6f      	cmp	r7, #111	; 0x6f
 80063cc:	bf0c      	ite	eq
 80063ce:	2308      	moveq	r3, #8
 80063d0:	230a      	movne	r3, #10
 80063d2:	4852      	ldr	r0, [pc, #328]	; (800651c <_printf_i+0x244>)
 80063d4:	2100      	movs	r1, #0
 80063d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063da:	6865      	ldr	r5, [r4, #4]
 80063dc:	2d00      	cmp	r5, #0
 80063de:	bfa8      	it	ge
 80063e0:	6821      	ldrge	r1, [r4, #0]
 80063e2:	60a5      	str	r5, [r4, #8]
 80063e4:	bfa4      	itt	ge
 80063e6:	f021 0104 	bicge.w	r1, r1, #4
 80063ea:	6021      	strge	r1, [r4, #0]
 80063ec:	b90e      	cbnz	r6, 80063f2 <_printf_i+0x11a>
 80063ee:	2d00      	cmp	r5, #0
 80063f0:	d04d      	beq.n	800648e <_printf_i+0x1b6>
 80063f2:	4615      	mov	r5, r2
 80063f4:	fbb6 f1f3 	udiv	r1, r6, r3
 80063f8:	fb03 6711 	mls	r7, r3, r1, r6
 80063fc:	5dc7      	ldrb	r7, [r0, r7]
 80063fe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006402:	4637      	mov	r7, r6
 8006404:	42bb      	cmp	r3, r7
 8006406:	460e      	mov	r6, r1
 8006408:	d9f4      	bls.n	80063f4 <_printf_i+0x11c>
 800640a:	2b08      	cmp	r3, #8
 800640c:	d10b      	bne.n	8006426 <_printf_i+0x14e>
 800640e:	6823      	ldr	r3, [r4, #0]
 8006410:	07de      	lsls	r6, r3, #31
 8006412:	d508      	bpl.n	8006426 <_printf_i+0x14e>
 8006414:	6923      	ldr	r3, [r4, #16]
 8006416:	6861      	ldr	r1, [r4, #4]
 8006418:	4299      	cmp	r1, r3
 800641a:	bfde      	ittt	le
 800641c:	2330      	movle	r3, #48	; 0x30
 800641e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006422:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006426:	1b52      	subs	r2, r2, r5
 8006428:	6122      	str	r2, [r4, #16]
 800642a:	464b      	mov	r3, r9
 800642c:	4621      	mov	r1, r4
 800642e:	4640      	mov	r0, r8
 8006430:	f8cd a000 	str.w	sl, [sp]
 8006434:	aa03      	add	r2, sp, #12
 8006436:	f7ff fedf 	bl	80061f8 <_printf_common>
 800643a:	3001      	adds	r0, #1
 800643c:	d14c      	bne.n	80064d8 <_printf_i+0x200>
 800643e:	f04f 30ff 	mov.w	r0, #4294967295
 8006442:	b004      	add	sp, #16
 8006444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006448:	4834      	ldr	r0, [pc, #208]	; (800651c <_printf_i+0x244>)
 800644a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800644e:	6829      	ldr	r1, [r5, #0]
 8006450:	6823      	ldr	r3, [r4, #0]
 8006452:	f851 6b04 	ldr.w	r6, [r1], #4
 8006456:	6029      	str	r1, [r5, #0]
 8006458:	061d      	lsls	r5, r3, #24
 800645a:	d514      	bpl.n	8006486 <_printf_i+0x1ae>
 800645c:	07df      	lsls	r7, r3, #31
 800645e:	bf44      	itt	mi
 8006460:	f043 0320 	orrmi.w	r3, r3, #32
 8006464:	6023      	strmi	r3, [r4, #0]
 8006466:	b91e      	cbnz	r6, 8006470 <_printf_i+0x198>
 8006468:	6823      	ldr	r3, [r4, #0]
 800646a:	f023 0320 	bic.w	r3, r3, #32
 800646e:	6023      	str	r3, [r4, #0]
 8006470:	2310      	movs	r3, #16
 8006472:	e7af      	b.n	80063d4 <_printf_i+0xfc>
 8006474:	6823      	ldr	r3, [r4, #0]
 8006476:	f043 0320 	orr.w	r3, r3, #32
 800647a:	6023      	str	r3, [r4, #0]
 800647c:	2378      	movs	r3, #120	; 0x78
 800647e:	4828      	ldr	r0, [pc, #160]	; (8006520 <_printf_i+0x248>)
 8006480:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006484:	e7e3      	b.n	800644e <_printf_i+0x176>
 8006486:	0659      	lsls	r1, r3, #25
 8006488:	bf48      	it	mi
 800648a:	b2b6      	uxthmi	r6, r6
 800648c:	e7e6      	b.n	800645c <_printf_i+0x184>
 800648e:	4615      	mov	r5, r2
 8006490:	e7bb      	b.n	800640a <_printf_i+0x132>
 8006492:	682b      	ldr	r3, [r5, #0]
 8006494:	6826      	ldr	r6, [r4, #0]
 8006496:	1d18      	adds	r0, r3, #4
 8006498:	6961      	ldr	r1, [r4, #20]
 800649a:	6028      	str	r0, [r5, #0]
 800649c:	0635      	lsls	r5, r6, #24
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	d501      	bpl.n	80064a6 <_printf_i+0x1ce>
 80064a2:	6019      	str	r1, [r3, #0]
 80064a4:	e002      	b.n	80064ac <_printf_i+0x1d4>
 80064a6:	0670      	lsls	r0, r6, #25
 80064a8:	d5fb      	bpl.n	80064a2 <_printf_i+0x1ca>
 80064aa:	8019      	strh	r1, [r3, #0]
 80064ac:	2300      	movs	r3, #0
 80064ae:	4615      	mov	r5, r2
 80064b0:	6123      	str	r3, [r4, #16]
 80064b2:	e7ba      	b.n	800642a <_printf_i+0x152>
 80064b4:	682b      	ldr	r3, [r5, #0]
 80064b6:	2100      	movs	r1, #0
 80064b8:	1d1a      	adds	r2, r3, #4
 80064ba:	602a      	str	r2, [r5, #0]
 80064bc:	681d      	ldr	r5, [r3, #0]
 80064be:	6862      	ldr	r2, [r4, #4]
 80064c0:	4628      	mov	r0, r5
 80064c2:	f000 f82f 	bl	8006524 <memchr>
 80064c6:	b108      	cbz	r0, 80064cc <_printf_i+0x1f4>
 80064c8:	1b40      	subs	r0, r0, r5
 80064ca:	6060      	str	r0, [r4, #4]
 80064cc:	6863      	ldr	r3, [r4, #4]
 80064ce:	6123      	str	r3, [r4, #16]
 80064d0:	2300      	movs	r3, #0
 80064d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064d6:	e7a8      	b.n	800642a <_printf_i+0x152>
 80064d8:	462a      	mov	r2, r5
 80064da:	4649      	mov	r1, r9
 80064dc:	4640      	mov	r0, r8
 80064de:	6923      	ldr	r3, [r4, #16]
 80064e0:	47d0      	blx	sl
 80064e2:	3001      	adds	r0, #1
 80064e4:	d0ab      	beq.n	800643e <_printf_i+0x166>
 80064e6:	6823      	ldr	r3, [r4, #0]
 80064e8:	079b      	lsls	r3, r3, #30
 80064ea:	d413      	bmi.n	8006514 <_printf_i+0x23c>
 80064ec:	68e0      	ldr	r0, [r4, #12]
 80064ee:	9b03      	ldr	r3, [sp, #12]
 80064f0:	4298      	cmp	r0, r3
 80064f2:	bfb8      	it	lt
 80064f4:	4618      	movlt	r0, r3
 80064f6:	e7a4      	b.n	8006442 <_printf_i+0x16a>
 80064f8:	2301      	movs	r3, #1
 80064fa:	4632      	mov	r2, r6
 80064fc:	4649      	mov	r1, r9
 80064fe:	4640      	mov	r0, r8
 8006500:	47d0      	blx	sl
 8006502:	3001      	adds	r0, #1
 8006504:	d09b      	beq.n	800643e <_printf_i+0x166>
 8006506:	3501      	adds	r5, #1
 8006508:	68e3      	ldr	r3, [r4, #12]
 800650a:	9903      	ldr	r1, [sp, #12]
 800650c:	1a5b      	subs	r3, r3, r1
 800650e:	42ab      	cmp	r3, r5
 8006510:	dcf2      	bgt.n	80064f8 <_printf_i+0x220>
 8006512:	e7eb      	b.n	80064ec <_printf_i+0x214>
 8006514:	2500      	movs	r5, #0
 8006516:	f104 0619 	add.w	r6, r4, #25
 800651a:	e7f5      	b.n	8006508 <_printf_i+0x230>
 800651c:	08006905 	.word	0x08006905
 8006520:	08006916 	.word	0x08006916

08006524 <memchr>:
 8006524:	4603      	mov	r3, r0
 8006526:	b510      	push	{r4, lr}
 8006528:	b2c9      	uxtb	r1, r1
 800652a:	4402      	add	r2, r0
 800652c:	4293      	cmp	r3, r2
 800652e:	4618      	mov	r0, r3
 8006530:	d101      	bne.n	8006536 <memchr+0x12>
 8006532:	2000      	movs	r0, #0
 8006534:	e003      	b.n	800653e <memchr+0x1a>
 8006536:	7804      	ldrb	r4, [r0, #0]
 8006538:	3301      	adds	r3, #1
 800653a:	428c      	cmp	r4, r1
 800653c:	d1f6      	bne.n	800652c <memchr+0x8>
 800653e:	bd10      	pop	{r4, pc}

08006540 <memcpy>:
 8006540:	440a      	add	r2, r1
 8006542:	4291      	cmp	r1, r2
 8006544:	f100 33ff 	add.w	r3, r0, #4294967295
 8006548:	d100      	bne.n	800654c <memcpy+0xc>
 800654a:	4770      	bx	lr
 800654c:	b510      	push	{r4, lr}
 800654e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006552:	4291      	cmp	r1, r2
 8006554:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006558:	d1f9      	bne.n	800654e <memcpy+0xe>
 800655a:	bd10      	pop	{r4, pc}

0800655c <memmove>:
 800655c:	4288      	cmp	r0, r1
 800655e:	b510      	push	{r4, lr}
 8006560:	eb01 0402 	add.w	r4, r1, r2
 8006564:	d902      	bls.n	800656c <memmove+0x10>
 8006566:	4284      	cmp	r4, r0
 8006568:	4623      	mov	r3, r4
 800656a:	d807      	bhi.n	800657c <memmove+0x20>
 800656c:	1e43      	subs	r3, r0, #1
 800656e:	42a1      	cmp	r1, r4
 8006570:	d008      	beq.n	8006584 <memmove+0x28>
 8006572:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006576:	f803 2f01 	strb.w	r2, [r3, #1]!
 800657a:	e7f8      	b.n	800656e <memmove+0x12>
 800657c:	4601      	mov	r1, r0
 800657e:	4402      	add	r2, r0
 8006580:	428a      	cmp	r2, r1
 8006582:	d100      	bne.n	8006586 <memmove+0x2a>
 8006584:	bd10      	pop	{r4, pc}
 8006586:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800658a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800658e:	e7f7      	b.n	8006580 <memmove+0x24>

08006590 <_free_r>:
 8006590:	b538      	push	{r3, r4, r5, lr}
 8006592:	4605      	mov	r5, r0
 8006594:	2900      	cmp	r1, #0
 8006596:	d040      	beq.n	800661a <_free_r+0x8a>
 8006598:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800659c:	1f0c      	subs	r4, r1, #4
 800659e:	2b00      	cmp	r3, #0
 80065a0:	bfb8      	it	lt
 80065a2:	18e4      	addlt	r4, r4, r3
 80065a4:	f000 f910 	bl	80067c8 <__malloc_lock>
 80065a8:	4a1c      	ldr	r2, [pc, #112]	; (800661c <_free_r+0x8c>)
 80065aa:	6813      	ldr	r3, [r2, #0]
 80065ac:	b933      	cbnz	r3, 80065bc <_free_r+0x2c>
 80065ae:	6063      	str	r3, [r4, #4]
 80065b0:	6014      	str	r4, [r2, #0]
 80065b2:	4628      	mov	r0, r5
 80065b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065b8:	f000 b90c 	b.w	80067d4 <__malloc_unlock>
 80065bc:	42a3      	cmp	r3, r4
 80065be:	d908      	bls.n	80065d2 <_free_r+0x42>
 80065c0:	6820      	ldr	r0, [r4, #0]
 80065c2:	1821      	adds	r1, r4, r0
 80065c4:	428b      	cmp	r3, r1
 80065c6:	bf01      	itttt	eq
 80065c8:	6819      	ldreq	r1, [r3, #0]
 80065ca:	685b      	ldreq	r3, [r3, #4]
 80065cc:	1809      	addeq	r1, r1, r0
 80065ce:	6021      	streq	r1, [r4, #0]
 80065d0:	e7ed      	b.n	80065ae <_free_r+0x1e>
 80065d2:	461a      	mov	r2, r3
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	b10b      	cbz	r3, 80065dc <_free_r+0x4c>
 80065d8:	42a3      	cmp	r3, r4
 80065da:	d9fa      	bls.n	80065d2 <_free_r+0x42>
 80065dc:	6811      	ldr	r1, [r2, #0]
 80065de:	1850      	adds	r0, r2, r1
 80065e0:	42a0      	cmp	r0, r4
 80065e2:	d10b      	bne.n	80065fc <_free_r+0x6c>
 80065e4:	6820      	ldr	r0, [r4, #0]
 80065e6:	4401      	add	r1, r0
 80065e8:	1850      	adds	r0, r2, r1
 80065ea:	4283      	cmp	r3, r0
 80065ec:	6011      	str	r1, [r2, #0]
 80065ee:	d1e0      	bne.n	80065b2 <_free_r+0x22>
 80065f0:	6818      	ldr	r0, [r3, #0]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	4401      	add	r1, r0
 80065f6:	6011      	str	r1, [r2, #0]
 80065f8:	6053      	str	r3, [r2, #4]
 80065fa:	e7da      	b.n	80065b2 <_free_r+0x22>
 80065fc:	d902      	bls.n	8006604 <_free_r+0x74>
 80065fe:	230c      	movs	r3, #12
 8006600:	602b      	str	r3, [r5, #0]
 8006602:	e7d6      	b.n	80065b2 <_free_r+0x22>
 8006604:	6820      	ldr	r0, [r4, #0]
 8006606:	1821      	adds	r1, r4, r0
 8006608:	428b      	cmp	r3, r1
 800660a:	bf01      	itttt	eq
 800660c:	6819      	ldreq	r1, [r3, #0]
 800660e:	685b      	ldreq	r3, [r3, #4]
 8006610:	1809      	addeq	r1, r1, r0
 8006612:	6021      	streq	r1, [r4, #0]
 8006614:	6063      	str	r3, [r4, #4]
 8006616:	6054      	str	r4, [r2, #4]
 8006618:	e7cb      	b.n	80065b2 <_free_r+0x22>
 800661a:	bd38      	pop	{r3, r4, r5, pc}
 800661c:	20000330 	.word	0x20000330

08006620 <sbrk_aligned>:
 8006620:	b570      	push	{r4, r5, r6, lr}
 8006622:	4e0e      	ldr	r6, [pc, #56]	; (800665c <sbrk_aligned+0x3c>)
 8006624:	460c      	mov	r4, r1
 8006626:	6831      	ldr	r1, [r6, #0]
 8006628:	4605      	mov	r5, r0
 800662a:	b911      	cbnz	r1, 8006632 <sbrk_aligned+0x12>
 800662c:	f000 f8bc 	bl	80067a8 <_sbrk_r>
 8006630:	6030      	str	r0, [r6, #0]
 8006632:	4621      	mov	r1, r4
 8006634:	4628      	mov	r0, r5
 8006636:	f000 f8b7 	bl	80067a8 <_sbrk_r>
 800663a:	1c43      	adds	r3, r0, #1
 800663c:	d00a      	beq.n	8006654 <sbrk_aligned+0x34>
 800663e:	1cc4      	adds	r4, r0, #3
 8006640:	f024 0403 	bic.w	r4, r4, #3
 8006644:	42a0      	cmp	r0, r4
 8006646:	d007      	beq.n	8006658 <sbrk_aligned+0x38>
 8006648:	1a21      	subs	r1, r4, r0
 800664a:	4628      	mov	r0, r5
 800664c:	f000 f8ac 	bl	80067a8 <_sbrk_r>
 8006650:	3001      	adds	r0, #1
 8006652:	d101      	bne.n	8006658 <sbrk_aligned+0x38>
 8006654:	f04f 34ff 	mov.w	r4, #4294967295
 8006658:	4620      	mov	r0, r4
 800665a:	bd70      	pop	{r4, r5, r6, pc}
 800665c:	20000334 	.word	0x20000334

08006660 <_malloc_r>:
 8006660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006664:	1ccd      	adds	r5, r1, #3
 8006666:	f025 0503 	bic.w	r5, r5, #3
 800666a:	3508      	adds	r5, #8
 800666c:	2d0c      	cmp	r5, #12
 800666e:	bf38      	it	cc
 8006670:	250c      	movcc	r5, #12
 8006672:	2d00      	cmp	r5, #0
 8006674:	4607      	mov	r7, r0
 8006676:	db01      	blt.n	800667c <_malloc_r+0x1c>
 8006678:	42a9      	cmp	r1, r5
 800667a:	d905      	bls.n	8006688 <_malloc_r+0x28>
 800667c:	230c      	movs	r3, #12
 800667e:	2600      	movs	r6, #0
 8006680:	603b      	str	r3, [r7, #0]
 8006682:	4630      	mov	r0, r6
 8006684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006688:	4e2e      	ldr	r6, [pc, #184]	; (8006744 <_malloc_r+0xe4>)
 800668a:	f000 f89d 	bl	80067c8 <__malloc_lock>
 800668e:	6833      	ldr	r3, [r6, #0]
 8006690:	461c      	mov	r4, r3
 8006692:	bb34      	cbnz	r4, 80066e2 <_malloc_r+0x82>
 8006694:	4629      	mov	r1, r5
 8006696:	4638      	mov	r0, r7
 8006698:	f7ff ffc2 	bl	8006620 <sbrk_aligned>
 800669c:	1c43      	adds	r3, r0, #1
 800669e:	4604      	mov	r4, r0
 80066a0:	d14d      	bne.n	800673e <_malloc_r+0xde>
 80066a2:	6834      	ldr	r4, [r6, #0]
 80066a4:	4626      	mov	r6, r4
 80066a6:	2e00      	cmp	r6, #0
 80066a8:	d140      	bne.n	800672c <_malloc_r+0xcc>
 80066aa:	6823      	ldr	r3, [r4, #0]
 80066ac:	4631      	mov	r1, r6
 80066ae:	4638      	mov	r0, r7
 80066b0:	eb04 0803 	add.w	r8, r4, r3
 80066b4:	f000 f878 	bl	80067a8 <_sbrk_r>
 80066b8:	4580      	cmp	r8, r0
 80066ba:	d13a      	bne.n	8006732 <_malloc_r+0xd2>
 80066bc:	6821      	ldr	r1, [r4, #0]
 80066be:	3503      	adds	r5, #3
 80066c0:	1a6d      	subs	r5, r5, r1
 80066c2:	f025 0503 	bic.w	r5, r5, #3
 80066c6:	3508      	adds	r5, #8
 80066c8:	2d0c      	cmp	r5, #12
 80066ca:	bf38      	it	cc
 80066cc:	250c      	movcc	r5, #12
 80066ce:	4638      	mov	r0, r7
 80066d0:	4629      	mov	r1, r5
 80066d2:	f7ff ffa5 	bl	8006620 <sbrk_aligned>
 80066d6:	3001      	adds	r0, #1
 80066d8:	d02b      	beq.n	8006732 <_malloc_r+0xd2>
 80066da:	6823      	ldr	r3, [r4, #0]
 80066dc:	442b      	add	r3, r5
 80066de:	6023      	str	r3, [r4, #0]
 80066e0:	e00e      	b.n	8006700 <_malloc_r+0xa0>
 80066e2:	6822      	ldr	r2, [r4, #0]
 80066e4:	1b52      	subs	r2, r2, r5
 80066e6:	d41e      	bmi.n	8006726 <_malloc_r+0xc6>
 80066e8:	2a0b      	cmp	r2, #11
 80066ea:	d916      	bls.n	800671a <_malloc_r+0xba>
 80066ec:	1961      	adds	r1, r4, r5
 80066ee:	42a3      	cmp	r3, r4
 80066f0:	6025      	str	r5, [r4, #0]
 80066f2:	bf18      	it	ne
 80066f4:	6059      	strne	r1, [r3, #4]
 80066f6:	6863      	ldr	r3, [r4, #4]
 80066f8:	bf08      	it	eq
 80066fa:	6031      	streq	r1, [r6, #0]
 80066fc:	5162      	str	r2, [r4, r5]
 80066fe:	604b      	str	r3, [r1, #4]
 8006700:	4638      	mov	r0, r7
 8006702:	f104 060b 	add.w	r6, r4, #11
 8006706:	f000 f865 	bl	80067d4 <__malloc_unlock>
 800670a:	f026 0607 	bic.w	r6, r6, #7
 800670e:	1d23      	adds	r3, r4, #4
 8006710:	1af2      	subs	r2, r6, r3
 8006712:	d0b6      	beq.n	8006682 <_malloc_r+0x22>
 8006714:	1b9b      	subs	r3, r3, r6
 8006716:	50a3      	str	r3, [r4, r2]
 8006718:	e7b3      	b.n	8006682 <_malloc_r+0x22>
 800671a:	6862      	ldr	r2, [r4, #4]
 800671c:	42a3      	cmp	r3, r4
 800671e:	bf0c      	ite	eq
 8006720:	6032      	streq	r2, [r6, #0]
 8006722:	605a      	strne	r2, [r3, #4]
 8006724:	e7ec      	b.n	8006700 <_malloc_r+0xa0>
 8006726:	4623      	mov	r3, r4
 8006728:	6864      	ldr	r4, [r4, #4]
 800672a:	e7b2      	b.n	8006692 <_malloc_r+0x32>
 800672c:	4634      	mov	r4, r6
 800672e:	6876      	ldr	r6, [r6, #4]
 8006730:	e7b9      	b.n	80066a6 <_malloc_r+0x46>
 8006732:	230c      	movs	r3, #12
 8006734:	4638      	mov	r0, r7
 8006736:	603b      	str	r3, [r7, #0]
 8006738:	f000 f84c 	bl	80067d4 <__malloc_unlock>
 800673c:	e7a1      	b.n	8006682 <_malloc_r+0x22>
 800673e:	6025      	str	r5, [r4, #0]
 8006740:	e7de      	b.n	8006700 <_malloc_r+0xa0>
 8006742:	bf00      	nop
 8006744:	20000330 	.word	0x20000330

08006748 <_realloc_r>:
 8006748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800674c:	4680      	mov	r8, r0
 800674e:	4614      	mov	r4, r2
 8006750:	460e      	mov	r6, r1
 8006752:	b921      	cbnz	r1, 800675e <_realloc_r+0x16>
 8006754:	4611      	mov	r1, r2
 8006756:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800675a:	f7ff bf81 	b.w	8006660 <_malloc_r>
 800675e:	b92a      	cbnz	r2, 800676c <_realloc_r+0x24>
 8006760:	f7ff ff16 	bl	8006590 <_free_r>
 8006764:	4625      	mov	r5, r4
 8006766:	4628      	mov	r0, r5
 8006768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800676c:	f000 f838 	bl	80067e0 <_malloc_usable_size_r>
 8006770:	4284      	cmp	r4, r0
 8006772:	4607      	mov	r7, r0
 8006774:	d802      	bhi.n	800677c <_realloc_r+0x34>
 8006776:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800677a:	d812      	bhi.n	80067a2 <_realloc_r+0x5a>
 800677c:	4621      	mov	r1, r4
 800677e:	4640      	mov	r0, r8
 8006780:	f7ff ff6e 	bl	8006660 <_malloc_r>
 8006784:	4605      	mov	r5, r0
 8006786:	2800      	cmp	r0, #0
 8006788:	d0ed      	beq.n	8006766 <_realloc_r+0x1e>
 800678a:	42bc      	cmp	r4, r7
 800678c:	4622      	mov	r2, r4
 800678e:	4631      	mov	r1, r6
 8006790:	bf28      	it	cs
 8006792:	463a      	movcs	r2, r7
 8006794:	f7ff fed4 	bl	8006540 <memcpy>
 8006798:	4631      	mov	r1, r6
 800679a:	4640      	mov	r0, r8
 800679c:	f7ff fef8 	bl	8006590 <_free_r>
 80067a0:	e7e1      	b.n	8006766 <_realloc_r+0x1e>
 80067a2:	4635      	mov	r5, r6
 80067a4:	e7df      	b.n	8006766 <_realloc_r+0x1e>
	...

080067a8 <_sbrk_r>:
 80067a8:	b538      	push	{r3, r4, r5, lr}
 80067aa:	2300      	movs	r3, #0
 80067ac:	4d05      	ldr	r5, [pc, #20]	; (80067c4 <_sbrk_r+0x1c>)
 80067ae:	4604      	mov	r4, r0
 80067b0:	4608      	mov	r0, r1
 80067b2:	602b      	str	r3, [r5, #0]
 80067b4:	f7fb f95e 	bl	8001a74 <_sbrk>
 80067b8:	1c43      	adds	r3, r0, #1
 80067ba:	d102      	bne.n	80067c2 <_sbrk_r+0x1a>
 80067bc:	682b      	ldr	r3, [r5, #0]
 80067be:	b103      	cbz	r3, 80067c2 <_sbrk_r+0x1a>
 80067c0:	6023      	str	r3, [r4, #0]
 80067c2:	bd38      	pop	{r3, r4, r5, pc}
 80067c4:	20000338 	.word	0x20000338

080067c8 <__malloc_lock>:
 80067c8:	4801      	ldr	r0, [pc, #4]	; (80067d0 <__malloc_lock+0x8>)
 80067ca:	f000 b811 	b.w	80067f0 <__retarget_lock_acquire_recursive>
 80067ce:	bf00      	nop
 80067d0:	2000033c 	.word	0x2000033c

080067d4 <__malloc_unlock>:
 80067d4:	4801      	ldr	r0, [pc, #4]	; (80067dc <__malloc_unlock+0x8>)
 80067d6:	f000 b80c 	b.w	80067f2 <__retarget_lock_release_recursive>
 80067da:	bf00      	nop
 80067dc:	2000033c 	.word	0x2000033c

080067e0 <_malloc_usable_size_r>:
 80067e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067e4:	1f18      	subs	r0, r3, #4
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	bfbc      	itt	lt
 80067ea:	580b      	ldrlt	r3, [r1, r0]
 80067ec:	18c0      	addlt	r0, r0, r3
 80067ee:	4770      	bx	lr

080067f0 <__retarget_lock_acquire_recursive>:
 80067f0:	4770      	bx	lr

080067f2 <__retarget_lock_release_recursive>:
 80067f2:	4770      	bx	lr

080067f4 <_init>:
 80067f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067f6:	bf00      	nop
 80067f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067fa:	bc08      	pop	{r3}
 80067fc:	469e      	mov	lr, r3
 80067fe:	4770      	bx	lr

08006800 <_fini>:
 8006800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006802:	bf00      	nop
 8006804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006806:	bc08      	pop	{r3}
 8006808:	469e      	mov	lr, r3
 800680a:	4770      	bx	lr
