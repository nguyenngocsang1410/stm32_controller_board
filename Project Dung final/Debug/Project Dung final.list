
Project Dung final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c14  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08009d24  08009d24  00019d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d8c  08009d8c  0002018c  2**0
                  CONTENTS
  4 .ARM          00000000  08009d8c  08009d8c  0002018c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009d8c  08009d8c  0002018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d8c  08009d8c  00019d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d90  08009d90  00019d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  08009d94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c28  2000018c  08009f20  0002018c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000db4  08009f20  00020db4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012fb3  00000000  00000000  000201b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000332a  00000000  00000000  00033168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  00036498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f10  00000000  00000000  00037530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a965  00000000  00000000  00038440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014157  00000000  00000000  00052da5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d40c  00000000  00000000  00066efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f4308  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004478  00000000  00000000  000f4358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000018c 	.word	0x2000018c
 800012c:	00000000 	.word	0x00000000
 8000130:	08009d0c 	.word	0x08009d0c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000190 	.word	0x20000190
 800014c:	08009d0c 	.word	0x08009d0c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <__aeabi_d2f>:
 800092c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000930:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000934:	bf24      	itt	cs
 8000936:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800093a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800093e:	d90d      	bls.n	800095c <__aeabi_d2f+0x30>
 8000940:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000944:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000948:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800094c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000950:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000954:	bf08      	it	eq
 8000956:	f020 0001 	biceq.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000960:	d121      	bne.n	80009a6 <__aeabi_d2f+0x7a>
 8000962:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000966:	bfbc      	itt	lt
 8000968:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800096c:	4770      	bxlt	lr
 800096e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000972:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000976:	f1c2 0218 	rsb	r2, r2, #24
 800097a:	f1c2 0c20 	rsb	ip, r2, #32
 800097e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000982:	fa20 f002 	lsr.w	r0, r0, r2
 8000986:	bf18      	it	ne
 8000988:	f040 0001 	orrne.w	r0, r0, #1
 800098c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000990:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000994:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000998:	ea40 000c 	orr.w	r0, r0, ip
 800099c:	fa23 f302 	lsr.w	r3, r3, r2
 80009a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009a4:	e7cc      	b.n	8000940 <__aeabi_d2f+0x14>
 80009a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009aa:	d107      	bne.n	80009bc <__aeabi_d2f+0x90>
 80009ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009b0:	bf1e      	ittt	ne
 80009b2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009b6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ba:	4770      	bxne	lr
 80009bc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <BUTTON_ReadPin>:
#include "BUTTON.h"

// ************************** Low Level Layer *****************************************************//
static ButtonState BUTTON_ReadPin(Button *Button) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  return HAL_GPIO_ReadPin(Button->Port, Button->Pin);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	889b      	ldrh	r3, [r3, #4]
 80009dc:	4619      	mov	r1, r3
 80009de:	4610      	mov	r0, r2
 80009e0:	f001 fb9a 	bl	8002118 <HAL_GPIO_ReadPin>
 80009e4:	4603      	mov	r3, r0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <buttonInit>:
// ************************** High Level Layer *****************************************************//
void buttonInit(Button *Button, GPIO_TypeDef *BUTTON_PORT, uint16_t BUTTON_Pin) {
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b084      	sub	sp, #16
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	60f8      	str	r0, [r7, #12]
 80009f6:	60b9      	str	r1, [r7, #8]
 80009f8:	4613      	mov	r3, r2
 80009fa:	80fb      	strh	r3, [r7, #6]
  Button->Port = BUTTON_PORT;
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	68ba      	ldr	r2, [r7, #8]
 8000a00:	601a      	str	r2, [r3, #0]
  Button->Pin = BUTTON_Pin;
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	88fa      	ldrh	r2, [r7, #6]
 8000a06:	809a      	strh	r2, [r3, #4]

  Button->state = BUTTON_ReadPin(Button);
 8000a08:	68f8      	ldr	r0, [r7, #12]
 8000a0a:	f7ff ffdf 	bl	80009cc <BUTTON_ReadPin>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	461a      	mov	r2, r3
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	71da      	strb	r2, [r3, #7]
  Button->preState = Button->state;
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	79da      	ldrb	r2, [r3, #7]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	719a      	strb	r2, [r3, #6]
  Button->timeIn = HAL_GetTick();
 8000a1e:	f001 f8df 	bl	8001be0 <HAL_GetTick>
 8000a22:	4602      	mov	r2, r0
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	609a      	str	r2, [r3, #8]
  Button->hasChanged = false;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	741a      	strb	r2, [r3, #16]
}
 8000a2e:	bf00      	nop
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <buttonRead>:

ButtonState buttonRead(Button *Button) {
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b084      	sub	sp, #16
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
  ButtonState curState = BUTTON_ReadPin(Button);
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f7ff ffc4 	bl	80009cc <BUTTON_ReadPin>
 8000a44:	4603      	mov	r3, r0
 8000a46:	73fb      	strb	r3, [r7, #15]
  uint32_t now = HAL_GetTick();
 8000a48:	f001 f8ca 	bl	8001be0 <HAL_GetTick>
 8000a4c:	60b8      	str	r0, [r7, #8]
  if (curState != Button->state) {
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	79db      	ldrb	r3, [r3, #7]
 8000a52:	7bfa      	ldrb	r2, [r7, #15]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d016      	beq.n	8000a86 <buttonRead+0x50>
	Button->timeDelta = now - Button->timeIn;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	68ba      	ldr	r2, [r7, #8]
 8000a5e:	1ad2      	subs	r2, r2, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	60da      	str	r2, [r3, #12]
	if (Button->timeDelta > DEBOUND_TIME) {
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	2b32      	cmp	r3, #50	; 0x32
 8000a6a:	d90f      	bls.n	8000a8c <buttonRead+0x56>
	  Button->state = curState;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	7bfa      	ldrb	r2, [r7, #15]
 8000a70:	71da      	strb	r2, [r3, #7]
	  Button->timeDelta = 0;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2200      	movs	r2, #0
 8000a76:	60da      	str	r2, [r3, #12]
	  Button->timeIn = now;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	68ba      	ldr	r2, [r7, #8]
 8000a7c:	609a      	str	r2, [r3, #8]
	  Button->hasChanged = true;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2201      	movs	r2, #1
 8000a82:	741a      	strb	r2, [r3, #16]
 8000a84:	e002      	b.n	8000a8c <buttonRead+0x56>
	}
  } else {
	Button->timeIn = now;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	68ba      	ldr	r2, [r7, #8]
 8000a8a:	609a      	str	r2, [r3, #8]
  }
  return Button->state;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	79db      	ldrb	r3, [r3, #7]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3710      	adds	r7, #16
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a9c:	f001 f848 	bl	8001b30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa0:	f000 f87a 	bl	8000b98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa4:	f000 fa3e 	bl	8000f24 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000aa8:	f000 f8d2 	bl	8000c50 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000aac:	f000 f928 	bl	8000d00 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ab0:	f000 f97a 	bl	8000da8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ab4:	f000 f9dc 	bl	8000e70 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8000ab8:	f008 fc86 	bl	80093c8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  set_motor2_dir(0);
 8000abc:	2000      	movs	r0, #0
 8000abe:	f000 feaf 	bl	8001820 <set_motor2_dir>

  // For encoders
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000ac2:	213c      	movs	r1, #60	; 0x3c
 8000ac4:	4829      	ldr	r0, [pc, #164]	; (8000b6c <main+0xd4>)
 8000ac6:	f003 fe7d 	bl	80047c4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000aca:	213c      	movs	r1, #60	; 0x3c
 8000acc:	4828      	ldr	r0, [pc, #160]	; (8000b70 <main+0xd8>)
 8000ace:	f003 fe79 	bl	80047c4 <HAL_TIM_Encoder_Start>

  // For PWM
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000ad2:	2104      	movs	r1, #4
 8000ad4:	4827      	ldr	r0, [pc, #156]	; (8000b74 <main+0xdc>)
 8000ad6:	f003 fd31 	bl	800453c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000ada:	2100      	movs	r1, #0
 8000adc:	4826      	ldr	r0, [pc, #152]	; (8000b78 <main+0xe0>)
 8000ade:	f003 fd2d 	bl	800453c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000ae2:	2104      	movs	r1, #4
 8000ae4:	4824      	ldr	r0, [pc, #144]	; (8000b78 <main+0xe0>)
 8000ae6:	f003 fd29 	bl	800453c <HAL_TIM_PWM_Start>

  // For buttons
  buttonInit(&BTN_START, BTN_START_GPIO_Port, BTN_START_Pin);
 8000aea:	2202      	movs	r2, #2
 8000aec:	4923      	ldr	r1, [pc, #140]	; (8000b7c <main+0xe4>)
 8000aee:	4824      	ldr	r0, [pc, #144]	; (8000b80 <main+0xe8>)
 8000af0:	f7ff ff7d 	bl	80009ee <buttonInit>
  buttonInit(&BTN_STOP, BTN_STOP_GPIO_Port, BTN_STOP_Pin);
 8000af4:	2201      	movs	r2, #1
 8000af6:	4921      	ldr	r1, [pc, #132]	; (8000b7c <main+0xe4>)
 8000af8:	4822      	ldr	r0, [pc, #136]	; (8000b84 <main+0xec>)
 8000afa:	f7ff ff78 	bl	80009ee <buttonInit>

  buttonInit(&MODE, MODE_SW_GPIO_Port, MODE_SW_Pin);
 8000afe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b02:	491e      	ldr	r1, [pc, #120]	; (8000b7c <main+0xe4>)
 8000b04:	4820      	ldr	r0, [pc, #128]	; (8000b88 <main+0xf0>)
 8000b06:	f7ff ff72 	bl	80009ee <buttonInit>
  buttonInit(&LVL1, LVL_SW1_GPIO_Port, LVL_SW1_Pin);
 8000b0a:	2208      	movs	r2, #8
 8000b0c:	491b      	ldr	r1, [pc, #108]	; (8000b7c <main+0xe4>)
 8000b0e:	481f      	ldr	r0, [pc, #124]	; (8000b8c <main+0xf4>)
 8000b10:	f7ff ff6d 	bl	80009ee <buttonInit>
  buttonInit(&LVL2, LVL_SW2_GPIO_Port, LVL_SW2_Pin);
 8000b14:	2210      	movs	r2, #16
 8000b16:	4919      	ldr	r1, [pc, #100]	; (8000b7c <main+0xe4>)
 8000b18:	481d      	ldr	r0, [pc, #116]	; (8000b90 <main+0xf8>)
 8000b1a:	f7ff ff68 	bl	80009ee <buttonInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // Main run
  state = MODE.state;
 8000b1e:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <main+0xf0>)
 8000b20:	79da      	ldrb	r2, [r3, #7]
 8000b22:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <main+0xfc>)
 8000b24:	701a      	strb	r2, [r3, #0]

  if (state == RUN)
 8000b26:	4b1b      	ldr	r3, [pc, #108]	; (8000b94 <main+0xfc>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d102      	bne.n	8000b34 <main+0x9c>
	active_run();
 8000b2e:	f000 fca3 	bl	8001478 <active_run>
 8000b32:	e001      	b.n	8000b38 <main+0xa0>
  else
	active_idle();
 8000b34:	f000 fc8c 	bl	8001450 <active_idle>

  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	state = buttonRead(&MODE);
 8000b38:	4813      	ldr	r0, [pc, #76]	; (8000b88 <main+0xf0>)
 8000b3a:	f7ff ff7c 	bl	8000a36 <buttonRead>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <main+0xfc>)
 8000b44:	701a      	strb	r2, [r3, #0]
	if (MODE.hasChanged) {
 8000b46:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <main+0xf0>)
 8000b48:	7c1b      	ldrb	r3, [r3, #16]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d00b      	beq.n	8000b66 <main+0xce>
	  if (state == RUN)
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <main+0xfc>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d102      	bne.n	8000b5c <main+0xc4>
		active_run();
 8000b56:	f000 fc8f 	bl	8001478 <active_run>
 8000b5a:	e001      	b.n	8000b60 <main+0xc8>
	  else
		active_idle();
 8000b5c:	f000 fc78 	bl	8001450 <active_idle>
	  MODE.hasChanged = false;
 8000b60:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <main+0xf0>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	741a      	strb	r2, [r3, #16]
	}
	apply_state();
 8000b66:	f000 fca1 	bl	80014ac <apply_state>
	state = buttonRead(&MODE);
 8000b6a:	e7e5      	b.n	8000b38 <main+0xa0>
 8000b6c:	200001a8 	.word	0x200001a8
 8000b70:	200001f0 	.word	0x200001f0
 8000b74:	20000280 	.word	0x20000280
 8000b78:	20000238 	.word	0x20000238
 8000b7c:	40010c00 	.word	0x40010c00
 8000b80:	200002cc 	.word	0x200002cc
 8000b84:	200002e0 	.word	0x200002e0
 8000b88:	200002f4 	.word	0x200002f4
 8000b8c:	20000308 	.word	0x20000308
 8000b90:	2000031c 	.word	0x2000031c
 8000b94:	200002c8 	.word	0x200002c8

08000b98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b094      	sub	sp, #80	; 0x50
 8000b9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ba2:	2228      	movs	r2, #40	; 0x28
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f009 f8a8 	bl	8009cfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000be2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000be4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000be8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f002 ffb6 	bl	8003b60 <HAL_RCC_OscConfig>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000bfa:	f000 fa4f 	bl	800109c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfe:	230f      	movs	r3, #15
 8000c00:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c02:	2302      	movs	r3, #2
 8000c04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c0e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c10:	2300      	movs	r3, #0
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	2101      	movs	r1, #1
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f003 fa22 	bl	8004064 <HAL_RCC_ClockConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c26:	f000 fa39 	bl	800109c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000c2a:	2310      	movs	r3, #16
 8000c2c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000c2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c32:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	4618      	mov	r0, r3
 8000c38:	f003 fb7a 	bl	8004330 <HAL_RCCEx_PeriphCLKConfig>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c42:	f000 fa2b 	bl	800109c <Error_Handler>
  }
}
 8000c46:	bf00      	nop
 8000c48:	3750      	adds	r7, #80	; 0x50
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08c      	sub	sp, #48	; 0x30
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c56:	f107 030c 	add.w	r3, r7, #12
 8000c5a:	2224      	movs	r2, #36	; 0x24
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f009 f84c 	bl	8009cfc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c6c:	4b22      	ldr	r3, [pc, #136]	; (8000cf8 <MX_TIM1_Init+0xa8>)
 8000c6e:	4a23      	ldr	r2, [pc, #140]	; (8000cfc <MX_TIM1_Init+0xac>)
 8000c70:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c72:	4b21      	ldr	r3, [pc, #132]	; (8000cf8 <MX_TIM1_Init+0xa8>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c78:	4b1f      	ldr	r3, [pc, #124]	; (8000cf8 <MX_TIM1_Init+0xa8>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c7e:	4b1e      	ldr	r3, [pc, #120]	; (8000cf8 <MX_TIM1_Init+0xa8>)
 8000c80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c84:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c86:	4b1c      	ldr	r3, [pc, #112]	; (8000cf8 <MX_TIM1_Init+0xa8>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c8c:	4b1a      	ldr	r3, [pc, #104]	; (8000cf8 <MX_TIM1_Init+0xa8>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c92:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <MX_TIM1_Init+0xa8>)
 8000c94:	2280      	movs	r2, #128	; 0x80
 8000c96:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000ca8:	230a      	movs	r3, #10
 8000caa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000cac:	2300      	movs	r3, #0
 8000cae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000cb8:	230a      	movs	r3, #10
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	480d      	ldr	r0, [pc, #52]	; (8000cf8 <MX_TIM1_Init+0xa8>)
 8000cc4:	f003 fcdc 	bl	8004680 <HAL_TIM_Encoder_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000cce:	f000 f9e5 	bl	800109c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4806      	ldr	r0, [pc, #24]	; (8000cf8 <MX_TIM1_Init+0xa8>)
 8000ce0:	f004 f9f6 	bl	80050d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000cea:	f000 f9d7 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000cee:	bf00      	nop
 8000cf0:	3730      	adds	r7, #48	; 0x30
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200001a8 	.word	0x200001a8
 8000cfc:	40012c00 	.word	0x40012c00

08000d00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08c      	sub	sp, #48	; 0x30
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d06:	f107 030c 	add.w	r3, r7, #12
 8000d0a:	2224      	movs	r2, #36	; 0x24
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f008 fff4 	bl	8009cfc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d1c:	4b21      	ldr	r3, [pc, #132]	; (8000da4 <MX_TIM2_Init+0xa4>)
 8000d1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d24:	4b1f      	ldr	r3, [pc, #124]	; (8000da4 <MX_TIM2_Init+0xa4>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2a:	4b1e      	ldr	r3, [pc, #120]	; (8000da4 <MX_TIM2_Init+0xa4>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000d30:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <MX_TIM2_Init+0xa4>)
 8000d32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d38:	4b1a      	ldr	r3, [pc, #104]	; (8000da4 <MX_TIM2_Init+0xa4>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d3e:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <MX_TIM2_Init+0xa4>)
 8000d40:	2280      	movs	r2, #128	; 0x80
 8000d42:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d44:	2303      	movs	r3, #3
 8000d46:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000d54:	230a      	movs	r3, #10
 8000d56:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000d64:	230a      	movs	r3, #10
 8000d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000d68:	f107 030c 	add.w	r3, r7, #12
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	480d      	ldr	r0, [pc, #52]	; (8000da4 <MX_TIM2_Init+0xa4>)
 8000d70:	f003 fc86 	bl	8004680 <HAL_TIM_Encoder_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000d7a:	f000 f98f 	bl	800109c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4806      	ldr	r0, [pc, #24]	; (8000da4 <MX_TIM2_Init+0xa4>)
 8000d8c:	f004 f9a0 	bl	80050d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000d96:	f000 f981 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	3730      	adds	r7, #48	; 0x30
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	200001f0 	.word	0x200001f0

08000da8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	; 0x28
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dae:	f107 0320 	add.w	r3, r7, #32
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	60da      	str	r2, [r3, #12]
 8000dc4:	611a      	str	r2, [r3, #16]
 8000dc6:	615a      	str	r2, [r3, #20]
 8000dc8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dca:	4b27      	ldr	r3, [pc, #156]	; (8000e68 <MX_TIM3_Init+0xc0>)
 8000dcc:	4a27      	ldr	r2, [pc, #156]	; (8000e6c <MX_TIM3_Init+0xc4>)
 8000dce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48;
 8000dd0:	4b25      	ldr	r3, [pc, #148]	; (8000e68 <MX_TIM3_Init+0xc0>)
 8000dd2:	2230      	movs	r2, #48	; 0x30
 8000dd4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd6:	4b24      	ldr	r3, [pc, #144]	; (8000e68 <MX_TIM3_Init+0xc0>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 8000ddc:	4b22      	ldr	r3, [pc, #136]	; (8000e68 <MX_TIM3_Init+0xc0>)
 8000dde:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000de2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de4:	4b20      	ldr	r3, [pc, #128]	; (8000e68 <MX_TIM3_Init+0xc0>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dea:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <MX_TIM3_Init+0xc0>)
 8000dec:	2280      	movs	r2, #128	; 0x80
 8000dee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000df0:	481d      	ldr	r0, [pc, #116]	; (8000e68 <MX_TIM3_Init+0xc0>)
 8000df2:	f003 fb53 	bl	800449c <HAL_TIM_PWM_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000dfc:	f000 f94e 	bl	800109c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e00:	2300      	movs	r3, #0
 8000e02:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e04:	2300      	movs	r3, #0
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e08:	f107 0320 	add.w	r3, r7, #32
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4816      	ldr	r0, [pc, #88]	; (8000e68 <MX_TIM3_Init+0xc0>)
 8000e10:	f004 f95e 	bl	80050d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000e1a:	f000 f93f 	bl	800109c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e1e:	2360      	movs	r3, #96	; 0x60
 8000e20:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	2200      	movs	r2, #0
 8000e32:	4619      	mov	r1, r3
 8000e34:	480c      	ldr	r0, [pc, #48]	; (8000e68 <MX_TIM3_Init+0xc0>)
 8000e36:	f003 fe5b 	bl	8004af0 <HAL_TIM_PWM_ConfigChannel>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000e40:	f000 f92c 	bl	800109c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	2204      	movs	r2, #4
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4807      	ldr	r0, [pc, #28]	; (8000e68 <MX_TIM3_Init+0xc0>)
 8000e4c:	f003 fe50 	bl	8004af0 <HAL_TIM_PWM_ConfigChannel>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000e56:	f000 f921 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e5a:	4803      	ldr	r0, [pc, #12]	; (8000e68 <MX_TIM3_Init+0xc0>)
 8000e5c:	f000 fa1c 	bl	8001298 <HAL_TIM_MspPostInit>

}
 8000e60:	bf00      	nop
 8000e62:	3728      	adds	r7, #40	; 0x28
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000238 	.word	0x20000238
 8000e6c:	40000400 	.word	0x40000400

08000e70 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	; 0x28
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e76:	f107 0320 	add.w	r3, r7, #32
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	60da      	str	r2, [r3, #12]
 8000e8c:	611a      	str	r2, [r3, #16]
 8000e8e:	615a      	str	r2, [r3, #20]
 8000e90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e92:	4b22      	ldr	r3, [pc, #136]	; (8000f1c <MX_TIM4_Init+0xac>)
 8000e94:	4a22      	ldr	r2, [pc, #136]	; (8000f20 <MX_TIM4_Init+0xb0>)
 8000e96:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48;
 8000e98:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <MX_TIM4_Init+0xac>)
 8000e9a:	2230      	movs	r2, #48	; 0x30
 8000e9c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e9e:	4b1f      	ldr	r3, [pc, #124]	; (8000f1c <MX_TIM4_Init+0xac>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000ea4:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <MX_TIM4_Init+0xac>)
 8000ea6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000eaa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eac:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <MX_TIM4_Init+0xac>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000eb2:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <MX_TIM4_Init+0xac>)
 8000eb4:	2280      	movs	r2, #128	; 0x80
 8000eb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000eb8:	4818      	ldr	r0, [pc, #96]	; (8000f1c <MX_TIM4_Init+0xac>)
 8000eba:	f003 faef 	bl	800449c <HAL_TIM_PWM_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000ec4:	f000 f8ea 	bl	800109c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ed0:	f107 0320 	add.w	r3, r7, #32
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4811      	ldr	r0, [pc, #68]	; (8000f1c <MX_TIM4_Init+0xac>)
 8000ed8:	f004 f8fa 	bl	80050d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000ee2:	f000 f8db 	bl	800109c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ee6:	2360      	movs	r3, #96	; 0x60
 8000ee8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	2204      	movs	r2, #4
 8000efa:	4619      	mov	r1, r3
 8000efc:	4807      	ldr	r0, [pc, #28]	; (8000f1c <MX_TIM4_Init+0xac>)
 8000efe:	f003 fdf7 	bl	8004af0 <HAL_TIM_PWM_ConfigChannel>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000f08:	f000 f8c8 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f0c:	4803      	ldr	r0, [pc, #12]	; (8000f1c <MX_TIM4_Init+0xac>)
 8000f0e:	f000 f9c3 	bl	8001298 <HAL_TIM_MspPostInit>

}
 8000f12:	bf00      	nop
 8000f14:	3728      	adds	r7, #40	; 0x28
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000280 	.word	0x20000280
 8000f20:	40000800 	.word	0x40000800

08000f24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2a:	f107 0310 	add.w	r3, r7, #16
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f38:	4b53      	ldr	r3, [pc, #332]	; (8001088 <MX_GPIO_Init+0x164>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	4a52      	ldr	r2, [pc, #328]	; (8001088 <MX_GPIO_Init+0x164>)
 8000f3e:	f043 0310 	orr.w	r3, r3, #16
 8000f42:	6193      	str	r3, [r2, #24]
 8000f44:	4b50      	ldr	r3, [pc, #320]	; (8001088 <MX_GPIO_Init+0x164>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	f003 0310 	and.w	r3, r3, #16
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f50:	4b4d      	ldr	r3, [pc, #308]	; (8001088 <MX_GPIO_Init+0x164>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	4a4c      	ldr	r2, [pc, #304]	; (8001088 <MX_GPIO_Init+0x164>)
 8000f56:	f043 0320 	orr.w	r3, r3, #32
 8000f5a:	6193      	str	r3, [r2, #24]
 8000f5c:	4b4a      	ldr	r3, [pc, #296]	; (8001088 <MX_GPIO_Init+0x164>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	f003 0320 	and.w	r3, r3, #32
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f68:	4b47      	ldr	r3, [pc, #284]	; (8001088 <MX_GPIO_Init+0x164>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	4a46      	ldr	r2, [pc, #280]	; (8001088 <MX_GPIO_Init+0x164>)
 8000f6e:	f043 0304 	orr.w	r3, r3, #4
 8000f72:	6193      	str	r3, [r2, #24]
 8000f74:	4b44      	ldr	r3, [pc, #272]	; (8001088 <MX_GPIO_Init+0x164>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	f003 0304 	and.w	r3, r3, #4
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f80:	4b41      	ldr	r3, [pc, #260]	; (8001088 <MX_GPIO_Init+0x164>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	4a40      	ldr	r2, [pc, #256]	; (8001088 <MX_GPIO_Init+0x164>)
 8000f86:	f043 0308 	orr.w	r3, r3, #8
 8000f8a:	6193      	str	r3, [r2, #24]
 8000f8c:	4b3e      	ldr	r3, [pc, #248]	; (8001088 <MX_GPIO_Init+0x164>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	f003 0308 	and.w	r3, r3, #8
 8000f94:	603b      	str	r3, [r7, #0]
 8000f96:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Y_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2130      	movs	r1, #48	; 0x30
 8000f9c:	483b      	ldr	r0, [pc, #236]	; (800108c <MX_GPIO_Init+0x168>)
 8000f9e:	f001 f8d2 	bl	8002146 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M2_L_Pin|M2_R_Pin, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000fa8:	4839      	ldr	r0, [pc, #228]	; (8001090 <MX_GPIO_Init+0x16c>)
 8000faa:	f001 f8cc 	bl	8002146 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000fae:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000fb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb8:	f107 0310 	add.w	r3, r7, #16
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4835      	ldr	r0, [pc, #212]	; (8001094 <MX_GPIO_Init+0x170>)
 8000fc0:	f000 ff26 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_10|GPIO_PIN_15;
 8000fc4:	f248 430c 	movw	r3, #33804	; 0x840c
 8000fc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fce:	f107 0310 	add.w	r3, r7, #16
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	482d      	ldr	r0, [pc, #180]	; (800108c <MX_GPIO_Init+0x168>)
 8000fd6:	f000 ff1b 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Y_Pin LED_G_Pin */
  GPIO_InitStruct.Pin = LED_Y_Pin|LED_G_Pin;
 8000fda:	2330      	movs	r3, #48	; 0x30
 8000fdc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fea:	f107 0310 	add.w	r3, r7, #16
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4826      	ldr	r0, [pc, #152]	; (800108c <MX_GPIO_Init+0x168>)
 8000ff2:	f000 ff0d 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_STOP_Pin BTN_START_Pin MODE_SW_Pin LVL_SW1_Pin
                           LVL_SW2_Pin */
  GPIO_InitStruct.Pin = BTN_STOP_Pin|BTN_START_Pin|MODE_SW_Pin|LVL_SW1_Pin
 8000ff6:	f240 431b 	movw	r3, #1051	; 0x41b
 8000ffa:	613b      	str	r3, [r7, #16]
                          |LVL_SW2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001000:	2301      	movs	r3, #1
 8001002:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001004:	f107 0310 	add.w	r3, r7, #16
 8001008:	4619      	mov	r1, r3
 800100a:	4821      	ldr	r0, [pc, #132]	; (8001090 <MX_GPIO_Init+0x16c>)
 800100c:	f000 ff00 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB11 PB13 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_9;
 8001010:	f642 2304 	movw	r3, #10756	; 0x2a04
 8001014:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001016:	2303      	movs	r3, #3
 8001018:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101a:	f107 0310 	add.w	r3, r7, #16
 800101e:	4619      	mov	r1, r3
 8001020:	481b      	ldr	r0, [pc, #108]	; (8001090 <MX_GPIO_Init+0x16c>)
 8001022:	f000 fef5 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LMS_B_Pin LMS_E_Pin LMS_M_Pin */
  GPIO_InitStruct.Pin = LMS_B_Pin|LMS_E_Pin|LMS_M_Pin;
 8001026:	f44f 5383 	mov.w	r3, #4192	; 0x1060
 800102a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800102c:	4b1a      	ldr	r3, [pc, #104]	; (8001098 <MX_GPIO_Init+0x174>)
 800102e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001030:	2301      	movs	r3, #1
 8001032:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001034:	f107 0310 	add.w	r3, r7, #16
 8001038:	4619      	mov	r1, r3
 800103a:	4815      	ldr	r0, [pc, #84]	; (8001090 <MX_GPIO_Init+0x16c>)
 800103c:	f000 fee8 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : M2_L_Pin M2_R_Pin */
  GPIO_InitStruct.Pin = M2_L_Pin|M2_R_Pin;
 8001040:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001044:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001046:	2301      	movs	r3, #1
 8001048:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	2302      	movs	r3, #2
 8001050:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001052:	f107 0310 	add.w	r3, r7, #16
 8001056:	4619      	mov	r1, r3
 8001058:	480d      	ldr	r0, [pc, #52]	; (8001090 <MX_GPIO_Init+0x16c>)
 800105a:	f000 fed9 	bl	8001e10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2102      	movs	r1, #2
 8001062:	2017      	movs	r0, #23
 8001064:	f000 fe9d 	bl	8001da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001068:	2017      	movs	r0, #23
 800106a:	f000 feb6 	bl	8001dda <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2102      	movs	r1, #2
 8001072:	2028      	movs	r0, #40	; 0x28
 8001074:	f000 fe95 	bl	8001da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001078:	2028      	movs	r0, #40	; 0x28
 800107a:	f000 feae 	bl	8001dda <HAL_NVIC_EnableIRQ>

}
 800107e:	bf00      	nop
 8001080:	3720      	adds	r7, #32
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40021000 	.word	0x40021000
 800108c:	40010800 	.word	0x40010800
 8001090:	40010c00 	.word	0x40010c00
 8001094:	40011000 	.word	0x40011000
 8001098:	10310000 	.word	0x10310000

0800109c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a0:	b672      	cpsid	i
}
 80010a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80010a4:	e7fe      	b.n	80010a4 <Error_Handler+0x8>
	...

080010a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <HAL_MspInit+0x5c>)
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	4a14      	ldr	r2, [pc, #80]	; (8001104 <HAL_MspInit+0x5c>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	6193      	str	r3, [r2, #24]
 80010ba:	4b12      	ldr	r3, [pc, #72]	; (8001104 <HAL_MspInit+0x5c>)
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c6:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <HAL_MspInit+0x5c>)
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	4a0e      	ldr	r2, [pc, #56]	; (8001104 <HAL_MspInit+0x5c>)
 80010cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d0:	61d3      	str	r3, [r2, #28]
 80010d2:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <HAL_MspInit+0x5c>)
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_MspInit+0x60>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	4a04      	ldr	r2, [pc, #16]	; (8001108 <HAL_MspInit+0x60>)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010fa:	bf00      	nop
 80010fc:	3714      	adds	r7, #20
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr
 8001104:	40021000 	.word	0x40021000
 8001108:	40010000 	.word	0x40010000

0800110c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08a      	sub	sp, #40	; 0x28
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 0318 	add.w	r3, r7, #24
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a2b      	ldr	r2, [pc, #172]	; (80011d4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d125      	bne.n	8001178 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800112c:	4b2a      	ldr	r3, [pc, #168]	; (80011d8 <HAL_TIM_Encoder_MspInit+0xcc>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	4a29      	ldr	r2, [pc, #164]	; (80011d8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001132:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001136:	6193      	str	r3, [r2, #24]
 8001138:	4b27      	ldr	r3, [pc, #156]	; (80011d8 <HAL_TIM_Encoder_MspInit+0xcc>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001140:	617b      	str	r3, [r7, #20]
 8001142:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001144:	4b24      	ldr	r3, [pc, #144]	; (80011d8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	4a23      	ldr	r2, [pc, #140]	; (80011d8 <HAL_TIM_Encoder_MspInit+0xcc>)
 800114a:	f043 0304 	orr.w	r3, r3, #4
 800114e:	6193      	str	r3, [r2, #24]
 8001150:	4b21      	ldr	r3, [pc, #132]	; (80011d8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	f003 0304 	and.w	r3, r3, #4
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ECD1A_Pin|ECD1B_Pin;
 800115c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116a:	f107 0318 	add.w	r3, r7, #24
 800116e:	4619      	mov	r1, r3
 8001170:	481a      	ldr	r0, [pc, #104]	; (80011dc <HAL_TIM_Encoder_MspInit+0xd0>)
 8001172:	f000 fe4d 	bl	8001e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001176:	e028      	b.n	80011ca <HAL_TIM_Encoder_MspInit+0xbe>
  else if(htim_encoder->Instance==TIM2)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001180:	d123      	bne.n	80011ca <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	4a14      	ldr	r2, [pc, #80]	; (80011d8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	61d3      	str	r3, [r2, #28]
 800118e:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119a:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <HAL_TIM_Encoder_MspInit+0xcc>)
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	4a0e      	ldr	r2, [pc, #56]	; (80011d8 <HAL_TIM_Encoder_MspInit+0xcc>)
 80011a0:	f043 0304 	orr.w	r3, r3, #4
 80011a4:	6193      	str	r3, [r2, #24]
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <HAL_TIM_Encoder_MspInit+0xcc>)
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	f003 0304 	and.w	r3, r3, #4
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ECD2A_Pin|ECD2B_Pin;
 80011b2:	2303      	movs	r3, #3
 80011b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011be:	f107 0318 	add.w	r3, r7, #24
 80011c2:	4619      	mov	r1, r3
 80011c4:	4805      	ldr	r0, [pc, #20]	; (80011dc <HAL_TIM_Encoder_MspInit+0xd0>)
 80011c6:	f000 fe23 	bl	8001e10 <HAL_GPIO_Init>
}
 80011ca:	bf00      	nop
 80011cc:	3728      	adds	r7, #40	; 0x28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40012c00 	.word	0x40012c00
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40010800 	.word	0x40010800

080011e0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	; 0x28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 0318 	add.w	r3, r7, #24
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
  if(htim_pwm->Instance==TIM3)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a23      	ldr	r2, [pc, #140]	; (8001288 <HAL_TIM_PWM_MspInit+0xa8>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d10c      	bne.n	800121a <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001200:	4b22      	ldr	r3, [pc, #136]	; (800128c <HAL_TIM_PWM_MspInit+0xac>)
 8001202:	69db      	ldr	r3, [r3, #28]
 8001204:	4a21      	ldr	r2, [pc, #132]	; (800128c <HAL_TIM_PWM_MspInit+0xac>)
 8001206:	f043 0302 	orr.w	r3, r3, #2
 800120a:	61d3      	str	r3, [r2, #28]
 800120c:	4b1f      	ldr	r3, [pc, #124]	; (800128c <HAL_TIM_PWM_MspInit+0xac>)
 800120e:	69db      	ldr	r3, [r3, #28]
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	617b      	str	r3, [r7, #20]
 8001216:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001218:	e031      	b.n	800127e <HAL_TIM_PWM_MspInit+0x9e>
  else if(htim_pwm->Instance==TIM4)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a1c      	ldr	r2, [pc, #112]	; (8001290 <HAL_TIM_PWM_MspInit+0xb0>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d12c      	bne.n	800127e <HAL_TIM_PWM_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001224:	4b19      	ldr	r3, [pc, #100]	; (800128c <HAL_TIM_PWM_MspInit+0xac>)
 8001226:	69db      	ldr	r3, [r3, #28]
 8001228:	4a18      	ldr	r2, [pc, #96]	; (800128c <HAL_TIM_PWM_MspInit+0xac>)
 800122a:	f043 0304 	orr.w	r3, r3, #4
 800122e:	61d3      	str	r3, [r2, #28]
 8001230:	4b16      	ldr	r3, [pc, #88]	; (800128c <HAL_TIM_PWM_MspInit+0xac>)
 8001232:	69db      	ldr	r3, [r3, #28]
 8001234:	f003 0304 	and.w	r3, r3, #4
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800123c:	4b13      	ldr	r3, [pc, #76]	; (800128c <HAL_TIM_PWM_MspInit+0xac>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	4a12      	ldr	r2, [pc, #72]	; (800128c <HAL_TIM_PWM_MspInit+0xac>)
 8001242:	f043 0308 	orr.w	r3, r3, #8
 8001246:	6193      	str	r3, [r2, #24]
 8001248:	4b10      	ldr	r3, [pc, #64]	; (800128c <HAL_TIM_PWM_MspInit+0xac>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	f003 0308 	and.w	r3, r3, #8
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001254:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125e:	2302      	movs	r3, #2
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001262:	f107 0318 	add.w	r3, r7, #24
 8001266:	4619      	mov	r1, r3
 8001268:	480a      	ldr	r0, [pc, #40]	; (8001294 <HAL_TIM_PWM_MspInit+0xb4>)
 800126a:	f000 fdd1 	bl	8001e10 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 800126e:	2200      	movs	r2, #0
 8001270:	2101      	movs	r1, #1
 8001272:	201e      	movs	r0, #30
 8001274:	f000 fd95 	bl	8001da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001278:	201e      	movs	r0, #30
 800127a:	f000 fdae 	bl	8001dda <HAL_NVIC_EnableIRQ>
}
 800127e:	bf00      	nop
 8001280:	3728      	adds	r7, #40	; 0x28
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40000400 	.word	0x40000400
 800128c:	40021000 	.word	0x40021000
 8001290:	40000800 	.word	0x40000800
 8001294:	40010c00 	.word	0x40010c00

08001298 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 0310 	add.w	r3, r7, #16
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a1e      	ldr	r2, [pc, #120]	; (800132c <HAL_TIM_MspPostInit+0x94>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d118      	bne.n	80012ea <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b8:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <HAL_TIM_MspPostInit+0x98>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	4a1c      	ldr	r2, [pc, #112]	; (8001330 <HAL_TIM_MspPostInit+0x98>)
 80012be:	f043 0304 	orr.w	r3, r3, #4
 80012c2:	6193      	str	r3, [r2, #24]
 80012c4:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <HAL_TIM_MspPostInit+0x98>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	f003 0304 	and.w	r3, r3, #4
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWM1_F_Pin|PWM1_B_Pin;
 80012d0:	23c0      	movs	r3, #192	; 0xc0
 80012d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2302      	movs	r3, #2
 80012da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012dc:	f107 0310 	add.w	r3, r7, #16
 80012e0:	4619      	mov	r1, r3
 80012e2:	4814      	ldr	r0, [pc, #80]	; (8001334 <HAL_TIM_MspPostInit+0x9c>)
 80012e4:	f000 fd94 	bl	8001e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80012e8:	e01c      	b.n	8001324 <HAL_TIM_MspPostInit+0x8c>
  else if(htim->Instance==TIM4)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a12      	ldr	r2, [pc, #72]	; (8001338 <HAL_TIM_MspPostInit+0xa0>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d117      	bne.n	8001324 <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f4:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <HAL_TIM_MspPostInit+0x98>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	4a0d      	ldr	r2, [pc, #52]	; (8001330 <HAL_TIM_MspPostInit+0x98>)
 80012fa:	f043 0308 	orr.w	r3, r3, #8
 80012fe:	6193      	str	r3, [r2, #24]
 8001300:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <HAL_TIM_MspPostInit+0x98>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	f003 0308 	and.w	r3, r3, #8
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM2_Pin;
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001310:	2302      	movs	r3, #2
 8001312:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001314:	2302      	movs	r3, #2
 8001316:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM2_GPIO_Port, &GPIO_InitStruct);
 8001318:	f107 0310 	add.w	r3, r7, #16
 800131c:	4619      	mov	r1, r3
 800131e:	4807      	ldr	r0, [pc, #28]	; (800133c <HAL_TIM_MspPostInit+0xa4>)
 8001320:	f000 fd76 	bl	8001e10 <HAL_GPIO_Init>
}
 8001324:	bf00      	nop
 8001326:	3720      	adds	r7, #32
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40000400 	.word	0x40000400
 8001330:	40021000 	.word	0x40021000
 8001334:	40010800 	.word	0x40010800
 8001338:	40000800 	.word	0x40000800
 800133c:	40010c00 	.word	0x40010c00

08001340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <NMI_Handler+0x4>

08001346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134a:	e7fe      	b.n	800134a <HardFault_Handler+0x4>

0800134c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <MemManage_Handler+0x4>

08001352 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <BusFault_Handler+0x4>

08001358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <UsageFault_Handler+0x4>

0800135e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr

0800136a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr

08001376 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr

08001382 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001386:	f000 fc19 	bl	8001bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001394:	4802      	ldr	r0, [pc, #8]	; (80013a0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001396:	f001 f850 	bl	800243a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	200008a8 	.word	0x200008a8

080013a4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LMS_E_Pin);
 80013a8:	2020      	movs	r0, #32
 80013aa:	f000 fefd 	bl	80021a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LMS_M_Pin);
 80013ae:	2040      	movs	r0, #64	; 0x40
 80013b0:	f000 fefa 	bl	80021a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80013bc:	4802      	ldr	r0, [pc, #8]	; (80013c8 <TIM4_IRQHandler+0x10>)
 80013be:	f003 fa8f 	bl	80048e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000280 	.word	0x20000280

080013cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LMS_B_Pin);
 80013d0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80013d4:	f000 fee8 	bl	80021a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}

080013dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr

080013e8 <MAP>:

uint16_t numberOfRound[3] = { 100, 200, 300 };
float m1_velo = 0, m2_velo = 0;
/* Private user code ---------------------------------------------------------*/
uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax,
	uint32_t au32_OUTmin, uint32_t au32_OUTmax) {
 80013e8:	b5b0      	push	{r4, r5, r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
 80013f4:	603b      	str	r3, [r7, #0]
  uint32_t val = au32_IN - au32_INmin;
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	617b      	str	r3, [r7, #20]
  val = val * (au32_OUTmax - au32_OUTmin);
 80013fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	1ad2      	subs	r2, r2, r3
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	fb02 f303 	mul.w	r3, r2, r3
 800140a:	617b      	str	r3, [r7, #20]
  val = val / (1.0 * (au32_INmax - au32_INmin));
 800140c:	6978      	ldr	r0, [r7, #20]
 800140e:	f7fe ffe1 	bl	80003d4 <__aeabi_ui2d>
 8001412:	4604      	mov	r4, r0
 8001414:	460d      	mov	r5, r1
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	4618      	mov	r0, r3
 800141e:	f7fe ffd9 	bl	80003d4 <__aeabi_ui2d>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	4620      	mov	r0, r4
 8001428:	4629      	mov	r1, r5
 800142a:	f7ff f977 	bl	800071c <__aeabi_ddiv>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4610      	mov	r0, r2
 8001434:	4619      	mov	r1, r3
 8001436:	f7ff fa59 	bl	80008ec <__aeabi_d2uiz>
 800143a:	4603      	mov	r3, r0
 800143c:	617b      	str	r3, [r7, #20]
  val = val + au32_OUTmin;
 800143e:	697a      	ldr	r2, [r7, #20]
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	4413      	add	r3, r2
 8001444:	617b      	str	r3, [r7, #20]
  return val;
 8001446:	697b      	ldr	r3, [r7, #20]
}
 8001448:	4618      	mov	r0, r3
 800144a:	3718      	adds	r7, #24
 800144c:	46bd      	mov	sp, r7
 800144e:	bdb0      	pop	{r4, r5, r7, pc}

08001450 <active_idle>:

void active_idle() {
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  stop_motor();
 8001454:	f000 fa32 	bl	80018bc <stop_motor>
  if (RUN_MODE)
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <active_idle+0x20>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d002      	beq.n	8001466 <active_idle+0x16>
	RUN_MODE = false;
 8001460:	4b03      	ldr	r3, [pc, #12]	; (8001470 <active_idle+0x20>)
 8001462:	2200      	movs	r2, #0
 8001464:	701a      	strb	r2, [r3, #0]
  IDLE_MODE = true;
 8001466:	4b03      	ldr	r3, [pc, #12]	; (8001474 <active_idle+0x24>)
 8001468:	2201      	movs	r2, #1
 800146a:	701a      	strb	r2, [r3, #0]
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000330 	.word	0x20000330
 8001474:	20000331 	.word	0x20000331

08001478 <active_run>:
bool RUN_CMD = false;
bool M2_FWD = true;
uint16_t revCount = 0;
void active_run() {
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  stop_motor();
 800147c:	f000 fa1e 	bl	80018bc <stop_motor>
  if (IDLE_MODE)
 8001480:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <active_run+0x28>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d002      	beq.n	800148e <active_run+0x16>
	IDLE_MODE = false;
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <active_run+0x28>)
 800148a:	2200      	movs	r2, #0
 800148c:	701a      	strb	r2, [r3, #0]
  RUN_MODE = true;
 800148e:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <active_run+0x2c>)
 8001490:	2201      	movs	r2, #1
 8001492:	701a      	strb	r2, [r3, #0]

  RUN_CMD = false;
 8001494:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <active_run+0x30>)
 8001496:	2200      	movs	r2, #0
 8001498:	701a      	strb	r2, [r3, #0]
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000331 	.word	0x20000331
 80014a4:	20000330 	.word	0x20000330
 80014a8:	20000340 	.word	0x20000340

080014ac <apply_state>:

void apply_state() {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af02      	add	r7, sp, #8
  if (check_setting()) {
 80014b2:	f000 f925 	bl	8001700 <check_setting>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d007      	beq.n	80014cc <apply_state+0x20>
	stop_motor();
 80014bc:	f000 f9fe 	bl	80018bc <stop_motor>
	if (RUN_MODE) {
 80014c0:	4b81      	ldr	r3, [pc, #516]	; (80016c8 <apply_state+0x21c>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <apply_state+0x20>
	  active_run();
 80014c8:	f7ff ffd6 	bl	8001478 <active_run>
	}
  }

  if (IDLE_MODE) {
 80014cc:	4b7f      	ldr	r3, [pc, #508]	; (80016cc <apply_state+0x220>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d067      	beq.n	80015a4 <apply_state+0xf8>
	HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, GPIO_PIN_SET);
 80014d4:	2201      	movs	r2, #1
 80014d6:	2110      	movs	r1, #16
 80014d8:	487d      	ldr	r0, [pc, #500]	; (80016d0 <apply_state+0x224>)
 80014da:	f000 fe34 	bl	8002146 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 80014de:	2200      	movs	r2, #0
 80014e0:	2120      	movs	r1, #32
 80014e2:	487b      	ldr	r0, [pc, #492]	; (80016d0 <apply_state+0x224>)
 80014e4:	f000 fe2f 	bl	8002146 <HAL_GPIO_WritePin>

	ButtonState BTN_START_curState = buttonRead(&BTN_START);
 80014e8:	487a      	ldr	r0, [pc, #488]	; (80016d4 <apply_state+0x228>)
 80014ea:	f7ff faa4 	bl	8000a36 <buttonRead>
 80014ee:	4603      	mov	r3, r0
 80014f0:	717b      	strb	r3, [r7, #5]
	ButtonState BTN_STOP_curState = buttonRead(&BTN_STOP);
 80014f2:	4879      	ldr	r0, [pc, #484]	; (80016d8 <apply_state+0x22c>)
 80014f4:	f7ff fa9f 	bl	8000a36 <buttonRead>
 80014f8:	4603      	mov	r3, r0
 80014fa:	713b      	strb	r3, [r7, #4]

	if ((BTN_START_curState == 1 && BTN_STOP_curState == 1)
 80014fc:	797b      	ldrb	r3, [r7, #5]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d102      	bne.n	8001508 <apply_state+0x5c>
 8001502:	793b      	ldrb	r3, [r7, #4]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d005      	beq.n	8001514 <apply_state+0x68>
		|| (BTN_START_curState == 0 && BTN_STOP_curState == 0)) {
 8001508:	797b      	ldrb	r3, [r7, #5]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d108      	bne.n	8001520 <apply_state+0x74>
 800150e:	793b      	ldrb	r3, [r7, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d105      	bne.n	8001520 <apply_state+0x74>
	  set_motor(2, 0, 0);
 8001514:	2200      	movs	r2, #0
 8001516:	2100      	movs	r1, #0
 8001518:	2002      	movs	r0, #2
 800151a:	f000 f92d 	bl	8001778 <set_motor>
	  return;
 800151e:	e0cf      	b.n	80016c0 <apply_state+0x214>
	} else if (BTN_START_curState == 0) {
 8001520:	797b      	ldrb	r3, [r7, #5]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d11c      	bne.n	8001560 <apply_state+0xb4>
	  if (END_REACH) {
 8001526:	4b6d      	ldr	r3, [pc, #436]	; (80016dc <apply_state+0x230>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d005      	beq.n	800153a <apply_state+0x8e>
		set_motor(2, 0, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	2100      	movs	r1, #0
 8001532:	2002      	movs	r0, #2
 8001534:	f000 f920 	bl	8001778 <set_motor>
		return;
 8001538:	e0c2      	b.n	80016c0 <apply_state+0x214>
	  } else
		set_motor(2, 1, MAP(DEFAULT_MOTOR_SPD, 0, 4096, 0, 1000));
 800153a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	2300      	movs	r3, #0
 8001542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001546:	2100      	movs	r1, #0
 8001548:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800154c:	f7ff ff4c 	bl	80013e8 <MAP>
 8001550:	4603      	mov	r3, r0
 8001552:	b29b      	uxth	r3, r3
 8001554:	461a      	mov	r2, r3
 8001556:	2101      	movs	r1, #1
 8001558:	2002      	movs	r0, #2
 800155a:	f000 f90d 	bl	8001778 <set_motor>
 800155e:	e0af      	b.n	80016c0 <apply_state+0x214>
	} else if (BTN_STOP_curState == 0) {
 8001560:	793b      	ldrb	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	f040 80ac 	bne.w	80016c0 <apply_state+0x214>
	  if (BEGIN_REACH) {
 8001568:	4b5d      	ldr	r3, [pc, #372]	; (80016e0 <apply_state+0x234>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d005      	beq.n	800157c <apply_state+0xd0>
		set_motor(2, 0, 0);
 8001570:	2200      	movs	r2, #0
 8001572:	2100      	movs	r1, #0
 8001574:	2002      	movs	r0, #2
 8001576:	f000 f8ff 	bl	8001778 <set_motor>
		return;
 800157a:	e0a1      	b.n	80016c0 <apply_state+0x214>
	  } else
		set_motor(2, -1, MAP(DEFAULT_MOTOR_SPD, 0, 4096, 0, 1000));
 800157c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	2300      	movs	r3, #0
 8001584:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001588:	2100      	movs	r1, #0
 800158a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800158e:	f7ff ff2b 	bl	80013e8 <MAP>
 8001592:	4603      	mov	r3, r0
 8001594:	b29b      	uxth	r3, r3
 8001596:	461a      	mov	r2, r3
 8001598:	f04f 31ff 	mov.w	r1, #4294967295
 800159c:	2002      	movs	r0, #2
 800159e:	f000 f8eb 	bl	8001778 <set_motor>
 80015a2:	e08d      	b.n	80016c0 <apply_state+0x214>
	}
  } else if (RUN_MODE) {
 80015a4:	4b48      	ldr	r3, [pc, #288]	; (80016c8 <apply_state+0x21c>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f000 8089 	beq.w	80016c0 <apply_state+0x214>
	ButtonState BTN_START_curState = buttonRead(&BTN_START);
 80015ae:	4849      	ldr	r0, [pc, #292]	; (80016d4 <apply_state+0x228>)
 80015b0:	f7ff fa41 	bl	8000a36 <buttonRead>
 80015b4:	4603      	mov	r3, r0
 80015b6:	71fb      	strb	r3, [r7, #7]
	ButtonState BTN_STOP_curState = buttonRead(&BTN_STOP);
 80015b8:	4847      	ldr	r0, [pc, #284]	; (80016d8 <apply_state+0x22c>)
 80015ba:	f7ff fa3c 	bl	8000a36 <buttonRead>
 80015be:	4603      	mov	r3, r0
 80015c0:	71bb      	strb	r3, [r7, #6]

	if (BTN_STOP_curState == 0) {
 80015c2:	79bb      	ldrb	r3, [r7, #6]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d102      	bne.n	80015ce <apply_state+0x122>
	  active_run();
 80015c8:	f7ff ff56 	bl	8001478 <active_run>
	  return;
 80015cc:	e078      	b.n	80016c0 <apply_state+0x214>
	}

	if (BEGIN_REACH == false && RUN_CMD == false) {
 80015ce:	4b44      	ldr	r3, [pc, #272]	; (80016e0 <apply_state+0x234>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	f083 0301 	eor.w	r3, r3, #1
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d00c      	beq.n	80015f6 <apply_state+0x14a>
 80015dc:	4b41      	ldr	r3, [pc, #260]	; (80016e4 <apply_state+0x238>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	f083 0301 	eor.w	r3, r3, #1
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d005      	beq.n	80015f6 <apply_state+0x14a>
	  // Not HOME
	  flash_LED(LED_Y);
 80015ea:	4b3f      	ldr	r3, [pc, #252]	; (80016e8 <apply_state+0x23c>)
 80015ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015f0:	f000 f972 	bl	80018d8 <flash_LED>
	  return;
 80015f4:	e064      	b.n	80016c0 <apply_state+0x214>
	} else if (BEGIN_REACH == true && RUN_CMD == false) {
 80015f6:	4b3a      	ldr	r3, [pc, #232]	; (80016e0 <apply_state+0x234>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d012      	beq.n	8001624 <apply_state+0x178>
 80015fe:	4b39      	ldr	r3, [pc, #228]	; (80016e4 <apply_state+0x238>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	f083 0301 	eor.w	r3, r3, #1
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b00      	cmp	r3, #0
 800160a:	d00b      	beq.n	8001624 <apply_state+0x178>
	  // At HOME, wait for command
	  if (BTN_START_curState == BTN_RESET) {
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d108      	bne.n	8001624 <apply_state+0x178>
		RUN_CMD = true;
 8001612:	4b34      	ldr	r3, [pc, #208]	; (80016e4 <apply_state+0x238>)
 8001614:	2201      	movs	r2, #1
 8001616:	701a      	strb	r2, [r3, #0]
		M2_FWD = true;
 8001618:	4b34      	ldr	r3, [pc, #208]	; (80016ec <apply_state+0x240>)
 800161a:	2201      	movs	r2, #1
 800161c:	701a      	strb	r2, [r3, #0]
		revCount = 0;
 800161e:	4b34      	ldr	r3, [pc, #208]	; (80016f0 <apply_state+0x244>)
 8001620:	2200      	movs	r2, #0
 8001622:	801a      	strh	r2, [r3, #0]
	  }
	}
	set_motor(1,1,500);
 8001624:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001628:	2101      	movs	r1, #1
 800162a:	2001      	movs	r0, #1
 800162c:	f000 f8a4 	bl	8001778 <set_motor>
	HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, GPIO_PIN_RESET);
 8001630:	2200      	movs	r2, #0
 8001632:	2110      	movs	r1, #16
 8001634:	4826      	ldr	r0, [pc, #152]	; (80016d0 <apply_state+0x224>)
 8001636:	f000 fd86 	bl	8002146 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 800163a:	2201      	movs	r2, #1
 800163c:	2120      	movs	r1, #32
 800163e:	4824      	ldr	r0, [pc, #144]	; (80016d0 <apply_state+0x224>)
 8001640:	f000 fd81 	bl	8002146 <HAL_GPIO_WritePin>

	if (RUN_CMD) {
 8001644:	4b27      	ldr	r3, [pc, #156]	; (80016e4 <apply_state+0x238>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d039      	beq.n	80016c0 <apply_state+0x214>
	  if (END_REACH) {
 800164c:	4b23      	ldr	r3, [pc, #140]	; (80016dc <apply_state+0x230>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d002      	beq.n	800165a <apply_state+0x1ae>
		M2_FWD = false;
 8001654:	4b25      	ldr	r3, [pc, #148]	; (80016ec <apply_state+0x240>)
 8001656:	2200      	movs	r2, #0
 8001658:	701a      	strb	r2, [r3, #0]
	  }
	  if (MID_REACH) {
 800165a:	4b26      	ldr	r3, [pc, #152]	; (80016f4 <apply_state+0x248>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d01c      	beq.n	800169c <apply_state+0x1f0>
		if (M2_FWD == false)
 8001662:	4b22      	ldr	r3, [pc, #136]	; (80016ec <apply_state+0x240>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	f083 0301 	eor.w	r3, r3, #1
 800166a:	b2db      	uxtb	r3, r3
 800166c:	2b00      	cmp	r3, #0
 800166e:	d005      	beq.n	800167c <apply_state+0x1d0>
		  revCount += 1;
 8001670:	4b1f      	ldr	r3, [pc, #124]	; (80016f0 <apply_state+0x244>)
 8001672:	881b      	ldrh	r3, [r3, #0]
 8001674:	3301      	adds	r3, #1
 8001676:	b29a      	uxth	r2, r3
 8001678:	4b1d      	ldr	r3, [pc, #116]	; (80016f0 <apply_state+0x244>)
 800167a:	801a      	strh	r2, [r3, #0]
		if (revCount == numberOfRound[revLevel]) {
 800167c:	4b1e      	ldr	r3, [pc, #120]	; (80016f8 <apply_state+0x24c>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	461a      	mov	r2, r3
 8001682:	4b1e      	ldr	r3, [pc, #120]	; (80016fc <apply_state+0x250>)
 8001684:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001688:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <apply_state+0x244>)
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	429a      	cmp	r2, r3
 800168e:	d102      	bne.n	8001696 <apply_state+0x1ea>
		  active_run();
 8001690:	f7ff fef2 	bl	8001478 <active_run>
		  return;
 8001694:	e014      	b.n	80016c0 <apply_state+0x214>
		}
		M2_FWD = true;
 8001696:	4b15      	ldr	r3, [pc, #84]	; (80016ec <apply_state+0x240>)
 8001698:	2201      	movs	r2, #1
 800169a:	701a      	strb	r2, [r3, #0]
	  }

	  if (M2_FWD) {
 800169c:	4b13      	ldr	r3, [pc, #76]	; (80016ec <apply_state+0x240>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d006      	beq.n	80016b2 <apply_state+0x206>
		set_motor(2, 1, 700);
 80016a4:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80016a8:	2101      	movs	r1, #1
 80016aa:	2002      	movs	r0, #2
 80016ac:	f000 f864 	bl	8001778 <set_motor>
 80016b0:	e006      	b.n	80016c0 <apply_state+0x214>
	  } else {
		set_motor(2, -1, 700);
 80016b2:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80016b6:	f04f 31ff 	mov.w	r1, #4294967295
 80016ba:	2002      	movs	r0, #2
 80016bc:	f000 f85c 	bl	8001778 <set_motor>
	  }
	}
  }
}
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000330 	.word	0x20000330
 80016cc:	20000331 	.word	0x20000331
 80016d0:	40010800 	.word	0x40010800
 80016d4:	200002cc 	.word	0x200002cc
 80016d8:	200002e0 	.word	0x200002e0
 80016dc:	20000332 	.word	0x20000332
 80016e0:	20000333 	.word	0x20000333
 80016e4:	20000340 	.word	0x20000340
 80016e8:	20000004 	.word	0x20000004
 80016ec:	20000012 	.word	0x20000012
 80016f0:	20000342 	.word	0x20000342
 80016f4:	20000334 	.word	0x20000334
 80016f8:	20000335 	.word	0x20000335
 80016fc:	2000000c 	.word	0x2000000c

08001700 <check_setting>:

bool check_setting() {
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
  ButtonState lvl1, lvl2;
  lvl1 = buttonRead(&LVL1);
 8001706:	4819      	ldr	r0, [pc, #100]	; (800176c <check_setting+0x6c>)
 8001708:	f7ff f995 	bl	8000a36 <buttonRead>
 800170c:	4603      	mov	r3, r0
 800170e:	71bb      	strb	r3, [r7, #6]
  lvl2 = buttonRead(&LVL2);
 8001710:	4817      	ldr	r0, [pc, #92]	; (8001770 <check_setting+0x70>)
 8001712:	f7ff f990 	bl	8000a36 <buttonRead>
 8001716:	4603      	mov	r3, r0
 8001718:	717b      	strb	r3, [r7, #5]
  uint8_t newLevel;
  if (lvl1 == BTN_SET && lvl2 == BTN_SET) // Middle pos
 800171a:	79bb      	ldrb	r3, [r7, #6]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d105      	bne.n	800172c <check_setting+0x2c>
 8001720:	797b      	ldrb	r3, [r7, #5]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d102      	bne.n	800172c <check_setting+0x2c>
	  {
	newLevel = 1;
 8001726:	2301      	movs	r3, #1
 8001728:	71fb      	strb	r3, [r7, #7]
 800172a:	e010      	b.n	800174e <check_setting+0x4e>
  } else if (lvl1 == BTN_RESET && lvl2 == BTN_SET) // Left pos
 800172c:	79bb      	ldrb	r3, [r7, #6]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d105      	bne.n	800173e <check_setting+0x3e>
 8001732:	797b      	ldrb	r3, [r7, #5]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d102      	bne.n	800173e <check_setting+0x3e>
	  {
	newLevel = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	71fb      	strb	r3, [r7, #7]
 800173c:	e007      	b.n	800174e <check_setting+0x4e>
  } else if (lvl1 == BTN_SET && lvl2 == BTN_RESET) // Right pos
 800173e:	79bb      	ldrb	r3, [r7, #6]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d104      	bne.n	800174e <check_setting+0x4e>
 8001744:	797b      	ldrb	r3, [r7, #5]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <check_setting+0x4e>
	  {
	newLevel = 2;
 800174a:	2302      	movs	r3, #2
 800174c:	71fb      	strb	r3, [r7, #7]
  }
  if (newLevel != revLevel) {
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <check_setting+0x74>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	79fa      	ldrb	r2, [r7, #7]
 8001754:	429a      	cmp	r2, r3
 8001756:	d004      	beq.n	8001762 <check_setting+0x62>
	revLevel = newLevel;
 8001758:	4a06      	ldr	r2, [pc, #24]	; (8001774 <check_setting+0x74>)
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	7013      	strb	r3, [r2, #0]
	return 1; // CHANGE
 800175e:	2301      	movs	r3, #1
 8001760:	e000      	b.n	8001764 <check_setting+0x64>
  } else
	return 0;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000308 	.word	0x20000308
 8001770:	2000031c 	.word	0x2000031c
 8001774:	20000335 	.word	0x20000335

08001778 <set_motor>:

void set_motor(uint8_t id, int8_t dir, uint16_t pwm) {
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af02      	add	r7, sp, #8
 800177e:	4603      	mov	r3, r0
 8001780:	71fb      	strb	r3, [r7, #7]
 8001782:	460b      	mov	r3, r1
 8001784:	71bb      	strb	r3, [r7, #6]
 8001786:	4613      	mov	r3, r2
 8001788:	80bb      	strh	r3, [r7, #4]
  switch (id) {
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d002      	beq.n	8001796 <set_motor+0x1e>
 8001790:	2b02      	cmp	r3, #2
 8001792:	d029      	beq.n	80017e8 <set_motor+0x70>
	uint32_t P_pwm = MAP(pwm, 0, 1000, 0, 999);
	TIM4->CCR2 = P_pwm;
	break;
  }
  }
}
 8001794:	e03c      	b.n	8001810 <set_motor+0x98>
	uint32_t P_pwm = MAP(pwm, 0, 1000, 0, 499);
 8001796:	88b8      	ldrh	r0, [r7, #4]
 8001798:	f240 13f3 	movw	r3, #499	; 0x1f3
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	2300      	movs	r3, #0
 80017a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017a4:	2100      	movs	r1, #0
 80017a6:	f7ff fe1f 	bl	80013e8 <MAP>
 80017aa:	60b8      	str	r0, [r7, #8]
	if (dir == 1) {
 80017ac:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d106      	bne.n	80017c2 <set_motor+0x4a>
	  TIM3->CCR2 = 0;
 80017b4:	4b18      	ldr	r3, [pc, #96]	; (8001818 <set_motor+0xa0>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM3->CCR1 = P_pwm;
 80017ba:	4a17      	ldr	r2, [pc, #92]	; (8001818 <set_motor+0xa0>)
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	6353      	str	r3, [r2, #52]	; 0x34
	break;
 80017c0:	e026      	b.n	8001810 <set_motor+0x98>
	} else if (dir == -1) {
 80017c2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80017c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ca:	d106      	bne.n	80017da <set_motor+0x62>
	  TIM3->CCR1 = 0;
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <set_motor+0xa0>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM3->CCR2 = P_pwm;
 80017d2:	4a11      	ldr	r2, [pc, #68]	; (8001818 <set_motor+0xa0>)
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	6393      	str	r3, [r2, #56]	; 0x38
	break;
 80017d8:	e01a      	b.n	8001810 <set_motor+0x98>
	  TIM3->CCR1 = 0;
 80017da:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <set_motor+0xa0>)
 80017dc:	2200      	movs	r2, #0
 80017de:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM3->CCR2 = 0;
 80017e0:	4b0d      	ldr	r3, [pc, #52]	; (8001818 <set_motor+0xa0>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	639a      	str	r2, [r3, #56]	; 0x38
	break;
 80017e6:	e013      	b.n	8001810 <set_motor+0x98>
	set_motor2_dir(dir);
 80017e8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f000 f817 	bl	8001820 <set_motor2_dir>
	uint32_t P_pwm = MAP(pwm, 0, 1000, 0, 999);
 80017f2:	88b8      	ldrh	r0, [r7, #4]
 80017f4:	f240 33e7 	movw	r3, #999	; 0x3e7
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	2300      	movs	r3, #0
 80017fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001800:	2100      	movs	r1, #0
 8001802:	f7ff fdf1 	bl	80013e8 <MAP>
 8001806:	60f8      	str	r0, [r7, #12]
	TIM4->CCR2 = P_pwm;
 8001808:	4a04      	ldr	r2, [pc, #16]	; (800181c <set_motor+0xa4>)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	6393      	str	r3, [r2, #56]	; 0x38
	break;
 800180e:	bf00      	nop
}
 8001810:	bf00      	nop
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40000400 	.word	0x40000400
 800181c:	40000800 	.word	0x40000800

08001820 <set_motor2_dir>:

void set_motor2_dir(int8_t dir) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
  if (dir == -1 && BEGIN_REACH == false) {
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001832:	d113      	bne.n	800185c <set_motor2_dir+0x3c>
 8001834:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <set_motor2_dir+0x90>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	f083 0301 	eor.w	r3, r3, #1
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00c      	beq.n	800185c <set_motor2_dir+0x3c>
	HAL_GPIO_WritePin(M2_L_GPIO_Port, M2_L_Pin, GPIO_PIN_SET);
 8001842:	2201      	movs	r2, #1
 8001844:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001848:	481a      	ldr	r0, [pc, #104]	; (80018b4 <set_motor2_dir+0x94>)
 800184a:	f000 fc7c 	bl	8002146 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M2_R_GPIO_Port, M2_R_Pin, GPIO_PIN_RESET);
 800184e:	2200      	movs	r2, #0
 8001850:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001854:	4817      	ldr	r0, [pc, #92]	; (80018b4 <set_motor2_dir+0x94>)
 8001856:	f000 fc76 	bl	8002146 <HAL_GPIO_WritePin>
 800185a:	e024      	b.n	80018a6 <set_motor2_dir+0x86>
  } else if (dir == 1 && END_REACH == false) {
 800185c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d113      	bne.n	800188c <set_motor2_dir+0x6c>
 8001864:	4b14      	ldr	r3, [pc, #80]	; (80018b8 <set_motor2_dir+0x98>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	f083 0301 	eor.w	r3, r3, #1
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d00c      	beq.n	800188c <set_motor2_dir+0x6c>
	HAL_GPIO_WritePin(M2_L_GPIO_Port, M2_L_Pin, GPIO_PIN_RESET);
 8001872:	2200      	movs	r2, #0
 8001874:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001878:	480e      	ldr	r0, [pc, #56]	; (80018b4 <set_motor2_dir+0x94>)
 800187a:	f000 fc64 	bl	8002146 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M2_R_GPIO_Port, M2_R_Pin, GPIO_PIN_SET);
 800187e:	2201      	movs	r2, #1
 8001880:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001884:	480b      	ldr	r0, [pc, #44]	; (80018b4 <set_motor2_dir+0x94>)
 8001886:	f000 fc5e 	bl	8002146 <HAL_GPIO_WritePin>
 800188a:	e00c      	b.n	80018a6 <set_motor2_dir+0x86>
  } else {
	HAL_GPIO_WritePin(M2_L_GPIO_Port, M2_L_Pin, GPIO_PIN_RESET);
 800188c:	2200      	movs	r2, #0
 800188e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001892:	4808      	ldr	r0, [pc, #32]	; (80018b4 <set_motor2_dir+0x94>)
 8001894:	f000 fc57 	bl	8002146 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M2_R_GPIO_Port, M2_R_Pin, GPIO_PIN_RESET);
 8001898:	2200      	movs	r2, #0
 800189a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800189e:	4805      	ldr	r0, [pc, #20]	; (80018b4 <set_motor2_dir+0x94>)
 80018a0:	f000 fc51 	bl	8002146 <HAL_GPIO_WritePin>
  }
}
 80018a4:	bf00      	nop
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000333 	.word	0x20000333
 80018b4:	40010c00 	.word	0x40010c00
 80018b8:	20000332 	.word	0x20000332

080018bc <stop_motor>:

void stop_motor() {
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  set_motor(1, 0, 0);
 80018c0:	2200      	movs	r2, #0
 80018c2:	2100      	movs	r1, #0
 80018c4:	2001      	movs	r0, #1
 80018c6:	f7ff ff57 	bl	8001778 <set_motor>
  set_motor(2, 0, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2100      	movs	r1, #0
 80018ce:	2002      	movs	r0, #2
 80018d0:	f7ff ff52 	bl	8001778 <set_motor>
}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <flash_LED>:

uint32_t last_led_Y = 0, last_led_G = 0;
#define FLASH_INTERVAL 1000 //ms
void flash_LED(LedOut led) {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	463b      	mov	r3, r7
 80018e0:	e883 0003 	stmia.w	r3, {r0, r1}
  uint32_t now = HAL_GetTick();
 80018e4:	f000 f97c 	bl	8001be0 <HAL_GetTick>
 80018e8:	60f8      	str	r0, [r7, #12]
  switch (led.Pin) {
 80018ea:	88bb      	ldrh	r3, [r7, #4]
 80018ec:	2b10      	cmp	r3, #16
 80018ee:	d012      	beq.n	8001916 <flash_LED+0x3e>
 80018f0:	2b20      	cmp	r3, #32
 80018f2:	d124      	bne.n	800193e <flash_LED+0x66>
  case LED_G_Pin:
	if (now - last_led_G > FLASH_INTERVAL) {
 80018f4:	4b14      	ldr	r3, [pc, #80]	; (8001948 <flash_LED+0x70>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001900:	d91a      	bls.n	8001938 <flash_LED+0x60>
	  last_led_G = now;
 8001902:	4a11      	ldr	r2, [pc, #68]	; (8001948 <flash_LED+0x70>)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_TogglePin(led.Port, led.Pin);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	88ba      	ldrh	r2, [r7, #4]
 800190c:	4611      	mov	r1, r2
 800190e:	4618      	mov	r0, r3
 8001910:	f000 fc31 	bl	8002176 <HAL_GPIO_TogglePin>
	}
	break;
 8001914:	e010      	b.n	8001938 <flash_LED+0x60>
  case LED_Y_Pin:
	if (now - last_led_Y > FLASH_INTERVAL) {
 8001916:	4b0d      	ldr	r3, [pc, #52]	; (800194c <flash_LED+0x74>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001922:	d90b      	bls.n	800193c <flash_LED+0x64>
	  last_led_Y = now;
 8001924:	4a09      	ldr	r2, [pc, #36]	; (800194c <flash_LED+0x74>)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_TogglePin(led.Port, led.Pin);
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	88ba      	ldrh	r2, [r7, #4]
 800192e:	4611      	mov	r1, r2
 8001930:	4618      	mov	r0, r3
 8001932:	f000 fc20 	bl	8002176 <HAL_GPIO_TogglePin>
	}
	break;
 8001936:	e001      	b.n	800193c <flash_LED+0x64>
	break;
 8001938:	bf00      	nop
 800193a:	e000      	b.n	800193e <flash_LED+0x66>
	break;
 800193c:	bf00      	nop
  }
}
 800193e:	bf00      	nop
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000348 	.word	0x20000348
 800194c:	20000344 	.word	0x20000344

08001950 <HAL_TIM_PeriodElapsedCallback>:
 * Timer4 clock: 1MHz
 * overflow: 999 ticks -> 1ms -> 1kHz
 */
int32_t now_E1;
int32_t now_E2;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  now_E1 = (int32_t) TIM1->CNT;
 8001958:	4b33      	ldr	r3, [pc, #204]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	461a      	mov	r2, r3
 800195e:	4b33      	ldr	r3, [pc, #204]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001960:	601a      	str	r2, [r3, #0]
  now_E2 = (int32_t) TIM2->CNT;
 8001962:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001968:	461a      	mov	r2, r3
 800196a:	4b31      	ldr	r3, [pc, #196]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800196c:	601a      	str	r2, [r3, #0]

  int32_t delta = now_E1 - pre_E1;
 800196e:	4b2f      	ldr	r3, [pc, #188]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	4b30      	ldr	r3, [pc, #192]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	60fb      	str	r3, [r7, #12]

//velo = delta * 60 sec * 1000 ms / (ECD pulse per round * gear ratio)
  m1_velo = delta * 1.0 * 60 * 1000 / (M1_ENCODER_PULSE * M1_GEAR_RATIO);
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f7fe fd3a 	bl	80003f4 <__aeabi_i2d>
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	4b2c      	ldr	r3, [pc, #176]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001986:	f7fe fd9f 	bl	80004c8 <__aeabi_dmul>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	4610      	mov	r0, r2
 8001990:	4619      	mov	r1, r3
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	4b29      	ldr	r3, [pc, #164]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001998:	f7fe fd96 	bl	80004c8 <__aeabi_dmul>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4610      	mov	r0, r2
 80019a2:	4619      	mov	r1, r3
 80019a4:	f04f 0200 	mov.w	r2, #0
 80019a8:	4b25      	ldr	r3, [pc, #148]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80019aa:	f7fe feb7 	bl	800071c <__aeabi_ddiv>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	4610      	mov	r0, r2
 80019b4:	4619      	mov	r1, r3
 80019b6:	f7fe ffb9 	bl	800092c <__aeabi_d2f>
 80019ba:	4603      	mov	r3, r0
 80019bc:	4a21      	ldr	r2, [pc, #132]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80019be:	6013      	str	r3, [r2, #0]
  delta = now_E2 - pre_E2;
 80019c0:	4b1b      	ldr	r3, [pc, #108]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b20      	ldr	r3, [pc, #128]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	60fb      	str	r3, [r7, #12]
  m2_velo = delta * 1.0 * 60 * 1000 / (M2_ENCODER_PULSE * M2_GEAR_RATIO);
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f7fe fd11 	bl	80003f4 <__aeabi_i2d>
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	4b18      	ldr	r3, [pc, #96]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80019d8:	f7fe fd76 	bl	80004c8 <__aeabi_dmul>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4610      	mov	r0, r2
 80019e2:	4619      	mov	r1, r3
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0xec>)
 80019ea:	f7fe fd6d 	bl	80004c8 <__aeabi_dmul>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4610      	mov	r0, r2
 80019f4:	4619      	mov	r1, r3
 80019f6:	a30a      	add	r3, pc, #40	; (adr r3, 8001a20 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80019f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fc:	f7fe fe8e 	bl	800071c <__aeabi_ddiv>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	4610      	mov	r0, r2
 8001a06:	4619      	mov	r1, r3
 8001a08:	f7fe ff90 	bl	800092c <__aeabi_d2f>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	4a0f      	ldr	r2, [pc, #60]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001a10:	6013      	str	r3, [r2, #0]
}
 8001a12:	bf00      	nop
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	f3af 8000 	nop.w
 8001a20:	00000000 	.word	0x00000000
 8001a24:	40bd6400 	.word	0x40bd6400
 8001a28:	40012c00 	.word	0x40012c00
 8001a2c:	20000354 	.word	0x20000354
 8001a30:	20000358 	.word	0x20000358
 8001a34:	2000034c 	.word	0x2000034c
 8001a38:	404e0000 	.word	0x404e0000
 8001a3c:	408f4000 	.word	0x408f4000
 8001a40:	4106a800 	.word	0x4106a800
 8001a44:	20000338 	.word	0x20000338
 8001a48:	20000350 	.word	0x20000350
 8001a4c:	2000033c 	.word	0x2000033c

08001a50 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == LMS_B_Pin) {
 8001a5a:	88fb      	ldrh	r3, [r7, #6]
 8001a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a60:	d10f      	bne.n	8001a82 <HAL_GPIO_EXTI_Callback+0x32>
	if (HAL_GPIO_ReadPin(LMS_B_GPIO_Port, LMS_B_Pin) == GPIO_PIN_SET) {
 8001a62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a66:	481b      	ldr	r0, [pc, #108]	; (8001ad4 <HAL_GPIO_EXTI_Callback+0x84>)
 8001a68:	f000 fb56 	bl	8002118 <HAL_GPIO_ReadPin>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d103      	bne.n	8001a7a <HAL_GPIO_EXTI_Callback+0x2a>
	  BEGIN_REACH = false;
 8001a72:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <HAL_GPIO_EXTI_Callback+0x88>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]
 8001a78:	e028      	b.n	8001acc <HAL_GPIO_EXTI_Callback+0x7c>
	} else {
	  BEGIN_REACH = true;
 8001a7a:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <HAL_GPIO_EXTI_Callback+0x88>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	701a      	strb	r2, [r3, #0]
 8001a80:	e024      	b.n	8001acc <HAL_GPIO_EXTI_Callback+0x7c>
	}
  } else if (GPIO_Pin == LMS_E_Pin) {
 8001a82:	88fb      	ldrh	r3, [r7, #6]
 8001a84:	2b20      	cmp	r3, #32
 8001a86:	d10e      	bne.n	8001aa6 <HAL_GPIO_EXTI_Callback+0x56>
	if (HAL_GPIO_ReadPin(LMS_E_GPIO_Port, LMS_E_Pin) == GPIO_PIN_SET) {
 8001a88:	2120      	movs	r1, #32
 8001a8a:	4812      	ldr	r0, [pc, #72]	; (8001ad4 <HAL_GPIO_EXTI_Callback+0x84>)
 8001a8c:	f000 fb44 	bl	8002118 <HAL_GPIO_ReadPin>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d103      	bne.n	8001a9e <HAL_GPIO_EXTI_Callback+0x4e>
	  END_REACH = false;
 8001a96:	4b11      	ldr	r3, [pc, #68]	; (8001adc <HAL_GPIO_EXTI_Callback+0x8c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	701a      	strb	r2, [r3, #0]
 8001a9c:	e016      	b.n	8001acc <HAL_GPIO_EXTI_Callback+0x7c>
	} else {
	  END_REACH = true;
 8001a9e:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <HAL_GPIO_EXTI_Callback+0x8c>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	701a      	strb	r2, [r3, #0]
 8001aa4:	e012      	b.n	8001acc <HAL_GPIO_EXTI_Callback+0x7c>
	}
  } else if (GPIO_Pin == LMS_M_Pin) {
 8001aa6:	88fb      	ldrh	r3, [r7, #6]
 8001aa8:	2b40      	cmp	r3, #64	; 0x40
 8001aaa:	d10e      	bne.n	8001aca <HAL_GPIO_EXTI_Callback+0x7a>
	if (HAL_GPIO_ReadPin(LMS_M_GPIO_Port, LMS_M_Pin) == GPIO_PIN_SET) {
 8001aac:	2140      	movs	r1, #64	; 0x40
 8001aae:	4809      	ldr	r0, [pc, #36]	; (8001ad4 <HAL_GPIO_EXTI_Callback+0x84>)
 8001ab0:	f000 fb32 	bl	8002118 <HAL_GPIO_ReadPin>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d103      	bne.n	8001ac2 <HAL_GPIO_EXTI_Callback+0x72>
	  MID_REACH = false;
 8001aba:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <HAL_GPIO_EXTI_Callback+0x90>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	701a      	strb	r2, [r3, #0]
 8001ac0:	e004      	b.n	8001acc <HAL_GPIO_EXTI_Callback+0x7c>
	} else {
	  MID_REACH = true;
 8001ac2:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <HAL_GPIO_EXTI_Callback+0x90>)
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	701a      	strb	r2, [r3, #0]
 8001ac8:	e000      	b.n	8001acc <HAL_GPIO_EXTI_Callback+0x7c>
	}
  } else
	return;
 8001aca:	bf00      	nop
}
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40010c00 	.word	0x40010c00
 8001ad8:	20000333 	.word	0x20000333
 8001adc:	20000332 	.word	0x20000332
 8001ae0:	20000334 	.word	0x20000334

08001ae4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ae4:	480c      	ldr	r0, [pc, #48]	; (8001b18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ae6:	490d      	ldr	r1, [pc, #52]	; (8001b1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ae8:	4a0d      	ldr	r2, [pc, #52]	; (8001b20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001aea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aec:	e002      	b.n	8001af4 <LoopCopyDataInit>

08001aee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001af2:	3304      	adds	r3, #4

08001af4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001af4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001af6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001af8:	d3f9      	bcc.n	8001aee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001afa:	4a0a      	ldr	r2, [pc, #40]	; (8001b24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001afc:	4c0a      	ldr	r4, [pc, #40]	; (8001b28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001afe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b00:	e001      	b.n	8001b06 <LoopFillZerobss>

08001b02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b04:	3204      	adds	r2, #4

08001b06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b08:	d3fb      	bcc.n	8001b02 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b0a:	f7ff fc67 	bl	80013dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b0e:	f008 f8d1 	bl	8009cb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b12:	f7fe ffc1 	bl	8000a98 <main>
  bx lr
 8001b16:	4770      	bx	lr
  ldr r0, =_sdata
 8001b18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b1c:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 8001b20:	08009d94 	.word	0x08009d94
  ldr r2, =_sbss
 8001b24:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 8001b28:	20000db4 	.word	0x20000db4

08001b2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b2c:	e7fe      	b.n	8001b2c <ADC1_2_IRQHandler>
	...

08001b30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b34:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <HAL_Init+0x28>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a07      	ldr	r2, [pc, #28]	; (8001b58 <HAL_Init+0x28>)
 8001b3a:	f043 0310 	orr.w	r3, r3, #16
 8001b3e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b40:	2003      	movs	r0, #3
 8001b42:	f000 f923 	bl	8001d8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b46:	200f      	movs	r0, #15
 8001b48:	f000 f808 	bl	8001b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b4c:	f7ff faac 	bl	80010a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40022000 	.word	0x40022000

08001b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_InitTick+0x54>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <HAL_InitTick+0x58>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 f93b 	bl	8001df6 <HAL_SYSTICK_Config>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e00e      	b.n	8001ba8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b0f      	cmp	r3, #15
 8001b8e:	d80a      	bhi.n	8001ba6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b90:	2200      	movs	r2, #0
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	f04f 30ff 	mov.w	r0, #4294967295
 8001b98:	f000 f903 	bl	8001da2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b9c:	4a06      	ldr	r2, [pc, #24]	; (8001bb8 <HAL_InitTick+0x5c>)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	e000      	b.n	8001ba8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000000 	.word	0x20000000
 8001bb4:	20000018 	.word	0x20000018
 8001bb8:	20000014 	.word	0x20000014

08001bbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <HAL_IncTick+0x1c>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <HAL_IncTick+0x20>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4413      	add	r3, r2
 8001bcc:	4a03      	ldr	r2, [pc, #12]	; (8001bdc <HAL_IncTick+0x20>)
 8001bce:	6013      	str	r3, [r2, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr
 8001bd8:	20000018 	.word	0x20000018
 8001bdc:	2000035c 	.word	0x2000035c

08001be0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return uwTick;
 8001be4:	4b02      	ldr	r3, [pc, #8]	; (8001bf0 <HAL_GetTick+0x10>)
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr
 8001bf0:	2000035c 	.word	0x2000035c

08001bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c04:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <__NVIC_SetPriorityGrouping+0x44>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c10:	4013      	ands	r3, r2
 8001c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c26:	4a04      	ldr	r2, [pc, #16]	; (8001c38 <__NVIC_SetPriorityGrouping+0x44>)
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	60d3      	str	r3, [r2, #12]
}
 8001c2c:	bf00      	nop
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c40:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <__NVIC_GetPriorityGrouping+0x18>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	0a1b      	lsrs	r3, r3, #8
 8001c46:	f003 0307 	and.w	r3, r3, #7
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	db0b      	blt.n	8001c82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	f003 021f 	and.w	r2, r3, #31
 8001c70:	4906      	ldr	r1, [pc, #24]	; (8001c8c <__NVIC_EnableIRQ+0x34>)
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	095b      	lsrs	r3, r3, #5
 8001c78:	2001      	movs	r0, #1
 8001c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr
 8001c8c:	e000e100 	.word	0xe000e100

08001c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	6039      	str	r1, [r7, #0]
 8001c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	db0a      	blt.n	8001cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	490c      	ldr	r1, [pc, #48]	; (8001cdc <__NVIC_SetPriority+0x4c>)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	0112      	lsls	r2, r2, #4
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb8:	e00a      	b.n	8001cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4908      	ldr	r1, [pc, #32]	; (8001ce0 <__NVIC_SetPriority+0x50>)
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	3b04      	subs	r3, #4
 8001cc8:	0112      	lsls	r2, r2, #4
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	440b      	add	r3, r1
 8001cce:	761a      	strb	r2, [r3, #24]
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000e100 	.word	0xe000e100
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b089      	sub	sp, #36	; 0x24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f1c3 0307 	rsb	r3, r3, #7
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	bf28      	it	cs
 8001d02:	2304      	movcs	r3, #4
 8001d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3304      	adds	r3, #4
 8001d0a:	2b06      	cmp	r3, #6
 8001d0c:	d902      	bls.n	8001d14 <NVIC_EncodePriority+0x30>
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3b03      	subs	r3, #3
 8001d12:	e000      	b.n	8001d16 <NVIC_EncodePriority+0x32>
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d18:	f04f 32ff 	mov.w	r2, #4294967295
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43da      	mvns	r2, r3
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	401a      	ands	r2, r3
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	fa01 f303 	lsl.w	r3, r1, r3
 8001d36:	43d9      	mvns	r1, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d3c:	4313      	orrs	r3, r2
         );
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3724      	adds	r7, #36	; 0x24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr

08001d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d58:	d301      	bcc.n	8001d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e00f      	b.n	8001d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d5e:	4a0a      	ldr	r2, [pc, #40]	; (8001d88 <SysTick_Config+0x40>)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d66:	210f      	movs	r1, #15
 8001d68:	f04f 30ff 	mov.w	r0, #4294967295
 8001d6c:	f7ff ff90 	bl	8001c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d70:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <SysTick_Config+0x40>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d76:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <SysTick_Config+0x40>)
 8001d78:	2207      	movs	r2, #7
 8001d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	e000e010 	.word	0xe000e010

08001d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff ff2d 	bl	8001bf4 <__NVIC_SetPriorityGrouping>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b086      	sub	sp, #24
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	4603      	mov	r3, r0
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]
 8001dae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001db4:	f7ff ff42 	bl	8001c3c <__NVIC_GetPriorityGrouping>
 8001db8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	68b9      	ldr	r1, [r7, #8]
 8001dbe:	6978      	ldr	r0, [r7, #20]
 8001dc0:	f7ff ff90 	bl	8001ce4 <NVIC_EncodePriority>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dca:	4611      	mov	r1, r2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff5f 	bl	8001c90 <__NVIC_SetPriority>
}
 8001dd2:	bf00      	nop
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	4603      	mov	r3, r0
 8001de2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ff35 	bl	8001c58 <__NVIC_EnableIRQ>
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff ffa2 	bl	8001d48 <SysTick_Config>
 8001e04:	4603      	mov	r3, r0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
	...

08001e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b08b      	sub	sp, #44	; 0x2c
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e22:	e169      	b.n	80020f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e24:	2201      	movs	r2, #1
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	69fa      	ldr	r2, [r7, #28]
 8001e34:	4013      	ands	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	f040 8158 	bne.w	80020f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	4a9a      	ldr	r2, [pc, #616]	; (80020b0 <HAL_GPIO_Init+0x2a0>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d05e      	beq.n	8001f0a <HAL_GPIO_Init+0xfa>
 8001e4c:	4a98      	ldr	r2, [pc, #608]	; (80020b0 <HAL_GPIO_Init+0x2a0>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d875      	bhi.n	8001f3e <HAL_GPIO_Init+0x12e>
 8001e52:	4a98      	ldr	r2, [pc, #608]	; (80020b4 <HAL_GPIO_Init+0x2a4>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d058      	beq.n	8001f0a <HAL_GPIO_Init+0xfa>
 8001e58:	4a96      	ldr	r2, [pc, #600]	; (80020b4 <HAL_GPIO_Init+0x2a4>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d86f      	bhi.n	8001f3e <HAL_GPIO_Init+0x12e>
 8001e5e:	4a96      	ldr	r2, [pc, #600]	; (80020b8 <HAL_GPIO_Init+0x2a8>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d052      	beq.n	8001f0a <HAL_GPIO_Init+0xfa>
 8001e64:	4a94      	ldr	r2, [pc, #592]	; (80020b8 <HAL_GPIO_Init+0x2a8>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d869      	bhi.n	8001f3e <HAL_GPIO_Init+0x12e>
 8001e6a:	4a94      	ldr	r2, [pc, #592]	; (80020bc <HAL_GPIO_Init+0x2ac>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d04c      	beq.n	8001f0a <HAL_GPIO_Init+0xfa>
 8001e70:	4a92      	ldr	r2, [pc, #584]	; (80020bc <HAL_GPIO_Init+0x2ac>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d863      	bhi.n	8001f3e <HAL_GPIO_Init+0x12e>
 8001e76:	4a92      	ldr	r2, [pc, #584]	; (80020c0 <HAL_GPIO_Init+0x2b0>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d046      	beq.n	8001f0a <HAL_GPIO_Init+0xfa>
 8001e7c:	4a90      	ldr	r2, [pc, #576]	; (80020c0 <HAL_GPIO_Init+0x2b0>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d85d      	bhi.n	8001f3e <HAL_GPIO_Init+0x12e>
 8001e82:	2b12      	cmp	r3, #18
 8001e84:	d82a      	bhi.n	8001edc <HAL_GPIO_Init+0xcc>
 8001e86:	2b12      	cmp	r3, #18
 8001e88:	d859      	bhi.n	8001f3e <HAL_GPIO_Init+0x12e>
 8001e8a:	a201      	add	r2, pc, #4	; (adr r2, 8001e90 <HAL_GPIO_Init+0x80>)
 8001e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e90:	08001f0b 	.word	0x08001f0b
 8001e94:	08001ee5 	.word	0x08001ee5
 8001e98:	08001ef7 	.word	0x08001ef7
 8001e9c:	08001f39 	.word	0x08001f39
 8001ea0:	08001f3f 	.word	0x08001f3f
 8001ea4:	08001f3f 	.word	0x08001f3f
 8001ea8:	08001f3f 	.word	0x08001f3f
 8001eac:	08001f3f 	.word	0x08001f3f
 8001eb0:	08001f3f 	.word	0x08001f3f
 8001eb4:	08001f3f 	.word	0x08001f3f
 8001eb8:	08001f3f 	.word	0x08001f3f
 8001ebc:	08001f3f 	.word	0x08001f3f
 8001ec0:	08001f3f 	.word	0x08001f3f
 8001ec4:	08001f3f 	.word	0x08001f3f
 8001ec8:	08001f3f 	.word	0x08001f3f
 8001ecc:	08001f3f 	.word	0x08001f3f
 8001ed0:	08001f3f 	.word	0x08001f3f
 8001ed4:	08001eed 	.word	0x08001eed
 8001ed8:	08001f01 	.word	0x08001f01
 8001edc:	4a79      	ldr	r2, [pc, #484]	; (80020c4 <HAL_GPIO_Init+0x2b4>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d013      	beq.n	8001f0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ee2:	e02c      	b.n	8001f3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	623b      	str	r3, [r7, #32]
          break;
 8001eea:	e029      	b.n	8001f40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	623b      	str	r3, [r7, #32]
          break;
 8001ef4:	e024      	b.n	8001f40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	3308      	adds	r3, #8
 8001efc:	623b      	str	r3, [r7, #32]
          break;
 8001efe:	e01f      	b.n	8001f40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	330c      	adds	r3, #12
 8001f06:	623b      	str	r3, [r7, #32]
          break;
 8001f08:	e01a      	b.n	8001f40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d102      	bne.n	8001f18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f12:	2304      	movs	r3, #4
 8001f14:	623b      	str	r3, [r7, #32]
          break;
 8001f16:	e013      	b.n	8001f40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d105      	bne.n	8001f2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f20:	2308      	movs	r3, #8
 8001f22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	69fa      	ldr	r2, [r7, #28]
 8001f28:	611a      	str	r2, [r3, #16]
          break;
 8001f2a:	e009      	b.n	8001f40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f2c:	2308      	movs	r3, #8
 8001f2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69fa      	ldr	r2, [r7, #28]
 8001f34:	615a      	str	r2, [r3, #20]
          break;
 8001f36:	e003      	b.n	8001f40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	623b      	str	r3, [r7, #32]
          break;
 8001f3c:	e000      	b.n	8001f40 <HAL_GPIO_Init+0x130>
          break;
 8001f3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	2bff      	cmp	r3, #255	; 0xff
 8001f44:	d801      	bhi.n	8001f4a <HAL_GPIO_Init+0x13a>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	e001      	b.n	8001f4e <HAL_GPIO_Init+0x13e>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	2bff      	cmp	r3, #255	; 0xff
 8001f54:	d802      	bhi.n	8001f5c <HAL_GPIO_Init+0x14c>
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	e002      	b.n	8001f62 <HAL_GPIO_Init+0x152>
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	3b08      	subs	r3, #8
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	210f      	movs	r1, #15
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	401a      	ands	r2, r3
 8001f74:	6a39      	ldr	r1, [r7, #32]
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 80b1 	beq.w	80020f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f90:	4b4d      	ldr	r3, [pc, #308]	; (80020c8 <HAL_GPIO_Init+0x2b8>)
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	4a4c      	ldr	r2, [pc, #304]	; (80020c8 <HAL_GPIO_Init+0x2b8>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	6193      	str	r3, [r2, #24]
 8001f9c:	4b4a      	ldr	r3, [pc, #296]	; (80020c8 <HAL_GPIO_Init+0x2b8>)
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fa8:	4a48      	ldr	r2, [pc, #288]	; (80020cc <HAL_GPIO_Init+0x2bc>)
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	089b      	lsrs	r3, r3, #2
 8001fae:	3302      	adds	r3, #2
 8001fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	f003 0303 	and.w	r3, r3, #3
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	220f      	movs	r2, #15
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a40      	ldr	r2, [pc, #256]	; (80020d0 <HAL_GPIO_Init+0x2c0>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d013      	beq.n	8001ffc <HAL_GPIO_Init+0x1ec>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a3f      	ldr	r2, [pc, #252]	; (80020d4 <HAL_GPIO_Init+0x2c4>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d00d      	beq.n	8001ff8 <HAL_GPIO_Init+0x1e8>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a3e      	ldr	r2, [pc, #248]	; (80020d8 <HAL_GPIO_Init+0x2c8>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d007      	beq.n	8001ff4 <HAL_GPIO_Init+0x1e4>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a3d      	ldr	r2, [pc, #244]	; (80020dc <HAL_GPIO_Init+0x2cc>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d101      	bne.n	8001ff0 <HAL_GPIO_Init+0x1e0>
 8001fec:	2303      	movs	r3, #3
 8001fee:	e006      	b.n	8001ffe <HAL_GPIO_Init+0x1ee>
 8001ff0:	2304      	movs	r3, #4
 8001ff2:	e004      	b.n	8001ffe <HAL_GPIO_Init+0x1ee>
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	e002      	b.n	8001ffe <HAL_GPIO_Init+0x1ee>
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e000      	b.n	8001ffe <HAL_GPIO_Init+0x1ee>
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002000:	f002 0203 	and.w	r2, r2, #3
 8002004:	0092      	lsls	r2, r2, #2
 8002006:	4093      	lsls	r3, r2
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	4313      	orrs	r3, r2
 800200c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800200e:	492f      	ldr	r1, [pc, #188]	; (80020cc <HAL_GPIO_Init+0x2bc>)
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	089b      	lsrs	r3, r3, #2
 8002014:	3302      	adds	r3, #2
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d006      	beq.n	8002036 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002028:	4b2d      	ldr	r3, [pc, #180]	; (80020e0 <HAL_GPIO_Init+0x2d0>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	492c      	ldr	r1, [pc, #176]	; (80020e0 <HAL_GPIO_Init+0x2d0>)
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	4313      	orrs	r3, r2
 8002032:	600b      	str	r3, [r1, #0]
 8002034:	e006      	b.n	8002044 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002036:	4b2a      	ldr	r3, [pc, #168]	; (80020e0 <HAL_GPIO_Init+0x2d0>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	43db      	mvns	r3, r3
 800203e:	4928      	ldr	r1, [pc, #160]	; (80020e0 <HAL_GPIO_Init+0x2d0>)
 8002040:	4013      	ands	r3, r2
 8002042:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d006      	beq.n	800205e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002050:	4b23      	ldr	r3, [pc, #140]	; (80020e0 <HAL_GPIO_Init+0x2d0>)
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	4922      	ldr	r1, [pc, #136]	; (80020e0 <HAL_GPIO_Init+0x2d0>)
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	4313      	orrs	r3, r2
 800205a:	604b      	str	r3, [r1, #4]
 800205c:	e006      	b.n	800206c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800205e:	4b20      	ldr	r3, [pc, #128]	; (80020e0 <HAL_GPIO_Init+0x2d0>)
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	43db      	mvns	r3, r3
 8002066:	491e      	ldr	r1, [pc, #120]	; (80020e0 <HAL_GPIO_Init+0x2d0>)
 8002068:	4013      	ands	r3, r2
 800206a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d006      	beq.n	8002086 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002078:	4b19      	ldr	r3, [pc, #100]	; (80020e0 <HAL_GPIO_Init+0x2d0>)
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	4918      	ldr	r1, [pc, #96]	; (80020e0 <HAL_GPIO_Init+0x2d0>)
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	4313      	orrs	r3, r2
 8002082:	608b      	str	r3, [r1, #8]
 8002084:	e006      	b.n	8002094 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002086:	4b16      	ldr	r3, [pc, #88]	; (80020e0 <HAL_GPIO_Init+0x2d0>)
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	43db      	mvns	r3, r3
 800208e:	4914      	ldr	r1, [pc, #80]	; (80020e0 <HAL_GPIO_Init+0x2d0>)
 8002090:	4013      	ands	r3, r2
 8002092:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d021      	beq.n	80020e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020a0:	4b0f      	ldr	r3, [pc, #60]	; (80020e0 <HAL_GPIO_Init+0x2d0>)
 80020a2:	68da      	ldr	r2, [r3, #12]
 80020a4:	490e      	ldr	r1, [pc, #56]	; (80020e0 <HAL_GPIO_Init+0x2d0>)
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	60cb      	str	r3, [r1, #12]
 80020ac:	e021      	b.n	80020f2 <HAL_GPIO_Init+0x2e2>
 80020ae:	bf00      	nop
 80020b0:	10320000 	.word	0x10320000
 80020b4:	10310000 	.word	0x10310000
 80020b8:	10220000 	.word	0x10220000
 80020bc:	10210000 	.word	0x10210000
 80020c0:	10120000 	.word	0x10120000
 80020c4:	10110000 	.word	0x10110000
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40010000 	.word	0x40010000
 80020d0:	40010800 	.word	0x40010800
 80020d4:	40010c00 	.word	0x40010c00
 80020d8:	40011000 	.word	0x40011000
 80020dc:	40011400 	.word	0x40011400
 80020e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <HAL_GPIO_Init+0x304>)
 80020e6:	68da      	ldr	r2, [r3, #12]
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	43db      	mvns	r3, r3
 80020ec:	4909      	ldr	r1, [pc, #36]	; (8002114 <HAL_GPIO_Init+0x304>)
 80020ee:	4013      	ands	r3, r2
 80020f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	3301      	adds	r3, #1
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	f47f ae8e 	bne.w	8001e24 <HAL_GPIO_Init+0x14>
  }
}
 8002108:	bf00      	nop
 800210a:	bf00      	nop
 800210c:	372c      	adds	r7, #44	; 0x2c
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr
 8002114:	40010400 	.word	0x40010400

08002118 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	887b      	ldrh	r3, [r7, #2]
 800212a:	4013      	ands	r3, r2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d002      	beq.n	8002136 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002130:	2301      	movs	r3, #1
 8002132:	73fb      	strb	r3, [r7, #15]
 8002134:	e001      	b.n	800213a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002136:	2300      	movs	r3, #0
 8002138:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800213a:	7bfb      	ldrb	r3, [r7, #15]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr

08002146 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
 800214e:	460b      	mov	r3, r1
 8002150:	807b      	strh	r3, [r7, #2]
 8002152:	4613      	mov	r3, r2
 8002154:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002156:	787b      	ldrb	r3, [r7, #1]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800215c:	887a      	ldrh	r2, [r7, #2]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002162:	e003      	b.n	800216c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002164:	887b      	ldrh	r3, [r7, #2]
 8002166:	041a      	lsls	r2, r3, #16
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	611a      	str	r2, [r3, #16]
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	bc80      	pop	{r7}
 8002174:	4770      	bx	lr

08002176 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002176:	b480      	push	{r7}
 8002178:	b085      	sub	sp, #20
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
 800217e:	460b      	mov	r3, r1
 8002180:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002188:	887a      	ldrh	r2, [r7, #2]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	4013      	ands	r3, r2
 800218e:	041a      	lsls	r2, r3, #16
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	43d9      	mvns	r1, r3
 8002194:	887b      	ldrh	r3, [r7, #2]
 8002196:	400b      	ands	r3, r1
 8002198:	431a      	orrs	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	611a      	str	r2, [r3, #16]
}
 800219e:	bf00      	nop
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr

080021a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021b2:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021b4:	695a      	ldr	r2, [r3, #20]
 80021b6:	88fb      	ldrh	r3, [r7, #6]
 80021b8:	4013      	ands	r3, r2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d006      	beq.n	80021cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021be:	4a05      	ldr	r2, [pc, #20]	; (80021d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021c0:	88fb      	ldrh	r3, [r7, #6]
 80021c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021c4:	88fb      	ldrh	r3, [r7, #6]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff fc42 	bl	8001a50 <HAL_GPIO_EXTI_Callback>
  }
}
 80021cc:	bf00      	nop
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40010400 	.word	0x40010400

080021d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021da:	b08b      	sub	sp, #44	; 0x2c
 80021dc:	af06      	add	r7, sp, #24
 80021de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e0fd      	b.n	80023e6 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d106      	bne.n	8002204 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f007 faae 	bl	8009760 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2203      	movs	r2, #3
 8002208:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	f002 fff3 	bl	80051fc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	603b      	str	r3, [r7, #0]
 800221c:	687e      	ldr	r6, [r7, #4]
 800221e:	466d      	mov	r5, sp
 8002220:	f106 0410 	add.w	r4, r6, #16
 8002224:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002226:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002228:	6823      	ldr	r3, [r4, #0]
 800222a:	602b      	str	r3, [r5, #0]
 800222c:	1d33      	adds	r3, r6, #4
 800222e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002230:	6838      	ldr	r0, [r7, #0]
 8002232:	f002 ffbd 	bl	80051b0 <USB_CoreInit>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d005      	beq.n	8002248 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2202      	movs	r2, #2
 8002240:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e0ce      	b.n	80023e6 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2100      	movs	r1, #0
 800224e:	4618      	mov	r0, r3
 8002250:	f002 ffee 	bl	8005230 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002254:	2300      	movs	r3, #0
 8002256:	73fb      	strb	r3, [r7, #15]
 8002258:	e04c      	b.n	80022f4 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800225a:	7bfb      	ldrb	r3, [r7, #15]
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	1c5a      	adds	r2, r3, #1
 8002260:	4613      	mov	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	440b      	add	r3, r1
 800226a:	3301      	adds	r3, #1
 800226c:	2201      	movs	r2, #1
 800226e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002270:	7bfb      	ldrb	r3, [r7, #15]
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	4613      	mov	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	440b      	add	r3, r1
 8002280:	7bfa      	ldrb	r2, [r7, #15]
 8002282:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002284:	7bfa      	ldrb	r2, [r7, #15]
 8002286:	7bfb      	ldrb	r3, [r7, #15]
 8002288:	b298      	uxth	r0, r3
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	4613      	mov	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	440b      	add	r3, r1
 8002296:	3336      	adds	r3, #54	; 0x36
 8002298:	4602      	mov	r2, r0
 800229a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800229c:	7bfb      	ldrb	r3, [r7, #15]
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	4613      	mov	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	440b      	add	r3, r1
 80022ac:	3303      	adds	r3, #3
 80022ae:	2200      	movs	r2, #0
 80022b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022b2:	7bfa      	ldrb	r2, [r7, #15]
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	440b      	add	r3, r1
 80022c0:	3338      	adds	r3, #56	; 0x38
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022c6:	7bfa      	ldrb	r2, [r7, #15]
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	4613      	mov	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	440b      	add	r3, r1
 80022d4:	333c      	adds	r3, #60	; 0x3c
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022da:	7bfa      	ldrb	r2, [r7, #15]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	440b      	add	r3, r1
 80022e8:	3340      	adds	r3, #64	; 0x40
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
 80022f0:	3301      	adds	r3, #1
 80022f2:	73fb      	strb	r3, [r7, #15]
 80022f4:	7bfa      	ldrb	r2, [r7, #15]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d3ad      	bcc.n	800225a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022fe:	2300      	movs	r3, #0
 8002300:	73fb      	strb	r3, [r7, #15]
 8002302:	e044      	b.n	800238e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002304:	7bfa      	ldrb	r2, [r7, #15]
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	4613      	mov	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	440b      	add	r3, r1
 8002312:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002316:	2200      	movs	r2, #0
 8002318:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800231a:	7bfa      	ldrb	r2, [r7, #15]
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	440b      	add	r3, r1
 8002328:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800232c:	7bfa      	ldrb	r2, [r7, #15]
 800232e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002330:	7bfa      	ldrb	r2, [r7, #15]
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	440b      	add	r3, r1
 800233e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002342:	2200      	movs	r2, #0
 8002344:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002346:	7bfa      	ldrb	r2, [r7, #15]
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	440b      	add	r3, r1
 8002354:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800235c:	7bfa      	ldrb	r2, [r7, #15]
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	440b      	add	r3, r1
 800236a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002372:	7bfa      	ldrb	r2, [r7, #15]
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	440b      	add	r3, r1
 8002380:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	3301      	adds	r3, #1
 800238c:	73fb      	strb	r3, [r7, #15]
 800238e:	7bfa      	ldrb	r2, [r7, #15]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	429a      	cmp	r2, r3
 8002396:	d3b5      	bcc.n	8002304 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	603b      	str	r3, [r7, #0]
 800239e:	687e      	ldr	r6, [r7, #4]
 80023a0:	466d      	mov	r5, sp
 80023a2:	f106 0410 	add.w	r4, r6, #16
 80023a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023aa:	6823      	ldr	r3, [r4, #0]
 80023ac:	602b      	str	r3, [r5, #0]
 80023ae:	1d33      	adds	r3, r6, #4
 80023b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023b2:	6838      	ldr	r0, [r7, #0]
 80023b4:	f002 ff48 	bl	8005248 <USB_DevInit>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d005      	beq.n	80023ca <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2202      	movs	r2, #2
 80023c2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e00d      	b.n	80023e6 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f005 fbfa 	bl	8007bd8 <USB_DevDisconnect>

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023ee <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d101      	bne.n	8002404 <HAL_PCD_Start+0x16>
 8002400:	2302      	movs	r3, #2
 8002402:	e016      	b.n	8002432 <HAL_PCD_Start+0x44>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4618      	mov	r0, r3
 8002412:	f002 fedd 	bl	80051d0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002416:	2101      	movs	r1, #1
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f007 fc14 	bl	8009c46 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f005 fbce 	bl	8007bc4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b088      	sub	sp, #32
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f005 fbd0 	bl	8007bec <USB_ReadInterrupts>
 800244c:	4603      	mov	r3, r0
 800244e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002452:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002456:	d102      	bne.n	800245e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 fb5f 	bl	8002b1c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f005 fbc2 	bl	8007bec <USB_ReadInterrupts>
 8002468:	4603      	mov	r3, r0
 800246a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800246e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002472:	d112      	bne.n	800249a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800247c:	b29a      	uxth	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002486:	b292      	uxth	r2, r2
 8002488:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f007 f9e2 	bl	8009856 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002492:	2100      	movs	r1, #0
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 f923 	bl	80026e0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f005 fba4 	bl	8007bec <USB_ReadInterrupts>
 80024a4:	4603      	mov	r3, r0
 80024a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024ae:	d10b      	bne.n	80024c8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80024c2:	b292      	uxth	r2, r2
 80024c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f005 fb8d 	bl	8007bec <USB_ReadInterrupts>
 80024d2:	4603      	mov	r3, r0
 80024d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024dc:	d10b      	bne.n	80024f6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024f0:	b292      	uxth	r2, r2
 80024f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f005 fb76 	bl	8007bec <USB_ReadInterrupts>
 8002500:	4603      	mov	r3, r0
 8002502:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800250a:	d126      	bne.n	800255a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002514:	b29a      	uxth	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 0204 	bic.w	r2, r2, #4
 800251e:	b292      	uxth	r2, r2
 8002520:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800252c:	b29a      	uxth	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f022 0208 	bic.w	r2, r2, #8
 8002536:	b292      	uxth	r2, r2
 8002538:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f007 f9c3 	bl	80098c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800254a:	b29a      	uxth	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002554:	b292      	uxth	r2, r2
 8002556:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f005 fb44 	bl	8007bec <USB_ReadInterrupts>
 8002564:	4603      	mov	r3, r0
 8002566:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800256a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800256e:	f040 8082 	bne.w	8002676 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002572:	2300      	movs	r3, #0
 8002574:	77fb      	strb	r3, [r7, #31]
 8002576:	e010      	b.n	800259a <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	461a      	mov	r2, r3
 800257e:	7ffb      	ldrb	r3, [r7, #31]
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	441a      	add	r2, r3
 8002584:	7ffb      	ldrb	r3, [r7, #31]
 8002586:	8812      	ldrh	r2, [r2, #0]
 8002588:	b292      	uxth	r2, r2
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	3320      	adds	r3, #32
 800258e:	443b      	add	r3, r7
 8002590:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002594:	7ffb      	ldrb	r3, [r7, #31]
 8002596:	3301      	adds	r3, #1
 8002598:	77fb      	strb	r3, [r7, #31]
 800259a:	7ffb      	ldrb	r3, [r7, #31]
 800259c:	2b07      	cmp	r3, #7
 800259e:	d9eb      	bls.n	8002578 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f042 0201 	orr.w	r2, r2, #1
 80025b2:	b292      	uxth	r2, r2
 80025b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 0201 	bic.w	r2, r2, #1
 80025ca:	b292      	uxth	r2, r2
 80025cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80025d0:	bf00      	nop
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025da:	b29b      	uxth	r3, r3
 80025dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0f6      	beq.n	80025d2 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025f6:	b292      	uxth	r2, r2
 80025f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80025fc:	2300      	movs	r3, #0
 80025fe:	77fb      	strb	r3, [r7, #31]
 8002600:	e00f      	b.n	8002622 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002602:	7ffb      	ldrb	r3, [r7, #31]
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6812      	ldr	r2, [r2, #0]
 8002608:	4611      	mov	r1, r2
 800260a:	7ffa      	ldrb	r2, [r7, #31]
 800260c:	0092      	lsls	r2, r2, #2
 800260e:	440a      	add	r2, r1
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	3320      	adds	r3, #32
 8002614:	443b      	add	r3, r7
 8002616:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800261a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800261c:	7ffb      	ldrb	r3, [r7, #31]
 800261e:	3301      	adds	r3, #1
 8002620:	77fb      	strb	r3, [r7, #31]
 8002622:	7ffb      	ldrb	r3, [r7, #31]
 8002624:	2b07      	cmp	r3, #7
 8002626:	d9ec      	bls.n	8002602 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002630:	b29a      	uxth	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0208 	orr.w	r2, r2, #8
 800263a:	b292      	uxth	r2, r2
 800263c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002648:	b29a      	uxth	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002652:	b292      	uxth	r2, r2
 8002654:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002660:	b29a      	uxth	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f042 0204 	orr.w	r2, r2, #4
 800266a:	b292      	uxth	r2, r2
 800266c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f007 f90f 	bl	8009894 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f005 fab6 	bl	8007bec <USB_ReadInterrupts>
 8002680:	4603      	mov	r3, r0
 8002682:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002686:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800268a:	d10e      	bne.n	80026aa <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002694:	b29a      	uxth	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800269e:	b292      	uxth	r2, r2
 80026a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f007 f8c8 	bl	800983a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f005 fa9c 	bl	8007bec <USB_ReadInterrupts>
 80026b4:	4603      	mov	r3, r0
 80026b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026be:	d10b      	bne.n	80026d8 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026d2:	b292      	uxth	r2, r2
 80026d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80026d8:	bf00      	nop
 80026da:	3720      	adds	r7, #32
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	460b      	mov	r3, r1
 80026ea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d101      	bne.n	80026fa <HAL_PCD_SetAddress+0x1a>
 80026f6:	2302      	movs	r3, #2
 80026f8:	e013      	b.n	8002722 <HAL_PCD_SetAddress+0x42>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	78fa      	ldrb	r2, [r7, #3]
 8002706:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	78fa      	ldrb	r2, [r7, #3]
 8002710:	4611      	mov	r1, r2
 8002712:	4618      	mov	r0, r3
 8002714:	f005 fa43 	bl	8007b9e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b084      	sub	sp, #16
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
 8002732:	4608      	mov	r0, r1
 8002734:	4611      	mov	r1, r2
 8002736:	461a      	mov	r2, r3
 8002738:	4603      	mov	r3, r0
 800273a:	70fb      	strb	r3, [r7, #3]
 800273c:	460b      	mov	r3, r1
 800273e:	803b      	strh	r3, [r7, #0]
 8002740:	4613      	mov	r3, r2
 8002742:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002744:	2300      	movs	r3, #0
 8002746:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002748:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800274c:	2b00      	cmp	r3, #0
 800274e:	da0e      	bge.n	800276e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002750:	78fb      	ldrb	r3, [r7, #3]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	1c5a      	adds	r2, r3, #1
 8002758:	4613      	mov	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	4413      	add	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2201      	movs	r2, #1
 800276a:	705a      	strb	r2, [r3, #1]
 800276c:	e00e      	b.n	800278c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800276e:	78fb      	ldrb	r3, [r7, #3]
 8002770:	f003 0207 	and.w	r2, r3, #7
 8002774:	4613      	mov	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	4413      	add	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800278c:	78fb      	ldrb	r3, [r7, #3]
 800278e:	f003 0307 	and.w	r3, r3, #7
 8002792:	b2da      	uxtb	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002798:	883a      	ldrh	r2, [r7, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	78ba      	ldrb	r2, [r7, #2]
 80027a2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	785b      	ldrb	r3, [r3, #1]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d004      	beq.n	80027b6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80027b6:	78bb      	ldrb	r3, [r7, #2]
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d102      	bne.n	80027c2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_PCD_EP_Open+0xa6>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e00e      	b.n	80027ee <HAL_PCD_EP_Open+0xc4>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68f9      	ldr	r1, [r7, #12]
 80027de:	4618      	mov	r0, r3
 80027e0:	f002 fd52 	bl	8005288 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80027ec:	7afb      	ldrb	r3, [r7, #11]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b084      	sub	sp, #16
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
 80027fe:	460b      	mov	r3, r1
 8002800:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002802:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002806:	2b00      	cmp	r3, #0
 8002808:	da0e      	bge.n	8002828 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800280a:	78fb      	ldrb	r3, [r7, #3]
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	1c5a      	adds	r2, r3, #1
 8002812:	4613      	mov	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	4413      	add	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2201      	movs	r2, #1
 8002824:	705a      	strb	r2, [r3, #1]
 8002826:	e00e      	b.n	8002846 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002828:	78fb      	ldrb	r3, [r7, #3]
 800282a:	f003 0207 	and.w	r2, r3, #7
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	4413      	add	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002846:	78fb      	ldrb	r3, [r7, #3]
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	b2da      	uxtb	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <HAL_PCD_EP_Close+0x6a>
 800285c:	2302      	movs	r3, #2
 800285e:	e00e      	b.n	800287e <HAL_PCD_EP_Close+0x88>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68f9      	ldr	r1, [r7, #12]
 800286e:	4618      	mov	r0, r3
 8002870:	f003 f874 	bl	800595c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b086      	sub	sp, #24
 800288a:	af00      	add	r7, sp, #0
 800288c:	60f8      	str	r0, [r7, #12]
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	603b      	str	r3, [r7, #0]
 8002892:	460b      	mov	r3, r1
 8002894:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002896:	7afb      	ldrb	r3, [r7, #11]
 8002898:	f003 0207 	and.w	r2, r3, #7
 800289c:	4613      	mov	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	4413      	add	r3, r2
 80028ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	2200      	movs	r2, #0
 80028be:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	2200      	movs	r2, #0
 80028c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028c6:	7afb      	ldrb	r3, [r7, #11]
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028d2:	7afb      	ldrb	r3, [r7, #11]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d106      	bne.n	80028ea <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6979      	ldr	r1, [r7, #20]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f003 fa26 	bl	8005d34 <USB_EPStartXfer>
 80028e8:	e005      	b.n	80028f6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6979      	ldr	r1, [r7, #20]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f003 fa1f 	bl	8005d34 <USB_EPStartXfer>
  }

  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	460b      	mov	r3, r1
 800290a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800290c:	78fb      	ldrb	r3, [r7, #3]
 800290e:	f003 0207 	and.w	r2, r3, #7
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	4613      	mov	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	440b      	add	r3, r1
 800291e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002922:	681b      	ldr	r3, [r3, #0]
}
 8002924:	4618      	mov	r0, r3
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr

0800292e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b086      	sub	sp, #24
 8002932:	af00      	add	r7, sp, #0
 8002934:	60f8      	str	r0, [r7, #12]
 8002936:	607a      	str	r2, [r7, #4]
 8002938:	603b      	str	r3, [r7, #0]
 800293a:	460b      	mov	r3, r1
 800293c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800293e:	7afb      	ldrb	r3, [r7, #11]
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	1c5a      	adds	r2, r3, #1
 8002946:	4613      	mov	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	4413      	add	r3, r2
 8002952:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	2200      	movs	r2, #0
 8002972:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	2201      	movs	r2, #1
 8002978:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800297a:	7afb      	ldrb	r3, [r7, #11]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	b2da      	uxtb	r2, r3
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002986:	7afb      	ldrb	r3, [r7, #11]
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	2b00      	cmp	r3, #0
 800298e:	d106      	bne.n	800299e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6979      	ldr	r1, [r7, #20]
 8002996:	4618      	mov	r0, r3
 8002998:	f003 f9cc 	bl	8005d34 <USB_EPStartXfer>
 800299c:	e005      	b.n	80029aa <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6979      	ldr	r1, [r7, #20]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f003 f9c5 	bl	8005d34 <USB_EPStartXfer>
  }

  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3718      	adds	r7, #24
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80029c0:	78fb      	ldrb	r3, [r7, #3]
 80029c2:	f003 0207 	and.w	r2, r3, #7
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d901      	bls.n	80029d2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e04c      	b.n	8002a6c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	da0e      	bge.n	80029f8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029da:	78fb      	ldrb	r3, [r7, #3]
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	1c5a      	adds	r2, r3, #1
 80029e2:	4613      	mov	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4413      	add	r3, r2
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	4413      	add	r3, r2
 80029ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2201      	movs	r2, #1
 80029f4:	705a      	strb	r2, [r3, #1]
 80029f6:	e00c      	b.n	8002a12 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029f8:	78fa      	ldrb	r2, [r7, #3]
 80029fa:	4613      	mov	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4413      	add	r3, r2
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	4413      	add	r3, r2
 8002a0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2201      	movs	r2, #1
 8002a16:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a18:	78fb      	ldrb	r3, [r7, #3]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d101      	bne.n	8002a32 <HAL_PCD_EP_SetStall+0x7e>
 8002a2e:	2302      	movs	r3, #2
 8002a30:	e01c      	b.n	8002a6c <HAL_PCD_EP_SetStall+0xb8>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68f9      	ldr	r1, [r7, #12]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f004 ffaf 	bl	80079a4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a46:	78fb      	ldrb	r3, [r7, #3]
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d108      	bne.n	8002a62 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4610      	mov	r0, r2
 8002a5e:	f005 f8d4 	bl	8007c0a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a80:	78fb      	ldrb	r3, [r7, #3]
 8002a82:	f003 020f 	and.w	r2, r3, #15
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d901      	bls.n	8002a92 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e040      	b.n	8002b14 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	da0e      	bge.n	8002ab8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a9a:	78fb      	ldrb	r3, [r7, #3]
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	1c5a      	adds	r2, r3, #1
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	4413      	add	r3, r2
 8002aae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	705a      	strb	r2, [r3, #1]
 8002ab6:	e00e      	b.n	8002ad6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ab8:	78fb      	ldrb	r3, [r7, #3]
 8002aba:	f003 0207 	and.w	r2, r3, #7
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	4413      	add	r3, r2
 8002ace:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002adc:	78fb      	ldrb	r3, [r7, #3]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d101      	bne.n	8002af6 <HAL_PCD_EP_ClrStall+0x82>
 8002af2:	2302      	movs	r3, #2
 8002af4:	e00e      	b.n	8002b14 <HAL_PCD_EP_ClrStall+0xa0>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68f9      	ldr	r1, [r7, #12]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f004 ff9d 	bl	8007a44 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b08e      	sub	sp, #56	; 0x38
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002b24:	e2ec      	b.n	8003100 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b2e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002b30:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	f003 030f 	and.w	r3, r3, #15
 8002b38:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002b3c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f040 8161 	bne.w	8002e08 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002b46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b48:	f003 0310 	and.w	r3, r3, #16
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d152      	bne.n	8002bf6 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	881b      	ldrh	r3, [r3, #0]
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b60:	81fb      	strh	r3, [r7, #14]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	89fb      	ldrh	r3, [r7, #14]
 8002b68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3328      	adds	r3, #40	; 0x28
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	461a      	mov	r2, r3
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	3302      	adds	r3, #2
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6812      	ldr	r2, [r2, #0]
 8002b96:	4413      	add	r3, r2
 8002b98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b9c:	881b      	ldrh	r3, [r3, #0]
 8002b9e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	695a      	ldr	r2, [r3, #20]
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	441a      	add	r2, r3
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f006 fe25 	bl	8009806 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 829b 	beq.w	8003100 <PCD_EP_ISR_Handler+0x5e4>
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f040 8296 	bne.w	8003100 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	b292      	uxth	r2, r2
 8002be8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002bf4:	e284      	b.n	8003100 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bfc:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	881b      	ldrh	r3, [r3, #0]
 8002c04:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002c06:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002c08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d034      	beq.n	8002c7a <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	4413      	add	r3, r2
 8002c24:	3306      	adds	r3, #6
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6812      	ldr	r2, [r2, #0]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c32:	881b      	ldrh	r3, [r3, #0]
 8002c34:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	f005 f82b 	bl	8007caa <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	881b      	ldrh	r3, [r3, #0]
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002c60:	4013      	ands	r3, r2
 8002c62:	823b      	strh	r3, [r7, #16]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	8a3a      	ldrh	r2, [r7, #16]
 8002c6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c6e:	b292      	uxth	r2, r2
 8002c70:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f006 fd9a 	bl	80097ac <HAL_PCD_SetupStageCallback>
 8002c78:	e242      	b.n	8003100 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002c7a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f280 823e 	bge.w	8003100 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002c90:	4013      	ands	r3, r2
 8002c92:	83bb      	strh	r3, [r7, #28]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	8bba      	ldrh	r2, [r7, #28]
 8002c9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c9e:	b292      	uxth	r2, r2
 8002ca0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	461a      	mov	r2, r3
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	3306      	adds	r3, #6
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6812      	ldr	r2, [r2, #0]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cc4:	881b      	ldrh	r3, [r3, #0]
 8002cc6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d019      	beq.n	8002d0a <PCD_EP_ISR_Handler+0x1ee>
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d015      	beq.n	8002d0a <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6818      	ldr	r0, [r3, #0]
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	6959      	ldr	r1, [r3, #20]
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	f004 ffdb 	bl	8007caa <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf6:	695a      	ldr	r2, [r3, #20]
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	69db      	ldr	r3, [r3, #28]
 8002cfc:	441a      	add	r2, r3
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002d02:	2100      	movs	r1, #0
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f006 fd63 	bl	80097d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	881b      	ldrh	r3, [r3, #0]
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f040 81f2 	bne.w	8003100 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	61bb      	str	r3, [r7, #24]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	4413      	add	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d112      	bne.n	8002d6a <PCD_EP_ISR_Handler+0x24e>
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	881b      	ldrh	r3, [r3, #0]
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	801a      	strh	r2, [r3, #0]
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	881b      	ldrh	r3, [r3, #0]
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	801a      	strh	r2, [r3, #0]
 8002d68:	e02f      	b.n	8002dca <PCD_EP_ISR_Handler+0x2ae>
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	2b3e      	cmp	r3, #62	; 0x3e
 8002d70:	d813      	bhi.n	8002d9a <PCD_EP_ISR_Handler+0x27e>
 8002d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	085b      	lsrs	r3, r3, #1
 8002d78:	633b      	str	r3, [r7, #48]	; 0x30
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d002      	beq.n	8002d8c <PCD_EP_ISR_Handler+0x270>
 8002d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d88:	3301      	adds	r3, #1
 8002d8a:	633b      	str	r3, [r7, #48]	; 0x30
 8002d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	029b      	lsls	r3, r3, #10
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	801a      	strh	r2, [r3, #0]
 8002d98:	e017      	b.n	8002dca <PCD_EP_ISR_Handler+0x2ae>
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	095b      	lsrs	r3, r3, #5
 8002da0:	633b      	str	r3, [r7, #48]	; 0x30
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	f003 031f 	and.w	r3, r3, #31
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d102      	bne.n	8002db4 <PCD_EP_ISR_Handler+0x298>
 8002dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db0:	3b01      	subs	r3, #1
 8002db2:	633b      	str	r3, [r7, #48]	; 0x30
 8002db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	029b      	lsls	r3, r3, #10
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	881b      	ldrh	r3, [r3, #0]
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dda:	827b      	strh	r3, [r7, #18]
 8002ddc:	8a7b      	ldrh	r3, [r7, #18]
 8002dde:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002de2:	827b      	strh	r3, [r7, #18]
 8002de4:	8a7b      	ldrh	r3, [r7, #18]
 8002de6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002dea:	827b      	strh	r3, [r7, #18]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	8a7b      	ldrh	r3, [r7, #18]
 8002df2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002df6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	8013      	strh	r3, [r2, #0]
 8002e06:	e17b      	b.n	8003100 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	881b      	ldrh	r3, [r3, #0]
 8002e18:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002e1a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f280 80ea 	bge.w	8002ff8 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	853b      	strh	r3, [r7, #40]	; 0x28
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	461a      	mov	r2, r3
 8002e44:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002e4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e52:	b292      	uxth	r2, r2
 8002e54:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002e56:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4413      	add	r3, r2
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	4413      	add	r3, r2
 8002e6a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	7b1b      	ldrb	r3, [r3, #12]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d122      	bne.n	8002eba <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	461a      	mov	r2, r3
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	4413      	add	r3, r2
 8002e88:	3306      	adds	r3, #6
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6812      	ldr	r2, [r2, #0]
 8002e90:	4413      	add	r3, r2
 8002e92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e9c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002e9e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f000 8087 	beq.w	8002fb4 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6818      	ldr	r0, [r3, #0]
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	6959      	ldr	r1, [r3, #20]
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	88da      	ldrh	r2, [r3, #6]
 8002eb2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002eb4:	f004 fef9 	bl	8007caa <USB_ReadPMA>
 8002eb8:	e07c      	b.n	8002fb4 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	78db      	ldrb	r3, [r3, #3]
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d108      	bne.n	8002ed4 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002ec2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 f927 	bl	800311c <HAL_PCD_EP_DB_Receive>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002ed2:	e06f      	b.n	8002fb4 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	461a      	mov	r2, r3
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eee:	847b      	strh	r3, [r7, #34]	; 0x22
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	441a      	add	r2, r3
 8002efe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002f00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	461a      	mov	r2, r3
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d021      	beq.n	8002f72 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	461a      	mov	r2, r3
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	4413      	add	r3, r2
 8002f42:	3302      	adds	r3, #2
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	6812      	ldr	r2, [r2, #0]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f50:	881b      	ldrh	r3, [r3, #0]
 8002f52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f56:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002f58:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d02a      	beq.n	8002fb4 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6818      	ldr	r0, [r3, #0]
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	6959      	ldr	r1, [r3, #20]
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	891a      	ldrh	r2, [r3, #8]
 8002f6a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f6c:	f004 fe9d 	bl	8007caa <USB_ReadPMA>
 8002f70:	e020      	b.n	8002fb4 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	4413      	add	r3, r2
 8002f86:	3306      	adds	r3, #6
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6812      	ldr	r2, [r2, #0]
 8002f8e:	4413      	add	r3, r2
 8002f90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f94:	881b      	ldrh	r3, [r3, #0]
 8002f96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f9a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002f9c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d008      	beq.n	8002fb4 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6818      	ldr	r0, [r3, #0]
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	6959      	ldr	r1, [r3, #20]
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	895a      	ldrh	r2, [r3, #10]
 8002fae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002fb0:	f004 fe7b 	bl	8007caa <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb6:	69da      	ldr	r2, [r3, #28]
 8002fb8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002fba:	441a      	add	r2, r3
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	695a      	ldr	r2, [r3, #20]
 8002fc4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002fc6:	441a      	add	r2, r3
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d004      	beq.n	8002fde <PCD_EP_ISR_Handler+0x4c2>
 8002fd4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d206      	bcs.n	8002fec <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f006 fbf3 	bl	80097d0 <HAL_PCD_DataOutStageCallback>
 8002fea:	e005      	b.n	8002ff8 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f002 fe9e 	bl	8005d34 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002ff8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d07e      	beq.n	8003100 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003002:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003006:	1c5a      	adds	r2, r3, #1
 8003008:	4613      	mov	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	4413      	add	r3, r2
 8003014:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	461a      	mov	r2, r3
 800301c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	b29b      	uxth	r3, r3
 8003028:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800302c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003030:	843b      	strh	r3, [r7, #32]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	461a      	mov	r2, r3
 8003038:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	441a      	add	r2, r3
 8003040:	8c3b      	ldrh	r3, [r7, #32]
 8003042:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003046:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800304a:	b29b      	uxth	r3, r3
 800304c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	78db      	ldrb	r3, [r3, #3]
 8003052:	2b03      	cmp	r3, #3
 8003054:	d00c      	beq.n	8003070 <PCD_EP_ISR_Handler+0x554>
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	78db      	ldrb	r3, [r3, #3]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d008      	beq.n	8003070 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800305e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003060:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003062:	2b02      	cmp	r3, #2
 8003064:	d146      	bne.n	80030f4 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003066:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306c:	2b00      	cmp	r3, #0
 800306e:	d141      	bne.n	80030f4 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003078:	b29b      	uxth	r3, r3
 800307a:	461a      	mov	r2, r3
 800307c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	4413      	add	r3, r2
 8003084:	3302      	adds	r3, #2
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	6812      	ldr	r2, [r2, #0]
 800308c:	4413      	add	r3, r2
 800308e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003098:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	699a      	ldr	r2, [r3, #24]
 800309e:	8bfb      	ldrh	r3, [r7, #30]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d906      	bls.n	80030b2 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	699a      	ldr	r2, [r3, #24]
 80030a8:	8bfb      	ldrh	r3, [r7, #30]
 80030aa:	1ad2      	subs	r2, r2, r3
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	619a      	str	r2, [r3, #24]
 80030b0:	e002      	b.n	80030b8 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	2200      	movs	r2, #0
 80030b6:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80030b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d106      	bne.n	80030ce <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	4619      	mov	r1, r3
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f006 fb9d 	bl	8009806 <HAL_PCD_DataInStageCallback>
 80030cc:	e018      	b.n	8003100 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80030ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d0:	695a      	ldr	r2, [r3, #20]
 80030d2:	8bfb      	ldrh	r3, [r7, #30]
 80030d4:	441a      	add	r2, r3
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	69da      	ldr	r2, [r3, #28]
 80030de:	8bfb      	ldrh	r3, [r7, #30]
 80030e0:	441a      	add	r2, r3
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030ec:	4618      	mov	r0, r3
 80030ee:	f002 fe21 	bl	8005d34 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80030f2:	e005      	b.n	8003100 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80030f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80030f6:	461a      	mov	r2, r3
 80030f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f91b 	bl	8003336 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003108:	b29b      	uxth	r3, r3
 800310a:	b21b      	sxth	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	f6ff ad0a 	blt.w	8002b26 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3738      	adds	r7, #56	; 0x38
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b088      	sub	sp, #32
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	4613      	mov	r3, r2
 8003128:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800312a:	88fb      	ldrh	r3, [r7, #6]
 800312c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d07e      	beq.n	8003232 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800313c:	b29b      	uxth	r3, r3
 800313e:	461a      	mov	r2, r3
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	4413      	add	r3, r2
 8003148:	3302      	adds	r3, #2
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	6812      	ldr	r2, [r2, #0]
 8003150:	4413      	add	r3, r2
 8003152:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003156:	881b      	ldrh	r3, [r3, #0]
 8003158:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800315c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	699a      	ldr	r2, [r3, #24]
 8003162:	8b7b      	ldrh	r3, [r7, #26]
 8003164:	429a      	cmp	r2, r3
 8003166:	d306      	bcc.n	8003176 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	699a      	ldr	r2, [r3, #24]
 800316c:	8b7b      	ldrh	r3, [r7, #26]
 800316e:	1ad2      	subs	r2, r2, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	619a      	str	r2, [r3, #24]
 8003174:	e002      	b.n	800317c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	2200      	movs	r2, #0
 800317a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d123      	bne.n	80031cc <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	461a      	mov	r2, r3
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	881b      	ldrh	r3, [r3, #0]
 8003194:	b29b      	uxth	r3, r3
 8003196:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800319a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800319e:	833b      	strh	r3, [r7, #24]
 80031a0:	8b3b      	ldrh	r3, [r7, #24]
 80031a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80031a6:	833b      	strh	r3, [r7, #24]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	461a      	mov	r2, r3
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	441a      	add	r2, r3
 80031b6:	8b3b      	ldrh	r3, [r7, #24]
 80031b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80031cc:	88fb      	ldrh	r3, [r7, #6]
 80031ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d01f      	beq.n	8003216 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	461a      	mov	r2, r3
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f0:	82fb      	strh	r3, [r7, #22]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	461a      	mov	r2, r3
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	441a      	add	r2, r3
 8003200:	8afb      	ldrh	r3, [r7, #22]
 8003202:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003206:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800320a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800320e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003212:	b29b      	uxth	r3, r3
 8003214:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003216:	8b7b      	ldrh	r3, [r7, #26]
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 8087 	beq.w	800332c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6818      	ldr	r0, [r3, #0]
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	6959      	ldr	r1, [r3, #20]
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	891a      	ldrh	r2, [r3, #8]
 800322a:	8b7b      	ldrh	r3, [r7, #26]
 800322c:	f004 fd3d 	bl	8007caa <USB_ReadPMA>
 8003230:	e07c      	b.n	800332c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800323a:	b29b      	uxth	r3, r3
 800323c:	461a      	mov	r2, r3
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	4413      	add	r3, r2
 8003246:	3306      	adds	r3, #6
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	6812      	ldr	r2, [r2, #0]
 800324e:	4413      	add	r3, r2
 8003250:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003254:	881b      	ldrh	r3, [r3, #0]
 8003256:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800325a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	699a      	ldr	r2, [r3, #24]
 8003260:	8b7b      	ldrh	r3, [r7, #26]
 8003262:	429a      	cmp	r2, r3
 8003264:	d306      	bcc.n	8003274 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	699a      	ldr	r2, [r3, #24]
 800326a:	8b7b      	ldrh	r3, [r7, #26]
 800326c:	1ad2      	subs	r2, r2, r3
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	619a      	str	r2, [r3, #24]
 8003272:	e002      	b.n	800327a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2200      	movs	r2, #0
 8003278:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d123      	bne.n	80032ca <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	461a      	mov	r2, r3
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	881b      	ldrh	r3, [r3, #0]
 8003292:	b29b      	uxth	r3, r3
 8003294:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800329c:	83fb      	strh	r3, [r7, #30]
 800329e:	8bfb      	ldrh	r3, [r7, #30]
 80032a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80032a4:	83fb      	strh	r3, [r7, #30]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	461a      	mov	r2, r3
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	441a      	add	r2, r3
 80032b4:	8bfb      	ldrh	r3, [r7, #30]
 80032b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80032ca:	88fb      	ldrh	r3, [r7, #6]
 80032cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d11f      	bne.n	8003314 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	461a      	mov	r2, r3
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	881b      	ldrh	r3, [r3, #0]
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ee:	83bb      	strh	r3, [r7, #28]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	461a      	mov	r2, r3
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	441a      	add	r2, r3
 80032fe:	8bbb      	ldrh	r3, [r7, #28]
 8003300:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003304:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003308:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800330c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003310:	b29b      	uxth	r3, r3
 8003312:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003314:	8b7b      	ldrh	r3, [r7, #26]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d008      	beq.n	800332c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6818      	ldr	r0, [r3, #0]
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	6959      	ldr	r1, [r3, #20]
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	895a      	ldrh	r2, [r3, #10]
 8003326:	8b7b      	ldrh	r3, [r7, #26]
 8003328:	f004 fcbf 	bl	8007caa <USB_ReadPMA>
    }
  }

  return count;
 800332c:	8b7b      	ldrh	r3, [r7, #26]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3720      	adds	r7, #32
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b0a2      	sub	sp, #136	; 0x88
 800333a:	af00      	add	r7, sp, #0
 800333c:	60f8      	str	r0, [r7, #12]
 800333e:	60b9      	str	r1, [r7, #8]
 8003340:	4613      	mov	r3, r2
 8003342:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003344:	88fb      	ldrh	r3, [r7, #6]
 8003346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 81c7 	beq.w	80036de <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003358:	b29b      	uxth	r3, r3
 800335a:	461a      	mov	r2, r3
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	4413      	add	r3, r2
 8003364:	3302      	adds	r3, #2
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	6812      	ldr	r2, [r2, #0]
 800336c:	4413      	add	r3, r2
 800336e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003372:	881b      	ldrh	r3, [r3, #0]
 8003374:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003378:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	699a      	ldr	r2, [r3, #24]
 8003380:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003384:	429a      	cmp	r2, r3
 8003386:	d907      	bls.n	8003398 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	699a      	ldr	r2, [r3, #24]
 800338c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003390:	1ad2      	subs	r2, r2, r3
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	619a      	str	r2, [r3, #24]
 8003396:	e002      	b.n	800339e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	2200      	movs	r2, #0
 800339c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f040 80b9 	bne.w	800351a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	785b      	ldrb	r3, [r3, #1]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d126      	bne.n	80033fe <HAL_PCD_EP_DB_Transmit+0xc8>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033be:	b29b      	uxth	r3, r3
 80033c0:	461a      	mov	r2, r3
 80033c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c4:	4413      	add	r3, r2
 80033c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	011a      	lsls	r2, r3, #4
 80033ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d0:	4413      	add	r3, r2
 80033d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80033d6:	627b      	str	r3, [r7, #36]	; 0x24
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	881b      	ldrh	r3, [r3, #0]
 80033dc:	b29b      	uxth	r3, r3
 80033de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e6:	801a      	strh	r2, [r3, #0]
 80033e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ea:	881b      	ldrh	r3, [r3, #0]
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fa:	801a      	strh	r2, [r3, #0]
 80033fc:	e01a      	b.n	8003434 <HAL_PCD_EP_DB_Transmit+0xfe>
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	785b      	ldrb	r3, [r3, #1]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d116      	bne.n	8003434 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	633b      	str	r3, [r7, #48]	; 0x30
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003414:	b29b      	uxth	r3, r3
 8003416:	461a      	mov	r2, r3
 8003418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341a:	4413      	add	r3, r2
 800341c:	633b      	str	r3, [r7, #48]	; 0x30
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	011a      	lsls	r2, r3, #4
 8003424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003426:	4413      	add	r3, r2
 8003428:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800342c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800342e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003430:	2200      	movs	r2, #0
 8003432:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	623b      	str	r3, [r7, #32]
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	785b      	ldrb	r3, [r3, #1]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d126      	bne.n	8003490 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	61bb      	str	r3, [r7, #24]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003450:	b29b      	uxth	r3, r3
 8003452:	461a      	mov	r2, r3
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	4413      	add	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	011a      	lsls	r2, r3, #4
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	4413      	add	r3, r2
 8003464:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003468:	617b      	str	r3, [r7, #20]
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	881b      	ldrh	r3, [r3, #0]
 800346e:	b29b      	uxth	r3, r3
 8003470:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003474:	b29a      	uxth	r2, r3
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	801a      	strh	r2, [r3, #0]
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	881b      	ldrh	r3, [r3, #0]
 800347e:	b29b      	uxth	r3, r3
 8003480:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003484:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003488:	b29a      	uxth	r2, r3
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	801a      	strh	r2, [r3, #0]
 800348e:	e017      	b.n	80034c0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	785b      	ldrb	r3, [r3, #1]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d113      	bne.n	80034c0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	461a      	mov	r2, r3
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	4413      	add	r3, r2
 80034a8:	623b      	str	r3, [r7, #32]
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	011a      	lsls	r2, r3, #4
 80034b0:	6a3b      	ldr	r3, [r7, #32]
 80034b2:	4413      	add	r3, r2
 80034b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80034b8:	61fb      	str	r3, [r7, #28]
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	2200      	movs	r2, #0
 80034be:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	4619      	mov	r1, r3
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f006 f99d 	bl	8009806 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80034cc:	88fb      	ldrh	r3, [r7, #6]
 80034ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 82d4 	beq.w	8003a80 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	461a      	mov	r2, r3
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	881b      	ldrh	r3, [r3, #0]
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034f2:	827b      	strh	r3, [r7, #18]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	461a      	mov	r2, r3
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	441a      	add	r2, r3
 8003502:	8a7b      	ldrh	r3, [r7, #18]
 8003504:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003508:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800350c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003514:	b29b      	uxth	r3, r3
 8003516:	8013      	strh	r3, [r2, #0]
 8003518:	e2b2      	b.n	8003a80 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800351a:	88fb      	ldrh	r3, [r7, #6]
 800351c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d021      	beq.n	8003568 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	461a      	mov	r2, r3
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	881b      	ldrh	r3, [r3, #0]
 8003534:	b29b      	uxth	r3, r3
 8003536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800353a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800353e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	461a      	mov	r2, r3
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	441a      	add	r2, r3
 8003550:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003554:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003558:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800355c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003564:	b29b      	uxth	r3, r3
 8003566:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800356e:	2b01      	cmp	r3, #1
 8003570:	f040 8286 	bne.w	8003a80 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	695a      	ldr	r2, [r3, #20]
 8003578:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800357c:	441a      	add	r2, r3
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	69da      	ldr	r2, [r3, #28]
 8003586:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800358a:	441a      	add	r2, r3
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	6a1a      	ldr	r2, [r3, #32]
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	429a      	cmp	r2, r3
 800359a:	d309      	bcc.n	80035b0 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	6a1a      	ldr	r2, [r3, #32]
 80035a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035a8:	1ad2      	subs	r2, r2, r3
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	621a      	str	r2, [r3, #32]
 80035ae:	e015      	b.n	80035dc <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d107      	bne.n	80035c8 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80035b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035bc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80035c6:	e009      	b.n	80035dc <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2200      	movs	r2, #0
 80035da:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	785b      	ldrb	r3, [r3, #1]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d155      	bne.n	8003690 <HAL_PCD_EP_DB_Transmit+0x35a>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	461a      	mov	r2, r3
 80035f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f8:	4413      	add	r3, r2
 80035fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	011a      	lsls	r2, r3, #4
 8003602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003604:	4413      	add	r3, r2
 8003606:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800360a:	637b      	str	r3, [r7, #52]	; 0x34
 800360c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800360e:	2b00      	cmp	r3, #0
 8003610:	d112      	bne.n	8003638 <HAL_PCD_EP_DB_Transmit+0x302>
 8003612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003614:	881b      	ldrh	r3, [r3, #0]
 8003616:	b29b      	uxth	r3, r3
 8003618:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800361c:	b29a      	uxth	r2, r3
 800361e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003620:	801a      	strh	r2, [r3, #0]
 8003622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	b29b      	uxth	r3, r3
 8003628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800362c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003630:	b29a      	uxth	r2, r3
 8003632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003634:	801a      	strh	r2, [r3, #0]
 8003636:	e047      	b.n	80036c8 <HAL_PCD_EP_DB_Transmit+0x392>
 8003638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800363a:	2b3e      	cmp	r3, #62	; 0x3e
 800363c:	d811      	bhi.n	8003662 <HAL_PCD_EP_DB_Transmit+0x32c>
 800363e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003640:	085b      	lsrs	r3, r3, #1
 8003642:	64bb      	str	r3, [r7, #72]	; 0x48
 8003644:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d002      	beq.n	8003654 <HAL_PCD_EP_DB_Transmit+0x31e>
 800364e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003650:	3301      	adds	r3, #1
 8003652:	64bb      	str	r3, [r7, #72]	; 0x48
 8003654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003656:	b29b      	uxth	r3, r3
 8003658:	029b      	lsls	r3, r3, #10
 800365a:	b29a      	uxth	r2, r3
 800365c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800365e:	801a      	strh	r2, [r3, #0]
 8003660:	e032      	b.n	80036c8 <HAL_PCD_EP_DB_Transmit+0x392>
 8003662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003664:	095b      	lsrs	r3, r3, #5
 8003666:	64bb      	str	r3, [r7, #72]	; 0x48
 8003668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800366a:	f003 031f 	and.w	r3, r3, #31
 800366e:	2b00      	cmp	r3, #0
 8003670:	d102      	bne.n	8003678 <HAL_PCD_EP_DB_Transmit+0x342>
 8003672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003674:	3b01      	subs	r3, #1
 8003676:	64bb      	str	r3, [r7, #72]	; 0x48
 8003678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800367a:	b29b      	uxth	r3, r3
 800367c:	029b      	lsls	r3, r3, #10
 800367e:	b29b      	uxth	r3, r3
 8003680:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003684:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003688:	b29a      	uxth	r2, r3
 800368a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800368c:	801a      	strh	r2, [r3, #0]
 800368e:	e01b      	b.n	80036c8 <HAL_PCD_EP_DB_Transmit+0x392>
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	785b      	ldrb	r3, [r3, #1]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d117      	bne.n	80036c8 <HAL_PCD_EP_DB_Transmit+0x392>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	643b      	str	r3, [r7, #64]	; 0x40
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	461a      	mov	r2, r3
 80036aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036ac:	4413      	add	r3, r2
 80036ae:	643b      	str	r3, [r7, #64]	; 0x40
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	011a      	lsls	r2, r3, #4
 80036b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036b8:	4413      	add	r3, r2
 80036ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80036be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036c6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6818      	ldr	r0, [r3, #0]
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	6959      	ldr	r1, [r3, #20]
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	891a      	ldrh	r2, [r3, #8]
 80036d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	f004 faa2 	bl	8007c20 <USB_WritePMA>
 80036dc:	e1d0      	b.n	8003a80 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	461a      	mov	r2, r3
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	4413      	add	r3, r2
 80036f2:	3306      	adds	r3, #6
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	6812      	ldr	r2, [r2, #0]
 80036fa:	4413      	add	r3, r2
 80036fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003700:	881b      	ldrh	r3, [r3, #0]
 8003702:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003706:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	699a      	ldr	r2, [r3, #24]
 800370e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003712:	429a      	cmp	r2, r3
 8003714:	d307      	bcc.n	8003726 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	699a      	ldr	r2, [r3, #24]
 800371a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800371e:	1ad2      	subs	r2, r2, r3
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	619a      	str	r2, [r3, #24]
 8003724:	e002      	b.n	800372c <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	2200      	movs	r2, #0
 800372a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	2b00      	cmp	r3, #0
 8003732:	f040 80c4 	bne.w	80038be <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	785b      	ldrb	r3, [r3, #1]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d126      	bne.n	800378c <HAL_PCD_EP_DB_Transmit+0x456>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800374c:	b29b      	uxth	r3, r3
 800374e:	461a      	mov	r2, r3
 8003750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003752:	4413      	add	r3, r2
 8003754:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	011a      	lsls	r2, r3, #4
 800375c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800375e:	4413      	add	r3, r2
 8003760:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003764:	66bb      	str	r3, [r7, #104]	; 0x68
 8003766:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	b29b      	uxth	r3, r3
 800376c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003770:	b29a      	uxth	r2, r3
 8003772:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003774:	801a      	strh	r2, [r3, #0]
 8003776:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003778:	881b      	ldrh	r3, [r3, #0]
 800377a:	b29b      	uxth	r3, r3
 800377c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003780:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003784:	b29a      	uxth	r2, r3
 8003786:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003788:	801a      	strh	r2, [r3, #0]
 800378a:	e01a      	b.n	80037c2 <HAL_PCD_EP_DB_Transmit+0x48c>
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	785b      	ldrb	r3, [r3, #1]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d116      	bne.n	80037c2 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	677b      	str	r3, [r7, #116]	; 0x74
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	461a      	mov	r2, r3
 80037a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037a8:	4413      	add	r3, r2
 80037aa:	677b      	str	r3, [r7, #116]	; 0x74
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	011a      	lsls	r2, r3, #4
 80037b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037b4:	4413      	add	r3, r2
 80037b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80037ba:	673b      	str	r3, [r7, #112]	; 0x70
 80037bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037be:	2200      	movs	r2, #0
 80037c0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	785b      	ldrb	r3, [r3, #1]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d12f      	bne.n	8003830 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	461a      	mov	r2, r3
 80037e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037e8:	4413      	add	r3, r2
 80037ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	011a      	lsls	r2, r3, #4
 80037f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037f8:	4413      	add	r3, r2
 80037fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80037fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003802:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003806:	881b      	ldrh	r3, [r3, #0]
 8003808:	b29b      	uxth	r3, r3
 800380a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800380e:	b29a      	uxth	r2, r3
 8003810:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003814:	801a      	strh	r2, [r3, #0]
 8003816:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800381a:	881b      	ldrh	r3, [r3, #0]
 800381c:	b29b      	uxth	r3, r3
 800381e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003822:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003826:	b29a      	uxth	r2, r3
 8003828:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800382c:	801a      	strh	r2, [r3, #0]
 800382e:	e017      	b.n	8003860 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	785b      	ldrb	r3, [r3, #1]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d113      	bne.n	8003860 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003840:	b29b      	uxth	r3, r3
 8003842:	461a      	mov	r2, r3
 8003844:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003846:	4413      	add	r3, r2
 8003848:	67bb      	str	r3, [r7, #120]	; 0x78
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	011a      	lsls	r2, r3, #4
 8003850:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003852:	4413      	add	r3, r2
 8003854:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003858:	67fb      	str	r3, [r7, #124]	; 0x7c
 800385a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800385c:	2200      	movs	r2, #0
 800385e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	4619      	mov	r1, r3
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f005 ffcd 	bl	8009806 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800386c:	88fb      	ldrh	r3, [r7, #6]
 800386e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003872:	2b00      	cmp	r3, #0
 8003874:	f040 8104 	bne.w	8003a80 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	461a      	mov	r2, r3
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	881b      	ldrh	r3, [r3, #0]
 8003888:	b29b      	uxth	r3, r3
 800388a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800388e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003892:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	461a      	mov	r2, r3
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	441a      	add	r2, r3
 80038a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80038a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	8013      	strh	r3, [r2, #0]
 80038bc:	e0e0      	b.n	8003a80 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80038be:	88fb      	ldrh	r3, [r7, #6]
 80038c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d121      	bne.n	800390c <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	461a      	mov	r2, r3
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	b29b      	uxth	r3, r3
 80038da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038e2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	461a      	mov	r2, r3
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	441a      	add	r2, r3
 80038f4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80038f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003900:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003908:	b29b      	uxth	r3, r3
 800390a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003912:	2b01      	cmp	r3, #1
 8003914:	f040 80b4 	bne.w	8003a80 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	695a      	ldr	r2, [r3, #20]
 800391c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003920:	441a      	add	r2, r3
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	69da      	ldr	r2, [r3, #28]
 800392a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800392e:	441a      	add	r2, r3
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	6a1a      	ldr	r2, [r3, #32]
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	429a      	cmp	r2, r3
 800393e:	d309      	bcc.n	8003954 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	6a1a      	ldr	r2, [r3, #32]
 800394a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800394c:	1ad2      	subs	r2, r2, r3
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	621a      	str	r2, [r3, #32]
 8003952:	e015      	b.n	8003980 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d107      	bne.n	800396c <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800395c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003960:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800396a:	e009      	b.n	8003980 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	2200      	movs	r2, #0
 8003976:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	667b      	str	r3, [r7, #100]	; 0x64
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	785b      	ldrb	r3, [r3, #1]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d155      	bne.n	8003a3a <HAL_PCD_EP_DB_Transmit+0x704>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800399c:	b29b      	uxth	r3, r3
 800399e:	461a      	mov	r2, r3
 80039a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039a2:	4413      	add	r3, r2
 80039a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	011a      	lsls	r2, r3, #4
 80039ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ae:	4413      	add	r3, r2
 80039b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80039b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80039b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d112      	bne.n	80039e2 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80039bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039be:	881b      	ldrh	r3, [r3, #0]
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039ca:	801a      	strh	r2, [r3, #0]
 80039cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039ce:	881b      	ldrh	r3, [r3, #0]
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039da:	b29a      	uxth	r2, r3
 80039dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039de:	801a      	strh	r2, [r3, #0]
 80039e0:	e044      	b.n	8003a6c <HAL_PCD_EP_DB_Transmit+0x736>
 80039e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039e4:	2b3e      	cmp	r3, #62	; 0x3e
 80039e6:	d811      	bhi.n	8003a0c <HAL_PCD_EP_DB_Transmit+0x6d6>
 80039e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039ea:	085b      	lsrs	r3, r3, #1
 80039ec:	657b      	str	r3, [r7, #84]	; 0x54
 80039ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d002      	beq.n	80039fe <HAL_PCD_EP_DB_Transmit+0x6c8>
 80039f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039fa:	3301      	adds	r3, #1
 80039fc:	657b      	str	r3, [r7, #84]	; 0x54
 80039fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	029b      	lsls	r3, r3, #10
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a08:	801a      	strh	r2, [r3, #0]
 8003a0a:	e02f      	b.n	8003a6c <HAL_PCD_EP_DB_Transmit+0x736>
 8003a0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a0e:	095b      	lsrs	r3, r3, #5
 8003a10:	657b      	str	r3, [r7, #84]	; 0x54
 8003a12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a14:	f003 031f 	and.w	r3, r3, #31
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d102      	bne.n	8003a22 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003a1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	657b      	str	r3, [r7, #84]	; 0x54
 8003a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	029b      	lsls	r3, r3, #10
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a36:	801a      	strh	r2, [r3, #0]
 8003a38:	e018      	b.n	8003a6c <HAL_PCD_EP_DB_Transmit+0x736>
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	785b      	ldrb	r3, [r3, #1]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d114      	bne.n	8003a6c <HAL_PCD_EP_DB_Transmit+0x736>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a50:	4413      	add	r3, r2
 8003a52:	667b      	str	r3, [r7, #100]	; 0x64
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	011a      	lsls	r2, r3, #4
 8003a5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a5c:	4413      	add	r3, r2
 8003a5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a62:	663b      	str	r3, [r7, #96]	; 0x60
 8003a64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a6a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6818      	ldr	r0, [r3, #0]
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	6959      	ldr	r1, [r3, #20]
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	895a      	ldrh	r2, [r3, #10]
 8003a78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	f004 f8d0 	bl	8007c20 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	461a      	mov	r2, r3
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4413      	add	r3, r2
 8003a8e:	881b      	ldrh	r3, [r3, #0]
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a9a:	823b      	strh	r3, [r7, #16]
 8003a9c:	8a3b      	ldrh	r3, [r7, #16]
 8003a9e:	f083 0310 	eor.w	r3, r3, #16
 8003aa2:	823b      	strh	r3, [r7, #16]
 8003aa4:	8a3b      	ldrh	r3, [r7, #16]
 8003aa6:	f083 0320 	eor.w	r3, r3, #32
 8003aaa:	823b      	strh	r3, [r7, #16]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	441a      	add	r2, r3
 8003aba:	8a3b      	ldrh	r3, [r7, #16]
 8003abc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ac0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ac4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3788      	adds	r7, #136	; 0x88
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003ada:	b480      	push	{r7}
 8003adc:	b087      	sub	sp, #28
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	60f8      	str	r0, [r7, #12]
 8003ae2:	607b      	str	r3, [r7, #4]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	817b      	strh	r3, [r7, #10]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003aec:	897b      	ldrh	r3, [r7, #10]
 8003aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00b      	beq.n	8003b10 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003af8:	897b      	ldrh	r3, [r7, #10]
 8003afa:	f003 0307 	and.w	r3, r3, #7
 8003afe:	1c5a      	adds	r2, r3, #1
 8003b00:	4613      	mov	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4413      	add	r3, r2
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	617b      	str	r3, [r7, #20]
 8003b0e:	e009      	b.n	8003b24 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b10:	897a      	ldrh	r2, [r7, #10]
 8003b12:	4613      	mov	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4413      	add	r3, r2
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	4413      	add	r3, r2
 8003b22:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003b24:	893b      	ldrh	r3, [r7, #8]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d107      	bne.n	8003b3a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	80da      	strh	r2, [r3, #6]
 8003b38:	e00b      	b.n	8003b52 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	0c1b      	lsrs	r3, r3, #16
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	371c      	adds	r7, #28
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bc80      	pop	{r7}
 8003b5c:	4770      	bx	lr
	...

08003b60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e272      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 8087 	beq.w	8003c8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b80:	4b92      	ldr	r3, [pc, #584]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f003 030c 	and.w	r3, r3, #12
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d00c      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b8c:	4b8f      	ldr	r3, [pc, #572]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f003 030c 	and.w	r3, r3, #12
 8003b94:	2b08      	cmp	r3, #8
 8003b96:	d112      	bne.n	8003bbe <HAL_RCC_OscConfig+0x5e>
 8003b98:	4b8c      	ldr	r3, [pc, #560]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba4:	d10b      	bne.n	8003bbe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba6:	4b89      	ldr	r3, [pc, #548]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d06c      	beq.n	8003c8c <HAL_RCC_OscConfig+0x12c>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d168      	bne.n	8003c8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e24c      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bc6:	d106      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x76>
 8003bc8:	4b80      	ldr	r3, [pc, #512]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a7f      	ldr	r2, [pc, #508]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd2:	6013      	str	r3, [r2, #0]
 8003bd4:	e02e      	b.n	8003c34 <HAL_RCC_OscConfig+0xd4>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10c      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x98>
 8003bde:	4b7b      	ldr	r3, [pc, #492]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a7a      	ldr	r2, [pc, #488]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003be4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003be8:	6013      	str	r3, [r2, #0]
 8003bea:	4b78      	ldr	r3, [pc, #480]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a77      	ldr	r2, [pc, #476]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003bf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	e01d      	b.n	8003c34 <HAL_RCC_OscConfig+0xd4>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c00:	d10c      	bne.n	8003c1c <HAL_RCC_OscConfig+0xbc>
 8003c02:	4b72      	ldr	r3, [pc, #456]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a71      	ldr	r2, [pc, #452]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	4b6f      	ldr	r3, [pc, #444]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a6e      	ldr	r2, [pc, #440]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	e00b      	b.n	8003c34 <HAL_RCC_OscConfig+0xd4>
 8003c1c:	4b6b      	ldr	r3, [pc, #428]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a6a      	ldr	r2, [pc, #424]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c26:	6013      	str	r3, [r2, #0]
 8003c28:	4b68      	ldr	r3, [pc, #416]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a67      	ldr	r2, [pc, #412]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d013      	beq.n	8003c64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c3c:	f7fd ffd0 	bl	8001be0 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c44:	f7fd ffcc 	bl	8001be0 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b64      	cmp	r3, #100	; 0x64
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e200      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c56:	4b5d      	ldr	r3, [pc, #372]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0f0      	beq.n	8003c44 <HAL_RCC_OscConfig+0xe4>
 8003c62:	e014      	b.n	8003c8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c64:	f7fd ffbc 	bl	8001be0 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c6c:	f7fd ffb8 	bl	8001be0 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b64      	cmp	r3, #100	; 0x64
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e1ec      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c7e:	4b53      	ldr	r3, [pc, #332]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1f0      	bne.n	8003c6c <HAL_RCC_OscConfig+0x10c>
 8003c8a:	e000      	b.n	8003c8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d063      	beq.n	8003d62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c9a:	4b4c      	ldr	r3, [pc, #304]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f003 030c 	and.w	r3, r3, #12
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00b      	beq.n	8003cbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ca6:	4b49      	ldr	r3, [pc, #292]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f003 030c 	and.w	r3, r3, #12
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d11c      	bne.n	8003cec <HAL_RCC_OscConfig+0x18c>
 8003cb2:	4b46      	ldr	r3, [pc, #280]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d116      	bne.n	8003cec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cbe:	4b43      	ldr	r3, [pc, #268]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d005      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x176>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d001      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e1c0      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd6:	4b3d      	ldr	r3, [pc, #244]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	4939      	ldr	r1, [pc, #228]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cea:	e03a      	b.n	8003d62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d020      	beq.n	8003d36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cf4:	4b36      	ldr	r3, [pc, #216]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cfa:	f7fd ff71 	bl	8001be0 <HAL_GetTick>
 8003cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d00:	e008      	b.n	8003d14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d02:	f7fd ff6d 	bl	8001be0 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e1a1      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d14:	4b2d      	ldr	r3, [pc, #180]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d0f0      	beq.n	8003d02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d20:	4b2a      	ldr	r3, [pc, #168]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	00db      	lsls	r3, r3, #3
 8003d2e:	4927      	ldr	r1, [pc, #156]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	600b      	str	r3, [r1, #0]
 8003d34:	e015      	b.n	8003d62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d36:	4b26      	ldr	r3, [pc, #152]	; (8003dd0 <HAL_RCC_OscConfig+0x270>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3c:	f7fd ff50 	bl	8001be0 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d44:	f7fd ff4c 	bl	8001be0 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e180      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d56:	4b1d      	ldr	r3, [pc, #116]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1f0      	bne.n	8003d44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0308 	and.w	r3, r3, #8
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d03a      	beq.n	8003de4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d019      	beq.n	8003daa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d76:	4b17      	ldr	r3, [pc, #92]	; (8003dd4 <HAL_RCC_OscConfig+0x274>)
 8003d78:	2201      	movs	r2, #1
 8003d7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d7c:	f7fd ff30 	bl	8001be0 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d84:	f7fd ff2c 	bl	8001be0 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e160      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d96:	4b0d      	ldr	r3, [pc, #52]	; (8003dcc <HAL_RCC_OscConfig+0x26c>)
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0f0      	beq.n	8003d84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003da2:	2001      	movs	r0, #1
 8003da4:	f000 faa6 	bl	80042f4 <RCC_Delay>
 8003da8:	e01c      	b.n	8003de4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003daa:	4b0a      	ldr	r3, [pc, #40]	; (8003dd4 <HAL_RCC_OscConfig+0x274>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003db0:	f7fd ff16 	bl	8001be0 <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003db6:	e00f      	b.n	8003dd8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003db8:	f7fd ff12 	bl	8001be0 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d908      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e146      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
 8003dca:	bf00      	nop
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	42420000 	.word	0x42420000
 8003dd4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dd8:	4b92      	ldr	r3, [pc, #584]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1e9      	bne.n	8003db8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 80a6 	beq.w	8003f3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003df2:	2300      	movs	r3, #0
 8003df4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003df6:	4b8b      	ldr	r3, [pc, #556]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10d      	bne.n	8003e1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e02:	4b88      	ldr	r3, [pc, #544]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	4a87      	ldr	r2, [pc, #540]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e0c:	61d3      	str	r3, [r2, #28]
 8003e0e:	4b85      	ldr	r3, [pc, #532]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e16:	60bb      	str	r3, [r7, #8]
 8003e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e1e:	4b82      	ldr	r3, [pc, #520]	; (8004028 <HAL_RCC_OscConfig+0x4c8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d118      	bne.n	8003e5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e2a:	4b7f      	ldr	r3, [pc, #508]	; (8004028 <HAL_RCC_OscConfig+0x4c8>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a7e      	ldr	r2, [pc, #504]	; (8004028 <HAL_RCC_OscConfig+0x4c8>)
 8003e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e36:	f7fd fed3 	bl	8001be0 <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e3c:	e008      	b.n	8003e50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e3e:	f7fd fecf 	bl	8001be0 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b64      	cmp	r3, #100	; 0x64
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e103      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e50:	4b75      	ldr	r3, [pc, #468]	; (8004028 <HAL_RCC_OscConfig+0x4c8>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d0f0      	beq.n	8003e3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d106      	bne.n	8003e72 <HAL_RCC_OscConfig+0x312>
 8003e64:	4b6f      	ldr	r3, [pc, #444]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	4a6e      	ldr	r2, [pc, #440]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003e6a:	f043 0301 	orr.w	r3, r3, #1
 8003e6e:	6213      	str	r3, [r2, #32]
 8003e70:	e02d      	b.n	8003ece <HAL_RCC_OscConfig+0x36e>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10c      	bne.n	8003e94 <HAL_RCC_OscConfig+0x334>
 8003e7a:	4b6a      	ldr	r3, [pc, #424]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	4a69      	ldr	r2, [pc, #420]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003e80:	f023 0301 	bic.w	r3, r3, #1
 8003e84:	6213      	str	r3, [r2, #32]
 8003e86:	4b67      	ldr	r3, [pc, #412]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	4a66      	ldr	r2, [pc, #408]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003e8c:	f023 0304 	bic.w	r3, r3, #4
 8003e90:	6213      	str	r3, [r2, #32]
 8003e92:	e01c      	b.n	8003ece <HAL_RCC_OscConfig+0x36e>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	2b05      	cmp	r3, #5
 8003e9a:	d10c      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x356>
 8003e9c:	4b61      	ldr	r3, [pc, #388]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	4a60      	ldr	r2, [pc, #384]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003ea2:	f043 0304 	orr.w	r3, r3, #4
 8003ea6:	6213      	str	r3, [r2, #32]
 8003ea8:	4b5e      	ldr	r3, [pc, #376]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	4a5d      	ldr	r2, [pc, #372]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003eae:	f043 0301 	orr.w	r3, r3, #1
 8003eb2:	6213      	str	r3, [r2, #32]
 8003eb4:	e00b      	b.n	8003ece <HAL_RCC_OscConfig+0x36e>
 8003eb6:	4b5b      	ldr	r3, [pc, #364]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	4a5a      	ldr	r2, [pc, #360]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003ebc:	f023 0301 	bic.w	r3, r3, #1
 8003ec0:	6213      	str	r3, [r2, #32]
 8003ec2:	4b58      	ldr	r3, [pc, #352]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	4a57      	ldr	r2, [pc, #348]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003ec8:	f023 0304 	bic.w	r3, r3, #4
 8003ecc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d015      	beq.n	8003f02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ed6:	f7fd fe83 	bl	8001be0 <HAL_GetTick>
 8003eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003edc:	e00a      	b.n	8003ef4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ede:	f7fd fe7f 	bl	8001be0 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e0b1      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef4:	4b4b      	ldr	r3, [pc, #300]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0ee      	beq.n	8003ede <HAL_RCC_OscConfig+0x37e>
 8003f00:	e014      	b.n	8003f2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f02:	f7fd fe6d 	bl	8001be0 <HAL_GetTick>
 8003f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f08:	e00a      	b.n	8003f20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f0a:	f7fd fe69 	bl	8001be0 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e09b      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f20:	4b40      	ldr	r3, [pc, #256]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1ee      	bne.n	8003f0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f2c:	7dfb      	ldrb	r3, [r7, #23]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d105      	bne.n	8003f3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f32:	4b3c      	ldr	r3, [pc, #240]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	4a3b      	ldr	r2, [pc, #236]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003f38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 8087 	beq.w	8004056 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f48:	4b36      	ldr	r3, [pc, #216]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f003 030c 	and.w	r3, r3, #12
 8003f50:	2b08      	cmp	r3, #8
 8003f52:	d061      	beq.n	8004018 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d146      	bne.n	8003fea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f5c:	4b33      	ldr	r3, [pc, #204]	; (800402c <HAL_RCC_OscConfig+0x4cc>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f62:	f7fd fe3d 	bl	8001be0 <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f68:	e008      	b.n	8003f7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f6a:	f7fd fe39 	bl	8001be0 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d901      	bls.n	8003f7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e06d      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f7c:	4b29      	ldr	r3, [pc, #164]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1f0      	bne.n	8003f6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f90:	d108      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f92:	4b24      	ldr	r3, [pc, #144]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	4921      	ldr	r1, [pc, #132]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fa4:	4b1f      	ldr	r3, [pc, #124]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a19      	ldr	r1, [r3, #32]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb4:	430b      	orrs	r3, r1
 8003fb6:	491b      	ldr	r1, [pc, #108]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fbc:	4b1b      	ldr	r3, [pc, #108]	; (800402c <HAL_RCC_OscConfig+0x4cc>)
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc2:	f7fd fe0d 	bl	8001be0 <HAL_GetTick>
 8003fc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fc8:	e008      	b.n	8003fdc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fca:	f7fd fe09 	bl	8001be0 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d901      	bls.n	8003fdc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e03d      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fdc:	4b11      	ldr	r3, [pc, #68]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d0f0      	beq.n	8003fca <HAL_RCC_OscConfig+0x46a>
 8003fe8:	e035      	b.n	8004056 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fea:	4b10      	ldr	r3, [pc, #64]	; (800402c <HAL_RCC_OscConfig+0x4cc>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff0:	f7fd fdf6 	bl	8001be0 <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff8:	f7fd fdf2 	bl	8001be0 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e026      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800400a:	4b06      	ldr	r3, [pc, #24]	; (8004024 <HAL_RCC_OscConfig+0x4c4>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1f0      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x498>
 8004016:	e01e      	b.n	8004056 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	69db      	ldr	r3, [r3, #28]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d107      	bne.n	8004030 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e019      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
 8004024:	40021000 	.word	0x40021000
 8004028:	40007000 	.word	0x40007000
 800402c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004030:	4b0b      	ldr	r3, [pc, #44]	; (8004060 <HAL_RCC_OscConfig+0x500>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	429a      	cmp	r2, r3
 8004042:	d106      	bne.n	8004052 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800404e:	429a      	cmp	r2, r3
 8004050:	d001      	beq.n	8004056 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e000      	b.n	8004058 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3718      	adds	r7, #24
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	40021000 	.word	0x40021000

08004064 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d101      	bne.n	8004078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e0d0      	b.n	800421a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004078:	4b6a      	ldr	r3, [pc, #424]	; (8004224 <HAL_RCC_ClockConfig+0x1c0>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	429a      	cmp	r2, r3
 8004084:	d910      	bls.n	80040a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004086:	4b67      	ldr	r3, [pc, #412]	; (8004224 <HAL_RCC_ClockConfig+0x1c0>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f023 0207 	bic.w	r2, r3, #7
 800408e:	4965      	ldr	r1, [pc, #404]	; (8004224 <HAL_RCC_ClockConfig+0x1c0>)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	4313      	orrs	r3, r2
 8004094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004096:	4b63      	ldr	r3, [pc, #396]	; (8004224 <HAL_RCC_ClockConfig+0x1c0>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d001      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e0b8      	b.n	800421a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d020      	beq.n	80040f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040c0:	4b59      	ldr	r3, [pc, #356]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	4a58      	ldr	r2, [pc, #352]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80040c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80040ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0308 	and.w	r3, r3, #8
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d005      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040d8:	4b53      	ldr	r3, [pc, #332]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	4a52      	ldr	r2, [pc, #328]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80040de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80040e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040e4:	4b50      	ldr	r3, [pc, #320]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	494d      	ldr	r1, [pc, #308]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d040      	beq.n	8004184 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d107      	bne.n	800411a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800410a:	4b47      	ldr	r3, [pc, #284]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d115      	bne.n	8004142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e07f      	b.n	800421a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b02      	cmp	r3, #2
 8004120:	d107      	bne.n	8004132 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004122:	4b41      	ldr	r3, [pc, #260]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d109      	bne.n	8004142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e073      	b.n	800421a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004132:	4b3d      	ldr	r3, [pc, #244]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e06b      	b.n	800421a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004142:	4b39      	ldr	r3, [pc, #228]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f023 0203 	bic.w	r2, r3, #3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	4936      	ldr	r1, [pc, #216]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 8004150:	4313      	orrs	r3, r2
 8004152:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004154:	f7fd fd44 	bl	8001be0 <HAL_GetTick>
 8004158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800415a:	e00a      	b.n	8004172 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800415c:	f7fd fd40 	bl	8001be0 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	f241 3288 	movw	r2, #5000	; 0x1388
 800416a:	4293      	cmp	r3, r2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e053      	b.n	800421a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004172:	4b2d      	ldr	r3, [pc, #180]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f003 020c 	and.w	r2, r3, #12
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	429a      	cmp	r2, r3
 8004182:	d1eb      	bne.n	800415c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004184:	4b27      	ldr	r3, [pc, #156]	; (8004224 <HAL_RCC_ClockConfig+0x1c0>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	429a      	cmp	r2, r3
 8004190:	d210      	bcs.n	80041b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004192:	4b24      	ldr	r3, [pc, #144]	; (8004224 <HAL_RCC_ClockConfig+0x1c0>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f023 0207 	bic.w	r2, r3, #7
 800419a:	4922      	ldr	r1, [pc, #136]	; (8004224 <HAL_RCC_ClockConfig+0x1c0>)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	4313      	orrs	r3, r2
 80041a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041a2:	4b20      	ldr	r3, [pc, #128]	; (8004224 <HAL_RCC_ClockConfig+0x1c0>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0307 	and.w	r3, r3, #7
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d001      	beq.n	80041b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e032      	b.n	800421a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d008      	beq.n	80041d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041c0:	4b19      	ldr	r3, [pc, #100]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	4916      	ldr	r1, [pc, #88]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0308 	and.w	r3, r3, #8
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d009      	beq.n	80041f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041de:	4b12      	ldr	r3, [pc, #72]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	490e      	ldr	r1, [pc, #56]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041f2:	f000 f821 	bl	8004238 <HAL_RCC_GetSysClockFreq>
 80041f6:	4602      	mov	r2, r0
 80041f8:	4b0b      	ldr	r3, [pc, #44]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	091b      	lsrs	r3, r3, #4
 80041fe:	f003 030f 	and.w	r3, r3, #15
 8004202:	490a      	ldr	r1, [pc, #40]	; (800422c <HAL_RCC_ClockConfig+0x1c8>)
 8004204:	5ccb      	ldrb	r3, [r1, r3]
 8004206:	fa22 f303 	lsr.w	r3, r2, r3
 800420a:	4a09      	ldr	r2, [pc, #36]	; (8004230 <HAL_RCC_ClockConfig+0x1cc>)
 800420c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800420e:	4b09      	ldr	r3, [pc, #36]	; (8004234 <HAL_RCC_ClockConfig+0x1d0>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4618      	mov	r0, r3
 8004214:	f7fd fca2 	bl	8001b5c <HAL_InitTick>

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	40022000 	.word	0x40022000
 8004228:	40021000 	.word	0x40021000
 800422c:	08009d7c 	.word	0x08009d7c
 8004230:	20000000 	.word	0x20000000
 8004234:	20000014 	.word	0x20000014

08004238 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004238:	b490      	push	{r4, r7}
 800423a:	b08a      	sub	sp, #40	; 0x28
 800423c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800423e:	4b29      	ldr	r3, [pc, #164]	; (80042e4 <HAL_RCC_GetSysClockFreq+0xac>)
 8004240:	1d3c      	adds	r4, r7, #4
 8004242:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004244:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004248:	f240 2301 	movw	r3, #513	; 0x201
 800424c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800424e:	2300      	movs	r3, #0
 8004250:	61fb      	str	r3, [r7, #28]
 8004252:	2300      	movs	r3, #0
 8004254:	61bb      	str	r3, [r7, #24]
 8004256:	2300      	movs	r3, #0
 8004258:	627b      	str	r3, [r7, #36]	; 0x24
 800425a:	2300      	movs	r3, #0
 800425c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800425e:	2300      	movs	r3, #0
 8004260:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004262:	4b21      	ldr	r3, [pc, #132]	; (80042e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	f003 030c 	and.w	r3, r3, #12
 800426e:	2b04      	cmp	r3, #4
 8004270:	d002      	beq.n	8004278 <HAL_RCC_GetSysClockFreq+0x40>
 8004272:	2b08      	cmp	r3, #8
 8004274:	d003      	beq.n	800427e <HAL_RCC_GetSysClockFreq+0x46>
 8004276:	e02b      	b.n	80042d0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004278:	4b1c      	ldr	r3, [pc, #112]	; (80042ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800427a:	623b      	str	r3, [r7, #32]
      break;
 800427c:	e02b      	b.n	80042d6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	0c9b      	lsrs	r3, r3, #18
 8004282:	f003 030f 	and.w	r3, r3, #15
 8004286:	3328      	adds	r3, #40	; 0x28
 8004288:	443b      	add	r3, r7
 800428a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800428e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d012      	beq.n	80042c0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800429a:	4b13      	ldr	r3, [pc, #76]	; (80042e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	0c5b      	lsrs	r3, r3, #17
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	3328      	adds	r3, #40	; 0x28
 80042a6:	443b      	add	r3, r7
 80042a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80042ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	4a0e      	ldr	r2, [pc, #56]	; (80042ec <HAL_RCC_GetSysClockFreq+0xb4>)
 80042b2:	fb03 f202 	mul.w	r2, r3, r2
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042bc:	627b      	str	r3, [r7, #36]	; 0x24
 80042be:	e004      	b.n	80042ca <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	4a0b      	ldr	r2, [pc, #44]	; (80042f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042c4:	fb02 f303 	mul.w	r3, r2, r3
 80042c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	623b      	str	r3, [r7, #32]
      break;
 80042ce:	e002      	b.n	80042d6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80042d0:	4b06      	ldr	r3, [pc, #24]	; (80042ec <HAL_RCC_GetSysClockFreq+0xb4>)
 80042d2:	623b      	str	r3, [r7, #32]
      break;
 80042d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042d6:	6a3b      	ldr	r3, [r7, #32]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3728      	adds	r7, #40	; 0x28
 80042dc:	46bd      	mov	sp, r7
 80042de:	bc90      	pop	{r4, r7}
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	08009d24 	.word	0x08009d24
 80042e8:	40021000 	.word	0x40021000
 80042ec:	007a1200 	.word	0x007a1200
 80042f0:	003d0900 	.word	0x003d0900

080042f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80042fc:	4b0a      	ldr	r3, [pc, #40]	; (8004328 <RCC_Delay+0x34>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a0a      	ldr	r2, [pc, #40]	; (800432c <RCC_Delay+0x38>)
 8004302:	fba2 2303 	umull	r2, r3, r2, r3
 8004306:	0a5b      	lsrs	r3, r3, #9
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	fb02 f303 	mul.w	r3, r2, r3
 800430e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004310:	bf00      	nop
  }
  while (Delay --);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	1e5a      	subs	r2, r3, #1
 8004316:	60fa      	str	r2, [r7, #12]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1f9      	bne.n	8004310 <RCC_Delay+0x1c>
}
 800431c:	bf00      	nop
 800431e:	bf00      	nop
 8004320:	3714      	adds	r7, #20
 8004322:	46bd      	mov	sp, r7
 8004324:	bc80      	pop	{r7}
 8004326:	4770      	bx	lr
 8004328:	20000000 	.word	0x20000000
 800432c:	10624dd3 	.word	0x10624dd3

08004330 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004338:	2300      	movs	r3, #0
 800433a:	613b      	str	r3, [r7, #16]
 800433c:	2300      	movs	r3, #0
 800433e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b00      	cmp	r3, #0
 800434a:	d07d      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800434c:	2300      	movs	r3, #0
 800434e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004350:	4b4f      	ldr	r3, [pc, #316]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004352:	69db      	ldr	r3, [r3, #28]
 8004354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10d      	bne.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800435c:	4b4c      	ldr	r3, [pc, #304]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800435e:	69db      	ldr	r3, [r3, #28]
 8004360:	4a4b      	ldr	r2, [pc, #300]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004366:	61d3      	str	r3, [r2, #28]
 8004368:	4b49      	ldr	r3, [pc, #292]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800436a:	69db      	ldr	r3, [r3, #28]
 800436c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004370:	60bb      	str	r3, [r7, #8]
 8004372:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004374:	2301      	movs	r3, #1
 8004376:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004378:	4b46      	ldr	r3, [pc, #280]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004380:	2b00      	cmp	r3, #0
 8004382:	d118      	bne.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004384:	4b43      	ldr	r3, [pc, #268]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a42      	ldr	r2, [pc, #264]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800438a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800438e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004390:	f7fd fc26 	bl	8001be0 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004396:	e008      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004398:	f7fd fc22 	bl	8001be0 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b64      	cmp	r3, #100	; 0x64
 80043a4:	d901      	bls.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e06d      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043aa:	4b3a      	ldr	r3, [pc, #232]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d0f0      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043b6:	4b36      	ldr	r3, [pc, #216]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043be:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d02e      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d027      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043d4:	4b2e      	ldr	r3, [pc, #184]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043dc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043de:	4b2e      	ldr	r3, [pc, #184]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80043e0:	2201      	movs	r2, #1
 80043e2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043e4:	4b2c      	ldr	r3, [pc, #176]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80043ea:	4a29      	ldr	r2, [pc, #164]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d014      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043fa:	f7fd fbf1 	bl	8001be0 <HAL_GetTick>
 80043fe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004400:	e00a      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004402:	f7fd fbed 	bl	8001be0 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004410:	4293      	cmp	r3, r2
 8004412:	d901      	bls.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e036      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004418:	4b1d      	ldr	r3, [pc, #116]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800441a:	6a1b      	ldr	r3, [r3, #32]
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0ee      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004424:	4b1a      	ldr	r3, [pc, #104]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	4917      	ldr	r1, [pc, #92]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004432:	4313      	orrs	r3, r2
 8004434:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004436:	7dfb      	ldrb	r3, [r7, #23]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d105      	bne.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800443c:	4b14      	ldr	r3, [pc, #80]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	4a13      	ldr	r2, [pc, #76]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004442:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004446:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	2b00      	cmp	r3, #0
 8004452:	d008      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004454:	4b0e      	ldr	r3, [pc, #56]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	490b      	ldr	r1, [pc, #44]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004462:	4313      	orrs	r3, r2
 8004464:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0310 	and.w	r3, r3, #16
 800446e:	2b00      	cmp	r3, #0
 8004470:	d008      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004472:	4b07      	ldr	r3, [pc, #28]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	4904      	ldr	r1, [pc, #16]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004480:	4313      	orrs	r3, r2
 8004482:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3718      	adds	r7, #24
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	40021000 	.word	0x40021000
 8004494:	40007000 	.word	0x40007000
 8004498:	42420440 	.word	0x42420440

0800449c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e041      	b.n	8004532 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d106      	bne.n	80044c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7fc fe8c 	bl	80011e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2202      	movs	r2, #2
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3304      	adds	r3, #4
 80044d8:	4619      	mov	r1, r3
 80044da:	4610      	mov	r0, r2
 80044dc:	f000 fbea 	bl	8004cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3708      	adds	r7, #8
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
	...

0800453c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d109      	bne.n	8004560 <HAL_TIM_PWM_Start+0x24>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b01      	cmp	r3, #1
 8004556:	bf14      	ite	ne
 8004558:	2301      	movne	r3, #1
 800455a:	2300      	moveq	r3, #0
 800455c:	b2db      	uxtb	r3, r3
 800455e:	e022      	b.n	80045a6 <HAL_TIM_PWM_Start+0x6a>
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	2b04      	cmp	r3, #4
 8004564:	d109      	bne.n	800457a <HAL_TIM_PWM_Start+0x3e>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b01      	cmp	r3, #1
 8004570:	bf14      	ite	ne
 8004572:	2301      	movne	r3, #1
 8004574:	2300      	moveq	r3, #0
 8004576:	b2db      	uxtb	r3, r3
 8004578:	e015      	b.n	80045a6 <HAL_TIM_PWM_Start+0x6a>
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	2b08      	cmp	r3, #8
 800457e:	d109      	bne.n	8004594 <HAL_TIM_PWM_Start+0x58>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b01      	cmp	r3, #1
 800458a:	bf14      	ite	ne
 800458c:	2301      	movne	r3, #1
 800458e:	2300      	moveq	r3, #0
 8004590:	b2db      	uxtb	r3, r3
 8004592:	e008      	b.n	80045a6 <HAL_TIM_PWM_Start+0x6a>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b01      	cmp	r3, #1
 800459e:	bf14      	ite	ne
 80045a0:	2301      	movne	r3, #1
 80045a2:	2300      	moveq	r3, #0
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e05e      	b.n	800466c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d104      	bne.n	80045be <HAL_TIM_PWM_Start+0x82>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2202      	movs	r2, #2
 80045b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045bc:	e013      	b.n	80045e6 <HAL_TIM_PWM_Start+0xaa>
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2b04      	cmp	r3, #4
 80045c2:	d104      	bne.n	80045ce <HAL_TIM_PWM_Start+0x92>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2202      	movs	r2, #2
 80045c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045cc:	e00b      	b.n	80045e6 <HAL_TIM_PWM_Start+0xaa>
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	2b08      	cmp	r3, #8
 80045d2:	d104      	bne.n	80045de <HAL_TIM_PWM_Start+0xa2>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2202      	movs	r2, #2
 80045d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045dc:	e003      	b.n	80045e6 <HAL_TIM_PWM_Start+0xaa>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2202      	movs	r2, #2
 80045e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2201      	movs	r2, #1
 80045ec:	6839      	ldr	r1, [r7, #0]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 fd4a 	bl	8005088 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a1e      	ldr	r2, [pc, #120]	; (8004674 <HAL_TIM_PWM_Start+0x138>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d107      	bne.n	800460e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800460c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a18      	ldr	r2, [pc, #96]	; (8004674 <HAL_TIM_PWM_Start+0x138>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d00e      	beq.n	8004636 <HAL_TIM_PWM_Start+0xfa>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004620:	d009      	beq.n	8004636 <HAL_TIM_PWM_Start+0xfa>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a14      	ldr	r2, [pc, #80]	; (8004678 <HAL_TIM_PWM_Start+0x13c>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d004      	beq.n	8004636 <HAL_TIM_PWM_Start+0xfa>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a12      	ldr	r2, [pc, #72]	; (800467c <HAL_TIM_PWM_Start+0x140>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d111      	bne.n	800465a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f003 0307 	and.w	r3, r3, #7
 8004640:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2b06      	cmp	r3, #6
 8004646:	d010      	beq.n	800466a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f042 0201 	orr.w	r2, r2, #1
 8004656:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004658:	e007      	b.n	800466a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f042 0201 	orr.w	r2, r2, #1
 8004668:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	40012c00 	.word	0x40012c00
 8004678:	40000400 	.word	0x40000400
 800467c:	40000800 	.word	0x40000800

08004680 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d101      	bne.n	8004694 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e093      	b.n	80047bc <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b00      	cmp	r3, #0
 800469e:	d106      	bne.n	80046ae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f7fc fd2f 	bl	800110c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2202      	movs	r2, #2
 80046b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	6812      	ldr	r2, [r2, #0]
 80046c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046c4:	f023 0307 	bic.w	r3, r3, #7
 80046c8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	3304      	adds	r3, #4
 80046d2:	4619      	mov	r1, r3
 80046d4:	4610      	mov	r0, r2
 80046d6:	f000 faed 	bl	8004cb4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004702:	f023 0303 	bic.w	r3, r3, #3
 8004706:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	021b      	lsls	r3, r3, #8
 8004712:	4313      	orrs	r3, r2
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	4313      	orrs	r3, r2
 8004718:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004720:	f023 030c 	bic.w	r3, r3, #12
 8004724:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800472c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004730:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	69db      	ldr	r3, [r3, #28]
 800473a:	021b      	lsls	r3, r3, #8
 800473c:	4313      	orrs	r3, r2
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	4313      	orrs	r3, r2
 8004742:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	011a      	lsls	r2, r3, #4
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	031b      	lsls	r3, r3, #12
 8004750:	4313      	orrs	r3, r2
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	4313      	orrs	r3, r2
 8004756:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800475e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	011b      	lsls	r3, r3, #4
 800476a:	4313      	orrs	r3, r2
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	4313      	orrs	r3, r2
 8004770:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3718      	adds	r7, #24
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047d4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047dc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047e4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80047ec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d110      	bne.n	8004816 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80047f4:	7bfb      	ldrb	r3, [r7, #15]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d102      	bne.n	8004800 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80047fa:	7b7b      	ldrb	r3, [r7, #13]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d001      	beq.n	8004804 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e069      	b.n	80048d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2202      	movs	r2, #2
 8004810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004814:	e031      	b.n	800487a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	2b04      	cmp	r3, #4
 800481a:	d110      	bne.n	800483e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800481c:	7bbb      	ldrb	r3, [r7, #14]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d102      	bne.n	8004828 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004822:	7b3b      	ldrb	r3, [r7, #12]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d001      	beq.n	800482c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e055      	b.n	80048d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2202      	movs	r2, #2
 8004830:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2202      	movs	r2, #2
 8004838:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800483c:	e01d      	b.n	800487a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800483e:	7bfb      	ldrb	r3, [r7, #15]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d108      	bne.n	8004856 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004844:	7bbb      	ldrb	r3, [r7, #14]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d105      	bne.n	8004856 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800484a:	7b7b      	ldrb	r3, [r7, #13]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d102      	bne.n	8004856 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004850:	7b3b      	ldrb	r3, [r7, #12]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d001      	beq.n	800485a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e03e      	b.n	80048d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2202      	movs	r2, #2
 800485e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2202      	movs	r2, #2
 8004866:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2202      	movs	r2, #2
 800486e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2202      	movs	r2, #2
 8004876:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d003      	beq.n	8004888 <HAL_TIM_Encoder_Start+0xc4>
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	2b04      	cmp	r3, #4
 8004884:	d008      	beq.n	8004898 <HAL_TIM_Encoder_Start+0xd4>
 8004886:	e00f      	b.n	80048a8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2201      	movs	r2, #1
 800488e:	2100      	movs	r1, #0
 8004890:	4618      	mov	r0, r3
 8004892:	f000 fbf9 	bl	8005088 <TIM_CCxChannelCmd>
      break;
 8004896:	e016      	b.n	80048c6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2201      	movs	r2, #1
 800489e:	2104      	movs	r1, #4
 80048a0:	4618      	mov	r0, r3
 80048a2:	f000 fbf1 	bl	8005088 <TIM_CCxChannelCmd>
      break;
 80048a6:	e00e      	b.n	80048c6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2201      	movs	r2, #1
 80048ae:	2100      	movs	r1, #0
 80048b0:	4618      	mov	r0, r3
 80048b2:	f000 fbe9 	bl	8005088 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2201      	movs	r2, #1
 80048bc:	2104      	movs	r1, #4
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 fbe2 	bl	8005088 <TIM_CCxChannelCmd>
      break;
 80048c4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f042 0201 	orr.w	r2, r2, #1
 80048d4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d122      	bne.n	800493c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b02      	cmp	r3, #2
 8004902:	d11b      	bne.n	800493c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f06f 0202 	mvn.w	r2, #2
 800490c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	f003 0303 	and.w	r3, r3, #3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f9ab 	bl	8004c7e <HAL_TIM_IC_CaptureCallback>
 8004928:	e005      	b.n	8004936 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f99e 	bl	8004c6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 f9ad 	bl	8004c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	f003 0304 	and.w	r3, r3, #4
 8004946:	2b04      	cmp	r3, #4
 8004948:	d122      	bne.n	8004990 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	2b04      	cmp	r3, #4
 8004956:	d11b      	bne.n	8004990 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f06f 0204 	mvn.w	r2, #4
 8004960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2202      	movs	r2, #2
 8004966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f981 	bl	8004c7e <HAL_TIM_IC_CaptureCallback>
 800497c:	e005      	b.n	800498a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f974 	bl	8004c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f983 	bl	8004c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f003 0308 	and.w	r3, r3, #8
 800499a:	2b08      	cmp	r3, #8
 800499c:	d122      	bne.n	80049e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f003 0308 	and.w	r3, r3, #8
 80049a8:	2b08      	cmp	r3, #8
 80049aa:	d11b      	bne.n	80049e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f06f 0208 	mvn.w	r2, #8
 80049b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2204      	movs	r2, #4
 80049ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	f003 0303 	and.w	r3, r3, #3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f957 	bl	8004c7e <HAL_TIM_IC_CaptureCallback>
 80049d0:	e005      	b.n	80049de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f94a 	bl	8004c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f959 	bl	8004c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	f003 0310 	and.w	r3, r3, #16
 80049ee:	2b10      	cmp	r3, #16
 80049f0:	d122      	bne.n	8004a38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f003 0310 	and.w	r3, r3, #16
 80049fc:	2b10      	cmp	r3, #16
 80049fe:	d11b      	bne.n	8004a38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f06f 0210 	mvn.w	r2, #16
 8004a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2208      	movs	r2, #8
 8004a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f92d 	bl	8004c7e <HAL_TIM_IC_CaptureCallback>
 8004a24:	e005      	b.n	8004a32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f920 	bl	8004c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f92f 	bl	8004c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d10e      	bne.n	8004a64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f003 0301 	and.w	r3, r3, #1
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d107      	bne.n	8004a64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f06f 0201 	mvn.w	r2, #1
 8004a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7fc ff76 	bl	8001950 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a6e:	2b80      	cmp	r3, #128	; 0x80
 8004a70:	d10e      	bne.n	8004a90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a7c:	2b80      	cmp	r3, #128	; 0x80
 8004a7e:	d107      	bne.n	8004a90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 fb87 	bl	800519e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9a:	2b40      	cmp	r3, #64	; 0x40
 8004a9c:	d10e      	bne.n	8004abc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa8:	2b40      	cmp	r3, #64	; 0x40
 8004aaa:	d107      	bne.n	8004abc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f8f3 	bl	8004ca2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	f003 0320 	and.w	r3, r3, #32
 8004ac6:	2b20      	cmp	r3, #32
 8004ac8:	d10e      	bne.n	8004ae8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	f003 0320 	and.w	r3, r3, #32
 8004ad4:	2b20      	cmp	r3, #32
 8004ad6:	d107      	bne.n	8004ae8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f06f 0220 	mvn.w	r2, #32
 8004ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 fb52 	bl	800518c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ae8:	bf00      	nop
 8004aea:	3708      	adds	r7, #8
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d101      	bne.n	8004b0a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004b06:	2302      	movs	r3, #2
 8004b08:	e0ac      	b.n	8004c64 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2b0c      	cmp	r3, #12
 8004b16:	f200 809f 	bhi.w	8004c58 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004b1a:	a201      	add	r2, pc, #4	; (adr r2, 8004b20 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b20:	08004b55 	.word	0x08004b55
 8004b24:	08004c59 	.word	0x08004c59
 8004b28:	08004c59 	.word	0x08004c59
 8004b2c:	08004c59 	.word	0x08004c59
 8004b30:	08004b95 	.word	0x08004b95
 8004b34:	08004c59 	.word	0x08004c59
 8004b38:	08004c59 	.word	0x08004c59
 8004b3c:	08004c59 	.word	0x08004c59
 8004b40:	08004bd7 	.word	0x08004bd7
 8004b44:	08004c59 	.word	0x08004c59
 8004b48:	08004c59 	.word	0x08004c59
 8004b4c:	08004c59 	.word	0x08004c59
 8004b50:	08004c17 	.word	0x08004c17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68b9      	ldr	r1, [r7, #8]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 f90c 	bl	8004d78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	699a      	ldr	r2, [r3, #24]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f042 0208 	orr.w	r2, r2, #8
 8004b6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	699a      	ldr	r2, [r3, #24]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 0204 	bic.w	r2, r2, #4
 8004b7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	6999      	ldr	r1, [r3, #24]
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	691a      	ldr	r2, [r3, #16]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	619a      	str	r2, [r3, #24]
      break;
 8004b92:	e062      	b.n	8004c5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68b9      	ldr	r1, [r7, #8]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f000 f952 	bl	8004e44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	699a      	ldr	r2, [r3, #24]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	699a      	ldr	r2, [r3, #24]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6999      	ldr	r1, [r3, #24]
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	021a      	lsls	r2, r3, #8
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	619a      	str	r2, [r3, #24]
      break;
 8004bd4:	e041      	b.n	8004c5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68b9      	ldr	r1, [r7, #8]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f000 f99b 	bl	8004f18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	69da      	ldr	r2, [r3, #28]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f042 0208 	orr.w	r2, r2, #8
 8004bf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	69da      	ldr	r2, [r3, #28]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 0204 	bic.w	r2, r2, #4
 8004c00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	69d9      	ldr	r1, [r3, #28]
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	691a      	ldr	r2, [r3, #16]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	430a      	orrs	r2, r1
 8004c12:	61da      	str	r2, [r3, #28]
      break;
 8004c14:	e021      	b.n	8004c5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68b9      	ldr	r1, [r7, #8]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f000 f9e5 	bl	8004fec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	69da      	ldr	r2, [r3, #28]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	69da      	ldr	r2, [r3, #28]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	69d9      	ldr	r1, [r3, #28]
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	021a      	lsls	r2, r3, #8
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	61da      	str	r2, [r3, #28]
      break;
 8004c56:	e000      	b.n	8004c5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004c58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bc80      	pop	{r7}
 8004c7c:	4770      	bx	lr

08004c7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b083      	sub	sp, #12
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c86:	bf00      	nop
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bc80      	pop	{r7}
 8004c8e:	4770      	bx	lr

08004c90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bc80      	pop	{r7}
 8004ca0:	4770      	bx	lr

08004ca2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b083      	sub	sp, #12
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004caa:	bf00      	nop
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bc80      	pop	{r7}
 8004cb2:	4770      	bx	lr

08004cb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a29      	ldr	r2, [pc, #164]	; (8004d6c <TIM_Base_SetConfig+0xb8>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d00b      	beq.n	8004ce4 <TIM_Base_SetConfig+0x30>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd2:	d007      	beq.n	8004ce4 <TIM_Base_SetConfig+0x30>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a26      	ldr	r2, [pc, #152]	; (8004d70 <TIM_Base_SetConfig+0xbc>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d003      	beq.n	8004ce4 <TIM_Base_SetConfig+0x30>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a25      	ldr	r2, [pc, #148]	; (8004d74 <TIM_Base_SetConfig+0xc0>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d108      	bne.n	8004cf6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a1c      	ldr	r2, [pc, #112]	; (8004d6c <TIM_Base_SetConfig+0xb8>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d00b      	beq.n	8004d16 <TIM_Base_SetConfig+0x62>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d04:	d007      	beq.n	8004d16 <TIM_Base_SetConfig+0x62>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a19      	ldr	r2, [pc, #100]	; (8004d70 <TIM_Base_SetConfig+0xbc>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d003      	beq.n	8004d16 <TIM_Base_SetConfig+0x62>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a18      	ldr	r2, [pc, #96]	; (8004d74 <TIM_Base_SetConfig+0xc0>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d108      	bne.n	8004d28 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	689a      	ldr	r2, [r3, #8]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a07      	ldr	r2, [pc, #28]	; (8004d6c <TIM_Base_SetConfig+0xb8>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d103      	bne.n	8004d5c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	691a      	ldr	r2, [r3, #16]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	615a      	str	r2, [r3, #20]
}
 8004d62:	bf00      	nop
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bc80      	pop	{r7}
 8004d6a:	4770      	bx	lr
 8004d6c:	40012c00 	.word	0x40012c00
 8004d70:	40000400 	.word	0x40000400
 8004d74:	40000800 	.word	0x40000800

08004d78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b087      	sub	sp, #28
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	f023 0201 	bic.w	r2, r3, #1
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f023 0303 	bic.w	r3, r3, #3
 8004dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f023 0302 	bic.w	r3, r3, #2
 8004dc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a1c      	ldr	r2, [pc, #112]	; (8004e40 <TIM_OC1_SetConfig+0xc8>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d10c      	bne.n	8004dee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f023 0308 	bic.w	r3, r3, #8
 8004dda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f023 0304 	bic.w	r3, r3, #4
 8004dec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a13      	ldr	r2, [pc, #76]	; (8004e40 <TIM_OC1_SetConfig+0xc8>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d111      	bne.n	8004e1a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	621a      	str	r2, [r3, #32]
}
 8004e34:	bf00      	nop
 8004e36:	371c      	adds	r7, #28
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bc80      	pop	{r7}
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	40012c00 	.word	0x40012c00

08004e44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b087      	sub	sp, #28
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	f023 0210 	bic.w	r2, r3, #16
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	021b      	lsls	r3, r3, #8
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f023 0320 	bic.w	r3, r3, #32
 8004e8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	011b      	lsls	r3, r3, #4
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a1d      	ldr	r2, [pc, #116]	; (8004f14 <TIM_OC2_SetConfig+0xd0>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d10d      	bne.n	8004ec0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004eaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	011b      	lsls	r3, r3, #4
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ebe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a14      	ldr	r2, [pc, #80]	; (8004f14 <TIM_OC2_SetConfig+0xd0>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d113      	bne.n	8004ef0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ece:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ed6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	699b      	ldr	r3, [r3, #24]
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	621a      	str	r2, [r3, #32]
}
 8004f0a:	bf00      	nop
 8004f0c:	371c      	adds	r7, #28
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bc80      	pop	{r7}
 8004f12:	4770      	bx	lr
 8004f14:	40012c00 	.word	0x40012c00

08004f18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f023 0303 	bic.w	r3, r3, #3
 8004f4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	021b      	lsls	r3, r3, #8
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a1d      	ldr	r2, [pc, #116]	; (8004fe8 <TIM_OC3_SetConfig+0xd0>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d10d      	bne.n	8004f92 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	021b      	lsls	r3, r3, #8
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a14      	ldr	r2, [pc, #80]	; (8004fe8 <TIM_OC3_SetConfig+0xd0>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d113      	bne.n	8004fc2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	011b      	lsls	r3, r3, #4
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	011b      	lsls	r3, r3, #4
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	621a      	str	r2, [r3, #32]
}
 8004fdc:	bf00      	nop
 8004fde:	371c      	adds	r7, #28
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bc80      	pop	{r7}
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	40012c00 	.word	0x40012c00

08004fec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800501a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005022:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	021b      	lsls	r3, r3, #8
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	4313      	orrs	r3, r2
 800502e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005036:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	031b      	lsls	r3, r3, #12
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	4313      	orrs	r3, r2
 8005042:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a0f      	ldr	r2, [pc, #60]	; (8005084 <TIM_OC4_SetConfig+0x98>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d109      	bne.n	8005060 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005052:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	019b      	lsls	r3, r3, #6
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	4313      	orrs	r3, r2
 800505e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	621a      	str	r2, [r3, #32]
}
 800507a:	bf00      	nop
 800507c:	371c      	adds	r7, #28
 800507e:	46bd      	mov	sp, r7
 8005080:	bc80      	pop	{r7}
 8005082:	4770      	bx	lr
 8005084:	40012c00 	.word	0x40012c00

08005088 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	f003 031f 	and.w	r3, r3, #31
 800509a:	2201      	movs	r2, #1
 800509c:	fa02 f303 	lsl.w	r3, r2, r3
 80050a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6a1a      	ldr	r2, [r3, #32]
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	43db      	mvns	r3, r3
 80050aa:	401a      	ands	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6a1a      	ldr	r2, [r3, #32]
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	f003 031f 	and.w	r3, r3, #31
 80050ba:	6879      	ldr	r1, [r7, #4]
 80050bc:	fa01 f303 	lsl.w	r3, r1, r3
 80050c0:	431a      	orrs	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	621a      	str	r2, [r3, #32]
}
 80050c6:	bf00      	nop
 80050c8:	371c      	adds	r7, #28
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bc80      	pop	{r7}
 80050ce:	4770      	bx	lr

080050d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d101      	bne.n	80050e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050e4:	2302      	movs	r3, #2
 80050e6:	e046      	b.n	8005176 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800510e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	4313      	orrs	r3, r2
 8005118:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a16      	ldr	r2, [pc, #88]	; (8005180 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d00e      	beq.n	800514a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005134:	d009      	beq.n	800514a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a12      	ldr	r2, [pc, #72]	; (8005184 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d004      	beq.n	800514a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a10      	ldr	r2, [pc, #64]	; (8005188 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d10c      	bne.n	8005164 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005150:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	68ba      	ldr	r2, [r7, #8]
 8005158:	4313      	orrs	r3, r2
 800515a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68ba      	ldr	r2, [r7, #8]
 8005162:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	bc80      	pop	{r7}
 800517e:	4770      	bx	lr
 8005180:	40012c00 	.word	0x40012c00
 8005184:	40000400 	.word	0x40000400
 8005188:	40000800 	.word	0x40000800

0800518c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	bc80      	pop	{r7}
 800519c:	4770      	bx	lr

0800519e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051a6:	bf00      	nop
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bc80      	pop	{r7}
 80051ae:	4770      	bx	lr

080051b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80051b0:	b084      	sub	sp, #16
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	f107 0014 	add.w	r0, r7, #20
 80051be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bc80      	pop	{r7}
 80051cc:	b004      	add	sp, #16
 80051ce:	4770      	bx	lr

080051d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80051e0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80051e4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bc80      	pop	{r7}
 80051fa:	4770      	bx	lr

080051fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005204:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005208:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005210:	b29a      	uxth	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	b29b      	uxth	r3, r3
 8005216:	43db      	mvns	r3, r3
 8005218:	b29b      	uxth	r3, r3
 800521a:	4013      	ands	r3, r2
 800521c:	b29a      	uxth	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3714      	adds	r7, #20
 800522a:	46bd      	mov	sp, r7
 800522c:	bc80      	pop	{r7}
 800522e:	4770      	bx	lr

08005230 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	460b      	mov	r3, r1
 800523a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	bc80      	pop	{r7}
 8005246:	4770      	bx	lr

08005248 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005248:	b084      	sub	sp, #16
 800524a:	b480      	push	{r7}
 800524c:	b083      	sub	sp, #12
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
 8005252:	f107 0014 	add.w	r0, r7, #20
 8005256:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	bc80      	pop	{r7}
 8005284:	b004      	add	sp, #16
 8005286:	4770      	bx	lr

08005288 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005288:	b480      	push	{r7}
 800528a:	b09b      	sub	sp, #108	; 0x6c
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005292:	2300      	movs	r3, #0
 8005294:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	881b      	ldrh	r3, [r3, #0]
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80052aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ae:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	78db      	ldrb	r3, [r3, #3]
 80052b6:	2b03      	cmp	r3, #3
 80052b8:	d81f      	bhi.n	80052fa <USB_ActivateEndpoint+0x72>
 80052ba:	a201      	add	r2, pc, #4	; (adr r2, 80052c0 <USB_ActivateEndpoint+0x38>)
 80052bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c0:	080052d1 	.word	0x080052d1
 80052c4:	080052ed 	.word	0x080052ed
 80052c8:	08005303 	.word	0x08005303
 80052cc:	080052df 	.word	0x080052df
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80052d0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80052d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052d8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80052dc:	e012      	b.n	8005304 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80052de:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80052e2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80052e6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80052ea:	e00b      	b.n	8005304 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80052ec:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80052f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80052f4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80052f8:	e004      	b.n	8005304 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005300:	e000      	b.n	8005304 <USB_ActivateEndpoint+0x7c>
      break;
 8005302:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	441a      	add	r2, r3
 800530e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005312:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005316:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800531a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800531e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005322:	b29b      	uxth	r3, r3
 8005324:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	4413      	add	r3, r2
 8005330:	881b      	ldrh	r3, [r3, #0]
 8005332:	b29b      	uxth	r3, r3
 8005334:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800533c:	b29a      	uxth	r2, r3
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	b29b      	uxth	r3, r3
 8005344:	4313      	orrs	r3, r2
 8005346:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	441a      	add	r2, r3
 8005354:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005358:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800535c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005360:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005368:	b29b      	uxth	r3, r3
 800536a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	7b1b      	ldrb	r3, [r3, #12]
 8005370:	2b00      	cmp	r3, #0
 8005372:	f040 8149 	bne.w	8005608 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	785b      	ldrb	r3, [r3, #1]
 800537a:	2b00      	cmp	r3, #0
 800537c:	f000 8084 	beq.w	8005488 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	617b      	str	r3, [r7, #20]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800538a:	b29b      	uxth	r3, r3
 800538c:	461a      	mov	r2, r3
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	4413      	add	r3, r2
 8005392:	617b      	str	r3, [r7, #20]
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	011a      	lsls	r2, r3, #4
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	4413      	add	r3, r2
 800539e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053a2:	613b      	str	r3, [r7, #16]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	88db      	ldrh	r3, [r3, #6]
 80053a8:	085b      	lsrs	r3, r3, #1
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	005b      	lsls	r3, r3, #1
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	4413      	add	r3, r2
 80053be:	881b      	ldrh	r3, [r3, #0]
 80053c0:	81fb      	strh	r3, [r7, #14]
 80053c2:	89fb      	ldrh	r3, [r7, #14]
 80053c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d01b      	beq.n	8005404 <USB_ActivateEndpoint+0x17c>
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4413      	add	r3, r2
 80053d6:	881b      	ldrh	r3, [r3, #0]
 80053d8:	b29b      	uxth	r3, r3
 80053da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053e2:	81bb      	strh	r3, [r7, #12]
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	441a      	add	r2, r3
 80053ee:	89bb      	ldrh	r3, [r7, #12]
 80053f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005400:	b29b      	uxth	r3, r3
 8005402:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	78db      	ldrb	r3, [r3, #3]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d020      	beq.n	800544e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	4413      	add	r3, r2
 8005416:	881b      	ldrh	r3, [r3, #0]
 8005418:	b29b      	uxth	r3, r3
 800541a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800541e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005422:	813b      	strh	r3, [r7, #8]
 8005424:	893b      	ldrh	r3, [r7, #8]
 8005426:	f083 0320 	eor.w	r3, r3, #32
 800542a:	813b      	strh	r3, [r7, #8]
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	441a      	add	r2, r3
 8005436:	893b      	ldrh	r3, [r7, #8]
 8005438:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800543c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005440:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005448:	b29b      	uxth	r3, r3
 800544a:	8013      	strh	r3, [r2, #0]
 800544c:	e27f      	b.n	800594e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	4413      	add	r3, r2
 8005458:	881b      	ldrh	r3, [r3, #0]
 800545a:	b29b      	uxth	r3, r3
 800545c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005460:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005464:	817b      	strh	r3, [r7, #10]
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	441a      	add	r2, r3
 8005470:	897b      	ldrh	r3, [r7, #10]
 8005472:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005476:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800547a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800547e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005482:	b29b      	uxth	r3, r3
 8005484:	8013      	strh	r3, [r2, #0]
 8005486:	e262      	b.n	800594e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005492:	b29b      	uxth	r3, r3
 8005494:	461a      	mov	r2, r3
 8005496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005498:	4413      	add	r3, r2
 800549a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	011a      	lsls	r2, r3, #4
 80054a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80054aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	88db      	ldrh	r3, [r3, #6]
 80054b0:	085b      	lsrs	r3, r3, #1
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ba:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	627b      	str	r3, [r7, #36]	; 0x24
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	461a      	mov	r2, r3
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	4413      	add	r3, r2
 80054ce:	627b      	str	r3, [r7, #36]	; 0x24
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	011a      	lsls	r2, r3, #4
 80054d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d8:	4413      	add	r3, r2
 80054da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054de:	623b      	str	r3, [r7, #32]
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d112      	bne.n	800550e <USB_ActivateEndpoint+0x286>
 80054e8:	6a3b      	ldr	r3, [r7, #32]
 80054ea:	881b      	ldrh	r3, [r3, #0]
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	6a3b      	ldr	r3, [r7, #32]
 80054f6:	801a      	strh	r2, [r3, #0]
 80054f8:	6a3b      	ldr	r3, [r7, #32]
 80054fa:	881b      	ldrh	r3, [r3, #0]
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005502:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005506:	b29a      	uxth	r2, r3
 8005508:	6a3b      	ldr	r3, [r7, #32]
 800550a:	801a      	strh	r2, [r3, #0]
 800550c:	e02f      	b.n	800556e <USB_ActivateEndpoint+0x2e6>
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	2b3e      	cmp	r3, #62	; 0x3e
 8005514:	d813      	bhi.n	800553e <USB_ActivateEndpoint+0x2b6>
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	085b      	lsrs	r3, r3, #1
 800551c:	663b      	str	r3, [r7, #96]	; 0x60
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b00      	cmp	r3, #0
 8005528:	d002      	beq.n	8005530 <USB_ActivateEndpoint+0x2a8>
 800552a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800552c:	3301      	adds	r3, #1
 800552e:	663b      	str	r3, [r7, #96]	; 0x60
 8005530:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005532:	b29b      	uxth	r3, r3
 8005534:	029b      	lsls	r3, r3, #10
 8005536:	b29a      	uxth	r2, r3
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	801a      	strh	r2, [r3, #0]
 800553c:	e017      	b.n	800556e <USB_ActivateEndpoint+0x2e6>
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	095b      	lsrs	r3, r3, #5
 8005544:	663b      	str	r3, [r7, #96]	; 0x60
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	f003 031f 	and.w	r3, r3, #31
 800554e:	2b00      	cmp	r3, #0
 8005550:	d102      	bne.n	8005558 <USB_ActivateEndpoint+0x2d0>
 8005552:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005554:	3b01      	subs	r3, #1
 8005556:	663b      	str	r3, [r7, #96]	; 0x60
 8005558:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800555a:	b29b      	uxth	r3, r3
 800555c:	029b      	lsls	r3, r3, #10
 800555e:	b29b      	uxth	r3, r3
 8005560:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005564:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005568:	b29a      	uxth	r2, r3
 800556a:	6a3b      	ldr	r3, [r7, #32]
 800556c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	4413      	add	r3, r2
 8005578:	881b      	ldrh	r3, [r3, #0]
 800557a:	83fb      	strh	r3, [r7, #30]
 800557c:	8bfb      	ldrh	r3, [r7, #30]
 800557e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d01b      	beq.n	80055be <USB_ActivateEndpoint+0x336>
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	4413      	add	r3, r2
 8005590:	881b      	ldrh	r3, [r3, #0]
 8005592:	b29b      	uxth	r3, r3
 8005594:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005598:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800559c:	83bb      	strh	r3, [r7, #28]
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	441a      	add	r2, r3
 80055a8:	8bbb      	ldrh	r3, [r7, #28]
 80055aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4413      	add	r3, r2
 80055c8:	881b      	ldrh	r3, [r3, #0]
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d4:	837b      	strh	r3, [r7, #26]
 80055d6:	8b7b      	ldrh	r3, [r7, #26]
 80055d8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80055dc:	837b      	strh	r3, [r7, #26]
 80055de:	8b7b      	ldrh	r3, [r7, #26]
 80055e0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80055e4:	837b      	strh	r3, [r7, #26]
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	441a      	add	r2, r3
 80055f0:	8b7b      	ldrh	r3, [r7, #26]
 80055f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005602:	b29b      	uxth	r3, r3
 8005604:	8013      	strh	r3, [r2, #0]
 8005606:	e1a2      	b.n	800594e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4413      	add	r3, r2
 8005612:	881b      	ldrh	r3, [r3, #0]
 8005614:	b29b      	uxth	r3, r3
 8005616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800561a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800561e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	441a      	add	r2, r3
 800562c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005630:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005634:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005638:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800563c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005640:	b29b      	uxth	r3, r3
 8005642:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	65bb      	str	r3, [r7, #88]	; 0x58
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800564e:	b29b      	uxth	r3, r3
 8005650:	461a      	mov	r2, r3
 8005652:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005654:	4413      	add	r3, r2
 8005656:	65bb      	str	r3, [r7, #88]	; 0x58
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	011a      	lsls	r2, r3, #4
 800565e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005660:	4413      	add	r3, r2
 8005662:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005666:	657b      	str	r3, [r7, #84]	; 0x54
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	891b      	ldrh	r3, [r3, #8]
 800566c:	085b      	lsrs	r3, r3, #1
 800566e:	b29b      	uxth	r3, r3
 8005670:	005b      	lsls	r3, r3, #1
 8005672:	b29a      	uxth	r2, r3
 8005674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005676:	801a      	strh	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	653b      	str	r3, [r7, #80]	; 0x50
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005682:	b29b      	uxth	r3, r3
 8005684:	461a      	mov	r2, r3
 8005686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005688:	4413      	add	r3, r2
 800568a:	653b      	str	r3, [r7, #80]	; 0x50
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	011a      	lsls	r2, r3, #4
 8005692:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005694:	4413      	add	r3, r2
 8005696:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800569a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	895b      	ldrh	r3, [r3, #10]
 80056a0:	085b      	lsrs	r3, r3, #1
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	005b      	lsls	r3, r3, #1
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056aa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	785b      	ldrb	r3, [r3, #1]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f040 8091 	bne.w	80057d8 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4413      	add	r3, r2
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80056c4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80056c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d01b      	beq.n	8005706 <USB_ActivateEndpoint+0x47e>
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4413      	add	r3, r2
 80056d8:	881b      	ldrh	r3, [r3, #0]
 80056da:	b29b      	uxth	r3, r3
 80056dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	441a      	add	r2, r3
 80056f0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80056f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005702:	b29b      	uxth	r3, r3
 8005704:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4413      	add	r3, r2
 8005710:	881b      	ldrh	r3, [r3, #0]
 8005712:	873b      	strh	r3, [r7, #56]	; 0x38
 8005714:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571a:	2b00      	cmp	r3, #0
 800571c:	d01b      	beq.n	8005756 <USB_ActivateEndpoint+0x4ce>
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	4413      	add	r3, r2
 8005728:	881b      	ldrh	r3, [r3, #0]
 800572a:	b29b      	uxth	r3, r3
 800572c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005734:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	441a      	add	r2, r3
 8005740:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005742:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005746:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800574a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800574e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005752:	b29b      	uxth	r3, r3
 8005754:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4413      	add	r3, r2
 8005760:	881b      	ldrh	r3, [r3, #0]
 8005762:	b29b      	uxth	r3, r3
 8005764:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800576c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800576e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005770:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005774:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005776:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005778:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800577c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	441a      	add	r2, r3
 8005788:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800578a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800578e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005792:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800579a:	b29b      	uxth	r3, r3
 800579c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	4413      	add	r3, r2
 80057a8:	881b      	ldrh	r3, [r3, #0]
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057b4:	867b      	strh	r3, [r7, #50]	; 0x32
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	441a      	add	r2, r3
 80057c0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80057c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	8013      	strh	r3, [r2, #0]
 80057d6:	e0ba      	b.n	800594e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	4413      	add	r3, r2
 80057e2:	881b      	ldrh	r3, [r3, #0]
 80057e4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80057e8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80057ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d01d      	beq.n	8005830 <USB_ActivateEndpoint+0x5a8>
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	881b      	ldrh	r3, [r3, #0]
 8005800:	b29b      	uxth	r3, r3
 8005802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800580a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	441a      	add	r2, r3
 8005818:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800581c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005820:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005824:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800582c:	b29b      	uxth	r3, r3
 800582e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	881b      	ldrh	r3, [r3, #0]
 800583c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005840:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005848:	2b00      	cmp	r3, #0
 800584a:	d01d      	beq.n	8005888 <USB_ActivateEndpoint+0x600>
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	881b      	ldrh	r3, [r3, #0]
 8005858:	b29b      	uxth	r3, r3
 800585a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800585e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005862:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	441a      	add	r2, r3
 8005870:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005874:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005878:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800587c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005880:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005884:	b29b      	uxth	r3, r3
 8005886:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	78db      	ldrb	r3, [r3, #3]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d024      	beq.n	80058da <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4413      	add	r3, r2
 800589a:	881b      	ldrh	r3, [r3, #0]
 800589c:	b29b      	uxth	r3, r3
 800589e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80058aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80058ae:	f083 0320 	eor.w	r3, r3, #32
 80058b2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	441a      	add	r2, r3
 80058c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80058c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	8013      	strh	r3, [r2, #0]
 80058d8:	e01d      	b.n	8005916 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	4413      	add	r3, r2
 80058e4:	881b      	ldrh	r3, [r3, #0]
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058f0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	441a      	add	r2, r3
 80058fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005902:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005906:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800590a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800590e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005912:	b29b      	uxth	r3, r3
 8005914:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	4413      	add	r3, r2
 8005920:	881b      	ldrh	r3, [r3, #0]
 8005922:	b29b      	uxth	r3, r3
 8005924:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800592c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	441a      	add	r2, r3
 8005938:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800593a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800593e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800594a:	b29b      	uxth	r3, r3
 800594c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800594e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005952:	4618      	mov	r0, r3
 8005954:	376c      	adds	r7, #108	; 0x6c
 8005956:	46bd      	mov	sp, r7
 8005958:	bc80      	pop	{r7}
 800595a:	4770      	bx	lr

0800595c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800595c:	b480      	push	{r7}
 800595e:	b08d      	sub	sp, #52	; 0x34
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	7b1b      	ldrb	r3, [r3, #12]
 800596a:	2b00      	cmp	r3, #0
 800596c:	f040 808e 	bne.w	8005a8c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	785b      	ldrb	r3, [r3, #1]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d044      	beq.n	8005a02 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	4413      	add	r3, r2
 8005982:	881b      	ldrh	r3, [r3, #0]
 8005984:	81bb      	strh	r3, [r7, #12]
 8005986:	89bb      	ldrh	r3, [r7, #12]
 8005988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598c:	2b00      	cmp	r3, #0
 800598e:	d01b      	beq.n	80059c8 <USB_DeactivateEndpoint+0x6c>
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4413      	add	r3, r2
 800599a:	881b      	ldrh	r3, [r3, #0]
 800599c:	b29b      	uxth	r3, r3
 800599e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059a6:	817b      	strh	r3, [r7, #10]
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	441a      	add	r2, r3
 80059b2:	897b      	ldrh	r3, [r7, #10]
 80059b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	4413      	add	r3, r2
 80059d2:	881b      	ldrh	r3, [r3, #0]
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059de:	813b      	strh	r3, [r7, #8]
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	441a      	add	r2, r3
 80059ea:	893b      	ldrh	r3, [r7, #8]
 80059ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	8013      	strh	r3, [r2, #0]
 8005a00:	e192      	b.n	8005d28 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4413      	add	r3, r2
 8005a0c:	881b      	ldrh	r3, [r3, #0]
 8005a0e:	827b      	strh	r3, [r7, #18]
 8005a10:	8a7b      	ldrh	r3, [r7, #18]
 8005a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d01b      	beq.n	8005a52 <USB_DeactivateEndpoint+0xf6>
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	4413      	add	r3, r2
 8005a24:	881b      	ldrh	r3, [r3, #0]
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a30:	823b      	strh	r3, [r7, #16]
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	441a      	add	r2, r3
 8005a3c:	8a3b      	ldrh	r3, [r7, #16]
 8005a3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4413      	add	r3, r2
 8005a5c:	881b      	ldrh	r3, [r3, #0]
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a68:	81fb      	strh	r3, [r7, #14]
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	441a      	add	r2, r3
 8005a74:	89fb      	ldrh	r3, [r7, #14]
 8005a76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	8013      	strh	r3, [r2, #0]
 8005a8a:	e14d      	b.n	8005d28 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	785b      	ldrb	r3, [r3, #1]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	f040 80a5 	bne.w	8005be0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	4413      	add	r3, r2
 8005aa0:	881b      	ldrh	r3, [r3, #0]
 8005aa2:	843b      	strh	r3, [r7, #32]
 8005aa4:	8c3b      	ldrh	r3, [r7, #32]
 8005aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d01b      	beq.n	8005ae6 <USB_DeactivateEndpoint+0x18a>
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	4413      	add	r3, r2
 8005ab8:	881b      	ldrh	r3, [r3, #0]
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ac4:	83fb      	strh	r3, [r7, #30]
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	441a      	add	r2, r3
 8005ad0:	8bfb      	ldrh	r3, [r7, #30]
 8005ad2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ad6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ada:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	4413      	add	r3, r2
 8005af0:	881b      	ldrh	r3, [r3, #0]
 8005af2:	83bb      	strh	r3, [r7, #28]
 8005af4:	8bbb      	ldrh	r3, [r7, #28]
 8005af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d01b      	beq.n	8005b36 <USB_DeactivateEndpoint+0x1da>
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	4413      	add	r3, r2
 8005b08:	881b      	ldrh	r3, [r3, #0]
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b14:	837b      	strh	r3, [r7, #26]
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	441a      	add	r2, r3
 8005b20:	8b7b      	ldrh	r3, [r7, #26]
 8005b22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b2e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4413      	add	r3, r2
 8005b40:	881b      	ldrh	r3, [r3, #0]
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b4c:	833b      	strh	r3, [r7, #24]
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	441a      	add	r2, r3
 8005b58:	8b3b      	ldrh	r3, [r7, #24]
 8005b5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	4413      	add	r3, r2
 8005b78:	881b      	ldrh	r3, [r3, #0]
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b84:	82fb      	strh	r3, [r7, #22]
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	441a      	add	r2, r3
 8005b90:	8afb      	ldrh	r3, [r7, #22]
 8005b92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4413      	add	r3, r2
 8005bb0:	881b      	ldrh	r3, [r3, #0]
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bbc:	82bb      	strh	r3, [r7, #20]
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	441a      	add	r2, r3
 8005bc8:	8abb      	ldrh	r3, [r7, #20]
 8005bca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	8013      	strh	r3, [r2, #0]
 8005bde:	e0a3      	b.n	8005d28 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	4413      	add	r3, r2
 8005bea:	881b      	ldrh	r3, [r3, #0]
 8005bec:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005bee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005bf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d01b      	beq.n	8005c30 <USB_DeactivateEndpoint+0x2d4>
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	881b      	ldrh	r3, [r3, #0]
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c0e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	441a      	add	r2, r3
 8005c1a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005c1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4413      	add	r3, r2
 8005c3a:	881b      	ldrh	r3, [r3, #0]
 8005c3c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005c3e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d01b      	beq.n	8005c80 <USB_DeactivateEndpoint+0x324>
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	881b      	ldrh	r3, [r3, #0]
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c5e:	853b      	strh	r3, [r7, #40]	; 0x28
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	441a      	add	r2, r3
 8005c6a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005c6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	4413      	add	r3, r2
 8005c8a:	881b      	ldrh	r3, [r3, #0]
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c96:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	441a      	add	r2, r3
 8005ca2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ca4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ca8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	4413      	add	r3, r2
 8005cc2:	881b      	ldrh	r3, [r3, #0]
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cce:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	441a      	add	r2, r3
 8005cda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005cdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ce0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ce4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4413      	add	r3, r2
 8005cfa:	881b      	ldrh	r3, [r3, #0]
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d06:	847b      	strh	r3, [r7, #34]	; 0x22
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	441a      	add	r2, r3
 8005d12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005d14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3734      	adds	r7, #52	; 0x34
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bc80      	pop	{r7}
 8005d32:	4770      	bx	lr

08005d34 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b0cc      	sub	sp, #304	; 0x130
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d42:	6018      	str	r0, [r3, #0]
 8005d44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d4c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	785b      	ldrb	r3, [r3, #1]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	f041 817d 	bne.w	800705a <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005d60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	699a      	ldr	r2, [r3, #24]
 8005d6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d908      	bls.n	8005d8e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005d7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005d8c:	e007      	b.n	8005d9e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005d8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005d9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005da2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	7b1b      	ldrb	r3, [r3, #12]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d152      	bne.n	8005e54 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005dae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005db2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	6959      	ldr	r1, [r3, #20]
 8005dba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	88da      	ldrh	r2, [r3, #6]
 8005dc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005dd0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005dd4:	6800      	ldr	r0, [r0, #0]
 8005dd6:	f001 ff23 	bl	8007c20 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005dda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dde:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005de2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005de6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005dea:	6812      	ldr	r2, [r2, #0]
 8005dec:	601a      	str	r2, [r3, #0]
 8005dee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005df2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	4619      	mov	r1, r3
 8005e00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e04:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005e08:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005e0c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8005e10:	6812      	ldr	r2, [r2, #0]
 8005e12:	440a      	add	r2, r1
 8005e14:	601a      	str	r2, [r3, #0]
 8005e16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	011a      	lsls	r2, r3, #4
 8005e24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e28:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005e34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e38:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005e3c:	601a      	str	r2, [r3, #0]
 8005e3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e48:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	801a      	strh	r2, [r3, #0]
 8005e50:	f001 b8b5 	b.w	8006fbe <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005e54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	78db      	ldrb	r3, [r3, #3]
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	f040 84c6 	bne.w	80067f2 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005e66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	6a1a      	ldr	r2, [r3, #32]
 8005e72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	f240 8443 	bls.w	800670a <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005e84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4413      	add	r3, r2
 8005e9e:	881b      	ldrh	r3, [r3, #0]
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eaa:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005eae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ebc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	441a      	add	r2, r3
 8005ec8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005ecc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ed0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ed4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005ee0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ee4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	6a1a      	ldr	r2, [r3, #32]
 8005eec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ef0:	1ad2      	subs	r2, r2, r3
 8005ef2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ef6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005efe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	4413      	add	r3, r2
 8005f18:	881b      	ldrh	r3, [r3, #0]
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f000 823e 	beq.w	80063a2 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f2a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005f2e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005f32:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005f36:	6812      	ldr	r2, [r2, #0]
 8005f38:	601a      	str	r2, [r3, #0]
 8005f3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	785b      	ldrb	r3, [r3, #1]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f040 809a 	bne.w	8006080 <USB_EPStartXfer+0x34c>
 8005f4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f54:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005f58:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005f5c:	6812      	ldr	r2, [r2, #0]
 8005f5e:	601a      	str	r2, [r3, #0]
 8005f60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	4619      	mov	r1, r3
 8005f72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f7a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005f7e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8005f82:	6812      	ldr	r2, [r2, #0]
 8005f84:	440a      	add	r2, r1
 8005f86:	601a      	str	r2, [r3, #0]
 8005f88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	011a      	lsls	r2, r3, #4
 8005f96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005fa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005faa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005fae:	601a      	str	r2, [r3, #0]
 8005fb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d122      	bne.n	8005ffe <USB_EPStartXfer+0x2ca>
 8005fb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fbc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fd0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	801a      	strh	r2, [r3, #0]
 8005fd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fdc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ff4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	801a      	strh	r2, [r3, #0]
 8005ffc:	e079      	b.n	80060f2 <USB_EPStartXfer+0x3be>
 8005ffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006002:	2b3e      	cmp	r3, #62	; 0x3e
 8006004:	d81b      	bhi.n	800603e <USB_EPStartXfer+0x30a>
 8006006:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800600a:	085b      	lsrs	r3, r3, #1
 800600c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006010:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006014:	f003 0301 	and.w	r3, r3, #1
 8006018:	2b00      	cmp	r3, #0
 800601a:	d004      	beq.n	8006026 <USB_EPStartXfer+0x2f2>
 800601c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006020:	3301      	adds	r3, #1
 8006022:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006026:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800602a:	b29b      	uxth	r3, r3
 800602c:	029b      	lsls	r3, r3, #10
 800602e:	b29a      	uxth	r2, r3
 8006030:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006034:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	801a      	strh	r2, [r3, #0]
 800603c:	e059      	b.n	80060f2 <USB_EPStartXfer+0x3be>
 800603e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006042:	095b      	lsrs	r3, r3, #5
 8006044:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006048:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800604c:	f003 031f 	and.w	r3, r3, #31
 8006050:	2b00      	cmp	r3, #0
 8006052:	d104      	bne.n	800605e <USB_EPStartXfer+0x32a>
 8006054:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006058:	3b01      	subs	r3, #1
 800605a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800605e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006062:	b29b      	uxth	r3, r3
 8006064:	029b      	lsls	r3, r3, #10
 8006066:	b29b      	uxth	r3, r3
 8006068:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800606c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006070:	b29a      	uxth	r2, r3
 8006072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006076:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	801a      	strh	r2, [r3, #0]
 800607e:	e038      	b.n	80060f2 <USB_EPStartXfer+0x3be>
 8006080:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006084:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	785b      	ldrb	r3, [r3, #1]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d130      	bne.n	80060f2 <USB_EPStartXfer+0x3be>
 8006090:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006094:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800609e:	b29b      	uxth	r3, r3
 80060a0:	4619      	mov	r1, r3
 80060a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060a6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80060aa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80060ae:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80060b2:	6812      	ldr	r2, [r2, #0]
 80060b4:	440a      	add	r2, r1
 80060b6:	601a      	str	r2, [r3, #0]
 80060b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	011a      	lsls	r2, r3, #4
 80060c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ca:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4413      	add	r3, r2
 80060d2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80060d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060de:	601a      	str	r2, [r3, #0]
 80060e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060e4:	b29a      	uxth	r2, r3
 80060e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80060f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	895b      	ldrh	r3, [r3, #10]
 80060fe:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006102:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006106:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6959      	ldr	r1, [r3, #20]
 800610e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006112:	b29b      	uxth	r3, r3
 8006114:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006118:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800611c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006120:	6800      	ldr	r0, [r0, #0]
 8006122:	f001 fd7d 	bl	8007c20 <USB_WritePMA>
            ep->xfer_buff += len;
 8006126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800612a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	695a      	ldr	r2, [r3, #20]
 8006132:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006136:	441a      	add	r2, r3
 8006138:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800613c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006144:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006148:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	6a1a      	ldr	r2, [r3, #32]
 8006150:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006154:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	429a      	cmp	r2, r3
 800615e:	d90f      	bls.n	8006180 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8006160:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006164:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	6a1a      	ldr	r2, [r3, #32]
 800616c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006170:	1ad2      	subs	r2, r2, r3
 8006172:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006176:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	621a      	str	r2, [r3, #32]
 800617e:	e00e      	b.n	800619e <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8006180:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006184:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	6a1b      	ldr	r3, [r3, #32]
 800618c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006190:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006194:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2200      	movs	r2, #0
 800619c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800619e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	785b      	ldrb	r3, [r3, #1]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	f040 809a 	bne.w	80062e4 <USB_EPStartXfer+0x5b0>
 80061b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061b4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80061b8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80061bc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80061c0:	6812      	ldr	r2, [r2, #0]
 80061c2:	601a      	str	r2, [r3, #0]
 80061c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	4619      	mov	r1, r3
 80061d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061da:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80061de:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80061e2:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80061e6:	6812      	ldr	r2, [r2, #0]
 80061e8:	440a      	add	r2, r1
 80061ea:	601a      	str	r2, [r3, #0]
 80061ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	011a      	lsls	r2, r3, #4
 80061fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061fe:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4413      	add	r3, r2
 8006206:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800620a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800620e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006212:	601a      	str	r2, [r3, #0]
 8006214:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006218:	2b00      	cmp	r3, #0
 800621a:	d122      	bne.n	8006262 <USB_EPStartXfer+0x52e>
 800621c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006220:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	881b      	ldrh	r3, [r3, #0]
 8006228:	b29b      	uxth	r3, r3
 800622a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800622e:	b29a      	uxth	r2, r3
 8006230:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006234:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	801a      	strh	r2, [r3, #0]
 800623c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006240:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	881b      	ldrh	r3, [r3, #0]
 8006248:	b29b      	uxth	r3, r3
 800624a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800624e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006252:	b29a      	uxth	r2, r3
 8006254:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006258:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	801a      	strh	r2, [r3, #0]
 8006260:	e083      	b.n	800636a <USB_EPStartXfer+0x636>
 8006262:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006266:	2b3e      	cmp	r3, #62	; 0x3e
 8006268:	d81b      	bhi.n	80062a2 <USB_EPStartXfer+0x56e>
 800626a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800626e:	085b      	lsrs	r3, r3, #1
 8006270:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006274:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006278:	f003 0301 	and.w	r3, r3, #1
 800627c:	2b00      	cmp	r3, #0
 800627e:	d004      	beq.n	800628a <USB_EPStartXfer+0x556>
 8006280:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006284:	3301      	adds	r3, #1
 8006286:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800628a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800628e:	b29b      	uxth	r3, r3
 8006290:	029b      	lsls	r3, r3, #10
 8006292:	b29a      	uxth	r2, r3
 8006294:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006298:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	801a      	strh	r2, [r3, #0]
 80062a0:	e063      	b.n	800636a <USB_EPStartXfer+0x636>
 80062a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062a6:	095b      	lsrs	r3, r3, #5
 80062a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80062ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062b0:	f003 031f 	and.w	r3, r3, #31
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d104      	bne.n	80062c2 <USB_EPStartXfer+0x58e>
 80062b8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80062bc:	3b01      	subs	r3, #1
 80062be:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80062c2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	029b      	lsls	r3, r3, #10
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062da:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	801a      	strh	r2, [r3, #0]
 80062e2:	e042      	b.n	800636a <USB_EPStartXfer+0x636>
 80062e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	785b      	ldrb	r3, [r3, #1]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d13a      	bne.n	800636a <USB_EPStartXfer+0x636>
 80062f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062f8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80062fc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006300:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006304:	6812      	ldr	r2, [r2, #0]
 8006306:	601a      	str	r2, [r3, #0]
 8006308:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800630c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006316:	b29b      	uxth	r3, r3
 8006318:	4619      	mov	r1, r3
 800631a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800631e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006322:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006326:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800632a:	6812      	ldr	r2, [r2, #0]
 800632c:	440a      	add	r2, r1
 800632e:	601a      	str	r2, [r3, #0]
 8006330:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006334:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	011a      	lsls	r2, r3, #4
 800633e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006342:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4413      	add	r3, r2
 800634a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800634e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006352:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006356:	601a      	str	r2, [r3, #0]
 8006358:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800635c:	b29a      	uxth	r2, r3
 800635e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006362:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800636a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800636e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	891b      	ldrh	r3, [r3, #8]
 8006376:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800637a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800637e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6959      	ldr	r1, [r3, #20]
 8006386:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800638a:	b29b      	uxth	r3, r3
 800638c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006390:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006394:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006398:	6800      	ldr	r0, [r0, #0]
 800639a:	f001 fc41 	bl	8007c20 <USB_WritePMA>
 800639e:	f000 be0e 	b.w	8006fbe <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80063a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	785b      	ldrb	r3, [r3, #1]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d16d      	bne.n	800648e <USB_EPStartXfer+0x75a>
 80063b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80063be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	461a      	mov	r2, r3
 80063d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063d2:	4413      	add	r3, r2
 80063d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80063d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	011a      	lsls	r2, r3, #4
 80063e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063e6:	4413      	add	r3, r2
 80063e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063ec:	647b      	str	r3, [r7, #68]	; 0x44
 80063ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d112      	bne.n	800641c <USB_EPStartXfer+0x6e8>
 80063f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063f8:	881b      	ldrh	r3, [r3, #0]
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006400:	b29a      	uxth	r2, r3
 8006402:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006404:	801a      	strh	r2, [r3, #0]
 8006406:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006408:	881b      	ldrh	r3, [r3, #0]
 800640a:	b29b      	uxth	r3, r3
 800640c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006410:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006414:	b29a      	uxth	r2, r3
 8006416:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006418:	801a      	strh	r2, [r3, #0]
 800641a:	e063      	b.n	80064e4 <USB_EPStartXfer+0x7b0>
 800641c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006420:	2b3e      	cmp	r3, #62	; 0x3e
 8006422:	d817      	bhi.n	8006454 <USB_EPStartXfer+0x720>
 8006424:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006428:	085b      	lsrs	r3, r3, #1
 800642a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800642e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	2b00      	cmp	r3, #0
 8006438:	d004      	beq.n	8006444 <USB_EPStartXfer+0x710>
 800643a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800643e:	3301      	adds	r3, #1
 8006440:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006444:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006448:	b29b      	uxth	r3, r3
 800644a:	029b      	lsls	r3, r3, #10
 800644c:	b29a      	uxth	r2, r3
 800644e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006450:	801a      	strh	r2, [r3, #0]
 8006452:	e047      	b.n	80064e4 <USB_EPStartXfer+0x7b0>
 8006454:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006458:	095b      	lsrs	r3, r3, #5
 800645a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800645e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006462:	f003 031f 	and.w	r3, r3, #31
 8006466:	2b00      	cmp	r3, #0
 8006468:	d104      	bne.n	8006474 <USB_EPStartXfer+0x740>
 800646a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800646e:	3b01      	subs	r3, #1
 8006470:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006474:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006478:	b29b      	uxth	r3, r3
 800647a:	029b      	lsls	r3, r3, #10
 800647c:	b29b      	uxth	r3, r3
 800647e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006482:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006486:	b29a      	uxth	r2, r3
 8006488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800648a:	801a      	strh	r2, [r3, #0]
 800648c:	e02a      	b.n	80064e4 <USB_EPStartXfer+0x7b0>
 800648e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006492:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	785b      	ldrb	r3, [r3, #1]
 800649a:	2b01      	cmp	r3, #1
 800649c:	d122      	bne.n	80064e4 <USB_EPStartXfer+0x7b0>
 800649e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	653b      	str	r3, [r7, #80]	; 0x50
 80064aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	461a      	mov	r2, r3
 80064bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064be:	4413      	add	r3, r2
 80064c0:	653b      	str	r3, [r7, #80]	; 0x50
 80064c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	011a      	lsls	r2, r3, #4
 80064d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064d2:	4413      	add	r3, r2
 80064d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064de:	b29a      	uxth	r2, r3
 80064e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064e2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80064e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	891b      	ldrh	r3, [r3, #8]
 80064f0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	6959      	ldr	r1, [r3, #20]
 8006500:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006504:	b29b      	uxth	r3, r3
 8006506:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800650a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800650e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006512:	6800      	ldr	r0, [r0, #0]
 8006514:	f001 fb84 	bl	8007c20 <USB_WritePMA>
            ep->xfer_buff += len;
 8006518:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800651c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	695a      	ldr	r2, [r3, #20]
 8006524:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006528:	441a      	add	r2, r3
 800652a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800652e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006536:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800653a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6a1a      	ldr	r2, [r3, #32]
 8006542:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006546:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	429a      	cmp	r2, r3
 8006550:	d90f      	bls.n	8006572 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8006552:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006556:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	6a1a      	ldr	r2, [r3, #32]
 800655e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006562:	1ad2      	subs	r2, r2, r3
 8006564:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006568:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	621a      	str	r2, [r3, #32]
 8006570:	e00e      	b.n	8006590 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8006572:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006576:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	6a1b      	ldr	r3, [r3, #32]
 800657e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006582:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006586:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2200      	movs	r2, #0
 800658e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006590:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006594:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	643b      	str	r3, [r7, #64]	; 0x40
 800659c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	785b      	ldrb	r3, [r3, #1]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d16d      	bne.n	8006688 <USB_EPStartXfer+0x954>
 80065ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80065b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	461a      	mov	r2, r3
 80065ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065cc:	4413      	add	r3, r2
 80065ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80065d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	011a      	lsls	r2, r3, #4
 80065de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e0:	4413      	add	r3, r2
 80065e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065e6:	637b      	str	r3, [r7, #52]	; 0x34
 80065e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d112      	bne.n	8006616 <USB_EPStartXfer+0x8e2>
 80065f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065f2:	881b      	ldrh	r3, [r3, #0]
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065fe:	801a      	strh	r2, [r3, #0]
 8006600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006602:	881b      	ldrh	r3, [r3, #0]
 8006604:	b29b      	uxth	r3, r3
 8006606:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800660a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800660e:	b29a      	uxth	r2, r3
 8006610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006612:	801a      	strh	r2, [r3, #0]
 8006614:	e05d      	b.n	80066d2 <USB_EPStartXfer+0x99e>
 8006616:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800661a:	2b3e      	cmp	r3, #62	; 0x3e
 800661c:	d817      	bhi.n	800664e <USB_EPStartXfer+0x91a>
 800661e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006622:	085b      	lsrs	r3, r3, #1
 8006624:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006628:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800662c:	f003 0301 	and.w	r3, r3, #1
 8006630:	2b00      	cmp	r3, #0
 8006632:	d004      	beq.n	800663e <USB_EPStartXfer+0x90a>
 8006634:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006638:	3301      	adds	r3, #1
 800663a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800663e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006642:	b29b      	uxth	r3, r3
 8006644:	029b      	lsls	r3, r3, #10
 8006646:	b29a      	uxth	r2, r3
 8006648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800664a:	801a      	strh	r2, [r3, #0]
 800664c:	e041      	b.n	80066d2 <USB_EPStartXfer+0x99e>
 800664e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006652:	095b      	lsrs	r3, r3, #5
 8006654:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006658:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800665c:	f003 031f 	and.w	r3, r3, #31
 8006660:	2b00      	cmp	r3, #0
 8006662:	d104      	bne.n	800666e <USB_EPStartXfer+0x93a>
 8006664:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006668:	3b01      	subs	r3, #1
 800666a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800666e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006672:	b29b      	uxth	r3, r3
 8006674:	029b      	lsls	r3, r3, #10
 8006676:	b29b      	uxth	r3, r3
 8006678:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800667c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006680:	b29a      	uxth	r2, r3
 8006682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006684:	801a      	strh	r2, [r3, #0]
 8006686:	e024      	b.n	80066d2 <USB_EPStartXfer+0x99e>
 8006688:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800668c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	785b      	ldrb	r3, [r3, #1]
 8006694:	2b01      	cmp	r3, #1
 8006696:	d11c      	bne.n	80066d2 <USB_EPStartXfer+0x99e>
 8006698:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800669c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	461a      	mov	r2, r3
 80066aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066ac:	4413      	add	r3, r2
 80066ae:	643b      	str	r3, [r7, #64]	; 0x40
 80066b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	011a      	lsls	r2, r3, #4
 80066be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066c0:	4413      	add	r3, r2
 80066c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066cc:	b29a      	uxth	r2, r3
 80066ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80066d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	895b      	ldrh	r3, [r3, #10]
 80066de:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6959      	ldr	r1, [r3, #20]
 80066ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80066f8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80066fc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006700:	6800      	ldr	r0, [r0, #0]
 8006702:	f001 fa8d 	bl	8007c20 <USB_WritePMA>
 8006706:	f000 bc5a 	b.w	8006fbe <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800670a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800670e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800671a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800671e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006728:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	4413      	add	r3, r2
 8006734:	881b      	ldrh	r3, [r3, #0]
 8006736:	b29b      	uxth	r3, r3
 8006738:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800673c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006740:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006744:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006748:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006752:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	441a      	add	r2, r3
 800675e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006762:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006766:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800676a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800676e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006772:	b29b      	uxth	r3, r3
 8006774:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800677a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006782:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006786:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006790:	b29b      	uxth	r3, r3
 8006792:	461a      	mov	r2, r3
 8006794:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006796:	4413      	add	r3, r2
 8006798:	65fb      	str	r3, [r7, #92]	; 0x5c
 800679a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800679e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	011a      	lsls	r2, r3, #4
 80067a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067aa:	4413      	add	r3, r2
 80067ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80067b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067ba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80067bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	891b      	ldrh	r3, [r3, #8]
 80067c8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	6959      	ldr	r1, [r3, #20]
 80067d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067dc:	b29b      	uxth	r3, r3
 80067de:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80067e2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80067e6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80067ea:	6800      	ldr	r0, [r0, #0]
 80067ec:	f001 fa18 	bl	8007c20 <USB_WritePMA>
 80067f0:	e3e5      	b.n	8006fbe <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80067f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006800:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	4413      	add	r3, r2
 800680c:	881b      	ldrh	r3, [r3, #0]
 800680e:	b29b      	uxth	r3, r3
 8006810:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006818:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800681c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006820:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800682a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	441a      	add	r2, r3
 8006836:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800683a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800683e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006842:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800684a:	b29b      	uxth	r3, r3
 800684c:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800684e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006852:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	6a1a      	ldr	r2, [r3, #32]
 800685a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800685e:	1ad2      	subs	r2, r2, r3
 8006860:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006864:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800686c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006870:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800687a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	4413      	add	r3, r2
 8006886:	881b      	ldrh	r3, [r3, #0]
 8006888:	b29b      	uxth	r3, r3
 800688a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800688e:	2b00      	cmp	r3, #0
 8006890:	f000 81bc 	beq.w	8006c0c <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006894:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006898:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80068a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	785b      	ldrb	r3, [r3, #1]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d16d      	bne.n	800698e <USB_EPStartXfer+0xc5a>
 80068b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80068be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	461a      	mov	r2, r3
 80068d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068d2:	4413      	add	r3, r2
 80068d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80068d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	011a      	lsls	r2, r3, #4
 80068e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068e6:	4413      	add	r3, r2
 80068e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068ec:	677b      	str	r3, [r7, #116]	; 0x74
 80068ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d112      	bne.n	800691c <USB_EPStartXfer+0xbe8>
 80068f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068f8:	881b      	ldrh	r3, [r3, #0]
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006900:	b29a      	uxth	r2, r3
 8006902:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006904:	801a      	strh	r2, [r3, #0]
 8006906:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006908:	881b      	ldrh	r3, [r3, #0]
 800690a:	b29b      	uxth	r3, r3
 800690c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006910:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006914:	b29a      	uxth	r2, r3
 8006916:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006918:	801a      	strh	r2, [r3, #0]
 800691a:	e060      	b.n	80069de <USB_EPStartXfer+0xcaa>
 800691c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006920:	2b3e      	cmp	r3, #62	; 0x3e
 8006922:	d817      	bhi.n	8006954 <USB_EPStartXfer+0xc20>
 8006924:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006928:	085b      	lsrs	r3, r3, #1
 800692a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800692e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	2b00      	cmp	r3, #0
 8006938:	d004      	beq.n	8006944 <USB_EPStartXfer+0xc10>
 800693a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800693e:	3301      	adds	r3, #1
 8006940:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006944:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006948:	b29b      	uxth	r3, r3
 800694a:	029b      	lsls	r3, r3, #10
 800694c:	b29a      	uxth	r2, r3
 800694e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006950:	801a      	strh	r2, [r3, #0]
 8006952:	e044      	b.n	80069de <USB_EPStartXfer+0xcaa>
 8006954:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006958:	095b      	lsrs	r3, r3, #5
 800695a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800695e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006962:	f003 031f 	and.w	r3, r3, #31
 8006966:	2b00      	cmp	r3, #0
 8006968:	d104      	bne.n	8006974 <USB_EPStartXfer+0xc40>
 800696a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800696e:	3b01      	subs	r3, #1
 8006970:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006974:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006978:	b29b      	uxth	r3, r3
 800697a:	029b      	lsls	r3, r3, #10
 800697c:	b29b      	uxth	r3, r3
 800697e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006982:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006986:	b29a      	uxth	r2, r3
 8006988:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800698a:	801a      	strh	r2, [r3, #0]
 800698c:	e027      	b.n	80069de <USB_EPStartXfer+0xcaa>
 800698e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006992:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	785b      	ldrb	r3, [r3, #1]
 800699a:	2b01      	cmp	r3, #1
 800699c:	d11f      	bne.n	80069de <USB_EPStartXfer+0xcaa>
 800699e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	461a      	mov	r2, r3
 80069b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80069b4:	4413      	add	r3, r2
 80069b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80069ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	011a      	lsls	r2, r3, #4
 80069c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80069cc:	4413      	add	r3, r2
 80069ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80069d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80069d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069d8:	b29a      	uxth	r2, r3
 80069da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80069dc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80069de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	895b      	ldrh	r3, [r3, #10]
 80069ea:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	6959      	ldr	r1, [r3, #20]
 80069fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006a04:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006a08:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006a0c:	6800      	ldr	r0, [r0, #0]
 8006a0e:	f001 f907 	bl	8007c20 <USB_WritePMA>
          ep->xfer_buff += len;
 8006a12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	695a      	ldr	r2, [r3, #20]
 8006a1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a22:	441a      	add	r2, r3
 8006a24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006a30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	6a1a      	ldr	r2, [r3, #32]
 8006a3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d90f      	bls.n	8006a6c <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8006a4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	6a1a      	ldr	r2, [r3, #32]
 8006a58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a5c:	1ad2      	subs	r2, r2, r3
 8006a5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	621a      	str	r2, [r3, #32]
 8006a6a:	e00e      	b.n	8006a8a <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8006a6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	6a1b      	ldr	r3, [r3, #32]
 8006a78:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006a7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2200      	movs	r2, #0
 8006a88:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006a8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	f000 8295 	beq.w	8006fbe <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	785b      	ldrb	r3, [r3, #1]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d16d      	bne.n	8006b80 <USB_EPStartXfer+0xe4c>
 8006aa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aa8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ab0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ab4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ac4:	4413      	add	r3, r2
 8006ac6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ac8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006acc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	011a      	lsls	r2, r3, #4
 8006ad6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ad8:	4413      	add	r3, r2
 8006ada:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ade:	667b      	str	r3, [r7, #100]	; 0x64
 8006ae0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d112      	bne.n	8006b0e <USB_EPStartXfer+0xdda>
 8006ae8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006aea:	881b      	ldrh	r3, [r3, #0]
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006af6:	801a      	strh	r2, [r3, #0]
 8006af8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006afa:	881b      	ldrh	r3, [r3, #0]
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b06:	b29a      	uxth	r2, r3
 8006b08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b0a:	801a      	strh	r2, [r3, #0]
 8006b0c:	e063      	b.n	8006bd6 <USB_EPStartXfer+0xea2>
 8006b0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b12:	2b3e      	cmp	r3, #62	; 0x3e
 8006b14:	d817      	bhi.n	8006b46 <USB_EPStartXfer+0xe12>
 8006b16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b1a:	085b      	lsrs	r3, r3, #1
 8006b1c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006b20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b24:	f003 0301 	and.w	r3, r3, #1
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d004      	beq.n	8006b36 <USB_EPStartXfer+0xe02>
 8006b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b30:	3301      	adds	r3, #1
 8006b32:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	029b      	lsls	r3, r3, #10
 8006b3e:	b29a      	uxth	r2, r3
 8006b40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b42:	801a      	strh	r2, [r3, #0]
 8006b44:	e047      	b.n	8006bd6 <USB_EPStartXfer+0xea2>
 8006b46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b4a:	095b      	lsrs	r3, r3, #5
 8006b4c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006b50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b54:	f003 031f 	and.w	r3, r3, #31
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d104      	bne.n	8006b66 <USB_EPStartXfer+0xe32>
 8006b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b60:	3b01      	subs	r3, #1
 8006b62:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	029b      	lsls	r3, r3, #10
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b7c:	801a      	strh	r2, [r3, #0]
 8006b7e:	e02a      	b.n	8006bd6 <USB_EPStartXfer+0xea2>
 8006b80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	785b      	ldrb	r3, [r3, #1]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d122      	bne.n	8006bd6 <USB_EPStartXfer+0xea2>
 8006b90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	673b      	str	r3, [r7, #112]	; 0x70
 8006b9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ba0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	461a      	mov	r2, r3
 8006bae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006bb0:	4413      	add	r3, r2
 8006bb2:	673b      	str	r3, [r7, #112]	; 0x70
 8006bb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	011a      	lsls	r2, r3, #4
 8006bc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006bca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006bcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bd4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006bd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	891b      	ldrh	r3, [r3, #8]
 8006be2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006be6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	6959      	ldr	r1, [r3, #20]
 8006bf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006bfc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006c00:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006c04:	6800      	ldr	r0, [r0, #0]
 8006c06:	f001 f80b 	bl	8007c20 <USB_WritePMA>
 8006c0a:	e1d8      	b.n	8006fbe <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006c0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	785b      	ldrb	r3, [r3, #1]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d178      	bne.n	8006d0e <USB_EPStartXfer+0xfda>
 8006c1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c40:	4413      	add	r3, r2
 8006c42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	011a      	lsls	r2, r3, #4
 8006c54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c58:	4413      	add	r3, r2
 8006c5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c5e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006c62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d116      	bne.n	8006c98 <USB_EPStartXfer+0xf64>
 8006c6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c6e:	881b      	ldrh	r3, [r3, #0]
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c7c:	801a      	strh	r2, [r3, #0]
 8006c7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c82:	881b      	ldrh	r3, [r3, #0]
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c8e:	b29a      	uxth	r2, r3
 8006c90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c94:	801a      	strh	r2, [r3, #0]
 8006c96:	e06b      	b.n	8006d70 <USB_EPStartXfer+0x103c>
 8006c98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c9c:	2b3e      	cmp	r3, #62	; 0x3e
 8006c9e:	d818      	bhi.n	8006cd2 <USB_EPStartXfer+0xf9e>
 8006ca0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ca4:	085b      	lsrs	r3, r3, #1
 8006ca6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006caa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cae:	f003 0301 	and.w	r3, r3, #1
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d004      	beq.n	8006cc0 <USB_EPStartXfer+0xf8c>
 8006cb6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006cba:	3301      	adds	r3, #1
 8006cbc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006cc0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	029b      	lsls	r3, r3, #10
 8006cc8:	b29a      	uxth	r2, r3
 8006cca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cce:	801a      	strh	r2, [r3, #0]
 8006cd0:	e04e      	b.n	8006d70 <USB_EPStartXfer+0x103c>
 8006cd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cd6:	095b      	lsrs	r3, r3, #5
 8006cd8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006cdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ce0:	f003 031f 	and.w	r3, r3, #31
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d104      	bne.n	8006cf2 <USB_EPStartXfer+0xfbe>
 8006ce8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006cec:	3b01      	subs	r3, #1
 8006cee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006cf2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	029b      	lsls	r3, r3, #10
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d0a:	801a      	strh	r2, [r3, #0]
 8006d0c:	e030      	b.n	8006d70 <USB_EPStartXfer+0x103c>
 8006d0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	785b      	ldrb	r3, [r3, #1]
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d128      	bne.n	8006d70 <USB_EPStartXfer+0x103c>
 8006d1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006d2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006d42:	4413      	add	r3, r2
 8006d44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006d48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	011a      	lsls	r2, r3, #4
 8006d56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006d5a:	4413      	add	r3, r2
 8006d5c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006d64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d6e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006d70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	891b      	ldrh	r3, [r3, #8]
 8006d7c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	6959      	ldr	r1, [r3, #20]
 8006d8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006d96:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006d9a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006d9e:	6800      	ldr	r0, [r0, #0]
 8006da0:	f000 ff3e 	bl	8007c20 <USB_WritePMA>
          ep->xfer_buff += len;
 8006da4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006da8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	695a      	ldr	r2, [r3, #20]
 8006db0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006db4:	441a      	add	r2, r3
 8006db6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006dc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	6a1a      	ldr	r2, [r3, #32]
 8006dce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d90f      	bls.n	8006dfe <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8006dde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006de2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	6a1a      	ldr	r2, [r3, #32]
 8006dea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dee:	1ad2      	subs	r2, r2, r3
 8006df0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006df4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	621a      	str	r2, [r3, #32]
 8006dfc:	e00e      	b.n	8006e1c <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8006dfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	6a1b      	ldr	r3, [r3, #32]
 8006e0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006e0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006e1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	f000 80cc 	beq.w	8006fbe <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	785b      	ldrb	r3, [r3, #1]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d178      	bne.n	8006f36 <USB_EPStartXfer+0x1202>
 8006e44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	461a      	mov	r2, r3
 8006e64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e68:	4413      	add	r3, r2
 8006e6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	011a      	lsls	r2, r3, #4
 8006e7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e80:	4413      	add	r3, r2
 8006e82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d116      	bne.n	8006ec0 <USB_EPStartXfer+0x118c>
 8006e92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e96:	881b      	ldrh	r3, [r3, #0]
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ea4:	801a      	strh	r2, [r3, #0]
 8006ea6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006eaa:	881b      	ldrh	r3, [r3, #0]
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eb6:	b29a      	uxth	r2, r3
 8006eb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ebc:	801a      	strh	r2, [r3, #0]
 8006ebe:	e064      	b.n	8006f8a <USB_EPStartXfer+0x1256>
 8006ec0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ec4:	2b3e      	cmp	r3, #62	; 0x3e
 8006ec6:	d818      	bhi.n	8006efa <USB_EPStartXfer+0x11c6>
 8006ec8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ecc:	085b      	lsrs	r3, r3, #1
 8006ece:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006ed2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ed6:	f003 0301 	and.w	r3, r3, #1
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d004      	beq.n	8006ee8 <USB_EPStartXfer+0x11b4>
 8006ede:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006ee8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	029b      	lsls	r3, r3, #10
 8006ef0:	b29a      	uxth	r2, r3
 8006ef2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ef6:	801a      	strh	r2, [r3, #0]
 8006ef8:	e047      	b.n	8006f8a <USB_EPStartXfer+0x1256>
 8006efa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006efe:	095b      	lsrs	r3, r3, #5
 8006f00:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006f04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f08:	f003 031f 	and.w	r3, r3, #31
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d104      	bne.n	8006f1a <USB_EPStartXfer+0x11e6>
 8006f10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f14:	3b01      	subs	r3, #1
 8006f16:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006f1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	029b      	lsls	r3, r3, #10
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f32:	801a      	strh	r2, [r3, #0]
 8006f34:	e029      	b.n	8006f8a <USB_EPStartXfer+0x1256>
 8006f36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	785b      	ldrb	r3, [r3, #1]
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d121      	bne.n	8006f8a <USB_EPStartXfer+0x1256>
 8006f46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	461a      	mov	r2, r3
 8006f58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	011a      	lsls	r2, r3, #4
 8006f70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f74:	4413      	add	r3, r2
 8006f76:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006f7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f88:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006f8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	895b      	ldrh	r3, [r3, #10]
 8006f96:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	6959      	ldr	r1, [r3, #20]
 8006fa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006fb0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006fb4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006fb8:	6800      	ldr	r0, [r0, #0]
 8006fba:	f000 fe31 	bl	8007c20 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006fbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fc2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	4413      	add	r3, r2
 8006fd8:	881b      	ldrh	r3, [r3, #0]
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006fe0:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006fe4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fe8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fec:	8013      	strh	r3, [r2, #0]
 8006fee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ff2:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006ff6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006ffa:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006ffe:	8812      	ldrh	r2, [r2, #0]
 8007000:	f082 0210 	eor.w	r2, r2, #16
 8007004:	801a      	strh	r2, [r3, #0]
 8007006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800700a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800700e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007012:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007016:	8812      	ldrh	r2, [r2, #0]
 8007018:	f082 0220 	eor.w	r2, r2, #32
 800701c:	801a      	strh	r2, [r3, #0]
 800701e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007022:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800702c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	441a      	add	r2, r3
 8007038:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800703c:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007040:	881b      	ldrh	r3, [r3, #0]
 8007042:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007046:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800704a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800704e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007052:	b29b      	uxth	r3, r3
 8007054:	8013      	strh	r3, [r2, #0]
 8007056:	f000 bc9f 	b.w	8007998 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800705a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800705e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	7b1b      	ldrb	r3, [r3, #12]
 8007066:	2b00      	cmp	r3, #0
 8007068:	f040 80ae 	bne.w	80071c8 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800706c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007070:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	699a      	ldr	r2, [r3, #24]
 8007078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800707c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	429a      	cmp	r2, r3
 8007086:	d917      	bls.n	80070b8 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8007088:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800708c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8007098:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800709c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	699a      	ldr	r2, [r3, #24]
 80070a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070a8:	1ad2      	subs	r2, r2, r3
 80070aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	619a      	str	r2, [r3, #24]
 80070b6:	e00e      	b.n	80070d6 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80070b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	699b      	ldr	r3, [r3, #24]
 80070c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80070c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2200      	movs	r2, #0
 80070d4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80070d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80070e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	461a      	mov	r2, r3
 80070f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80070fa:	4413      	add	r3, r2
 80070fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007100:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007104:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	011a      	lsls	r2, r3, #4
 800710e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007112:	4413      	add	r3, r2
 8007114:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007118:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800711c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007120:	2b00      	cmp	r3, #0
 8007122:	d116      	bne.n	8007152 <USB_EPStartXfer+0x141e>
 8007124:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007128:	881b      	ldrh	r3, [r3, #0]
 800712a:	b29b      	uxth	r3, r3
 800712c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007130:	b29a      	uxth	r2, r3
 8007132:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007136:	801a      	strh	r2, [r3, #0]
 8007138:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800713c:	881b      	ldrh	r3, [r3, #0]
 800713e:	b29b      	uxth	r3, r3
 8007140:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007144:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007148:	b29a      	uxth	r2, r3
 800714a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800714e:	801a      	strh	r2, [r3, #0]
 8007150:	e3e8      	b.n	8007924 <USB_EPStartXfer+0x1bf0>
 8007152:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007156:	2b3e      	cmp	r3, #62	; 0x3e
 8007158:	d818      	bhi.n	800718c <USB_EPStartXfer+0x1458>
 800715a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800715e:	085b      	lsrs	r3, r3, #1
 8007160:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007164:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007168:	f003 0301 	and.w	r3, r3, #1
 800716c:	2b00      	cmp	r3, #0
 800716e:	d004      	beq.n	800717a <USB_EPStartXfer+0x1446>
 8007170:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007174:	3301      	adds	r3, #1
 8007176:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800717a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800717e:	b29b      	uxth	r3, r3
 8007180:	029b      	lsls	r3, r3, #10
 8007182:	b29a      	uxth	r2, r3
 8007184:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007188:	801a      	strh	r2, [r3, #0]
 800718a:	e3cb      	b.n	8007924 <USB_EPStartXfer+0x1bf0>
 800718c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007190:	095b      	lsrs	r3, r3, #5
 8007192:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007196:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800719a:	f003 031f 	and.w	r3, r3, #31
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d104      	bne.n	80071ac <USB_EPStartXfer+0x1478>
 80071a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80071a6:	3b01      	subs	r3, #1
 80071a8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80071ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	029b      	lsls	r3, r3, #10
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071be:	b29a      	uxth	r2, r3
 80071c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071c4:	801a      	strh	r2, [r3, #0]
 80071c6:	e3ad      	b.n	8007924 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80071c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	78db      	ldrb	r3, [r3, #3]
 80071d4:	2b02      	cmp	r3, #2
 80071d6:	f040 8200 	bne.w	80075da <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80071da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	785b      	ldrb	r3, [r3, #1]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	f040 8091 	bne.w	800730e <USB_EPStartXfer+0x15da>
 80071ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80071fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007208:	b29b      	uxth	r3, r3
 800720a:	461a      	mov	r2, r3
 800720c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007210:	4413      	add	r3, r2
 8007212:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007216:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800721a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	011a      	lsls	r2, r3, #4
 8007224:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007228:	4413      	add	r3, r2
 800722a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800722e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007236:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d116      	bne.n	8007270 <USB_EPStartXfer+0x153c>
 8007242:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007246:	881b      	ldrh	r3, [r3, #0]
 8007248:	b29b      	uxth	r3, r3
 800724a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800724e:	b29a      	uxth	r2, r3
 8007250:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007254:	801a      	strh	r2, [r3, #0]
 8007256:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800725a:	881b      	ldrh	r3, [r3, #0]
 800725c:	b29b      	uxth	r3, r3
 800725e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007262:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007266:	b29a      	uxth	r2, r3
 8007268:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800726c:	801a      	strh	r2, [r3, #0]
 800726e:	e083      	b.n	8007378 <USB_EPStartXfer+0x1644>
 8007270:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007274:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	2b3e      	cmp	r3, #62	; 0x3e
 800727e:	d820      	bhi.n	80072c2 <USB_EPStartXfer+0x158e>
 8007280:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007284:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	085b      	lsrs	r3, r3, #1
 800728e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007292:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007296:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	f003 0301 	and.w	r3, r3, #1
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d004      	beq.n	80072b0 <USB_EPStartXfer+0x157c>
 80072a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072aa:	3301      	adds	r3, #1
 80072ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80072b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	029b      	lsls	r3, r3, #10
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80072be:	801a      	strh	r2, [r3, #0]
 80072c0:	e05a      	b.n	8007378 <USB_EPStartXfer+0x1644>
 80072c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	095b      	lsrs	r3, r3, #5
 80072d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80072d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	691b      	ldr	r3, [r3, #16]
 80072e0:	f003 031f 	and.w	r3, r3, #31
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d104      	bne.n	80072f2 <USB_EPStartXfer+0x15be>
 80072e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072ec:	3b01      	subs	r3, #1
 80072ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80072f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	029b      	lsls	r3, r3, #10
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007300:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007304:	b29a      	uxth	r2, r3
 8007306:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800730a:	801a      	strh	r2, [r3, #0]
 800730c:	e034      	b.n	8007378 <USB_EPStartXfer+0x1644>
 800730e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007312:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	785b      	ldrb	r3, [r3, #1]
 800731a:	2b01      	cmp	r3, #1
 800731c:	d12c      	bne.n	8007378 <USB_EPStartXfer+0x1644>
 800731e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007322:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800732c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007330:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800733a:	b29b      	uxth	r3, r3
 800733c:	461a      	mov	r2, r3
 800733e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007342:	4413      	add	r3, r2
 8007344:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007348:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800734c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	011a      	lsls	r2, r3, #4
 8007356:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800735a:	4413      	add	r3, r2
 800735c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007360:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007364:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007368:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	b29a      	uxth	r2, r3
 8007372:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007376:	801a      	strh	r2, [r3, #0]
 8007378:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800737c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007386:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800738a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	785b      	ldrb	r3, [r3, #1]
 8007392:	2b00      	cmp	r3, #0
 8007394:	f040 8091 	bne.w	80074ba <USB_EPStartXfer+0x1786>
 8007398:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800739c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80073a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	461a      	mov	r2, r3
 80073b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80073bc:	4413      	add	r3, r2
 80073be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80073c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	011a      	lsls	r2, r3, #4
 80073d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80073d4:	4413      	add	r3, r2
 80073d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80073da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d116      	bne.n	800741c <USB_EPStartXfer+0x16e8>
 80073ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80073f2:	881b      	ldrh	r3, [r3, #0]
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007400:	801a      	strh	r2, [r3, #0]
 8007402:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007406:	881b      	ldrh	r3, [r3, #0]
 8007408:	b29b      	uxth	r3, r3
 800740a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800740e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007412:	b29a      	uxth	r2, r3
 8007414:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007418:	801a      	strh	r2, [r3, #0]
 800741a:	e07c      	b.n	8007516 <USB_EPStartXfer+0x17e2>
 800741c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007420:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	2b3e      	cmp	r3, #62	; 0x3e
 800742a:	d820      	bhi.n	800746e <USB_EPStartXfer+0x173a>
 800742c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007430:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	691b      	ldr	r3, [r3, #16]
 8007438:	085b      	lsrs	r3, r3, #1
 800743a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800743e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007442:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	f003 0301 	and.w	r3, r3, #1
 800744e:	2b00      	cmp	r3, #0
 8007450:	d004      	beq.n	800745c <USB_EPStartXfer+0x1728>
 8007452:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007456:	3301      	adds	r3, #1
 8007458:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800745c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007460:	b29b      	uxth	r3, r3
 8007462:	029b      	lsls	r3, r3, #10
 8007464:	b29a      	uxth	r2, r3
 8007466:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800746a:	801a      	strh	r2, [r3, #0]
 800746c:	e053      	b.n	8007516 <USB_EPStartXfer+0x17e2>
 800746e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007472:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	095b      	lsrs	r3, r3, #5
 800747c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007480:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007484:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	f003 031f 	and.w	r3, r3, #31
 8007490:	2b00      	cmp	r3, #0
 8007492:	d104      	bne.n	800749e <USB_EPStartXfer+0x176a>
 8007494:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007498:	3b01      	subs	r3, #1
 800749a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800749e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	029b      	lsls	r3, r3, #10
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80074b6:	801a      	strh	r2, [r3, #0]
 80074b8:	e02d      	b.n	8007516 <USB_EPStartXfer+0x17e2>
 80074ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	785b      	ldrb	r3, [r3, #1]
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d125      	bne.n	8007516 <USB_EPStartXfer+0x17e2>
 80074ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074d8:	b29b      	uxth	r3, r3
 80074da:	461a      	mov	r2, r3
 80074dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80074e0:	4413      	add	r3, r2
 80074e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80074e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	011a      	lsls	r2, r3, #4
 80074f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80074f8:	4413      	add	r3, r2
 80074fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80074fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007502:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007506:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	b29a      	uxth	r2, r3
 8007510:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007514:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007516:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800751a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	69db      	ldr	r3, [r3, #28]
 8007522:	2b00      	cmp	r3, #0
 8007524:	f000 81fe 	beq.w	8007924 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007528:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800752c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007536:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	4413      	add	r3, r2
 8007542:	881b      	ldrh	r3, [r3, #0]
 8007544:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007548:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800754c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007550:	2b00      	cmp	r3, #0
 8007552:	d005      	beq.n	8007560 <USB_EPStartXfer+0x182c>
 8007554:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800755c:	2b00      	cmp	r3, #0
 800755e:	d10d      	bne.n	800757c <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007560:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007564:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007568:	2b00      	cmp	r3, #0
 800756a:	f040 81db 	bne.w	8007924 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800756e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007576:	2b00      	cmp	r3, #0
 8007578:	f040 81d4 	bne.w	8007924 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800757c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007580:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800758a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	4413      	add	r3, r2
 8007596:	881b      	ldrh	r3, [r3, #0]
 8007598:	b29b      	uxth	r3, r3
 800759a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800759e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075a2:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80075a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	441a      	add	r2, r3
 80075c0:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80075c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	8013      	strh	r3, [r2, #0]
 80075d8:	e1a4      	b.n	8007924 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80075da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	78db      	ldrb	r3, [r3, #3]
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	f040 819a 	bne.w	8007920 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80075ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	699a      	ldr	r2, [r3, #24]
 80075f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	429a      	cmp	r2, r3
 8007606:	d917      	bls.n	8007638 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8007608:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800760c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	691b      	ldr	r3, [r3, #16]
 8007614:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8007618:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800761c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	699a      	ldr	r2, [r3, #24]
 8007624:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007628:	1ad2      	subs	r2, r2, r3
 800762a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800762e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	619a      	str	r2, [r3, #24]
 8007636:	e00e      	b.n	8007656 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8007638:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800763c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	699b      	ldr	r3, [r3, #24]
 8007644:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8007648:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800764c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2200      	movs	r2, #0
 8007654:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800765a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	785b      	ldrb	r3, [r3, #1]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d178      	bne.n	8007758 <USB_EPStartXfer+0x1a24>
 8007666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800766a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007674:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007678:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007682:	b29b      	uxth	r3, r3
 8007684:	461a      	mov	r2, r3
 8007686:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800768a:	4413      	add	r3, r2
 800768c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007690:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007694:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	011a      	lsls	r2, r3, #4
 800769e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80076a2:	4413      	add	r3, r2
 80076a4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80076a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80076ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d116      	bne.n	80076e2 <USB_EPStartXfer+0x19ae>
 80076b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80076b8:	881b      	ldrh	r3, [r3, #0]
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076c0:	b29a      	uxth	r2, r3
 80076c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80076c6:	801a      	strh	r2, [r3, #0]
 80076c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80076cc:	881b      	ldrh	r3, [r3, #0]
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076d8:	b29a      	uxth	r2, r3
 80076da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80076de:	801a      	strh	r2, [r3, #0]
 80076e0:	e06b      	b.n	80077ba <USB_EPStartXfer+0x1a86>
 80076e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076e6:	2b3e      	cmp	r3, #62	; 0x3e
 80076e8:	d818      	bhi.n	800771c <USB_EPStartXfer+0x19e8>
 80076ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076ee:	085b      	lsrs	r3, r3, #1
 80076f0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80076f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076f8:	f003 0301 	and.w	r3, r3, #1
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d004      	beq.n	800770a <USB_EPStartXfer+0x19d6>
 8007700:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007704:	3301      	adds	r3, #1
 8007706:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800770a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800770e:	b29b      	uxth	r3, r3
 8007710:	029b      	lsls	r3, r3, #10
 8007712:	b29a      	uxth	r2, r3
 8007714:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007718:	801a      	strh	r2, [r3, #0]
 800771a:	e04e      	b.n	80077ba <USB_EPStartXfer+0x1a86>
 800771c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007720:	095b      	lsrs	r3, r3, #5
 8007722:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007726:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800772a:	f003 031f 	and.w	r3, r3, #31
 800772e:	2b00      	cmp	r3, #0
 8007730:	d104      	bne.n	800773c <USB_EPStartXfer+0x1a08>
 8007732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007736:	3b01      	subs	r3, #1
 8007738:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800773c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007740:	b29b      	uxth	r3, r3
 8007742:	029b      	lsls	r3, r3, #10
 8007744:	b29b      	uxth	r3, r3
 8007746:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800774a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800774e:	b29a      	uxth	r2, r3
 8007750:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007754:	801a      	strh	r2, [r3, #0]
 8007756:	e030      	b.n	80077ba <USB_EPStartXfer+0x1a86>
 8007758:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800775c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	785b      	ldrb	r3, [r3, #1]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d128      	bne.n	80077ba <USB_EPStartXfer+0x1a86>
 8007768:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800776c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800777a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007784:	b29b      	uxth	r3, r3
 8007786:	461a      	mov	r2, r3
 8007788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800778c:	4413      	add	r3, r2
 800778e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007792:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007796:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	011a      	lsls	r2, r3, #4
 80077a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077a4:	4413      	add	r3, r2
 80077a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80077aa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80077ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077b2:	b29a      	uxth	r2, r3
 80077b4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80077b8:	801a      	strh	r2, [r3, #0]
 80077ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80077c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	785b      	ldrb	r3, [r3, #1]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d178      	bne.n	80078ca <USB_EPStartXfer+0x1b96>
 80077d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80077e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	461a      	mov	r2, r3
 80077f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077fc:	4413      	add	r3, r2
 80077fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007806:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	011a      	lsls	r2, r3, #4
 8007810:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007814:	4413      	add	r3, r2
 8007816:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800781a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800781e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007822:	2b00      	cmp	r3, #0
 8007824:	d116      	bne.n	8007854 <USB_EPStartXfer+0x1b20>
 8007826:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800782a:	881b      	ldrh	r3, [r3, #0]
 800782c:	b29b      	uxth	r3, r3
 800782e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007832:	b29a      	uxth	r2, r3
 8007834:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007838:	801a      	strh	r2, [r3, #0]
 800783a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800783e:	881b      	ldrh	r3, [r3, #0]
 8007840:	b29b      	uxth	r3, r3
 8007842:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007846:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800784a:	b29a      	uxth	r2, r3
 800784c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007850:	801a      	strh	r2, [r3, #0]
 8007852:	e067      	b.n	8007924 <USB_EPStartXfer+0x1bf0>
 8007854:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007858:	2b3e      	cmp	r3, #62	; 0x3e
 800785a:	d818      	bhi.n	800788e <USB_EPStartXfer+0x1b5a>
 800785c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007860:	085b      	lsrs	r3, r3, #1
 8007862:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007866:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800786a:	f003 0301 	and.w	r3, r3, #1
 800786e:	2b00      	cmp	r3, #0
 8007870:	d004      	beq.n	800787c <USB_EPStartXfer+0x1b48>
 8007872:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007876:	3301      	adds	r3, #1
 8007878:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800787c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007880:	b29b      	uxth	r3, r3
 8007882:	029b      	lsls	r3, r3, #10
 8007884:	b29a      	uxth	r2, r3
 8007886:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800788a:	801a      	strh	r2, [r3, #0]
 800788c:	e04a      	b.n	8007924 <USB_EPStartXfer+0x1bf0>
 800788e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007892:	095b      	lsrs	r3, r3, #5
 8007894:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007898:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800789c:	f003 031f 	and.w	r3, r3, #31
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d104      	bne.n	80078ae <USB_EPStartXfer+0x1b7a>
 80078a4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80078a8:	3b01      	subs	r3, #1
 80078aa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80078ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	029b      	lsls	r3, r3, #10
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078c0:	b29a      	uxth	r2, r3
 80078c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078c6:	801a      	strh	r2, [r3, #0]
 80078c8:	e02c      	b.n	8007924 <USB_EPStartXfer+0x1bf0>
 80078ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	785b      	ldrb	r3, [r3, #1]
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d124      	bne.n	8007924 <USB_EPStartXfer+0x1bf0>
 80078da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	461a      	mov	r2, r3
 80078ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078f0:	4413      	add	r3, r2
 80078f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80078f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	011a      	lsls	r2, r3, #4
 8007904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007908:	4413      	add	r3, r2
 800790a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800790e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007912:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007916:	b29a      	uxth	r2, r3
 8007918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800791c:	801a      	strh	r2, [r3, #0]
 800791e:	e001      	b.n	8007924 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	e03a      	b.n	800799a <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007924:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007928:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007932:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	4413      	add	r3, r2
 800793e:	881b      	ldrh	r3, [r3, #0]
 8007940:	b29b      	uxth	r3, r3
 8007942:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800794a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800794e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007952:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007956:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800795a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800795e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007962:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007966:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800796a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007974:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	441a      	add	r2, r3
 8007980:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007984:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007988:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800798c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007994:	b29b      	uxth	r3, r3
 8007996:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	785b      	ldrb	r3, [r3, #1]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d020      	beq.n	80079f8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	4413      	add	r3, r2
 80079c0:	881b      	ldrh	r3, [r3, #0]
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079cc:	81bb      	strh	r3, [r7, #12]
 80079ce:	89bb      	ldrh	r3, [r7, #12]
 80079d0:	f083 0310 	eor.w	r3, r3, #16
 80079d4:	81bb      	strh	r3, [r7, #12]
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	441a      	add	r2, r3
 80079e0:	89bb      	ldrh	r3, [r7, #12]
 80079e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	8013      	strh	r3, [r2, #0]
 80079f6:	e01f      	b.n	8007a38 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	4413      	add	r3, r2
 8007a02:	881b      	ldrh	r3, [r3, #0]
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a0e:	81fb      	strh	r3, [r7, #14]
 8007a10:	89fb      	ldrh	r3, [r7, #14]
 8007a12:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007a16:	81fb      	strh	r3, [r7, #14]
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	441a      	add	r2, r3
 8007a22:	89fb      	ldrh	r3, [r7, #14]
 8007a24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3714      	adds	r7, #20
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bc80      	pop	{r7}
 8007a42:	4770      	bx	lr

08007a44 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b087      	sub	sp, #28
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	7b1b      	ldrb	r3, [r3, #12]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f040 809d 	bne.w	8007b92 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	785b      	ldrb	r3, [r3, #1]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d04c      	beq.n	8007afa <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	4413      	add	r3, r2
 8007a6a:	881b      	ldrh	r3, [r3, #0]
 8007a6c:	823b      	strh	r3, [r7, #16]
 8007a6e:	8a3b      	ldrh	r3, [r7, #16]
 8007a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d01b      	beq.n	8007ab0 <USB_EPClearStall+0x6c>
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	4413      	add	r3, r2
 8007a82:	881b      	ldrh	r3, [r3, #0]
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a8e:	81fb      	strh	r3, [r7, #14]
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	441a      	add	r2, r3
 8007a9a:	89fb      	ldrh	r3, [r7, #14]
 8007a9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007aa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007aa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007aa8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	78db      	ldrb	r3, [r3, #3]
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d06c      	beq.n	8007b92 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	4413      	add	r3, r2
 8007ac2:	881b      	ldrh	r3, [r3, #0]
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ace:	81bb      	strh	r3, [r7, #12]
 8007ad0:	89bb      	ldrh	r3, [r7, #12]
 8007ad2:	f083 0320 	eor.w	r3, r3, #32
 8007ad6:	81bb      	strh	r3, [r7, #12]
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	441a      	add	r2, r3
 8007ae2:	89bb      	ldrh	r3, [r7, #12]
 8007ae4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ae8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007aec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	8013      	strh	r3, [r2, #0]
 8007af8:	e04b      	b.n	8007b92 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	4413      	add	r3, r2
 8007b04:	881b      	ldrh	r3, [r3, #0]
 8007b06:	82fb      	strh	r3, [r7, #22]
 8007b08:	8afb      	ldrh	r3, [r7, #22]
 8007b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d01b      	beq.n	8007b4a <USB_EPClearStall+0x106>
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	009b      	lsls	r3, r3, #2
 8007b1a:	4413      	add	r3, r2
 8007b1c:	881b      	ldrh	r3, [r3, #0]
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b28:	82bb      	strh	r3, [r7, #20]
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	441a      	add	r2, r3
 8007b34:	8abb      	ldrh	r3, [r7, #20]
 8007b36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	4413      	add	r3, r2
 8007b54:	881b      	ldrh	r3, [r3, #0]
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b60:	827b      	strh	r3, [r7, #18]
 8007b62:	8a7b      	ldrh	r3, [r7, #18]
 8007b64:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007b68:	827b      	strh	r3, [r7, #18]
 8007b6a:	8a7b      	ldrh	r3, [r7, #18]
 8007b6c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007b70:	827b      	strh	r3, [r7, #18]
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	441a      	add	r2, r3
 8007b7c:	8a7b      	ldrh	r3, [r7, #18]
 8007b7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007b92:	2300      	movs	r3, #0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	371c      	adds	r7, #28
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bc80      	pop	{r7}
 8007b9c:	4770      	bx	lr

08007b9e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007b9e:	b480      	push	{r7}
 8007ba0:	b083      	sub	sp, #12
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007baa:	78fb      	ldrb	r3, [r7, #3]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d103      	bne.n	8007bb8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2280      	movs	r2, #128	; 0x80
 8007bb4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	370c      	adds	r7, #12
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bc80      	pop	{r7}
 8007bc2:	4770      	bx	lr

08007bc4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	370c      	adds	r7, #12
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bc80      	pop	{r7}
 8007bd6:	4770      	bx	lr

08007bd8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	370c      	adds	r7, #12
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bc80      	pop	{r7}
 8007bea:	4770      	bx	lr

08007bec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b085      	sub	sp, #20
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3714      	adds	r7, #20
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bc80      	pop	{r7}
 8007c08:	4770      	bx	lr

08007c0a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	b083      	sub	sp, #12
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
 8007c12:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	370c      	adds	r7, #12
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bc80      	pop	{r7}
 8007c1e:	4770      	bx	lr

08007c20 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b08d      	sub	sp, #52	; 0x34
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	4611      	mov	r1, r2
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	460b      	mov	r3, r1
 8007c30:	80fb      	strh	r3, [r7, #6]
 8007c32:	4613      	mov	r3, r2
 8007c34:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007c36:	88bb      	ldrh	r3, [r7, #4]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	085b      	lsrs	r3, r3, #1
 8007c3c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007c46:	88fb      	ldrh	r3, [r7, #6]
 8007c48:	005a      	lsls	r2, r3, #1
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c52:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007c54:	6a3b      	ldr	r3, [r7, #32]
 8007c56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c58:	e01e      	b.n	8007c98 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8007c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c62:	3301      	adds	r3, #1
 8007c64:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	021b      	lsls	r3, r3, #8
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	461a      	mov	r2, r3
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c82:	3302      	adds	r3, #2
 8007c84:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c88:	3302      	adds	r3, #2
 8007c8a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8e:	3301      	adds	r3, #1
 8007c90:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c94:	3b01      	subs	r3, #1
 8007c96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d1dd      	bne.n	8007c5a <USB_WritePMA+0x3a>
  }
}
 8007c9e:	bf00      	nop
 8007ca0:	bf00      	nop
 8007ca2:	3734      	adds	r7, #52	; 0x34
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bc80      	pop	{r7}
 8007ca8:	4770      	bx	lr

08007caa <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b08b      	sub	sp, #44	; 0x2c
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	60f8      	str	r0, [r7, #12]
 8007cb2:	60b9      	str	r1, [r7, #8]
 8007cb4:	4611      	mov	r1, r2
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	460b      	mov	r3, r1
 8007cba:	80fb      	strh	r3, [r7, #6]
 8007cbc:	4613      	mov	r3, r2
 8007cbe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007cc0:	88bb      	ldrh	r3, [r7, #4]
 8007cc2:	085b      	lsrs	r3, r3, #1
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007cd0:	88fb      	ldrh	r3, [r7, #6]
 8007cd2:	005a      	lsls	r2, r3, #1
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cdc:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ce2:	e01b      	b.n	8007d1c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007ce4:	6a3b      	ldr	r3, [r7, #32]
 8007ce6:	881b      	ldrh	r3, [r3, #0]
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007cec:	6a3b      	ldr	r3, [r7, #32]
 8007cee:	3302      	adds	r3, #2
 8007cf0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	b2da      	uxtb	r2, r3
 8007cf6:	69fb      	ldr	r3, [r7, #28]
 8007cf8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007cfa:	69fb      	ldr	r3, [r7, #28]
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	0a1b      	lsrs	r3, r3, #8
 8007d04:	b2da      	uxtb	r2, r3
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007d10:	6a3b      	ldr	r3, [r7, #32]
 8007d12:	3302      	adds	r3, #2
 8007d14:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d18:	3b01      	subs	r3, #1
 8007d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8007d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d1e0      	bne.n	8007ce4 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007d22:	88bb      	ldrh	r3, [r7, #4]
 8007d24:	f003 0301 	and.w	r3, r3, #1
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d007      	beq.n	8007d3e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007d2e:	6a3b      	ldr	r3, [r7, #32]
 8007d30:	881b      	ldrh	r3, [r3, #0]
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	b2da      	uxtb	r2, r3
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	701a      	strb	r2, [r3, #0]
  }
}
 8007d3e:	bf00      	nop
 8007d40:	372c      	adds	r7, #44	; 0x2c
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bc80      	pop	{r7}
 8007d46:	4770      	bx	lr

08007d48 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	460b      	mov	r3, r1
 8007d52:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007d54:	2300      	movs	r3, #0
 8007d56:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	7c1b      	ldrb	r3, [r3, #16]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d115      	bne.n	8007d8c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007d60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d64:	2202      	movs	r2, #2
 8007d66:	2181      	movs	r1, #129	; 0x81
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f001 fe30 	bl	80099ce <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2201      	movs	r2, #1
 8007d72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007d74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d78:	2202      	movs	r2, #2
 8007d7a:	2101      	movs	r1, #1
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f001 fe26 	bl	80099ce <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2201      	movs	r2, #1
 8007d86:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007d8a:	e012      	b.n	8007db2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007d8c:	2340      	movs	r3, #64	; 0x40
 8007d8e:	2202      	movs	r2, #2
 8007d90:	2181      	movs	r1, #129	; 0x81
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f001 fe1b 	bl	80099ce <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007d9e:	2340      	movs	r3, #64	; 0x40
 8007da0:	2202      	movs	r2, #2
 8007da2:	2101      	movs	r1, #1
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f001 fe12 	bl	80099ce <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007db2:	2308      	movs	r3, #8
 8007db4:	2203      	movs	r2, #3
 8007db6:	2182      	movs	r1, #130	; 0x82
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f001 fe08 	bl	80099ce <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007dc4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007dc8:	f001 ff28 	bl	8009c1c <USBD_static_malloc>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d102      	bne.n	8007de4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007dde:	2301      	movs	r3, #1
 8007de0:	73fb      	strb	r3, [r7, #15]
 8007de2:	e026      	b.n	8007e32 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dea:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	7c1b      	ldrb	r3, [r3, #16]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d109      	bne.n	8007e22 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e18:	2101      	movs	r1, #1
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f001 fec8 	bl	8009bb0 <USBD_LL_PrepareReceive>
 8007e20:	e007      	b.n	8007e32 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e28:	2340      	movs	r3, #64	; 0x40
 8007e2a:	2101      	movs	r1, #1
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f001 febf 	bl	8009bb0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3710      	adds	r7, #16
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	460b      	mov	r3, r1
 8007e46:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007e4c:	2181      	movs	r1, #129	; 0x81
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f001 fde3 	bl	8009a1a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007e5a:	2101      	movs	r1, #1
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f001 fddc 	bl	8009a1a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007e6a:	2182      	movs	r1, #130	; 0x82
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f001 fdd4 	bl	8009a1a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00e      	beq.n	8007ea0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e92:	4618      	mov	r0, r3
 8007e94:	f001 fece 	bl	8009c34 <USBD_static_free>
    pdev->pClassData = NULL;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b086      	sub	sp, #24
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
 8007eb2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eba:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d039      	beq.n	8007f48 <USBD_CDC_Setup+0x9e>
 8007ed4:	2b20      	cmp	r3, #32
 8007ed6:	d17f      	bne.n	8007fd8 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	88db      	ldrh	r3, [r3, #6]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d029      	beq.n	8007f34 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	b25b      	sxtb	r3, r3
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	da11      	bge.n	8007f0e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	683a      	ldr	r2, [r7, #0]
 8007ef4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007ef6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007ef8:	683a      	ldr	r2, [r7, #0]
 8007efa:	88d2      	ldrh	r2, [r2, #6]
 8007efc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007efe:	6939      	ldr	r1, [r7, #16]
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	88db      	ldrh	r3, [r3, #6]
 8007f04:	461a      	mov	r2, r3
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f001 f9d9 	bl	80092be <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007f0c:	e06b      	b.n	8007fe6 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	785a      	ldrb	r2, [r3, #1]
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	88db      	ldrh	r3, [r3, #6]
 8007f1c:	b2da      	uxtb	r2, r3
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007f24:	6939      	ldr	r1, [r7, #16]
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	88db      	ldrh	r3, [r3, #6]
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f001 f9f4 	bl	800931a <USBD_CtlPrepareRx>
      break;
 8007f32:	e058      	b.n	8007fe6 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	683a      	ldr	r2, [r7, #0]
 8007f3e:	7850      	ldrb	r0, [r2, #1]
 8007f40:	2200      	movs	r2, #0
 8007f42:	6839      	ldr	r1, [r7, #0]
 8007f44:	4798      	blx	r3
      break;
 8007f46:	e04e      	b.n	8007fe6 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	785b      	ldrb	r3, [r3, #1]
 8007f4c:	2b0b      	cmp	r3, #11
 8007f4e:	d02e      	beq.n	8007fae <USBD_CDC_Setup+0x104>
 8007f50:	2b0b      	cmp	r3, #11
 8007f52:	dc38      	bgt.n	8007fc6 <USBD_CDC_Setup+0x11c>
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d002      	beq.n	8007f5e <USBD_CDC_Setup+0xb4>
 8007f58:	2b0a      	cmp	r3, #10
 8007f5a:	d014      	beq.n	8007f86 <USBD_CDC_Setup+0xdc>
 8007f5c:	e033      	b.n	8007fc6 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f64:	2b03      	cmp	r3, #3
 8007f66:	d107      	bne.n	8007f78 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007f68:	f107 030c 	add.w	r3, r7, #12
 8007f6c:	2202      	movs	r2, #2
 8007f6e:	4619      	mov	r1, r3
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f001 f9a4 	bl	80092be <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f76:	e02e      	b.n	8007fd6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007f78:	6839      	ldr	r1, [r7, #0]
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f001 f935 	bl	80091ea <USBD_CtlError>
            ret = USBD_FAIL;
 8007f80:	2302      	movs	r3, #2
 8007f82:	75fb      	strb	r3, [r7, #23]
          break;
 8007f84:	e027      	b.n	8007fd6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f8c:	2b03      	cmp	r3, #3
 8007f8e:	d107      	bne.n	8007fa0 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007f90:	f107 030f 	add.w	r3, r7, #15
 8007f94:	2201      	movs	r2, #1
 8007f96:	4619      	mov	r1, r3
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f001 f990 	bl	80092be <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f9e:	e01a      	b.n	8007fd6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007fa0:	6839      	ldr	r1, [r7, #0]
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f001 f921 	bl	80091ea <USBD_CtlError>
            ret = USBD_FAIL;
 8007fa8:	2302      	movs	r3, #2
 8007faa:	75fb      	strb	r3, [r7, #23]
          break;
 8007fac:	e013      	b.n	8007fd6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fb4:	2b03      	cmp	r3, #3
 8007fb6:	d00d      	beq.n	8007fd4 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007fb8:	6839      	ldr	r1, [r7, #0]
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f001 f915 	bl	80091ea <USBD_CtlError>
            ret = USBD_FAIL;
 8007fc0:	2302      	movs	r3, #2
 8007fc2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007fc4:	e006      	b.n	8007fd4 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007fc6:	6839      	ldr	r1, [r7, #0]
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f001 f90e 	bl	80091ea <USBD_CtlError>
          ret = USBD_FAIL;
 8007fce:	2302      	movs	r3, #2
 8007fd0:	75fb      	strb	r3, [r7, #23]
          break;
 8007fd2:	e000      	b.n	8007fd6 <USBD_CDC_Setup+0x12c>
          break;
 8007fd4:	bf00      	nop
      }
      break;
 8007fd6:	e006      	b.n	8007fe6 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007fd8:	6839      	ldr	r1, [r7, #0]
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f001 f905 	bl	80091ea <USBD_CtlError>
      ret = USBD_FAIL;
 8007fe0:	2302      	movs	r3, #2
 8007fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8007fe4:	bf00      	nop
  }

  return ret;
 8007fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3718      	adds	r7, #24
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008002:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800800a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008012:	2b00      	cmp	r3, #0
 8008014:	d03a      	beq.n	800808c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008016:	78fa      	ldrb	r2, [r7, #3]
 8008018:	6879      	ldr	r1, [r7, #4]
 800801a:	4613      	mov	r3, r2
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	4413      	add	r3, r2
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	440b      	add	r3, r1
 8008024:	331c      	adds	r3, #28
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d029      	beq.n	8008080 <USBD_CDC_DataIn+0x90>
 800802c:	78fa      	ldrb	r2, [r7, #3]
 800802e:	6879      	ldr	r1, [r7, #4]
 8008030:	4613      	mov	r3, r2
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	4413      	add	r3, r2
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	440b      	add	r3, r1
 800803a:	331c      	adds	r3, #28
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	78f9      	ldrb	r1, [r7, #3]
 8008040:	68b8      	ldr	r0, [r7, #8]
 8008042:	460b      	mov	r3, r1
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	440b      	add	r3, r1
 8008048:	00db      	lsls	r3, r3, #3
 800804a:	4403      	add	r3, r0
 800804c:	3338      	adds	r3, #56	; 0x38
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	fbb2 f1f3 	udiv	r1, r2, r3
 8008054:	fb01 f303 	mul.w	r3, r1, r3
 8008058:	1ad3      	subs	r3, r2, r3
 800805a:	2b00      	cmp	r3, #0
 800805c:	d110      	bne.n	8008080 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800805e:	78fa      	ldrb	r2, [r7, #3]
 8008060:	6879      	ldr	r1, [r7, #4]
 8008062:	4613      	mov	r3, r2
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	4413      	add	r3, r2
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	440b      	add	r3, r1
 800806c:	331c      	adds	r3, #28
 800806e:	2200      	movs	r2, #0
 8008070:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008072:	78f9      	ldrb	r1, [r7, #3]
 8008074:	2300      	movs	r3, #0
 8008076:	2200      	movs	r2, #0
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f001 fd76 	bl	8009b6a <USBD_LL_Transmit>
 800807e:	e003      	b.n	8008088 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2200      	movs	r2, #0
 8008084:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008088:	2300      	movs	r3, #0
 800808a:	e000      	b.n	800808e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800808c:	2302      	movs	r3, #2
  }
}
 800808e:	4618      	mov	r0, r3
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}

08008096 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008096:	b580      	push	{r7, lr}
 8008098:	b084      	sub	sp, #16
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
 800809e:	460b      	mov	r3, r1
 80080a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080a8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80080aa:	78fb      	ldrb	r3, [r7, #3]
 80080ac:	4619      	mov	r1, r3
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f001 fda1 	bl	8009bf6 <USBD_LL_GetRxDataSize>
 80080b4:	4602      	mov	r2, r0
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d00d      	beq.n	80080e2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	68fa      	ldr	r2, [r7, #12]
 80080d0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80080d4:	68fa      	ldr	r2, [r7, #12]
 80080d6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80080da:	4611      	mov	r1, r2
 80080dc:	4798      	blx	r3

    return USBD_OK;
 80080de:	2300      	movs	r3, #0
 80080e0:	e000      	b.n	80080e4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80080e2:	2302      	movs	r3, #2
  }
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3710      	adds	r7, #16
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080fa:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008102:	2b00      	cmp	r3, #0
 8008104:	d015      	beq.n	8008132 <USBD_CDC_EP0_RxReady+0x46>
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800810c:	2bff      	cmp	r3, #255	; 0xff
 800810e:	d010      	beq.n	8008132 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	68fa      	ldr	r2, [r7, #12]
 800811a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800811e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008120:	68fa      	ldr	r2, [r7, #12]
 8008122:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008126:	b292      	uxth	r2, r2
 8008128:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	22ff      	movs	r2, #255	; 0xff
 800812e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3710      	adds	r7, #16
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2243      	movs	r2, #67	; 0x43
 8008148:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800814a:	4b03      	ldr	r3, [pc, #12]	; (8008158 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800814c:	4618      	mov	r0, r3
 800814e:	370c      	adds	r7, #12
 8008150:	46bd      	mov	sp, r7
 8008152:	bc80      	pop	{r7}
 8008154:	4770      	bx	lr
 8008156:	bf00      	nop
 8008158:	200000a4 	.word	0x200000a4

0800815c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2243      	movs	r2, #67	; 0x43
 8008168:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800816a:	4b03      	ldr	r3, [pc, #12]	; (8008178 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800816c:	4618      	mov	r0, r3
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	bc80      	pop	{r7}
 8008174:	4770      	bx	lr
 8008176:	bf00      	nop
 8008178:	20000060 	.word	0x20000060

0800817c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2243      	movs	r2, #67	; 0x43
 8008188:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800818a:	4b03      	ldr	r3, [pc, #12]	; (8008198 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800818c:	4618      	mov	r0, r3
 800818e:	370c      	adds	r7, #12
 8008190:	46bd      	mov	sp, r7
 8008192:	bc80      	pop	{r7}
 8008194:	4770      	bx	lr
 8008196:	bf00      	nop
 8008198:	200000e8 	.word	0x200000e8

0800819c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	220a      	movs	r2, #10
 80081a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80081aa:	4b03      	ldr	r3, [pc, #12]	; (80081b8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	370c      	adds	r7, #12
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bc80      	pop	{r7}
 80081b4:	4770      	bx	lr
 80081b6:	bf00      	nop
 80081b8:	2000001c 	.word	0x2000001c

080081bc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80081bc:	b480      	push	{r7}
 80081be:	b085      	sub	sp, #20
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80081c6:	2302      	movs	r3, #2
 80081c8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d005      	beq.n	80081dc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	683a      	ldr	r2, [r7, #0]
 80081d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80081d8:	2300      	movs	r3, #0
 80081da:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80081dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3714      	adds	r7, #20
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bc80      	pop	{r7}
 80081e6:	4770      	bx	lr

080081e8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b087      	sub	sp, #28
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	4613      	mov	r3, r2
 80081f4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081fc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	68ba      	ldr	r2, [r7, #8]
 8008202:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008206:	88fa      	ldrh	r2, [r7, #6]
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	371c      	adds	r7, #28
 8008214:	46bd      	mov	sp, r7
 8008216:	bc80      	pop	{r7}
 8008218:	4770      	bx	lr

0800821a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800821a:	b480      	push	{r7}
 800821c:	b085      	sub	sp, #20
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
 8008222:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800822a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	683a      	ldr	r2, [r7, #0]
 8008230:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008234:	2300      	movs	r3, #0
}
 8008236:	4618      	mov	r0, r3
 8008238:	3714      	adds	r7, #20
 800823a:	46bd      	mov	sp, r7
 800823c:	bc80      	pop	{r7}
 800823e:	4770      	bx	lr

08008240 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800824e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008256:	2b00      	cmp	r3, #0
 8008258:	d017      	beq.n	800828a <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	7c1b      	ldrb	r3, [r3, #16]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d109      	bne.n	8008276 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008268:	f44f 7300 	mov.w	r3, #512	; 0x200
 800826c:	2101      	movs	r1, #1
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f001 fc9e 	bl	8009bb0 <USBD_LL_PrepareReceive>
 8008274:	e007      	b.n	8008286 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800827c:	2340      	movs	r3, #64	; 0x40
 800827e:	2101      	movs	r1, #1
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f001 fc95 	bl	8009bb0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008286:	2300      	movs	r3, #0
 8008288:	e000      	b.n	800828c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800828a:	2302      	movs	r3, #2
  }
}
 800828c:	4618      	mov	r0, r3
 800828e:	3710      	adds	r7, #16
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	4613      	mov	r3, r2
 80082a0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d101      	bne.n	80082ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80082a8:	2302      	movs	r3, #2
 80082aa:	e01a      	b.n	80082e2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d003      	beq.n	80082be <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d003      	beq.n	80082cc <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	68ba      	ldr	r2, [r7, #8]
 80082c8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	79fa      	ldrb	r2, [r7, #7]
 80082d8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	f001 fb02 	bl	80098e4 <USBD_LL_Init>

  return USBD_OK;
 80082e0:	2300      	movs	r3, #0
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80082ea:	b480      	push	{r7}
 80082ec:	b085      	sub	sp, #20
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
 80082f2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80082f4:	2300      	movs	r3, #0
 80082f6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d006      	beq.n	800830c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	683a      	ldr	r2, [r7, #0]
 8008302:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008306:	2300      	movs	r3, #0
 8008308:	73fb      	strb	r3, [r7, #15]
 800830a:	e001      	b.n	8008310 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800830c:	2302      	movs	r3, #2
 800830e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008310:	7bfb      	ldrb	r3, [r7, #15]
}
 8008312:	4618      	mov	r0, r3
 8008314:	3714      	adds	r7, #20
 8008316:	46bd      	mov	sp, r7
 8008318:	bc80      	pop	{r7}
 800831a:	4770      	bx	lr

0800831c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f001 fb37 	bl	8009998 <USBD_LL_Start>

  return USBD_OK;
 800832a:	2300      	movs	r3, #0
}
 800832c:	4618      	mov	r0, r3
 800832e:	3708      	adds	r7, #8
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	370c      	adds	r7, #12
 8008342:	46bd      	mov	sp, r7
 8008344:	bc80      	pop	{r7}
 8008346:	4770      	bx	lr

08008348 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	460b      	mov	r3, r1
 8008352:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008354:	2302      	movs	r3, #2
 8008356:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00c      	beq.n	800837c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	78fa      	ldrb	r2, [r7, #3]
 800836c:	4611      	mov	r1, r2
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	4798      	blx	r3
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d101      	bne.n	800837c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008378:	2300      	movs	r3, #0
 800837a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800837c:	7bfb      	ldrb	r3, [r7, #15]
}
 800837e:	4618      	mov	r0, r3
 8008380:	3710      	adds	r7, #16
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008386:	b580      	push	{r7, lr}
 8008388:	b082      	sub	sp, #8
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
 800838e:	460b      	mov	r3, r1
 8008390:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	78fa      	ldrb	r2, [r7, #3]
 800839c:	4611      	mov	r1, r2
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	4798      	blx	r3

  return USBD_OK;
 80083a2:	2300      	movs	r3, #0
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3708      	adds	r7, #8
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80083bc:	6839      	ldr	r1, [r7, #0]
 80083be:	4618      	mov	r0, r3
 80083c0:	f000 fed7 	bl	8009172 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80083d2:	461a      	mov	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80083e0:	f003 031f 	and.w	r3, r3, #31
 80083e4:	2b02      	cmp	r3, #2
 80083e6:	d016      	beq.n	8008416 <USBD_LL_SetupStage+0x6a>
 80083e8:	2b02      	cmp	r3, #2
 80083ea:	d81c      	bhi.n	8008426 <USBD_LL_SetupStage+0x7a>
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d002      	beq.n	80083f6 <USBD_LL_SetupStage+0x4a>
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d008      	beq.n	8008406 <USBD_LL_SetupStage+0x5a>
 80083f4:	e017      	b.n	8008426 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80083fc:	4619      	mov	r1, r3
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 f9ca 	bl	8008798 <USBD_StdDevReq>
      break;
 8008404:	e01a      	b.n	800843c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800840c:	4619      	mov	r1, r3
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 fa2c 	bl	800886c <USBD_StdItfReq>
      break;
 8008414:	e012      	b.n	800843c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800841c:	4619      	mov	r1, r3
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 fa6c 	bl	80088fc <USBD_StdEPReq>
      break;
 8008424:	e00a      	b.n	800843c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800842c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008430:	b2db      	uxtb	r3, r3
 8008432:	4619      	mov	r1, r3
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f001 fb0f 	bl	8009a58 <USBD_LL_StallEP>
      break;
 800843a:	bf00      	nop
  }

  return USBD_OK;
 800843c:	2300      	movs	r3, #0
}
 800843e:	4618      	mov	r0, r3
 8008440:	3708      	adds	r7, #8
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}

08008446 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008446:	b580      	push	{r7, lr}
 8008448:	b086      	sub	sp, #24
 800844a:	af00      	add	r7, sp, #0
 800844c:	60f8      	str	r0, [r7, #12]
 800844e:	460b      	mov	r3, r1
 8008450:	607a      	str	r2, [r7, #4]
 8008452:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008454:	7afb      	ldrb	r3, [r7, #11]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d14b      	bne.n	80084f2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008460:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008468:	2b03      	cmp	r3, #3
 800846a:	d134      	bne.n	80084d6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	68da      	ldr	r2, [r3, #12]
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	691b      	ldr	r3, [r3, #16]
 8008474:	429a      	cmp	r2, r3
 8008476:	d919      	bls.n	80084ac <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	68da      	ldr	r2, [r3, #12]
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	1ad2      	subs	r2, r2, r3
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	68da      	ldr	r2, [r3, #12]
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800848e:	429a      	cmp	r2, r3
 8008490:	d203      	bcs.n	800849a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008496:	b29b      	uxth	r3, r3
 8008498:	e002      	b.n	80084a0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800849e:	b29b      	uxth	r3, r3
 80084a0:	461a      	mov	r2, r3
 80084a2:	6879      	ldr	r1, [r7, #4]
 80084a4:	68f8      	ldr	r0, [r7, #12]
 80084a6:	f000 ff56 	bl	8009356 <USBD_CtlContinueRx>
 80084aa:	e038      	b.n	800851e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00a      	beq.n	80084ce <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80084be:	2b03      	cmp	r3, #3
 80084c0:	d105      	bne.n	80084ce <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	68f8      	ldr	r0, [r7, #12]
 80084cc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	f000 ff53 	bl	800937a <USBD_CtlSendStatus>
 80084d4:	e023      	b.n	800851e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80084dc:	2b05      	cmp	r3, #5
 80084de:	d11e      	bne.n	800851e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80084e8:	2100      	movs	r1, #0
 80084ea:	68f8      	ldr	r0, [r7, #12]
 80084ec:	f001 fab4 	bl	8009a58 <USBD_LL_StallEP>
 80084f0:	e015      	b.n	800851e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084f8:	699b      	ldr	r3, [r3, #24]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00d      	beq.n	800851a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008504:	2b03      	cmp	r3, #3
 8008506:	d108      	bne.n	800851a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800850e:	699b      	ldr	r3, [r3, #24]
 8008510:	7afa      	ldrb	r2, [r7, #11]
 8008512:	4611      	mov	r1, r2
 8008514:	68f8      	ldr	r0, [r7, #12]
 8008516:	4798      	blx	r3
 8008518:	e001      	b.n	800851e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800851a:	2302      	movs	r3, #2
 800851c:	e000      	b.n	8008520 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800851e:	2300      	movs	r3, #0
}
 8008520:	4618      	mov	r0, r3
 8008522:	3718      	adds	r7, #24
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b086      	sub	sp, #24
 800852c:	af00      	add	r7, sp, #0
 800852e:	60f8      	str	r0, [r7, #12]
 8008530:	460b      	mov	r3, r1
 8008532:	607a      	str	r2, [r7, #4]
 8008534:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008536:	7afb      	ldrb	r3, [r7, #11]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d17f      	bne.n	800863c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	3314      	adds	r3, #20
 8008540:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008548:	2b02      	cmp	r3, #2
 800854a:	d15c      	bne.n	8008606 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	68da      	ldr	r2, [r3, #12]
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	429a      	cmp	r2, r3
 8008556:	d915      	bls.n	8008584 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	68da      	ldr	r2, [r3, #12]
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	691b      	ldr	r3, [r3, #16]
 8008560:	1ad2      	subs	r2, r2, r3
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	68db      	ldr	r3, [r3, #12]
 800856a:	b29b      	uxth	r3, r3
 800856c:	461a      	mov	r2, r3
 800856e:	6879      	ldr	r1, [r7, #4]
 8008570:	68f8      	ldr	r0, [r7, #12]
 8008572:	f000 fec0 	bl	80092f6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008576:	2300      	movs	r3, #0
 8008578:	2200      	movs	r2, #0
 800857a:	2100      	movs	r1, #0
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	f001 fb17 	bl	8009bb0 <USBD_LL_PrepareReceive>
 8008582:	e04e      	b.n	8008622 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	697a      	ldr	r2, [r7, #20]
 800858a:	6912      	ldr	r2, [r2, #16]
 800858c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008590:	fb01 f202 	mul.w	r2, r1, r2
 8008594:	1a9b      	subs	r3, r3, r2
 8008596:	2b00      	cmp	r3, #0
 8008598:	d11c      	bne.n	80085d4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	689a      	ldr	r2, [r3, #8]
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d316      	bcc.n	80085d4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	689a      	ldr	r2, [r3, #8]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d20f      	bcs.n	80085d4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80085b4:	2200      	movs	r2, #0
 80085b6:	2100      	movs	r1, #0
 80085b8:	68f8      	ldr	r0, [r7, #12]
 80085ba:	f000 fe9c 	bl	80092f6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085c6:	2300      	movs	r3, #0
 80085c8:	2200      	movs	r2, #0
 80085ca:	2100      	movs	r1, #0
 80085cc:	68f8      	ldr	r0, [r7, #12]
 80085ce:	f001 faef 	bl	8009bb0 <USBD_LL_PrepareReceive>
 80085d2:	e026      	b.n	8008622 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00a      	beq.n	80085f6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80085e6:	2b03      	cmp	r3, #3
 80085e8:	d105      	bne.n	80085f6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085f0:	68db      	ldr	r3, [r3, #12]
 80085f2:	68f8      	ldr	r0, [r7, #12]
 80085f4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80085f6:	2180      	movs	r1, #128	; 0x80
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	f001 fa2d 	bl	8009a58 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80085fe:	68f8      	ldr	r0, [r7, #12]
 8008600:	f000 fece 	bl	80093a0 <USBD_CtlReceiveStatus>
 8008604:	e00d      	b.n	8008622 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800860c:	2b04      	cmp	r3, #4
 800860e:	d004      	beq.n	800861a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008616:	2b00      	cmp	r3, #0
 8008618:	d103      	bne.n	8008622 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800861a:	2180      	movs	r1, #128	; 0x80
 800861c:	68f8      	ldr	r0, [r7, #12]
 800861e:	f001 fa1b 	bl	8009a58 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008628:	2b01      	cmp	r3, #1
 800862a:	d11d      	bne.n	8008668 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800862c:	68f8      	ldr	r0, [r7, #12]
 800862e:	f7ff fe81 	bl	8008334 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2200      	movs	r2, #0
 8008636:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800863a:	e015      	b.n	8008668 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008642:	695b      	ldr	r3, [r3, #20]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d00d      	beq.n	8008664 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800864e:	2b03      	cmp	r3, #3
 8008650:	d108      	bne.n	8008664 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008658:	695b      	ldr	r3, [r3, #20]
 800865a:	7afa      	ldrb	r2, [r7, #11]
 800865c:	4611      	mov	r1, r2
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	4798      	blx	r3
 8008662:	e001      	b.n	8008668 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008664:	2302      	movs	r3, #2
 8008666:	e000      	b.n	800866a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008668:	2300      	movs	r3, #0
}
 800866a:	4618      	mov	r0, r3
 800866c:	3718      	adds	r7, #24
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008672:	b580      	push	{r7, lr}
 8008674:	b082      	sub	sp, #8
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800867a:	2340      	movs	r3, #64	; 0x40
 800867c:	2200      	movs	r2, #0
 800867e:	2100      	movs	r1, #0
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f001 f9a4 	bl	80099ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2201      	movs	r2, #1
 800868a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2240      	movs	r2, #64	; 0x40
 8008692:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008696:	2340      	movs	r3, #64	; 0x40
 8008698:	2200      	movs	r2, #0
 800869a:	2180      	movs	r1, #128	; 0x80
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f001 f996 	bl	80099ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2201      	movs	r2, #1
 80086a6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2240      	movs	r2, #64	; 0x40
 80086ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2201      	movs	r2, #1
 80086b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d009      	beq.n	80086ea <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	6852      	ldr	r2, [r2, #4]
 80086e2:	b2d2      	uxtb	r2, r2
 80086e4:	4611      	mov	r1, r2
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	4798      	blx	r3
  }

  return USBD_OK;
 80086ea:	2300      	movs	r3, #0
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3708      	adds	r7, #8
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	460b      	mov	r3, r1
 80086fe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	78fa      	ldrb	r2, [r7, #3]
 8008704:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008706:	2300      	movs	r3, #0
}
 8008708:	4618      	mov	r0, r3
 800870a:	370c      	adds	r7, #12
 800870c:	46bd      	mov	sp, r7
 800870e:	bc80      	pop	{r7}
 8008710:	4770      	bx	lr

08008712 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008712:	b480      	push	{r7}
 8008714:	b083      	sub	sp, #12
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2204      	movs	r2, #4
 800872a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800872e:	2300      	movs	r3, #0
}
 8008730:	4618      	mov	r0, r3
 8008732:	370c      	adds	r7, #12
 8008734:	46bd      	mov	sp, r7
 8008736:	bc80      	pop	{r7}
 8008738:	4770      	bx	lr

0800873a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800873a:	b480      	push	{r7}
 800873c:	b083      	sub	sp, #12
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008748:	2b04      	cmp	r3, #4
 800874a:	d105      	bne.n	8008758 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008758:	2300      	movs	r3, #0
}
 800875a:	4618      	mov	r0, r3
 800875c:	370c      	adds	r7, #12
 800875e:	46bd      	mov	sp, r7
 8008760:	bc80      	pop	{r7}
 8008762:	4770      	bx	lr

08008764 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008772:	2b03      	cmp	r3, #3
 8008774:	d10b      	bne.n	800878e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800877c:	69db      	ldr	r3, [r3, #28]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d005      	beq.n	800878e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008788:	69db      	ldr	r3, [r3, #28]
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800878e:	2300      	movs	r3, #0
}
 8008790:	4618      	mov	r0, r3
 8008792:	3708      	adds	r7, #8
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087a2:	2300      	movs	r3, #0
 80087a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087ae:	2b40      	cmp	r3, #64	; 0x40
 80087b0:	d005      	beq.n	80087be <USBD_StdDevReq+0x26>
 80087b2:	2b40      	cmp	r3, #64	; 0x40
 80087b4:	d84f      	bhi.n	8008856 <USBD_StdDevReq+0xbe>
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d009      	beq.n	80087ce <USBD_StdDevReq+0x36>
 80087ba:	2b20      	cmp	r3, #32
 80087bc:	d14b      	bne.n	8008856 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	6839      	ldr	r1, [r7, #0]
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	4798      	blx	r3
      break;
 80087cc:	e048      	b.n	8008860 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	785b      	ldrb	r3, [r3, #1]
 80087d2:	2b09      	cmp	r3, #9
 80087d4:	d839      	bhi.n	800884a <USBD_StdDevReq+0xb2>
 80087d6:	a201      	add	r2, pc, #4	; (adr r2, 80087dc <USBD_StdDevReq+0x44>)
 80087d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087dc:	0800882d 	.word	0x0800882d
 80087e0:	08008841 	.word	0x08008841
 80087e4:	0800884b 	.word	0x0800884b
 80087e8:	08008837 	.word	0x08008837
 80087ec:	0800884b 	.word	0x0800884b
 80087f0:	0800880f 	.word	0x0800880f
 80087f4:	08008805 	.word	0x08008805
 80087f8:	0800884b 	.word	0x0800884b
 80087fc:	08008823 	.word	0x08008823
 8008800:	08008819 	.word	0x08008819
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008804:	6839      	ldr	r1, [r7, #0]
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 f9dc 	bl	8008bc4 <USBD_GetDescriptor>
          break;
 800880c:	e022      	b.n	8008854 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800880e:	6839      	ldr	r1, [r7, #0]
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 fb3f 	bl	8008e94 <USBD_SetAddress>
          break;
 8008816:	e01d      	b.n	8008854 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008818:	6839      	ldr	r1, [r7, #0]
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 fb7e 	bl	8008f1c <USBD_SetConfig>
          break;
 8008820:	e018      	b.n	8008854 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008822:	6839      	ldr	r1, [r7, #0]
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 fc07 	bl	8009038 <USBD_GetConfig>
          break;
 800882a:	e013      	b.n	8008854 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800882c:	6839      	ldr	r1, [r7, #0]
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 fc37 	bl	80090a2 <USBD_GetStatus>
          break;
 8008834:	e00e      	b.n	8008854 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008836:	6839      	ldr	r1, [r7, #0]
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 fc65 	bl	8009108 <USBD_SetFeature>
          break;
 800883e:	e009      	b.n	8008854 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008840:	6839      	ldr	r1, [r7, #0]
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 fc74 	bl	8009130 <USBD_ClrFeature>
          break;
 8008848:	e004      	b.n	8008854 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800884a:	6839      	ldr	r1, [r7, #0]
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 fccc 	bl	80091ea <USBD_CtlError>
          break;
 8008852:	bf00      	nop
      }
      break;
 8008854:	e004      	b.n	8008860 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008856:	6839      	ldr	r1, [r7, #0]
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 fcc6 	bl	80091ea <USBD_CtlError>
      break;
 800885e:	bf00      	nop
  }

  return ret;
 8008860:	7bfb      	ldrb	r3, [r7, #15]
}
 8008862:	4618      	mov	r0, r3
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop

0800886c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008876:	2300      	movs	r3, #0
 8008878:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008882:	2b40      	cmp	r3, #64	; 0x40
 8008884:	d005      	beq.n	8008892 <USBD_StdItfReq+0x26>
 8008886:	2b40      	cmp	r3, #64	; 0x40
 8008888:	d82e      	bhi.n	80088e8 <USBD_StdItfReq+0x7c>
 800888a:	2b00      	cmp	r3, #0
 800888c:	d001      	beq.n	8008892 <USBD_StdItfReq+0x26>
 800888e:	2b20      	cmp	r3, #32
 8008890:	d12a      	bne.n	80088e8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008898:	3b01      	subs	r3, #1
 800889a:	2b02      	cmp	r3, #2
 800889c:	d81d      	bhi.n	80088da <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	889b      	ldrh	r3, [r3, #4]
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d813      	bhi.n	80088d0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	6839      	ldr	r1, [r7, #0]
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	4798      	blx	r3
 80088b6:	4603      	mov	r3, r0
 80088b8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	88db      	ldrh	r3, [r3, #6]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d110      	bne.n	80088e4 <USBD_StdItfReq+0x78>
 80088c2:	7bfb      	ldrb	r3, [r7, #15]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d10d      	bne.n	80088e4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 fd56 	bl	800937a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80088ce:	e009      	b.n	80088e4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80088d0:	6839      	ldr	r1, [r7, #0]
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 fc89 	bl	80091ea <USBD_CtlError>
          break;
 80088d8:	e004      	b.n	80088e4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80088da:	6839      	ldr	r1, [r7, #0]
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 fc84 	bl	80091ea <USBD_CtlError>
          break;
 80088e2:	e000      	b.n	80088e6 <USBD_StdItfReq+0x7a>
          break;
 80088e4:	bf00      	nop
      }
      break;
 80088e6:	e004      	b.n	80088f2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80088e8:	6839      	ldr	r1, [r7, #0]
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 fc7d 	bl	80091ea <USBD_CtlError>
      break;
 80088f0:	bf00      	nop
  }

  return USBD_OK;
 80088f2:	2300      	movs	r3, #0
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3710      	adds	r7, #16
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008906:	2300      	movs	r3, #0
 8008908:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	889b      	ldrh	r3, [r3, #4]
 800890e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008918:	2b40      	cmp	r3, #64	; 0x40
 800891a:	d007      	beq.n	800892c <USBD_StdEPReq+0x30>
 800891c:	2b40      	cmp	r3, #64	; 0x40
 800891e:	f200 8146 	bhi.w	8008bae <USBD_StdEPReq+0x2b2>
 8008922:	2b00      	cmp	r3, #0
 8008924:	d00a      	beq.n	800893c <USBD_StdEPReq+0x40>
 8008926:	2b20      	cmp	r3, #32
 8008928:	f040 8141 	bne.w	8008bae <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	6839      	ldr	r1, [r7, #0]
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	4798      	blx	r3
      break;
 800893a:	e13d      	b.n	8008bb8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008944:	2b20      	cmp	r3, #32
 8008946:	d10a      	bne.n	800895e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800894e:	689b      	ldr	r3, [r3, #8]
 8008950:	6839      	ldr	r1, [r7, #0]
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	4798      	blx	r3
 8008956:	4603      	mov	r3, r0
 8008958:	73fb      	strb	r3, [r7, #15]

        return ret;
 800895a:	7bfb      	ldrb	r3, [r7, #15]
 800895c:	e12d      	b.n	8008bba <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	785b      	ldrb	r3, [r3, #1]
 8008962:	2b03      	cmp	r3, #3
 8008964:	d007      	beq.n	8008976 <USBD_StdEPReq+0x7a>
 8008966:	2b03      	cmp	r3, #3
 8008968:	f300 811b 	bgt.w	8008ba2 <USBD_StdEPReq+0x2a6>
 800896c:	2b00      	cmp	r3, #0
 800896e:	d072      	beq.n	8008a56 <USBD_StdEPReq+0x15a>
 8008970:	2b01      	cmp	r3, #1
 8008972:	d03a      	beq.n	80089ea <USBD_StdEPReq+0xee>
 8008974:	e115      	b.n	8008ba2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800897c:	2b02      	cmp	r3, #2
 800897e:	d002      	beq.n	8008986 <USBD_StdEPReq+0x8a>
 8008980:	2b03      	cmp	r3, #3
 8008982:	d015      	beq.n	80089b0 <USBD_StdEPReq+0xb4>
 8008984:	e02b      	b.n	80089de <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008986:	7bbb      	ldrb	r3, [r7, #14]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00c      	beq.n	80089a6 <USBD_StdEPReq+0xaa>
 800898c:	7bbb      	ldrb	r3, [r7, #14]
 800898e:	2b80      	cmp	r3, #128	; 0x80
 8008990:	d009      	beq.n	80089a6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008992:	7bbb      	ldrb	r3, [r7, #14]
 8008994:	4619      	mov	r1, r3
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f001 f85e 	bl	8009a58 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800899c:	2180      	movs	r1, #128	; 0x80
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f001 f85a 	bl	8009a58 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80089a4:	e020      	b.n	80089e8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80089a6:	6839      	ldr	r1, [r7, #0]
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 fc1e 	bl	80091ea <USBD_CtlError>
              break;
 80089ae:	e01b      	b.n	80089e8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	885b      	ldrh	r3, [r3, #2]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d10e      	bne.n	80089d6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80089b8:	7bbb      	ldrb	r3, [r7, #14]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00b      	beq.n	80089d6 <USBD_StdEPReq+0xda>
 80089be:	7bbb      	ldrb	r3, [r7, #14]
 80089c0:	2b80      	cmp	r3, #128	; 0x80
 80089c2:	d008      	beq.n	80089d6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	88db      	ldrh	r3, [r3, #6]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d104      	bne.n	80089d6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80089cc:	7bbb      	ldrb	r3, [r7, #14]
 80089ce:	4619      	mov	r1, r3
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f001 f841 	bl	8009a58 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 fccf 	bl	800937a <USBD_CtlSendStatus>

              break;
 80089dc:	e004      	b.n	80089e8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80089de:	6839      	ldr	r1, [r7, #0]
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 fc02 	bl	80091ea <USBD_CtlError>
              break;
 80089e6:	bf00      	nop
          }
          break;
 80089e8:	e0e0      	b.n	8008bac <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089f0:	2b02      	cmp	r3, #2
 80089f2:	d002      	beq.n	80089fa <USBD_StdEPReq+0xfe>
 80089f4:	2b03      	cmp	r3, #3
 80089f6:	d015      	beq.n	8008a24 <USBD_StdEPReq+0x128>
 80089f8:	e026      	b.n	8008a48 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089fa:	7bbb      	ldrb	r3, [r7, #14]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d00c      	beq.n	8008a1a <USBD_StdEPReq+0x11e>
 8008a00:	7bbb      	ldrb	r3, [r7, #14]
 8008a02:	2b80      	cmp	r3, #128	; 0x80
 8008a04:	d009      	beq.n	8008a1a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008a06:	7bbb      	ldrb	r3, [r7, #14]
 8008a08:	4619      	mov	r1, r3
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f001 f824 	bl	8009a58 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008a10:	2180      	movs	r1, #128	; 0x80
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f001 f820 	bl	8009a58 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a18:	e01c      	b.n	8008a54 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008a1a:	6839      	ldr	r1, [r7, #0]
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 fbe4 	bl	80091ea <USBD_CtlError>
              break;
 8008a22:	e017      	b.n	8008a54 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	885b      	ldrh	r3, [r3, #2]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d112      	bne.n	8008a52 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008a2c:	7bbb      	ldrb	r3, [r7, #14]
 8008a2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d004      	beq.n	8008a40 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008a36:	7bbb      	ldrb	r3, [r7, #14]
 8008a38:	4619      	mov	r1, r3
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f001 f82b 	bl	8009a96 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 fc9a 	bl	800937a <USBD_CtlSendStatus>
              }
              break;
 8008a46:	e004      	b.n	8008a52 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008a48:	6839      	ldr	r1, [r7, #0]
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 fbcd 	bl	80091ea <USBD_CtlError>
              break;
 8008a50:	e000      	b.n	8008a54 <USBD_StdEPReq+0x158>
              break;
 8008a52:	bf00      	nop
          }
          break;
 8008a54:	e0aa      	b.n	8008bac <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	d002      	beq.n	8008a66 <USBD_StdEPReq+0x16a>
 8008a60:	2b03      	cmp	r3, #3
 8008a62:	d032      	beq.n	8008aca <USBD_StdEPReq+0x1ce>
 8008a64:	e097      	b.n	8008b96 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a66:	7bbb      	ldrb	r3, [r7, #14]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d007      	beq.n	8008a7c <USBD_StdEPReq+0x180>
 8008a6c:	7bbb      	ldrb	r3, [r7, #14]
 8008a6e:	2b80      	cmp	r3, #128	; 0x80
 8008a70:	d004      	beq.n	8008a7c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008a72:	6839      	ldr	r1, [r7, #0]
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 fbb8 	bl	80091ea <USBD_CtlError>
                break;
 8008a7a:	e091      	b.n	8008ba0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	da0b      	bge.n	8008a9c <USBD_StdEPReq+0x1a0>
 8008a84:	7bbb      	ldrb	r3, [r7, #14]
 8008a86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a8a:	4613      	mov	r3, r2
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	4413      	add	r3, r2
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	3310      	adds	r3, #16
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	4413      	add	r3, r2
 8008a98:	3304      	adds	r3, #4
 8008a9a:	e00b      	b.n	8008ab4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a9c:	7bbb      	ldrb	r3, [r7, #14]
 8008a9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008aa2:	4613      	mov	r3, r2
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	4413      	add	r3, r2
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	3304      	adds	r3, #4
 8008ab4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	2202      	movs	r2, #2
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 fbfb 	bl	80092be <USBD_CtlSendData>
              break;
 8008ac8:	e06a      	b.n	8008ba0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008aca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	da11      	bge.n	8008af6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008ad2:	7bbb      	ldrb	r3, [r7, #14]
 8008ad4:	f003 020f 	and.w	r2, r3, #15
 8008ad8:	6879      	ldr	r1, [r7, #4]
 8008ada:	4613      	mov	r3, r2
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	4413      	add	r3, r2
 8008ae0:	009b      	lsls	r3, r3, #2
 8008ae2:	440b      	add	r3, r1
 8008ae4:	3318      	adds	r3, #24
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d117      	bne.n	8008b1c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008aec:	6839      	ldr	r1, [r7, #0]
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 fb7b 	bl	80091ea <USBD_CtlError>
                  break;
 8008af4:	e054      	b.n	8008ba0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008af6:	7bbb      	ldrb	r3, [r7, #14]
 8008af8:	f003 020f 	and.w	r2, r3, #15
 8008afc:	6879      	ldr	r1, [r7, #4]
 8008afe:	4613      	mov	r3, r2
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	4413      	add	r3, r2
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	440b      	add	r3, r1
 8008b08:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d104      	bne.n	8008b1c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008b12:	6839      	ldr	r1, [r7, #0]
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 fb68 	bl	80091ea <USBD_CtlError>
                  break;
 8008b1a:	e041      	b.n	8008ba0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	da0b      	bge.n	8008b3c <USBD_StdEPReq+0x240>
 8008b24:	7bbb      	ldrb	r3, [r7, #14]
 8008b26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b2a:	4613      	mov	r3, r2
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	4413      	add	r3, r2
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	3310      	adds	r3, #16
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	4413      	add	r3, r2
 8008b38:	3304      	adds	r3, #4
 8008b3a:	e00b      	b.n	8008b54 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008b3c:	7bbb      	ldrb	r3, [r7, #14]
 8008b3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b42:	4613      	mov	r3, r2
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	4413      	add	r3, r2
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	4413      	add	r3, r2
 8008b52:	3304      	adds	r3, #4
 8008b54:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008b56:	7bbb      	ldrb	r3, [r7, #14]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d002      	beq.n	8008b62 <USBD_StdEPReq+0x266>
 8008b5c:	7bbb      	ldrb	r3, [r7, #14]
 8008b5e:	2b80      	cmp	r3, #128	; 0x80
 8008b60:	d103      	bne.n	8008b6a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	2200      	movs	r2, #0
 8008b66:	601a      	str	r2, [r3, #0]
 8008b68:	e00e      	b.n	8008b88 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008b6a:	7bbb      	ldrb	r3, [r7, #14]
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 ffb0 	bl	8009ad4 <USBD_LL_IsStallEP>
 8008b74:	4603      	mov	r3, r0
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d003      	beq.n	8008b82 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	601a      	str	r2, [r3, #0]
 8008b80:	e002      	b.n	8008b88 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	2200      	movs	r2, #0
 8008b86:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	2202      	movs	r2, #2
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 fb95 	bl	80092be <USBD_CtlSendData>
              break;
 8008b94:	e004      	b.n	8008ba0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008b96:	6839      	ldr	r1, [r7, #0]
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 fb26 	bl	80091ea <USBD_CtlError>
              break;
 8008b9e:	bf00      	nop
          }
          break;
 8008ba0:	e004      	b.n	8008bac <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008ba2:	6839      	ldr	r1, [r7, #0]
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 fb20 	bl	80091ea <USBD_CtlError>
          break;
 8008baa:	bf00      	nop
      }
      break;
 8008bac:	e004      	b.n	8008bb8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008bae:	6839      	ldr	r1, [r7, #0]
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 fb1a 	bl	80091ea <USBD_CtlError>
      break;
 8008bb6:	bf00      	nop
  }

  return ret;
 8008bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3710      	adds	r7, #16
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
	...

08008bc4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b084      	sub	sp, #16
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	885b      	ldrh	r3, [r3, #2]
 8008bde:	0a1b      	lsrs	r3, r3, #8
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	3b01      	subs	r3, #1
 8008be4:	2b06      	cmp	r3, #6
 8008be6:	f200 8128 	bhi.w	8008e3a <USBD_GetDescriptor+0x276>
 8008bea:	a201      	add	r2, pc, #4	; (adr r2, 8008bf0 <USBD_GetDescriptor+0x2c>)
 8008bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf0:	08008c0d 	.word	0x08008c0d
 8008bf4:	08008c25 	.word	0x08008c25
 8008bf8:	08008c65 	.word	0x08008c65
 8008bfc:	08008e3b 	.word	0x08008e3b
 8008c00:	08008e3b 	.word	0x08008e3b
 8008c04:	08008ddb 	.word	0x08008ddb
 8008c08:	08008e07 	.word	0x08008e07
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	7c12      	ldrb	r2, [r2, #16]
 8008c18:	f107 0108 	add.w	r1, r7, #8
 8008c1c:	4610      	mov	r0, r2
 8008c1e:	4798      	blx	r3
 8008c20:	60f8      	str	r0, [r7, #12]
      break;
 8008c22:	e112      	b.n	8008e4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	7c1b      	ldrb	r3, [r3, #16]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d10d      	bne.n	8008c48 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c34:	f107 0208 	add.w	r2, r7, #8
 8008c38:	4610      	mov	r0, r2
 8008c3a:	4798      	blx	r3
 8008c3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	3301      	adds	r3, #1
 8008c42:	2202      	movs	r2, #2
 8008c44:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008c46:	e100      	b.n	8008e4a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c50:	f107 0208 	add.w	r2, r7, #8
 8008c54:	4610      	mov	r0, r2
 8008c56:	4798      	blx	r3
 8008c58:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	2202      	movs	r2, #2
 8008c60:	701a      	strb	r2, [r3, #0]
      break;
 8008c62:	e0f2      	b.n	8008e4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	885b      	ldrh	r3, [r3, #2]
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	2b05      	cmp	r3, #5
 8008c6c:	f200 80ac 	bhi.w	8008dc8 <USBD_GetDescriptor+0x204>
 8008c70:	a201      	add	r2, pc, #4	; (adr r2, 8008c78 <USBD_GetDescriptor+0xb4>)
 8008c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c76:	bf00      	nop
 8008c78:	08008c91 	.word	0x08008c91
 8008c7c:	08008cc5 	.word	0x08008cc5
 8008c80:	08008cf9 	.word	0x08008cf9
 8008c84:	08008d2d 	.word	0x08008d2d
 8008c88:	08008d61 	.word	0x08008d61
 8008c8c:	08008d95 	.word	0x08008d95
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d00b      	beq.n	8008cb4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	7c12      	ldrb	r2, [r2, #16]
 8008ca8:	f107 0108 	add.w	r1, r7, #8
 8008cac:	4610      	mov	r0, r2
 8008cae:	4798      	blx	r3
 8008cb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cb2:	e091      	b.n	8008dd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cb4:	6839      	ldr	r1, [r7, #0]
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 fa97 	bl	80091ea <USBD_CtlError>
            err++;
 8008cbc:	7afb      	ldrb	r3, [r7, #11]
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	72fb      	strb	r3, [r7, #11]
          break;
 8008cc2:	e089      	b.n	8008dd8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008cca:	689b      	ldr	r3, [r3, #8]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d00b      	beq.n	8008ce8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	7c12      	ldrb	r2, [r2, #16]
 8008cdc:	f107 0108 	add.w	r1, r7, #8
 8008ce0:	4610      	mov	r0, r2
 8008ce2:	4798      	blx	r3
 8008ce4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ce6:	e077      	b.n	8008dd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ce8:	6839      	ldr	r1, [r7, #0]
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 fa7d 	bl	80091ea <USBD_CtlError>
            err++;
 8008cf0:	7afb      	ldrb	r3, [r7, #11]
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	72fb      	strb	r3, [r7, #11]
          break;
 8008cf6:	e06f      	b.n	8008dd8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008cfe:	68db      	ldr	r3, [r3, #12]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d00b      	beq.n	8008d1c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	7c12      	ldrb	r2, [r2, #16]
 8008d10:	f107 0108 	add.w	r1, r7, #8
 8008d14:	4610      	mov	r0, r2
 8008d16:	4798      	blx	r3
 8008d18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d1a:	e05d      	b.n	8008dd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d1c:	6839      	ldr	r1, [r7, #0]
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 fa63 	bl	80091ea <USBD_CtlError>
            err++;
 8008d24:	7afb      	ldrb	r3, [r7, #11]
 8008d26:	3301      	adds	r3, #1
 8008d28:	72fb      	strb	r3, [r7, #11]
          break;
 8008d2a:	e055      	b.n	8008dd8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d32:	691b      	ldr	r3, [r3, #16]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d00b      	beq.n	8008d50 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d3e:	691b      	ldr	r3, [r3, #16]
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	7c12      	ldrb	r2, [r2, #16]
 8008d44:	f107 0108 	add.w	r1, r7, #8
 8008d48:	4610      	mov	r0, r2
 8008d4a:	4798      	blx	r3
 8008d4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d4e:	e043      	b.n	8008dd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d50:	6839      	ldr	r1, [r7, #0]
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 fa49 	bl	80091ea <USBD_CtlError>
            err++;
 8008d58:	7afb      	ldrb	r3, [r7, #11]
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	72fb      	strb	r3, [r7, #11]
          break;
 8008d5e:	e03b      	b.n	8008dd8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d66:	695b      	ldr	r3, [r3, #20]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d00b      	beq.n	8008d84 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d72:	695b      	ldr	r3, [r3, #20]
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	7c12      	ldrb	r2, [r2, #16]
 8008d78:	f107 0108 	add.w	r1, r7, #8
 8008d7c:	4610      	mov	r0, r2
 8008d7e:	4798      	blx	r3
 8008d80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d82:	e029      	b.n	8008dd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d84:	6839      	ldr	r1, [r7, #0]
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 fa2f 	bl	80091ea <USBD_CtlError>
            err++;
 8008d8c:	7afb      	ldrb	r3, [r7, #11]
 8008d8e:	3301      	adds	r3, #1
 8008d90:	72fb      	strb	r3, [r7, #11]
          break;
 8008d92:	e021      	b.n	8008dd8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d9a:	699b      	ldr	r3, [r3, #24]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d00b      	beq.n	8008db8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008da6:	699b      	ldr	r3, [r3, #24]
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	7c12      	ldrb	r2, [r2, #16]
 8008dac:	f107 0108 	add.w	r1, r7, #8
 8008db0:	4610      	mov	r0, r2
 8008db2:	4798      	blx	r3
 8008db4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008db6:	e00f      	b.n	8008dd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008db8:	6839      	ldr	r1, [r7, #0]
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 fa15 	bl	80091ea <USBD_CtlError>
            err++;
 8008dc0:	7afb      	ldrb	r3, [r7, #11]
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	72fb      	strb	r3, [r7, #11]
          break;
 8008dc6:	e007      	b.n	8008dd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008dc8:	6839      	ldr	r1, [r7, #0]
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 fa0d 	bl	80091ea <USBD_CtlError>
          err++;
 8008dd0:	7afb      	ldrb	r3, [r7, #11]
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008dd6:	e038      	b.n	8008e4a <USBD_GetDescriptor+0x286>
 8008dd8:	e037      	b.n	8008e4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	7c1b      	ldrb	r3, [r3, #16]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d109      	bne.n	8008df6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dea:	f107 0208 	add.w	r2, r7, #8
 8008dee:	4610      	mov	r0, r2
 8008df0:	4798      	blx	r3
 8008df2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008df4:	e029      	b.n	8008e4a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008df6:	6839      	ldr	r1, [r7, #0]
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 f9f6 	bl	80091ea <USBD_CtlError>
        err++;
 8008dfe:	7afb      	ldrb	r3, [r7, #11]
 8008e00:	3301      	adds	r3, #1
 8008e02:	72fb      	strb	r3, [r7, #11]
      break;
 8008e04:	e021      	b.n	8008e4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	7c1b      	ldrb	r3, [r3, #16]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d10d      	bne.n	8008e2a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e16:	f107 0208 	add.w	r2, r7, #8
 8008e1a:	4610      	mov	r0, r2
 8008e1c:	4798      	blx	r3
 8008e1e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	3301      	adds	r3, #1
 8008e24:	2207      	movs	r2, #7
 8008e26:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e28:	e00f      	b.n	8008e4a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008e2a:	6839      	ldr	r1, [r7, #0]
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 f9dc 	bl	80091ea <USBD_CtlError>
        err++;
 8008e32:	7afb      	ldrb	r3, [r7, #11]
 8008e34:	3301      	adds	r3, #1
 8008e36:	72fb      	strb	r3, [r7, #11]
      break;
 8008e38:	e007      	b.n	8008e4a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008e3a:	6839      	ldr	r1, [r7, #0]
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 f9d4 	bl	80091ea <USBD_CtlError>
      err++;
 8008e42:	7afb      	ldrb	r3, [r7, #11]
 8008e44:	3301      	adds	r3, #1
 8008e46:	72fb      	strb	r3, [r7, #11]
      break;
 8008e48:	bf00      	nop
  }

  if (err != 0U)
 8008e4a:	7afb      	ldrb	r3, [r7, #11]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d11c      	bne.n	8008e8a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008e50:	893b      	ldrh	r3, [r7, #8]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d011      	beq.n	8008e7a <USBD_GetDescriptor+0x2b6>
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	88db      	ldrh	r3, [r3, #6]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00d      	beq.n	8008e7a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	88da      	ldrh	r2, [r3, #6]
 8008e62:	893b      	ldrh	r3, [r7, #8]
 8008e64:	4293      	cmp	r3, r2
 8008e66:	bf28      	it	cs
 8008e68:	4613      	movcs	r3, r2
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008e6e:	893b      	ldrh	r3, [r7, #8]
 8008e70:	461a      	mov	r2, r3
 8008e72:	68f9      	ldr	r1, [r7, #12]
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 fa22 	bl	80092be <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	88db      	ldrh	r3, [r3, #6]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d104      	bne.n	8008e8c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 fa79 	bl	800937a <USBD_CtlSendStatus>
 8008e88:	e000      	b.n	8008e8c <USBD_GetDescriptor+0x2c8>
    return;
 8008e8a:	bf00      	nop
    }
  }
}
 8008e8c:	3710      	adds	r7, #16
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
 8008e92:	bf00      	nop

08008e94 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	889b      	ldrh	r3, [r3, #4]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d130      	bne.n	8008f08 <USBD_SetAddress+0x74>
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	88db      	ldrh	r3, [r3, #6]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d12c      	bne.n	8008f08 <USBD_SetAddress+0x74>
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	885b      	ldrh	r3, [r3, #2]
 8008eb2:	2b7f      	cmp	r3, #127	; 0x7f
 8008eb4:	d828      	bhi.n	8008f08 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	885b      	ldrh	r3, [r3, #2]
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ec0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ec8:	2b03      	cmp	r3, #3
 8008eca:	d104      	bne.n	8008ed6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008ecc:	6839      	ldr	r1, [r7, #0]
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 f98b 	bl	80091ea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ed4:	e01d      	b.n	8008f12 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	7bfa      	ldrb	r2, [r7, #15]
 8008eda:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008ede:	7bfb      	ldrb	r3, [r7, #15]
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 fe22 	bl	8009b2c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 fa46 	bl	800937a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008eee:	7bfb      	ldrb	r3, [r7, #15]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d004      	beq.n	8008efe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2202      	movs	r2, #2
 8008ef8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008efc:	e009      	b.n	8008f12 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2201      	movs	r2, #1
 8008f02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f06:	e004      	b.n	8008f12 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008f08:	6839      	ldr	r1, [r7, #0]
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 f96d 	bl	80091ea <USBD_CtlError>
  }
}
 8008f10:	bf00      	nop
 8008f12:	bf00      	nop
 8008f14:	3710      	adds	r7, #16
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
	...

08008f1c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b082      	sub	sp, #8
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	885b      	ldrh	r3, [r3, #2]
 8008f2a:	b2da      	uxtb	r2, r3
 8008f2c:	4b41      	ldr	r3, [pc, #260]	; (8009034 <USBD_SetConfig+0x118>)
 8008f2e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008f30:	4b40      	ldr	r3, [pc, #256]	; (8009034 <USBD_SetConfig+0x118>)
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d904      	bls.n	8008f42 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008f38:	6839      	ldr	r1, [r7, #0]
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 f955 	bl	80091ea <USBD_CtlError>
 8008f40:	e075      	b.n	800902e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f48:	2b02      	cmp	r3, #2
 8008f4a:	d002      	beq.n	8008f52 <USBD_SetConfig+0x36>
 8008f4c:	2b03      	cmp	r3, #3
 8008f4e:	d023      	beq.n	8008f98 <USBD_SetConfig+0x7c>
 8008f50:	e062      	b.n	8009018 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008f52:	4b38      	ldr	r3, [pc, #224]	; (8009034 <USBD_SetConfig+0x118>)
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d01a      	beq.n	8008f90 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008f5a:	4b36      	ldr	r3, [pc, #216]	; (8009034 <USBD_SetConfig+0x118>)
 8008f5c:	781b      	ldrb	r3, [r3, #0]
 8008f5e:	461a      	mov	r2, r3
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2203      	movs	r2, #3
 8008f68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008f6c:	4b31      	ldr	r3, [pc, #196]	; (8009034 <USBD_SetConfig+0x118>)
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	4619      	mov	r1, r3
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f7ff f9e8 	bl	8008348 <USBD_SetClassConfig>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b02      	cmp	r3, #2
 8008f7c:	d104      	bne.n	8008f88 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008f7e:	6839      	ldr	r1, [r7, #0]
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 f932 	bl	80091ea <USBD_CtlError>
            return;
 8008f86:	e052      	b.n	800902e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 f9f6 	bl	800937a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008f8e:	e04e      	b.n	800902e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 f9f2 	bl	800937a <USBD_CtlSendStatus>
        break;
 8008f96:	e04a      	b.n	800902e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008f98:	4b26      	ldr	r3, [pc, #152]	; (8009034 <USBD_SetConfig+0x118>)
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d112      	bne.n	8008fc6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2202      	movs	r2, #2
 8008fa4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008fa8:	4b22      	ldr	r3, [pc, #136]	; (8009034 <USBD_SetConfig+0x118>)
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	461a      	mov	r2, r3
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008fb2:	4b20      	ldr	r3, [pc, #128]	; (8009034 <USBD_SetConfig+0x118>)
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f7ff f9e4 	bl	8008386 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 f9db 	bl	800937a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008fc4:	e033      	b.n	800902e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008fc6:	4b1b      	ldr	r3, [pc, #108]	; (8009034 <USBD_SetConfig+0x118>)
 8008fc8:	781b      	ldrb	r3, [r3, #0]
 8008fca:	461a      	mov	r2, r3
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d01d      	beq.n	8009010 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	4619      	mov	r1, r3
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f7ff f9d2 	bl	8008386 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008fe2:	4b14      	ldr	r3, [pc, #80]	; (8009034 <USBD_SetConfig+0x118>)
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008fec:	4b11      	ldr	r3, [pc, #68]	; (8009034 <USBD_SetConfig+0x118>)
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f7ff f9a8 	bl	8008348 <USBD_SetClassConfig>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b02      	cmp	r3, #2
 8008ffc:	d104      	bne.n	8009008 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008ffe:	6839      	ldr	r1, [r7, #0]
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 f8f2 	bl	80091ea <USBD_CtlError>
            return;
 8009006:	e012      	b.n	800902e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 f9b6 	bl	800937a <USBD_CtlSendStatus>
        break;
 800900e:	e00e      	b.n	800902e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 f9b2 	bl	800937a <USBD_CtlSendStatus>
        break;
 8009016:	e00a      	b.n	800902e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009018:	6839      	ldr	r1, [r7, #0]
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 f8e5 	bl	80091ea <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009020:	4b04      	ldr	r3, [pc, #16]	; (8009034 <USBD_SetConfig+0x118>)
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	4619      	mov	r1, r3
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f7ff f9ad 	bl	8008386 <USBD_ClrClassConfig>
        break;
 800902c:	bf00      	nop
    }
  }
}
 800902e:	3708      	adds	r7, #8
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}
 8009034:	20000360 	.word	0x20000360

08009038 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	88db      	ldrh	r3, [r3, #6]
 8009046:	2b01      	cmp	r3, #1
 8009048:	d004      	beq.n	8009054 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800904a:	6839      	ldr	r1, [r7, #0]
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 f8cc 	bl	80091ea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009052:	e022      	b.n	800909a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800905a:	2b02      	cmp	r3, #2
 800905c:	dc02      	bgt.n	8009064 <USBD_GetConfig+0x2c>
 800905e:	2b00      	cmp	r3, #0
 8009060:	dc03      	bgt.n	800906a <USBD_GetConfig+0x32>
 8009062:	e015      	b.n	8009090 <USBD_GetConfig+0x58>
 8009064:	2b03      	cmp	r3, #3
 8009066:	d00b      	beq.n	8009080 <USBD_GetConfig+0x48>
 8009068:	e012      	b.n	8009090 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	3308      	adds	r3, #8
 8009074:	2201      	movs	r2, #1
 8009076:	4619      	mov	r1, r3
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 f920 	bl	80092be <USBD_CtlSendData>
        break;
 800907e:	e00c      	b.n	800909a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	3304      	adds	r3, #4
 8009084:	2201      	movs	r2, #1
 8009086:	4619      	mov	r1, r3
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 f918 	bl	80092be <USBD_CtlSendData>
        break;
 800908e:	e004      	b.n	800909a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009090:	6839      	ldr	r1, [r7, #0]
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 f8a9 	bl	80091ea <USBD_CtlError>
        break;
 8009098:	bf00      	nop
}
 800909a:	bf00      	nop
 800909c:	3708      	adds	r7, #8
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b082      	sub	sp, #8
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
 80090aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090b2:	3b01      	subs	r3, #1
 80090b4:	2b02      	cmp	r3, #2
 80090b6:	d81e      	bhi.n	80090f6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	88db      	ldrh	r3, [r3, #6]
 80090bc:	2b02      	cmp	r3, #2
 80090be:	d004      	beq.n	80090ca <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80090c0:	6839      	ldr	r1, [r7, #0]
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 f891 	bl	80091ea <USBD_CtlError>
        break;
 80090c8:	e01a      	b.n	8009100 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2201      	movs	r2, #1
 80090ce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d005      	beq.n	80090e6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	f043 0202 	orr.w	r2, r3, #2
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	330c      	adds	r3, #12
 80090ea:	2202      	movs	r2, #2
 80090ec:	4619      	mov	r1, r3
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 f8e5 	bl	80092be <USBD_CtlSendData>
      break;
 80090f4:	e004      	b.n	8009100 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80090f6:	6839      	ldr	r1, [r7, #0]
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 f876 	bl	80091ea <USBD_CtlError>
      break;
 80090fe:	bf00      	nop
  }
}
 8009100:	bf00      	nop
 8009102:	3708      	adds	r7, #8
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	885b      	ldrh	r3, [r3, #2]
 8009116:	2b01      	cmp	r3, #1
 8009118:	d106      	bne.n	8009128 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2201      	movs	r2, #1
 800911e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 f929 	bl	800937a <USBD_CtlSendStatus>
  }
}
 8009128:	bf00      	nop
 800912a:	3708      	adds	r7, #8
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009140:	3b01      	subs	r3, #1
 8009142:	2b02      	cmp	r3, #2
 8009144:	d80b      	bhi.n	800915e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	885b      	ldrh	r3, [r3, #2]
 800914a:	2b01      	cmp	r3, #1
 800914c:	d10c      	bne.n	8009168 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 f90f 	bl	800937a <USBD_CtlSendStatus>
      }
      break;
 800915c:	e004      	b.n	8009168 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800915e:	6839      	ldr	r1, [r7, #0]
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 f842 	bl	80091ea <USBD_CtlError>
      break;
 8009166:	e000      	b.n	800916a <USBD_ClrFeature+0x3a>
      break;
 8009168:	bf00      	nop
  }
}
 800916a:	bf00      	nop
 800916c:	3708      	adds	r7, #8
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}

08009172 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009172:	b480      	push	{r7}
 8009174:	b083      	sub	sp, #12
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
 800917a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	781a      	ldrb	r2, [r3, #0]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	785a      	ldrb	r2, [r3, #1]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	3302      	adds	r3, #2
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	b29a      	uxth	r2, r3
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	3303      	adds	r3, #3
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	b29b      	uxth	r3, r3
 800919c:	021b      	lsls	r3, r3, #8
 800919e:	b29b      	uxth	r3, r3
 80091a0:	4413      	add	r3, r2
 80091a2:	b29a      	uxth	r2, r3
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	3304      	adds	r3, #4
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	b29a      	uxth	r2, r3
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	3305      	adds	r3, #5
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	021b      	lsls	r3, r3, #8
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	4413      	add	r3, r2
 80091be:	b29a      	uxth	r2, r3
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	3306      	adds	r3, #6
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	b29a      	uxth	r2, r3
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	3307      	adds	r3, #7
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	021b      	lsls	r3, r3, #8
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	4413      	add	r3, r2
 80091da:	b29a      	uxth	r2, r3
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	80da      	strh	r2, [r3, #6]

}
 80091e0:	bf00      	nop
 80091e2:	370c      	adds	r7, #12
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bc80      	pop	{r7}
 80091e8:	4770      	bx	lr

080091ea <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b082      	sub	sp, #8
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
 80091f2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80091f4:	2180      	movs	r1, #128	; 0x80
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 fc2e 	bl	8009a58 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80091fc:	2100      	movs	r1, #0
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 fc2a 	bl	8009a58 <USBD_LL_StallEP>
}
 8009204:	bf00      	nop
 8009206:	3708      	adds	r7, #8
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b086      	sub	sp, #24
 8009210:	af00      	add	r7, sp, #0
 8009212:	60f8      	str	r0, [r7, #12]
 8009214:	60b9      	str	r1, [r7, #8]
 8009216:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009218:	2300      	movs	r3, #0
 800921a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d032      	beq.n	8009288 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009222:	68f8      	ldr	r0, [r7, #12]
 8009224:	f000 f834 	bl	8009290 <USBD_GetLen>
 8009228:	4603      	mov	r3, r0
 800922a:	3301      	adds	r3, #1
 800922c:	b29b      	uxth	r3, r3
 800922e:	005b      	lsls	r3, r3, #1
 8009230:	b29a      	uxth	r2, r3
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009236:	7dfb      	ldrb	r3, [r7, #23]
 8009238:	1c5a      	adds	r2, r3, #1
 800923a:	75fa      	strb	r2, [r7, #23]
 800923c:	461a      	mov	r2, r3
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	4413      	add	r3, r2
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	7812      	ldrb	r2, [r2, #0]
 8009246:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009248:	7dfb      	ldrb	r3, [r7, #23]
 800924a:	1c5a      	adds	r2, r3, #1
 800924c:	75fa      	strb	r2, [r7, #23]
 800924e:	461a      	mov	r2, r3
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	4413      	add	r3, r2
 8009254:	2203      	movs	r2, #3
 8009256:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009258:	e012      	b.n	8009280 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	1c5a      	adds	r2, r3, #1
 800925e:	60fa      	str	r2, [r7, #12]
 8009260:	7dfa      	ldrb	r2, [r7, #23]
 8009262:	1c51      	adds	r1, r2, #1
 8009264:	75f9      	strb	r1, [r7, #23]
 8009266:	4611      	mov	r1, r2
 8009268:	68ba      	ldr	r2, [r7, #8]
 800926a:	440a      	add	r2, r1
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009270:	7dfb      	ldrb	r3, [r7, #23]
 8009272:	1c5a      	adds	r2, r3, #1
 8009274:	75fa      	strb	r2, [r7, #23]
 8009276:	461a      	mov	r2, r3
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	4413      	add	r3, r2
 800927c:	2200      	movs	r2, #0
 800927e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d1e8      	bne.n	800925a <USBD_GetString+0x4e>
    }
  }
}
 8009288:	bf00      	nop
 800928a:	3718      	adds	r7, #24
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009290:	b480      	push	{r7}
 8009292:	b085      	sub	sp, #20
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009298:	2300      	movs	r3, #0
 800929a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800929c:	e005      	b.n	80092aa <USBD_GetLen+0x1a>
  {
    len++;
 800929e:	7bfb      	ldrb	r3, [r7, #15]
 80092a0:	3301      	adds	r3, #1
 80092a2:	73fb      	strb	r3, [r7, #15]
    buf++;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	3301      	adds	r3, #1
 80092a8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d1f5      	bne.n	800929e <USBD_GetLen+0xe>
  }

  return len;
 80092b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3714      	adds	r7, #20
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bc80      	pop	{r7}
 80092bc:	4770      	bx	lr

080092be <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80092be:	b580      	push	{r7, lr}
 80092c0:	b084      	sub	sp, #16
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	60f8      	str	r0, [r7, #12]
 80092c6:	60b9      	str	r1, [r7, #8]
 80092c8:	4613      	mov	r3, r2
 80092ca:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2202      	movs	r2, #2
 80092d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80092d4:	88fa      	ldrh	r2, [r7, #6]
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80092da:	88fa      	ldrh	r2, [r7, #6]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092e0:	88fb      	ldrh	r3, [r7, #6]
 80092e2:	68ba      	ldr	r2, [r7, #8]
 80092e4:	2100      	movs	r1, #0
 80092e6:	68f8      	ldr	r0, [r7, #12]
 80092e8:	f000 fc3f 	bl	8009b6a <USBD_LL_Transmit>

  return USBD_OK;
 80092ec:	2300      	movs	r3, #0
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3710      	adds	r7, #16
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b084      	sub	sp, #16
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	60f8      	str	r0, [r7, #12]
 80092fe:	60b9      	str	r1, [r7, #8]
 8009300:	4613      	mov	r3, r2
 8009302:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009304:	88fb      	ldrh	r3, [r7, #6]
 8009306:	68ba      	ldr	r2, [r7, #8]
 8009308:	2100      	movs	r1, #0
 800930a:	68f8      	ldr	r0, [r7, #12]
 800930c:	f000 fc2d 	bl	8009b6a <USBD_LL_Transmit>

  return USBD_OK;
 8009310:	2300      	movs	r3, #0
}
 8009312:	4618      	mov	r0, r3
 8009314:	3710      	adds	r7, #16
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800931a:	b580      	push	{r7, lr}
 800931c:	b084      	sub	sp, #16
 800931e:	af00      	add	r7, sp, #0
 8009320:	60f8      	str	r0, [r7, #12]
 8009322:	60b9      	str	r1, [r7, #8]
 8009324:	4613      	mov	r3, r2
 8009326:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2203      	movs	r2, #3
 800932c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009330:	88fa      	ldrh	r2, [r7, #6]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009338:	88fa      	ldrh	r2, [r7, #6]
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009340:	88fb      	ldrh	r3, [r7, #6]
 8009342:	68ba      	ldr	r2, [r7, #8]
 8009344:	2100      	movs	r1, #0
 8009346:	68f8      	ldr	r0, [r7, #12]
 8009348:	f000 fc32 	bl	8009bb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800934c:	2300      	movs	r3, #0
}
 800934e:	4618      	mov	r0, r3
 8009350:	3710      	adds	r7, #16
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}

08009356 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009356:	b580      	push	{r7, lr}
 8009358:	b084      	sub	sp, #16
 800935a:	af00      	add	r7, sp, #0
 800935c:	60f8      	str	r0, [r7, #12]
 800935e:	60b9      	str	r1, [r7, #8]
 8009360:	4613      	mov	r3, r2
 8009362:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009364:	88fb      	ldrh	r3, [r7, #6]
 8009366:	68ba      	ldr	r2, [r7, #8]
 8009368:	2100      	movs	r1, #0
 800936a:	68f8      	ldr	r0, [r7, #12]
 800936c:	f000 fc20 	bl	8009bb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009370:	2300      	movs	r3, #0
}
 8009372:	4618      	mov	r0, r3
 8009374:	3710      	adds	r7, #16
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b082      	sub	sp, #8
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2204      	movs	r2, #4
 8009386:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800938a:	2300      	movs	r3, #0
 800938c:	2200      	movs	r2, #0
 800938e:	2100      	movs	r1, #0
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 fbea 	bl	8009b6a <USBD_LL_Transmit>

  return USBD_OK;
 8009396:	2300      	movs	r3, #0
}
 8009398:	4618      	mov	r0, r3
 800939a:	3708      	adds	r7, #8
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2205      	movs	r2, #5
 80093ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80093b0:	2300      	movs	r3, #0
 80093b2:	2200      	movs	r2, #0
 80093b4:	2100      	movs	r1, #0
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 fbfa 	bl	8009bb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80093bc:	2300      	movs	r3, #0
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3708      	adds	r7, #8
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
	...

080093c8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80093cc:	2200      	movs	r2, #0
 80093ce:	4912      	ldr	r1, [pc, #72]	; (8009418 <MX_USB_DEVICE_Init+0x50>)
 80093d0:	4812      	ldr	r0, [pc, #72]	; (800941c <MX_USB_DEVICE_Init+0x54>)
 80093d2:	f7fe ff5f 	bl	8008294 <USBD_Init>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d001      	beq.n	80093e0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80093dc:	f7f7 fe5e 	bl	800109c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80093e0:	490f      	ldr	r1, [pc, #60]	; (8009420 <MX_USB_DEVICE_Init+0x58>)
 80093e2:	480e      	ldr	r0, [pc, #56]	; (800941c <MX_USB_DEVICE_Init+0x54>)
 80093e4:	f7fe ff81 	bl	80082ea <USBD_RegisterClass>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d001      	beq.n	80093f2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80093ee:	f7f7 fe55 	bl	800109c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80093f2:	490c      	ldr	r1, [pc, #48]	; (8009424 <MX_USB_DEVICE_Init+0x5c>)
 80093f4:	4809      	ldr	r0, [pc, #36]	; (800941c <MX_USB_DEVICE_Init+0x54>)
 80093f6:	f7fe fee1 	bl	80081bc <USBD_CDC_RegisterInterface>
 80093fa:	4603      	mov	r3, r0
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d001      	beq.n	8009404 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009400:	f7f7 fe4c 	bl	800109c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009404:	4805      	ldr	r0, [pc, #20]	; (800941c <MX_USB_DEVICE_Init+0x54>)
 8009406:	f7fe ff89 	bl	800831c <USBD_Start>
 800940a:	4603      	mov	r3, r0
 800940c:	2b00      	cmp	r3, #0
 800940e:	d001      	beq.n	8009414 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009410:	f7f7 fe44 	bl	800109c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009414:	bf00      	nop
 8009416:	bd80      	pop	{r7, pc}
 8009418:	2000013c 	.word	0x2000013c
 800941c:	20000364 	.word	0x20000364
 8009420:	20000028 	.word	0x20000028
 8009424:	2000012c 	.word	0x2000012c

08009428 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800942c:	2200      	movs	r2, #0
 800942e:	4905      	ldr	r1, [pc, #20]	; (8009444 <CDC_Init_FS+0x1c>)
 8009430:	4805      	ldr	r0, [pc, #20]	; (8009448 <CDC_Init_FS+0x20>)
 8009432:	f7fe fed9 	bl	80081e8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009436:	4905      	ldr	r1, [pc, #20]	; (800944c <CDC_Init_FS+0x24>)
 8009438:	4803      	ldr	r0, [pc, #12]	; (8009448 <CDC_Init_FS+0x20>)
 800943a:	f7fe feee 	bl	800821a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800943e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009440:	4618      	mov	r0, r3
 8009442:	bd80      	pop	{r7, pc}
 8009444:	20000668 	.word	0x20000668
 8009448:	20000364 	.word	0x20000364
 800944c:	20000628 	.word	0x20000628

08009450 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009450:	b480      	push	{r7}
 8009452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009454:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009456:	4618      	mov	r0, r3
 8009458:	46bd      	mov	sp, r7
 800945a:	bc80      	pop	{r7}
 800945c:	4770      	bx	lr
	...

08009460 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
 8009466:	4603      	mov	r3, r0
 8009468:	6039      	str	r1, [r7, #0]
 800946a:	71fb      	strb	r3, [r7, #7]
 800946c:	4613      	mov	r3, r2
 800946e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009470:	79fb      	ldrb	r3, [r7, #7]
 8009472:	2b23      	cmp	r3, #35	; 0x23
 8009474:	d84a      	bhi.n	800950c <CDC_Control_FS+0xac>
 8009476:	a201      	add	r2, pc, #4	; (adr r2, 800947c <CDC_Control_FS+0x1c>)
 8009478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800947c:	0800950d 	.word	0x0800950d
 8009480:	0800950d 	.word	0x0800950d
 8009484:	0800950d 	.word	0x0800950d
 8009488:	0800950d 	.word	0x0800950d
 800948c:	0800950d 	.word	0x0800950d
 8009490:	0800950d 	.word	0x0800950d
 8009494:	0800950d 	.word	0x0800950d
 8009498:	0800950d 	.word	0x0800950d
 800949c:	0800950d 	.word	0x0800950d
 80094a0:	0800950d 	.word	0x0800950d
 80094a4:	0800950d 	.word	0x0800950d
 80094a8:	0800950d 	.word	0x0800950d
 80094ac:	0800950d 	.word	0x0800950d
 80094b0:	0800950d 	.word	0x0800950d
 80094b4:	0800950d 	.word	0x0800950d
 80094b8:	0800950d 	.word	0x0800950d
 80094bc:	0800950d 	.word	0x0800950d
 80094c0:	0800950d 	.word	0x0800950d
 80094c4:	0800950d 	.word	0x0800950d
 80094c8:	0800950d 	.word	0x0800950d
 80094cc:	0800950d 	.word	0x0800950d
 80094d0:	0800950d 	.word	0x0800950d
 80094d4:	0800950d 	.word	0x0800950d
 80094d8:	0800950d 	.word	0x0800950d
 80094dc:	0800950d 	.word	0x0800950d
 80094e0:	0800950d 	.word	0x0800950d
 80094e4:	0800950d 	.word	0x0800950d
 80094e8:	0800950d 	.word	0x0800950d
 80094ec:	0800950d 	.word	0x0800950d
 80094f0:	0800950d 	.word	0x0800950d
 80094f4:	0800950d 	.word	0x0800950d
 80094f8:	0800950d 	.word	0x0800950d
 80094fc:	0800950d 	.word	0x0800950d
 8009500:	0800950d 	.word	0x0800950d
 8009504:	0800950d 	.word	0x0800950d
 8009508:	0800950d 	.word	0x0800950d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800950c:	bf00      	nop
  }

  return (USBD_OK);
 800950e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009510:	4618      	mov	r0, r3
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	bc80      	pop	{r7}
 8009518:	4770      	bx	lr
 800951a:	bf00      	nop

0800951c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b082      	sub	sp, #8
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009526:	6879      	ldr	r1, [r7, #4]
 8009528:	4805      	ldr	r0, [pc, #20]	; (8009540 <CDC_Receive_FS+0x24>)
 800952a:	f7fe fe76 	bl	800821a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800952e:	4804      	ldr	r0, [pc, #16]	; (8009540 <CDC_Receive_FS+0x24>)
 8009530:	f7fe fe86 	bl	8008240 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009534:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009536:	4618      	mov	r0, r3
 8009538:	3708      	adds	r7, #8
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	20000364 	.word	0x20000364

08009544 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	4603      	mov	r3, r0
 800954c:	6039      	str	r1, [r7, #0]
 800954e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	2212      	movs	r2, #18
 8009554:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009556:	4b03      	ldr	r3, [pc, #12]	; (8009564 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009558:	4618      	mov	r0, r3
 800955a:	370c      	adds	r7, #12
 800955c:	46bd      	mov	sp, r7
 800955e:	bc80      	pop	{r7}
 8009560:	4770      	bx	lr
 8009562:	bf00      	nop
 8009564:	20000158 	.word	0x20000158

08009568 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	4603      	mov	r3, r0
 8009570:	6039      	str	r1, [r7, #0]
 8009572:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	2204      	movs	r2, #4
 8009578:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800957a:	4b03      	ldr	r3, [pc, #12]	; (8009588 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800957c:	4618      	mov	r0, r3
 800957e:	370c      	adds	r7, #12
 8009580:	46bd      	mov	sp, r7
 8009582:	bc80      	pop	{r7}
 8009584:	4770      	bx	lr
 8009586:	bf00      	nop
 8009588:	2000016c 	.word	0x2000016c

0800958c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
 8009592:	4603      	mov	r3, r0
 8009594:	6039      	str	r1, [r7, #0]
 8009596:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009598:	79fb      	ldrb	r3, [r7, #7]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d105      	bne.n	80095aa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800959e:	683a      	ldr	r2, [r7, #0]
 80095a0:	4907      	ldr	r1, [pc, #28]	; (80095c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80095a2:	4808      	ldr	r0, [pc, #32]	; (80095c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80095a4:	f7ff fe32 	bl	800920c <USBD_GetString>
 80095a8:	e004      	b.n	80095b4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80095aa:	683a      	ldr	r2, [r7, #0]
 80095ac:	4904      	ldr	r1, [pc, #16]	; (80095c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80095ae:	4805      	ldr	r0, [pc, #20]	; (80095c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80095b0:	f7ff fe2c 	bl	800920c <USBD_GetString>
  }
  return USBD_StrDesc;
 80095b4:	4b02      	ldr	r3, [pc, #8]	; (80095c0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3708      	adds	r7, #8
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	200006a8 	.word	0x200006a8
 80095c4:	08009d34 	.word	0x08009d34

080095c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	4603      	mov	r3, r0
 80095d0:	6039      	str	r1, [r7, #0]
 80095d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80095d4:	683a      	ldr	r2, [r7, #0]
 80095d6:	4904      	ldr	r1, [pc, #16]	; (80095e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80095d8:	4804      	ldr	r0, [pc, #16]	; (80095ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80095da:	f7ff fe17 	bl	800920c <USBD_GetString>
  return USBD_StrDesc;
 80095de:	4b02      	ldr	r3, [pc, #8]	; (80095e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3708      	adds	r7, #8
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}
 80095e8:	200006a8 	.word	0x200006a8
 80095ec:	08009d4c 	.word	0x08009d4c

080095f0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	4603      	mov	r3, r0
 80095f8:	6039      	str	r1, [r7, #0]
 80095fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	221a      	movs	r2, #26
 8009600:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009602:	f000 f843 	bl	800968c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009606:	4b02      	ldr	r3, [pc, #8]	; (8009610 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009608:	4618      	mov	r0, r3
 800960a:	3708      	adds	r7, #8
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}
 8009610:	20000170 	.word	0x20000170

08009614 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
 800961a:	4603      	mov	r3, r0
 800961c:	6039      	str	r1, [r7, #0]
 800961e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009620:	79fb      	ldrb	r3, [r7, #7]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d105      	bne.n	8009632 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009626:	683a      	ldr	r2, [r7, #0]
 8009628:	4907      	ldr	r1, [pc, #28]	; (8009648 <USBD_FS_ConfigStrDescriptor+0x34>)
 800962a:	4808      	ldr	r0, [pc, #32]	; (800964c <USBD_FS_ConfigStrDescriptor+0x38>)
 800962c:	f7ff fdee 	bl	800920c <USBD_GetString>
 8009630:	e004      	b.n	800963c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009632:	683a      	ldr	r2, [r7, #0]
 8009634:	4904      	ldr	r1, [pc, #16]	; (8009648 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009636:	4805      	ldr	r0, [pc, #20]	; (800964c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009638:	f7ff fde8 	bl	800920c <USBD_GetString>
  }
  return USBD_StrDesc;
 800963c:	4b02      	ldr	r3, [pc, #8]	; (8009648 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800963e:	4618      	mov	r0, r3
 8009640:	3708      	adds	r7, #8
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop
 8009648:	200006a8 	.word	0x200006a8
 800964c:	08009d60 	.word	0x08009d60

08009650 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b082      	sub	sp, #8
 8009654:	af00      	add	r7, sp, #0
 8009656:	4603      	mov	r3, r0
 8009658:	6039      	str	r1, [r7, #0]
 800965a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800965c:	79fb      	ldrb	r3, [r7, #7]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d105      	bne.n	800966e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009662:	683a      	ldr	r2, [r7, #0]
 8009664:	4907      	ldr	r1, [pc, #28]	; (8009684 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009666:	4808      	ldr	r0, [pc, #32]	; (8009688 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009668:	f7ff fdd0 	bl	800920c <USBD_GetString>
 800966c:	e004      	b.n	8009678 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800966e:	683a      	ldr	r2, [r7, #0]
 8009670:	4904      	ldr	r1, [pc, #16]	; (8009684 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009672:	4805      	ldr	r0, [pc, #20]	; (8009688 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009674:	f7ff fdca 	bl	800920c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009678:	4b02      	ldr	r3, [pc, #8]	; (8009684 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800967a:	4618      	mov	r0, r3
 800967c:	3708      	adds	r7, #8
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	200006a8 	.word	0x200006a8
 8009688:	08009d6c 	.word	0x08009d6c

0800968c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b084      	sub	sp, #16
 8009690:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009692:	4b0f      	ldr	r3, [pc, #60]	; (80096d0 <Get_SerialNum+0x44>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009698:	4b0e      	ldr	r3, [pc, #56]	; (80096d4 <Get_SerialNum+0x48>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800969e:	4b0e      	ldr	r3, [pc, #56]	; (80096d8 <Get_SerialNum+0x4c>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80096a4:	68fa      	ldr	r2, [r7, #12]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	4413      	add	r3, r2
 80096aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d009      	beq.n	80096c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80096b2:	2208      	movs	r2, #8
 80096b4:	4909      	ldr	r1, [pc, #36]	; (80096dc <Get_SerialNum+0x50>)
 80096b6:	68f8      	ldr	r0, [r7, #12]
 80096b8:	f000 f814 	bl	80096e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80096bc:	2204      	movs	r2, #4
 80096be:	4908      	ldr	r1, [pc, #32]	; (80096e0 <Get_SerialNum+0x54>)
 80096c0:	68b8      	ldr	r0, [r7, #8]
 80096c2:	f000 f80f 	bl	80096e4 <IntToUnicode>
  }
}
 80096c6:	bf00      	nop
 80096c8:	3710      	adds	r7, #16
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	1ffff7e8 	.word	0x1ffff7e8
 80096d4:	1ffff7ec 	.word	0x1ffff7ec
 80096d8:	1ffff7f0 	.word	0x1ffff7f0
 80096dc:	20000172 	.word	0x20000172
 80096e0:	20000182 	.word	0x20000182

080096e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b087      	sub	sp, #28
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	60f8      	str	r0, [r7, #12]
 80096ec:	60b9      	str	r1, [r7, #8]
 80096ee:	4613      	mov	r3, r2
 80096f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80096f2:	2300      	movs	r3, #0
 80096f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80096f6:	2300      	movs	r3, #0
 80096f8:	75fb      	strb	r3, [r7, #23]
 80096fa:	e027      	b.n	800974c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	0f1b      	lsrs	r3, r3, #28
 8009700:	2b09      	cmp	r3, #9
 8009702:	d80b      	bhi.n	800971c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	0f1b      	lsrs	r3, r3, #28
 8009708:	b2da      	uxtb	r2, r3
 800970a:	7dfb      	ldrb	r3, [r7, #23]
 800970c:	005b      	lsls	r3, r3, #1
 800970e:	4619      	mov	r1, r3
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	440b      	add	r3, r1
 8009714:	3230      	adds	r2, #48	; 0x30
 8009716:	b2d2      	uxtb	r2, r2
 8009718:	701a      	strb	r2, [r3, #0]
 800971a:	e00a      	b.n	8009732 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	0f1b      	lsrs	r3, r3, #28
 8009720:	b2da      	uxtb	r2, r3
 8009722:	7dfb      	ldrb	r3, [r7, #23]
 8009724:	005b      	lsls	r3, r3, #1
 8009726:	4619      	mov	r1, r3
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	440b      	add	r3, r1
 800972c:	3237      	adds	r2, #55	; 0x37
 800972e:	b2d2      	uxtb	r2, r2
 8009730:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	011b      	lsls	r3, r3, #4
 8009736:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009738:	7dfb      	ldrb	r3, [r7, #23]
 800973a:	005b      	lsls	r3, r3, #1
 800973c:	3301      	adds	r3, #1
 800973e:	68ba      	ldr	r2, [r7, #8]
 8009740:	4413      	add	r3, r2
 8009742:	2200      	movs	r2, #0
 8009744:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009746:	7dfb      	ldrb	r3, [r7, #23]
 8009748:	3301      	adds	r3, #1
 800974a:	75fb      	strb	r3, [r7, #23]
 800974c:	7dfa      	ldrb	r2, [r7, #23]
 800974e:	79fb      	ldrb	r3, [r7, #7]
 8009750:	429a      	cmp	r2, r3
 8009752:	d3d3      	bcc.n	80096fc <IntToUnicode+0x18>
  }
}
 8009754:	bf00      	nop
 8009756:	bf00      	nop
 8009758:	371c      	adds	r7, #28
 800975a:	46bd      	mov	sp, r7
 800975c:	bc80      	pop	{r7}
 800975e:	4770      	bx	lr

08009760 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b084      	sub	sp, #16
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a0d      	ldr	r2, [pc, #52]	; (80097a4 <HAL_PCD_MspInit+0x44>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d113      	bne.n	800979a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009772:	4b0d      	ldr	r3, [pc, #52]	; (80097a8 <HAL_PCD_MspInit+0x48>)
 8009774:	69db      	ldr	r3, [r3, #28]
 8009776:	4a0c      	ldr	r2, [pc, #48]	; (80097a8 <HAL_PCD_MspInit+0x48>)
 8009778:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800977c:	61d3      	str	r3, [r2, #28]
 800977e:	4b0a      	ldr	r3, [pc, #40]	; (80097a8 <HAL_PCD_MspInit+0x48>)
 8009780:	69db      	ldr	r3, [r3, #28]
 8009782:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009786:	60fb      	str	r3, [r7, #12]
 8009788:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800978a:	2200      	movs	r2, #0
 800978c:	2100      	movs	r1, #0
 800978e:	2014      	movs	r0, #20
 8009790:	f7f8 fb07 	bl	8001da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009794:	2014      	movs	r0, #20
 8009796:	f7f8 fb20 	bl	8001dda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800979a:	bf00      	nop
 800979c:	3710      	adds	r7, #16
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	40005c00 	.word	0x40005c00
 80097a8:	40021000 	.word	0x40021000

080097ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80097c0:	4619      	mov	r1, r3
 80097c2:	4610      	mov	r0, r2
 80097c4:	f7fe fdf2 	bl	80083ac <USBD_LL_SetupStage>
}
 80097c8:	bf00      	nop
 80097ca:	3708      	adds	r7, #8
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b082      	sub	sp, #8
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	460b      	mov	r3, r1
 80097da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80097e2:	78fa      	ldrb	r2, [r7, #3]
 80097e4:	6879      	ldr	r1, [r7, #4]
 80097e6:	4613      	mov	r3, r2
 80097e8:	009b      	lsls	r3, r3, #2
 80097ea:	4413      	add	r3, r2
 80097ec:	00db      	lsls	r3, r3, #3
 80097ee:	440b      	add	r3, r1
 80097f0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	78fb      	ldrb	r3, [r7, #3]
 80097f8:	4619      	mov	r1, r3
 80097fa:	f7fe fe24 	bl	8008446 <USBD_LL_DataOutStage>
}
 80097fe:	bf00      	nop
 8009800:	3708      	adds	r7, #8
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}

08009806 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009806:	b580      	push	{r7, lr}
 8009808:	b082      	sub	sp, #8
 800980a:	af00      	add	r7, sp, #0
 800980c:	6078      	str	r0, [r7, #4]
 800980e:	460b      	mov	r3, r1
 8009810:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009818:	78fa      	ldrb	r2, [r7, #3]
 800981a:	6879      	ldr	r1, [r7, #4]
 800981c:	4613      	mov	r3, r2
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	4413      	add	r3, r2
 8009822:	00db      	lsls	r3, r3, #3
 8009824:	440b      	add	r3, r1
 8009826:	333c      	adds	r3, #60	; 0x3c
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	78fb      	ldrb	r3, [r7, #3]
 800982c:	4619      	mov	r1, r3
 800982e:	f7fe fe7b 	bl	8008528 <USBD_LL_DataInStage>
}
 8009832:	bf00      	nop
 8009834:	3708      	adds	r7, #8
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}

0800983a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800983a:	b580      	push	{r7, lr}
 800983c:	b082      	sub	sp, #8
 800983e:	af00      	add	r7, sp, #0
 8009840:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009848:	4618      	mov	r0, r3
 800984a:	f7fe ff8b 	bl	8008764 <USBD_LL_SOF>
}
 800984e:	bf00      	nop
 8009850:	3708      	adds	r7, #8
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}

08009856 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009856:	b580      	push	{r7, lr}
 8009858:	b084      	sub	sp, #16
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800985e:	2301      	movs	r3, #1
 8009860:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	689b      	ldr	r3, [r3, #8]
 8009866:	2b02      	cmp	r3, #2
 8009868:	d001      	beq.n	800986e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800986a:	f7f7 fc17 	bl	800109c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009874:	7bfa      	ldrb	r2, [r7, #15]
 8009876:	4611      	mov	r1, r2
 8009878:	4618      	mov	r0, r3
 800987a:	f7fe ff3b 	bl	80086f4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009884:	4618      	mov	r0, r3
 8009886:	f7fe fef4 	bl	8008672 <USBD_LL_Reset>
}
 800988a:	bf00      	nop
 800988c:	3710      	adds	r7, #16
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
	...

08009894 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b082      	sub	sp, #8
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7fe ff35 	bl	8008712 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	699b      	ldr	r3, [r3, #24]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d005      	beq.n	80098bc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80098b0:	4b04      	ldr	r3, [pc, #16]	; (80098c4 <HAL_PCD_SuspendCallback+0x30>)
 80098b2:	691b      	ldr	r3, [r3, #16]
 80098b4:	4a03      	ldr	r2, [pc, #12]	; (80098c4 <HAL_PCD_SuspendCallback+0x30>)
 80098b6:	f043 0306 	orr.w	r3, r3, #6
 80098ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80098bc:	bf00      	nop
 80098be:	3708      	adds	r7, #8
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	e000ed00 	.word	0xe000ed00

080098c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80098d6:	4618      	mov	r0, r3
 80098d8:	f7fe ff2f 	bl	800873a <USBD_LL_Resume>
}
 80098dc:	bf00      	nop
 80098de:	3708      	adds	r7, #8
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b082      	sub	sp, #8
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80098ec:	4a28      	ldr	r2, [pc, #160]	; (8009990 <USBD_LL_Init+0xac>)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	4a26      	ldr	r2, [pc, #152]	; (8009990 <USBD_LL_Init+0xac>)
 80098f8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80098fc:	4b24      	ldr	r3, [pc, #144]	; (8009990 <USBD_LL_Init+0xac>)
 80098fe:	4a25      	ldr	r2, [pc, #148]	; (8009994 <USBD_LL_Init+0xb0>)
 8009900:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009902:	4b23      	ldr	r3, [pc, #140]	; (8009990 <USBD_LL_Init+0xac>)
 8009904:	2208      	movs	r2, #8
 8009906:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009908:	4b21      	ldr	r3, [pc, #132]	; (8009990 <USBD_LL_Init+0xac>)
 800990a:	2202      	movs	r2, #2
 800990c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800990e:	4b20      	ldr	r3, [pc, #128]	; (8009990 <USBD_LL_Init+0xac>)
 8009910:	2200      	movs	r2, #0
 8009912:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009914:	4b1e      	ldr	r3, [pc, #120]	; (8009990 <USBD_LL_Init+0xac>)
 8009916:	2200      	movs	r2, #0
 8009918:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800991a:	4b1d      	ldr	r3, [pc, #116]	; (8009990 <USBD_LL_Init+0xac>)
 800991c:	2200      	movs	r2, #0
 800991e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009920:	481b      	ldr	r0, [pc, #108]	; (8009990 <USBD_LL_Init+0xac>)
 8009922:	f7f8 fc59 	bl	80021d8 <HAL_PCD_Init>
 8009926:	4603      	mov	r3, r0
 8009928:	2b00      	cmp	r3, #0
 800992a:	d001      	beq.n	8009930 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800992c:	f7f7 fbb6 	bl	800109c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009936:	2318      	movs	r3, #24
 8009938:	2200      	movs	r2, #0
 800993a:	2100      	movs	r1, #0
 800993c:	f7fa f8cd 	bl	8003ada <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009946:	2358      	movs	r3, #88	; 0x58
 8009948:	2200      	movs	r2, #0
 800994a:	2180      	movs	r1, #128	; 0x80
 800994c:	f7fa f8c5 	bl	8003ada <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009956:	23c0      	movs	r3, #192	; 0xc0
 8009958:	2200      	movs	r2, #0
 800995a:	2181      	movs	r1, #129	; 0x81
 800995c:	f7fa f8bd 	bl	8003ada <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009966:	f44f 7388 	mov.w	r3, #272	; 0x110
 800996a:	2200      	movs	r2, #0
 800996c:	2101      	movs	r1, #1
 800996e:	f7fa f8b4 	bl	8003ada <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009978:	f44f 7380 	mov.w	r3, #256	; 0x100
 800997c:	2200      	movs	r2, #0
 800997e:	2182      	movs	r1, #130	; 0x82
 8009980:	f7fa f8ab 	bl	8003ada <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009984:	2300      	movs	r3, #0
}
 8009986:	4618      	mov	r0, r3
 8009988:	3708      	adds	r7, #8
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
 800998e:	bf00      	nop
 8009990:	200008a8 	.word	0x200008a8
 8009994:	40005c00 	.word	0x40005c00

08009998 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099a0:	2300      	movs	r3, #0
 80099a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099a4:	2300      	movs	r3, #0
 80099a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7f8 fd1d 	bl	80023ee <HAL_PCD_Start>
 80099b4:	4603      	mov	r3, r0
 80099b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099b8:	7bfb      	ldrb	r3, [r7, #15]
 80099ba:	4618      	mov	r0, r3
 80099bc:	f000 f94e 	bl	8009c5c <USBD_Get_USB_Status>
 80099c0:	4603      	mov	r3, r0
 80099c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3710      	adds	r7, #16
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}

080099ce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80099ce:	b580      	push	{r7, lr}
 80099d0:	b084      	sub	sp, #16
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
 80099d6:	4608      	mov	r0, r1
 80099d8:	4611      	mov	r1, r2
 80099da:	461a      	mov	r2, r3
 80099dc:	4603      	mov	r3, r0
 80099de:	70fb      	strb	r3, [r7, #3]
 80099e0:	460b      	mov	r3, r1
 80099e2:	70bb      	strb	r3, [r7, #2]
 80099e4:	4613      	mov	r3, r2
 80099e6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099e8:	2300      	movs	r3, #0
 80099ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099ec:	2300      	movs	r3, #0
 80099ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80099f6:	78bb      	ldrb	r3, [r7, #2]
 80099f8:	883a      	ldrh	r2, [r7, #0]
 80099fa:	78f9      	ldrb	r1, [r7, #3]
 80099fc:	f7f8 fe95 	bl	800272a <HAL_PCD_EP_Open>
 8009a00:	4603      	mov	r3, r0
 8009a02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a04:	7bfb      	ldrb	r3, [r7, #15]
 8009a06:	4618      	mov	r0, r3
 8009a08:	f000 f928 	bl	8009c5c <USBD_Get_USB_Status>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a10:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3710      	adds	r7, #16
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}

08009a1a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a1a:	b580      	push	{r7, lr}
 8009a1c:	b084      	sub	sp, #16
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	6078      	str	r0, [r7, #4]
 8009a22:	460b      	mov	r3, r1
 8009a24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a26:	2300      	movs	r3, #0
 8009a28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a34:	78fa      	ldrb	r2, [r7, #3]
 8009a36:	4611      	mov	r1, r2
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f7f8 fedc 	bl	80027f6 <HAL_PCD_EP_Close>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a42:	7bfb      	ldrb	r3, [r7, #15]
 8009a44:	4618      	mov	r0, r3
 8009a46:	f000 f909 	bl	8009c5c <USBD_Get_USB_Status>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3710      	adds	r7, #16
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b084      	sub	sp, #16
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	460b      	mov	r3, r1
 8009a62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a64:	2300      	movs	r3, #0
 8009a66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a72:	78fa      	ldrb	r2, [r7, #3]
 8009a74:	4611      	mov	r1, r2
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7f8 ff9c 	bl	80029b4 <HAL_PCD_EP_SetStall>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a80:	7bfb      	ldrb	r3, [r7, #15]
 8009a82:	4618      	mov	r0, r3
 8009a84:	f000 f8ea 	bl	8009c5c <USBD_Get_USB_Status>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3710      	adds	r7, #16
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}

08009a96 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a96:	b580      	push	{r7, lr}
 8009a98:	b084      	sub	sp, #16
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
 8009a9e:	460b      	mov	r3, r1
 8009aa0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ab0:	78fa      	ldrb	r2, [r7, #3]
 8009ab2:	4611      	mov	r1, r2
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f7f8 ffdd 	bl	8002a74 <HAL_PCD_EP_ClrStall>
 8009aba:	4603      	mov	r3, r0
 8009abc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009abe:	7bfb      	ldrb	r3, [r7, #15]
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f000 f8cb 	bl	8009c5c <USBD_Get_USB_Status>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009aca:	7bbb      	ldrb	r3, [r7, #14]
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3710      	adds	r7, #16
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b085      	sub	sp, #20
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	460b      	mov	r3, r1
 8009ade:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ae6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009ae8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	da0c      	bge.n	8009b0a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009af0:	78fb      	ldrb	r3, [r7, #3]
 8009af2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009af6:	68f9      	ldr	r1, [r7, #12]
 8009af8:	1c5a      	adds	r2, r3, #1
 8009afa:	4613      	mov	r3, r2
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	4413      	add	r3, r2
 8009b00:	00db      	lsls	r3, r3, #3
 8009b02:	440b      	add	r3, r1
 8009b04:	3302      	adds	r3, #2
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	e00b      	b.n	8009b22 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009b0a:	78fb      	ldrb	r3, [r7, #3]
 8009b0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b10:	68f9      	ldr	r1, [r7, #12]
 8009b12:	4613      	mov	r3, r2
 8009b14:	009b      	lsls	r3, r3, #2
 8009b16:	4413      	add	r3, r2
 8009b18:	00db      	lsls	r3, r3, #3
 8009b1a:	440b      	add	r3, r1
 8009b1c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009b20:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3714      	adds	r7, #20
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bc80      	pop	{r7}
 8009b2a:	4770      	bx	lr

08009b2c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	460b      	mov	r3, r1
 8009b36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009b46:	78fa      	ldrb	r2, [r7, #3]
 8009b48:	4611      	mov	r1, r2
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f7f8 fdc8 	bl	80026e0 <HAL_PCD_SetAddress>
 8009b50:	4603      	mov	r3, r0
 8009b52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b54:	7bfb      	ldrb	r3, [r7, #15]
 8009b56:	4618      	mov	r0, r3
 8009b58:	f000 f880 	bl	8009c5c <USBD_Get_USB_Status>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b60:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3710      	adds	r7, #16
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}

08009b6a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009b6a:	b580      	push	{r7, lr}
 8009b6c:	b086      	sub	sp, #24
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	60f8      	str	r0, [r7, #12]
 8009b72:	607a      	str	r2, [r7, #4]
 8009b74:	461a      	mov	r2, r3
 8009b76:	460b      	mov	r3, r1
 8009b78:	72fb      	strb	r3, [r7, #11]
 8009b7a:	4613      	mov	r3, r2
 8009b7c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b82:	2300      	movs	r3, #0
 8009b84:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b8c:	893b      	ldrh	r3, [r7, #8]
 8009b8e:	7af9      	ldrb	r1, [r7, #11]
 8009b90:	687a      	ldr	r2, [r7, #4]
 8009b92:	f7f8 fecc 	bl	800292e <HAL_PCD_EP_Transmit>
 8009b96:	4603      	mov	r3, r0
 8009b98:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b9a:	7dfb      	ldrb	r3, [r7, #23]
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f000 f85d 	bl	8009c5c <USBD_Get_USB_Status>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009ba6:	7dbb      	ldrb	r3, [r7, #22]
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3718      	adds	r7, #24
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b086      	sub	sp, #24
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	60f8      	str	r0, [r7, #12]
 8009bb8:	607a      	str	r2, [r7, #4]
 8009bba:	461a      	mov	r2, r3
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	72fb      	strb	r3, [r7, #11]
 8009bc0:	4613      	mov	r3, r2
 8009bc2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009bd2:	893b      	ldrh	r3, [r7, #8]
 8009bd4:	7af9      	ldrb	r1, [r7, #11]
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	f7f8 fe55 	bl	8002886 <HAL_PCD_EP_Receive>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009be0:	7dfb      	ldrb	r3, [r7, #23]
 8009be2:	4618      	mov	r0, r3
 8009be4:	f000 f83a 	bl	8009c5c <USBD_Get_USB_Status>
 8009be8:	4603      	mov	r3, r0
 8009bea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009bec:	7dbb      	ldrb	r3, [r7, #22]
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3718      	adds	r7, #24
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}

08009bf6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bf6:	b580      	push	{r7, lr}
 8009bf8:	b082      	sub	sp, #8
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	6078      	str	r0, [r7, #4]
 8009bfe:	460b      	mov	r3, r1
 8009c00:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c08:	78fa      	ldrb	r2, [r7, #3]
 8009c0a:	4611      	mov	r1, r2
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f7f8 fe77 	bl	8002900 <HAL_PCD_EP_GetRxCount>
 8009c12:	4603      	mov	r3, r0
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3708      	adds	r7, #8
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009c24:	4b02      	ldr	r3, [pc, #8]	; (8009c30 <USBD_static_malloc+0x14>)
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	370c      	adds	r7, #12
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bc80      	pop	{r7}
 8009c2e:	4770      	bx	lr
 8009c30:	20000b94 	.word	0x20000b94

08009c34 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b083      	sub	sp, #12
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]

}
 8009c3c:	bf00      	nop
 8009c3e:	370c      	adds	r7, #12
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bc80      	pop	{r7}
 8009c44:	4770      	bx	lr

08009c46 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c46:	b480      	push	{r7}
 8009c48:	b083      	sub	sp, #12
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	6078      	str	r0, [r7, #4]
 8009c4e:	460b      	mov	r3, r1
 8009c50:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009c52:	bf00      	nop
 8009c54:	370c      	adds	r7, #12
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bc80      	pop	{r7}
 8009c5a:	4770      	bx	lr

08009c5c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b085      	sub	sp, #20
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	4603      	mov	r3, r0
 8009c64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c66:	2300      	movs	r3, #0
 8009c68:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009c6a:	79fb      	ldrb	r3, [r7, #7]
 8009c6c:	2b03      	cmp	r3, #3
 8009c6e:	d817      	bhi.n	8009ca0 <USBD_Get_USB_Status+0x44>
 8009c70:	a201      	add	r2, pc, #4	; (adr r2, 8009c78 <USBD_Get_USB_Status+0x1c>)
 8009c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c76:	bf00      	nop
 8009c78:	08009c89 	.word	0x08009c89
 8009c7c:	08009c8f 	.word	0x08009c8f
 8009c80:	08009c95 	.word	0x08009c95
 8009c84:	08009c9b 	.word	0x08009c9b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	73fb      	strb	r3, [r7, #15]
    break;
 8009c8c:	e00b      	b.n	8009ca6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009c8e:	2302      	movs	r3, #2
 8009c90:	73fb      	strb	r3, [r7, #15]
    break;
 8009c92:	e008      	b.n	8009ca6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009c94:	2301      	movs	r3, #1
 8009c96:	73fb      	strb	r3, [r7, #15]
    break;
 8009c98:	e005      	b.n	8009ca6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009c9a:	2302      	movs	r3, #2
 8009c9c:	73fb      	strb	r3, [r7, #15]
    break;
 8009c9e:	e002      	b.n	8009ca6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009ca0:	2302      	movs	r3, #2
 8009ca2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ca4:	bf00      	nop
  }
  return usb_status;
 8009ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3714      	adds	r7, #20
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bc80      	pop	{r7}
 8009cb0:	4770      	bx	lr
 8009cb2:	bf00      	nop

08009cb4 <__libc_init_array>:
 8009cb4:	b570      	push	{r4, r5, r6, lr}
 8009cb6:	2600      	movs	r6, #0
 8009cb8:	4d0c      	ldr	r5, [pc, #48]	; (8009cec <__libc_init_array+0x38>)
 8009cba:	4c0d      	ldr	r4, [pc, #52]	; (8009cf0 <__libc_init_array+0x3c>)
 8009cbc:	1b64      	subs	r4, r4, r5
 8009cbe:	10a4      	asrs	r4, r4, #2
 8009cc0:	42a6      	cmp	r6, r4
 8009cc2:	d109      	bne.n	8009cd8 <__libc_init_array+0x24>
 8009cc4:	f000 f822 	bl	8009d0c <_init>
 8009cc8:	2600      	movs	r6, #0
 8009cca:	4d0a      	ldr	r5, [pc, #40]	; (8009cf4 <__libc_init_array+0x40>)
 8009ccc:	4c0a      	ldr	r4, [pc, #40]	; (8009cf8 <__libc_init_array+0x44>)
 8009cce:	1b64      	subs	r4, r4, r5
 8009cd0:	10a4      	asrs	r4, r4, #2
 8009cd2:	42a6      	cmp	r6, r4
 8009cd4:	d105      	bne.n	8009ce2 <__libc_init_array+0x2e>
 8009cd6:	bd70      	pop	{r4, r5, r6, pc}
 8009cd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cdc:	4798      	blx	r3
 8009cde:	3601      	adds	r6, #1
 8009ce0:	e7ee      	b.n	8009cc0 <__libc_init_array+0xc>
 8009ce2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ce6:	4798      	blx	r3
 8009ce8:	3601      	adds	r6, #1
 8009cea:	e7f2      	b.n	8009cd2 <__libc_init_array+0x1e>
 8009cec:	08009d8c 	.word	0x08009d8c
 8009cf0:	08009d8c 	.word	0x08009d8c
 8009cf4:	08009d8c 	.word	0x08009d8c
 8009cf8:	08009d90 	.word	0x08009d90

08009cfc <memset>:
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	4402      	add	r2, r0
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d100      	bne.n	8009d06 <memset+0xa>
 8009d04:	4770      	bx	lr
 8009d06:	f803 1b01 	strb.w	r1, [r3], #1
 8009d0a:	e7f9      	b.n	8009d00 <memset+0x4>

08009d0c <_init>:
 8009d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d0e:	bf00      	nop
 8009d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d12:	bc08      	pop	{r3}
 8009d14:	469e      	mov	lr, r3
 8009d16:	4770      	bx	lr

08009d18 <_fini>:
 8009d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d1a:	bf00      	nop
 8009d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d1e:	bc08      	pop	{r3}
 8009d20:	469e      	mov	lr, r3
 8009d22:	4770      	bx	lr
