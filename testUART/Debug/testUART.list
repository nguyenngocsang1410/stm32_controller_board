
testUART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081a4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000608  080082b8  080082b8  000182b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088c0  080088c0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080088c0  080088c0  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080088c0  080088c0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088c0  080088c0  000188c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088c4  080088c4  000188c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080088c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  200001e0  08008aa8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f8  08008aa8  000203f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b46a  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ce6  00000000  00000000  0002b673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  0002d360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c20  00000000  00000000  0002e038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187c1  00000000  00000000  0002ec58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce6e  00000000  00000000  00047419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c38f  00000000  00000000  00054287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0616  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a40  00000000  00000000  000e0668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800829c 	.word	0x0800829c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800829c 	.word	0x0800829c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__gesf2>:
 8000b68:	f04f 3cff 	mov.w	ip, #4294967295
 8000b6c:	e006      	b.n	8000b7c <__cmpsf2+0x4>
 8000b6e:	bf00      	nop

08000b70 <__lesf2>:
 8000b70:	f04f 0c01 	mov.w	ip, #1
 8000b74:	e002      	b.n	8000b7c <__cmpsf2+0x4>
 8000b76:	bf00      	nop

08000b78 <__cmpsf2>:
 8000b78:	f04f 0c01 	mov.w	ip, #1
 8000b7c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b80:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b8c:	bf18      	it	ne
 8000b8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b92:	d011      	beq.n	8000bb8 <__cmpsf2+0x40>
 8000b94:	b001      	add	sp, #4
 8000b96:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b9a:	bf18      	it	ne
 8000b9c:	ea90 0f01 	teqne	r0, r1
 8000ba0:	bf58      	it	pl
 8000ba2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ba6:	bf88      	it	hi
 8000ba8:	17c8      	asrhi	r0, r1, #31
 8000baa:	bf38      	it	cc
 8000bac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000bb0:	bf18      	it	ne
 8000bb2:	f040 0001 	orrne.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bbc:	d102      	bne.n	8000bc4 <__cmpsf2+0x4c>
 8000bbe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000bc2:	d105      	bne.n	8000bd0 <__cmpsf2+0x58>
 8000bc4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000bc8:	d1e4      	bne.n	8000b94 <__cmpsf2+0x1c>
 8000bca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000bce:	d0e1      	beq.n	8000b94 <__cmpsf2+0x1c>
 8000bd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_cfrcmple>:
 8000bd8:	4684      	mov	ip, r0
 8000bda:	4608      	mov	r0, r1
 8000bdc:	4661      	mov	r1, ip
 8000bde:	e7ff      	b.n	8000be0 <__aeabi_cfcmpeq>

08000be0 <__aeabi_cfcmpeq>:
 8000be0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000be2:	f7ff ffc9 	bl	8000b78 <__cmpsf2>
 8000be6:	2800      	cmp	r0, #0
 8000be8:	bf48      	it	mi
 8000bea:	f110 0f00 	cmnmi.w	r0, #0
 8000bee:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bf0 <__aeabi_fcmpeq>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff fff4 	bl	8000be0 <__aeabi_cfcmpeq>
 8000bf8:	bf0c      	ite	eq
 8000bfa:	2001      	moveq	r0, #1
 8000bfc:	2000      	movne	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_fcmplt>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffea 	bl	8000be0 <__aeabi_cfcmpeq>
 8000c0c:	bf34      	ite	cc
 8000c0e:	2001      	movcc	r0, #1
 8000c10:	2000      	movcs	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_fcmple>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffe0 	bl	8000be0 <__aeabi_cfcmpeq>
 8000c20:	bf94      	ite	ls
 8000c22:	2001      	movls	r0, #1
 8000c24:	2000      	movhi	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_fcmpge>:
 8000c2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c30:	f7ff ffd2 	bl	8000bd8 <__aeabi_cfrcmple>
 8000c34:	bf94      	ite	ls
 8000c36:	2001      	movls	r0, #1
 8000c38:	2000      	movhi	r0, #0
 8000c3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fcmpgt>:
 8000c40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c44:	f7ff ffc8 	bl	8000bd8 <__aeabi_cfrcmple>
 8000c48:	bf34      	ite	cc
 8000c4a:	2001      	movcc	r0, #1
 8000c4c:	2000      	movcs	r0, #0
 8000c4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c52:	bf00      	nop

08000c54 <__aeabi_f2uiz>:
 8000c54:	0042      	lsls	r2, r0, #1
 8000c56:	d20e      	bcs.n	8000c76 <__aeabi_f2uiz+0x22>
 8000c58:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c5c:	d30b      	bcc.n	8000c76 <__aeabi_f2uiz+0x22>
 8000c5e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000c62:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c66:	d409      	bmi.n	8000c7c <__aeabi_f2uiz+0x28>
 8000c68:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c70:	fa23 f002 	lsr.w	r0, r3, r2
 8000c74:	4770      	bx	lr
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	4770      	bx	lr
 8000c7c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c80:	d101      	bne.n	8000c86 <__aeabi_f2uiz+0x32>
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	d102      	bne.n	8000c8c <__aeabi_f2uiz+0x38>
 8000c86:	f04f 30ff 	mov.w	r0, #4294967295
 8000c8a:	4770      	bx	lr
 8000c8c:	f04f 0000 	mov.w	r0, #0
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop

08000c94 <MAP>:
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM4_Init(void);
/* USER CODE BEGIN PFP */
uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax,
	uint32_t au32_OUTmin, uint32_t au32_OUTmax) {
 8000c94:	b5b0      	push	{r4, r5, r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
 8000ca0:	603b      	str	r3, [r7, #0]
  uint32_t val = au32_IN - au32_INmin;
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	1ad3      	subs	r3, r2, r3
 8000ca8:	617b      	str	r3, [r7, #20]
  val = val * (au32_OUTmax - au32_OUTmin);
 8000caa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	1ad2      	subs	r2, r2, r3
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	fb02 f303 	mul.w	r3, r2, r3
 8000cb6:	617b      	str	r3, [r7, #20]
  val = val / (1.0 * (au32_INmax - au32_INmin));
 8000cb8:	6978      	ldr	r0, [r7, #20]
 8000cba:	f7ff fb93 	bl	80003e4 <__aeabi_ui2d>
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	1ad3      	subs	r3, r2, r3
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fb8b 	bl	80003e4 <__aeabi_ui2d>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	4620      	mov	r0, r4
 8000cd4:	4629      	mov	r1, r5
 8000cd6:	f7ff fd29 	bl	800072c <__aeabi_ddiv>
 8000cda:	4602      	mov	r2, r0
 8000cdc:	460b      	mov	r3, r1
 8000cde:	4610      	mov	r0, r2
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f7ff fed1 	bl	8000a88 <__aeabi_d2uiz>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	617b      	str	r3, [r7, #20]
  val = val + au32_OUTmin;
 8000cea:	697a      	ldr	r2, [r7, #20]
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	4413      	add	r3, r2
 8000cf0:	617b      	str	r3, [r7, #20]
  return val;
 8000cf2:	697b      	ldr	r3, [r7, #20]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bdb0      	pop	{r4, r5, r7, pc}

08000cfc <set_motor>:
void set_motor(u8 id, s8 dir, u16 val) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af02      	add	r7, sp, #8
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
 8000d06:	460b      	mov	r3, r1
 8000d08:	71bb      	strb	r3, [r7, #6]
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	80bb      	strh	r3, [r7, #4]
  u16 pwm;
  switch (id) {
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d002      	beq.n	8000d1a <set_motor+0x1e>
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d04d      	beq.n	8000db4 <set_motor+0xb8>
	  HAL_GPIO_WritePin(M2_R_GPIO_Port, M2_R_Pin, GPIO_PIN_RESET);
	  TIM4->CCR2 = 999;
	}
	break;
  default:
	return;
 8000d18:	e0a7      	b.n	8000e6a <set_motor+0x16e>
	pwm = MAP(val, 0, 1000, 0, 499);
 8000d1a:	88b8      	ldrh	r0, [r7, #4]
 8000d1c:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	2300      	movs	r3, #0
 8000d24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d28:	2100      	movs	r1, #0
 8000d2a:	f7ff ffb3 	bl	8000c94 <MAP>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	81fb      	strh	r3, [r7, #14]
	if (dir == 1) {
 8000d32:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d10c      	bne.n	8000d54 <set_motor+0x58>
	  HAL_GPIO_WritePin(M1_EN_GPIO_Port, M1_EN_Pin, GPIO_PIN_SET);
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d40:	484b      	ldr	r0, [pc, #300]	; (8000e70 <set_motor+0x174>)
 8000d42:	f001 fc58 	bl	80025f6 <HAL_GPIO_WritePin>
	  TIM3->CCR1 = pwm;
 8000d46:	4a4b      	ldr	r2, [pc, #300]	; (8000e74 <set_motor+0x178>)
 8000d48:	89fb      	ldrh	r3, [r7, #14]
 8000d4a:	6353      	str	r3, [r2, #52]	; 0x34
	  TIM3->CCR2 = 0;
 8000d4c:	4b49      	ldr	r3, [pc, #292]	; (8000e74 <set_motor+0x178>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	639a      	str	r2, [r3, #56]	; 0x38
	break;
 8000d52:	e08a      	b.n	8000e6a <set_motor+0x16e>
	} else if (dir == -1) {
 8000d54:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d5c:	d10c      	bne.n	8000d78 <set_motor+0x7c>
	  HAL_GPIO_WritePin(M1_EN_GPIO_Port, M1_EN_Pin, GPIO_PIN_SET);
 8000d5e:	2201      	movs	r2, #1
 8000d60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d64:	4842      	ldr	r0, [pc, #264]	; (8000e70 <set_motor+0x174>)
 8000d66:	f001 fc46 	bl	80025f6 <HAL_GPIO_WritePin>
	  TIM3->CCR2 = pwm;
 8000d6a:	4a42      	ldr	r2, [pc, #264]	; (8000e74 <set_motor+0x178>)
 8000d6c:	89fb      	ldrh	r3, [r7, #14]
 8000d6e:	6393      	str	r3, [r2, #56]	; 0x38
	  TIM3->CCR1 = 0;
 8000d70:	4b40      	ldr	r3, [pc, #256]	; (8000e74 <set_motor+0x178>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	635a      	str	r2, [r3, #52]	; 0x34
	break;
 8000d76:	e078      	b.n	8000e6a <set_motor+0x16e>
	} else if (dir == 0) //Freely run
 8000d78:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d10c      	bne.n	8000d9a <set_motor+0x9e>
	  HAL_GPIO_WritePin(M1_EN_GPIO_Port, M1_EN_Pin, GPIO_PIN_RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d86:	483a      	ldr	r0, [pc, #232]	; (8000e70 <set_motor+0x174>)
 8000d88:	f001 fc35 	bl	80025f6 <HAL_GPIO_WritePin>
	  TIM3->CCR1 = 0;
 8000d8c:	4b39      	ldr	r3, [pc, #228]	; (8000e74 <set_motor+0x178>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM3->CCR2 = 0;
 8000d92:	4b38      	ldr	r3, [pc, #224]	; (8000e74 <set_motor+0x178>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	639a      	str	r2, [r3, #56]	; 0x38
	break;
 8000d98:	e067      	b.n	8000e6a <set_motor+0x16e>
	  HAL_GPIO_WritePin(M1_EN_GPIO_Port, M1_EN_Pin, GPIO_PIN_SET);
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000da0:	4833      	ldr	r0, [pc, #204]	; (8000e70 <set_motor+0x174>)
 8000da2:	f001 fc28 	bl	80025f6 <HAL_GPIO_WritePin>
	  TIM3->CCR2 = 0;
 8000da6:	4b33      	ldr	r3, [pc, #204]	; (8000e74 <set_motor+0x178>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM3->CCR1 = 0;
 8000dac:	4b31      	ldr	r3, [pc, #196]	; (8000e74 <set_motor+0x178>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	635a      	str	r2, [r3, #52]	; 0x34
	break;
 8000db2:	e05a      	b.n	8000e6a <set_motor+0x16e>
	pwm = MAP(val, 0, 1000, 0, 999);
 8000db4:	88b8      	ldrh	r0, [r7, #4]
 8000db6:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000dba:	9300      	str	r3, [sp, #0]
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	f7ff ff66 	bl	8000c94 <MAP>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	81fb      	strh	r3, [r7, #14]
	if (dir == -1) {
 8000dcc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd4:	d10f      	bne.n	8000df6 <set_motor+0xfa>
	  HAL_GPIO_WritePin(M2_L_GPIO_Port, M2_L_Pin, GPIO_PIN_SET);
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ddc:	4824      	ldr	r0, [pc, #144]	; (8000e70 <set_motor+0x174>)
 8000dde:	f001 fc0a 	bl	80025f6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M2_R_GPIO_Port, M2_R_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000de8:	4821      	ldr	r0, [pc, #132]	; (8000e70 <set_motor+0x174>)
 8000dea:	f001 fc04 	bl	80025f6 <HAL_GPIO_WritePin>
	  TIM4->CCR2 = pwm;
 8000dee:	4a22      	ldr	r2, [pc, #136]	; (8000e78 <set_motor+0x17c>)
 8000df0:	89fb      	ldrh	r3, [r7, #14]
 8000df2:	6393      	str	r3, [r2, #56]	; 0x38
	break;
 8000df4:	e038      	b.n	8000e68 <set_motor+0x16c>
	} else if (dir == 1) {
 8000df6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d10f      	bne.n	8000e1e <set_motor+0x122>
	  HAL_GPIO_WritePin(M2_L_GPIO_Port, M2_L_Pin, GPIO_PIN_RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e04:	481a      	ldr	r0, [pc, #104]	; (8000e70 <set_motor+0x174>)
 8000e06:	f001 fbf6 	bl	80025f6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M2_R_GPIO_Port, M2_R_Pin, GPIO_PIN_SET);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e10:	4817      	ldr	r0, [pc, #92]	; (8000e70 <set_motor+0x174>)
 8000e12:	f001 fbf0 	bl	80025f6 <HAL_GPIO_WritePin>
	  TIM4->CCR2 = pwm;
 8000e16:	4a18      	ldr	r2, [pc, #96]	; (8000e78 <set_motor+0x17c>)
 8000e18:	89fb      	ldrh	r3, [r7, #14]
 8000e1a:	6393      	str	r3, [r2, #56]	; 0x38
	break;
 8000e1c:	e024      	b.n	8000e68 <set_motor+0x16c>
	} else if (dir == -2) //Freely run
 8000e1e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000e22:	f113 0f02 	cmn.w	r3, #2
 8000e26:	d10f      	bne.n	8000e48 <set_motor+0x14c>
	  TIM4->CCR2 = 0;
 8000e28:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <set_motor+0x17c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	639a      	str	r2, [r3, #56]	; 0x38
	  HAL_GPIO_WritePin(M2_L_GPIO_Port, M2_L_Pin, GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e34:	480e      	ldr	r0, [pc, #56]	; (8000e70 <set_motor+0x174>)
 8000e36:	f001 fbde 	bl	80025f6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M2_R_GPIO_Port, M2_R_Pin, GPIO_PIN_RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e40:	480b      	ldr	r0, [pc, #44]	; (8000e70 <set_motor+0x174>)
 8000e42:	f001 fbd8 	bl	80025f6 <HAL_GPIO_WritePin>
	break;
 8000e46:	e00f      	b.n	8000e68 <set_motor+0x16c>
	  HAL_GPIO_WritePin(M2_L_GPIO_Port, M2_L_Pin, GPIO_PIN_RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e4e:	4808      	ldr	r0, [pc, #32]	; (8000e70 <set_motor+0x174>)
 8000e50:	f001 fbd1 	bl	80025f6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M2_R_GPIO_Port, M2_R_Pin, GPIO_PIN_RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e5a:	4805      	ldr	r0, [pc, #20]	; (8000e70 <set_motor+0x174>)
 8000e5c:	f001 fbcb 	bl	80025f6 <HAL_GPIO_WritePin>
	  TIM4->CCR2 = 999;
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <set_motor+0x17c>)
 8000e62:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e66:	639a      	str	r2, [r3, #56]	; 0x38
	break;
 8000e68:	bf00      	nop
  }
}
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40010c00 	.word	0x40010c00
 8000e74:	40000400 	.word	0x40000400
 8000e78:	40000800 	.word	0x40000800
 8000e7c:	00000000 	.word	0x00000000

08000e80 <HAL_TIM_PeriodElapsedCallback>:
volatile u8 M1_dir = 0, M2_dir = 0;
volatile u32 tick_20ms = 0;

volatile bool FLAG_sendData = false;
volatile float M1_travel = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e80:	b5b0      	push	{r4, r5, r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4) {
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a4e      	ldr	r2, [pc, #312]	; (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	f040 81f9 	bne.w	8001286 <HAL_TIM_PeriodElapsedCallback+0x406>
	tick_count = tick_count + 1;
 8000e94:	4b4d      	ldr	r3, [pc, #308]	; (8000fcc <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	4a4c      	ldr	r2, [pc, #304]	; (8000fcc <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000e9c:	6013      	str	r3, [r2, #0]
	if (tick_count >= deltaT) {
 8000e9e:	4b4c      	ldr	r3, [pc, #304]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b49      	ldr	r3, [pc, #292]	; (8000fcc <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	f200 81eb 	bhi.w	8001286 <HAL_TIM_PeriodElapsedCallback+0x406>
	  //20 ms
	  tick_count = 0;
 8000eb0:	4b46      	ldr	r3, [pc, #280]	; (8000fcc <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
	  if (FLAG_runMotor) {
 8000eb6:	4b47      	ldr	r3, [pc, #284]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	f000 81d9 	beq.w	8001272 <HAL_TIM_PeriodElapsedCallback+0x3f2>
		M1_vref = 1000 * sin((2 * 3.14 / 20.0) * t);
 8000ec0:	4b45      	ldr	r3, [pc, #276]	; (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff faaf 	bl	8000428 <__aeabi_f2d>
 8000eca:	a33d      	add	r3, pc, #244	; (adr r3, 8000fc0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed0:	f7ff fb02 	bl	80004d8 <__aeabi_dmul>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	4610      	mov	r0, r2
 8000eda:	4619      	mov	r1, r3
 8000edc:	f006 f9e4 	bl	80072a8 <sin>
 8000ee0:	f04f 0200 	mov.w	r2, #0
 8000ee4:	4b3d      	ldr	r3, [pc, #244]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000ee6:	f7ff faf7 	bl	80004d8 <__aeabi_dmul>
 8000eea:	4602      	mov	r2, r0
 8000eec:	460b      	mov	r3, r1
 8000eee:	4610      	mov	r0, r2
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f7ff fde9 	bl	8000ac8 <__aeabi_d2f>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	4a39      	ldr	r2, [pc, #228]	; (8000fe0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000efa:	6013      	str	r3, [r2, #0]
		t = t + deltaT / 1000.0;
 8000efc:	4b36      	ldr	r3, [pc, #216]	; (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fa91 	bl	8000428 <__aeabi_f2d>
 8000f06:	4604      	mov	r4, r0
 8000f08:	460d      	mov	r5, r1
 8000f0a:	4b31      	ldr	r3, [pc, #196]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fa77 	bl	8000404 <__aeabi_i2d>
 8000f16:	f04f 0200 	mov.w	r2, #0
 8000f1a:	4b30      	ldr	r3, [pc, #192]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000f1c:	f7ff fc06 	bl	800072c <__aeabi_ddiv>
 8000f20:	4602      	mov	r2, r0
 8000f22:	460b      	mov	r3, r1
 8000f24:	4620      	mov	r0, r4
 8000f26:	4629      	mov	r1, r5
 8000f28:	f7ff f920 	bl	800016c <__adddf3>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	460b      	mov	r3, r1
 8000f30:	4610      	mov	r0, r2
 8000f32:	4619      	mov	r1, r3
 8000f34:	f7ff fdc8 	bl	8000ac8 <__aeabi_d2f>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	4a27      	ldr	r2, [pc, #156]	; (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000f3c:	6013      	str	r3, [r2, #0]

		now_E1 = TIM1->CNT;
 8000f3e:	4b29      	ldr	r3, [pc, #164]	; (8000fe4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f42:	461a      	mov	r2, r3
 8000f44:	4b28      	ldr	r3, [pc, #160]	; (8000fe8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000f46:	601a      	str	r2, [r3, #0]
		now_E2 = TIM2->CNT;
 8000f48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4e:	461a      	mov	r2, r3
 8000f50:	4b26      	ldr	r3, [pc, #152]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000f52:	601a      	str	r2, [r3, #0]

		delta_E1 = now_E1 - pre_E1;
 8000f54:	4b24      	ldr	r3, [pc, #144]	; (8000fe8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4b25      	ldr	r3, [pc, #148]	; (8000ff0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	4a25      	ldr	r2, [pc, #148]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000f60:	6013      	str	r3, [r2, #0]
		delta_E2 = now_E2 - pre_E2;
 8000f62:	4b22      	ldr	r3, [pc, #136]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	4b24      	ldr	r3, [pc, #144]	; (8000ff8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	4a23      	ldr	r2, [pc, #140]	; (8000ffc <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000f6e:	6013      	str	r3, [r2, #0]

		if (delta_E1 < -3000) // now = 5, pre = 65530
 8000f70:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a22      	ldr	r2, [pc, #136]	; (8001000 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	da07      	bge.n	8000f8a <HAL_TIM_PeriodElapsedCallback+0x10a>
		  delta_E1 = delta_E1 + 0xFFFF;
 8000f7a:	4b1e      	ldr	r3, [pc, #120]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000f82:	33ff      	adds	r3, #255	; 0xff
 8000f84:	4a1b      	ldr	r2, [pc, #108]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000f86:	6013      	str	r3, [r2, #0]
 8000f88:	e00c      	b.n	8000fa4 <HAL_TIM_PeriodElapsedCallback+0x124>
		else if (delta_E1 > 3000) // now = 65535, pre = 5
 8000f8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000f92:	4293      	cmp	r3, r2
 8000f94:	dd06      	ble.n	8000fa4 <HAL_TIM_PeriodElapsedCallback+0x124>
		  delta_E1 = delta_E1 - 0xFFFF;
 8000f96:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8000f9e:	3bff      	subs	r3, #255	; 0xff
 8000fa0:	4a14      	ldr	r2, [pc, #80]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000fa2:	6013      	str	r3, [r2, #0]

		if (delta_E2 < -3000) // now = 5, pre = 65530
 8000fa4:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a15      	ldr	r2, [pc, #84]	; (8001000 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	da2a      	bge.n	8001004 <HAL_TIM_PeriodElapsedCallback+0x184>
		  delta_E2 = delta_E2 + 0xFFFF;
 8000fae:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000fb6:	33ff      	adds	r3, #255	; 0xff
 8000fb8:	4a10      	ldr	r2, [pc, #64]	; (8000ffc <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000fba:	6013      	str	r3, [r2, #0]
 8000fbc:	e02f      	b.n	800101e <HAL_TIM_PeriodElapsedCallback+0x19e>
 8000fbe:	bf00      	nop
 8000fc0:	74bc6a7f 	.word	0x74bc6a7f
 8000fc4:	3fd41893 	.word	0x3fd41893
 8000fc8:	40000800 	.word	0x40000800
 8000fcc:	20000394 	.word	0x20000394
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	200003d0 	.word	0x200003d0
 8000fd8:	200003cc 	.word	0x200003cc
 8000fdc:	408f4000 	.word	0x408f4000
 8000fe0:	200003c8 	.word	0x200003c8
 8000fe4:	40012c00 	.word	0x40012c00
 8000fe8:	20000398 	.word	0x20000398
 8000fec:	2000039c 	.word	0x2000039c
 8000ff0:	200003a8 	.word	0x200003a8
 8000ff4:	200003a0 	.word	0x200003a0
 8000ff8:	200003ac 	.word	0x200003ac
 8000ffc:	200003a4 	.word	0x200003a4
 8001000:	fffff448 	.word	0xfffff448
		else if (delta_E2 > 3000) // now = 65535, pre = 5
 8001004:	4baa      	ldr	r3, [pc, #680]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0x430>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800100c:	4293      	cmp	r3, r2
 800100e:	dd06      	ble.n	800101e <HAL_TIM_PeriodElapsedCallback+0x19e>
		  delta_E2 = delta_E2 - 0xFFFF;
 8001010:	4ba7      	ldr	r3, [pc, #668]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0x430>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8001018:	3bff      	subs	r3, #255	; 0xff
 800101a:	4aa5      	ldr	r2, [pc, #660]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0x430>)
 800101c:	6013      	str	r3, [r2, #0]

		pre_E1 = now_E1;
 800101e:	4ba5      	ldr	r3, [pc, #660]	; (80012b4 <HAL_TIM_PeriodElapsedCallback+0x434>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4aa5      	ldr	r2, [pc, #660]	; (80012b8 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8001024:	6013      	str	r3, [r2, #0]
		pre_E2 = now_E2;
 8001026:	4ba5      	ldr	r3, [pc, #660]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0x43c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4aa5      	ldr	r2, [pc, #660]	; (80012c0 <HAL_TIM_PeriodElapsedCallback+0x440>)
 800102c:	6013      	str	r3, [r2, #0]

		// (ticks/s*60)/(ticks/mRev*mRev/outRev) = outRev/min
		M1_velo = (delta_E1 * 20 * 60.0)
 800102e:	4ba5      	ldr	r3, [pc, #660]	; (80012c4 <HAL_TIM_PeriodElapsedCallback+0x444>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	4613      	mov	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff f9e2 	bl	8000404 <__aeabi_i2d>
 8001040:	f04f 0200 	mov.w	r2, #0
 8001044:	4ba0      	ldr	r3, [pc, #640]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0x448>)
 8001046:	f7ff fa47 	bl	80004d8 <__aeabi_dmul>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	4610      	mov	r0, r2
 8001050:	4619      	mov	r1, r3
			/ (1.0 * M1_PulsePerRev * M1_GearRatio);
 8001052:	a38f      	add	r3, pc, #572	; (adr r3, 8001290 <HAL_TIM_PeriodElapsedCallback+0x410>)
 8001054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001058:	f7ff fb68 	bl	800072c <__aeabi_ddiv>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4610      	mov	r0, r2
 8001062:	4619      	mov	r1, r3
 8001064:	f7ff fd30 	bl	8000ac8 <__aeabi_d2f>
 8001068:	4603      	mov	r3, r0
		M1_velo = (delta_E1 * 20 * 60.0)
 800106a:	4a98      	ldr	r2, [pc, #608]	; (80012cc <HAL_TIM_PeriodElapsedCallback+0x44c>)
 800106c:	6013      	str	r3, [r2, #0]
		M2_velo = (delta_E2 * 20 * 60.0)
 800106e:	4b90      	ldr	r3, [pc, #576]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0x430>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	4613      	mov	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff f9c2 	bl	8000404 <__aeabi_i2d>
 8001080:	f04f 0200 	mov.w	r2, #0
 8001084:	4b90      	ldr	r3, [pc, #576]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0x448>)
 8001086:	f7ff fa27 	bl	80004d8 <__aeabi_dmul>
 800108a:	4602      	mov	r2, r0
 800108c:	460b      	mov	r3, r1
 800108e:	4610      	mov	r0, r2
 8001090:	4619      	mov	r1, r3
			/ (1.0 * M2_PulsePerRev * M2_GearRatio);
 8001092:	a381      	add	r3, pc, #516	; (adr r3, 8001298 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8001094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001098:	f7ff fb48 	bl	800072c <__aeabi_ddiv>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	4610      	mov	r0, r2
 80010a2:	4619      	mov	r1, r3
 80010a4:	f7ff fd10 	bl	8000ac8 <__aeabi_d2f>
 80010a8:	4603      	mov	r3, r0
		M2_velo = (delta_E2 * 20 * 60.0)
 80010aa:	4a89      	ldr	r2, [pc, #548]	; (80012d0 <HAL_TIM_PeriodElapsedCallback+0x450>)
 80010ac:	6013      	str	r3, [r2, #0]

		M1_travel = M1_travel
			+ delta_E1 * 1.0 / (1.0 * M1_PulsePerRev * M1_GearRatio);
 80010ae:	4b89      	ldr	r3, [pc, #548]	; (80012d4 <HAL_TIM_PeriodElapsedCallback+0x454>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff f9b8 	bl	8000428 <__aeabi_f2d>
 80010b8:	4604      	mov	r4, r0
 80010ba:	460d      	mov	r5, r1
 80010bc:	4b81      	ldr	r3, [pc, #516]	; (80012c4 <HAL_TIM_PeriodElapsedCallback+0x444>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff f99f 	bl	8000404 <__aeabi_i2d>
 80010c6:	a372      	add	r3, pc, #456	; (adr r3, 8001290 <HAL_TIM_PeriodElapsedCallback+0x410>)
 80010c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010cc:	f7ff fb2e 	bl	800072c <__aeabi_ddiv>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	4620      	mov	r0, r4
 80010d6:	4629      	mov	r1, r5
 80010d8:	f7ff f848 	bl	800016c <__adddf3>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	4610      	mov	r0, r2
 80010e2:	4619      	mov	r1, r3
 80010e4:	f7ff fcf0 	bl	8000ac8 <__aeabi_d2f>
 80010e8:	4603      	mov	r3, r0
		M1_travel = M1_travel
 80010ea:	4a7a      	ldr	r2, [pc, #488]	; (80012d4 <HAL_TIM_PeriodElapsedCallback+0x454>)
 80010ec:	6013      	str	r3, [r2, #0]

		// pulse/(pulse/rev*rev/Outrev) = OutRev *pitch = mm
		M1_velo_filt = -0.222 * M1_velo_filt + 0.611 * M1_velo
 80010ee:	4b7a      	ldr	r3, [pc, #488]	; (80012d8 <HAL_TIM_PeriodElapsedCallback+0x458>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff f998 	bl	8000428 <__aeabi_f2d>
 80010f8:	a369      	add	r3, pc, #420	; (adr r3, 80012a0 <HAL_TIM_PeriodElapsedCallback+0x420>)
 80010fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fe:	f7ff f9eb 	bl	80004d8 <__aeabi_dmul>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	4614      	mov	r4, r2
 8001108:	461d      	mov	r5, r3
 800110a:	4b70      	ldr	r3, [pc, #448]	; (80012cc <HAL_TIM_PeriodElapsedCallback+0x44c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff f98a 	bl	8000428 <__aeabi_f2d>
 8001114:	a364      	add	r3, pc, #400	; (adr r3, 80012a8 <HAL_TIM_PeriodElapsedCallback+0x428>)
 8001116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111a:	f7ff f9dd 	bl	80004d8 <__aeabi_dmul>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4620      	mov	r0, r4
 8001124:	4629      	mov	r1, r5
 8001126:	f7ff f821 	bl	800016c <__adddf3>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	4614      	mov	r4, r2
 8001130:	461d      	mov	r5, r3
			+ 0.611 * M1_preVelo;
 8001132:	4b6a      	ldr	r3, [pc, #424]	; (80012dc <HAL_TIM_PeriodElapsedCallback+0x45c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff f976 	bl	8000428 <__aeabi_f2d>
 800113c:	a35a      	add	r3, pc, #360	; (adr r3, 80012a8 <HAL_TIM_PeriodElapsedCallback+0x428>)
 800113e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001142:	f7ff f9c9 	bl	80004d8 <__aeabi_dmul>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4620      	mov	r0, r4
 800114c:	4629      	mov	r1, r5
 800114e:	f7ff f80d 	bl	800016c <__adddf3>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4610      	mov	r0, r2
 8001158:	4619      	mov	r1, r3
 800115a:	f7ff fcb5 	bl	8000ac8 <__aeabi_d2f>
 800115e:	4603      	mov	r3, r0
		M1_velo_filt = -0.222 * M1_velo_filt + 0.611 * M1_velo
 8001160:	4a5d      	ldr	r2, [pc, #372]	; (80012d8 <HAL_TIM_PeriodElapsedCallback+0x458>)
 8001162:	6013      	str	r3, [r2, #0]
		M1_preVelo = M1_velo;
 8001164:	4b59      	ldr	r3, [pc, #356]	; (80012cc <HAL_TIM_PeriodElapsedCallback+0x44c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a5c      	ldr	r2, [pc, #368]	; (80012dc <HAL_TIM_PeriodElapsedCallback+0x45c>)
 800116a:	6013      	str	r3, [r2, #0]

		M2_velo_filt = -0.222 * M2_velo_filt + 0.611 * M2_velo
 800116c:	4b5c      	ldr	r3, [pc, #368]	; (80012e0 <HAL_TIM_PeriodElapsedCallback+0x460>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff f959 	bl	8000428 <__aeabi_f2d>
 8001176:	a34a      	add	r3, pc, #296	; (adr r3, 80012a0 <HAL_TIM_PeriodElapsedCallback+0x420>)
 8001178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117c:	f7ff f9ac 	bl	80004d8 <__aeabi_dmul>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4614      	mov	r4, r2
 8001186:	461d      	mov	r5, r3
 8001188:	4b51      	ldr	r3, [pc, #324]	; (80012d0 <HAL_TIM_PeriodElapsedCallback+0x450>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff f94b 	bl	8000428 <__aeabi_f2d>
 8001192:	a345      	add	r3, pc, #276	; (adr r3, 80012a8 <HAL_TIM_PeriodElapsedCallback+0x428>)
 8001194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001198:	f7ff f99e 	bl	80004d8 <__aeabi_dmul>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4620      	mov	r0, r4
 80011a2:	4629      	mov	r1, r5
 80011a4:	f7fe ffe2 	bl	800016c <__adddf3>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	4614      	mov	r4, r2
 80011ae:	461d      	mov	r5, r3
			+ 0.611 * M2_preVelo;
 80011b0:	4b4c      	ldr	r3, [pc, #304]	; (80012e4 <HAL_TIM_PeriodElapsedCallback+0x464>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff f937 	bl	8000428 <__aeabi_f2d>
 80011ba:	a33b      	add	r3, pc, #236	; (adr r3, 80012a8 <HAL_TIM_PeriodElapsedCallback+0x428>)
 80011bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c0:	f7ff f98a 	bl	80004d8 <__aeabi_dmul>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4620      	mov	r0, r4
 80011ca:	4629      	mov	r1, r5
 80011cc:	f7fe ffce 	bl	800016c <__adddf3>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4610      	mov	r0, r2
 80011d6:	4619      	mov	r1, r3
 80011d8:	f7ff fc76 	bl	8000ac8 <__aeabi_d2f>
 80011dc:	4603      	mov	r3, r0
		M2_velo_filt = -0.222 * M2_velo_filt + 0.611 * M2_velo
 80011de:	4a40      	ldr	r2, [pc, #256]	; (80012e0 <HAL_TIM_PeriodElapsedCallback+0x460>)
 80011e0:	6013      	str	r3, [r2, #0]
		M2_preVelo = M2_velo;
 80011e2:	4b3b      	ldr	r3, [pc, #236]	; (80012d0 <HAL_TIM_PeriodElapsedCallback+0x450>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a3f      	ldr	r2, [pc, #252]	; (80012e4 <HAL_TIM_PeriodElapsedCallback+0x464>)
 80011e8:	6013      	str	r3, [r2, #0]
//		M1_velo_eint = M1_velo_eint + M1_velo_e * deltaT / 1000.0;
//		M1_u = M1_Kp * M1_velo_e + M1_Ki * M1_velo_eint
//			+ M1_Kd * (M1_velo_e - M1_velo_preE) * 1000.0 / deltaT;
//		M1_velo_preE = M1_velo_e;

		float M1_pwm = fabsf(M1_vref);
 80011ea:	4b3f      	ldr	r3, [pc, #252]	; (80012e8 <HAL_TIM_PeriodElapsedCallback+0x468>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011f2:	60fb      	str	r3, [r7, #12]
		if (M1_pwm > 1000.0)
 80011f4:	493d      	ldr	r1, [pc, #244]	; (80012ec <HAL_TIM_PeriodElapsedCallback+0x46c>)
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f7ff fd22 	bl	8000c40 <__aeabi_fcmpgt>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d002      	beq.n	8001208 <HAL_TIM_PeriodElapsedCallback+0x388>
		  M1_pwm = 1000.0;
 8001202:	4b3a      	ldr	r3, [pc, #232]	; (80012ec <HAL_TIM_PeriodElapsedCallback+0x46c>)
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	e00a      	b.n	800121e <HAL_TIM_PeriodElapsedCallback+0x39e>
		else if (M1_pwm < 0)
 8001208:	f04f 0100 	mov.w	r1, #0
 800120c:	68f8      	ldr	r0, [r7, #12]
 800120e:	f7ff fcf9 	bl	8000c04 <__aeabi_fcmplt>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d002      	beq.n	800121e <HAL_TIM_PeriodElapsedCallback+0x39e>
		  M1_pwm = 0;
 8001218:	f04f 0300 	mov.w	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]

		if (M1_vref < 0)
 800121e:	4b32      	ldr	r3, [pc, #200]	; (80012e8 <HAL_TIM_PeriodElapsedCallback+0x468>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f04f 0100 	mov.w	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff fcec 	bl	8000c04 <__aeabi_fcmplt>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_TIM_PeriodElapsedCallback+0x3ba>
		  M1_dir = 1;
 8001232:	4b2f      	ldr	r3, [pc, #188]	; (80012f0 <HAL_TIM_PeriodElapsedCallback+0x470>)
 8001234:	2201      	movs	r2, #1
 8001236:	701a      	strb	r2, [r3, #0]
 8001238:	e002      	b.n	8001240 <HAL_TIM_PeriodElapsedCallback+0x3c0>
		else
		  M1_dir = -1;
 800123a:	4b2d      	ldr	r3, [pc, #180]	; (80012f0 <HAL_TIM_PeriodElapsedCallback+0x470>)
 800123c:	22ff      	movs	r2, #255	; 0xff
 800123e:	701a      	strb	r2, [r3, #0]
		set_motor(1, -1, 1000);
 8001240:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001244:	f04f 31ff 	mov.w	r1, #4294967295
 8001248:	2001      	movs	r0, #1
 800124a:	f7ff fd57 	bl	8000cfc <set_motor>
		set_motor(2, M1_dir, M1_pwm);
 800124e:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <HAL_TIM_PeriodElapsedCallback+0x470>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	b2db      	uxtb	r3, r3
 8001254:	b25c      	sxtb	r4, r3
 8001256:	68f8      	ldr	r0, [r7, #12]
 8001258:	f7ff fcfc 	bl	8000c54 <__aeabi_f2uiz>
 800125c:	4603      	mov	r3, r0
 800125e:	b29b      	uxth	r3, r3
 8001260:	461a      	mov	r2, r3
 8001262:	4621      	mov	r1, r4
 8001264:	2002      	movs	r0, #2
 8001266:	f7ff fd49 	bl	8000cfc <set_motor>
		FLAG_sendData = true;
 800126a:	4b22      	ldr	r3, [pc, #136]	; (80012f4 <HAL_TIM_PeriodElapsedCallback+0x474>)
 800126c:	2201      	movs	r2, #1
 800126e:	701a      	strb	r2, [r3, #0]
		set_motor(1, 0, 0);
		set_motor(2, 0, 0);
	  }
	}
  }
}
 8001270:	e009      	b.n	8001286 <HAL_TIM_PeriodElapsedCallback+0x406>
		set_motor(1, 0, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2100      	movs	r1, #0
 8001276:	2001      	movs	r0, #1
 8001278:	f7ff fd40 	bl	8000cfc <set_motor>
		set_motor(2, 0, 0);
 800127c:	2200      	movs	r2, #0
 800127e:	2100      	movs	r1, #0
 8001280:	2002      	movs	r0, #2
 8001282:	f7ff fd3b 	bl	8000cfc <set_motor>
}
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bdb0      	pop	{r4, r5, r7, pc}
 800128e:	bf00      	nop
 8001290:	00000000 	.word	0x00000000
 8001294:	40a77000 	.word	0x40a77000
 8001298:	00000000 	.word	0x00000000
 800129c:	40bce000 	.word	0x40bce000
 80012a0:	f9db22d1 	.word	0xf9db22d1
 80012a4:	bfcc6a7e 	.word	0xbfcc6a7e
 80012a8:	df3b645a 	.word	0xdf3b645a
 80012ac:	3fe38d4f 	.word	0x3fe38d4f
 80012b0:	200003a4 	.word	0x200003a4
 80012b4:	20000398 	.word	0x20000398
 80012b8:	200003a8 	.word	0x200003a8
 80012bc:	2000039c 	.word	0x2000039c
 80012c0:	200003ac 	.word	0x200003ac
 80012c4:	200003a0 	.word	0x200003a0
 80012c8:	404e0000 	.word	0x404e0000
 80012cc:	200003b0 	.word	0x200003b0
 80012d0:	200003b4 	.word	0x200003b4
 80012d4:	200003d4 	.word	0x200003d4
 80012d8:	200003b8 	.word	0x200003b8
 80012dc:	200003c0 	.word	0x200003c0
 80012e0:	200003bc 	.word	0x200003bc
 80012e4:	200003c4 	.word	0x200003c4
 80012e8:	200003c8 	.word	0x200003c8
 80012ec:	447a0000 	.word	0x447a0000
 80012f0:	200003d1 	.word	0x200003d1
 80012f4:	200003d2 	.word	0x200003d2

080012f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012fc:	b08a      	sub	sp, #40	; 0x28
 80012fe:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001300:	f000 fdbe 	bl	8001e80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001304:	f000 f8e0 	bl	80014c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001308:	f000 fab8 	bl	800187c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800130c:	f000 fa8c 	bl	8001828 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001310:	f000 f920 	bl	8001554 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001314:	f000 f976 	bl	8001604 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001318:	f000 f9c8 	bl	80016ac <MX_TIM3_Init>
  MX_TIM4_Init();
 800131c:	f000 fa2a 	bl	8001774 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001320:	213c      	movs	r1, #60	; 0x3c
 8001322:	4855      	ldr	r0, [pc, #340]	; (8001478 <main+0x180>)
 8001324:	f001 ff80 	bl	8003228 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001328:	213c      	movs	r1, #60	; 0x3c
 800132a:	4854      	ldr	r0, [pc, #336]	; (800147c <main+0x184>)
 800132c:	f001 ff7c 	bl	8003228 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001330:	2100      	movs	r1, #0
 8001332:	4853      	ldr	r0, [pc, #332]	; (8001480 <main+0x188>)
 8001334:	f001 fe34 	bl	8002fa0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001338:	2104      	movs	r1, #4
 800133a:	4851      	ldr	r0, [pc, #324]	; (8001480 <main+0x188>)
 800133c:	f001 fe30 	bl	8002fa0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001340:	2104      	movs	r1, #4
 8001342:	4850      	ldr	r0, [pc, #320]	; (8001484 <main+0x18c>)
 8001344:	f001 fe2c 	bl	8002fa0 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim4);
 8001348:	484e      	ldr	r0, [pc, #312]	; (8001484 <main+0x18c>)
 800134a:	f001 fd87 	bl	8002e5c <HAL_TIM_Base_Start_IT>
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if (FLAG_sendData) {
 800134e:	4b4e      	ldr	r3, [pc, #312]	; (8001488 <main+0x190>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	d03d      	beq.n	80013d4 <main+0xdc>
	  FLAG_sendData = false;
 8001358:	4b4b      	ldr	r3, [pc, #300]	; (8001488 <main+0x190>)
 800135a:	2200      	movs	r2, #0
 800135c:	701a      	strb	r2, [r3, #0]
	  sprintf(MSG, "%9.3f,%9.3f,%9.3f,%9.3f,%9.3f\n", M1_vref, M1_velo,
 800135e:	4b4b      	ldr	r3, [pc, #300]	; (800148c <main+0x194>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff f860 	bl	8000428 <__aeabi_f2d>
 8001368:	e9c7 0100 	strd	r0, r1, [r7]
 800136c:	4b48      	ldr	r3, [pc, #288]	; (8001490 <main+0x198>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff f859 	bl	8000428 <__aeabi_f2d>
 8001376:	4604      	mov	r4, r0
 8001378:	460d      	mov	r5, r1
 800137a:	4b46      	ldr	r3, [pc, #280]	; (8001494 <main+0x19c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff f852 	bl	8000428 <__aeabi_f2d>
 8001384:	4680      	mov	r8, r0
 8001386:	4689      	mov	r9, r1
 8001388:	4b43      	ldr	r3, [pc, #268]	; (8001498 <main+0x1a0>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff f84b 	bl	8000428 <__aeabi_f2d>
 8001392:	4682      	mov	sl, r0
 8001394:	468b      	mov	fp, r1
 8001396:	4b41      	ldr	r3, [pc, #260]	; (800149c <main+0x1a4>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff f844 	bl	8000428 <__aeabi_f2d>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80013a8:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80013ac:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80013b0:	e9cd 4500 	strd	r4, r5, [sp]
 80013b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013b8:	4939      	ldr	r1, [pc, #228]	; (80014a0 <main+0x1a8>)
 80013ba:	483a      	ldr	r0, [pc, #232]	; (80014a4 <main+0x1ac>)
 80013bc:	f003 fcfc 	bl	8004db8 <siprintf>
		  M1_velo_filt, M2_velo, M2_velo_filt);
	  HAL_UART_Transmit_IT(&huart2, (uint8_t*) MSG, strlen(MSG));
 80013c0:	4838      	ldr	r0, [pc, #224]	; (80014a4 <main+0x1ac>)
 80013c2:	f7fe fec5 	bl	8000150 <strlen>
 80013c6:	4603      	mov	r3, r0
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	461a      	mov	r2, r3
 80013cc:	4935      	ldr	r1, [pc, #212]	; (80014a4 <main+0x1ac>)
 80013ce:	4836      	ldr	r0, [pc, #216]	; (80014a8 <main+0x1b0>)
 80013d0:	f002 fc6d 	bl	8003cae <HAL_UART_Transmit_IT>
	}

	if (HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin) == GPIO_PIN_RESET) {
 80013d4:	2101      	movs	r1, #1
 80013d6:	4835      	ldr	r0, [pc, #212]	; (80014ac <main+0x1b4>)
 80013d8:	f001 f8f6 	bl	80025c8 <HAL_GPIO_ReadPin>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d10f      	bne.n	8001402 <main+0x10a>
	  if (!FLAG_BTN_inTime)
 80013e2:	4b33      	ldr	r3, [pc, #204]	; (80014b0 <main+0x1b8>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	f083 0301 	eor.w	r3, r3, #1
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d004      	beq.n	80013fa <main+0x102>
		BTN_inTime = HAL_GetTick();
 80013f0:	f000 fd9e 	bl	8001f30 <HAL_GetTick>
 80013f4:	4603      	mov	r3, r0
 80013f6:	4a2f      	ldr	r2, [pc, #188]	; (80014b4 <main+0x1bc>)
 80013f8:	6013      	str	r3, [r2, #0]
	  FLAG_BTN_inTime = true;
 80013fa:	4b2d      	ldr	r3, [pc, #180]	; (80014b0 <main+0x1b8>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	701a      	strb	r2, [r3, #0]
 8001400:	e7a5      	b.n	800134e <main+0x56>
	} else if (HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin) == GPIO_PIN_SET) {
 8001402:	2101      	movs	r1, #1
 8001404:	4829      	ldr	r0, [pc, #164]	; (80014ac <main+0x1b4>)
 8001406:	f001 f8df 	bl	80025c8 <HAL_GPIO_ReadPin>
 800140a:	4603      	mov	r3, r0
 800140c:	2b01      	cmp	r3, #1
 800140e:	d19e      	bne.n	800134e <main+0x56>
	  if (FLAG_BTN_inTime) {
 8001410:	4b27      	ldr	r3, [pc, #156]	; (80014b0 <main+0x1b8>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d09a      	beq.n	800134e <main+0x56>
		FLAG_BTN_inTime = false;
 8001418:	4b25      	ldr	r3, [pc, #148]	; (80014b0 <main+0x1b8>)
 800141a:	2200      	movs	r2, #0
 800141c:	701a      	strb	r2, [r3, #0]
		if (HAL_GetTick() - BTN_inTime > 50) {
 800141e:	f000 fd87 	bl	8001f30 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	4b23      	ldr	r3, [pc, #140]	; (80014b4 <main+0x1bc>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b32      	cmp	r3, #50	; 0x32
 800142c:	d98f      	bls.n	800134e <main+0x56>
		  if (!FLAG_runMotor)
 800142e:	4b22      	ldr	r3, [pc, #136]	; (80014b8 <main+0x1c0>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	f083 0301 	eor.w	r3, r3, #1
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <main+0x14c>
			FLAG_runMotor = true;
 800143c:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <main+0x1c0>)
 800143e:	2201      	movs	r2, #1
 8001440:	701a      	strb	r2, [r3, #0]
 8001442:	e784      	b.n	800134e <main+0x56>
		  else {
			FLAG_runMotor = false;
 8001444:	4b1c      	ldr	r3, [pc, #112]	; (80014b8 <main+0x1c0>)
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
			M1_travel = 0;
 800144a:	4b1c      	ldr	r3, [pc, #112]	; (80014bc <main+0x1c4>)
 800144c:	f04f 0200 	mov.w	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
			sprintf(MSG, "new\n");
 8001452:	491b      	ldr	r1, [pc, #108]	; (80014c0 <main+0x1c8>)
 8001454:	4813      	ldr	r0, [pc, #76]	; (80014a4 <main+0x1ac>)
 8001456:	f003 fcaf 	bl	8004db8 <siprintf>
			HAL_UART_Transmit_IT(&huart2, (uint8_t*) MSG, strlen(MSG));
 800145a:	4812      	ldr	r0, [pc, #72]	; (80014a4 <main+0x1ac>)
 800145c:	f7fe fe78 	bl	8000150 <strlen>
 8001460:	4603      	mov	r3, r0
 8001462:	b29b      	uxth	r3, r3
 8001464:	461a      	mov	r2, r3
 8001466:	490f      	ldr	r1, [pc, #60]	; (80014a4 <main+0x1ac>)
 8001468:	480f      	ldr	r0, [pc, #60]	; (80014a8 <main+0x1b0>)
 800146a:	f002 fc20 	bl	8003cae <HAL_UART_Transmit_IT>
			t = 0;
 800146e:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <main+0x1cc>)
 8001470:	f04f 0200 	mov.w	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
	if (FLAG_sendData) {
 8001476:	e76a      	b.n	800134e <main+0x56>
 8001478:	200001fc 	.word	0x200001fc
 800147c:	20000244 	.word	0x20000244
 8001480:	2000028c 	.word	0x2000028c
 8001484:	200002d4 	.word	0x200002d4
 8001488:	200003d2 	.word	0x200003d2
 800148c:	200003c8 	.word	0x200003c8
 8001490:	200003b0 	.word	0x200003b0
 8001494:	200003b8 	.word	0x200003b8
 8001498:	200003b4 	.word	0x200003b4
 800149c:	200003bc 	.word	0x200003bc
 80014a0:	080082b8 	.word	0x080082b8
 80014a4:	20000360 	.word	0x20000360
 80014a8:	2000031c 	.word	0x2000031c
 80014ac:	40010c00 	.word	0x40010c00
 80014b0:	200003dc 	.word	0x200003dc
 80014b4:	200003d8 	.word	0x200003d8
 80014b8:	200003d0 	.word	0x200003d0
 80014bc:	200003d4 	.word	0x200003d4
 80014c0:	080082d8 	.word	0x080082d8
 80014c4:	200003cc 	.word	0x200003cc

080014c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b090      	sub	sp, #64	; 0x40
 80014cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ce:	f107 0318 	add.w	r3, r7, #24
 80014d2:	2228      	movs	r2, #40	; 0x28
 80014d4:	2100      	movs	r1, #0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f003 f806 	bl	80044e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
 80014e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014ea:	2301      	movs	r3, #1
 80014ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014f4:	2300      	movs	r3, #0
 80014f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014f8:	2301      	movs	r3, #1
 80014fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014fc:	2302      	movs	r3, #2
 80014fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001500:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001504:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001506:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800150a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800150c:	f107 0318 	add.w	r3, r7, #24
 8001510:	4618      	mov	r0, r3
 8001512:	f001 f889 	bl	8002628 <HAL_RCC_OscConfig>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800151c:	f000 fa06 	bl	800192c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001520:	230f      	movs	r3, #15
 8001522:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001524:	2302      	movs	r3, #2
 8001526:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001528:	2300      	movs	r3, #0
 800152a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800152c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001530:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	2101      	movs	r1, #1
 800153a:	4618      	mov	r0, r3
 800153c:	f001 faf6 	bl	8002b2c <HAL_RCC_ClockConfig>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001546:	f000 f9f1 	bl	800192c <Error_Handler>
  }
}
 800154a:	bf00      	nop
 800154c:	3740      	adds	r7, #64	; 0x40
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08c      	sub	sp, #48	; 0x30
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800155a:	f107 030c 	add.w	r3, r7, #12
 800155e:	2224      	movs	r2, #36	; 0x24
 8001560:	2100      	movs	r1, #0
 8001562:	4618      	mov	r0, r3
 8001564:	f002 ffc0 	bl	80044e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001570:	4b22      	ldr	r3, [pc, #136]	; (80015fc <MX_TIM1_Init+0xa8>)
 8001572:	4a23      	ldr	r2, [pc, #140]	; (8001600 <MX_TIM1_Init+0xac>)
 8001574:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001576:	4b21      	ldr	r3, [pc, #132]	; (80015fc <MX_TIM1_Init+0xa8>)
 8001578:	2200      	movs	r2, #0
 800157a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157c:	4b1f      	ldr	r3, [pc, #124]	; (80015fc <MX_TIM1_Init+0xa8>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001582:	4b1e      	ldr	r3, [pc, #120]	; (80015fc <MX_TIM1_Init+0xa8>)
 8001584:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001588:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800158a:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <MX_TIM1_Init+0xa8>)
 800158c:	2200      	movs	r2, #0
 800158e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001590:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <MX_TIM1_Init+0xa8>)
 8001592:	2200      	movs	r2, #0
 8001594:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001596:	4b19      	ldr	r3, [pc, #100]	; (80015fc <MX_TIM1_Init+0xa8>)
 8001598:	2280      	movs	r2, #128	; 0x80
 800159a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800159c:	2303      	movs	r3, #3
 800159e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015a0:	2300      	movs	r3, #0
 80015a2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015a4:	2301      	movs	r3, #1
 80015a6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015b0:	2300      	movs	r3, #0
 80015b2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015b4:	2301      	movs	r3, #1
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80015c0:	f107 030c 	add.w	r3, r7, #12
 80015c4:	4619      	mov	r1, r3
 80015c6:	480d      	ldr	r0, [pc, #52]	; (80015fc <MX_TIM1_Init+0xa8>)
 80015c8:	f001 fd8c 	bl	80030e4 <HAL_TIM_Encoder_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80015d2:	f000 f9ab 	bl	800192c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d6:	2300      	movs	r3, #0
 80015d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015da:	2300      	movs	r3, #0
 80015dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	4619      	mov	r1, r3
 80015e2:	4806      	ldr	r0, [pc, #24]	; (80015fc <MX_TIM1_Init+0xa8>)
 80015e4:	f002 faa6 	bl	8003b34 <HAL_TIMEx_MasterConfigSynchronization>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80015ee:	f000 f99d 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015f2:	bf00      	nop
 80015f4:	3730      	adds	r7, #48	; 0x30
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	200001fc 	.word	0x200001fc
 8001600:	40012c00 	.word	0x40012c00

08001604 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08c      	sub	sp, #48	; 0x30
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800160a:	f107 030c 	add.w	r3, r7, #12
 800160e:	2224      	movs	r2, #36	; 0x24
 8001610:	2100      	movs	r1, #0
 8001612:	4618      	mov	r0, r3
 8001614:	f002 ff68 	bl	80044e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001620:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <MX_TIM2_Init+0xa4>)
 8001622:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001626:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001628:	4b1f      	ldr	r3, [pc, #124]	; (80016a8 <MX_TIM2_Init+0xa4>)
 800162a:	2200      	movs	r2, #0
 800162c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162e:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <MX_TIM2_Init+0xa4>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001634:	4b1c      	ldr	r3, [pc, #112]	; (80016a8 <MX_TIM2_Init+0xa4>)
 8001636:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800163a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800163c:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <MX_TIM2_Init+0xa4>)
 800163e:	2200      	movs	r2, #0
 8001640:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001642:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <MX_TIM2_Init+0xa4>)
 8001644:	2280      	movs	r2, #128	; 0x80
 8001646:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001648:	2301      	movs	r3, #1
 800164a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800164c:	2300      	movs	r3, #0
 800164e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001650:	2301      	movs	r3, #1
 8001652:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001654:	2300      	movs	r3, #0
 8001656:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800165c:	2300      	movs	r3, #0
 800165e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001660:	2301      	movs	r3, #1
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001664:	2300      	movs	r3, #0
 8001666:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800166c:	f107 030c 	add.w	r3, r7, #12
 8001670:	4619      	mov	r1, r3
 8001672:	480d      	ldr	r0, [pc, #52]	; (80016a8 <MX_TIM2_Init+0xa4>)
 8001674:	f001 fd36 	bl	80030e4 <HAL_TIM_Encoder_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800167e:	f000 f955 	bl	800192c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001682:	2300      	movs	r3, #0
 8001684:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001686:	2300      	movs	r3, #0
 8001688:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	4619      	mov	r1, r3
 800168e:	4806      	ldr	r0, [pc, #24]	; (80016a8 <MX_TIM2_Init+0xa4>)
 8001690:	f002 fa50 	bl	8003b34 <HAL_TIMEx_MasterConfigSynchronization>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800169a:	f000 f947 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800169e:	bf00      	nop
 80016a0:	3730      	adds	r7, #48	; 0x30
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000244 	.word	0x20000244

080016ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08a      	sub	sp, #40	; 0x28
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b2:	f107 0320 	add.w	r3, r7, #32
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	60da      	str	r2, [r3, #12]
 80016c8:	611a      	str	r2, [r3, #16]
 80016ca:	615a      	str	r2, [r3, #20]
 80016cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016ce:	4b27      	ldr	r3, [pc, #156]	; (800176c <MX_TIM3_Init+0xc0>)
 80016d0:	4a27      	ldr	r2, [pc, #156]	; (8001770 <MX_TIM3_Init+0xc4>)
 80016d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48;
 80016d4:	4b25      	ldr	r3, [pc, #148]	; (800176c <MX_TIM3_Init+0xc0>)
 80016d6:	2230      	movs	r2, #48	; 0x30
 80016d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016da:	4b24      	ldr	r3, [pc, #144]	; (800176c <MX_TIM3_Init+0xc0>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 80016e0:	4b22      	ldr	r3, [pc, #136]	; (800176c <MX_TIM3_Init+0xc0>)
 80016e2:	f240 12f3 	movw	r2, #499	; 0x1f3
 80016e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e8:	4b20      	ldr	r3, [pc, #128]	; (800176c <MX_TIM3_Init+0xc0>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016ee:	4b1f      	ldr	r3, [pc, #124]	; (800176c <MX_TIM3_Init+0xc0>)
 80016f0:	2280      	movs	r2, #128	; 0x80
 80016f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016f4:	481d      	ldr	r0, [pc, #116]	; (800176c <MX_TIM3_Init+0xc0>)
 80016f6:	f001 fc03 	bl	8002f00 <HAL_TIM_PWM_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001700:	f000 f914 	bl	800192c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001704:	2300      	movs	r3, #0
 8001706:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001708:	2300      	movs	r3, #0
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800170c:	f107 0320 	add.w	r3, r7, #32
 8001710:	4619      	mov	r1, r3
 8001712:	4816      	ldr	r0, [pc, #88]	; (800176c <MX_TIM3_Init+0xc0>)
 8001714:	f002 fa0e 	bl	8003b34 <HAL_TIMEx_MasterConfigSynchronization>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800171e:	f000 f905 	bl	800192c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001722:	2360      	movs	r3, #96	; 0x60
 8001724:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001732:	1d3b      	adds	r3, r7, #4
 8001734:	2200      	movs	r2, #0
 8001736:	4619      	mov	r1, r3
 8001738:	480c      	ldr	r0, [pc, #48]	; (800176c <MX_TIM3_Init+0xc0>)
 800173a:	f001 ff0b 	bl	8003554 <HAL_TIM_PWM_ConfigChannel>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001744:	f000 f8f2 	bl	800192c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001748:	1d3b      	adds	r3, r7, #4
 800174a:	2204      	movs	r2, #4
 800174c:	4619      	mov	r1, r3
 800174e:	4807      	ldr	r0, [pc, #28]	; (800176c <MX_TIM3_Init+0xc0>)
 8001750:	f001 ff00 	bl	8003554 <HAL_TIM_PWM_ConfigChannel>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800175a:	f000 f8e7 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800175e:	4803      	ldr	r0, [pc, #12]	; (800176c <MX_TIM3_Init+0xc0>)
 8001760:	f000 f9c0 	bl	8001ae4 <HAL_TIM_MspPostInit>

}
 8001764:	bf00      	nop
 8001766:	3728      	adds	r7, #40	; 0x28
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	2000028c 	.word	0x2000028c
 8001770:	40000400 	.word	0x40000400

08001774 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08a      	sub	sp, #40	; 0x28
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800177a:	f107 0320 	add.w	r3, r7, #32
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001784:	1d3b      	adds	r3, r7, #4
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]
 8001790:	611a      	str	r2, [r3, #16]
 8001792:	615a      	str	r2, [r3, #20]
 8001794:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001796:	4b22      	ldr	r3, [pc, #136]	; (8001820 <MX_TIM4_Init+0xac>)
 8001798:	4a22      	ldr	r2, [pc, #136]	; (8001824 <MX_TIM4_Init+0xb0>)
 800179a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48;
 800179c:	4b20      	ldr	r3, [pc, #128]	; (8001820 <MX_TIM4_Init+0xac>)
 800179e:	2230      	movs	r2, #48	; 0x30
 80017a0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a2:	4b1f      	ldr	r3, [pc, #124]	; (8001820 <MX_TIM4_Init+0xac>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80017a8:	4b1d      	ldr	r3, [pc, #116]	; (8001820 <MX_TIM4_Init+0xac>)
 80017aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017ae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b0:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <MX_TIM4_Init+0xac>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017b6:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <MX_TIM4_Init+0xac>)
 80017b8:	2280      	movs	r2, #128	; 0x80
 80017ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80017bc:	4818      	ldr	r0, [pc, #96]	; (8001820 <MX_TIM4_Init+0xac>)
 80017be:	f001 fb9f 	bl	8002f00 <HAL_TIM_PWM_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80017c8:	f000 f8b0 	bl	800192c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017cc:	2300      	movs	r3, #0
 80017ce:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d0:	2300      	movs	r3, #0
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017d4:	f107 0320 	add.w	r3, r7, #32
 80017d8:	4619      	mov	r1, r3
 80017da:	4811      	ldr	r0, [pc, #68]	; (8001820 <MX_TIM4_Init+0xac>)
 80017dc:	f002 f9aa 	bl	8003b34 <HAL_TIMEx_MasterConfigSynchronization>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80017e6:	f000 f8a1 	bl	800192c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ea:	2360      	movs	r3, #96	; 0x60
 80017ec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	2204      	movs	r2, #4
 80017fe:	4619      	mov	r1, r3
 8001800:	4807      	ldr	r0, [pc, #28]	; (8001820 <MX_TIM4_Init+0xac>)
 8001802:	f001 fea7 	bl	8003554 <HAL_TIM_PWM_ConfigChannel>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800180c:	f000 f88e 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001810:	4803      	ldr	r0, [pc, #12]	; (8001820 <MX_TIM4_Init+0xac>)
 8001812:	f000 f967 	bl	8001ae4 <HAL_TIM_MspPostInit>

}
 8001816:	bf00      	nop
 8001818:	3728      	adds	r7, #40	; 0x28
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200002d4 	.word	0x200002d4
 8001824:	40000800 	.word	0x40000800

08001828 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800182c:	4b11      	ldr	r3, [pc, #68]	; (8001874 <MX_USART2_UART_Init+0x4c>)
 800182e:	4a12      	ldr	r2, [pc, #72]	; (8001878 <MX_USART2_UART_Init+0x50>)
 8001830:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001832:	4b10      	ldr	r3, [pc, #64]	; (8001874 <MX_USART2_UART_Init+0x4c>)
 8001834:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001838:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800183a:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <MX_USART2_UART_Init+0x4c>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <MX_USART2_UART_Init+0x4c>)
 8001842:	2200      	movs	r2, #0
 8001844:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001846:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <MX_USART2_UART_Init+0x4c>)
 8001848:	2200      	movs	r2, #0
 800184a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800184c:	4b09      	ldr	r3, [pc, #36]	; (8001874 <MX_USART2_UART_Init+0x4c>)
 800184e:	220c      	movs	r2, #12
 8001850:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001852:	4b08      	ldr	r3, [pc, #32]	; (8001874 <MX_USART2_UART_Init+0x4c>)
 8001854:	2200      	movs	r2, #0
 8001856:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <MX_USART2_UART_Init+0x4c>)
 800185a:	2200      	movs	r2, #0
 800185c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800185e:	4805      	ldr	r0, [pc, #20]	; (8001874 <MX_USART2_UART_Init+0x4c>)
 8001860:	f002 f9d8 	bl	8003c14 <HAL_UART_Init>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800186a:	f000 f85f 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	2000031c 	.word	0x2000031c
 8001878:	40004400 	.word	0x40004400

0800187c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b088      	sub	sp, #32
 8001880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001882:	f107 0310 	add.w	r3, r7, #16
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	609a      	str	r2, [r3, #8]
 800188e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001890:	4b24      	ldr	r3, [pc, #144]	; (8001924 <MX_GPIO_Init+0xa8>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	4a23      	ldr	r2, [pc, #140]	; (8001924 <MX_GPIO_Init+0xa8>)
 8001896:	f043 0320 	orr.w	r3, r3, #32
 800189a:	6193      	str	r3, [r2, #24]
 800189c:	4b21      	ldr	r3, [pc, #132]	; (8001924 <MX_GPIO_Init+0xa8>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	f003 0320 	and.w	r3, r3, #32
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a8:	4b1e      	ldr	r3, [pc, #120]	; (8001924 <MX_GPIO_Init+0xa8>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	4a1d      	ldr	r2, [pc, #116]	; (8001924 <MX_GPIO_Init+0xa8>)
 80018ae:	f043 0304 	orr.w	r3, r3, #4
 80018b2:	6193      	str	r3, [r2, #24]
 80018b4:	4b1b      	ldr	r3, [pc, #108]	; (8001924 <MX_GPIO_Init+0xa8>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c0:	4b18      	ldr	r3, [pc, #96]	; (8001924 <MX_GPIO_Init+0xa8>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	4a17      	ldr	r2, [pc, #92]	; (8001924 <MX_GPIO_Init+0xa8>)
 80018c6:	f043 0308 	orr.w	r3, r3, #8
 80018ca:	6193      	str	r3, [r2, #24]
 80018cc:	4b15      	ldr	r3, [pc, #84]	; (8001924 <MX_GPIO_Init+0xa8>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	f003 0308 	and.w	r3, r3, #8
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_EN_Pin|M2_L_Pin|M2_R_Pin, GPIO_PIN_RESET);
 80018d8:	2200      	movs	r2, #0
 80018da:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80018de:	4812      	ldr	r0, [pc, #72]	; (8001928 <MX_GPIO_Init+0xac>)
 80018e0:	f000 fe89 	bl	80025f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80018e4:	2301      	movs	r3, #1
 80018e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ec:	2301      	movs	r3, #1
 80018ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80018f0:	f107 0310 	add.w	r3, r7, #16
 80018f4:	4619      	mov	r1, r3
 80018f6:	480c      	ldr	r0, [pc, #48]	; (8001928 <MX_GPIO_Init+0xac>)
 80018f8:	f000 fce2 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_EN_Pin M2_L_Pin M2_R_Pin */
  GPIO_InitStruct.Pin = M1_EN_Pin|M2_L_Pin|M2_R_Pin;
 80018fc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001900:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001902:	2301      	movs	r3, #1
 8001904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	2302      	movs	r3, #2
 800190c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190e:	f107 0310 	add.w	r3, r7, #16
 8001912:	4619      	mov	r1, r3
 8001914:	4804      	ldr	r0, [pc, #16]	; (8001928 <MX_GPIO_Init+0xac>)
 8001916:	f000 fcd3 	bl	80022c0 <HAL_GPIO_Init>

}
 800191a:	bf00      	nop
 800191c:	3720      	adds	r7, #32
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40021000 	.word	0x40021000
 8001928:	40010c00 	.word	0x40010c00

0800192c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001930:	b672      	cpsid	i
}
 8001932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001934:	e7fe      	b.n	8001934 <Error_Handler+0x8>
	...

08001938 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800193e:	4b15      	ldr	r3, [pc, #84]	; (8001994 <HAL_MspInit+0x5c>)
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	4a14      	ldr	r2, [pc, #80]	; (8001994 <HAL_MspInit+0x5c>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	6193      	str	r3, [r2, #24]
 800194a:	4b12      	ldr	r3, [pc, #72]	; (8001994 <HAL_MspInit+0x5c>)
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	60bb      	str	r3, [r7, #8]
 8001954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001956:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <HAL_MspInit+0x5c>)
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	4a0e      	ldr	r2, [pc, #56]	; (8001994 <HAL_MspInit+0x5c>)
 800195c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001960:	61d3      	str	r3, [r2, #28]
 8001962:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <HAL_MspInit+0x5c>)
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196a:	607b      	str	r3, [r7, #4]
 800196c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800196e:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <HAL_MspInit+0x60>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	4a04      	ldr	r2, [pc, #16]	; (8001998 <HAL_MspInit+0x60>)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800198a:	bf00      	nop
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	40021000 	.word	0x40021000
 8001998:	40010000 	.word	0x40010000

0800199c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08a      	sub	sp, #40	; 0x28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 0318 	add.w	r3, r7, #24
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a2b      	ldr	r2, [pc, #172]	; (8001a64 <HAL_TIM_Encoder_MspInit+0xc8>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d125      	bne.n	8001a08 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019bc:	4b2a      	ldr	r3, [pc, #168]	; (8001a68 <HAL_TIM_Encoder_MspInit+0xcc>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	4a29      	ldr	r2, [pc, #164]	; (8001a68 <HAL_TIM_Encoder_MspInit+0xcc>)
 80019c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019c6:	6193      	str	r3, [r2, #24]
 80019c8:	4b27      	ldr	r3, [pc, #156]	; (8001a68 <HAL_TIM_Encoder_MspInit+0xcc>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019d0:	617b      	str	r3, [r7, #20]
 80019d2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d4:	4b24      	ldr	r3, [pc, #144]	; (8001a68 <HAL_TIM_Encoder_MspInit+0xcc>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	4a23      	ldr	r2, [pc, #140]	; (8001a68 <HAL_TIM_Encoder_MspInit+0xcc>)
 80019da:	f043 0304 	orr.w	r3, r3, #4
 80019de:	6193      	str	r3, [r2, #24]
 80019e0:	4b21      	ldr	r3, [pc, #132]	; (8001a68 <HAL_TIM_Encoder_MspInit+0xcc>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fa:	f107 0318 	add.w	r3, r7, #24
 80019fe:	4619      	mov	r1, r3
 8001a00:	481a      	ldr	r0, [pc, #104]	; (8001a6c <HAL_TIM_Encoder_MspInit+0xd0>)
 8001a02:	f000 fc5d 	bl	80022c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a06:	e028      	b.n	8001a5a <HAL_TIM_Encoder_MspInit+0xbe>
  else if(htim_encoder->Instance==TIM2)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a10:	d123      	bne.n	8001a5a <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a12:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	4a14      	ldr	r2, [pc, #80]	; (8001a68 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	61d3      	str	r3, [r2, #28]
 8001a1e:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	4a0e      	ldr	r2, [pc, #56]	; (8001a68 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001a30:	f043 0304 	orr.w	r3, r3, #4
 8001a34:	6193      	str	r3, [r2, #24]
 8001a36:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	f003 0304 	and.w	r3, r3, #4
 8001a3e:	60bb      	str	r3, [r7, #8]
 8001a40:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a42:	2303      	movs	r3, #3
 8001a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4e:	f107 0318 	add.w	r3, r7, #24
 8001a52:	4619      	mov	r1, r3
 8001a54:	4805      	ldr	r0, [pc, #20]	; (8001a6c <HAL_TIM_Encoder_MspInit+0xd0>)
 8001a56:	f000 fc33 	bl	80022c0 <HAL_GPIO_Init>
}
 8001a5a:	bf00      	nop
 8001a5c:	3728      	adds	r7, #40	; 0x28
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40012c00 	.word	0x40012c00
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	40010800 	.word	0x40010800

08001a70 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a16      	ldr	r2, [pc, #88]	; (8001ad8 <HAL_TIM_PWM_MspInit+0x68>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d10c      	bne.n	8001a9c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a82:	4b16      	ldr	r3, [pc, #88]	; (8001adc <HAL_TIM_PWM_MspInit+0x6c>)
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	4a15      	ldr	r2, [pc, #84]	; (8001adc <HAL_TIM_PWM_MspInit+0x6c>)
 8001a88:	f043 0302 	orr.w	r3, r3, #2
 8001a8c:	61d3      	str	r3, [r2, #28]
 8001a8e:	4b13      	ldr	r3, [pc, #76]	; (8001adc <HAL_TIM_PWM_MspInit+0x6c>)
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a9a:	e018      	b.n	8001ace <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM4)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a0f      	ldr	r2, [pc, #60]	; (8001ae0 <HAL_TIM_PWM_MspInit+0x70>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d113      	bne.n	8001ace <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001aa6:	4b0d      	ldr	r3, [pc, #52]	; (8001adc <HAL_TIM_PWM_MspInit+0x6c>)
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	4a0c      	ldr	r2, [pc, #48]	; (8001adc <HAL_TIM_PWM_MspInit+0x6c>)
 8001aac:	f043 0304 	orr.w	r3, r3, #4
 8001ab0:	61d3      	str	r3, [r2, #28]
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <HAL_TIM_PWM_MspInit+0x6c>)
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	f003 0304 	and.w	r3, r3, #4
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2102      	movs	r1, #2
 8001ac2:	201e      	movs	r0, #30
 8001ac4:	f000 fb15 	bl	80020f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ac8:	201e      	movs	r0, #30
 8001aca:	f000 fb2e 	bl	800212a <HAL_NVIC_EnableIRQ>
}
 8001ace:	bf00      	nop
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40000400 	.word	0x40000400
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	40000800 	.word	0x40000800

08001ae4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b088      	sub	sp, #32
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 0310 	add.w	r3, r7, #16
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a1e      	ldr	r2, [pc, #120]	; (8001b78 <HAL_TIM_MspPostInit+0x94>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d118      	bne.n	8001b36 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b04:	4b1d      	ldr	r3, [pc, #116]	; (8001b7c <HAL_TIM_MspPostInit+0x98>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	4a1c      	ldr	r2, [pc, #112]	; (8001b7c <HAL_TIM_MspPostInit+0x98>)
 8001b0a:	f043 0304 	orr.w	r3, r3, #4
 8001b0e:	6193      	str	r3, [r2, #24]
 8001b10:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <HAL_TIM_MspPostInit+0x98>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b1c:	23c0      	movs	r3, #192	; 0xc0
 8001b1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b20:	2302      	movs	r3, #2
 8001b22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b24:	2302      	movs	r3, #2
 8001b26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b28:	f107 0310 	add.w	r3, r7, #16
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4814      	ldr	r0, [pc, #80]	; (8001b80 <HAL_TIM_MspPostInit+0x9c>)
 8001b30:	f000 fbc6 	bl	80022c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001b34:	e01c      	b.n	8001b70 <HAL_TIM_MspPostInit+0x8c>
  else if(htim->Instance==TIM4)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a12      	ldr	r2, [pc, #72]	; (8001b84 <HAL_TIM_MspPostInit+0xa0>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d117      	bne.n	8001b70 <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b40:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <HAL_TIM_MspPostInit+0x98>)
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	4a0d      	ldr	r2, [pc, #52]	; (8001b7c <HAL_TIM_MspPostInit+0x98>)
 8001b46:	f043 0308 	orr.w	r3, r3, #8
 8001b4a:	6193      	str	r3, [r2, #24]
 8001b4c:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <HAL_TIM_MspPostInit+0x98>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	f003 0308 	and.w	r3, r3, #8
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b58:	2380      	movs	r3, #128	; 0x80
 8001b5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b60:	2302      	movs	r3, #2
 8001b62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b64:	f107 0310 	add.w	r3, r7, #16
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4807      	ldr	r0, [pc, #28]	; (8001b88 <HAL_TIM_MspPostInit+0xa4>)
 8001b6c:	f000 fba8 	bl	80022c0 <HAL_GPIO_Init>
}
 8001b70:	bf00      	nop
 8001b72:	3720      	adds	r7, #32
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40000400 	.word	0x40000400
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40010800 	.word	0x40010800
 8001b84:	40000800 	.word	0x40000800
 8001b88:	40010c00 	.word	0x40010c00

08001b8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b088      	sub	sp, #32
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	f107 0310 	add.w	r3, r7, #16
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a1f      	ldr	r2, [pc, #124]	; (8001c24 <HAL_UART_MspInit+0x98>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d137      	bne.n	8001c1c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bac:	4b1e      	ldr	r3, [pc, #120]	; (8001c28 <HAL_UART_MspInit+0x9c>)
 8001bae:	69db      	ldr	r3, [r3, #28]
 8001bb0:	4a1d      	ldr	r2, [pc, #116]	; (8001c28 <HAL_UART_MspInit+0x9c>)
 8001bb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb6:	61d3      	str	r3, [r2, #28]
 8001bb8:	4b1b      	ldr	r3, [pc, #108]	; (8001c28 <HAL_UART_MspInit+0x9c>)
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc4:	4b18      	ldr	r3, [pc, #96]	; (8001c28 <HAL_UART_MspInit+0x9c>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	4a17      	ldr	r2, [pc, #92]	; (8001c28 <HAL_UART_MspInit+0x9c>)
 8001bca:	f043 0304 	orr.w	r3, r3, #4
 8001bce:	6193      	str	r3, [r2, #24]
 8001bd0:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <HAL_UART_MspInit+0x9c>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bdc:	2304      	movs	r3, #4
 8001bde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be0:	2302      	movs	r3, #2
 8001be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001be4:	2303      	movs	r3, #3
 8001be6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be8:	f107 0310 	add.w	r3, r7, #16
 8001bec:	4619      	mov	r1, r3
 8001bee:	480f      	ldr	r0, [pc, #60]	; (8001c2c <HAL_UART_MspInit+0xa0>)
 8001bf0:	f000 fb66 	bl	80022c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bf4:	2308      	movs	r3, #8
 8001bf6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c00:	f107 0310 	add.w	r3, r7, #16
 8001c04:	4619      	mov	r1, r3
 8001c06:	4809      	ldr	r0, [pc, #36]	; (8001c2c <HAL_UART_MspInit+0xa0>)
 8001c08:	f000 fb5a 	bl	80022c0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2103      	movs	r1, #3
 8001c10:	2026      	movs	r0, #38	; 0x26
 8001c12:	f000 fa6e 	bl	80020f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c16:	2026      	movs	r0, #38	; 0x26
 8001c18:	f000 fa87 	bl	800212a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c1c:	bf00      	nop
 8001c1e:	3720      	adds	r7, #32
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40004400 	.word	0x40004400
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40010800 	.word	0x40010800

08001c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c34:	e7fe      	b.n	8001c34 <NMI_Handler+0x4>

08001c36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c3a:	e7fe      	b.n	8001c3a <HardFault_Handler+0x4>

08001c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c40:	e7fe      	b.n	8001c40 <MemManage_Handler+0x4>

08001c42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c46:	e7fe      	b.n	8001c46 <BusFault_Handler+0x4>

08001c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c4c:	e7fe      	b.n	8001c4c <UsageFault_Handler+0x4>

08001c4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr

08001c5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr

08001c66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr

08001c72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c76:	f000 f949 	bl	8001f0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
	...

08001c80 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001c84:	4802      	ldr	r0, [pc, #8]	; (8001c90 <TIM4_IRQHandler+0x10>)
 8001c86:	f001 fb5d 	bl	8003344 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	200002d4 	.word	0x200002d4

08001c94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c98:	4802      	ldr	r0, [pc, #8]	; (8001ca4 <USART2_IRQHandler+0x10>)
 8001c9a:	f002 f84d 	bl	8003d38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	2000031c 	.word	0x2000031c

08001ca8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
	return 1;
 8001cac:	2301      	movs	r3, #1
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr

08001cb6 <_kill>:

int _kill(int pid, int sig)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001cc0:	f002 fbe8 	bl	8004494 <__errno>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2216      	movs	r2, #22
 8001cc8:	601a      	str	r2, [r3, #0]
	return -1;
 8001cca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <_exit>:

void _exit (int status)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001cde:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7ff ffe7 	bl	8001cb6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ce8:	e7fe      	b.n	8001ce8 <_exit+0x12>

08001cea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b086      	sub	sp, #24
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	60f8      	str	r0, [r7, #12]
 8001cf2:	60b9      	str	r1, [r7, #8]
 8001cf4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
 8001cfa:	e00a      	b.n	8001d12 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cfc:	f3af 8000 	nop.w
 8001d00:	4601      	mov	r1, r0
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	1c5a      	adds	r2, r3, #1
 8001d06:	60ba      	str	r2, [r7, #8]
 8001d08:	b2ca      	uxtb	r2, r1
 8001d0a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	dbf0      	blt.n	8001cfc <_read+0x12>
	}

return len;
 8001d1a:	687b      	ldr	r3, [r7, #4]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
 8001d34:	e009      	b.n	8001d4a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	1c5a      	adds	r2, r3, #1
 8001d3a:	60ba      	str	r2, [r7, #8]
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	3301      	adds	r3, #1
 8001d48:	617b      	str	r3, [r7, #20]
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	dbf1      	blt.n	8001d36 <_write+0x12>
	}
	return len;
 8001d52:	687b      	ldr	r3, [r7, #4]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <_close>:

int _close(int file)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
	return -1;
 8001d64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr

08001d72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d82:	605a      	str	r2, [r3, #4]
	return 0;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr

08001d90 <_isatty>:

int _isatty(int file)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
	return 1;
 8001d98:	2301      	movs	r3, #1
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
	return 0;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr

08001dbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dc4:	4a14      	ldr	r2, [pc, #80]	; (8001e18 <_sbrk+0x5c>)
 8001dc6:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <_sbrk+0x60>)
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dd0:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <_sbrk+0x64>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d102      	bne.n	8001dde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dd8:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <_sbrk+0x64>)
 8001dda:	4a12      	ldr	r2, [pc, #72]	; (8001e24 <_sbrk+0x68>)
 8001ddc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dde:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <_sbrk+0x64>)
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4413      	add	r3, r2
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d207      	bcs.n	8001dfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dec:	f002 fb52 	bl	8004494 <__errno>
 8001df0:	4603      	mov	r3, r0
 8001df2:	220c      	movs	r2, #12
 8001df4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001df6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dfa:	e009      	b.n	8001e10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dfc:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <_sbrk+0x64>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e02:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <_sbrk+0x64>)
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4413      	add	r3, r2
 8001e0a:	4a05      	ldr	r2, [pc, #20]	; (8001e20 <_sbrk+0x64>)
 8001e0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20005000 	.word	0x20005000
 8001e1c:	00000400 	.word	0x00000400
 8001e20:	200003e0 	.word	0x200003e0
 8001e24:	200003f8 	.word	0x200003f8

08001e28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr

08001e34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e34:	480c      	ldr	r0, [pc, #48]	; (8001e68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e36:	490d      	ldr	r1, [pc, #52]	; (8001e6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e38:	4a0d      	ldr	r2, [pc, #52]	; (8001e70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e3c:	e002      	b.n	8001e44 <LoopCopyDataInit>

08001e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e42:	3304      	adds	r3, #4

08001e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e48:	d3f9      	bcc.n	8001e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e4a:	4a0a      	ldr	r2, [pc, #40]	; (8001e74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e4c:	4c0a      	ldr	r4, [pc, #40]	; (8001e78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e50:	e001      	b.n	8001e56 <LoopFillZerobss>

08001e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e54:	3204      	adds	r2, #4

08001e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e58:	d3fb      	bcc.n	8001e52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e5a:	f7ff ffe5 	bl	8001e28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e5e:	f002 fb1f 	bl	80044a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e62:	f7ff fa49 	bl	80012f8 <main>
  bx lr
 8001e66:	4770      	bx	lr
  ldr r0, =_sdata
 8001e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e6c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001e70:	080088c8 	.word	0x080088c8
  ldr r2, =_sbss
 8001e74:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001e78:	200003f8 	.word	0x200003f8

08001e7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e7c:	e7fe      	b.n	8001e7c <ADC1_2_IRQHandler>
	...

08001e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e84:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <HAL_Init+0x28>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a07      	ldr	r2, [pc, #28]	; (8001ea8 <HAL_Init+0x28>)
 8001e8a:	f043 0310 	orr.w	r3, r3, #16
 8001e8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e90:	2003      	movs	r0, #3
 8001e92:	f000 f923 	bl	80020dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e96:	200f      	movs	r0, #15
 8001e98:	f000 f808 	bl	8001eac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e9c:	f7ff fd4c 	bl	8001938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40022000 	.word	0x40022000

08001eac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eb4:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <HAL_InitTick+0x54>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <HAL_InitTick+0x58>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ec2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 f93b 	bl	8002146 <HAL_SYSTICK_Config>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e00e      	b.n	8001ef8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b0f      	cmp	r3, #15
 8001ede:	d80a      	bhi.n	8001ef6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee8:	f000 f903 	bl	80020f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eec:	4a06      	ldr	r2, [pc, #24]	; (8001f08 <HAL_InitTick+0x5c>)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	e000      	b.n	8001ef8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000004 	.word	0x20000004
 8001f04:	2000000c 	.word	0x2000000c
 8001f08:	20000008 	.word	0x20000008

08001f0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f10:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <HAL_IncTick+0x1c>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	461a      	mov	r2, r3
 8001f16:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <HAL_IncTick+0x20>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	4a03      	ldr	r2, [pc, #12]	; (8001f2c <HAL_IncTick+0x20>)
 8001f1e:	6013      	str	r3, [r2, #0]
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr
 8001f28:	2000000c 	.word	0x2000000c
 8001f2c:	200003e4 	.word	0x200003e4

08001f30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  return uwTick;
 8001f34:	4b02      	ldr	r3, [pc, #8]	; (8001f40 <HAL_GetTick+0x10>)
 8001f36:	681b      	ldr	r3, [r3, #0]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr
 8001f40:	200003e4 	.word	0x200003e4

08001f44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f54:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <__NVIC_SetPriorityGrouping+0x44>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f60:	4013      	ands	r3, r2
 8001f62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f76:	4a04      	ldr	r2, [pc, #16]	; (8001f88 <__NVIC_SetPriorityGrouping+0x44>)
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	60d3      	str	r3, [r2, #12]
}
 8001f7c:	bf00      	nop
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bc80      	pop	{r7}
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f90:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	0a1b      	lsrs	r3, r3, #8
 8001f96:	f003 0307 	and.w	r3, r3, #7
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	db0b      	blt.n	8001fd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	f003 021f 	and.w	r2, r3, #31
 8001fc0:	4906      	ldr	r1, [pc, #24]	; (8001fdc <__NVIC_EnableIRQ+0x34>)
 8001fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc6:	095b      	lsrs	r3, r3, #5
 8001fc8:	2001      	movs	r0, #1
 8001fca:	fa00 f202 	lsl.w	r2, r0, r2
 8001fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc80      	pop	{r7}
 8001fda:	4770      	bx	lr
 8001fdc:	e000e100 	.word	0xe000e100

08001fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	6039      	str	r1, [r7, #0]
 8001fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	db0a      	blt.n	800200a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	490c      	ldr	r1, [pc, #48]	; (800202c <__NVIC_SetPriority+0x4c>)
 8001ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffe:	0112      	lsls	r2, r2, #4
 8002000:	b2d2      	uxtb	r2, r2
 8002002:	440b      	add	r3, r1
 8002004:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002008:	e00a      	b.n	8002020 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	b2da      	uxtb	r2, r3
 800200e:	4908      	ldr	r1, [pc, #32]	; (8002030 <__NVIC_SetPriority+0x50>)
 8002010:	79fb      	ldrb	r3, [r7, #7]
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	3b04      	subs	r3, #4
 8002018:	0112      	lsls	r2, r2, #4
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	440b      	add	r3, r1
 800201e:	761a      	strb	r2, [r3, #24]
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	e000e100 	.word	0xe000e100
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002034:	b480      	push	{r7}
 8002036:	b089      	sub	sp, #36	; 0x24
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	f1c3 0307 	rsb	r3, r3, #7
 800204e:	2b04      	cmp	r3, #4
 8002050:	bf28      	it	cs
 8002052:	2304      	movcs	r3, #4
 8002054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	3304      	adds	r3, #4
 800205a:	2b06      	cmp	r3, #6
 800205c:	d902      	bls.n	8002064 <NVIC_EncodePriority+0x30>
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	3b03      	subs	r3, #3
 8002062:	e000      	b.n	8002066 <NVIC_EncodePriority+0x32>
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002068:	f04f 32ff 	mov.w	r2, #4294967295
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43da      	mvns	r2, r3
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	401a      	ands	r2, r3
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800207c:	f04f 31ff 	mov.w	r1, #4294967295
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	fa01 f303 	lsl.w	r3, r1, r3
 8002086:	43d9      	mvns	r1, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800208c:	4313      	orrs	r3, r2
         );
}
 800208e:	4618      	mov	r0, r3
 8002090:	3724      	adds	r7, #36	; 0x24
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr

08002098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020a8:	d301      	bcc.n	80020ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020aa:	2301      	movs	r3, #1
 80020ac:	e00f      	b.n	80020ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ae:	4a0a      	ldr	r2, [pc, #40]	; (80020d8 <SysTick_Config+0x40>)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020b6:	210f      	movs	r1, #15
 80020b8:	f04f 30ff 	mov.w	r0, #4294967295
 80020bc:	f7ff ff90 	bl	8001fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c0:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <SysTick_Config+0x40>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020c6:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <SysTick_Config+0x40>)
 80020c8:	2207      	movs	r2, #7
 80020ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	e000e010 	.word	0xe000e010

080020dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7ff ff2d 	bl	8001f44 <__NVIC_SetPriorityGrouping>
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b086      	sub	sp, #24
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	4603      	mov	r3, r0
 80020fa:	60b9      	str	r1, [r7, #8]
 80020fc:	607a      	str	r2, [r7, #4]
 80020fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002104:	f7ff ff42 	bl	8001f8c <__NVIC_GetPriorityGrouping>
 8002108:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	68b9      	ldr	r1, [r7, #8]
 800210e:	6978      	ldr	r0, [r7, #20]
 8002110:	f7ff ff90 	bl	8002034 <NVIC_EncodePriority>
 8002114:	4602      	mov	r2, r0
 8002116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800211a:	4611      	mov	r1, r2
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff ff5f 	bl	8001fe0 <__NVIC_SetPriority>
}
 8002122:	bf00      	nop
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b082      	sub	sp, #8
 800212e:	af00      	add	r7, sp, #0
 8002130:	4603      	mov	r3, r0
 8002132:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff ff35 	bl	8001fa8 <__NVIC_EnableIRQ>
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff ffa2 	bl	8002098 <SysTick_Config>
 8002154:	4603      	mov	r3, r0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800215e:	b480      	push	{r7}
 8002160:	b085      	sub	sp, #20
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002166:	2300      	movs	r3, #0
 8002168:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002170:	2b02      	cmp	r3, #2
 8002172:	d008      	beq.n	8002186 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2204      	movs	r2, #4
 8002178:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e020      	b.n	80021c8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 020e 	bic.w	r2, r2, #14
 8002194:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 0201 	bic.w	r2, r2, #1
 80021a4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ae:	2101      	movs	r1, #1
 80021b0:	fa01 f202 	lsl.w	r2, r1, r2
 80021b4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr
	...

080021d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021dc:	2300      	movs	r3, #0
 80021de:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d005      	beq.n	80021f6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2204      	movs	r2, #4
 80021ee:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	73fb      	strb	r3, [r7, #15]
 80021f4:	e051      	b.n	800229a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 020e 	bic.w	r2, r2, #14
 8002204:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 0201 	bic.w	r2, r2, #1
 8002214:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a22      	ldr	r2, [pc, #136]	; (80022a4 <HAL_DMA_Abort_IT+0xd0>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d029      	beq.n	8002274 <HAL_DMA_Abort_IT+0xa0>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a20      	ldr	r2, [pc, #128]	; (80022a8 <HAL_DMA_Abort_IT+0xd4>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d022      	beq.n	8002270 <HAL_DMA_Abort_IT+0x9c>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a1f      	ldr	r2, [pc, #124]	; (80022ac <HAL_DMA_Abort_IT+0xd8>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d01a      	beq.n	800226a <HAL_DMA_Abort_IT+0x96>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a1d      	ldr	r2, [pc, #116]	; (80022b0 <HAL_DMA_Abort_IT+0xdc>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d012      	beq.n	8002264 <HAL_DMA_Abort_IT+0x90>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a1c      	ldr	r2, [pc, #112]	; (80022b4 <HAL_DMA_Abort_IT+0xe0>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d00a      	beq.n	800225e <HAL_DMA_Abort_IT+0x8a>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a1a      	ldr	r2, [pc, #104]	; (80022b8 <HAL_DMA_Abort_IT+0xe4>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d102      	bne.n	8002258 <HAL_DMA_Abort_IT+0x84>
 8002252:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002256:	e00e      	b.n	8002276 <HAL_DMA_Abort_IT+0xa2>
 8002258:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800225c:	e00b      	b.n	8002276 <HAL_DMA_Abort_IT+0xa2>
 800225e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002262:	e008      	b.n	8002276 <HAL_DMA_Abort_IT+0xa2>
 8002264:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002268:	e005      	b.n	8002276 <HAL_DMA_Abort_IT+0xa2>
 800226a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800226e:	e002      	b.n	8002276 <HAL_DMA_Abort_IT+0xa2>
 8002270:	2310      	movs	r3, #16
 8002272:	e000      	b.n	8002276 <HAL_DMA_Abort_IT+0xa2>
 8002274:	2301      	movs	r3, #1
 8002276:	4a11      	ldr	r2, [pc, #68]	; (80022bc <HAL_DMA_Abort_IT+0xe8>)
 8002278:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	4798      	blx	r3
    } 
  }
  return status;
 800229a:	7bfb      	ldrb	r3, [r7, #15]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40020008 	.word	0x40020008
 80022a8:	4002001c 	.word	0x4002001c
 80022ac:	40020030 	.word	0x40020030
 80022b0:	40020044 	.word	0x40020044
 80022b4:	40020058 	.word	0x40020058
 80022b8:	4002006c 	.word	0x4002006c
 80022bc:	40020000 	.word	0x40020000

080022c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b08b      	sub	sp, #44	; 0x2c
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ca:	2300      	movs	r3, #0
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022ce:	2300      	movs	r3, #0
 80022d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022d2:	e169      	b.n	80025a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022d4:	2201      	movs	r2, #1
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	69fa      	ldr	r2, [r7, #28]
 80022e4:	4013      	ands	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	f040 8158 	bne.w	80025a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	4a9a      	ldr	r2, [pc, #616]	; (8002560 <HAL_GPIO_Init+0x2a0>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d05e      	beq.n	80023ba <HAL_GPIO_Init+0xfa>
 80022fc:	4a98      	ldr	r2, [pc, #608]	; (8002560 <HAL_GPIO_Init+0x2a0>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d875      	bhi.n	80023ee <HAL_GPIO_Init+0x12e>
 8002302:	4a98      	ldr	r2, [pc, #608]	; (8002564 <HAL_GPIO_Init+0x2a4>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d058      	beq.n	80023ba <HAL_GPIO_Init+0xfa>
 8002308:	4a96      	ldr	r2, [pc, #600]	; (8002564 <HAL_GPIO_Init+0x2a4>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d86f      	bhi.n	80023ee <HAL_GPIO_Init+0x12e>
 800230e:	4a96      	ldr	r2, [pc, #600]	; (8002568 <HAL_GPIO_Init+0x2a8>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d052      	beq.n	80023ba <HAL_GPIO_Init+0xfa>
 8002314:	4a94      	ldr	r2, [pc, #592]	; (8002568 <HAL_GPIO_Init+0x2a8>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d869      	bhi.n	80023ee <HAL_GPIO_Init+0x12e>
 800231a:	4a94      	ldr	r2, [pc, #592]	; (800256c <HAL_GPIO_Init+0x2ac>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d04c      	beq.n	80023ba <HAL_GPIO_Init+0xfa>
 8002320:	4a92      	ldr	r2, [pc, #584]	; (800256c <HAL_GPIO_Init+0x2ac>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d863      	bhi.n	80023ee <HAL_GPIO_Init+0x12e>
 8002326:	4a92      	ldr	r2, [pc, #584]	; (8002570 <HAL_GPIO_Init+0x2b0>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d046      	beq.n	80023ba <HAL_GPIO_Init+0xfa>
 800232c:	4a90      	ldr	r2, [pc, #576]	; (8002570 <HAL_GPIO_Init+0x2b0>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d85d      	bhi.n	80023ee <HAL_GPIO_Init+0x12e>
 8002332:	2b12      	cmp	r3, #18
 8002334:	d82a      	bhi.n	800238c <HAL_GPIO_Init+0xcc>
 8002336:	2b12      	cmp	r3, #18
 8002338:	d859      	bhi.n	80023ee <HAL_GPIO_Init+0x12e>
 800233a:	a201      	add	r2, pc, #4	; (adr r2, 8002340 <HAL_GPIO_Init+0x80>)
 800233c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002340:	080023bb 	.word	0x080023bb
 8002344:	08002395 	.word	0x08002395
 8002348:	080023a7 	.word	0x080023a7
 800234c:	080023e9 	.word	0x080023e9
 8002350:	080023ef 	.word	0x080023ef
 8002354:	080023ef 	.word	0x080023ef
 8002358:	080023ef 	.word	0x080023ef
 800235c:	080023ef 	.word	0x080023ef
 8002360:	080023ef 	.word	0x080023ef
 8002364:	080023ef 	.word	0x080023ef
 8002368:	080023ef 	.word	0x080023ef
 800236c:	080023ef 	.word	0x080023ef
 8002370:	080023ef 	.word	0x080023ef
 8002374:	080023ef 	.word	0x080023ef
 8002378:	080023ef 	.word	0x080023ef
 800237c:	080023ef 	.word	0x080023ef
 8002380:	080023ef 	.word	0x080023ef
 8002384:	0800239d 	.word	0x0800239d
 8002388:	080023b1 	.word	0x080023b1
 800238c:	4a79      	ldr	r2, [pc, #484]	; (8002574 <HAL_GPIO_Init+0x2b4>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d013      	beq.n	80023ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002392:	e02c      	b.n	80023ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	623b      	str	r3, [r7, #32]
          break;
 800239a:	e029      	b.n	80023f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	3304      	adds	r3, #4
 80023a2:	623b      	str	r3, [r7, #32]
          break;
 80023a4:	e024      	b.n	80023f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	3308      	adds	r3, #8
 80023ac:	623b      	str	r3, [r7, #32]
          break;
 80023ae:	e01f      	b.n	80023f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	330c      	adds	r3, #12
 80023b6:	623b      	str	r3, [r7, #32]
          break;
 80023b8:	e01a      	b.n	80023f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d102      	bne.n	80023c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023c2:	2304      	movs	r3, #4
 80023c4:	623b      	str	r3, [r7, #32]
          break;
 80023c6:	e013      	b.n	80023f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d105      	bne.n	80023dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023d0:	2308      	movs	r3, #8
 80023d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	69fa      	ldr	r2, [r7, #28]
 80023d8:	611a      	str	r2, [r3, #16]
          break;
 80023da:	e009      	b.n	80023f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023dc:	2308      	movs	r3, #8
 80023de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	69fa      	ldr	r2, [r7, #28]
 80023e4:	615a      	str	r2, [r3, #20]
          break;
 80023e6:	e003      	b.n	80023f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023e8:	2300      	movs	r3, #0
 80023ea:	623b      	str	r3, [r7, #32]
          break;
 80023ec:	e000      	b.n	80023f0 <HAL_GPIO_Init+0x130>
          break;
 80023ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	2bff      	cmp	r3, #255	; 0xff
 80023f4:	d801      	bhi.n	80023fa <HAL_GPIO_Init+0x13a>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	e001      	b.n	80023fe <HAL_GPIO_Init+0x13e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3304      	adds	r3, #4
 80023fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	2bff      	cmp	r3, #255	; 0xff
 8002404:	d802      	bhi.n	800240c <HAL_GPIO_Init+0x14c>
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	e002      	b.n	8002412 <HAL_GPIO_Init+0x152>
 800240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240e:	3b08      	subs	r3, #8
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	210f      	movs	r1, #15
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	fa01 f303 	lsl.w	r3, r1, r3
 8002420:	43db      	mvns	r3, r3
 8002422:	401a      	ands	r2, r3
 8002424:	6a39      	ldr	r1, [r7, #32]
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	fa01 f303 	lsl.w	r3, r1, r3
 800242c:	431a      	orrs	r2, r3
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 80b1 	beq.w	80025a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002440:	4b4d      	ldr	r3, [pc, #308]	; (8002578 <HAL_GPIO_Init+0x2b8>)
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	4a4c      	ldr	r2, [pc, #304]	; (8002578 <HAL_GPIO_Init+0x2b8>)
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	6193      	str	r3, [r2, #24]
 800244c:	4b4a      	ldr	r3, [pc, #296]	; (8002578 <HAL_GPIO_Init+0x2b8>)
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002458:	4a48      	ldr	r2, [pc, #288]	; (800257c <HAL_GPIO_Init+0x2bc>)
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	089b      	lsrs	r3, r3, #2
 800245e:	3302      	adds	r3, #2
 8002460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002464:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	f003 0303 	and.w	r3, r3, #3
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	220f      	movs	r2, #15
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	4013      	ands	r3, r2
 800247a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a40      	ldr	r2, [pc, #256]	; (8002580 <HAL_GPIO_Init+0x2c0>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d013      	beq.n	80024ac <HAL_GPIO_Init+0x1ec>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a3f      	ldr	r2, [pc, #252]	; (8002584 <HAL_GPIO_Init+0x2c4>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d00d      	beq.n	80024a8 <HAL_GPIO_Init+0x1e8>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a3e      	ldr	r2, [pc, #248]	; (8002588 <HAL_GPIO_Init+0x2c8>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d007      	beq.n	80024a4 <HAL_GPIO_Init+0x1e4>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a3d      	ldr	r2, [pc, #244]	; (800258c <HAL_GPIO_Init+0x2cc>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d101      	bne.n	80024a0 <HAL_GPIO_Init+0x1e0>
 800249c:	2303      	movs	r3, #3
 800249e:	e006      	b.n	80024ae <HAL_GPIO_Init+0x1ee>
 80024a0:	2304      	movs	r3, #4
 80024a2:	e004      	b.n	80024ae <HAL_GPIO_Init+0x1ee>
 80024a4:	2302      	movs	r3, #2
 80024a6:	e002      	b.n	80024ae <HAL_GPIO_Init+0x1ee>
 80024a8:	2301      	movs	r3, #1
 80024aa:	e000      	b.n	80024ae <HAL_GPIO_Init+0x1ee>
 80024ac:	2300      	movs	r3, #0
 80024ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b0:	f002 0203 	and.w	r2, r2, #3
 80024b4:	0092      	lsls	r2, r2, #2
 80024b6:	4093      	lsls	r3, r2
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024be:	492f      	ldr	r1, [pc, #188]	; (800257c <HAL_GPIO_Init+0x2bc>)
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	089b      	lsrs	r3, r3, #2
 80024c4:	3302      	adds	r3, #2
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d006      	beq.n	80024e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024d8:	4b2d      	ldr	r3, [pc, #180]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	492c      	ldr	r1, [pc, #176]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	600b      	str	r3, [r1, #0]
 80024e4:	e006      	b.n	80024f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024e6:	4b2a      	ldr	r3, [pc, #168]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	43db      	mvns	r3, r3
 80024ee:	4928      	ldr	r1, [pc, #160]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 80024f0:	4013      	ands	r3, r2
 80024f2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d006      	beq.n	800250e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002500:	4b23      	ldr	r3, [pc, #140]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	4922      	ldr	r1, [pc, #136]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	4313      	orrs	r3, r2
 800250a:	604b      	str	r3, [r1, #4]
 800250c:	e006      	b.n	800251c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800250e:	4b20      	ldr	r3, [pc, #128]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	43db      	mvns	r3, r3
 8002516:	491e      	ldr	r1, [pc, #120]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 8002518:	4013      	ands	r3, r2
 800251a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d006      	beq.n	8002536 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002528:	4b19      	ldr	r3, [pc, #100]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	4918      	ldr	r1, [pc, #96]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	4313      	orrs	r3, r2
 8002532:	608b      	str	r3, [r1, #8]
 8002534:	e006      	b.n	8002544 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002536:	4b16      	ldr	r3, [pc, #88]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	43db      	mvns	r3, r3
 800253e:	4914      	ldr	r1, [pc, #80]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 8002540:	4013      	ands	r3, r2
 8002542:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d021      	beq.n	8002594 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002550:	4b0f      	ldr	r3, [pc, #60]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 8002552:	68da      	ldr	r2, [r3, #12]
 8002554:	490e      	ldr	r1, [pc, #56]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	4313      	orrs	r3, r2
 800255a:	60cb      	str	r3, [r1, #12]
 800255c:	e021      	b.n	80025a2 <HAL_GPIO_Init+0x2e2>
 800255e:	bf00      	nop
 8002560:	10320000 	.word	0x10320000
 8002564:	10310000 	.word	0x10310000
 8002568:	10220000 	.word	0x10220000
 800256c:	10210000 	.word	0x10210000
 8002570:	10120000 	.word	0x10120000
 8002574:	10110000 	.word	0x10110000
 8002578:	40021000 	.word	0x40021000
 800257c:	40010000 	.word	0x40010000
 8002580:	40010800 	.word	0x40010800
 8002584:	40010c00 	.word	0x40010c00
 8002588:	40011000 	.word	0x40011000
 800258c:	40011400 	.word	0x40011400
 8002590:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002594:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <HAL_GPIO_Init+0x304>)
 8002596:	68da      	ldr	r2, [r3, #12]
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	43db      	mvns	r3, r3
 800259c:	4909      	ldr	r1, [pc, #36]	; (80025c4 <HAL_GPIO_Init+0x304>)
 800259e:	4013      	ands	r3, r2
 80025a0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	3301      	adds	r3, #1
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	fa22 f303 	lsr.w	r3, r2, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f47f ae8e 	bne.w	80022d4 <HAL_GPIO_Init+0x14>
  }
}
 80025b8:	bf00      	nop
 80025ba:	bf00      	nop
 80025bc:	372c      	adds	r7, #44	; 0x2c
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr
 80025c4:	40010400 	.word	0x40010400

080025c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	887b      	ldrh	r3, [r7, #2]
 80025da:	4013      	ands	r3, r2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d002      	beq.n	80025e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025e0:	2301      	movs	r3, #1
 80025e2:	73fb      	strb	r3, [r7, #15]
 80025e4:	e001      	b.n	80025ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025e6:	2300      	movs	r3, #0
 80025e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr

080025f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
 80025fe:	460b      	mov	r3, r1
 8002600:	807b      	strh	r3, [r7, #2]
 8002602:	4613      	mov	r3, r2
 8002604:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002606:	787b      	ldrb	r3, [r7, #1]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800260c:	887a      	ldrh	r2, [r7, #2]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002612:	e003      	b.n	800261c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002614:	887b      	ldrh	r3, [r7, #2]
 8002616:	041a      	lsls	r2, r3, #16
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	611a      	str	r2, [r3, #16]
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr
	...

08002628 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e272      	b.n	8002b20 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 8087 	beq.w	8002756 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002648:	4b92      	ldr	r3, [pc, #584]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 030c 	and.w	r3, r3, #12
 8002650:	2b04      	cmp	r3, #4
 8002652:	d00c      	beq.n	800266e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002654:	4b8f      	ldr	r3, [pc, #572]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 030c 	and.w	r3, r3, #12
 800265c:	2b08      	cmp	r3, #8
 800265e:	d112      	bne.n	8002686 <HAL_RCC_OscConfig+0x5e>
 8002660:	4b8c      	ldr	r3, [pc, #560]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800266c:	d10b      	bne.n	8002686 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800266e:	4b89      	ldr	r3, [pc, #548]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d06c      	beq.n	8002754 <HAL_RCC_OscConfig+0x12c>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d168      	bne.n	8002754 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e24c      	b.n	8002b20 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800268e:	d106      	bne.n	800269e <HAL_RCC_OscConfig+0x76>
 8002690:	4b80      	ldr	r3, [pc, #512]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a7f      	ldr	r2, [pc, #508]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 8002696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	e02e      	b.n	80026fc <HAL_RCC_OscConfig+0xd4>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10c      	bne.n	80026c0 <HAL_RCC_OscConfig+0x98>
 80026a6:	4b7b      	ldr	r3, [pc, #492]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a7a      	ldr	r2, [pc, #488]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 80026ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	4b78      	ldr	r3, [pc, #480]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a77      	ldr	r2, [pc, #476]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 80026b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	e01d      	b.n	80026fc <HAL_RCC_OscConfig+0xd4>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026c8:	d10c      	bne.n	80026e4 <HAL_RCC_OscConfig+0xbc>
 80026ca:	4b72      	ldr	r3, [pc, #456]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a71      	ldr	r2, [pc, #452]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 80026d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	4b6f      	ldr	r3, [pc, #444]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a6e      	ldr	r2, [pc, #440]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 80026dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	e00b      	b.n	80026fc <HAL_RCC_OscConfig+0xd4>
 80026e4:	4b6b      	ldr	r3, [pc, #428]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a6a      	ldr	r2, [pc, #424]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 80026ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ee:	6013      	str	r3, [r2, #0]
 80026f0:	4b68      	ldr	r3, [pc, #416]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a67      	ldr	r2, [pc, #412]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 80026f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d013      	beq.n	800272c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002704:	f7ff fc14 	bl	8001f30 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800270c:	f7ff fc10 	bl	8001f30 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b64      	cmp	r3, #100	; 0x64
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e200      	b.n	8002b20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271e:	4b5d      	ldr	r3, [pc, #372]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0f0      	beq.n	800270c <HAL_RCC_OscConfig+0xe4>
 800272a:	e014      	b.n	8002756 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272c:	f7ff fc00 	bl	8001f30 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002734:	f7ff fbfc 	bl	8001f30 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b64      	cmp	r3, #100	; 0x64
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e1ec      	b.n	8002b20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002746:	4b53      	ldr	r3, [pc, #332]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f0      	bne.n	8002734 <HAL_RCC_OscConfig+0x10c>
 8002752:	e000      	b.n	8002756 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d063      	beq.n	800282a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002762:	4b4c      	ldr	r3, [pc, #304]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f003 030c 	and.w	r3, r3, #12
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00b      	beq.n	8002786 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800276e:	4b49      	ldr	r3, [pc, #292]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f003 030c 	and.w	r3, r3, #12
 8002776:	2b08      	cmp	r3, #8
 8002778:	d11c      	bne.n	80027b4 <HAL_RCC_OscConfig+0x18c>
 800277a:	4b46      	ldr	r3, [pc, #280]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d116      	bne.n	80027b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002786:	4b43      	ldr	r3, [pc, #268]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d005      	beq.n	800279e <HAL_RCC_OscConfig+0x176>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d001      	beq.n	800279e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e1c0      	b.n	8002b20 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800279e:	4b3d      	ldr	r3, [pc, #244]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	4939      	ldr	r1, [pc, #228]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027b2:	e03a      	b.n	800282a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d020      	beq.n	80027fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027bc:	4b36      	ldr	r3, [pc, #216]	; (8002898 <HAL_RCC_OscConfig+0x270>)
 80027be:	2201      	movs	r2, #1
 80027c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c2:	f7ff fbb5 	bl	8001f30 <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ca:	f7ff fbb1 	bl	8001f30 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e1a1      	b.n	8002b20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027dc:	4b2d      	ldr	r3, [pc, #180]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0f0      	beq.n	80027ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e8:	4b2a      	ldr	r3, [pc, #168]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	4927      	ldr	r1, [pc, #156]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	600b      	str	r3, [r1, #0]
 80027fc:	e015      	b.n	800282a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027fe:	4b26      	ldr	r3, [pc, #152]	; (8002898 <HAL_RCC_OscConfig+0x270>)
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002804:	f7ff fb94 	bl	8001f30 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800280c:	f7ff fb90 	bl	8001f30 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e180      	b.n	8002b20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800281e:	4b1d      	ldr	r3, [pc, #116]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1f0      	bne.n	800280c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	2b00      	cmp	r3, #0
 8002834:	d03a      	beq.n	80028ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d019      	beq.n	8002872 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800283e:	4b17      	ldr	r3, [pc, #92]	; (800289c <HAL_RCC_OscConfig+0x274>)
 8002840:	2201      	movs	r2, #1
 8002842:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002844:	f7ff fb74 	bl	8001f30 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800284c:	f7ff fb70 	bl	8001f30 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e160      	b.n	8002b20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800285e:	4b0d      	ldr	r3, [pc, #52]	; (8002894 <HAL_RCC_OscConfig+0x26c>)
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f0      	beq.n	800284c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800286a:	2001      	movs	r0, #1
 800286c:	f000 fad8 	bl	8002e20 <RCC_Delay>
 8002870:	e01c      	b.n	80028ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002872:	4b0a      	ldr	r3, [pc, #40]	; (800289c <HAL_RCC_OscConfig+0x274>)
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002878:	f7ff fb5a 	bl	8001f30 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800287e:	e00f      	b.n	80028a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002880:	f7ff fb56 	bl	8001f30 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d908      	bls.n	80028a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e146      	b.n	8002b20 <HAL_RCC_OscConfig+0x4f8>
 8002892:	bf00      	nop
 8002894:	40021000 	.word	0x40021000
 8002898:	42420000 	.word	0x42420000
 800289c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028a0:	4b92      	ldr	r3, [pc, #584]	; (8002aec <HAL_RCC_OscConfig+0x4c4>)
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1e9      	bne.n	8002880 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 80a6 	beq.w	8002a06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ba:	2300      	movs	r3, #0
 80028bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028be:	4b8b      	ldr	r3, [pc, #556]	; (8002aec <HAL_RCC_OscConfig+0x4c4>)
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10d      	bne.n	80028e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ca:	4b88      	ldr	r3, [pc, #544]	; (8002aec <HAL_RCC_OscConfig+0x4c4>)
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	4a87      	ldr	r2, [pc, #540]	; (8002aec <HAL_RCC_OscConfig+0x4c4>)
 80028d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d4:	61d3      	str	r3, [r2, #28]
 80028d6:	4b85      	ldr	r3, [pc, #532]	; (8002aec <HAL_RCC_OscConfig+0x4c4>)
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028e2:	2301      	movs	r3, #1
 80028e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e6:	4b82      	ldr	r3, [pc, #520]	; (8002af0 <HAL_RCC_OscConfig+0x4c8>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d118      	bne.n	8002924 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028f2:	4b7f      	ldr	r3, [pc, #508]	; (8002af0 <HAL_RCC_OscConfig+0x4c8>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a7e      	ldr	r2, [pc, #504]	; (8002af0 <HAL_RCC_OscConfig+0x4c8>)
 80028f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028fe:	f7ff fb17 	bl	8001f30 <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002906:	f7ff fb13 	bl	8001f30 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b64      	cmp	r3, #100	; 0x64
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e103      	b.n	8002b20 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002918:	4b75      	ldr	r3, [pc, #468]	; (8002af0 <HAL_RCC_OscConfig+0x4c8>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0f0      	beq.n	8002906 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d106      	bne.n	800293a <HAL_RCC_OscConfig+0x312>
 800292c:	4b6f      	ldr	r3, [pc, #444]	; (8002aec <HAL_RCC_OscConfig+0x4c4>)
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	4a6e      	ldr	r2, [pc, #440]	; (8002aec <HAL_RCC_OscConfig+0x4c4>)
 8002932:	f043 0301 	orr.w	r3, r3, #1
 8002936:	6213      	str	r3, [r2, #32]
 8002938:	e02d      	b.n	8002996 <HAL_RCC_OscConfig+0x36e>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10c      	bne.n	800295c <HAL_RCC_OscConfig+0x334>
 8002942:	4b6a      	ldr	r3, [pc, #424]	; (8002aec <HAL_RCC_OscConfig+0x4c4>)
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	4a69      	ldr	r2, [pc, #420]	; (8002aec <HAL_RCC_OscConfig+0x4c4>)
 8002948:	f023 0301 	bic.w	r3, r3, #1
 800294c:	6213      	str	r3, [r2, #32]
 800294e:	4b67      	ldr	r3, [pc, #412]	; (8002aec <HAL_RCC_OscConfig+0x4c4>)
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	4a66      	ldr	r2, [pc, #408]	; (8002aec <HAL_RCC_OscConfig+0x4c4>)
 8002954:	f023 0304 	bic.w	r3, r3, #4
 8002958:	6213      	str	r3, [r2, #32]
 800295a:	e01c      	b.n	8002996 <HAL_RCC_OscConfig+0x36e>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	2b05      	cmp	r3, #5
 8002962:	d10c      	bne.n	800297e <HAL_RCC_OscConfig+0x356>
 8002964:	4b61      	ldr	r3, [pc, #388]	; (8002aec <HAL_RCC_OscConfig+0x4c4>)
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	4a60      	ldr	r2, [pc, #384]	; (8002aec <HAL_RCC_OscConfig+0x4c4>)
 800296a:	f043 0304 	orr.w	r3, r3, #4
 800296e:	6213      	str	r3, [r2, #32]
 8002970:	4b5e      	ldr	r3, [pc, #376]	; (8002aec <HAL_RCC_OscConfig+0x4c4>)
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	4a5d      	ldr	r2, [pc, #372]	; (8002aec <HAL_RCC_OscConfig+0x4c4>)
 8002976:	f043 0301 	orr.w	r3, r3, #1
 800297a:	6213      	str	r3, [r2, #32]
 800297c:	e00b      	b.n	8002996 <HAL_RCC_OscConfig+0x36e>
 800297e:	4b5b      	ldr	r3, [pc, #364]	; (8002aec <HAL_RCC_OscConfig+0x4c4>)
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	4a5a      	ldr	r2, [pc, #360]	; (8002aec <HAL_RCC_OscConfig+0x4c4>)
 8002984:	f023 0301 	bic.w	r3, r3, #1
 8002988:	6213      	str	r3, [r2, #32]
 800298a:	4b58      	ldr	r3, [pc, #352]	; (8002aec <HAL_RCC_OscConfig+0x4c4>)
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	4a57      	ldr	r2, [pc, #348]	; (8002aec <HAL_RCC_OscConfig+0x4c4>)
 8002990:	f023 0304 	bic.w	r3, r3, #4
 8002994:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d015      	beq.n	80029ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800299e:	f7ff fac7 	bl	8001f30 <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a4:	e00a      	b.n	80029bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a6:	f7ff fac3 	bl	8001f30 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e0b1      	b.n	8002b20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029bc:	4b4b      	ldr	r3, [pc, #300]	; (8002aec <HAL_RCC_OscConfig+0x4c4>)
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0ee      	beq.n	80029a6 <HAL_RCC_OscConfig+0x37e>
 80029c8:	e014      	b.n	80029f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ca:	f7ff fab1 	bl	8001f30 <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d0:	e00a      	b.n	80029e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029d2:	f7ff faad 	bl	8001f30 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e09b      	b.n	8002b20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029e8:	4b40      	ldr	r3, [pc, #256]	; (8002aec <HAL_RCC_OscConfig+0x4c4>)
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1ee      	bne.n	80029d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029f4:	7dfb      	ldrb	r3, [r7, #23]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d105      	bne.n	8002a06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029fa:	4b3c      	ldr	r3, [pc, #240]	; (8002aec <HAL_RCC_OscConfig+0x4c4>)
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	4a3b      	ldr	r2, [pc, #236]	; (8002aec <HAL_RCC_OscConfig+0x4c4>)
 8002a00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 8087 	beq.w	8002b1e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a10:	4b36      	ldr	r3, [pc, #216]	; (8002aec <HAL_RCC_OscConfig+0x4c4>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 030c 	and.w	r3, r3, #12
 8002a18:	2b08      	cmp	r3, #8
 8002a1a:	d061      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d146      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a24:	4b33      	ldr	r3, [pc, #204]	; (8002af4 <HAL_RCC_OscConfig+0x4cc>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2a:	f7ff fa81 	bl	8001f30 <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a32:	f7ff fa7d 	bl	8001f30 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e06d      	b.n	8002b20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a44:	4b29      	ldr	r3, [pc, #164]	; (8002aec <HAL_RCC_OscConfig+0x4c4>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1f0      	bne.n	8002a32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a58:	d108      	bne.n	8002a6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a5a:	4b24      	ldr	r3, [pc, #144]	; (8002aec <HAL_RCC_OscConfig+0x4c4>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	4921      	ldr	r1, [pc, #132]	; (8002aec <HAL_RCC_OscConfig+0x4c4>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a6c:	4b1f      	ldr	r3, [pc, #124]	; (8002aec <HAL_RCC_OscConfig+0x4c4>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a19      	ldr	r1, [r3, #32]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	430b      	orrs	r3, r1
 8002a7e:	491b      	ldr	r1, [pc, #108]	; (8002aec <HAL_RCC_OscConfig+0x4c4>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a84:	4b1b      	ldr	r3, [pc, #108]	; (8002af4 <HAL_RCC_OscConfig+0x4cc>)
 8002a86:	2201      	movs	r2, #1
 8002a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8a:	f7ff fa51 	bl	8001f30 <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a92:	f7ff fa4d 	bl	8001f30 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e03d      	b.n	8002b20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002aa4:	4b11      	ldr	r3, [pc, #68]	; (8002aec <HAL_RCC_OscConfig+0x4c4>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0f0      	beq.n	8002a92 <HAL_RCC_OscConfig+0x46a>
 8002ab0:	e035      	b.n	8002b1e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab2:	4b10      	ldr	r3, [pc, #64]	; (8002af4 <HAL_RCC_OscConfig+0x4cc>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab8:	f7ff fa3a 	bl	8001f30 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac0:	f7ff fa36 	bl	8001f30 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e026      	b.n	8002b20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ad2:	4b06      	ldr	r3, [pc, #24]	; (8002aec <HAL_RCC_OscConfig+0x4c4>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1f0      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x498>
 8002ade:	e01e      	b.n	8002b1e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d107      	bne.n	8002af8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e019      	b.n	8002b20 <HAL_RCC_OscConfig+0x4f8>
 8002aec:	40021000 	.word	0x40021000
 8002af0:	40007000 	.word	0x40007000
 8002af4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002af8:	4b0b      	ldr	r3, [pc, #44]	; (8002b28 <HAL_RCC_OscConfig+0x500>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d106      	bne.n	8002b1a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d001      	beq.n	8002b1e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40021000 	.word	0x40021000

08002b2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e0d0      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b40:	4b6a      	ldr	r3, [pc, #424]	; (8002cec <HAL_RCC_ClockConfig+0x1c0>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d910      	bls.n	8002b70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4e:	4b67      	ldr	r3, [pc, #412]	; (8002cec <HAL_RCC_ClockConfig+0x1c0>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f023 0207 	bic.w	r2, r3, #7
 8002b56:	4965      	ldr	r1, [pc, #404]	; (8002cec <HAL_RCC_ClockConfig+0x1c0>)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b5e:	4b63      	ldr	r3, [pc, #396]	; (8002cec <HAL_RCC_ClockConfig+0x1c0>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0307 	and.w	r3, r3, #7
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d001      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e0b8      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d020      	beq.n	8002bbe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d005      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b88:	4b59      	ldr	r3, [pc, #356]	; (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	4a58      	ldr	r2, [pc, #352]	; (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d005      	beq.n	8002bac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ba0:	4b53      	ldr	r3, [pc, #332]	; (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	4a52      	ldr	r2, [pc, #328]	; (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002baa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bac:	4b50      	ldr	r3, [pc, #320]	; (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	494d      	ldr	r1, [pc, #308]	; (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d040      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d107      	bne.n	8002be2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd2:	4b47      	ldr	r3, [pc, #284]	; (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d115      	bne.n	8002c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e07f      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d107      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bea:	4b41      	ldr	r3, [pc, #260]	; (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d109      	bne.n	8002c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e073      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bfa:	4b3d      	ldr	r3, [pc, #244]	; (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e06b      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c0a:	4b39      	ldr	r3, [pc, #228]	; (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f023 0203 	bic.w	r2, r3, #3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	4936      	ldr	r1, [pc, #216]	; (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c1c:	f7ff f988 	bl	8001f30 <HAL_GetTick>
 8002c20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c22:	e00a      	b.n	8002c3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c24:	f7ff f984 	bl	8001f30 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e053      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3a:	4b2d      	ldr	r3, [pc, #180]	; (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f003 020c 	and.w	r2, r3, #12
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d1eb      	bne.n	8002c24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c4c:	4b27      	ldr	r3, [pc, #156]	; (8002cec <HAL_RCC_ClockConfig+0x1c0>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d210      	bcs.n	8002c7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5a:	4b24      	ldr	r3, [pc, #144]	; (8002cec <HAL_RCC_ClockConfig+0x1c0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f023 0207 	bic.w	r2, r3, #7
 8002c62:	4922      	ldr	r1, [pc, #136]	; (8002cec <HAL_RCC_ClockConfig+0x1c0>)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c6a:	4b20      	ldr	r3, [pc, #128]	; (8002cec <HAL_RCC_ClockConfig+0x1c0>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d001      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e032      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d008      	beq.n	8002c9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c88:	4b19      	ldr	r3, [pc, #100]	; (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	4916      	ldr	r1, [pc, #88]	; (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0308 	and.w	r3, r3, #8
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d009      	beq.n	8002cba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ca6:	4b12      	ldr	r3, [pc, #72]	; (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	490e      	ldr	r1, [pc, #56]	; (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cba:	f000 f821 	bl	8002d00 <HAL_RCC_GetSysClockFreq>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	091b      	lsrs	r3, r3, #4
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	490a      	ldr	r1, [pc, #40]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ccc:	5ccb      	ldrb	r3, [r1, r3]
 8002cce:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd2:	4a09      	ldr	r2, [pc, #36]	; (8002cf8 <HAL_RCC_ClockConfig+0x1cc>)
 8002cd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cd6:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <HAL_RCC_ClockConfig+0x1d0>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff f8e6 	bl	8001eac <HAL_InitTick>

  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40022000 	.word	0x40022000
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	080082f0 	.word	0x080082f0
 8002cf8:	20000004 	.word	0x20000004
 8002cfc:	20000008 	.word	0x20000008

08002d00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d00:	b490      	push	{r4, r7}
 8002d02:	b08a      	sub	sp, #40	; 0x28
 8002d04:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d06:	4b29      	ldr	r3, [pc, #164]	; (8002dac <HAL_RCC_GetSysClockFreq+0xac>)
 8002d08:	1d3c      	adds	r4, r7, #4
 8002d0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d10:	f240 2301 	movw	r3, #513	; 0x201
 8002d14:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	61fb      	str	r3, [r7, #28]
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61bb      	str	r3, [r7, #24]
 8002d1e:	2300      	movs	r3, #0
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d26:	2300      	movs	r3, #0
 8002d28:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d2a:	4b21      	ldr	r3, [pc, #132]	; (8002db0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f003 030c 	and.w	r3, r3, #12
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	d002      	beq.n	8002d40 <HAL_RCC_GetSysClockFreq+0x40>
 8002d3a:	2b08      	cmp	r3, #8
 8002d3c:	d003      	beq.n	8002d46 <HAL_RCC_GetSysClockFreq+0x46>
 8002d3e:	e02b      	b.n	8002d98 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d40:	4b1c      	ldr	r3, [pc, #112]	; (8002db4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d42:	623b      	str	r3, [r7, #32]
      break;
 8002d44:	e02b      	b.n	8002d9e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	0c9b      	lsrs	r3, r3, #18
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	3328      	adds	r3, #40	; 0x28
 8002d50:	443b      	add	r3, r7
 8002d52:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d56:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d012      	beq.n	8002d88 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d62:	4b13      	ldr	r3, [pc, #76]	; (8002db0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	0c5b      	lsrs	r3, r3, #17
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	3328      	adds	r3, #40	; 0x28
 8002d6e:	443b      	add	r3, r7
 8002d70:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d74:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	4a0e      	ldr	r2, [pc, #56]	; (8002db4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d7a:	fb03 f202 	mul.w	r2, r3, r2
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d84:	627b      	str	r3, [r7, #36]	; 0x24
 8002d86:	e004      	b.n	8002d92 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	4a0b      	ldr	r2, [pc, #44]	; (8002db8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d8c:	fb02 f303 	mul.w	r3, r2, r3
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	623b      	str	r3, [r7, #32]
      break;
 8002d96:	e002      	b.n	8002d9e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d98:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d9a:	623b      	str	r3, [r7, #32]
      break;
 8002d9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d9e:	6a3b      	ldr	r3, [r7, #32]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3728      	adds	r7, #40	; 0x28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bc90      	pop	{r4, r7}
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	080082e0 	.word	0x080082e0
 8002db0:	40021000 	.word	0x40021000
 8002db4:	007a1200 	.word	0x007a1200
 8002db8:	003d0900 	.word	0x003d0900

08002dbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dc0:	4b02      	ldr	r3, [pc, #8]	; (8002dcc <HAL_RCC_GetHCLKFreq+0x10>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr
 8002dcc:	20000004 	.word	0x20000004

08002dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002dd4:	f7ff fff2 	bl	8002dbc <HAL_RCC_GetHCLKFreq>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	0a1b      	lsrs	r3, r3, #8
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	4903      	ldr	r1, [pc, #12]	; (8002df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002de6:	5ccb      	ldrb	r3, [r1, r3]
 8002de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40021000 	.word	0x40021000
 8002df4:	08008300 	.word	0x08008300

08002df8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002dfc:	f7ff ffde 	bl	8002dbc <HAL_RCC_GetHCLKFreq>
 8002e00:	4602      	mov	r2, r0
 8002e02:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	0adb      	lsrs	r3, r3, #11
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	4903      	ldr	r1, [pc, #12]	; (8002e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e0e:	5ccb      	ldrb	r3, [r1, r3]
 8002e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	08008300 	.word	0x08008300

08002e20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e28:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <RCC_Delay+0x34>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a0a      	ldr	r2, [pc, #40]	; (8002e58 <RCC_Delay+0x38>)
 8002e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e32:	0a5b      	lsrs	r3, r3, #9
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	fb02 f303 	mul.w	r3, r2, r3
 8002e3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e3c:	bf00      	nop
  }
  while (Delay --);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	1e5a      	subs	r2, r3, #1
 8002e42:	60fa      	str	r2, [r7, #12]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1f9      	bne.n	8002e3c <RCC_Delay+0x1c>
}
 8002e48:	bf00      	nop
 8002e4a:	bf00      	nop
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bc80      	pop	{r7}
 8002e52:	4770      	bx	lr
 8002e54:	20000004 	.word	0x20000004
 8002e58:	10624dd3 	.word	0x10624dd3

08002e5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d001      	beq.n	8002e74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e03a      	b.n	8002eea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f042 0201 	orr.w	r2, r2, #1
 8002e8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a18      	ldr	r2, [pc, #96]	; (8002ef4 <HAL_TIM_Base_Start_IT+0x98>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d00e      	beq.n	8002eb4 <HAL_TIM_Base_Start_IT+0x58>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e9e:	d009      	beq.n	8002eb4 <HAL_TIM_Base_Start_IT+0x58>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a14      	ldr	r2, [pc, #80]	; (8002ef8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d004      	beq.n	8002eb4 <HAL_TIM_Base_Start_IT+0x58>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a13      	ldr	r2, [pc, #76]	; (8002efc <HAL_TIM_Base_Start_IT+0xa0>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d111      	bne.n	8002ed8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 0307 	and.w	r3, r3, #7
 8002ebe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2b06      	cmp	r3, #6
 8002ec4:	d010      	beq.n	8002ee8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f042 0201 	orr.w	r2, r2, #1
 8002ed4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed6:	e007      	b.n	8002ee8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0201 	orr.w	r2, r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3714      	adds	r7, #20
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr
 8002ef4:	40012c00 	.word	0x40012c00
 8002ef8:	40000400 	.word	0x40000400
 8002efc:	40000800 	.word	0x40000800

08002f00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e041      	b.n	8002f96 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d106      	bne.n	8002f2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7fe fda2 	bl	8001a70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3304      	adds	r3, #4
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4610      	mov	r0, r2
 8002f40:	f000 fbea 	bl	8003718 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
	...

08002fa0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d109      	bne.n	8002fc4 <HAL_TIM_PWM_Start+0x24>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	bf14      	ite	ne
 8002fbc:	2301      	movne	r3, #1
 8002fbe:	2300      	moveq	r3, #0
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	e022      	b.n	800300a <HAL_TIM_PWM_Start+0x6a>
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	d109      	bne.n	8002fde <HAL_TIM_PWM_Start+0x3e>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	bf14      	ite	ne
 8002fd6:	2301      	movne	r3, #1
 8002fd8:	2300      	moveq	r3, #0
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	e015      	b.n	800300a <HAL_TIM_PWM_Start+0x6a>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	2b08      	cmp	r3, #8
 8002fe2:	d109      	bne.n	8002ff8 <HAL_TIM_PWM_Start+0x58>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	bf14      	ite	ne
 8002ff0:	2301      	movne	r3, #1
 8002ff2:	2300      	moveq	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	e008      	b.n	800300a <HAL_TIM_PWM_Start+0x6a>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b01      	cmp	r3, #1
 8003002:	bf14      	ite	ne
 8003004:	2301      	movne	r3, #1
 8003006:	2300      	moveq	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e05e      	b.n	80030d0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d104      	bne.n	8003022 <HAL_TIM_PWM_Start+0x82>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003020:	e013      	b.n	800304a <HAL_TIM_PWM_Start+0xaa>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	2b04      	cmp	r3, #4
 8003026:	d104      	bne.n	8003032 <HAL_TIM_PWM_Start+0x92>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2202      	movs	r2, #2
 800302c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003030:	e00b      	b.n	800304a <HAL_TIM_PWM_Start+0xaa>
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	2b08      	cmp	r3, #8
 8003036:	d104      	bne.n	8003042 <HAL_TIM_PWM_Start+0xa2>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2202      	movs	r2, #2
 800303c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003040:	e003      	b.n	800304a <HAL_TIM_PWM_Start+0xaa>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2202      	movs	r2, #2
 8003046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2201      	movs	r2, #1
 8003050:	6839      	ldr	r1, [r7, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f000 fd4a 	bl	8003aec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a1e      	ldr	r2, [pc, #120]	; (80030d8 <HAL_TIM_PWM_Start+0x138>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d107      	bne.n	8003072 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003070:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a18      	ldr	r2, [pc, #96]	; (80030d8 <HAL_TIM_PWM_Start+0x138>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d00e      	beq.n	800309a <HAL_TIM_PWM_Start+0xfa>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003084:	d009      	beq.n	800309a <HAL_TIM_PWM_Start+0xfa>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a14      	ldr	r2, [pc, #80]	; (80030dc <HAL_TIM_PWM_Start+0x13c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d004      	beq.n	800309a <HAL_TIM_PWM_Start+0xfa>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a12      	ldr	r2, [pc, #72]	; (80030e0 <HAL_TIM_PWM_Start+0x140>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d111      	bne.n	80030be <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2b06      	cmp	r3, #6
 80030aa:	d010      	beq.n	80030ce <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0201 	orr.w	r2, r2, #1
 80030ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030bc:	e007      	b.n	80030ce <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f042 0201 	orr.w	r2, r2, #1
 80030cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40012c00 	.word	0x40012c00
 80030dc:	40000400 	.word	0x40000400
 80030e0:	40000800 	.word	0x40000800

080030e4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e093      	b.n	8003220 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	d106      	bne.n	8003112 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f7fe fc45 	bl	800199c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2202      	movs	r2, #2
 8003116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6812      	ldr	r2, [r2, #0]
 8003124:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003128:	f023 0307 	bic.w	r3, r3, #7
 800312c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	3304      	adds	r3, #4
 8003136:	4619      	mov	r1, r3
 8003138:	4610      	mov	r0, r2
 800313a:	f000 faed 	bl	8003718 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	4313      	orrs	r3, r2
 800315e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003166:	f023 0303 	bic.w	r3, r3, #3
 800316a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	021b      	lsls	r3, r3, #8
 8003176:	4313      	orrs	r3, r2
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	4313      	orrs	r3, r2
 800317c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003184:	f023 030c 	bic.w	r3, r3, #12
 8003188:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003190:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003194:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	68da      	ldr	r2, [r3, #12]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	021b      	lsls	r3, r3, #8
 80031a0:	4313      	orrs	r3, r2
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	011a      	lsls	r2, r3, #4
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	031b      	lsls	r3, r3, #12
 80031b4:	4313      	orrs	r3, r2
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80031c2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	4313      	orrs	r3, r2
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3718      	adds	r7, #24
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003238:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003240:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003248:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003250:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d110      	bne.n	800327a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003258:	7bfb      	ldrb	r3, [r7, #15]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d102      	bne.n	8003264 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800325e:	7b7b      	ldrb	r3, [r7, #13]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d001      	beq.n	8003268 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e069      	b.n	800333c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2202      	movs	r2, #2
 800326c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2202      	movs	r2, #2
 8003274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003278:	e031      	b.n	80032de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	2b04      	cmp	r3, #4
 800327e:	d110      	bne.n	80032a2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003280:	7bbb      	ldrb	r3, [r7, #14]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d102      	bne.n	800328c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003286:	7b3b      	ldrb	r3, [r7, #12]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d001      	beq.n	8003290 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e055      	b.n	800333c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2202      	movs	r2, #2
 8003294:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2202      	movs	r2, #2
 800329c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032a0:	e01d      	b.n	80032de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80032a2:	7bfb      	ldrb	r3, [r7, #15]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d108      	bne.n	80032ba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80032a8:	7bbb      	ldrb	r3, [r7, #14]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d105      	bne.n	80032ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80032ae:	7b7b      	ldrb	r3, [r7, #13]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d102      	bne.n	80032ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80032b4:	7b3b      	ldrb	r3, [r7, #12]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d001      	beq.n	80032be <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e03e      	b.n	800333c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2202      	movs	r2, #2
 80032c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2202      	movs	r2, #2
 80032ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2202      	movs	r2, #2
 80032d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2202      	movs	r2, #2
 80032da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d003      	beq.n	80032ec <HAL_TIM_Encoder_Start+0xc4>
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d008      	beq.n	80032fc <HAL_TIM_Encoder_Start+0xd4>
 80032ea:	e00f      	b.n	800330c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2201      	movs	r2, #1
 80032f2:	2100      	movs	r1, #0
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 fbf9 	bl	8003aec <TIM_CCxChannelCmd>
      break;
 80032fa:	e016      	b.n	800332a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2201      	movs	r2, #1
 8003302:	2104      	movs	r1, #4
 8003304:	4618      	mov	r0, r3
 8003306:	f000 fbf1 	bl	8003aec <TIM_CCxChannelCmd>
      break;
 800330a:	e00e      	b.n	800332a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2201      	movs	r2, #1
 8003312:	2100      	movs	r1, #0
 8003314:	4618      	mov	r0, r3
 8003316:	f000 fbe9 	bl	8003aec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2201      	movs	r2, #1
 8003320:	2104      	movs	r1, #4
 8003322:	4618      	mov	r0, r3
 8003324:	f000 fbe2 	bl	8003aec <TIM_CCxChannelCmd>
      break;
 8003328:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f042 0201 	orr.w	r2, r2, #1
 8003338:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b02      	cmp	r3, #2
 8003358:	d122      	bne.n	80033a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b02      	cmp	r3, #2
 8003366:	d11b      	bne.n	80033a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f06f 0202 	mvn.w	r2, #2
 8003370:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	f003 0303 	and.w	r3, r3, #3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f9ab 	bl	80036e2 <HAL_TIM_IC_CaptureCallback>
 800338c:	e005      	b.n	800339a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f99e 	bl	80036d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 f9ad 	bl	80036f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	f003 0304 	and.w	r3, r3, #4
 80033aa:	2b04      	cmp	r3, #4
 80033ac:	d122      	bne.n	80033f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b04      	cmp	r3, #4
 80033ba:	d11b      	bne.n	80033f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f06f 0204 	mvn.w	r2, #4
 80033c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2202      	movs	r2, #2
 80033ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f981 	bl	80036e2 <HAL_TIM_IC_CaptureCallback>
 80033e0:	e005      	b.n	80033ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f974 	bl	80036d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 f983 	bl	80036f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	2b08      	cmp	r3, #8
 8003400:	d122      	bne.n	8003448 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	f003 0308 	and.w	r3, r3, #8
 800340c:	2b08      	cmp	r3, #8
 800340e:	d11b      	bne.n	8003448 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f06f 0208 	mvn.w	r2, #8
 8003418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2204      	movs	r2, #4
 800341e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d003      	beq.n	8003436 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f957 	bl	80036e2 <HAL_TIM_IC_CaptureCallback>
 8003434:	e005      	b.n	8003442 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f94a 	bl	80036d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 f959 	bl	80036f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	f003 0310 	and.w	r3, r3, #16
 8003452:	2b10      	cmp	r3, #16
 8003454:	d122      	bne.n	800349c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f003 0310 	and.w	r3, r3, #16
 8003460:	2b10      	cmp	r3, #16
 8003462:	d11b      	bne.n	800349c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f06f 0210 	mvn.w	r2, #16
 800346c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2208      	movs	r2, #8
 8003472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f92d 	bl	80036e2 <HAL_TIM_IC_CaptureCallback>
 8003488:	e005      	b.n	8003496 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f920 	bl	80036d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 f92f 	bl	80036f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d10e      	bne.n	80034c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d107      	bne.n	80034c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f06f 0201 	mvn.w	r2, #1
 80034c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7fd fcdc 	bl	8000e80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d2:	2b80      	cmp	r3, #128	; 0x80
 80034d4:	d10e      	bne.n	80034f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e0:	2b80      	cmp	r3, #128	; 0x80
 80034e2:	d107      	bne.n	80034f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 fb87 	bl	8003c02 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fe:	2b40      	cmp	r3, #64	; 0x40
 8003500:	d10e      	bne.n	8003520 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350c:	2b40      	cmp	r3, #64	; 0x40
 800350e:	d107      	bne.n	8003520 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f8f3 	bl	8003706 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	f003 0320 	and.w	r3, r3, #32
 800352a:	2b20      	cmp	r3, #32
 800352c:	d10e      	bne.n	800354c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	f003 0320 	and.w	r3, r3, #32
 8003538:	2b20      	cmp	r3, #32
 800353a:	d107      	bne.n	800354c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f06f 0220 	mvn.w	r2, #32
 8003544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 fb52 	bl	8003bf0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800354c:	bf00      	nop
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003566:	2b01      	cmp	r3, #1
 8003568:	d101      	bne.n	800356e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800356a:	2302      	movs	r3, #2
 800356c:	e0ac      	b.n	80036c8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b0c      	cmp	r3, #12
 800357a:	f200 809f 	bhi.w	80036bc <HAL_TIM_PWM_ConfigChannel+0x168>
 800357e:	a201      	add	r2, pc, #4	; (adr r2, 8003584 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003584:	080035b9 	.word	0x080035b9
 8003588:	080036bd 	.word	0x080036bd
 800358c:	080036bd 	.word	0x080036bd
 8003590:	080036bd 	.word	0x080036bd
 8003594:	080035f9 	.word	0x080035f9
 8003598:	080036bd 	.word	0x080036bd
 800359c:	080036bd 	.word	0x080036bd
 80035a0:	080036bd 	.word	0x080036bd
 80035a4:	0800363b 	.word	0x0800363b
 80035a8:	080036bd 	.word	0x080036bd
 80035ac:	080036bd 	.word	0x080036bd
 80035b0:	080036bd 	.word	0x080036bd
 80035b4:	0800367b 	.word	0x0800367b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68b9      	ldr	r1, [r7, #8]
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 f90c 	bl	80037dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699a      	ldr	r2, [r3, #24]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 0208 	orr.w	r2, r2, #8
 80035d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699a      	ldr	r2, [r3, #24]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 0204 	bic.w	r2, r2, #4
 80035e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6999      	ldr	r1, [r3, #24]
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	691a      	ldr	r2, [r3, #16]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	619a      	str	r2, [r3, #24]
      break;
 80035f6:	e062      	b.n	80036be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68b9      	ldr	r1, [r7, #8]
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 f952 	bl	80038a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	699a      	ldr	r2, [r3, #24]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003612:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	699a      	ldr	r2, [r3, #24]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003622:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6999      	ldr	r1, [r3, #24]
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	021a      	lsls	r2, r3, #8
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	619a      	str	r2, [r3, #24]
      break;
 8003638:	e041      	b.n	80036be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68b9      	ldr	r1, [r7, #8]
 8003640:	4618      	mov	r0, r3
 8003642:	f000 f99b 	bl	800397c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	69da      	ldr	r2, [r3, #28]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f042 0208 	orr.w	r2, r2, #8
 8003654:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	69da      	ldr	r2, [r3, #28]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0204 	bic.w	r2, r2, #4
 8003664:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	69d9      	ldr	r1, [r3, #28]
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	691a      	ldr	r2, [r3, #16]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	61da      	str	r2, [r3, #28]
      break;
 8003678:	e021      	b.n	80036be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68b9      	ldr	r1, [r7, #8]
 8003680:	4618      	mov	r0, r3
 8003682:	f000 f9e5 	bl	8003a50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	69da      	ldr	r2, [r3, #28]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003694:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	69da      	ldr	r2, [r3, #28]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	69d9      	ldr	r1, [r3, #28]
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	021a      	lsls	r2, r3, #8
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	61da      	str	r2, [r3, #28]
      break;
 80036ba:	e000      	b.n	80036be <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80036bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	bc80      	pop	{r7}
 80036e0:	4770      	bx	lr

080036e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bc80      	pop	{r7}
 80036f2:	4770      	bx	lr

080036f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	bc80      	pop	{r7}
 8003704:	4770      	bx	lr

08003706 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003706:	b480      	push	{r7}
 8003708:	b083      	sub	sp, #12
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	bc80      	pop	{r7}
 8003716:	4770      	bx	lr

08003718 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a29      	ldr	r2, [pc, #164]	; (80037d0 <TIM_Base_SetConfig+0xb8>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d00b      	beq.n	8003748 <TIM_Base_SetConfig+0x30>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003736:	d007      	beq.n	8003748 <TIM_Base_SetConfig+0x30>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a26      	ldr	r2, [pc, #152]	; (80037d4 <TIM_Base_SetConfig+0xbc>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d003      	beq.n	8003748 <TIM_Base_SetConfig+0x30>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a25      	ldr	r2, [pc, #148]	; (80037d8 <TIM_Base_SetConfig+0xc0>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d108      	bne.n	800375a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800374e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	4313      	orrs	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a1c      	ldr	r2, [pc, #112]	; (80037d0 <TIM_Base_SetConfig+0xb8>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d00b      	beq.n	800377a <TIM_Base_SetConfig+0x62>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003768:	d007      	beq.n	800377a <TIM_Base_SetConfig+0x62>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a19      	ldr	r2, [pc, #100]	; (80037d4 <TIM_Base_SetConfig+0xbc>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d003      	beq.n	800377a <TIM_Base_SetConfig+0x62>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a18      	ldr	r2, [pc, #96]	; (80037d8 <TIM_Base_SetConfig+0xc0>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d108      	bne.n	800378c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003780:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	4313      	orrs	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	4313      	orrs	r3, r2
 8003798:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a07      	ldr	r2, [pc, #28]	; (80037d0 <TIM_Base_SetConfig+0xb8>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d103      	bne.n	80037c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	691a      	ldr	r2, [r3, #16]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	615a      	str	r2, [r3, #20]
}
 80037c6:	bf00      	nop
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bc80      	pop	{r7}
 80037ce:	4770      	bx	lr
 80037d0:	40012c00 	.word	0x40012c00
 80037d4:	40000400 	.word	0x40000400
 80037d8:	40000800 	.word	0x40000800

080037dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037dc:	b480      	push	{r7}
 80037de:	b087      	sub	sp, #28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	f023 0201 	bic.w	r2, r3, #1
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800380a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f023 0303 	bic.w	r3, r3, #3
 8003812:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	4313      	orrs	r3, r2
 800381c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f023 0302 	bic.w	r3, r3, #2
 8003824:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	4313      	orrs	r3, r2
 800382e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a1c      	ldr	r2, [pc, #112]	; (80038a4 <TIM_OC1_SetConfig+0xc8>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d10c      	bne.n	8003852 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	f023 0308 	bic.w	r3, r3, #8
 800383e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	4313      	orrs	r3, r2
 8003848:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f023 0304 	bic.w	r3, r3, #4
 8003850:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a13      	ldr	r2, [pc, #76]	; (80038a4 <TIM_OC1_SetConfig+0xc8>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d111      	bne.n	800387e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003860:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003868:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	4313      	orrs	r3, r2
 800387c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	621a      	str	r2, [r3, #32]
}
 8003898:	bf00      	nop
 800389a:	371c      	adds	r7, #28
 800389c:	46bd      	mov	sp, r7
 800389e:	bc80      	pop	{r7}
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	40012c00 	.word	0x40012c00

080038a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b087      	sub	sp, #28
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	f023 0210 	bic.w	r2, r3, #16
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	021b      	lsls	r3, r3, #8
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f023 0320 	bic.w	r3, r3, #32
 80038f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	011b      	lsls	r3, r3, #4
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a1d      	ldr	r2, [pc, #116]	; (8003978 <TIM_OC2_SetConfig+0xd0>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d10d      	bne.n	8003924 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800390e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	011b      	lsls	r3, r3, #4
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	4313      	orrs	r3, r2
 800391a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003922:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a14      	ldr	r2, [pc, #80]	; (8003978 <TIM_OC2_SetConfig+0xd0>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d113      	bne.n	8003954 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003932:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800393a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	4313      	orrs	r3, r2
 8003946:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	621a      	str	r2, [r3, #32]
}
 800396e:	bf00      	nop
 8003970:	371c      	adds	r7, #28
 8003972:	46bd      	mov	sp, r7
 8003974:	bc80      	pop	{r7}
 8003976:	4770      	bx	lr
 8003978:	40012c00 	.word	0x40012c00

0800397c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f023 0303 	bic.w	r3, r3, #3
 80039b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	021b      	lsls	r3, r3, #8
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a1d      	ldr	r2, [pc, #116]	; (8003a4c <TIM_OC3_SetConfig+0xd0>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d10d      	bne.n	80039f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	021b      	lsls	r3, r3, #8
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a14      	ldr	r2, [pc, #80]	; (8003a4c <TIM_OC3_SetConfig+0xd0>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d113      	bne.n	8003a26 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	011b      	lsls	r3, r3, #4
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	011b      	lsls	r3, r3, #4
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	621a      	str	r2, [r3, #32]
}
 8003a40:	bf00      	nop
 8003a42:	371c      	adds	r7, #28
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bc80      	pop	{r7}
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	40012c00 	.word	0x40012c00

08003a50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b087      	sub	sp, #28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	021b      	lsls	r3, r3, #8
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	031b      	lsls	r3, r3, #12
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a0f      	ldr	r2, [pc, #60]	; (8003ae8 <TIM_OC4_SetConfig+0x98>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d109      	bne.n	8003ac4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ab6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	019b      	lsls	r3, r3, #6
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	621a      	str	r2, [r3, #32]
}
 8003ade:	bf00      	nop
 8003ae0:	371c      	adds	r7, #28
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bc80      	pop	{r7}
 8003ae6:	4770      	bx	lr
 8003ae8:	40012c00 	.word	0x40012c00

08003aec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b087      	sub	sp, #28
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	f003 031f 	and.w	r3, r3, #31
 8003afe:	2201      	movs	r2, #1
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6a1a      	ldr	r2, [r3, #32]
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	401a      	ands	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6a1a      	ldr	r2, [r3, #32]
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	f003 031f 	and.w	r3, r3, #31
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	fa01 f303 	lsl.w	r3, r1, r3
 8003b24:	431a      	orrs	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	621a      	str	r2, [r3, #32]
}
 8003b2a:	bf00      	nop
 8003b2c:	371c      	adds	r7, #28
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bc80      	pop	{r7}
 8003b32:	4770      	bx	lr

08003b34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d101      	bne.n	8003b4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b48:	2302      	movs	r3, #2
 8003b4a:	e046      	b.n	8003bda <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2202      	movs	r2, #2
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a16      	ldr	r2, [pc, #88]	; (8003be4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d00e      	beq.n	8003bae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b98:	d009      	beq.n	8003bae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a12      	ldr	r2, [pc, #72]	; (8003be8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d004      	beq.n	8003bae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a10      	ldr	r2, [pc, #64]	; (8003bec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d10c      	bne.n	8003bc8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68ba      	ldr	r2, [r7, #8]
 8003bc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3714      	adds	r7, #20
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bc80      	pop	{r7}
 8003be2:	4770      	bx	lr
 8003be4:	40012c00 	.word	0x40012c00
 8003be8:	40000400 	.word	0x40000400
 8003bec:	40000800 	.word	0x40000800

08003bf0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bc80      	pop	{r7}
 8003c00:	4770      	bx	lr

08003c02 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c0a:	bf00      	nop
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bc80      	pop	{r7}
 8003c12:	4770      	bx	lr

08003c14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e03f      	b.n	8003ca6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d106      	bne.n	8003c40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7fd ffa6 	bl	8001b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2224      	movs	r2, #36	; 0x24
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68da      	ldr	r2, [r3, #12]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 fb8d 	bl	8004378 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	691a      	ldr	r2, [r3, #16]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	695a      	ldr	r2, [r3, #20]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68da      	ldr	r2, [r3, #12]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2220      	movs	r2, #32
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b085      	sub	sp, #20
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	60f8      	str	r0, [r7, #12]
 8003cb6:	60b9      	str	r1, [r7, #8]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b20      	cmp	r3, #32
 8003cc6:	d130      	bne.n	8003d2a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d002      	beq.n	8003cd4 <HAL_UART_Transmit_IT+0x26>
 8003cce:	88fb      	ldrh	r3, [r7, #6]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e029      	b.n	8003d2c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d101      	bne.n	8003ce6 <HAL_UART_Transmit_IT+0x38>
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	e022      	b.n	8003d2c <HAL_UART_Transmit_IT+0x7e>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	88fa      	ldrh	r2, [r7, #6]
 8003cf8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	88fa      	ldrh	r2, [r7, #6]
 8003cfe:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2221      	movs	r2, #33	; 0x21
 8003d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d24:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003d26:	2300      	movs	r3, #0
 8003d28:	e000      	b.n	8003d2c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003d2a:	2302      	movs	r3, #2
  }
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3714      	adds	r7, #20
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bc80      	pop	{r7}
 8003d34:	4770      	bx	lr
	...

08003d38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b08a      	sub	sp, #40	; 0x28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	f003 030f 	and.w	r3, r3, #15
 8003d66:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10d      	bne.n	8003d8a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d70:	f003 0320 	and.w	r3, r3, #32
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d008      	beq.n	8003d8a <HAL_UART_IRQHandler+0x52>
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	f003 0320 	and.w	r3, r3, #32
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 fa4f 	bl	8004226 <UART_Receive_IT>
      return;
 8003d88:	e17b      	b.n	8004082 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f000 80b1 	beq.w	8003ef4 <HAL_UART_IRQHandler+0x1bc>
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d105      	bne.n	8003da8 <HAL_UART_IRQHandler+0x70>
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 80a6 	beq.w	8003ef4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00a      	beq.n	8003dc8 <HAL_UART_IRQHandler+0x90>
 8003db2:	6a3b      	ldr	r3, [r7, #32]
 8003db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d005      	beq.n	8003dc8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc0:	f043 0201 	orr.w	r2, r3, #1
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dca:	f003 0304 	and.w	r3, r3, #4
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00a      	beq.n	8003de8 <HAL_UART_IRQHandler+0xb0>
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d005      	beq.n	8003de8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de0:	f043 0202 	orr.w	r2, r3, #2
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <HAL_UART_IRQHandler+0xd0>
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d005      	beq.n	8003e08 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e00:	f043 0204 	orr.w	r2, r3, #4
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	f003 0308 	and.w	r3, r3, #8
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00f      	beq.n	8003e32 <HAL_UART_IRQHandler+0xfa>
 8003e12:	6a3b      	ldr	r3, [r7, #32]
 8003e14:	f003 0320 	and.w	r3, r3, #32
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d104      	bne.n	8003e26 <HAL_UART_IRQHandler+0xee>
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d005      	beq.n	8003e32 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	f043 0208 	orr.w	r2, r3, #8
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 811e 	beq.w	8004078 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	f003 0320 	and.w	r3, r3, #32
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d007      	beq.n	8003e56 <HAL_UART_IRQHandler+0x11e>
 8003e46:	6a3b      	ldr	r3, [r7, #32]
 8003e48:	f003 0320 	and.w	r3, r3, #32
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d002      	beq.n	8003e56 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 f9e8 	bl	8004226 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	bf14      	ite	ne
 8003e64:	2301      	movne	r3, #1
 8003e66:	2300      	moveq	r3, #0
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e70:	f003 0308 	and.w	r3, r3, #8
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d102      	bne.n	8003e7e <HAL_UART_IRQHandler+0x146>
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d031      	beq.n	8003ee2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f92a 	bl	80040d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d023      	beq.n	8003eda <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	695a      	ldr	r2, [r3, #20]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ea0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d013      	beq.n	8003ed2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eae:	4a76      	ldr	r2, [pc, #472]	; (8004088 <HAL_UART_IRQHandler+0x350>)
 8003eb0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fe f98c 	bl	80021d4 <HAL_DMA_Abort_IT>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d016      	beq.n	8003ef0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ecc:	4610      	mov	r0, r2
 8003ece:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed0:	e00e      	b.n	8003ef0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f8ec 	bl	80040b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed8:	e00a      	b.n	8003ef0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f8e8 	bl	80040b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ee0:	e006      	b.n	8003ef0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f8e4 	bl	80040b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003eee:	e0c3      	b.n	8004078 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef0:	bf00      	nop
    return;
 8003ef2:	e0c1      	b.n	8004078 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	f040 80a1 	bne.w	8004040 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f00:	f003 0310 	and.w	r3, r3, #16
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 809b 	beq.w	8004040 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003f0a:	6a3b      	ldr	r3, [r7, #32]
 8003f0c:	f003 0310 	and.w	r3, r3, #16
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 8095 	beq.w	8004040 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f16:	2300      	movs	r3, #0
 8003f18:	60fb      	str	r3, [r7, #12]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	60fb      	str	r3, [r7, #12]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	60fb      	str	r3, [r7, #12]
 8003f2a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d04e      	beq.n	8003fd8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003f44:	8a3b      	ldrh	r3, [r7, #16]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 8098 	beq.w	800407c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f50:	8a3a      	ldrh	r2, [r7, #16]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	f080 8092 	bcs.w	800407c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	8a3a      	ldrh	r2, [r7, #16]
 8003f5c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	2b20      	cmp	r3, #32
 8003f66:	d02b      	beq.n	8003fc0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68da      	ldr	r2, [r3, #12]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f76:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	695a      	ldr	r2, [r3, #20]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 0201 	bic.w	r2, r2, #1
 8003f86:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695a      	ldr	r2, [r3, #20]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f96:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68da      	ldr	r2, [r3, #12]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 0210 	bic.w	r2, r2, #16
 8003fb4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7fe f8cf 	bl	800215e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	4619      	mov	r1, r3
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 f876 	bl	80040c2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003fd6:	e051      	b.n	800407c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d047      	beq.n	8004080 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003ff0:	8a7b      	ldrh	r3, [r7, #18]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d044      	beq.n	8004080 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68da      	ldr	r2, [r3, #12]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004004:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	695a      	ldr	r2, [r3, #20]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 0201 	bic.w	r2, r2, #1
 8004014:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2220      	movs	r2, #32
 800401a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 0210 	bic.w	r2, r2, #16
 8004032:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004034:	8a7b      	ldrh	r3, [r7, #18]
 8004036:	4619      	mov	r1, r3
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 f842 	bl	80040c2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800403e:	e01f      	b.n	8004080 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004046:	2b00      	cmp	r3, #0
 8004048:	d008      	beq.n	800405c <HAL_UART_IRQHandler+0x324>
 800404a:	6a3b      	ldr	r3, [r7, #32]
 800404c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004050:	2b00      	cmp	r3, #0
 8004052:	d003      	beq.n	800405c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 f87f 	bl	8004158 <UART_Transmit_IT>
    return;
 800405a:	e012      	b.n	8004082 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00d      	beq.n	8004082 <HAL_UART_IRQHandler+0x34a>
 8004066:	6a3b      	ldr	r3, [r7, #32]
 8004068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800406c:	2b00      	cmp	r3, #0
 800406e:	d008      	beq.n	8004082 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 f8c0 	bl	80041f6 <UART_EndTransmit_IT>
    return;
 8004076:	e004      	b.n	8004082 <HAL_UART_IRQHandler+0x34a>
    return;
 8004078:	bf00      	nop
 800407a:	e002      	b.n	8004082 <HAL_UART_IRQHandler+0x34a>
      return;
 800407c:	bf00      	nop
 800407e:	e000      	b.n	8004082 <HAL_UART_IRQHandler+0x34a>
      return;
 8004080:	bf00      	nop
  }
}
 8004082:	3728      	adds	r7, #40	; 0x28
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	08004131 	.word	0x08004131

0800408c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	bc80      	pop	{r7}
 800409c:	4770      	bx	lr

0800409e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800409e:	b480      	push	{r7}
 80040a0:	b083      	sub	sp, #12
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bc80      	pop	{r7}
 80040ae:	4770      	bx	lr

080040b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	bc80      	pop	{r7}
 80040c0:	4770      	bx	lr

080040c2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
 80040ca:	460b      	mov	r3, r1
 80040cc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bc80      	pop	{r7}
 80040d6:	4770      	bx	lr

080040d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80040ee:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	695a      	ldr	r2, [r3, #20]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 0201 	bic.w	r2, r2, #1
 80040fe:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004104:	2b01      	cmp	r3, #1
 8004106:	d107      	bne.n	8004118 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68da      	ldr	r2, [r3, #12]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 0210 	bic.w	r2, r2, #16
 8004116:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2220      	movs	r2, #32
 800411c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004126:	bf00      	nop
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	bc80      	pop	{r7}
 800412e:	4770      	bx	lr

08004130 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f7ff ffb0 	bl	80040b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004150:	bf00      	nop
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b21      	cmp	r3, #33	; 0x21
 800416a:	d13e      	bne.n	80041ea <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004174:	d114      	bne.n	80041a0 <UART_Transmit_IT+0x48>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d110      	bne.n	80041a0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	881b      	ldrh	r3, [r3, #0]
 8004188:	461a      	mov	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004192:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a1b      	ldr	r3, [r3, #32]
 8004198:	1c9a      	adds	r2, r3, #2
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	621a      	str	r2, [r3, #32]
 800419e:	e008      	b.n	80041b2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	1c59      	adds	r1, r3, #1
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	6211      	str	r1, [r2, #32]
 80041aa:	781a      	ldrb	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	4619      	mov	r1, r3
 80041c0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10f      	bne.n	80041e6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68da      	ldr	r2, [r3, #12]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041d4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68da      	ldr	r2, [r3, #12]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041e4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041e6:	2300      	movs	r3, #0
 80041e8:	e000      	b.n	80041ec <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80041ea:	2302      	movs	r3, #2
  }
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bc80      	pop	{r7}
 80041f4:	4770      	bx	lr

080041f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b082      	sub	sp, #8
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68da      	ldr	r2, [r3, #12]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800420c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2220      	movs	r2, #32
 8004212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f7ff ff38 	bl	800408c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3708      	adds	r7, #8
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b086      	sub	sp, #24
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b22      	cmp	r3, #34	; 0x22
 8004238:	f040 8099 	bne.w	800436e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004244:	d117      	bne.n	8004276 <UART_Receive_IT+0x50>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d113      	bne.n	8004276 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800424e:	2300      	movs	r3, #0
 8004250:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004256:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	b29b      	uxth	r3, r3
 8004260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004264:	b29a      	uxth	r2, r3
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426e:	1c9a      	adds	r2, r3, #2
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	629a      	str	r2, [r3, #40]	; 0x28
 8004274:	e026      	b.n	80042c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800427c:	2300      	movs	r3, #0
 800427e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004288:	d007      	beq.n	800429a <UART_Receive_IT+0x74>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10a      	bne.n	80042a8 <UART_Receive_IT+0x82>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d106      	bne.n	80042a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	701a      	strb	r2, [r3, #0]
 80042a6:	e008      	b.n	80042ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042b4:	b2da      	uxtb	r2, r3
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042be:	1c5a      	adds	r2, r3, #1
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	3b01      	subs	r3, #1
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	4619      	mov	r1, r3
 80042d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d148      	bne.n	800436a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68da      	ldr	r2, [r3, #12]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0220 	bic.w	r2, r2, #32
 80042e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68da      	ldr	r2, [r3, #12]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	695a      	ldr	r2, [r3, #20]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f022 0201 	bic.w	r2, r2, #1
 8004306:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2220      	movs	r2, #32
 800430c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004314:	2b01      	cmp	r3, #1
 8004316:	d123      	bne.n	8004360 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68da      	ldr	r2, [r3, #12]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 0210 	bic.w	r2, r2, #16
 800432c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0310 	and.w	r3, r3, #16
 8004338:	2b10      	cmp	r3, #16
 800433a:	d10a      	bne.n	8004352 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800433c:	2300      	movs	r3, #0
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	60fb      	str	r3, [r7, #12]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	60fb      	str	r3, [r7, #12]
 8004350:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004356:	4619      	mov	r1, r3
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f7ff feb2 	bl	80040c2 <HAL_UARTEx_RxEventCallback>
 800435e:	e002      	b.n	8004366 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f7ff fe9c 	bl	800409e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004366:	2300      	movs	r3, #0
 8004368:	e002      	b.n	8004370 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800436a:	2300      	movs	r3, #0
 800436c:	e000      	b.n	8004370 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800436e:	2302      	movs	r3, #2
  }
}
 8004370:	4618      	mov	r0, r3
 8004372:	3718      	adds	r7, #24
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68da      	ldr	r2, [r3, #12]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	430a      	orrs	r2, r1
 8004394:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	689a      	ldr	r2, [r3, #8]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	431a      	orrs	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80043b2:	f023 030c 	bic.w	r3, r3, #12
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	6812      	ldr	r2, [r2, #0]
 80043ba:	68b9      	ldr	r1, [r7, #8]
 80043bc:	430b      	orrs	r3, r1
 80043be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	699a      	ldr	r2, [r3, #24]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	430a      	orrs	r2, r1
 80043d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a2c      	ldr	r2, [pc, #176]	; (800448c <UART_SetConfig+0x114>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d103      	bne.n	80043e8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80043e0:	f7fe fd0a 	bl	8002df8 <HAL_RCC_GetPCLK2Freq>
 80043e4:	60f8      	str	r0, [r7, #12]
 80043e6:	e002      	b.n	80043ee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80043e8:	f7fe fcf2 	bl	8002dd0 <HAL_RCC_GetPCLK1Freq>
 80043ec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	4613      	mov	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4413      	add	r3, r2
 80043f6:	009a      	lsls	r2, r3, #2
 80043f8:	441a      	add	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	fbb2 f3f3 	udiv	r3, r2, r3
 8004404:	4a22      	ldr	r2, [pc, #136]	; (8004490 <UART_SetConfig+0x118>)
 8004406:	fba2 2303 	umull	r2, r3, r2, r3
 800440a:	095b      	lsrs	r3, r3, #5
 800440c:	0119      	lsls	r1, r3, #4
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	4613      	mov	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4413      	add	r3, r2
 8004416:	009a      	lsls	r2, r3, #2
 8004418:	441a      	add	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	fbb2 f2f3 	udiv	r2, r2, r3
 8004424:	4b1a      	ldr	r3, [pc, #104]	; (8004490 <UART_SetConfig+0x118>)
 8004426:	fba3 0302 	umull	r0, r3, r3, r2
 800442a:	095b      	lsrs	r3, r3, #5
 800442c:	2064      	movs	r0, #100	; 0x64
 800442e:	fb00 f303 	mul.w	r3, r0, r3
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	011b      	lsls	r3, r3, #4
 8004436:	3332      	adds	r3, #50	; 0x32
 8004438:	4a15      	ldr	r2, [pc, #84]	; (8004490 <UART_SetConfig+0x118>)
 800443a:	fba2 2303 	umull	r2, r3, r2, r3
 800443e:	095b      	lsrs	r3, r3, #5
 8004440:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004444:	4419      	add	r1, r3
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	4613      	mov	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	009a      	lsls	r2, r3, #2
 8004450:	441a      	add	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	fbb2 f2f3 	udiv	r2, r2, r3
 800445c:	4b0c      	ldr	r3, [pc, #48]	; (8004490 <UART_SetConfig+0x118>)
 800445e:	fba3 0302 	umull	r0, r3, r3, r2
 8004462:	095b      	lsrs	r3, r3, #5
 8004464:	2064      	movs	r0, #100	; 0x64
 8004466:	fb00 f303 	mul.w	r3, r0, r3
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	011b      	lsls	r3, r3, #4
 800446e:	3332      	adds	r3, #50	; 0x32
 8004470:	4a07      	ldr	r2, [pc, #28]	; (8004490 <UART_SetConfig+0x118>)
 8004472:	fba2 2303 	umull	r2, r3, r2, r3
 8004476:	095b      	lsrs	r3, r3, #5
 8004478:	f003 020f 	and.w	r2, r3, #15
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	440a      	add	r2, r1
 8004482:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004484:	bf00      	nop
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	40013800 	.word	0x40013800
 8004490:	51eb851f 	.word	0x51eb851f

08004494 <__errno>:
 8004494:	4b01      	ldr	r3, [pc, #4]	; (800449c <__errno+0x8>)
 8004496:	6818      	ldr	r0, [r3, #0]
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	20000010 	.word	0x20000010

080044a0 <__libc_init_array>:
 80044a0:	b570      	push	{r4, r5, r6, lr}
 80044a2:	2600      	movs	r6, #0
 80044a4:	4d0c      	ldr	r5, [pc, #48]	; (80044d8 <__libc_init_array+0x38>)
 80044a6:	4c0d      	ldr	r4, [pc, #52]	; (80044dc <__libc_init_array+0x3c>)
 80044a8:	1b64      	subs	r4, r4, r5
 80044aa:	10a4      	asrs	r4, r4, #2
 80044ac:	42a6      	cmp	r6, r4
 80044ae:	d109      	bne.n	80044c4 <__libc_init_array+0x24>
 80044b0:	f003 fef4 	bl	800829c <_init>
 80044b4:	2600      	movs	r6, #0
 80044b6:	4d0a      	ldr	r5, [pc, #40]	; (80044e0 <__libc_init_array+0x40>)
 80044b8:	4c0a      	ldr	r4, [pc, #40]	; (80044e4 <__libc_init_array+0x44>)
 80044ba:	1b64      	subs	r4, r4, r5
 80044bc:	10a4      	asrs	r4, r4, #2
 80044be:	42a6      	cmp	r6, r4
 80044c0:	d105      	bne.n	80044ce <__libc_init_array+0x2e>
 80044c2:	bd70      	pop	{r4, r5, r6, pc}
 80044c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80044c8:	4798      	blx	r3
 80044ca:	3601      	adds	r6, #1
 80044cc:	e7ee      	b.n	80044ac <__libc_init_array+0xc>
 80044ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80044d2:	4798      	blx	r3
 80044d4:	3601      	adds	r6, #1
 80044d6:	e7f2      	b.n	80044be <__libc_init_array+0x1e>
 80044d8:	080088c0 	.word	0x080088c0
 80044dc:	080088c0 	.word	0x080088c0
 80044e0:	080088c0 	.word	0x080088c0
 80044e4:	080088c4 	.word	0x080088c4

080044e8 <memset>:
 80044e8:	4603      	mov	r3, r0
 80044ea:	4402      	add	r2, r0
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d100      	bne.n	80044f2 <memset+0xa>
 80044f0:	4770      	bx	lr
 80044f2:	f803 1b01 	strb.w	r1, [r3], #1
 80044f6:	e7f9      	b.n	80044ec <memset+0x4>

080044f8 <__cvt>:
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044fe:	461f      	mov	r7, r3
 8004500:	bfbb      	ittet	lt
 8004502:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004506:	461f      	movlt	r7, r3
 8004508:	2300      	movge	r3, #0
 800450a:	232d      	movlt	r3, #45	; 0x2d
 800450c:	b088      	sub	sp, #32
 800450e:	4614      	mov	r4, r2
 8004510:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004512:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004514:	7013      	strb	r3, [r2, #0]
 8004516:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004518:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800451c:	f023 0820 	bic.w	r8, r3, #32
 8004520:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004524:	d005      	beq.n	8004532 <__cvt+0x3a>
 8004526:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800452a:	d100      	bne.n	800452e <__cvt+0x36>
 800452c:	3501      	adds	r5, #1
 800452e:	2302      	movs	r3, #2
 8004530:	e000      	b.n	8004534 <__cvt+0x3c>
 8004532:	2303      	movs	r3, #3
 8004534:	aa07      	add	r2, sp, #28
 8004536:	9204      	str	r2, [sp, #16]
 8004538:	aa06      	add	r2, sp, #24
 800453a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800453e:	e9cd 3500 	strd	r3, r5, [sp]
 8004542:	4622      	mov	r2, r4
 8004544:	463b      	mov	r3, r7
 8004546:	f000 fce3 	bl	8004f10 <_dtoa_r>
 800454a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800454e:	4606      	mov	r6, r0
 8004550:	d102      	bne.n	8004558 <__cvt+0x60>
 8004552:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004554:	07db      	lsls	r3, r3, #31
 8004556:	d522      	bpl.n	800459e <__cvt+0xa6>
 8004558:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800455c:	eb06 0905 	add.w	r9, r6, r5
 8004560:	d110      	bne.n	8004584 <__cvt+0x8c>
 8004562:	7833      	ldrb	r3, [r6, #0]
 8004564:	2b30      	cmp	r3, #48	; 0x30
 8004566:	d10a      	bne.n	800457e <__cvt+0x86>
 8004568:	2200      	movs	r2, #0
 800456a:	2300      	movs	r3, #0
 800456c:	4620      	mov	r0, r4
 800456e:	4639      	mov	r1, r7
 8004570:	f7fc fa1a 	bl	80009a8 <__aeabi_dcmpeq>
 8004574:	b918      	cbnz	r0, 800457e <__cvt+0x86>
 8004576:	f1c5 0501 	rsb	r5, r5, #1
 800457a:	f8ca 5000 	str.w	r5, [sl]
 800457e:	f8da 3000 	ldr.w	r3, [sl]
 8004582:	4499      	add	r9, r3
 8004584:	2200      	movs	r2, #0
 8004586:	2300      	movs	r3, #0
 8004588:	4620      	mov	r0, r4
 800458a:	4639      	mov	r1, r7
 800458c:	f7fc fa0c 	bl	80009a8 <__aeabi_dcmpeq>
 8004590:	b108      	cbz	r0, 8004596 <__cvt+0x9e>
 8004592:	f8cd 901c 	str.w	r9, [sp, #28]
 8004596:	2230      	movs	r2, #48	; 0x30
 8004598:	9b07      	ldr	r3, [sp, #28]
 800459a:	454b      	cmp	r3, r9
 800459c:	d307      	bcc.n	80045ae <__cvt+0xb6>
 800459e:	4630      	mov	r0, r6
 80045a0:	9b07      	ldr	r3, [sp, #28]
 80045a2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80045a4:	1b9b      	subs	r3, r3, r6
 80045a6:	6013      	str	r3, [r2, #0]
 80045a8:	b008      	add	sp, #32
 80045aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045ae:	1c59      	adds	r1, r3, #1
 80045b0:	9107      	str	r1, [sp, #28]
 80045b2:	701a      	strb	r2, [r3, #0]
 80045b4:	e7f0      	b.n	8004598 <__cvt+0xa0>

080045b6 <__exponent>:
 80045b6:	4603      	mov	r3, r0
 80045b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045ba:	2900      	cmp	r1, #0
 80045bc:	f803 2b02 	strb.w	r2, [r3], #2
 80045c0:	bfb6      	itet	lt
 80045c2:	222d      	movlt	r2, #45	; 0x2d
 80045c4:	222b      	movge	r2, #43	; 0x2b
 80045c6:	4249      	neglt	r1, r1
 80045c8:	2909      	cmp	r1, #9
 80045ca:	7042      	strb	r2, [r0, #1]
 80045cc:	dd2b      	ble.n	8004626 <__exponent+0x70>
 80045ce:	f10d 0407 	add.w	r4, sp, #7
 80045d2:	46a4      	mov	ip, r4
 80045d4:	270a      	movs	r7, #10
 80045d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80045da:	460a      	mov	r2, r1
 80045dc:	46a6      	mov	lr, r4
 80045de:	fb07 1516 	mls	r5, r7, r6, r1
 80045e2:	2a63      	cmp	r2, #99	; 0x63
 80045e4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80045e8:	4631      	mov	r1, r6
 80045ea:	f104 34ff 	add.w	r4, r4, #4294967295
 80045ee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80045f2:	dcf0      	bgt.n	80045d6 <__exponent+0x20>
 80045f4:	3130      	adds	r1, #48	; 0x30
 80045f6:	f1ae 0502 	sub.w	r5, lr, #2
 80045fa:	f804 1c01 	strb.w	r1, [r4, #-1]
 80045fe:	4629      	mov	r1, r5
 8004600:	1c44      	adds	r4, r0, #1
 8004602:	4561      	cmp	r1, ip
 8004604:	d30a      	bcc.n	800461c <__exponent+0x66>
 8004606:	f10d 0209 	add.w	r2, sp, #9
 800460a:	eba2 020e 	sub.w	r2, r2, lr
 800460e:	4565      	cmp	r5, ip
 8004610:	bf88      	it	hi
 8004612:	2200      	movhi	r2, #0
 8004614:	4413      	add	r3, r2
 8004616:	1a18      	subs	r0, r3, r0
 8004618:	b003      	add	sp, #12
 800461a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800461c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004620:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004624:	e7ed      	b.n	8004602 <__exponent+0x4c>
 8004626:	2330      	movs	r3, #48	; 0x30
 8004628:	3130      	adds	r1, #48	; 0x30
 800462a:	7083      	strb	r3, [r0, #2]
 800462c:	70c1      	strb	r1, [r0, #3]
 800462e:	1d03      	adds	r3, r0, #4
 8004630:	e7f1      	b.n	8004616 <__exponent+0x60>
	...

08004634 <_printf_float>:
 8004634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004638:	b091      	sub	sp, #68	; 0x44
 800463a:	460c      	mov	r4, r1
 800463c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004640:	4616      	mov	r6, r2
 8004642:	461f      	mov	r7, r3
 8004644:	4605      	mov	r5, r0
 8004646:	f001 fa51 	bl	8005aec <_localeconv_r>
 800464a:	6803      	ldr	r3, [r0, #0]
 800464c:	4618      	mov	r0, r3
 800464e:	9309      	str	r3, [sp, #36]	; 0x24
 8004650:	f7fb fd7e 	bl	8000150 <strlen>
 8004654:	2300      	movs	r3, #0
 8004656:	930e      	str	r3, [sp, #56]	; 0x38
 8004658:	f8d8 3000 	ldr.w	r3, [r8]
 800465c:	900a      	str	r0, [sp, #40]	; 0x28
 800465e:	3307      	adds	r3, #7
 8004660:	f023 0307 	bic.w	r3, r3, #7
 8004664:	f103 0208 	add.w	r2, r3, #8
 8004668:	f894 9018 	ldrb.w	r9, [r4, #24]
 800466c:	f8d4 b000 	ldr.w	fp, [r4]
 8004670:	f8c8 2000 	str.w	r2, [r8]
 8004674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004678:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800467c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004680:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004684:	930b      	str	r3, [sp, #44]	; 0x2c
 8004686:	f04f 32ff 	mov.w	r2, #4294967295
 800468a:	4640      	mov	r0, r8
 800468c:	4b9c      	ldr	r3, [pc, #624]	; (8004900 <_printf_float+0x2cc>)
 800468e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004690:	f7fc f9bc 	bl	8000a0c <__aeabi_dcmpun>
 8004694:	bb70      	cbnz	r0, 80046f4 <_printf_float+0xc0>
 8004696:	f04f 32ff 	mov.w	r2, #4294967295
 800469a:	4640      	mov	r0, r8
 800469c:	4b98      	ldr	r3, [pc, #608]	; (8004900 <_printf_float+0x2cc>)
 800469e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80046a0:	f7fc f996 	bl	80009d0 <__aeabi_dcmple>
 80046a4:	bb30      	cbnz	r0, 80046f4 <_printf_float+0xc0>
 80046a6:	2200      	movs	r2, #0
 80046a8:	2300      	movs	r3, #0
 80046aa:	4640      	mov	r0, r8
 80046ac:	4651      	mov	r1, sl
 80046ae:	f7fc f985 	bl	80009bc <__aeabi_dcmplt>
 80046b2:	b110      	cbz	r0, 80046ba <_printf_float+0x86>
 80046b4:	232d      	movs	r3, #45	; 0x2d
 80046b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046ba:	4b92      	ldr	r3, [pc, #584]	; (8004904 <_printf_float+0x2d0>)
 80046bc:	4892      	ldr	r0, [pc, #584]	; (8004908 <_printf_float+0x2d4>)
 80046be:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80046c2:	bf94      	ite	ls
 80046c4:	4698      	movls	r8, r3
 80046c6:	4680      	movhi	r8, r0
 80046c8:	2303      	movs	r3, #3
 80046ca:	f04f 0a00 	mov.w	sl, #0
 80046ce:	6123      	str	r3, [r4, #16]
 80046d0:	f02b 0304 	bic.w	r3, fp, #4
 80046d4:	6023      	str	r3, [r4, #0]
 80046d6:	4633      	mov	r3, r6
 80046d8:	4621      	mov	r1, r4
 80046da:	4628      	mov	r0, r5
 80046dc:	9700      	str	r7, [sp, #0]
 80046de:	aa0f      	add	r2, sp, #60	; 0x3c
 80046e0:	f000 f9d4 	bl	8004a8c <_printf_common>
 80046e4:	3001      	adds	r0, #1
 80046e6:	f040 8090 	bne.w	800480a <_printf_float+0x1d6>
 80046ea:	f04f 30ff 	mov.w	r0, #4294967295
 80046ee:	b011      	add	sp, #68	; 0x44
 80046f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046f4:	4642      	mov	r2, r8
 80046f6:	4653      	mov	r3, sl
 80046f8:	4640      	mov	r0, r8
 80046fa:	4651      	mov	r1, sl
 80046fc:	f7fc f986 	bl	8000a0c <__aeabi_dcmpun>
 8004700:	b148      	cbz	r0, 8004716 <_printf_float+0xe2>
 8004702:	f1ba 0f00 	cmp.w	sl, #0
 8004706:	bfb8      	it	lt
 8004708:	232d      	movlt	r3, #45	; 0x2d
 800470a:	4880      	ldr	r0, [pc, #512]	; (800490c <_printf_float+0x2d8>)
 800470c:	bfb8      	it	lt
 800470e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004712:	4b7f      	ldr	r3, [pc, #508]	; (8004910 <_printf_float+0x2dc>)
 8004714:	e7d3      	b.n	80046be <_printf_float+0x8a>
 8004716:	6863      	ldr	r3, [r4, #4]
 8004718:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800471c:	1c5a      	adds	r2, r3, #1
 800471e:	d142      	bne.n	80047a6 <_printf_float+0x172>
 8004720:	2306      	movs	r3, #6
 8004722:	6063      	str	r3, [r4, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	9206      	str	r2, [sp, #24]
 8004728:	aa0e      	add	r2, sp, #56	; 0x38
 800472a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800472e:	aa0d      	add	r2, sp, #52	; 0x34
 8004730:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004734:	9203      	str	r2, [sp, #12]
 8004736:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800473a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800473e:	6023      	str	r3, [r4, #0]
 8004740:	6863      	ldr	r3, [r4, #4]
 8004742:	4642      	mov	r2, r8
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	4628      	mov	r0, r5
 8004748:	4653      	mov	r3, sl
 800474a:	910b      	str	r1, [sp, #44]	; 0x2c
 800474c:	f7ff fed4 	bl	80044f8 <__cvt>
 8004750:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004752:	4680      	mov	r8, r0
 8004754:	2947      	cmp	r1, #71	; 0x47
 8004756:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004758:	d108      	bne.n	800476c <_printf_float+0x138>
 800475a:	1cc8      	adds	r0, r1, #3
 800475c:	db02      	blt.n	8004764 <_printf_float+0x130>
 800475e:	6863      	ldr	r3, [r4, #4]
 8004760:	4299      	cmp	r1, r3
 8004762:	dd40      	ble.n	80047e6 <_printf_float+0x1b2>
 8004764:	f1a9 0902 	sub.w	r9, r9, #2
 8004768:	fa5f f989 	uxtb.w	r9, r9
 800476c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004770:	d81f      	bhi.n	80047b2 <_printf_float+0x17e>
 8004772:	464a      	mov	r2, r9
 8004774:	3901      	subs	r1, #1
 8004776:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800477a:	910d      	str	r1, [sp, #52]	; 0x34
 800477c:	f7ff ff1b 	bl	80045b6 <__exponent>
 8004780:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004782:	4682      	mov	sl, r0
 8004784:	1813      	adds	r3, r2, r0
 8004786:	2a01      	cmp	r2, #1
 8004788:	6123      	str	r3, [r4, #16]
 800478a:	dc02      	bgt.n	8004792 <_printf_float+0x15e>
 800478c:	6822      	ldr	r2, [r4, #0]
 800478e:	07d2      	lsls	r2, r2, #31
 8004790:	d501      	bpl.n	8004796 <_printf_float+0x162>
 8004792:	3301      	adds	r3, #1
 8004794:	6123      	str	r3, [r4, #16]
 8004796:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800479a:	2b00      	cmp	r3, #0
 800479c:	d09b      	beq.n	80046d6 <_printf_float+0xa2>
 800479e:	232d      	movs	r3, #45	; 0x2d
 80047a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047a4:	e797      	b.n	80046d6 <_printf_float+0xa2>
 80047a6:	2947      	cmp	r1, #71	; 0x47
 80047a8:	d1bc      	bne.n	8004724 <_printf_float+0xf0>
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1ba      	bne.n	8004724 <_printf_float+0xf0>
 80047ae:	2301      	movs	r3, #1
 80047b0:	e7b7      	b.n	8004722 <_printf_float+0xee>
 80047b2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80047b6:	d118      	bne.n	80047ea <_printf_float+0x1b6>
 80047b8:	2900      	cmp	r1, #0
 80047ba:	6863      	ldr	r3, [r4, #4]
 80047bc:	dd0b      	ble.n	80047d6 <_printf_float+0x1a2>
 80047be:	6121      	str	r1, [r4, #16]
 80047c0:	b913      	cbnz	r3, 80047c8 <_printf_float+0x194>
 80047c2:	6822      	ldr	r2, [r4, #0]
 80047c4:	07d0      	lsls	r0, r2, #31
 80047c6:	d502      	bpl.n	80047ce <_printf_float+0x19a>
 80047c8:	3301      	adds	r3, #1
 80047ca:	440b      	add	r3, r1
 80047cc:	6123      	str	r3, [r4, #16]
 80047ce:	f04f 0a00 	mov.w	sl, #0
 80047d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80047d4:	e7df      	b.n	8004796 <_printf_float+0x162>
 80047d6:	b913      	cbnz	r3, 80047de <_printf_float+0x1aa>
 80047d8:	6822      	ldr	r2, [r4, #0]
 80047da:	07d2      	lsls	r2, r2, #31
 80047dc:	d501      	bpl.n	80047e2 <_printf_float+0x1ae>
 80047de:	3302      	adds	r3, #2
 80047e0:	e7f4      	b.n	80047cc <_printf_float+0x198>
 80047e2:	2301      	movs	r3, #1
 80047e4:	e7f2      	b.n	80047cc <_printf_float+0x198>
 80047e6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80047ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047ec:	4299      	cmp	r1, r3
 80047ee:	db05      	blt.n	80047fc <_printf_float+0x1c8>
 80047f0:	6823      	ldr	r3, [r4, #0]
 80047f2:	6121      	str	r1, [r4, #16]
 80047f4:	07d8      	lsls	r0, r3, #31
 80047f6:	d5ea      	bpl.n	80047ce <_printf_float+0x19a>
 80047f8:	1c4b      	adds	r3, r1, #1
 80047fa:	e7e7      	b.n	80047cc <_printf_float+0x198>
 80047fc:	2900      	cmp	r1, #0
 80047fe:	bfcc      	ite	gt
 8004800:	2201      	movgt	r2, #1
 8004802:	f1c1 0202 	rsble	r2, r1, #2
 8004806:	4413      	add	r3, r2
 8004808:	e7e0      	b.n	80047cc <_printf_float+0x198>
 800480a:	6823      	ldr	r3, [r4, #0]
 800480c:	055a      	lsls	r2, r3, #21
 800480e:	d407      	bmi.n	8004820 <_printf_float+0x1ec>
 8004810:	6923      	ldr	r3, [r4, #16]
 8004812:	4642      	mov	r2, r8
 8004814:	4631      	mov	r1, r6
 8004816:	4628      	mov	r0, r5
 8004818:	47b8      	blx	r7
 800481a:	3001      	adds	r0, #1
 800481c:	d12b      	bne.n	8004876 <_printf_float+0x242>
 800481e:	e764      	b.n	80046ea <_printf_float+0xb6>
 8004820:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004824:	f240 80dd 	bls.w	80049e2 <_printf_float+0x3ae>
 8004828:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800482c:	2200      	movs	r2, #0
 800482e:	2300      	movs	r3, #0
 8004830:	f7fc f8ba 	bl	80009a8 <__aeabi_dcmpeq>
 8004834:	2800      	cmp	r0, #0
 8004836:	d033      	beq.n	80048a0 <_printf_float+0x26c>
 8004838:	2301      	movs	r3, #1
 800483a:	4631      	mov	r1, r6
 800483c:	4628      	mov	r0, r5
 800483e:	4a35      	ldr	r2, [pc, #212]	; (8004914 <_printf_float+0x2e0>)
 8004840:	47b8      	blx	r7
 8004842:	3001      	adds	r0, #1
 8004844:	f43f af51 	beq.w	80046ea <_printf_float+0xb6>
 8004848:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800484c:	429a      	cmp	r2, r3
 800484e:	db02      	blt.n	8004856 <_printf_float+0x222>
 8004850:	6823      	ldr	r3, [r4, #0]
 8004852:	07d8      	lsls	r0, r3, #31
 8004854:	d50f      	bpl.n	8004876 <_printf_float+0x242>
 8004856:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800485a:	4631      	mov	r1, r6
 800485c:	4628      	mov	r0, r5
 800485e:	47b8      	blx	r7
 8004860:	3001      	adds	r0, #1
 8004862:	f43f af42 	beq.w	80046ea <_printf_float+0xb6>
 8004866:	f04f 0800 	mov.w	r8, #0
 800486a:	f104 091a 	add.w	r9, r4, #26
 800486e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004870:	3b01      	subs	r3, #1
 8004872:	4543      	cmp	r3, r8
 8004874:	dc09      	bgt.n	800488a <_printf_float+0x256>
 8004876:	6823      	ldr	r3, [r4, #0]
 8004878:	079b      	lsls	r3, r3, #30
 800487a:	f100 8102 	bmi.w	8004a82 <_printf_float+0x44e>
 800487e:	68e0      	ldr	r0, [r4, #12]
 8004880:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004882:	4298      	cmp	r0, r3
 8004884:	bfb8      	it	lt
 8004886:	4618      	movlt	r0, r3
 8004888:	e731      	b.n	80046ee <_printf_float+0xba>
 800488a:	2301      	movs	r3, #1
 800488c:	464a      	mov	r2, r9
 800488e:	4631      	mov	r1, r6
 8004890:	4628      	mov	r0, r5
 8004892:	47b8      	blx	r7
 8004894:	3001      	adds	r0, #1
 8004896:	f43f af28 	beq.w	80046ea <_printf_float+0xb6>
 800489a:	f108 0801 	add.w	r8, r8, #1
 800489e:	e7e6      	b.n	800486e <_printf_float+0x23a>
 80048a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	dc38      	bgt.n	8004918 <_printf_float+0x2e4>
 80048a6:	2301      	movs	r3, #1
 80048a8:	4631      	mov	r1, r6
 80048aa:	4628      	mov	r0, r5
 80048ac:	4a19      	ldr	r2, [pc, #100]	; (8004914 <_printf_float+0x2e0>)
 80048ae:	47b8      	blx	r7
 80048b0:	3001      	adds	r0, #1
 80048b2:	f43f af1a 	beq.w	80046ea <_printf_float+0xb6>
 80048b6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80048ba:	4313      	orrs	r3, r2
 80048bc:	d102      	bne.n	80048c4 <_printf_float+0x290>
 80048be:	6823      	ldr	r3, [r4, #0]
 80048c0:	07d9      	lsls	r1, r3, #31
 80048c2:	d5d8      	bpl.n	8004876 <_printf_float+0x242>
 80048c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048c8:	4631      	mov	r1, r6
 80048ca:	4628      	mov	r0, r5
 80048cc:	47b8      	blx	r7
 80048ce:	3001      	adds	r0, #1
 80048d0:	f43f af0b 	beq.w	80046ea <_printf_float+0xb6>
 80048d4:	f04f 0900 	mov.w	r9, #0
 80048d8:	f104 0a1a 	add.w	sl, r4, #26
 80048dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048de:	425b      	negs	r3, r3
 80048e0:	454b      	cmp	r3, r9
 80048e2:	dc01      	bgt.n	80048e8 <_printf_float+0x2b4>
 80048e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048e6:	e794      	b.n	8004812 <_printf_float+0x1de>
 80048e8:	2301      	movs	r3, #1
 80048ea:	4652      	mov	r2, sl
 80048ec:	4631      	mov	r1, r6
 80048ee:	4628      	mov	r0, r5
 80048f0:	47b8      	blx	r7
 80048f2:	3001      	adds	r0, #1
 80048f4:	f43f aef9 	beq.w	80046ea <_printf_float+0xb6>
 80048f8:	f109 0901 	add.w	r9, r9, #1
 80048fc:	e7ee      	b.n	80048dc <_printf_float+0x2a8>
 80048fe:	bf00      	nop
 8004900:	7fefffff 	.word	0x7fefffff
 8004904:	0800830c 	.word	0x0800830c
 8004908:	08008310 	.word	0x08008310
 800490c:	08008318 	.word	0x08008318
 8004910:	08008314 	.word	0x08008314
 8004914:	0800831c 	.word	0x0800831c
 8004918:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800491a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800491c:	429a      	cmp	r2, r3
 800491e:	bfa8      	it	ge
 8004920:	461a      	movge	r2, r3
 8004922:	2a00      	cmp	r2, #0
 8004924:	4691      	mov	r9, r2
 8004926:	dc37      	bgt.n	8004998 <_printf_float+0x364>
 8004928:	f04f 0b00 	mov.w	fp, #0
 800492c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004930:	f104 021a 	add.w	r2, r4, #26
 8004934:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004938:	ebaa 0309 	sub.w	r3, sl, r9
 800493c:	455b      	cmp	r3, fp
 800493e:	dc33      	bgt.n	80049a8 <_printf_float+0x374>
 8004940:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004944:	429a      	cmp	r2, r3
 8004946:	db3b      	blt.n	80049c0 <_printf_float+0x38c>
 8004948:	6823      	ldr	r3, [r4, #0]
 800494a:	07da      	lsls	r2, r3, #31
 800494c:	d438      	bmi.n	80049c0 <_printf_float+0x38c>
 800494e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004950:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004952:	eba3 020a 	sub.w	r2, r3, sl
 8004956:	eba3 0901 	sub.w	r9, r3, r1
 800495a:	4591      	cmp	r9, r2
 800495c:	bfa8      	it	ge
 800495e:	4691      	movge	r9, r2
 8004960:	f1b9 0f00 	cmp.w	r9, #0
 8004964:	dc34      	bgt.n	80049d0 <_printf_float+0x39c>
 8004966:	f04f 0800 	mov.w	r8, #0
 800496a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800496e:	f104 0a1a 	add.w	sl, r4, #26
 8004972:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004976:	1a9b      	subs	r3, r3, r2
 8004978:	eba3 0309 	sub.w	r3, r3, r9
 800497c:	4543      	cmp	r3, r8
 800497e:	f77f af7a 	ble.w	8004876 <_printf_float+0x242>
 8004982:	2301      	movs	r3, #1
 8004984:	4652      	mov	r2, sl
 8004986:	4631      	mov	r1, r6
 8004988:	4628      	mov	r0, r5
 800498a:	47b8      	blx	r7
 800498c:	3001      	adds	r0, #1
 800498e:	f43f aeac 	beq.w	80046ea <_printf_float+0xb6>
 8004992:	f108 0801 	add.w	r8, r8, #1
 8004996:	e7ec      	b.n	8004972 <_printf_float+0x33e>
 8004998:	4613      	mov	r3, r2
 800499a:	4631      	mov	r1, r6
 800499c:	4642      	mov	r2, r8
 800499e:	4628      	mov	r0, r5
 80049a0:	47b8      	blx	r7
 80049a2:	3001      	adds	r0, #1
 80049a4:	d1c0      	bne.n	8004928 <_printf_float+0x2f4>
 80049a6:	e6a0      	b.n	80046ea <_printf_float+0xb6>
 80049a8:	2301      	movs	r3, #1
 80049aa:	4631      	mov	r1, r6
 80049ac:	4628      	mov	r0, r5
 80049ae:	920b      	str	r2, [sp, #44]	; 0x2c
 80049b0:	47b8      	blx	r7
 80049b2:	3001      	adds	r0, #1
 80049b4:	f43f ae99 	beq.w	80046ea <_printf_float+0xb6>
 80049b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80049ba:	f10b 0b01 	add.w	fp, fp, #1
 80049be:	e7b9      	b.n	8004934 <_printf_float+0x300>
 80049c0:	4631      	mov	r1, r6
 80049c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049c6:	4628      	mov	r0, r5
 80049c8:	47b8      	blx	r7
 80049ca:	3001      	adds	r0, #1
 80049cc:	d1bf      	bne.n	800494e <_printf_float+0x31a>
 80049ce:	e68c      	b.n	80046ea <_printf_float+0xb6>
 80049d0:	464b      	mov	r3, r9
 80049d2:	4631      	mov	r1, r6
 80049d4:	4628      	mov	r0, r5
 80049d6:	eb08 020a 	add.w	r2, r8, sl
 80049da:	47b8      	blx	r7
 80049dc:	3001      	adds	r0, #1
 80049de:	d1c2      	bne.n	8004966 <_printf_float+0x332>
 80049e0:	e683      	b.n	80046ea <_printf_float+0xb6>
 80049e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049e4:	2a01      	cmp	r2, #1
 80049e6:	dc01      	bgt.n	80049ec <_printf_float+0x3b8>
 80049e8:	07db      	lsls	r3, r3, #31
 80049ea:	d537      	bpl.n	8004a5c <_printf_float+0x428>
 80049ec:	2301      	movs	r3, #1
 80049ee:	4642      	mov	r2, r8
 80049f0:	4631      	mov	r1, r6
 80049f2:	4628      	mov	r0, r5
 80049f4:	47b8      	blx	r7
 80049f6:	3001      	adds	r0, #1
 80049f8:	f43f ae77 	beq.w	80046ea <_printf_float+0xb6>
 80049fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a00:	4631      	mov	r1, r6
 8004a02:	4628      	mov	r0, r5
 8004a04:	47b8      	blx	r7
 8004a06:	3001      	adds	r0, #1
 8004a08:	f43f ae6f 	beq.w	80046ea <_printf_float+0xb6>
 8004a0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a10:	2200      	movs	r2, #0
 8004a12:	2300      	movs	r3, #0
 8004a14:	f7fb ffc8 	bl	80009a8 <__aeabi_dcmpeq>
 8004a18:	b9d8      	cbnz	r0, 8004a52 <_printf_float+0x41e>
 8004a1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a1c:	f108 0201 	add.w	r2, r8, #1
 8004a20:	3b01      	subs	r3, #1
 8004a22:	4631      	mov	r1, r6
 8004a24:	4628      	mov	r0, r5
 8004a26:	47b8      	blx	r7
 8004a28:	3001      	adds	r0, #1
 8004a2a:	d10e      	bne.n	8004a4a <_printf_float+0x416>
 8004a2c:	e65d      	b.n	80046ea <_printf_float+0xb6>
 8004a2e:	2301      	movs	r3, #1
 8004a30:	464a      	mov	r2, r9
 8004a32:	4631      	mov	r1, r6
 8004a34:	4628      	mov	r0, r5
 8004a36:	47b8      	blx	r7
 8004a38:	3001      	adds	r0, #1
 8004a3a:	f43f ae56 	beq.w	80046ea <_printf_float+0xb6>
 8004a3e:	f108 0801 	add.w	r8, r8, #1
 8004a42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a44:	3b01      	subs	r3, #1
 8004a46:	4543      	cmp	r3, r8
 8004a48:	dcf1      	bgt.n	8004a2e <_printf_float+0x3fa>
 8004a4a:	4653      	mov	r3, sl
 8004a4c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004a50:	e6e0      	b.n	8004814 <_printf_float+0x1e0>
 8004a52:	f04f 0800 	mov.w	r8, #0
 8004a56:	f104 091a 	add.w	r9, r4, #26
 8004a5a:	e7f2      	b.n	8004a42 <_printf_float+0x40e>
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	4642      	mov	r2, r8
 8004a60:	e7df      	b.n	8004a22 <_printf_float+0x3ee>
 8004a62:	2301      	movs	r3, #1
 8004a64:	464a      	mov	r2, r9
 8004a66:	4631      	mov	r1, r6
 8004a68:	4628      	mov	r0, r5
 8004a6a:	47b8      	blx	r7
 8004a6c:	3001      	adds	r0, #1
 8004a6e:	f43f ae3c 	beq.w	80046ea <_printf_float+0xb6>
 8004a72:	f108 0801 	add.w	r8, r8, #1
 8004a76:	68e3      	ldr	r3, [r4, #12]
 8004a78:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004a7a:	1a5b      	subs	r3, r3, r1
 8004a7c:	4543      	cmp	r3, r8
 8004a7e:	dcf0      	bgt.n	8004a62 <_printf_float+0x42e>
 8004a80:	e6fd      	b.n	800487e <_printf_float+0x24a>
 8004a82:	f04f 0800 	mov.w	r8, #0
 8004a86:	f104 0919 	add.w	r9, r4, #25
 8004a8a:	e7f4      	b.n	8004a76 <_printf_float+0x442>

08004a8c <_printf_common>:
 8004a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a90:	4616      	mov	r6, r2
 8004a92:	4699      	mov	r9, r3
 8004a94:	688a      	ldr	r2, [r1, #8]
 8004a96:	690b      	ldr	r3, [r1, #16]
 8004a98:	4607      	mov	r7, r0
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	bfb8      	it	lt
 8004a9e:	4613      	movlt	r3, r2
 8004aa0:	6033      	str	r3, [r6, #0]
 8004aa2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004aa6:	460c      	mov	r4, r1
 8004aa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004aac:	b10a      	cbz	r2, 8004ab2 <_printf_common+0x26>
 8004aae:	3301      	adds	r3, #1
 8004ab0:	6033      	str	r3, [r6, #0]
 8004ab2:	6823      	ldr	r3, [r4, #0]
 8004ab4:	0699      	lsls	r1, r3, #26
 8004ab6:	bf42      	ittt	mi
 8004ab8:	6833      	ldrmi	r3, [r6, #0]
 8004aba:	3302      	addmi	r3, #2
 8004abc:	6033      	strmi	r3, [r6, #0]
 8004abe:	6825      	ldr	r5, [r4, #0]
 8004ac0:	f015 0506 	ands.w	r5, r5, #6
 8004ac4:	d106      	bne.n	8004ad4 <_printf_common+0x48>
 8004ac6:	f104 0a19 	add.w	sl, r4, #25
 8004aca:	68e3      	ldr	r3, [r4, #12]
 8004acc:	6832      	ldr	r2, [r6, #0]
 8004ace:	1a9b      	subs	r3, r3, r2
 8004ad0:	42ab      	cmp	r3, r5
 8004ad2:	dc28      	bgt.n	8004b26 <_printf_common+0x9a>
 8004ad4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ad8:	1e13      	subs	r3, r2, #0
 8004ada:	6822      	ldr	r2, [r4, #0]
 8004adc:	bf18      	it	ne
 8004ade:	2301      	movne	r3, #1
 8004ae0:	0692      	lsls	r2, r2, #26
 8004ae2:	d42d      	bmi.n	8004b40 <_printf_common+0xb4>
 8004ae4:	4649      	mov	r1, r9
 8004ae6:	4638      	mov	r0, r7
 8004ae8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004aec:	47c0      	blx	r8
 8004aee:	3001      	adds	r0, #1
 8004af0:	d020      	beq.n	8004b34 <_printf_common+0xa8>
 8004af2:	6823      	ldr	r3, [r4, #0]
 8004af4:	68e5      	ldr	r5, [r4, #12]
 8004af6:	f003 0306 	and.w	r3, r3, #6
 8004afa:	2b04      	cmp	r3, #4
 8004afc:	bf18      	it	ne
 8004afe:	2500      	movne	r5, #0
 8004b00:	6832      	ldr	r2, [r6, #0]
 8004b02:	f04f 0600 	mov.w	r6, #0
 8004b06:	68a3      	ldr	r3, [r4, #8]
 8004b08:	bf08      	it	eq
 8004b0a:	1aad      	subeq	r5, r5, r2
 8004b0c:	6922      	ldr	r2, [r4, #16]
 8004b0e:	bf08      	it	eq
 8004b10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b14:	4293      	cmp	r3, r2
 8004b16:	bfc4      	itt	gt
 8004b18:	1a9b      	subgt	r3, r3, r2
 8004b1a:	18ed      	addgt	r5, r5, r3
 8004b1c:	341a      	adds	r4, #26
 8004b1e:	42b5      	cmp	r5, r6
 8004b20:	d11a      	bne.n	8004b58 <_printf_common+0xcc>
 8004b22:	2000      	movs	r0, #0
 8004b24:	e008      	b.n	8004b38 <_printf_common+0xac>
 8004b26:	2301      	movs	r3, #1
 8004b28:	4652      	mov	r2, sl
 8004b2a:	4649      	mov	r1, r9
 8004b2c:	4638      	mov	r0, r7
 8004b2e:	47c0      	blx	r8
 8004b30:	3001      	adds	r0, #1
 8004b32:	d103      	bne.n	8004b3c <_printf_common+0xb0>
 8004b34:	f04f 30ff 	mov.w	r0, #4294967295
 8004b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b3c:	3501      	adds	r5, #1
 8004b3e:	e7c4      	b.n	8004aca <_printf_common+0x3e>
 8004b40:	2030      	movs	r0, #48	; 0x30
 8004b42:	18e1      	adds	r1, r4, r3
 8004b44:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b48:	1c5a      	adds	r2, r3, #1
 8004b4a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b4e:	4422      	add	r2, r4
 8004b50:	3302      	adds	r3, #2
 8004b52:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b56:	e7c5      	b.n	8004ae4 <_printf_common+0x58>
 8004b58:	2301      	movs	r3, #1
 8004b5a:	4622      	mov	r2, r4
 8004b5c:	4649      	mov	r1, r9
 8004b5e:	4638      	mov	r0, r7
 8004b60:	47c0      	blx	r8
 8004b62:	3001      	adds	r0, #1
 8004b64:	d0e6      	beq.n	8004b34 <_printf_common+0xa8>
 8004b66:	3601      	adds	r6, #1
 8004b68:	e7d9      	b.n	8004b1e <_printf_common+0x92>
	...

08004b6c <_printf_i>:
 8004b6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b70:	7e0f      	ldrb	r7, [r1, #24]
 8004b72:	4691      	mov	r9, r2
 8004b74:	2f78      	cmp	r7, #120	; 0x78
 8004b76:	4680      	mov	r8, r0
 8004b78:	460c      	mov	r4, r1
 8004b7a:	469a      	mov	sl, r3
 8004b7c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b82:	d807      	bhi.n	8004b94 <_printf_i+0x28>
 8004b84:	2f62      	cmp	r7, #98	; 0x62
 8004b86:	d80a      	bhi.n	8004b9e <_printf_i+0x32>
 8004b88:	2f00      	cmp	r7, #0
 8004b8a:	f000 80d9 	beq.w	8004d40 <_printf_i+0x1d4>
 8004b8e:	2f58      	cmp	r7, #88	; 0x58
 8004b90:	f000 80a4 	beq.w	8004cdc <_printf_i+0x170>
 8004b94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b9c:	e03a      	b.n	8004c14 <_printf_i+0xa8>
 8004b9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ba2:	2b15      	cmp	r3, #21
 8004ba4:	d8f6      	bhi.n	8004b94 <_printf_i+0x28>
 8004ba6:	a101      	add	r1, pc, #4	; (adr r1, 8004bac <_printf_i+0x40>)
 8004ba8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bac:	08004c05 	.word	0x08004c05
 8004bb0:	08004c19 	.word	0x08004c19
 8004bb4:	08004b95 	.word	0x08004b95
 8004bb8:	08004b95 	.word	0x08004b95
 8004bbc:	08004b95 	.word	0x08004b95
 8004bc0:	08004b95 	.word	0x08004b95
 8004bc4:	08004c19 	.word	0x08004c19
 8004bc8:	08004b95 	.word	0x08004b95
 8004bcc:	08004b95 	.word	0x08004b95
 8004bd0:	08004b95 	.word	0x08004b95
 8004bd4:	08004b95 	.word	0x08004b95
 8004bd8:	08004d27 	.word	0x08004d27
 8004bdc:	08004c49 	.word	0x08004c49
 8004be0:	08004d09 	.word	0x08004d09
 8004be4:	08004b95 	.word	0x08004b95
 8004be8:	08004b95 	.word	0x08004b95
 8004bec:	08004d49 	.word	0x08004d49
 8004bf0:	08004b95 	.word	0x08004b95
 8004bf4:	08004c49 	.word	0x08004c49
 8004bf8:	08004b95 	.word	0x08004b95
 8004bfc:	08004b95 	.word	0x08004b95
 8004c00:	08004d11 	.word	0x08004d11
 8004c04:	682b      	ldr	r3, [r5, #0]
 8004c06:	1d1a      	adds	r2, r3, #4
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	602a      	str	r2, [r5, #0]
 8004c0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c14:	2301      	movs	r3, #1
 8004c16:	e0a4      	b.n	8004d62 <_printf_i+0x1f6>
 8004c18:	6820      	ldr	r0, [r4, #0]
 8004c1a:	6829      	ldr	r1, [r5, #0]
 8004c1c:	0606      	lsls	r6, r0, #24
 8004c1e:	f101 0304 	add.w	r3, r1, #4
 8004c22:	d50a      	bpl.n	8004c3a <_printf_i+0xce>
 8004c24:	680e      	ldr	r6, [r1, #0]
 8004c26:	602b      	str	r3, [r5, #0]
 8004c28:	2e00      	cmp	r6, #0
 8004c2a:	da03      	bge.n	8004c34 <_printf_i+0xc8>
 8004c2c:	232d      	movs	r3, #45	; 0x2d
 8004c2e:	4276      	negs	r6, r6
 8004c30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c34:	230a      	movs	r3, #10
 8004c36:	485e      	ldr	r0, [pc, #376]	; (8004db0 <_printf_i+0x244>)
 8004c38:	e019      	b.n	8004c6e <_printf_i+0x102>
 8004c3a:	680e      	ldr	r6, [r1, #0]
 8004c3c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c40:	602b      	str	r3, [r5, #0]
 8004c42:	bf18      	it	ne
 8004c44:	b236      	sxthne	r6, r6
 8004c46:	e7ef      	b.n	8004c28 <_printf_i+0xbc>
 8004c48:	682b      	ldr	r3, [r5, #0]
 8004c4a:	6820      	ldr	r0, [r4, #0]
 8004c4c:	1d19      	adds	r1, r3, #4
 8004c4e:	6029      	str	r1, [r5, #0]
 8004c50:	0601      	lsls	r1, r0, #24
 8004c52:	d501      	bpl.n	8004c58 <_printf_i+0xec>
 8004c54:	681e      	ldr	r6, [r3, #0]
 8004c56:	e002      	b.n	8004c5e <_printf_i+0xf2>
 8004c58:	0646      	lsls	r6, r0, #25
 8004c5a:	d5fb      	bpl.n	8004c54 <_printf_i+0xe8>
 8004c5c:	881e      	ldrh	r6, [r3, #0]
 8004c5e:	2f6f      	cmp	r7, #111	; 0x6f
 8004c60:	bf0c      	ite	eq
 8004c62:	2308      	moveq	r3, #8
 8004c64:	230a      	movne	r3, #10
 8004c66:	4852      	ldr	r0, [pc, #328]	; (8004db0 <_printf_i+0x244>)
 8004c68:	2100      	movs	r1, #0
 8004c6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c6e:	6865      	ldr	r5, [r4, #4]
 8004c70:	2d00      	cmp	r5, #0
 8004c72:	bfa8      	it	ge
 8004c74:	6821      	ldrge	r1, [r4, #0]
 8004c76:	60a5      	str	r5, [r4, #8]
 8004c78:	bfa4      	itt	ge
 8004c7a:	f021 0104 	bicge.w	r1, r1, #4
 8004c7e:	6021      	strge	r1, [r4, #0]
 8004c80:	b90e      	cbnz	r6, 8004c86 <_printf_i+0x11a>
 8004c82:	2d00      	cmp	r5, #0
 8004c84:	d04d      	beq.n	8004d22 <_printf_i+0x1b6>
 8004c86:	4615      	mov	r5, r2
 8004c88:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c8c:	fb03 6711 	mls	r7, r3, r1, r6
 8004c90:	5dc7      	ldrb	r7, [r0, r7]
 8004c92:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c96:	4637      	mov	r7, r6
 8004c98:	42bb      	cmp	r3, r7
 8004c9a:	460e      	mov	r6, r1
 8004c9c:	d9f4      	bls.n	8004c88 <_printf_i+0x11c>
 8004c9e:	2b08      	cmp	r3, #8
 8004ca0:	d10b      	bne.n	8004cba <_printf_i+0x14e>
 8004ca2:	6823      	ldr	r3, [r4, #0]
 8004ca4:	07de      	lsls	r6, r3, #31
 8004ca6:	d508      	bpl.n	8004cba <_printf_i+0x14e>
 8004ca8:	6923      	ldr	r3, [r4, #16]
 8004caa:	6861      	ldr	r1, [r4, #4]
 8004cac:	4299      	cmp	r1, r3
 8004cae:	bfde      	ittt	le
 8004cb0:	2330      	movle	r3, #48	; 0x30
 8004cb2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004cb6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004cba:	1b52      	subs	r2, r2, r5
 8004cbc:	6122      	str	r2, [r4, #16]
 8004cbe:	464b      	mov	r3, r9
 8004cc0:	4621      	mov	r1, r4
 8004cc2:	4640      	mov	r0, r8
 8004cc4:	f8cd a000 	str.w	sl, [sp]
 8004cc8:	aa03      	add	r2, sp, #12
 8004cca:	f7ff fedf 	bl	8004a8c <_printf_common>
 8004cce:	3001      	adds	r0, #1
 8004cd0:	d14c      	bne.n	8004d6c <_printf_i+0x200>
 8004cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd6:	b004      	add	sp, #16
 8004cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cdc:	4834      	ldr	r0, [pc, #208]	; (8004db0 <_printf_i+0x244>)
 8004cde:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004ce2:	6829      	ldr	r1, [r5, #0]
 8004ce4:	6823      	ldr	r3, [r4, #0]
 8004ce6:	f851 6b04 	ldr.w	r6, [r1], #4
 8004cea:	6029      	str	r1, [r5, #0]
 8004cec:	061d      	lsls	r5, r3, #24
 8004cee:	d514      	bpl.n	8004d1a <_printf_i+0x1ae>
 8004cf0:	07df      	lsls	r7, r3, #31
 8004cf2:	bf44      	itt	mi
 8004cf4:	f043 0320 	orrmi.w	r3, r3, #32
 8004cf8:	6023      	strmi	r3, [r4, #0]
 8004cfa:	b91e      	cbnz	r6, 8004d04 <_printf_i+0x198>
 8004cfc:	6823      	ldr	r3, [r4, #0]
 8004cfe:	f023 0320 	bic.w	r3, r3, #32
 8004d02:	6023      	str	r3, [r4, #0]
 8004d04:	2310      	movs	r3, #16
 8004d06:	e7af      	b.n	8004c68 <_printf_i+0xfc>
 8004d08:	6823      	ldr	r3, [r4, #0]
 8004d0a:	f043 0320 	orr.w	r3, r3, #32
 8004d0e:	6023      	str	r3, [r4, #0]
 8004d10:	2378      	movs	r3, #120	; 0x78
 8004d12:	4828      	ldr	r0, [pc, #160]	; (8004db4 <_printf_i+0x248>)
 8004d14:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d18:	e7e3      	b.n	8004ce2 <_printf_i+0x176>
 8004d1a:	0659      	lsls	r1, r3, #25
 8004d1c:	bf48      	it	mi
 8004d1e:	b2b6      	uxthmi	r6, r6
 8004d20:	e7e6      	b.n	8004cf0 <_printf_i+0x184>
 8004d22:	4615      	mov	r5, r2
 8004d24:	e7bb      	b.n	8004c9e <_printf_i+0x132>
 8004d26:	682b      	ldr	r3, [r5, #0]
 8004d28:	6826      	ldr	r6, [r4, #0]
 8004d2a:	1d18      	adds	r0, r3, #4
 8004d2c:	6961      	ldr	r1, [r4, #20]
 8004d2e:	6028      	str	r0, [r5, #0]
 8004d30:	0635      	lsls	r5, r6, #24
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	d501      	bpl.n	8004d3a <_printf_i+0x1ce>
 8004d36:	6019      	str	r1, [r3, #0]
 8004d38:	e002      	b.n	8004d40 <_printf_i+0x1d4>
 8004d3a:	0670      	lsls	r0, r6, #25
 8004d3c:	d5fb      	bpl.n	8004d36 <_printf_i+0x1ca>
 8004d3e:	8019      	strh	r1, [r3, #0]
 8004d40:	2300      	movs	r3, #0
 8004d42:	4615      	mov	r5, r2
 8004d44:	6123      	str	r3, [r4, #16]
 8004d46:	e7ba      	b.n	8004cbe <_printf_i+0x152>
 8004d48:	682b      	ldr	r3, [r5, #0]
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	1d1a      	adds	r2, r3, #4
 8004d4e:	602a      	str	r2, [r5, #0]
 8004d50:	681d      	ldr	r5, [r3, #0]
 8004d52:	6862      	ldr	r2, [r4, #4]
 8004d54:	4628      	mov	r0, r5
 8004d56:	f000 fed5 	bl	8005b04 <memchr>
 8004d5a:	b108      	cbz	r0, 8004d60 <_printf_i+0x1f4>
 8004d5c:	1b40      	subs	r0, r0, r5
 8004d5e:	6060      	str	r0, [r4, #4]
 8004d60:	6863      	ldr	r3, [r4, #4]
 8004d62:	6123      	str	r3, [r4, #16]
 8004d64:	2300      	movs	r3, #0
 8004d66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d6a:	e7a8      	b.n	8004cbe <_printf_i+0x152>
 8004d6c:	462a      	mov	r2, r5
 8004d6e:	4649      	mov	r1, r9
 8004d70:	4640      	mov	r0, r8
 8004d72:	6923      	ldr	r3, [r4, #16]
 8004d74:	47d0      	blx	sl
 8004d76:	3001      	adds	r0, #1
 8004d78:	d0ab      	beq.n	8004cd2 <_printf_i+0x166>
 8004d7a:	6823      	ldr	r3, [r4, #0]
 8004d7c:	079b      	lsls	r3, r3, #30
 8004d7e:	d413      	bmi.n	8004da8 <_printf_i+0x23c>
 8004d80:	68e0      	ldr	r0, [r4, #12]
 8004d82:	9b03      	ldr	r3, [sp, #12]
 8004d84:	4298      	cmp	r0, r3
 8004d86:	bfb8      	it	lt
 8004d88:	4618      	movlt	r0, r3
 8004d8a:	e7a4      	b.n	8004cd6 <_printf_i+0x16a>
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	4632      	mov	r2, r6
 8004d90:	4649      	mov	r1, r9
 8004d92:	4640      	mov	r0, r8
 8004d94:	47d0      	blx	sl
 8004d96:	3001      	adds	r0, #1
 8004d98:	d09b      	beq.n	8004cd2 <_printf_i+0x166>
 8004d9a:	3501      	adds	r5, #1
 8004d9c:	68e3      	ldr	r3, [r4, #12]
 8004d9e:	9903      	ldr	r1, [sp, #12]
 8004da0:	1a5b      	subs	r3, r3, r1
 8004da2:	42ab      	cmp	r3, r5
 8004da4:	dcf2      	bgt.n	8004d8c <_printf_i+0x220>
 8004da6:	e7eb      	b.n	8004d80 <_printf_i+0x214>
 8004da8:	2500      	movs	r5, #0
 8004daa:	f104 0619 	add.w	r6, r4, #25
 8004dae:	e7f5      	b.n	8004d9c <_printf_i+0x230>
 8004db0:	0800831e 	.word	0x0800831e
 8004db4:	0800832f 	.word	0x0800832f

08004db8 <siprintf>:
 8004db8:	b40e      	push	{r1, r2, r3}
 8004dba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004dbe:	b500      	push	{lr}
 8004dc0:	b09c      	sub	sp, #112	; 0x70
 8004dc2:	ab1d      	add	r3, sp, #116	; 0x74
 8004dc4:	9002      	str	r0, [sp, #8]
 8004dc6:	9006      	str	r0, [sp, #24]
 8004dc8:	9107      	str	r1, [sp, #28]
 8004dca:	9104      	str	r1, [sp, #16]
 8004dcc:	4808      	ldr	r0, [pc, #32]	; (8004df0 <siprintf+0x38>)
 8004dce:	4909      	ldr	r1, [pc, #36]	; (8004df4 <siprintf+0x3c>)
 8004dd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dd4:	9105      	str	r1, [sp, #20]
 8004dd6:	6800      	ldr	r0, [r0, #0]
 8004dd8:	a902      	add	r1, sp, #8
 8004dda:	9301      	str	r3, [sp, #4]
 8004ddc:	f001 fb7c 	bl	80064d8 <_svfiprintf_r>
 8004de0:	2200      	movs	r2, #0
 8004de2:	9b02      	ldr	r3, [sp, #8]
 8004de4:	701a      	strb	r2, [r3, #0]
 8004de6:	b01c      	add	sp, #112	; 0x70
 8004de8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004dec:	b003      	add	sp, #12
 8004dee:	4770      	bx	lr
 8004df0:	20000010 	.word	0x20000010
 8004df4:	ffff0208 	.word	0xffff0208

08004df8 <quorem>:
 8004df8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dfc:	6903      	ldr	r3, [r0, #16]
 8004dfe:	690c      	ldr	r4, [r1, #16]
 8004e00:	4607      	mov	r7, r0
 8004e02:	42a3      	cmp	r3, r4
 8004e04:	f2c0 8082 	blt.w	8004f0c <quorem+0x114>
 8004e08:	3c01      	subs	r4, #1
 8004e0a:	f100 0514 	add.w	r5, r0, #20
 8004e0e:	f101 0814 	add.w	r8, r1, #20
 8004e12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e16:	9301      	str	r3, [sp, #4]
 8004e18:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004e1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e20:	3301      	adds	r3, #1
 8004e22:	429a      	cmp	r2, r3
 8004e24:	fbb2 f6f3 	udiv	r6, r2, r3
 8004e28:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004e2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004e30:	d331      	bcc.n	8004e96 <quorem+0x9e>
 8004e32:	f04f 0e00 	mov.w	lr, #0
 8004e36:	4640      	mov	r0, r8
 8004e38:	46ac      	mov	ip, r5
 8004e3a:	46f2      	mov	sl, lr
 8004e3c:	f850 2b04 	ldr.w	r2, [r0], #4
 8004e40:	b293      	uxth	r3, r2
 8004e42:	fb06 e303 	mla	r3, r6, r3, lr
 8004e46:	0c12      	lsrs	r2, r2, #16
 8004e48:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	fb06 e202 	mla	r2, r6, r2, lr
 8004e52:	ebaa 0303 	sub.w	r3, sl, r3
 8004e56:	f8dc a000 	ldr.w	sl, [ip]
 8004e5a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004e5e:	fa1f fa8a 	uxth.w	sl, sl
 8004e62:	4453      	add	r3, sl
 8004e64:	f8dc a000 	ldr.w	sl, [ip]
 8004e68:	b292      	uxth	r2, r2
 8004e6a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004e6e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e78:	4581      	cmp	r9, r0
 8004e7a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004e7e:	f84c 3b04 	str.w	r3, [ip], #4
 8004e82:	d2db      	bcs.n	8004e3c <quorem+0x44>
 8004e84:	f855 300b 	ldr.w	r3, [r5, fp]
 8004e88:	b92b      	cbnz	r3, 8004e96 <quorem+0x9e>
 8004e8a:	9b01      	ldr	r3, [sp, #4]
 8004e8c:	3b04      	subs	r3, #4
 8004e8e:	429d      	cmp	r5, r3
 8004e90:	461a      	mov	r2, r3
 8004e92:	d32f      	bcc.n	8004ef4 <quorem+0xfc>
 8004e94:	613c      	str	r4, [r7, #16]
 8004e96:	4638      	mov	r0, r7
 8004e98:	f001 f8ce 	bl	8006038 <__mcmp>
 8004e9c:	2800      	cmp	r0, #0
 8004e9e:	db25      	blt.n	8004eec <quorem+0xf4>
 8004ea0:	4628      	mov	r0, r5
 8004ea2:	f04f 0c00 	mov.w	ip, #0
 8004ea6:	3601      	adds	r6, #1
 8004ea8:	f858 1b04 	ldr.w	r1, [r8], #4
 8004eac:	f8d0 e000 	ldr.w	lr, [r0]
 8004eb0:	b28b      	uxth	r3, r1
 8004eb2:	ebac 0303 	sub.w	r3, ip, r3
 8004eb6:	fa1f f28e 	uxth.w	r2, lr
 8004eba:	4413      	add	r3, r2
 8004ebc:	0c0a      	lsrs	r2, r1, #16
 8004ebe:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004ec2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ecc:	45c1      	cmp	r9, r8
 8004ece:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004ed2:	f840 3b04 	str.w	r3, [r0], #4
 8004ed6:	d2e7      	bcs.n	8004ea8 <quorem+0xb0>
 8004ed8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004edc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ee0:	b922      	cbnz	r2, 8004eec <quorem+0xf4>
 8004ee2:	3b04      	subs	r3, #4
 8004ee4:	429d      	cmp	r5, r3
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	d30a      	bcc.n	8004f00 <quorem+0x108>
 8004eea:	613c      	str	r4, [r7, #16]
 8004eec:	4630      	mov	r0, r6
 8004eee:	b003      	add	sp, #12
 8004ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ef4:	6812      	ldr	r2, [r2, #0]
 8004ef6:	3b04      	subs	r3, #4
 8004ef8:	2a00      	cmp	r2, #0
 8004efa:	d1cb      	bne.n	8004e94 <quorem+0x9c>
 8004efc:	3c01      	subs	r4, #1
 8004efe:	e7c6      	b.n	8004e8e <quorem+0x96>
 8004f00:	6812      	ldr	r2, [r2, #0]
 8004f02:	3b04      	subs	r3, #4
 8004f04:	2a00      	cmp	r2, #0
 8004f06:	d1f0      	bne.n	8004eea <quorem+0xf2>
 8004f08:	3c01      	subs	r4, #1
 8004f0a:	e7eb      	b.n	8004ee4 <quorem+0xec>
 8004f0c:	2000      	movs	r0, #0
 8004f0e:	e7ee      	b.n	8004eee <quorem+0xf6>

08004f10 <_dtoa_r>:
 8004f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f14:	4616      	mov	r6, r2
 8004f16:	461f      	mov	r7, r3
 8004f18:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004f1a:	b099      	sub	sp, #100	; 0x64
 8004f1c:	4605      	mov	r5, r0
 8004f1e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004f22:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004f26:	b974      	cbnz	r4, 8004f46 <_dtoa_r+0x36>
 8004f28:	2010      	movs	r0, #16
 8004f2a:	f000 fde3 	bl	8005af4 <malloc>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	6268      	str	r0, [r5, #36]	; 0x24
 8004f32:	b920      	cbnz	r0, 8004f3e <_dtoa_r+0x2e>
 8004f34:	21ea      	movs	r1, #234	; 0xea
 8004f36:	4ba8      	ldr	r3, [pc, #672]	; (80051d8 <_dtoa_r+0x2c8>)
 8004f38:	48a8      	ldr	r0, [pc, #672]	; (80051dc <_dtoa_r+0x2cc>)
 8004f3a:	f001 fbdd 	bl	80066f8 <__assert_func>
 8004f3e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004f42:	6004      	str	r4, [r0, #0]
 8004f44:	60c4      	str	r4, [r0, #12]
 8004f46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004f48:	6819      	ldr	r1, [r3, #0]
 8004f4a:	b151      	cbz	r1, 8004f62 <_dtoa_r+0x52>
 8004f4c:	685a      	ldr	r2, [r3, #4]
 8004f4e:	2301      	movs	r3, #1
 8004f50:	4093      	lsls	r3, r2
 8004f52:	604a      	str	r2, [r1, #4]
 8004f54:	608b      	str	r3, [r1, #8]
 8004f56:	4628      	mov	r0, r5
 8004f58:	f000 fe30 	bl	8005bbc <_Bfree>
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004f60:	601a      	str	r2, [r3, #0]
 8004f62:	1e3b      	subs	r3, r7, #0
 8004f64:	bfaf      	iteee	ge
 8004f66:	2300      	movge	r3, #0
 8004f68:	2201      	movlt	r2, #1
 8004f6a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004f6e:	9305      	strlt	r3, [sp, #20]
 8004f70:	bfa8      	it	ge
 8004f72:	f8c8 3000 	strge.w	r3, [r8]
 8004f76:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004f7a:	4b99      	ldr	r3, [pc, #612]	; (80051e0 <_dtoa_r+0x2d0>)
 8004f7c:	bfb8      	it	lt
 8004f7e:	f8c8 2000 	strlt.w	r2, [r8]
 8004f82:	ea33 0309 	bics.w	r3, r3, r9
 8004f86:	d119      	bne.n	8004fbc <_dtoa_r+0xac>
 8004f88:	f242 730f 	movw	r3, #9999	; 0x270f
 8004f8c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004f8e:	6013      	str	r3, [r2, #0]
 8004f90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004f94:	4333      	orrs	r3, r6
 8004f96:	f000 857f 	beq.w	8005a98 <_dtoa_r+0xb88>
 8004f9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004f9c:	b953      	cbnz	r3, 8004fb4 <_dtoa_r+0xa4>
 8004f9e:	4b91      	ldr	r3, [pc, #580]	; (80051e4 <_dtoa_r+0x2d4>)
 8004fa0:	e022      	b.n	8004fe8 <_dtoa_r+0xd8>
 8004fa2:	4b91      	ldr	r3, [pc, #580]	; (80051e8 <_dtoa_r+0x2d8>)
 8004fa4:	9303      	str	r3, [sp, #12]
 8004fa6:	3308      	adds	r3, #8
 8004fa8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004faa:	6013      	str	r3, [r2, #0]
 8004fac:	9803      	ldr	r0, [sp, #12]
 8004fae:	b019      	add	sp, #100	; 0x64
 8004fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fb4:	4b8b      	ldr	r3, [pc, #556]	; (80051e4 <_dtoa_r+0x2d4>)
 8004fb6:	9303      	str	r3, [sp, #12]
 8004fb8:	3303      	adds	r3, #3
 8004fba:	e7f5      	b.n	8004fa8 <_dtoa_r+0x98>
 8004fbc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004fc0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004fc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004fc8:	2200      	movs	r2, #0
 8004fca:	2300      	movs	r3, #0
 8004fcc:	f7fb fcec 	bl	80009a8 <__aeabi_dcmpeq>
 8004fd0:	4680      	mov	r8, r0
 8004fd2:	b158      	cbz	r0, 8004fec <_dtoa_r+0xdc>
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004fd8:	6013      	str	r3, [r2, #0]
 8004fda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 8558 	beq.w	8005a92 <_dtoa_r+0xb82>
 8004fe2:	4882      	ldr	r0, [pc, #520]	; (80051ec <_dtoa_r+0x2dc>)
 8004fe4:	6018      	str	r0, [r3, #0]
 8004fe6:	1e43      	subs	r3, r0, #1
 8004fe8:	9303      	str	r3, [sp, #12]
 8004fea:	e7df      	b.n	8004fac <_dtoa_r+0x9c>
 8004fec:	ab16      	add	r3, sp, #88	; 0x58
 8004fee:	9301      	str	r3, [sp, #4]
 8004ff0:	ab17      	add	r3, sp, #92	; 0x5c
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	4628      	mov	r0, r5
 8004ff6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004ffa:	f001 f8c5 	bl	8006188 <__d2b>
 8004ffe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005002:	4683      	mov	fp, r0
 8005004:	2c00      	cmp	r4, #0
 8005006:	d07f      	beq.n	8005108 <_dtoa_r+0x1f8>
 8005008:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800500c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800500e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005012:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005016:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800501a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800501e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005022:	2200      	movs	r2, #0
 8005024:	4b72      	ldr	r3, [pc, #456]	; (80051f0 <_dtoa_r+0x2e0>)
 8005026:	f7fb f89f 	bl	8000168 <__aeabi_dsub>
 800502a:	a365      	add	r3, pc, #404	; (adr r3, 80051c0 <_dtoa_r+0x2b0>)
 800502c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005030:	f7fb fa52 	bl	80004d8 <__aeabi_dmul>
 8005034:	a364      	add	r3, pc, #400	; (adr r3, 80051c8 <_dtoa_r+0x2b8>)
 8005036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503a:	f7fb f897 	bl	800016c <__adddf3>
 800503e:	4606      	mov	r6, r0
 8005040:	4620      	mov	r0, r4
 8005042:	460f      	mov	r7, r1
 8005044:	f7fb f9de 	bl	8000404 <__aeabi_i2d>
 8005048:	a361      	add	r3, pc, #388	; (adr r3, 80051d0 <_dtoa_r+0x2c0>)
 800504a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504e:	f7fb fa43 	bl	80004d8 <__aeabi_dmul>
 8005052:	4602      	mov	r2, r0
 8005054:	460b      	mov	r3, r1
 8005056:	4630      	mov	r0, r6
 8005058:	4639      	mov	r1, r7
 800505a:	f7fb f887 	bl	800016c <__adddf3>
 800505e:	4606      	mov	r6, r0
 8005060:	460f      	mov	r7, r1
 8005062:	f7fb fce9 	bl	8000a38 <__aeabi_d2iz>
 8005066:	2200      	movs	r2, #0
 8005068:	4682      	mov	sl, r0
 800506a:	2300      	movs	r3, #0
 800506c:	4630      	mov	r0, r6
 800506e:	4639      	mov	r1, r7
 8005070:	f7fb fca4 	bl	80009bc <__aeabi_dcmplt>
 8005074:	b148      	cbz	r0, 800508a <_dtoa_r+0x17a>
 8005076:	4650      	mov	r0, sl
 8005078:	f7fb f9c4 	bl	8000404 <__aeabi_i2d>
 800507c:	4632      	mov	r2, r6
 800507e:	463b      	mov	r3, r7
 8005080:	f7fb fc92 	bl	80009a8 <__aeabi_dcmpeq>
 8005084:	b908      	cbnz	r0, 800508a <_dtoa_r+0x17a>
 8005086:	f10a 3aff 	add.w	sl, sl, #4294967295
 800508a:	f1ba 0f16 	cmp.w	sl, #22
 800508e:	d858      	bhi.n	8005142 <_dtoa_r+0x232>
 8005090:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005094:	4b57      	ldr	r3, [pc, #348]	; (80051f4 <_dtoa_r+0x2e4>)
 8005096:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800509a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509e:	f7fb fc8d 	bl	80009bc <__aeabi_dcmplt>
 80050a2:	2800      	cmp	r0, #0
 80050a4:	d04f      	beq.n	8005146 <_dtoa_r+0x236>
 80050a6:	2300      	movs	r3, #0
 80050a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80050ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80050ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80050b0:	1b1c      	subs	r4, r3, r4
 80050b2:	1e63      	subs	r3, r4, #1
 80050b4:	9309      	str	r3, [sp, #36]	; 0x24
 80050b6:	bf49      	itett	mi
 80050b8:	f1c4 0301 	rsbmi	r3, r4, #1
 80050bc:	2300      	movpl	r3, #0
 80050be:	9306      	strmi	r3, [sp, #24]
 80050c0:	2300      	movmi	r3, #0
 80050c2:	bf54      	ite	pl
 80050c4:	9306      	strpl	r3, [sp, #24]
 80050c6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80050c8:	f1ba 0f00 	cmp.w	sl, #0
 80050cc:	db3d      	blt.n	800514a <_dtoa_r+0x23a>
 80050ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050d0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80050d4:	4453      	add	r3, sl
 80050d6:	9309      	str	r3, [sp, #36]	; 0x24
 80050d8:	2300      	movs	r3, #0
 80050da:	930a      	str	r3, [sp, #40]	; 0x28
 80050dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80050de:	2b09      	cmp	r3, #9
 80050e0:	f200 808c 	bhi.w	80051fc <_dtoa_r+0x2ec>
 80050e4:	2b05      	cmp	r3, #5
 80050e6:	bfc4      	itt	gt
 80050e8:	3b04      	subgt	r3, #4
 80050ea:	9322      	strgt	r3, [sp, #136]	; 0x88
 80050ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80050ee:	bfc8      	it	gt
 80050f0:	2400      	movgt	r4, #0
 80050f2:	f1a3 0302 	sub.w	r3, r3, #2
 80050f6:	bfd8      	it	le
 80050f8:	2401      	movle	r4, #1
 80050fa:	2b03      	cmp	r3, #3
 80050fc:	f200 808a 	bhi.w	8005214 <_dtoa_r+0x304>
 8005100:	e8df f003 	tbb	[pc, r3]
 8005104:	5b4d4f2d 	.word	0x5b4d4f2d
 8005108:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800510c:	441c      	add	r4, r3
 800510e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005112:	2b20      	cmp	r3, #32
 8005114:	bfc3      	ittte	gt
 8005116:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800511a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800511e:	fa09 f303 	lslgt.w	r3, r9, r3
 8005122:	f1c3 0320 	rsble	r3, r3, #32
 8005126:	bfc6      	itte	gt
 8005128:	fa26 f000 	lsrgt.w	r0, r6, r0
 800512c:	4318      	orrgt	r0, r3
 800512e:	fa06 f003 	lslle.w	r0, r6, r3
 8005132:	f7fb f957 	bl	80003e4 <__aeabi_ui2d>
 8005136:	2301      	movs	r3, #1
 8005138:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800513c:	3c01      	subs	r4, #1
 800513e:	9313      	str	r3, [sp, #76]	; 0x4c
 8005140:	e76f      	b.n	8005022 <_dtoa_r+0x112>
 8005142:	2301      	movs	r3, #1
 8005144:	e7b2      	b.n	80050ac <_dtoa_r+0x19c>
 8005146:	900f      	str	r0, [sp, #60]	; 0x3c
 8005148:	e7b1      	b.n	80050ae <_dtoa_r+0x19e>
 800514a:	9b06      	ldr	r3, [sp, #24]
 800514c:	eba3 030a 	sub.w	r3, r3, sl
 8005150:	9306      	str	r3, [sp, #24]
 8005152:	f1ca 0300 	rsb	r3, sl, #0
 8005156:	930a      	str	r3, [sp, #40]	; 0x28
 8005158:	2300      	movs	r3, #0
 800515a:	930e      	str	r3, [sp, #56]	; 0x38
 800515c:	e7be      	b.n	80050dc <_dtoa_r+0x1cc>
 800515e:	2300      	movs	r3, #0
 8005160:	930b      	str	r3, [sp, #44]	; 0x2c
 8005162:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005164:	2b00      	cmp	r3, #0
 8005166:	dc58      	bgt.n	800521a <_dtoa_r+0x30a>
 8005168:	f04f 0901 	mov.w	r9, #1
 800516c:	464b      	mov	r3, r9
 800516e:	f8cd 9020 	str.w	r9, [sp, #32]
 8005172:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8005176:	2200      	movs	r2, #0
 8005178:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800517a:	6042      	str	r2, [r0, #4]
 800517c:	2204      	movs	r2, #4
 800517e:	f102 0614 	add.w	r6, r2, #20
 8005182:	429e      	cmp	r6, r3
 8005184:	6841      	ldr	r1, [r0, #4]
 8005186:	d94e      	bls.n	8005226 <_dtoa_r+0x316>
 8005188:	4628      	mov	r0, r5
 800518a:	f000 fcd7 	bl	8005b3c <_Balloc>
 800518e:	9003      	str	r0, [sp, #12]
 8005190:	2800      	cmp	r0, #0
 8005192:	d14c      	bne.n	800522e <_dtoa_r+0x31e>
 8005194:	4602      	mov	r2, r0
 8005196:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800519a:	4b17      	ldr	r3, [pc, #92]	; (80051f8 <_dtoa_r+0x2e8>)
 800519c:	e6cc      	b.n	8004f38 <_dtoa_r+0x28>
 800519e:	2301      	movs	r3, #1
 80051a0:	e7de      	b.n	8005160 <_dtoa_r+0x250>
 80051a2:	2300      	movs	r3, #0
 80051a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80051a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80051a8:	eb0a 0903 	add.w	r9, sl, r3
 80051ac:	f109 0301 	add.w	r3, r9, #1
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	9308      	str	r3, [sp, #32]
 80051b4:	bfb8      	it	lt
 80051b6:	2301      	movlt	r3, #1
 80051b8:	e7dd      	b.n	8005176 <_dtoa_r+0x266>
 80051ba:	2301      	movs	r3, #1
 80051bc:	e7f2      	b.n	80051a4 <_dtoa_r+0x294>
 80051be:	bf00      	nop
 80051c0:	636f4361 	.word	0x636f4361
 80051c4:	3fd287a7 	.word	0x3fd287a7
 80051c8:	8b60c8b3 	.word	0x8b60c8b3
 80051cc:	3fc68a28 	.word	0x3fc68a28
 80051d0:	509f79fb 	.word	0x509f79fb
 80051d4:	3fd34413 	.word	0x3fd34413
 80051d8:	0800834d 	.word	0x0800834d
 80051dc:	08008364 	.word	0x08008364
 80051e0:	7ff00000 	.word	0x7ff00000
 80051e4:	08008349 	.word	0x08008349
 80051e8:	08008340 	.word	0x08008340
 80051ec:	0800831d 	.word	0x0800831d
 80051f0:	3ff80000 	.word	0x3ff80000
 80051f4:	08008458 	.word	0x08008458
 80051f8:	080083bf 	.word	0x080083bf
 80051fc:	2401      	movs	r4, #1
 80051fe:	2300      	movs	r3, #0
 8005200:	940b      	str	r4, [sp, #44]	; 0x2c
 8005202:	9322      	str	r3, [sp, #136]	; 0x88
 8005204:	f04f 39ff 	mov.w	r9, #4294967295
 8005208:	2200      	movs	r2, #0
 800520a:	2312      	movs	r3, #18
 800520c:	f8cd 9020 	str.w	r9, [sp, #32]
 8005210:	9223      	str	r2, [sp, #140]	; 0x8c
 8005212:	e7b0      	b.n	8005176 <_dtoa_r+0x266>
 8005214:	2301      	movs	r3, #1
 8005216:	930b      	str	r3, [sp, #44]	; 0x2c
 8005218:	e7f4      	b.n	8005204 <_dtoa_r+0x2f4>
 800521a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800521e:	464b      	mov	r3, r9
 8005220:	f8cd 9020 	str.w	r9, [sp, #32]
 8005224:	e7a7      	b.n	8005176 <_dtoa_r+0x266>
 8005226:	3101      	adds	r1, #1
 8005228:	6041      	str	r1, [r0, #4]
 800522a:	0052      	lsls	r2, r2, #1
 800522c:	e7a7      	b.n	800517e <_dtoa_r+0x26e>
 800522e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005230:	9a03      	ldr	r2, [sp, #12]
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	9b08      	ldr	r3, [sp, #32]
 8005236:	2b0e      	cmp	r3, #14
 8005238:	f200 80a8 	bhi.w	800538c <_dtoa_r+0x47c>
 800523c:	2c00      	cmp	r4, #0
 800523e:	f000 80a5 	beq.w	800538c <_dtoa_r+0x47c>
 8005242:	f1ba 0f00 	cmp.w	sl, #0
 8005246:	dd34      	ble.n	80052b2 <_dtoa_r+0x3a2>
 8005248:	4a9a      	ldr	r2, [pc, #616]	; (80054b4 <_dtoa_r+0x5a4>)
 800524a:	f00a 030f 	and.w	r3, sl, #15
 800524e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005252:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005256:	e9d3 3400 	ldrd	r3, r4, [r3]
 800525a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800525e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8005262:	d016      	beq.n	8005292 <_dtoa_r+0x382>
 8005264:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005268:	4b93      	ldr	r3, [pc, #588]	; (80054b8 <_dtoa_r+0x5a8>)
 800526a:	2703      	movs	r7, #3
 800526c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005270:	f7fb fa5c 	bl	800072c <__aeabi_ddiv>
 8005274:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005278:	f004 040f 	and.w	r4, r4, #15
 800527c:	4e8e      	ldr	r6, [pc, #568]	; (80054b8 <_dtoa_r+0x5a8>)
 800527e:	b954      	cbnz	r4, 8005296 <_dtoa_r+0x386>
 8005280:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005284:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005288:	f7fb fa50 	bl	800072c <__aeabi_ddiv>
 800528c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005290:	e029      	b.n	80052e6 <_dtoa_r+0x3d6>
 8005292:	2702      	movs	r7, #2
 8005294:	e7f2      	b.n	800527c <_dtoa_r+0x36c>
 8005296:	07e1      	lsls	r1, r4, #31
 8005298:	d508      	bpl.n	80052ac <_dtoa_r+0x39c>
 800529a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800529e:	e9d6 2300 	ldrd	r2, r3, [r6]
 80052a2:	f7fb f919 	bl	80004d8 <__aeabi_dmul>
 80052a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80052aa:	3701      	adds	r7, #1
 80052ac:	1064      	asrs	r4, r4, #1
 80052ae:	3608      	adds	r6, #8
 80052b0:	e7e5      	b.n	800527e <_dtoa_r+0x36e>
 80052b2:	f000 80a5 	beq.w	8005400 <_dtoa_r+0x4f0>
 80052b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80052ba:	f1ca 0400 	rsb	r4, sl, #0
 80052be:	4b7d      	ldr	r3, [pc, #500]	; (80054b4 <_dtoa_r+0x5a4>)
 80052c0:	f004 020f 	and.w	r2, r4, #15
 80052c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052cc:	f7fb f904 	bl	80004d8 <__aeabi_dmul>
 80052d0:	2702      	movs	r7, #2
 80052d2:	2300      	movs	r3, #0
 80052d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052d8:	4e77      	ldr	r6, [pc, #476]	; (80054b8 <_dtoa_r+0x5a8>)
 80052da:	1124      	asrs	r4, r4, #4
 80052dc:	2c00      	cmp	r4, #0
 80052de:	f040 8084 	bne.w	80053ea <_dtoa_r+0x4da>
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1d2      	bne.n	800528c <_dtoa_r+0x37c>
 80052e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	f000 808b 	beq.w	8005404 <_dtoa_r+0x4f4>
 80052ee:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80052f2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80052f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80052fa:	2200      	movs	r2, #0
 80052fc:	4b6f      	ldr	r3, [pc, #444]	; (80054bc <_dtoa_r+0x5ac>)
 80052fe:	f7fb fb5d 	bl	80009bc <__aeabi_dcmplt>
 8005302:	2800      	cmp	r0, #0
 8005304:	d07e      	beq.n	8005404 <_dtoa_r+0x4f4>
 8005306:	9b08      	ldr	r3, [sp, #32]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d07b      	beq.n	8005404 <_dtoa_r+0x4f4>
 800530c:	f1b9 0f00 	cmp.w	r9, #0
 8005310:	dd38      	ble.n	8005384 <_dtoa_r+0x474>
 8005312:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005316:	2200      	movs	r2, #0
 8005318:	4b69      	ldr	r3, [pc, #420]	; (80054c0 <_dtoa_r+0x5b0>)
 800531a:	f7fb f8dd 	bl	80004d8 <__aeabi_dmul>
 800531e:	464c      	mov	r4, r9
 8005320:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005324:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005328:	3701      	adds	r7, #1
 800532a:	4638      	mov	r0, r7
 800532c:	f7fb f86a 	bl	8000404 <__aeabi_i2d>
 8005330:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005334:	f7fb f8d0 	bl	80004d8 <__aeabi_dmul>
 8005338:	2200      	movs	r2, #0
 800533a:	4b62      	ldr	r3, [pc, #392]	; (80054c4 <_dtoa_r+0x5b4>)
 800533c:	f7fa ff16 	bl	800016c <__adddf3>
 8005340:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005344:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005348:	9611      	str	r6, [sp, #68]	; 0x44
 800534a:	2c00      	cmp	r4, #0
 800534c:	d15d      	bne.n	800540a <_dtoa_r+0x4fa>
 800534e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005352:	2200      	movs	r2, #0
 8005354:	4b5c      	ldr	r3, [pc, #368]	; (80054c8 <_dtoa_r+0x5b8>)
 8005356:	f7fa ff07 	bl	8000168 <__aeabi_dsub>
 800535a:	4602      	mov	r2, r0
 800535c:	460b      	mov	r3, r1
 800535e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005362:	4633      	mov	r3, r6
 8005364:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005366:	f7fb fb47 	bl	80009f8 <__aeabi_dcmpgt>
 800536a:	2800      	cmp	r0, #0
 800536c:	f040 829c 	bne.w	80058a8 <_dtoa_r+0x998>
 8005370:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005374:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005376:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800537a:	f7fb fb1f 	bl	80009bc <__aeabi_dcmplt>
 800537e:	2800      	cmp	r0, #0
 8005380:	f040 8290 	bne.w	80058a4 <_dtoa_r+0x994>
 8005384:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005388:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800538c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800538e:	2b00      	cmp	r3, #0
 8005390:	f2c0 8152 	blt.w	8005638 <_dtoa_r+0x728>
 8005394:	f1ba 0f0e 	cmp.w	sl, #14
 8005398:	f300 814e 	bgt.w	8005638 <_dtoa_r+0x728>
 800539c:	4b45      	ldr	r3, [pc, #276]	; (80054b4 <_dtoa_r+0x5a4>)
 800539e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80053a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80053a6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80053aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f280 80db 	bge.w	8005568 <_dtoa_r+0x658>
 80053b2:	9b08      	ldr	r3, [sp, #32]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f300 80d7 	bgt.w	8005568 <_dtoa_r+0x658>
 80053ba:	f040 8272 	bne.w	80058a2 <_dtoa_r+0x992>
 80053be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053c2:	2200      	movs	r2, #0
 80053c4:	4b40      	ldr	r3, [pc, #256]	; (80054c8 <_dtoa_r+0x5b8>)
 80053c6:	f7fb f887 	bl	80004d8 <__aeabi_dmul>
 80053ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053ce:	f7fb fb09 	bl	80009e4 <__aeabi_dcmpge>
 80053d2:	9c08      	ldr	r4, [sp, #32]
 80053d4:	4626      	mov	r6, r4
 80053d6:	2800      	cmp	r0, #0
 80053d8:	f040 8248 	bne.w	800586c <_dtoa_r+0x95c>
 80053dc:	2331      	movs	r3, #49	; 0x31
 80053de:	9f03      	ldr	r7, [sp, #12]
 80053e0:	f10a 0a01 	add.w	sl, sl, #1
 80053e4:	f807 3b01 	strb.w	r3, [r7], #1
 80053e8:	e244      	b.n	8005874 <_dtoa_r+0x964>
 80053ea:	07e2      	lsls	r2, r4, #31
 80053ec:	d505      	bpl.n	80053fa <_dtoa_r+0x4ea>
 80053ee:	e9d6 2300 	ldrd	r2, r3, [r6]
 80053f2:	f7fb f871 	bl	80004d8 <__aeabi_dmul>
 80053f6:	2301      	movs	r3, #1
 80053f8:	3701      	adds	r7, #1
 80053fa:	1064      	asrs	r4, r4, #1
 80053fc:	3608      	adds	r6, #8
 80053fe:	e76d      	b.n	80052dc <_dtoa_r+0x3cc>
 8005400:	2702      	movs	r7, #2
 8005402:	e770      	b.n	80052e6 <_dtoa_r+0x3d6>
 8005404:	46d0      	mov	r8, sl
 8005406:	9c08      	ldr	r4, [sp, #32]
 8005408:	e78f      	b.n	800532a <_dtoa_r+0x41a>
 800540a:	9903      	ldr	r1, [sp, #12]
 800540c:	4b29      	ldr	r3, [pc, #164]	; (80054b4 <_dtoa_r+0x5a4>)
 800540e:	4421      	add	r1, r4
 8005410:	9112      	str	r1, [sp, #72]	; 0x48
 8005412:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005414:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005418:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800541c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005420:	2900      	cmp	r1, #0
 8005422:	d055      	beq.n	80054d0 <_dtoa_r+0x5c0>
 8005424:	2000      	movs	r0, #0
 8005426:	4929      	ldr	r1, [pc, #164]	; (80054cc <_dtoa_r+0x5bc>)
 8005428:	f7fb f980 	bl	800072c <__aeabi_ddiv>
 800542c:	463b      	mov	r3, r7
 800542e:	4632      	mov	r2, r6
 8005430:	f7fa fe9a 	bl	8000168 <__aeabi_dsub>
 8005434:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005438:	9f03      	ldr	r7, [sp, #12]
 800543a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800543e:	f7fb fafb 	bl	8000a38 <__aeabi_d2iz>
 8005442:	4604      	mov	r4, r0
 8005444:	f7fa ffde 	bl	8000404 <__aeabi_i2d>
 8005448:	4602      	mov	r2, r0
 800544a:	460b      	mov	r3, r1
 800544c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005450:	f7fa fe8a 	bl	8000168 <__aeabi_dsub>
 8005454:	4602      	mov	r2, r0
 8005456:	460b      	mov	r3, r1
 8005458:	3430      	adds	r4, #48	; 0x30
 800545a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800545e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005462:	f807 4b01 	strb.w	r4, [r7], #1
 8005466:	f7fb faa9 	bl	80009bc <__aeabi_dcmplt>
 800546a:	2800      	cmp	r0, #0
 800546c:	d174      	bne.n	8005558 <_dtoa_r+0x648>
 800546e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005472:	2000      	movs	r0, #0
 8005474:	4911      	ldr	r1, [pc, #68]	; (80054bc <_dtoa_r+0x5ac>)
 8005476:	f7fa fe77 	bl	8000168 <__aeabi_dsub>
 800547a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800547e:	f7fb fa9d 	bl	80009bc <__aeabi_dcmplt>
 8005482:	2800      	cmp	r0, #0
 8005484:	f040 80b7 	bne.w	80055f6 <_dtoa_r+0x6e6>
 8005488:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800548a:	429f      	cmp	r7, r3
 800548c:	f43f af7a 	beq.w	8005384 <_dtoa_r+0x474>
 8005490:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005494:	2200      	movs	r2, #0
 8005496:	4b0a      	ldr	r3, [pc, #40]	; (80054c0 <_dtoa_r+0x5b0>)
 8005498:	f7fb f81e 	bl	80004d8 <__aeabi_dmul>
 800549c:	2200      	movs	r2, #0
 800549e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80054a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054a6:	4b06      	ldr	r3, [pc, #24]	; (80054c0 <_dtoa_r+0x5b0>)
 80054a8:	f7fb f816 	bl	80004d8 <__aeabi_dmul>
 80054ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054b0:	e7c3      	b.n	800543a <_dtoa_r+0x52a>
 80054b2:	bf00      	nop
 80054b4:	08008458 	.word	0x08008458
 80054b8:	08008430 	.word	0x08008430
 80054bc:	3ff00000 	.word	0x3ff00000
 80054c0:	40240000 	.word	0x40240000
 80054c4:	401c0000 	.word	0x401c0000
 80054c8:	40140000 	.word	0x40140000
 80054cc:	3fe00000 	.word	0x3fe00000
 80054d0:	4630      	mov	r0, r6
 80054d2:	4639      	mov	r1, r7
 80054d4:	f7fb f800 	bl	80004d8 <__aeabi_dmul>
 80054d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80054da:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80054de:	9c03      	ldr	r4, [sp, #12]
 80054e0:	9314      	str	r3, [sp, #80]	; 0x50
 80054e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054e6:	f7fb faa7 	bl	8000a38 <__aeabi_d2iz>
 80054ea:	9015      	str	r0, [sp, #84]	; 0x54
 80054ec:	f7fa ff8a 	bl	8000404 <__aeabi_i2d>
 80054f0:	4602      	mov	r2, r0
 80054f2:	460b      	mov	r3, r1
 80054f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054f8:	f7fa fe36 	bl	8000168 <__aeabi_dsub>
 80054fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80054fe:	4606      	mov	r6, r0
 8005500:	3330      	adds	r3, #48	; 0x30
 8005502:	f804 3b01 	strb.w	r3, [r4], #1
 8005506:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005508:	460f      	mov	r7, r1
 800550a:	429c      	cmp	r4, r3
 800550c:	f04f 0200 	mov.w	r2, #0
 8005510:	d124      	bne.n	800555c <_dtoa_r+0x64c>
 8005512:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005516:	4bb0      	ldr	r3, [pc, #704]	; (80057d8 <_dtoa_r+0x8c8>)
 8005518:	f7fa fe28 	bl	800016c <__adddf3>
 800551c:	4602      	mov	r2, r0
 800551e:	460b      	mov	r3, r1
 8005520:	4630      	mov	r0, r6
 8005522:	4639      	mov	r1, r7
 8005524:	f7fb fa68 	bl	80009f8 <__aeabi_dcmpgt>
 8005528:	2800      	cmp	r0, #0
 800552a:	d163      	bne.n	80055f4 <_dtoa_r+0x6e4>
 800552c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005530:	2000      	movs	r0, #0
 8005532:	49a9      	ldr	r1, [pc, #676]	; (80057d8 <_dtoa_r+0x8c8>)
 8005534:	f7fa fe18 	bl	8000168 <__aeabi_dsub>
 8005538:	4602      	mov	r2, r0
 800553a:	460b      	mov	r3, r1
 800553c:	4630      	mov	r0, r6
 800553e:	4639      	mov	r1, r7
 8005540:	f7fb fa3c 	bl	80009bc <__aeabi_dcmplt>
 8005544:	2800      	cmp	r0, #0
 8005546:	f43f af1d 	beq.w	8005384 <_dtoa_r+0x474>
 800554a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800554c:	1e7b      	subs	r3, r7, #1
 800554e:	9314      	str	r3, [sp, #80]	; 0x50
 8005550:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005554:	2b30      	cmp	r3, #48	; 0x30
 8005556:	d0f8      	beq.n	800554a <_dtoa_r+0x63a>
 8005558:	46c2      	mov	sl, r8
 800555a:	e03b      	b.n	80055d4 <_dtoa_r+0x6c4>
 800555c:	4b9f      	ldr	r3, [pc, #636]	; (80057dc <_dtoa_r+0x8cc>)
 800555e:	f7fa ffbb 	bl	80004d8 <__aeabi_dmul>
 8005562:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005566:	e7bc      	b.n	80054e2 <_dtoa_r+0x5d2>
 8005568:	9f03      	ldr	r7, [sp, #12]
 800556a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800556e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005572:	4640      	mov	r0, r8
 8005574:	4649      	mov	r1, r9
 8005576:	f7fb f8d9 	bl	800072c <__aeabi_ddiv>
 800557a:	f7fb fa5d 	bl	8000a38 <__aeabi_d2iz>
 800557e:	4604      	mov	r4, r0
 8005580:	f7fa ff40 	bl	8000404 <__aeabi_i2d>
 8005584:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005588:	f7fa ffa6 	bl	80004d8 <__aeabi_dmul>
 800558c:	4602      	mov	r2, r0
 800558e:	460b      	mov	r3, r1
 8005590:	4640      	mov	r0, r8
 8005592:	4649      	mov	r1, r9
 8005594:	f7fa fde8 	bl	8000168 <__aeabi_dsub>
 8005598:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800559c:	f807 6b01 	strb.w	r6, [r7], #1
 80055a0:	9e03      	ldr	r6, [sp, #12]
 80055a2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80055a6:	1bbe      	subs	r6, r7, r6
 80055a8:	45b4      	cmp	ip, r6
 80055aa:	4602      	mov	r2, r0
 80055ac:	460b      	mov	r3, r1
 80055ae:	d136      	bne.n	800561e <_dtoa_r+0x70e>
 80055b0:	f7fa fddc 	bl	800016c <__adddf3>
 80055b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80055b8:	4680      	mov	r8, r0
 80055ba:	4689      	mov	r9, r1
 80055bc:	f7fb fa1c 	bl	80009f8 <__aeabi_dcmpgt>
 80055c0:	bb58      	cbnz	r0, 800561a <_dtoa_r+0x70a>
 80055c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80055c6:	4640      	mov	r0, r8
 80055c8:	4649      	mov	r1, r9
 80055ca:	f7fb f9ed 	bl	80009a8 <__aeabi_dcmpeq>
 80055ce:	b108      	cbz	r0, 80055d4 <_dtoa_r+0x6c4>
 80055d0:	07e1      	lsls	r1, r4, #31
 80055d2:	d422      	bmi.n	800561a <_dtoa_r+0x70a>
 80055d4:	4628      	mov	r0, r5
 80055d6:	4659      	mov	r1, fp
 80055d8:	f000 faf0 	bl	8005bbc <_Bfree>
 80055dc:	2300      	movs	r3, #0
 80055de:	703b      	strb	r3, [r7, #0]
 80055e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80055e2:	f10a 0001 	add.w	r0, sl, #1
 80055e6:	6018      	str	r0, [r3, #0]
 80055e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f43f acde 	beq.w	8004fac <_dtoa_r+0x9c>
 80055f0:	601f      	str	r7, [r3, #0]
 80055f2:	e4db      	b.n	8004fac <_dtoa_r+0x9c>
 80055f4:	4627      	mov	r7, r4
 80055f6:	463b      	mov	r3, r7
 80055f8:	461f      	mov	r7, r3
 80055fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80055fe:	2a39      	cmp	r2, #57	; 0x39
 8005600:	d107      	bne.n	8005612 <_dtoa_r+0x702>
 8005602:	9a03      	ldr	r2, [sp, #12]
 8005604:	429a      	cmp	r2, r3
 8005606:	d1f7      	bne.n	80055f8 <_dtoa_r+0x6e8>
 8005608:	2230      	movs	r2, #48	; 0x30
 800560a:	9903      	ldr	r1, [sp, #12]
 800560c:	f108 0801 	add.w	r8, r8, #1
 8005610:	700a      	strb	r2, [r1, #0]
 8005612:	781a      	ldrb	r2, [r3, #0]
 8005614:	3201      	adds	r2, #1
 8005616:	701a      	strb	r2, [r3, #0]
 8005618:	e79e      	b.n	8005558 <_dtoa_r+0x648>
 800561a:	46d0      	mov	r8, sl
 800561c:	e7eb      	b.n	80055f6 <_dtoa_r+0x6e6>
 800561e:	2200      	movs	r2, #0
 8005620:	4b6e      	ldr	r3, [pc, #440]	; (80057dc <_dtoa_r+0x8cc>)
 8005622:	f7fa ff59 	bl	80004d8 <__aeabi_dmul>
 8005626:	2200      	movs	r2, #0
 8005628:	2300      	movs	r3, #0
 800562a:	4680      	mov	r8, r0
 800562c:	4689      	mov	r9, r1
 800562e:	f7fb f9bb 	bl	80009a8 <__aeabi_dcmpeq>
 8005632:	2800      	cmp	r0, #0
 8005634:	d09b      	beq.n	800556e <_dtoa_r+0x65e>
 8005636:	e7cd      	b.n	80055d4 <_dtoa_r+0x6c4>
 8005638:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800563a:	2a00      	cmp	r2, #0
 800563c:	f000 80d0 	beq.w	80057e0 <_dtoa_r+0x8d0>
 8005640:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005642:	2a01      	cmp	r2, #1
 8005644:	f300 80ae 	bgt.w	80057a4 <_dtoa_r+0x894>
 8005648:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800564a:	2a00      	cmp	r2, #0
 800564c:	f000 80a6 	beq.w	800579c <_dtoa_r+0x88c>
 8005650:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005654:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005656:	9f06      	ldr	r7, [sp, #24]
 8005658:	9a06      	ldr	r2, [sp, #24]
 800565a:	2101      	movs	r1, #1
 800565c:	441a      	add	r2, r3
 800565e:	9206      	str	r2, [sp, #24]
 8005660:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005662:	4628      	mov	r0, r5
 8005664:	441a      	add	r2, r3
 8005666:	9209      	str	r2, [sp, #36]	; 0x24
 8005668:	f000 fb5e 	bl	8005d28 <__i2b>
 800566c:	4606      	mov	r6, r0
 800566e:	2f00      	cmp	r7, #0
 8005670:	dd0c      	ble.n	800568c <_dtoa_r+0x77c>
 8005672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005674:	2b00      	cmp	r3, #0
 8005676:	dd09      	ble.n	800568c <_dtoa_r+0x77c>
 8005678:	42bb      	cmp	r3, r7
 800567a:	bfa8      	it	ge
 800567c:	463b      	movge	r3, r7
 800567e:	9a06      	ldr	r2, [sp, #24]
 8005680:	1aff      	subs	r7, r7, r3
 8005682:	1ad2      	subs	r2, r2, r3
 8005684:	9206      	str	r2, [sp, #24]
 8005686:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	9309      	str	r3, [sp, #36]	; 0x24
 800568c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800568e:	b1f3      	cbz	r3, 80056ce <_dtoa_r+0x7be>
 8005690:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005692:	2b00      	cmp	r3, #0
 8005694:	f000 80a8 	beq.w	80057e8 <_dtoa_r+0x8d8>
 8005698:	2c00      	cmp	r4, #0
 800569a:	dd10      	ble.n	80056be <_dtoa_r+0x7ae>
 800569c:	4631      	mov	r1, r6
 800569e:	4622      	mov	r2, r4
 80056a0:	4628      	mov	r0, r5
 80056a2:	f000 fbff 	bl	8005ea4 <__pow5mult>
 80056a6:	465a      	mov	r2, fp
 80056a8:	4601      	mov	r1, r0
 80056aa:	4606      	mov	r6, r0
 80056ac:	4628      	mov	r0, r5
 80056ae:	f000 fb51 	bl	8005d54 <__multiply>
 80056b2:	4680      	mov	r8, r0
 80056b4:	4659      	mov	r1, fp
 80056b6:	4628      	mov	r0, r5
 80056b8:	f000 fa80 	bl	8005bbc <_Bfree>
 80056bc:	46c3      	mov	fp, r8
 80056be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056c0:	1b1a      	subs	r2, r3, r4
 80056c2:	d004      	beq.n	80056ce <_dtoa_r+0x7be>
 80056c4:	4659      	mov	r1, fp
 80056c6:	4628      	mov	r0, r5
 80056c8:	f000 fbec 	bl	8005ea4 <__pow5mult>
 80056cc:	4683      	mov	fp, r0
 80056ce:	2101      	movs	r1, #1
 80056d0:	4628      	mov	r0, r5
 80056d2:	f000 fb29 	bl	8005d28 <__i2b>
 80056d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056d8:	4604      	mov	r4, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f340 8086 	ble.w	80057ec <_dtoa_r+0x8dc>
 80056e0:	461a      	mov	r2, r3
 80056e2:	4601      	mov	r1, r0
 80056e4:	4628      	mov	r0, r5
 80056e6:	f000 fbdd 	bl	8005ea4 <__pow5mult>
 80056ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056ec:	4604      	mov	r4, r0
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	dd7f      	ble.n	80057f2 <_dtoa_r+0x8e2>
 80056f2:	f04f 0800 	mov.w	r8, #0
 80056f6:	6923      	ldr	r3, [r4, #16]
 80056f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80056fc:	6918      	ldr	r0, [r3, #16]
 80056fe:	f000 fac5 	bl	8005c8c <__hi0bits>
 8005702:	f1c0 0020 	rsb	r0, r0, #32
 8005706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005708:	4418      	add	r0, r3
 800570a:	f010 001f 	ands.w	r0, r0, #31
 800570e:	f000 8092 	beq.w	8005836 <_dtoa_r+0x926>
 8005712:	f1c0 0320 	rsb	r3, r0, #32
 8005716:	2b04      	cmp	r3, #4
 8005718:	f340 808a 	ble.w	8005830 <_dtoa_r+0x920>
 800571c:	f1c0 001c 	rsb	r0, r0, #28
 8005720:	9b06      	ldr	r3, [sp, #24]
 8005722:	4407      	add	r7, r0
 8005724:	4403      	add	r3, r0
 8005726:	9306      	str	r3, [sp, #24]
 8005728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800572a:	4403      	add	r3, r0
 800572c:	9309      	str	r3, [sp, #36]	; 0x24
 800572e:	9b06      	ldr	r3, [sp, #24]
 8005730:	2b00      	cmp	r3, #0
 8005732:	dd05      	ble.n	8005740 <_dtoa_r+0x830>
 8005734:	4659      	mov	r1, fp
 8005736:	461a      	mov	r2, r3
 8005738:	4628      	mov	r0, r5
 800573a:	f000 fc0d 	bl	8005f58 <__lshift>
 800573e:	4683      	mov	fp, r0
 8005740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005742:	2b00      	cmp	r3, #0
 8005744:	dd05      	ble.n	8005752 <_dtoa_r+0x842>
 8005746:	4621      	mov	r1, r4
 8005748:	461a      	mov	r2, r3
 800574a:	4628      	mov	r0, r5
 800574c:	f000 fc04 	bl	8005f58 <__lshift>
 8005750:	4604      	mov	r4, r0
 8005752:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005754:	2b00      	cmp	r3, #0
 8005756:	d070      	beq.n	800583a <_dtoa_r+0x92a>
 8005758:	4621      	mov	r1, r4
 800575a:	4658      	mov	r0, fp
 800575c:	f000 fc6c 	bl	8006038 <__mcmp>
 8005760:	2800      	cmp	r0, #0
 8005762:	da6a      	bge.n	800583a <_dtoa_r+0x92a>
 8005764:	2300      	movs	r3, #0
 8005766:	4659      	mov	r1, fp
 8005768:	220a      	movs	r2, #10
 800576a:	4628      	mov	r0, r5
 800576c:	f000 fa48 	bl	8005c00 <__multadd>
 8005770:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005772:	4683      	mov	fp, r0
 8005774:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005778:	2b00      	cmp	r3, #0
 800577a:	f000 8194 	beq.w	8005aa6 <_dtoa_r+0xb96>
 800577e:	4631      	mov	r1, r6
 8005780:	2300      	movs	r3, #0
 8005782:	220a      	movs	r2, #10
 8005784:	4628      	mov	r0, r5
 8005786:	f000 fa3b 	bl	8005c00 <__multadd>
 800578a:	f1b9 0f00 	cmp.w	r9, #0
 800578e:	4606      	mov	r6, r0
 8005790:	f300 8093 	bgt.w	80058ba <_dtoa_r+0x9aa>
 8005794:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005796:	2b02      	cmp	r3, #2
 8005798:	dc57      	bgt.n	800584a <_dtoa_r+0x93a>
 800579a:	e08e      	b.n	80058ba <_dtoa_r+0x9aa>
 800579c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800579e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80057a2:	e757      	b.n	8005654 <_dtoa_r+0x744>
 80057a4:	9b08      	ldr	r3, [sp, #32]
 80057a6:	1e5c      	subs	r4, r3, #1
 80057a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057aa:	42a3      	cmp	r3, r4
 80057ac:	bfb7      	itett	lt
 80057ae:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80057b0:	1b1c      	subge	r4, r3, r4
 80057b2:	1ae2      	sublt	r2, r4, r3
 80057b4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80057b6:	bfbe      	ittt	lt
 80057b8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80057ba:	189b      	addlt	r3, r3, r2
 80057bc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80057be:	9b08      	ldr	r3, [sp, #32]
 80057c0:	bfb8      	it	lt
 80057c2:	2400      	movlt	r4, #0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	bfbb      	ittet	lt
 80057c8:	9b06      	ldrlt	r3, [sp, #24]
 80057ca:	9a08      	ldrlt	r2, [sp, #32]
 80057cc:	9f06      	ldrge	r7, [sp, #24]
 80057ce:	1a9f      	sublt	r7, r3, r2
 80057d0:	bfac      	ite	ge
 80057d2:	9b08      	ldrge	r3, [sp, #32]
 80057d4:	2300      	movlt	r3, #0
 80057d6:	e73f      	b.n	8005658 <_dtoa_r+0x748>
 80057d8:	3fe00000 	.word	0x3fe00000
 80057dc:	40240000 	.word	0x40240000
 80057e0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80057e2:	9f06      	ldr	r7, [sp, #24]
 80057e4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80057e6:	e742      	b.n	800566e <_dtoa_r+0x75e>
 80057e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057ea:	e76b      	b.n	80056c4 <_dtoa_r+0x7b4>
 80057ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	dc19      	bgt.n	8005826 <_dtoa_r+0x916>
 80057f2:	9b04      	ldr	r3, [sp, #16]
 80057f4:	b9bb      	cbnz	r3, 8005826 <_dtoa_r+0x916>
 80057f6:	9b05      	ldr	r3, [sp, #20]
 80057f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057fc:	b99b      	cbnz	r3, 8005826 <_dtoa_r+0x916>
 80057fe:	9b05      	ldr	r3, [sp, #20]
 8005800:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005804:	0d1b      	lsrs	r3, r3, #20
 8005806:	051b      	lsls	r3, r3, #20
 8005808:	b183      	cbz	r3, 800582c <_dtoa_r+0x91c>
 800580a:	f04f 0801 	mov.w	r8, #1
 800580e:	9b06      	ldr	r3, [sp, #24]
 8005810:	3301      	adds	r3, #1
 8005812:	9306      	str	r3, [sp, #24]
 8005814:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005816:	3301      	adds	r3, #1
 8005818:	9309      	str	r3, [sp, #36]	; 0x24
 800581a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800581c:	2b00      	cmp	r3, #0
 800581e:	f47f af6a 	bne.w	80056f6 <_dtoa_r+0x7e6>
 8005822:	2001      	movs	r0, #1
 8005824:	e76f      	b.n	8005706 <_dtoa_r+0x7f6>
 8005826:	f04f 0800 	mov.w	r8, #0
 800582a:	e7f6      	b.n	800581a <_dtoa_r+0x90a>
 800582c:	4698      	mov	r8, r3
 800582e:	e7f4      	b.n	800581a <_dtoa_r+0x90a>
 8005830:	f43f af7d 	beq.w	800572e <_dtoa_r+0x81e>
 8005834:	4618      	mov	r0, r3
 8005836:	301c      	adds	r0, #28
 8005838:	e772      	b.n	8005720 <_dtoa_r+0x810>
 800583a:	9b08      	ldr	r3, [sp, #32]
 800583c:	2b00      	cmp	r3, #0
 800583e:	dc36      	bgt.n	80058ae <_dtoa_r+0x99e>
 8005840:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005842:	2b02      	cmp	r3, #2
 8005844:	dd33      	ble.n	80058ae <_dtoa_r+0x99e>
 8005846:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800584a:	f1b9 0f00 	cmp.w	r9, #0
 800584e:	d10d      	bne.n	800586c <_dtoa_r+0x95c>
 8005850:	4621      	mov	r1, r4
 8005852:	464b      	mov	r3, r9
 8005854:	2205      	movs	r2, #5
 8005856:	4628      	mov	r0, r5
 8005858:	f000 f9d2 	bl	8005c00 <__multadd>
 800585c:	4601      	mov	r1, r0
 800585e:	4604      	mov	r4, r0
 8005860:	4658      	mov	r0, fp
 8005862:	f000 fbe9 	bl	8006038 <__mcmp>
 8005866:	2800      	cmp	r0, #0
 8005868:	f73f adb8 	bgt.w	80053dc <_dtoa_r+0x4cc>
 800586c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800586e:	9f03      	ldr	r7, [sp, #12]
 8005870:	ea6f 0a03 	mvn.w	sl, r3
 8005874:	f04f 0800 	mov.w	r8, #0
 8005878:	4621      	mov	r1, r4
 800587a:	4628      	mov	r0, r5
 800587c:	f000 f99e 	bl	8005bbc <_Bfree>
 8005880:	2e00      	cmp	r6, #0
 8005882:	f43f aea7 	beq.w	80055d4 <_dtoa_r+0x6c4>
 8005886:	f1b8 0f00 	cmp.w	r8, #0
 800588a:	d005      	beq.n	8005898 <_dtoa_r+0x988>
 800588c:	45b0      	cmp	r8, r6
 800588e:	d003      	beq.n	8005898 <_dtoa_r+0x988>
 8005890:	4641      	mov	r1, r8
 8005892:	4628      	mov	r0, r5
 8005894:	f000 f992 	bl	8005bbc <_Bfree>
 8005898:	4631      	mov	r1, r6
 800589a:	4628      	mov	r0, r5
 800589c:	f000 f98e 	bl	8005bbc <_Bfree>
 80058a0:	e698      	b.n	80055d4 <_dtoa_r+0x6c4>
 80058a2:	2400      	movs	r4, #0
 80058a4:	4626      	mov	r6, r4
 80058a6:	e7e1      	b.n	800586c <_dtoa_r+0x95c>
 80058a8:	46c2      	mov	sl, r8
 80058aa:	4626      	mov	r6, r4
 80058ac:	e596      	b.n	80053dc <_dtoa_r+0x4cc>
 80058ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 80fd 	beq.w	8005ab4 <_dtoa_r+0xba4>
 80058ba:	2f00      	cmp	r7, #0
 80058bc:	dd05      	ble.n	80058ca <_dtoa_r+0x9ba>
 80058be:	4631      	mov	r1, r6
 80058c0:	463a      	mov	r2, r7
 80058c2:	4628      	mov	r0, r5
 80058c4:	f000 fb48 	bl	8005f58 <__lshift>
 80058c8:	4606      	mov	r6, r0
 80058ca:	f1b8 0f00 	cmp.w	r8, #0
 80058ce:	d05c      	beq.n	800598a <_dtoa_r+0xa7a>
 80058d0:	4628      	mov	r0, r5
 80058d2:	6871      	ldr	r1, [r6, #4]
 80058d4:	f000 f932 	bl	8005b3c <_Balloc>
 80058d8:	4607      	mov	r7, r0
 80058da:	b928      	cbnz	r0, 80058e8 <_dtoa_r+0x9d8>
 80058dc:	4602      	mov	r2, r0
 80058de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80058e2:	4b7f      	ldr	r3, [pc, #508]	; (8005ae0 <_dtoa_r+0xbd0>)
 80058e4:	f7ff bb28 	b.w	8004f38 <_dtoa_r+0x28>
 80058e8:	6932      	ldr	r2, [r6, #16]
 80058ea:	f106 010c 	add.w	r1, r6, #12
 80058ee:	3202      	adds	r2, #2
 80058f0:	0092      	lsls	r2, r2, #2
 80058f2:	300c      	adds	r0, #12
 80058f4:	f000 f914 	bl	8005b20 <memcpy>
 80058f8:	2201      	movs	r2, #1
 80058fa:	4639      	mov	r1, r7
 80058fc:	4628      	mov	r0, r5
 80058fe:	f000 fb2b 	bl	8005f58 <__lshift>
 8005902:	46b0      	mov	r8, r6
 8005904:	4606      	mov	r6, r0
 8005906:	9b03      	ldr	r3, [sp, #12]
 8005908:	3301      	adds	r3, #1
 800590a:	9308      	str	r3, [sp, #32]
 800590c:	9b03      	ldr	r3, [sp, #12]
 800590e:	444b      	add	r3, r9
 8005910:	930a      	str	r3, [sp, #40]	; 0x28
 8005912:	9b04      	ldr	r3, [sp, #16]
 8005914:	f003 0301 	and.w	r3, r3, #1
 8005918:	9309      	str	r3, [sp, #36]	; 0x24
 800591a:	9b08      	ldr	r3, [sp, #32]
 800591c:	4621      	mov	r1, r4
 800591e:	3b01      	subs	r3, #1
 8005920:	4658      	mov	r0, fp
 8005922:	9304      	str	r3, [sp, #16]
 8005924:	f7ff fa68 	bl	8004df8 <quorem>
 8005928:	4603      	mov	r3, r0
 800592a:	4641      	mov	r1, r8
 800592c:	3330      	adds	r3, #48	; 0x30
 800592e:	9006      	str	r0, [sp, #24]
 8005930:	4658      	mov	r0, fp
 8005932:	930b      	str	r3, [sp, #44]	; 0x2c
 8005934:	f000 fb80 	bl	8006038 <__mcmp>
 8005938:	4632      	mov	r2, r6
 800593a:	4681      	mov	r9, r0
 800593c:	4621      	mov	r1, r4
 800593e:	4628      	mov	r0, r5
 8005940:	f000 fb96 	bl	8006070 <__mdiff>
 8005944:	68c2      	ldr	r2, [r0, #12]
 8005946:	4607      	mov	r7, r0
 8005948:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800594a:	bb02      	cbnz	r2, 800598e <_dtoa_r+0xa7e>
 800594c:	4601      	mov	r1, r0
 800594e:	4658      	mov	r0, fp
 8005950:	f000 fb72 	bl	8006038 <__mcmp>
 8005954:	4602      	mov	r2, r0
 8005956:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005958:	4639      	mov	r1, r7
 800595a:	4628      	mov	r0, r5
 800595c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005960:	f000 f92c 	bl	8005bbc <_Bfree>
 8005964:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005966:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005968:	9f08      	ldr	r7, [sp, #32]
 800596a:	ea43 0102 	orr.w	r1, r3, r2
 800596e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005970:	430b      	orrs	r3, r1
 8005972:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005974:	d10d      	bne.n	8005992 <_dtoa_r+0xa82>
 8005976:	2b39      	cmp	r3, #57	; 0x39
 8005978:	d029      	beq.n	80059ce <_dtoa_r+0xabe>
 800597a:	f1b9 0f00 	cmp.w	r9, #0
 800597e:	dd01      	ble.n	8005984 <_dtoa_r+0xa74>
 8005980:	9b06      	ldr	r3, [sp, #24]
 8005982:	3331      	adds	r3, #49	; 0x31
 8005984:	9a04      	ldr	r2, [sp, #16]
 8005986:	7013      	strb	r3, [r2, #0]
 8005988:	e776      	b.n	8005878 <_dtoa_r+0x968>
 800598a:	4630      	mov	r0, r6
 800598c:	e7b9      	b.n	8005902 <_dtoa_r+0x9f2>
 800598e:	2201      	movs	r2, #1
 8005990:	e7e2      	b.n	8005958 <_dtoa_r+0xa48>
 8005992:	f1b9 0f00 	cmp.w	r9, #0
 8005996:	db06      	blt.n	80059a6 <_dtoa_r+0xa96>
 8005998:	9922      	ldr	r1, [sp, #136]	; 0x88
 800599a:	ea41 0909 	orr.w	r9, r1, r9
 800599e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059a0:	ea59 0101 	orrs.w	r1, r9, r1
 80059a4:	d120      	bne.n	80059e8 <_dtoa_r+0xad8>
 80059a6:	2a00      	cmp	r2, #0
 80059a8:	ddec      	ble.n	8005984 <_dtoa_r+0xa74>
 80059aa:	4659      	mov	r1, fp
 80059ac:	2201      	movs	r2, #1
 80059ae:	4628      	mov	r0, r5
 80059b0:	9308      	str	r3, [sp, #32]
 80059b2:	f000 fad1 	bl	8005f58 <__lshift>
 80059b6:	4621      	mov	r1, r4
 80059b8:	4683      	mov	fp, r0
 80059ba:	f000 fb3d 	bl	8006038 <__mcmp>
 80059be:	2800      	cmp	r0, #0
 80059c0:	9b08      	ldr	r3, [sp, #32]
 80059c2:	dc02      	bgt.n	80059ca <_dtoa_r+0xaba>
 80059c4:	d1de      	bne.n	8005984 <_dtoa_r+0xa74>
 80059c6:	07da      	lsls	r2, r3, #31
 80059c8:	d5dc      	bpl.n	8005984 <_dtoa_r+0xa74>
 80059ca:	2b39      	cmp	r3, #57	; 0x39
 80059cc:	d1d8      	bne.n	8005980 <_dtoa_r+0xa70>
 80059ce:	2339      	movs	r3, #57	; 0x39
 80059d0:	9a04      	ldr	r2, [sp, #16]
 80059d2:	7013      	strb	r3, [r2, #0]
 80059d4:	463b      	mov	r3, r7
 80059d6:	461f      	mov	r7, r3
 80059d8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80059dc:	3b01      	subs	r3, #1
 80059de:	2a39      	cmp	r2, #57	; 0x39
 80059e0:	d050      	beq.n	8005a84 <_dtoa_r+0xb74>
 80059e2:	3201      	adds	r2, #1
 80059e4:	701a      	strb	r2, [r3, #0]
 80059e6:	e747      	b.n	8005878 <_dtoa_r+0x968>
 80059e8:	2a00      	cmp	r2, #0
 80059ea:	dd03      	ble.n	80059f4 <_dtoa_r+0xae4>
 80059ec:	2b39      	cmp	r3, #57	; 0x39
 80059ee:	d0ee      	beq.n	80059ce <_dtoa_r+0xabe>
 80059f0:	3301      	adds	r3, #1
 80059f2:	e7c7      	b.n	8005984 <_dtoa_r+0xa74>
 80059f4:	9a08      	ldr	r2, [sp, #32]
 80059f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80059f8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80059fc:	428a      	cmp	r2, r1
 80059fe:	d02a      	beq.n	8005a56 <_dtoa_r+0xb46>
 8005a00:	4659      	mov	r1, fp
 8005a02:	2300      	movs	r3, #0
 8005a04:	220a      	movs	r2, #10
 8005a06:	4628      	mov	r0, r5
 8005a08:	f000 f8fa 	bl	8005c00 <__multadd>
 8005a0c:	45b0      	cmp	r8, r6
 8005a0e:	4683      	mov	fp, r0
 8005a10:	f04f 0300 	mov.w	r3, #0
 8005a14:	f04f 020a 	mov.w	r2, #10
 8005a18:	4641      	mov	r1, r8
 8005a1a:	4628      	mov	r0, r5
 8005a1c:	d107      	bne.n	8005a2e <_dtoa_r+0xb1e>
 8005a1e:	f000 f8ef 	bl	8005c00 <__multadd>
 8005a22:	4680      	mov	r8, r0
 8005a24:	4606      	mov	r6, r0
 8005a26:	9b08      	ldr	r3, [sp, #32]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	9308      	str	r3, [sp, #32]
 8005a2c:	e775      	b.n	800591a <_dtoa_r+0xa0a>
 8005a2e:	f000 f8e7 	bl	8005c00 <__multadd>
 8005a32:	4631      	mov	r1, r6
 8005a34:	4680      	mov	r8, r0
 8005a36:	2300      	movs	r3, #0
 8005a38:	220a      	movs	r2, #10
 8005a3a:	4628      	mov	r0, r5
 8005a3c:	f000 f8e0 	bl	8005c00 <__multadd>
 8005a40:	4606      	mov	r6, r0
 8005a42:	e7f0      	b.n	8005a26 <_dtoa_r+0xb16>
 8005a44:	f1b9 0f00 	cmp.w	r9, #0
 8005a48:	bfcc      	ite	gt
 8005a4a:	464f      	movgt	r7, r9
 8005a4c:	2701      	movle	r7, #1
 8005a4e:	f04f 0800 	mov.w	r8, #0
 8005a52:	9a03      	ldr	r2, [sp, #12]
 8005a54:	4417      	add	r7, r2
 8005a56:	4659      	mov	r1, fp
 8005a58:	2201      	movs	r2, #1
 8005a5a:	4628      	mov	r0, r5
 8005a5c:	9308      	str	r3, [sp, #32]
 8005a5e:	f000 fa7b 	bl	8005f58 <__lshift>
 8005a62:	4621      	mov	r1, r4
 8005a64:	4683      	mov	fp, r0
 8005a66:	f000 fae7 	bl	8006038 <__mcmp>
 8005a6a:	2800      	cmp	r0, #0
 8005a6c:	dcb2      	bgt.n	80059d4 <_dtoa_r+0xac4>
 8005a6e:	d102      	bne.n	8005a76 <_dtoa_r+0xb66>
 8005a70:	9b08      	ldr	r3, [sp, #32]
 8005a72:	07db      	lsls	r3, r3, #31
 8005a74:	d4ae      	bmi.n	80059d4 <_dtoa_r+0xac4>
 8005a76:	463b      	mov	r3, r7
 8005a78:	461f      	mov	r7, r3
 8005a7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a7e:	2a30      	cmp	r2, #48	; 0x30
 8005a80:	d0fa      	beq.n	8005a78 <_dtoa_r+0xb68>
 8005a82:	e6f9      	b.n	8005878 <_dtoa_r+0x968>
 8005a84:	9a03      	ldr	r2, [sp, #12]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d1a5      	bne.n	80059d6 <_dtoa_r+0xac6>
 8005a8a:	2331      	movs	r3, #49	; 0x31
 8005a8c:	f10a 0a01 	add.w	sl, sl, #1
 8005a90:	e779      	b.n	8005986 <_dtoa_r+0xa76>
 8005a92:	4b14      	ldr	r3, [pc, #80]	; (8005ae4 <_dtoa_r+0xbd4>)
 8005a94:	f7ff baa8 	b.w	8004fe8 <_dtoa_r+0xd8>
 8005a98:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f47f aa81 	bne.w	8004fa2 <_dtoa_r+0x92>
 8005aa0:	4b11      	ldr	r3, [pc, #68]	; (8005ae8 <_dtoa_r+0xbd8>)
 8005aa2:	f7ff baa1 	b.w	8004fe8 <_dtoa_r+0xd8>
 8005aa6:	f1b9 0f00 	cmp.w	r9, #0
 8005aaa:	dc03      	bgt.n	8005ab4 <_dtoa_r+0xba4>
 8005aac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	f73f aecb 	bgt.w	800584a <_dtoa_r+0x93a>
 8005ab4:	9f03      	ldr	r7, [sp, #12]
 8005ab6:	4621      	mov	r1, r4
 8005ab8:	4658      	mov	r0, fp
 8005aba:	f7ff f99d 	bl	8004df8 <quorem>
 8005abe:	9a03      	ldr	r2, [sp, #12]
 8005ac0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005ac4:	f807 3b01 	strb.w	r3, [r7], #1
 8005ac8:	1aba      	subs	r2, r7, r2
 8005aca:	4591      	cmp	r9, r2
 8005acc:	ddba      	ble.n	8005a44 <_dtoa_r+0xb34>
 8005ace:	4659      	mov	r1, fp
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	220a      	movs	r2, #10
 8005ad4:	4628      	mov	r0, r5
 8005ad6:	f000 f893 	bl	8005c00 <__multadd>
 8005ada:	4683      	mov	fp, r0
 8005adc:	e7eb      	b.n	8005ab6 <_dtoa_r+0xba6>
 8005ade:	bf00      	nop
 8005ae0:	080083bf 	.word	0x080083bf
 8005ae4:	0800831c 	.word	0x0800831c
 8005ae8:	08008340 	.word	0x08008340

08005aec <_localeconv_r>:
 8005aec:	4800      	ldr	r0, [pc, #0]	; (8005af0 <_localeconv_r+0x4>)
 8005aee:	4770      	bx	lr
 8005af0:	20000164 	.word	0x20000164

08005af4 <malloc>:
 8005af4:	4b02      	ldr	r3, [pc, #8]	; (8005b00 <malloc+0xc>)
 8005af6:	4601      	mov	r1, r0
 8005af8:	6818      	ldr	r0, [r3, #0]
 8005afa:	f000 bc1d 	b.w	8006338 <_malloc_r>
 8005afe:	bf00      	nop
 8005b00:	20000010 	.word	0x20000010

08005b04 <memchr>:
 8005b04:	4603      	mov	r3, r0
 8005b06:	b510      	push	{r4, lr}
 8005b08:	b2c9      	uxtb	r1, r1
 8005b0a:	4402      	add	r2, r0
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	4618      	mov	r0, r3
 8005b10:	d101      	bne.n	8005b16 <memchr+0x12>
 8005b12:	2000      	movs	r0, #0
 8005b14:	e003      	b.n	8005b1e <memchr+0x1a>
 8005b16:	7804      	ldrb	r4, [r0, #0]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	428c      	cmp	r4, r1
 8005b1c:	d1f6      	bne.n	8005b0c <memchr+0x8>
 8005b1e:	bd10      	pop	{r4, pc}

08005b20 <memcpy>:
 8005b20:	440a      	add	r2, r1
 8005b22:	4291      	cmp	r1, r2
 8005b24:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b28:	d100      	bne.n	8005b2c <memcpy+0xc>
 8005b2a:	4770      	bx	lr
 8005b2c:	b510      	push	{r4, lr}
 8005b2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b32:	4291      	cmp	r1, r2
 8005b34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b38:	d1f9      	bne.n	8005b2e <memcpy+0xe>
 8005b3a:	bd10      	pop	{r4, pc}

08005b3c <_Balloc>:
 8005b3c:	b570      	push	{r4, r5, r6, lr}
 8005b3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005b40:	4604      	mov	r4, r0
 8005b42:	460d      	mov	r5, r1
 8005b44:	b976      	cbnz	r6, 8005b64 <_Balloc+0x28>
 8005b46:	2010      	movs	r0, #16
 8005b48:	f7ff ffd4 	bl	8005af4 <malloc>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	6260      	str	r0, [r4, #36]	; 0x24
 8005b50:	b920      	cbnz	r0, 8005b5c <_Balloc+0x20>
 8005b52:	2166      	movs	r1, #102	; 0x66
 8005b54:	4b17      	ldr	r3, [pc, #92]	; (8005bb4 <_Balloc+0x78>)
 8005b56:	4818      	ldr	r0, [pc, #96]	; (8005bb8 <_Balloc+0x7c>)
 8005b58:	f000 fdce 	bl	80066f8 <__assert_func>
 8005b5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b60:	6006      	str	r6, [r0, #0]
 8005b62:	60c6      	str	r6, [r0, #12]
 8005b64:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005b66:	68f3      	ldr	r3, [r6, #12]
 8005b68:	b183      	cbz	r3, 8005b8c <_Balloc+0x50>
 8005b6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005b72:	b9b8      	cbnz	r0, 8005ba4 <_Balloc+0x68>
 8005b74:	2101      	movs	r1, #1
 8005b76:	fa01 f605 	lsl.w	r6, r1, r5
 8005b7a:	1d72      	adds	r2, r6, #5
 8005b7c:	4620      	mov	r0, r4
 8005b7e:	0092      	lsls	r2, r2, #2
 8005b80:	f000 fb5e 	bl	8006240 <_calloc_r>
 8005b84:	b160      	cbz	r0, 8005ba0 <_Balloc+0x64>
 8005b86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005b8a:	e00e      	b.n	8005baa <_Balloc+0x6e>
 8005b8c:	2221      	movs	r2, #33	; 0x21
 8005b8e:	2104      	movs	r1, #4
 8005b90:	4620      	mov	r0, r4
 8005b92:	f000 fb55 	bl	8006240 <_calloc_r>
 8005b96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b98:	60f0      	str	r0, [r6, #12]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1e4      	bne.n	8005b6a <_Balloc+0x2e>
 8005ba0:	2000      	movs	r0, #0
 8005ba2:	bd70      	pop	{r4, r5, r6, pc}
 8005ba4:	6802      	ldr	r2, [r0, #0]
 8005ba6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005baa:	2300      	movs	r3, #0
 8005bac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005bb0:	e7f7      	b.n	8005ba2 <_Balloc+0x66>
 8005bb2:	bf00      	nop
 8005bb4:	0800834d 	.word	0x0800834d
 8005bb8:	080083d0 	.word	0x080083d0

08005bbc <_Bfree>:
 8005bbc:	b570      	push	{r4, r5, r6, lr}
 8005bbe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005bc0:	4605      	mov	r5, r0
 8005bc2:	460c      	mov	r4, r1
 8005bc4:	b976      	cbnz	r6, 8005be4 <_Bfree+0x28>
 8005bc6:	2010      	movs	r0, #16
 8005bc8:	f7ff ff94 	bl	8005af4 <malloc>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	6268      	str	r0, [r5, #36]	; 0x24
 8005bd0:	b920      	cbnz	r0, 8005bdc <_Bfree+0x20>
 8005bd2:	218a      	movs	r1, #138	; 0x8a
 8005bd4:	4b08      	ldr	r3, [pc, #32]	; (8005bf8 <_Bfree+0x3c>)
 8005bd6:	4809      	ldr	r0, [pc, #36]	; (8005bfc <_Bfree+0x40>)
 8005bd8:	f000 fd8e 	bl	80066f8 <__assert_func>
 8005bdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005be0:	6006      	str	r6, [r0, #0]
 8005be2:	60c6      	str	r6, [r0, #12]
 8005be4:	b13c      	cbz	r4, 8005bf6 <_Bfree+0x3a>
 8005be6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005be8:	6862      	ldr	r2, [r4, #4]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005bf0:	6021      	str	r1, [r4, #0]
 8005bf2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005bf6:	bd70      	pop	{r4, r5, r6, pc}
 8005bf8:	0800834d 	.word	0x0800834d
 8005bfc:	080083d0 	.word	0x080083d0

08005c00 <__multadd>:
 8005c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c04:	4607      	mov	r7, r0
 8005c06:	460c      	mov	r4, r1
 8005c08:	461e      	mov	r6, r3
 8005c0a:	2000      	movs	r0, #0
 8005c0c:	690d      	ldr	r5, [r1, #16]
 8005c0e:	f101 0c14 	add.w	ip, r1, #20
 8005c12:	f8dc 3000 	ldr.w	r3, [ip]
 8005c16:	3001      	adds	r0, #1
 8005c18:	b299      	uxth	r1, r3
 8005c1a:	fb02 6101 	mla	r1, r2, r1, r6
 8005c1e:	0c1e      	lsrs	r6, r3, #16
 8005c20:	0c0b      	lsrs	r3, r1, #16
 8005c22:	fb02 3306 	mla	r3, r2, r6, r3
 8005c26:	b289      	uxth	r1, r1
 8005c28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005c2c:	4285      	cmp	r5, r0
 8005c2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005c32:	f84c 1b04 	str.w	r1, [ip], #4
 8005c36:	dcec      	bgt.n	8005c12 <__multadd+0x12>
 8005c38:	b30e      	cbz	r6, 8005c7e <__multadd+0x7e>
 8005c3a:	68a3      	ldr	r3, [r4, #8]
 8005c3c:	42ab      	cmp	r3, r5
 8005c3e:	dc19      	bgt.n	8005c74 <__multadd+0x74>
 8005c40:	6861      	ldr	r1, [r4, #4]
 8005c42:	4638      	mov	r0, r7
 8005c44:	3101      	adds	r1, #1
 8005c46:	f7ff ff79 	bl	8005b3c <_Balloc>
 8005c4a:	4680      	mov	r8, r0
 8005c4c:	b928      	cbnz	r0, 8005c5a <__multadd+0x5a>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	21b5      	movs	r1, #181	; 0xb5
 8005c52:	4b0c      	ldr	r3, [pc, #48]	; (8005c84 <__multadd+0x84>)
 8005c54:	480c      	ldr	r0, [pc, #48]	; (8005c88 <__multadd+0x88>)
 8005c56:	f000 fd4f 	bl	80066f8 <__assert_func>
 8005c5a:	6922      	ldr	r2, [r4, #16]
 8005c5c:	f104 010c 	add.w	r1, r4, #12
 8005c60:	3202      	adds	r2, #2
 8005c62:	0092      	lsls	r2, r2, #2
 8005c64:	300c      	adds	r0, #12
 8005c66:	f7ff ff5b 	bl	8005b20 <memcpy>
 8005c6a:	4621      	mov	r1, r4
 8005c6c:	4638      	mov	r0, r7
 8005c6e:	f7ff ffa5 	bl	8005bbc <_Bfree>
 8005c72:	4644      	mov	r4, r8
 8005c74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005c78:	3501      	adds	r5, #1
 8005c7a:	615e      	str	r6, [r3, #20]
 8005c7c:	6125      	str	r5, [r4, #16]
 8005c7e:	4620      	mov	r0, r4
 8005c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c84:	080083bf 	.word	0x080083bf
 8005c88:	080083d0 	.word	0x080083d0

08005c8c <__hi0bits>:
 8005c8c:	0c02      	lsrs	r2, r0, #16
 8005c8e:	0412      	lsls	r2, r2, #16
 8005c90:	4603      	mov	r3, r0
 8005c92:	b9ca      	cbnz	r2, 8005cc8 <__hi0bits+0x3c>
 8005c94:	0403      	lsls	r3, r0, #16
 8005c96:	2010      	movs	r0, #16
 8005c98:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005c9c:	bf04      	itt	eq
 8005c9e:	021b      	lsleq	r3, r3, #8
 8005ca0:	3008      	addeq	r0, #8
 8005ca2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005ca6:	bf04      	itt	eq
 8005ca8:	011b      	lsleq	r3, r3, #4
 8005caa:	3004      	addeq	r0, #4
 8005cac:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005cb0:	bf04      	itt	eq
 8005cb2:	009b      	lsleq	r3, r3, #2
 8005cb4:	3002      	addeq	r0, #2
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	db05      	blt.n	8005cc6 <__hi0bits+0x3a>
 8005cba:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005cbe:	f100 0001 	add.w	r0, r0, #1
 8005cc2:	bf08      	it	eq
 8005cc4:	2020      	moveq	r0, #32
 8005cc6:	4770      	bx	lr
 8005cc8:	2000      	movs	r0, #0
 8005cca:	e7e5      	b.n	8005c98 <__hi0bits+0xc>

08005ccc <__lo0bits>:
 8005ccc:	6803      	ldr	r3, [r0, #0]
 8005cce:	4602      	mov	r2, r0
 8005cd0:	f013 0007 	ands.w	r0, r3, #7
 8005cd4:	d00b      	beq.n	8005cee <__lo0bits+0x22>
 8005cd6:	07d9      	lsls	r1, r3, #31
 8005cd8:	d421      	bmi.n	8005d1e <__lo0bits+0x52>
 8005cda:	0798      	lsls	r0, r3, #30
 8005cdc:	bf49      	itett	mi
 8005cde:	085b      	lsrmi	r3, r3, #1
 8005ce0:	089b      	lsrpl	r3, r3, #2
 8005ce2:	2001      	movmi	r0, #1
 8005ce4:	6013      	strmi	r3, [r2, #0]
 8005ce6:	bf5c      	itt	pl
 8005ce8:	2002      	movpl	r0, #2
 8005cea:	6013      	strpl	r3, [r2, #0]
 8005cec:	4770      	bx	lr
 8005cee:	b299      	uxth	r1, r3
 8005cf0:	b909      	cbnz	r1, 8005cf6 <__lo0bits+0x2a>
 8005cf2:	2010      	movs	r0, #16
 8005cf4:	0c1b      	lsrs	r3, r3, #16
 8005cf6:	b2d9      	uxtb	r1, r3
 8005cf8:	b909      	cbnz	r1, 8005cfe <__lo0bits+0x32>
 8005cfa:	3008      	adds	r0, #8
 8005cfc:	0a1b      	lsrs	r3, r3, #8
 8005cfe:	0719      	lsls	r1, r3, #28
 8005d00:	bf04      	itt	eq
 8005d02:	091b      	lsreq	r3, r3, #4
 8005d04:	3004      	addeq	r0, #4
 8005d06:	0799      	lsls	r1, r3, #30
 8005d08:	bf04      	itt	eq
 8005d0a:	089b      	lsreq	r3, r3, #2
 8005d0c:	3002      	addeq	r0, #2
 8005d0e:	07d9      	lsls	r1, r3, #31
 8005d10:	d403      	bmi.n	8005d1a <__lo0bits+0x4e>
 8005d12:	085b      	lsrs	r3, r3, #1
 8005d14:	f100 0001 	add.w	r0, r0, #1
 8005d18:	d003      	beq.n	8005d22 <__lo0bits+0x56>
 8005d1a:	6013      	str	r3, [r2, #0]
 8005d1c:	4770      	bx	lr
 8005d1e:	2000      	movs	r0, #0
 8005d20:	4770      	bx	lr
 8005d22:	2020      	movs	r0, #32
 8005d24:	4770      	bx	lr
	...

08005d28 <__i2b>:
 8005d28:	b510      	push	{r4, lr}
 8005d2a:	460c      	mov	r4, r1
 8005d2c:	2101      	movs	r1, #1
 8005d2e:	f7ff ff05 	bl	8005b3c <_Balloc>
 8005d32:	4602      	mov	r2, r0
 8005d34:	b928      	cbnz	r0, 8005d42 <__i2b+0x1a>
 8005d36:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005d3a:	4b04      	ldr	r3, [pc, #16]	; (8005d4c <__i2b+0x24>)
 8005d3c:	4804      	ldr	r0, [pc, #16]	; (8005d50 <__i2b+0x28>)
 8005d3e:	f000 fcdb 	bl	80066f8 <__assert_func>
 8005d42:	2301      	movs	r3, #1
 8005d44:	6144      	str	r4, [r0, #20]
 8005d46:	6103      	str	r3, [r0, #16]
 8005d48:	bd10      	pop	{r4, pc}
 8005d4a:	bf00      	nop
 8005d4c:	080083bf 	.word	0x080083bf
 8005d50:	080083d0 	.word	0x080083d0

08005d54 <__multiply>:
 8005d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d58:	4691      	mov	r9, r2
 8005d5a:	690a      	ldr	r2, [r1, #16]
 8005d5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005d60:	460c      	mov	r4, r1
 8005d62:	429a      	cmp	r2, r3
 8005d64:	bfbe      	ittt	lt
 8005d66:	460b      	movlt	r3, r1
 8005d68:	464c      	movlt	r4, r9
 8005d6a:	4699      	movlt	r9, r3
 8005d6c:	6927      	ldr	r7, [r4, #16]
 8005d6e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005d72:	68a3      	ldr	r3, [r4, #8]
 8005d74:	6861      	ldr	r1, [r4, #4]
 8005d76:	eb07 060a 	add.w	r6, r7, sl
 8005d7a:	42b3      	cmp	r3, r6
 8005d7c:	b085      	sub	sp, #20
 8005d7e:	bfb8      	it	lt
 8005d80:	3101      	addlt	r1, #1
 8005d82:	f7ff fedb 	bl	8005b3c <_Balloc>
 8005d86:	b930      	cbnz	r0, 8005d96 <__multiply+0x42>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	f240 115d 	movw	r1, #349	; 0x15d
 8005d8e:	4b43      	ldr	r3, [pc, #268]	; (8005e9c <__multiply+0x148>)
 8005d90:	4843      	ldr	r0, [pc, #268]	; (8005ea0 <__multiply+0x14c>)
 8005d92:	f000 fcb1 	bl	80066f8 <__assert_func>
 8005d96:	f100 0514 	add.w	r5, r0, #20
 8005d9a:	462b      	mov	r3, r5
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005da2:	4543      	cmp	r3, r8
 8005da4:	d321      	bcc.n	8005dea <__multiply+0x96>
 8005da6:	f104 0314 	add.w	r3, r4, #20
 8005daa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005dae:	f109 0314 	add.w	r3, r9, #20
 8005db2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005db6:	9202      	str	r2, [sp, #8]
 8005db8:	1b3a      	subs	r2, r7, r4
 8005dba:	3a15      	subs	r2, #21
 8005dbc:	f022 0203 	bic.w	r2, r2, #3
 8005dc0:	3204      	adds	r2, #4
 8005dc2:	f104 0115 	add.w	r1, r4, #21
 8005dc6:	428f      	cmp	r7, r1
 8005dc8:	bf38      	it	cc
 8005dca:	2204      	movcc	r2, #4
 8005dcc:	9201      	str	r2, [sp, #4]
 8005dce:	9a02      	ldr	r2, [sp, #8]
 8005dd0:	9303      	str	r3, [sp, #12]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d80c      	bhi.n	8005df0 <__multiply+0x9c>
 8005dd6:	2e00      	cmp	r6, #0
 8005dd8:	dd03      	ble.n	8005de2 <__multiply+0x8e>
 8005dda:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d059      	beq.n	8005e96 <__multiply+0x142>
 8005de2:	6106      	str	r6, [r0, #16]
 8005de4:	b005      	add	sp, #20
 8005de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dea:	f843 2b04 	str.w	r2, [r3], #4
 8005dee:	e7d8      	b.n	8005da2 <__multiply+0x4e>
 8005df0:	f8b3 a000 	ldrh.w	sl, [r3]
 8005df4:	f1ba 0f00 	cmp.w	sl, #0
 8005df8:	d023      	beq.n	8005e42 <__multiply+0xee>
 8005dfa:	46a9      	mov	r9, r5
 8005dfc:	f04f 0c00 	mov.w	ip, #0
 8005e00:	f104 0e14 	add.w	lr, r4, #20
 8005e04:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005e08:	f8d9 1000 	ldr.w	r1, [r9]
 8005e0c:	fa1f fb82 	uxth.w	fp, r2
 8005e10:	b289      	uxth	r1, r1
 8005e12:	fb0a 110b 	mla	r1, sl, fp, r1
 8005e16:	4461      	add	r1, ip
 8005e18:	f8d9 c000 	ldr.w	ip, [r9]
 8005e1c:	0c12      	lsrs	r2, r2, #16
 8005e1e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005e22:	fb0a c202 	mla	r2, sl, r2, ip
 8005e26:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005e2a:	b289      	uxth	r1, r1
 8005e2c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005e30:	4577      	cmp	r7, lr
 8005e32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005e36:	f849 1b04 	str.w	r1, [r9], #4
 8005e3a:	d8e3      	bhi.n	8005e04 <__multiply+0xb0>
 8005e3c:	9a01      	ldr	r2, [sp, #4]
 8005e3e:	f845 c002 	str.w	ip, [r5, r2]
 8005e42:	9a03      	ldr	r2, [sp, #12]
 8005e44:	3304      	adds	r3, #4
 8005e46:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005e4a:	f1b9 0f00 	cmp.w	r9, #0
 8005e4e:	d020      	beq.n	8005e92 <__multiply+0x13e>
 8005e50:	46ae      	mov	lr, r5
 8005e52:	f04f 0a00 	mov.w	sl, #0
 8005e56:	6829      	ldr	r1, [r5, #0]
 8005e58:	f104 0c14 	add.w	ip, r4, #20
 8005e5c:	f8bc b000 	ldrh.w	fp, [ip]
 8005e60:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005e64:	b289      	uxth	r1, r1
 8005e66:	fb09 220b 	mla	r2, r9, fp, r2
 8005e6a:	4492      	add	sl, r2
 8005e6c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005e70:	f84e 1b04 	str.w	r1, [lr], #4
 8005e74:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005e78:	f8be 1000 	ldrh.w	r1, [lr]
 8005e7c:	0c12      	lsrs	r2, r2, #16
 8005e7e:	fb09 1102 	mla	r1, r9, r2, r1
 8005e82:	4567      	cmp	r7, ip
 8005e84:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005e88:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005e8c:	d8e6      	bhi.n	8005e5c <__multiply+0x108>
 8005e8e:	9a01      	ldr	r2, [sp, #4]
 8005e90:	50a9      	str	r1, [r5, r2]
 8005e92:	3504      	adds	r5, #4
 8005e94:	e79b      	b.n	8005dce <__multiply+0x7a>
 8005e96:	3e01      	subs	r6, #1
 8005e98:	e79d      	b.n	8005dd6 <__multiply+0x82>
 8005e9a:	bf00      	nop
 8005e9c:	080083bf 	.word	0x080083bf
 8005ea0:	080083d0 	.word	0x080083d0

08005ea4 <__pow5mult>:
 8005ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ea8:	4615      	mov	r5, r2
 8005eaa:	f012 0203 	ands.w	r2, r2, #3
 8005eae:	4606      	mov	r6, r0
 8005eb0:	460f      	mov	r7, r1
 8005eb2:	d007      	beq.n	8005ec4 <__pow5mult+0x20>
 8005eb4:	4c25      	ldr	r4, [pc, #148]	; (8005f4c <__pow5mult+0xa8>)
 8005eb6:	3a01      	subs	r2, #1
 8005eb8:	2300      	movs	r3, #0
 8005eba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005ebe:	f7ff fe9f 	bl	8005c00 <__multadd>
 8005ec2:	4607      	mov	r7, r0
 8005ec4:	10ad      	asrs	r5, r5, #2
 8005ec6:	d03d      	beq.n	8005f44 <__pow5mult+0xa0>
 8005ec8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005eca:	b97c      	cbnz	r4, 8005eec <__pow5mult+0x48>
 8005ecc:	2010      	movs	r0, #16
 8005ece:	f7ff fe11 	bl	8005af4 <malloc>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	6270      	str	r0, [r6, #36]	; 0x24
 8005ed6:	b928      	cbnz	r0, 8005ee4 <__pow5mult+0x40>
 8005ed8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005edc:	4b1c      	ldr	r3, [pc, #112]	; (8005f50 <__pow5mult+0xac>)
 8005ede:	481d      	ldr	r0, [pc, #116]	; (8005f54 <__pow5mult+0xb0>)
 8005ee0:	f000 fc0a 	bl	80066f8 <__assert_func>
 8005ee4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ee8:	6004      	str	r4, [r0, #0]
 8005eea:	60c4      	str	r4, [r0, #12]
 8005eec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005ef0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005ef4:	b94c      	cbnz	r4, 8005f0a <__pow5mult+0x66>
 8005ef6:	f240 2171 	movw	r1, #625	; 0x271
 8005efa:	4630      	mov	r0, r6
 8005efc:	f7ff ff14 	bl	8005d28 <__i2b>
 8005f00:	2300      	movs	r3, #0
 8005f02:	4604      	mov	r4, r0
 8005f04:	f8c8 0008 	str.w	r0, [r8, #8]
 8005f08:	6003      	str	r3, [r0, #0]
 8005f0a:	f04f 0900 	mov.w	r9, #0
 8005f0e:	07eb      	lsls	r3, r5, #31
 8005f10:	d50a      	bpl.n	8005f28 <__pow5mult+0x84>
 8005f12:	4639      	mov	r1, r7
 8005f14:	4622      	mov	r2, r4
 8005f16:	4630      	mov	r0, r6
 8005f18:	f7ff ff1c 	bl	8005d54 <__multiply>
 8005f1c:	4680      	mov	r8, r0
 8005f1e:	4639      	mov	r1, r7
 8005f20:	4630      	mov	r0, r6
 8005f22:	f7ff fe4b 	bl	8005bbc <_Bfree>
 8005f26:	4647      	mov	r7, r8
 8005f28:	106d      	asrs	r5, r5, #1
 8005f2a:	d00b      	beq.n	8005f44 <__pow5mult+0xa0>
 8005f2c:	6820      	ldr	r0, [r4, #0]
 8005f2e:	b938      	cbnz	r0, 8005f40 <__pow5mult+0x9c>
 8005f30:	4622      	mov	r2, r4
 8005f32:	4621      	mov	r1, r4
 8005f34:	4630      	mov	r0, r6
 8005f36:	f7ff ff0d 	bl	8005d54 <__multiply>
 8005f3a:	6020      	str	r0, [r4, #0]
 8005f3c:	f8c0 9000 	str.w	r9, [r0]
 8005f40:	4604      	mov	r4, r0
 8005f42:	e7e4      	b.n	8005f0e <__pow5mult+0x6a>
 8005f44:	4638      	mov	r0, r7
 8005f46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f4a:	bf00      	nop
 8005f4c:	08008520 	.word	0x08008520
 8005f50:	0800834d 	.word	0x0800834d
 8005f54:	080083d0 	.word	0x080083d0

08005f58 <__lshift>:
 8005f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f5c:	460c      	mov	r4, r1
 8005f5e:	4607      	mov	r7, r0
 8005f60:	4691      	mov	r9, r2
 8005f62:	6923      	ldr	r3, [r4, #16]
 8005f64:	6849      	ldr	r1, [r1, #4]
 8005f66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005f6a:	68a3      	ldr	r3, [r4, #8]
 8005f6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005f70:	f108 0601 	add.w	r6, r8, #1
 8005f74:	42b3      	cmp	r3, r6
 8005f76:	db0b      	blt.n	8005f90 <__lshift+0x38>
 8005f78:	4638      	mov	r0, r7
 8005f7a:	f7ff fddf 	bl	8005b3c <_Balloc>
 8005f7e:	4605      	mov	r5, r0
 8005f80:	b948      	cbnz	r0, 8005f96 <__lshift+0x3e>
 8005f82:	4602      	mov	r2, r0
 8005f84:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005f88:	4b29      	ldr	r3, [pc, #164]	; (8006030 <__lshift+0xd8>)
 8005f8a:	482a      	ldr	r0, [pc, #168]	; (8006034 <__lshift+0xdc>)
 8005f8c:	f000 fbb4 	bl	80066f8 <__assert_func>
 8005f90:	3101      	adds	r1, #1
 8005f92:	005b      	lsls	r3, r3, #1
 8005f94:	e7ee      	b.n	8005f74 <__lshift+0x1c>
 8005f96:	2300      	movs	r3, #0
 8005f98:	f100 0114 	add.w	r1, r0, #20
 8005f9c:	f100 0210 	add.w	r2, r0, #16
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	4553      	cmp	r3, sl
 8005fa4:	db37      	blt.n	8006016 <__lshift+0xbe>
 8005fa6:	6920      	ldr	r0, [r4, #16]
 8005fa8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005fac:	f104 0314 	add.w	r3, r4, #20
 8005fb0:	f019 091f 	ands.w	r9, r9, #31
 8005fb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005fb8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005fbc:	d02f      	beq.n	800601e <__lshift+0xc6>
 8005fbe:	468a      	mov	sl, r1
 8005fc0:	f04f 0c00 	mov.w	ip, #0
 8005fc4:	f1c9 0e20 	rsb	lr, r9, #32
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	fa02 f209 	lsl.w	r2, r2, r9
 8005fce:	ea42 020c 	orr.w	r2, r2, ip
 8005fd2:	f84a 2b04 	str.w	r2, [sl], #4
 8005fd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fda:	4298      	cmp	r0, r3
 8005fdc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005fe0:	d8f2      	bhi.n	8005fc8 <__lshift+0x70>
 8005fe2:	1b03      	subs	r3, r0, r4
 8005fe4:	3b15      	subs	r3, #21
 8005fe6:	f023 0303 	bic.w	r3, r3, #3
 8005fea:	3304      	adds	r3, #4
 8005fec:	f104 0215 	add.w	r2, r4, #21
 8005ff0:	4290      	cmp	r0, r2
 8005ff2:	bf38      	it	cc
 8005ff4:	2304      	movcc	r3, #4
 8005ff6:	f841 c003 	str.w	ip, [r1, r3]
 8005ffa:	f1bc 0f00 	cmp.w	ip, #0
 8005ffe:	d001      	beq.n	8006004 <__lshift+0xac>
 8006000:	f108 0602 	add.w	r6, r8, #2
 8006004:	3e01      	subs	r6, #1
 8006006:	4638      	mov	r0, r7
 8006008:	4621      	mov	r1, r4
 800600a:	612e      	str	r6, [r5, #16]
 800600c:	f7ff fdd6 	bl	8005bbc <_Bfree>
 8006010:	4628      	mov	r0, r5
 8006012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006016:	f842 0f04 	str.w	r0, [r2, #4]!
 800601a:	3301      	adds	r3, #1
 800601c:	e7c1      	b.n	8005fa2 <__lshift+0x4a>
 800601e:	3904      	subs	r1, #4
 8006020:	f853 2b04 	ldr.w	r2, [r3], #4
 8006024:	4298      	cmp	r0, r3
 8006026:	f841 2f04 	str.w	r2, [r1, #4]!
 800602a:	d8f9      	bhi.n	8006020 <__lshift+0xc8>
 800602c:	e7ea      	b.n	8006004 <__lshift+0xac>
 800602e:	bf00      	nop
 8006030:	080083bf 	.word	0x080083bf
 8006034:	080083d0 	.word	0x080083d0

08006038 <__mcmp>:
 8006038:	4603      	mov	r3, r0
 800603a:	690a      	ldr	r2, [r1, #16]
 800603c:	6900      	ldr	r0, [r0, #16]
 800603e:	b530      	push	{r4, r5, lr}
 8006040:	1a80      	subs	r0, r0, r2
 8006042:	d10d      	bne.n	8006060 <__mcmp+0x28>
 8006044:	3314      	adds	r3, #20
 8006046:	3114      	adds	r1, #20
 8006048:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800604c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006050:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006054:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006058:	4295      	cmp	r5, r2
 800605a:	d002      	beq.n	8006062 <__mcmp+0x2a>
 800605c:	d304      	bcc.n	8006068 <__mcmp+0x30>
 800605e:	2001      	movs	r0, #1
 8006060:	bd30      	pop	{r4, r5, pc}
 8006062:	42a3      	cmp	r3, r4
 8006064:	d3f4      	bcc.n	8006050 <__mcmp+0x18>
 8006066:	e7fb      	b.n	8006060 <__mcmp+0x28>
 8006068:	f04f 30ff 	mov.w	r0, #4294967295
 800606c:	e7f8      	b.n	8006060 <__mcmp+0x28>
	...

08006070 <__mdiff>:
 8006070:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006074:	460d      	mov	r5, r1
 8006076:	4607      	mov	r7, r0
 8006078:	4611      	mov	r1, r2
 800607a:	4628      	mov	r0, r5
 800607c:	4614      	mov	r4, r2
 800607e:	f7ff ffdb 	bl	8006038 <__mcmp>
 8006082:	1e06      	subs	r6, r0, #0
 8006084:	d111      	bne.n	80060aa <__mdiff+0x3a>
 8006086:	4631      	mov	r1, r6
 8006088:	4638      	mov	r0, r7
 800608a:	f7ff fd57 	bl	8005b3c <_Balloc>
 800608e:	4602      	mov	r2, r0
 8006090:	b928      	cbnz	r0, 800609e <__mdiff+0x2e>
 8006092:	f240 2132 	movw	r1, #562	; 0x232
 8006096:	4b3a      	ldr	r3, [pc, #232]	; (8006180 <__mdiff+0x110>)
 8006098:	483a      	ldr	r0, [pc, #232]	; (8006184 <__mdiff+0x114>)
 800609a:	f000 fb2d 	bl	80066f8 <__assert_func>
 800609e:	2301      	movs	r3, #1
 80060a0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80060a4:	4610      	mov	r0, r2
 80060a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060aa:	bfa4      	itt	ge
 80060ac:	4623      	movge	r3, r4
 80060ae:	462c      	movge	r4, r5
 80060b0:	4638      	mov	r0, r7
 80060b2:	6861      	ldr	r1, [r4, #4]
 80060b4:	bfa6      	itte	ge
 80060b6:	461d      	movge	r5, r3
 80060b8:	2600      	movge	r6, #0
 80060ba:	2601      	movlt	r6, #1
 80060bc:	f7ff fd3e 	bl	8005b3c <_Balloc>
 80060c0:	4602      	mov	r2, r0
 80060c2:	b918      	cbnz	r0, 80060cc <__mdiff+0x5c>
 80060c4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80060c8:	4b2d      	ldr	r3, [pc, #180]	; (8006180 <__mdiff+0x110>)
 80060ca:	e7e5      	b.n	8006098 <__mdiff+0x28>
 80060cc:	f102 0814 	add.w	r8, r2, #20
 80060d0:	46c2      	mov	sl, r8
 80060d2:	f04f 0c00 	mov.w	ip, #0
 80060d6:	6927      	ldr	r7, [r4, #16]
 80060d8:	60c6      	str	r6, [r0, #12]
 80060da:	692e      	ldr	r6, [r5, #16]
 80060dc:	f104 0014 	add.w	r0, r4, #20
 80060e0:	f105 0914 	add.w	r9, r5, #20
 80060e4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80060e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80060ec:	3410      	adds	r4, #16
 80060ee:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80060f2:	f859 3b04 	ldr.w	r3, [r9], #4
 80060f6:	fa1f f18b 	uxth.w	r1, fp
 80060fa:	448c      	add	ip, r1
 80060fc:	b299      	uxth	r1, r3
 80060fe:	0c1b      	lsrs	r3, r3, #16
 8006100:	ebac 0101 	sub.w	r1, ip, r1
 8006104:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006108:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800610c:	b289      	uxth	r1, r1
 800610e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006112:	454e      	cmp	r6, r9
 8006114:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006118:	f84a 3b04 	str.w	r3, [sl], #4
 800611c:	d8e7      	bhi.n	80060ee <__mdiff+0x7e>
 800611e:	1b73      	subs	r3, r6, r5
 8006120:	3b15      	subs	r3, #21
 8006122:	f023 0303 	bic.w	r3, r3, #3
 8006126:	3515      	adds	r5, #21
 8006128:	3304      	adds	r3, #4
 800612a:	42ae      	cmp	r6, r5
 800612c:	bf38      	it	cc
 800612e:	2304      	movcc	r3, #4
 8006130:	4418      	add	r0, r3
 8006132:	4443      	add	r3, r8
 8006134:	461e      	mov	r6, r3
 8006136:	4605      	mov	r5, r0
 8006138:	4575      	cmp	r5, lr
 800613a:	d30e      	bcc.n	800615a <__mdiff+0xea>
 800613c:	f10e 0103 	add.w	r1, lr, #3
 8006140:	1a09      	subs	r1, r1, r0
 8006142:	f021 0103 	bic.w	r1, r1, #3
 8006146:	3803      	subs	r0, #3
 8006148:	4586      	cmp	lr, r0
 800614a:	bf38      	it	cc
 800614c:	2100      	movcc	r1, #0
 800614e:	4419      	add	r1, r3
 8006150:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006154:	b18b      	cbz	r3, 800617a <__mdiff+0x10a>
 8006156:	6117      	str	r7, [r2, #16]
 8006158:	e7a4      	b.n	80060a4 <__mdiff+0x34>
 800615a:	f855 8b04 	ldr.w	r8, [r5], #4
 800615e:	fa1f f188 	uxth.w	r1, r8
 8006162:	4461      	add	r1, ip
 8006164:	140c      	asrs	r4, r1, #16
 8006166:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800616a:	b289      	uxth	r1, r1
 800616c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006170:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006174:	f846 1b04 	str.w	r1, [r6], #4
 8006178:	e7de      	b.n	8006138 <__mdiff+0xc8>
 800617a:	3f01      	subs	r7, #1
 800617c:	e7e8      	b.n	8006150 <__mdiff+0xe0>
 800617e:	bf00      	nop
 8006180:	080083bf 	.word	0x080083bf
 8006184:	080083d0 	.word	0x080083d0

08006188 <__d2b>:
 8006188:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800618c:	2101      	movs	r1, #1
 800618e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006192:	4690      	mov	r8, r2
 8006194:	461d      	mov	r5, r3
 8006196:	f7ff fcd1 	bl	8005b3c <_Balloc>
 800619a:	4604      	mov	r4, r0
 800619c:	b930      	cbnz	r0, 80061ac <__d2b+0x24>
 800619e:	4602      	mov	r2, r0
 80061a0:	f240 310a 	movw	r1, #778	; 0x30a
 80061a4:	4b24      	ldr	r3, [pc, #144]	; (8006238 <__d2b+0xb0>)
 80061a6:	4825      	ldr	r0, [pc, #148]	; (800623c <__d2b+0xb4>)
 80061a8:	f000 faa6 	bl	80066f8 <__assert_func>
 80061ac:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80061b0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80061b4:	bb2d      	cbnz	r5, 8006202 <__d2b+0x7a>
 80061b6:	9301      	str	r3, [sp, #4]
 80061b8:	f1b8 0300 	subs.w	r3, r8, #0
 80061bc:	d026      	beq.n	800620c <__d2b+0x84>
 80061be:	4668      	mov	r0, sp
 80061c0:	9300      	str	r3, [sp, #0]
 80061c2:	f7ff fd83 	bl	8005ccc <__lo0bits>
 80061c6:	9900      	ldr	r1, [sp, #0]
 80061c8:	b1f0      	cbz	r0, 8006208 <__d2b+0x80>
 80061ca:	9a01      	ldr	r2, [sp, #4]
 80061cc:	f1c0 0320 	rsb	r3, r0, #32
 80061d0:	fa02 f303 	lsl.w	r3, r2, r3
 80061d4:	430b      	orrs	r3, r1
 80061d6:	40c2      	lsrs	r2, r0
 80061d8:	6163      	str	r3, [r4, #20]
 80061da:	9201      	str	r2, [sp, #4]
 80061dc:	9b01      	ldr	r3, [sp, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	bf14      	ite	ne
 80061e2:	2102      	movne	r1, #2
 80061e4:	2101      	moveq	r1, #1
 80061e6:	61a3      	str	r3, [r4, #24]
 80061e8:	6121      	str	r1, [r4, #16]
 80061ea:	b1c5      	cbz	r5, 800621e <__d2b+0x96>
 80061ec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80061f0:	4405      	add	r5, r0
 80061f2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80061f6:	603d      	str	r5, [r7, #0]
 80061f8:	6030      	str	r0, [r6, #0]
 80061fa:	4620      	mov	r0, r4
 80061fc:	b002      	add	sp, #8
 80061fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006202:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006206:	e7d6      	b.n	80061b6 <__d2b+0x2e>
 8006208:	6161      	str	r1, [r4, #20]
 800620a:	e7e7      	b.n	80061dc <__d2b+0x54>
 800620c:	a801      	add	r0, sp, #4
 800620e:	f7ff fd5d 	bl	8005ccc <__lo0bits>
 8006212:	2101      	movs	r1, #1
 8006214:	9b01      	ldr	r3, [sp, #4]
 8006216:	6121      	str	r1, [r4, #16]
 8006218:	6163      	str	r3, [r4, #20]
 800621a:	3020      	adds	r0, #32
 800621c:	e7e5      	b.n	80061ea <__d2b+0x62>
 800621e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006222:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006226:	6038      	str	r0, [r7, #0]
 8006228:	6918      	ldr	r0, [r3, #16]
 800622a:	f7ff fd2f 	bl	8005c8c <__hi0bits>
 800622e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006232:	6031      	str	r1, [r6, #0]
 8006234:	e7e1      	b.n	80061fa <__d2b+0x72>
 8006236:	bf00      	nop
 8006238:	080083bf 	.word	0x080083bf
 800623c:	080083d0 	.word	0x080083d0

08006240 <_calloc_r>:
 8006240:	b570      	push	{r4, r5, r6, lr}
 8006242:	fba1 5402 	umull	r5, r4, r1, r2
 8006246:	b934      	cbnz	r4, 8006256 <_calloc_r+0x16>
 8006248:	4629      	mov	r1, r5
 800624a:	f000 f875 	bl	8006338 <_malloc_r>
 800624e:	4606      	mov	r6, r0
 8006250:	b928      	cbnz	r0, 800625e <_calloc_r+0x1e>
 8006252:	4630      	mov	r0, r6
 8006254:	bd70      	pop	{r4, r5, r6, pc}
 8006256:	220c      	movs	r2, #12
 8006258:	2600      	movs	r6, #0
 800625a:	6002      	str	r2, [r0, #0]
 800625c:	e7f9      	b.n	8006252 <_calloc_r+0x12>
 800625e:	462a      	mov	r2, r5
 8006260:	4621      	mov	r1, r4
 8006262:	f7fe f941 	bl	80044e8 <memset>
 8006266:	e7f4      	b.n	8006252 <_calloc_r+0x12>

08006268 <_free_r>:
 8006268:	b538      	push	{r3, r4, r5, lr}
 800626a:	4605      	mov	r5, r0
 800626c:	2900      	cmp	r1, #0
 800626e:	d040      	beq.n	80062f2 <_free_r+0x8a>
 8006270:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006274:	1f0c      	subs	r4, r1, #4
 8006276:	2b00      	cmp	r3, #0
 8006278:	bfb8      	it	lt
 800627a:	18e4      	addlt	r4, r4, r3
 800627c:	f000 fa98 	bl	80067b0 <__malloc_lock>
 8006280:	4a1c      	ldr	r2, [pc, #112]	; (80062f4 <_free_r+0x8c>)
 8006282:	6813      	ldr	r3, [r2, #0]
 8006284:	b933      	cbnz	r3, 8006294 <_free_r+0x2c>
 8006286:	6063      	str	r3, [r4, #4]
 8006288:	6014      	str	r4, [r2, #0]
 800628a:	4628      	mov	r0, r5
 800628c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006290:	f000 ba94 	b.w	80067bc <__malloc_unlock>
 8006294:	42a3      	cmp	r3, r4
 8006296:	d908      	bls.n	80062aa <_free_r+0x42>
 8006298:	6820      	ldr	r0, [r4, #0]
 800629a:	1821      	adds	r1, r4, r0
 800629c:	428b      	cmp	r3, r1
 800629e:	bf01      	itttt	eq
 80062a0:	6819      	ldreq	r1, [r3, #0]
 80062a2:	685b      	ldreq	r3, [r3, #4]
 80062a4:	1809      	addeq	r1, r1, r0
 80062a6:	6021      	streq	r1, [r4, #0]
 80062a8:	e7ed      	b.n	8006286 <_free_r+0x1e>
 80062aa:	461a      	mov	r2, r3
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	b10b      	cbz	r3, 80062b4 <_free_r+0x4c>
 80062b0:	42a3      	cmp	r3, r4
 80062b2:	d9fa      	bls.n	80062aa <_free_r+0x42>
 80062b4:	6811      	ldr	r1, [r2, #0]
 80062b6:	1850      	adds	r0, r2, r1
 80062b8:	42a0      	cmp	r0, r4
 80062ba:	d10b      	bne.n	80062d4 <_free_r+0x6c>
 80062bc:	6820      	ldr	r0, [r4, #0]
 80062be:	4401      	add	r1, r0
 80062c0:	1850      	adds	r0, r2, r1
 80062c2:	4283      	cmp	r3, r0
 80062c4:	6011      	str	r1, [r2, #0]
 80062c6:	d1e0      	bne.n	800628a <_free_r+0x22>
 80062c8:	6818      	ldr	r0, [r3, #0]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	4401      	add	r1, r0
 80062ce:	6011      	str	r1, [r2, #0]
 80062d0:	6053      	str	r3, [r2, #4]
 80062d2:	e7da      	b.n	800628a <_free_r+0x22>
 80062d4:	d902      	bls.n	80062dc <_free_r+0x74>
 80062d6:	230c      	movs	r3, #12
 80062d8:	602b      	str	r3, [r5, #0]
 80062da:	e7d6      	b.n	800628a <_free_r+0x22>
 80062dc:	6820      	ldr	r0, [r4, #0]
 80062de:	1821      	adds	r1, r4, r0
 80062e0:	428b      	cmp	r3, r1
 80062e2:	bf01      	itttt	eq
 80062e4:	6819      	ldreq	r1, [r3, #0]
 80062e6:	685b      	ldreq	r3, [r3, #4]
 80062e8:	1809      	addeq	r1, r1, r0
 80062ea:	6021      	streq	r1, [r4, #0]
 80062ec:	6063      	str	r3, [r4, #4]
 80062ee:	6054      	str	r4, [r2, #4]
 80062f0:	e7cb      	b.n	800628a <_free_r+0x22>
 80062f2:	bd38      	pop	{r3, r4, r5, pc}
 80062f4:	200003e8 	.word	0x200003e8

080062f8 <sbrk_aligned>:
 80062f8:	b570      	push	{r4, r5, r6, lr}
 80062fa:	4e0e      	ldr	r6, [pc, #56]	; (8006334 <sbrk_aligned+0x3c>)
 80062fc:	460c      	mov	r4, r1
 80062fe:	6831      	ldr	r1, [r6, #0]
 8006300:	4605      	mov	r5, r0
 8006302:	b911      	cbnz	r1, 800630a <sbrk_aligned+0x12>
 8006304:	f000 f9e8 	bl	80066d8 <_sbrk_r>
 8006308:	6030      	str	r0, [r6, #0]
 800630a:	4621      	mov	r1, r4
 800630c:	4628      	mov	r0, r5
 800630e:	f000 f9e3 	bl	80066d8 <_sbrk_r>
 8006312:	1c43      	adds	r3, r0, #1
 8006314:	d00a      	beq.n	800632c <sbrk_aligned+0x34>
 8006316:	1cc4      	adds	r4, r0, #3
 8006318:	f024 0403 	bic.w	r4, r4, #3
 800631c:	42a0      	cmp	r0, r4
 800631e:	d007      	beq.n	8006330 <sbrk_aligned+0x38>
 8006320:	1a21      	subs	r1, r4, r0
 8006322:	4628      	mov	r0, r5
 8006324:	f000 f9d8 	bl	80066d8 <_sbrk_r>
 8006328:	3001      	adds	r0, #1
 800632a:	d101      	bne.n	8006330 <sbrk_aligned+0x38>
 800632c:	f04f 34ff 	mov.w	r4, #4294967295
 8006330:	4620      	mov	r0, r4
 8006332:	bd70      	pop	{r4, r5, r6, pc}
 8006334:	200003ec 	.word	0x200003ec

08006338 <_malloc_r>:
 8006338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800633c:	1ccd      	adds	r5, r1, #3
 800633e:	f025 0503 	bic.w	r5, r5, #3
 8006342:	3508      	adds	r5, #8
 8006344:	2d0c      	cmp	r5, #12
 8006346:	bf38      	it	cc
 8006348:	250c      	movcc	r5, #12
 800634a:	2d00      	cmp	r5, #0
 800634c:	4607      	mov	r7, r0
 800634e:	db01      	blt.n	8006354 <_malloc_r+0x1c>
 8006350:	42a9      	cmp	r1, r5
 8006352:	d905      	bls.n	8006360 <_malloc_r+0x28>
 8006354:	230c      	movs	r3, #12
 8006356:	2600      	movs	r6, #0
 8006358:	603b      	str	r3, [r7, #0]
 800635a:	4630      	mov	r0, r6
 800635c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006360:	4e2e      	ldr	r6, [pc, #184]	; (800641c <_malloc_r+0xe4>)
 8006362:	f000 fa25 	bl	80067b0 <__malloc_lock>
 8006366:	6833      	ldr	r3, [r6, #0]
 8006368:	461c      	mov	r4, r3
 800636a:	bb34      	cbnz	r4, 80063ba <_malloc_r+0x82>
 800636c:	4629      	mov	r1, r5
 800636e:	4638      	mov	r0, r7
 8006370:	f7ff ffc2 	bl	80062f8 <sbrk_aligned>
 8006374:	1c43      	adds	r3, r0, #1
 8006376:	4604      	mov	r4, r0
 8006378:	d14d      	bne.n	8006416 <_malloc_r+0xde>
 800637a:	6834      	ldr	r4, [r6, #0]
 800637c:	4626      	mov	r6, r4
 800637e:	2e00      	cmp	r6, #0
 8006380:	d140      	bne.n	8006404 <_malloc_r+0xcc>
 8006382:	6823      	ldr	r3, [r4, #0]
 8006384:	4631      	mov	r1, r6
 8006386:	4638      	mov	r0, r7
 8006388:	eb04 0803 	add.w	r8, r4, r3
 800638c:	f000 f9a4 	bl	80066d8 <_sbrk_r>
 8006390:	4580      	cmp	r8, r0
 8006392:	d13a      	bne.n	800640a <_malloc_r+0xd2>
 8006394:	6821      	ldr	r1, [r4, #0]
 8006396:	3503      	adds	r5, #3
 8006398:	1a6d      	subs	r5, r5, r1
 800639a:	f025 0503 	bic.w	r5, r5, #3
 800639e:	3508      	adds	r5, #8
 80063a0:	2d0c      	cmp	r5, #12
 80063a2:	bf38      	it	cc
 80063a4:	250c      	movcc	r5, #12
 80063a6:	4638      	mov	r0, r7
 80063a8:	4629      	mov	r1, r5
 80063aa:	f7ff ffa5 	bl	80062f8 <sbrk_aligned>
 80063ae:	3001      	adds	r0, #1
 80063b0:	d02b      	beq.n	800640a <_malloc_r+0xd2>
 80063b2:	6823      	ldr	r3, [r4, #0]
 80063b4:	442b      	add	r3, r5
 80063b6:	6023      	str	r3, [r4, #0]
 80063b8:	e00e      	b.n	80063d8 <_malloc_r+0xa0>
 80063ba:	6822      	ldr	r2, [r4, #0]
 80063bc:	1b52      	subs	r2, r2, r5
 80063be:	d41e      	bmi.n	80063fe <_malloc_r+0xc6>
 80063c0:	2a0b      	cmp	r2, #11
 80063c2:	d916      	bls.n	80063f2 <_malloc_r+0xba>
 80063c4:	1961      	adds	r1, r4, r5
 80063c6:	42a3      	cmp	r3, r4
 80063c8:	6025      	str	r5, [r4, #0]
 80063ca:	bf18      	it	ne
 80063cc:	6059      	strne	r1, [r3, #4]
 80063ce:	6863      	ldr	r3, [r4, #4]
 80063d0:	bf08      	it	eq
 80063d2:	6031      	streq	r1, [r6, #0]
 80063d4:	5162      	str	r2, [r4, r5]
 80063d6:	604b      	str	r3, [r1, #4]
 80063d8:	4638      	mov	r0, r7
 80063da:	f104 060b 	add.w	r6, r4, #11
 80063de:	f000 f9ed 	bl	80067bc <__malloc_unlock>
 80063e2:	f026 0607 	bic.w	r6, r6, #7
 80063e6:	1d23      	adds	r3, r4, #4
 80063e8:	1af2      	subs	r2, r6, r3
 80063ea:	d0b6      	beq.n	800635a <_malloc_r+0x22>
 80063ec:	1b9b      	subs	r3, r3, r6
 80063ee:	50a3      	str	r3, [r4, r2]
 80063f0:	e7b3      	b.n	800635a <_malloc_r+0x22>
 80063f2:	6862      	ldr	r2, [r4, #4]
 80063f4:	42a3      	cmp	r3, r4
 80063f6:	bf0c      	ite	eq
 80063f8:	6032      	streq	r2, [r6, #0]
 80063fa:	605a      	strne	r2, [r3, #4]
 80063fc:	e7ec      	b.n	80063d8 <_malloc_r+0xa0>
 80063fe:	4623      	mov	r3, r4
 8006400:	6864      	ldr	r4, [r4, #4]
 8006402:	e7b2      	b.n	800636a <_malloc_r+0x32>
 8006404:	4634      	mov	r4, r6
 8006406:	6876      	ldr	r6, [r6, #4]
 8006408:	e7b9      	b.n	800637e <_malloc_r+0x46>
 800640a:	230c      	movs	r3, #12
 800640c:	4638      	mov	r0, r7
 800640e:	603b      	str	r3, [r7, #0]
 8006410:	f000 f9d4 	bl	80067bc <__malloc_unlock>
 8006414:	e7a1      	b.n	800635a <_malloc_r+0x22>
 8006416:	6025      	str	r5, [r4, #0]
 8006418:	e7de      	b.n	80063d8 <_malloc_r+0xa0>
 800641a:	bf00      	nop
 800641c:	200003e8 	.word	0x200003e8

08006420 <__ssputs_r>:
 8006420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006424:	688e      	ldr	r6, [r1, #8]
 8006426:	4682      	mov	sl, r0
 8006428:	429e      	cmp	r6, r3
 800642a:	460c      	mov	r4, r1
 800642c:	4690      	mov	r8, r2
 800642e:	461f      	mov	r7, r3
 8006430:	d838      	bhi.n	80064a4 <__ssputs_r+0x84>
 8006432:	898a      	ldrh	r2, [r1, #12]
 8006434:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006438:	d032      	beq.n	80064a0 <__ssputs_r+0x80>
 800643a:	6825      	ldr	r5, [r4, #0]
 800643c:	6909      	ldr	r1, [r1, #16]
 800643e:	3301      	adds	r3, #1
 8006440:	eba5 0901 	sub.w	r9, r5, r1
 8006444:	6965      	ldr	r5, [r4, #20]
 8006446:	444b      	add	r3, r9
 8006448:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800644c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006450:	106d      	asrs	r5, r5, #1
 8006452:	429d      	cmp	r5, r3
 8006454:	bf38      	it	cc
 8006456:	461d      	movcc	r5, r3
 8006458:	0553      	lsls	r3, r2, #21
 800645a:	d531      	bpl.n	80064c0 <__ssputs_r+0xa0>
 800645c:	4629      	mov	r1, r5
 800645e:	f7ff ff6b 	bl	8006338 <_malloc_r>
 8006462:	4606      	mov	r6, r0
 8006464:	b950      	cbnz	r0, 800647c <__ssputs_r+0x5c>
 8006466:	230c      	movs	r3, #12
 8006468:	f04f 30ff 	mov.w	r0, #4294967295
 800646c:	f8ca 3000 	str.w	r3, [sl]
 8006470:	89a3      	ldrh	r3, [r4, #12]
 8006472:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006476:	81a3      	strh	r3, [r4, #12]
 8006478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800647c:	464a      	mov	r2, r9
 800647e:	6921      	ldr	r1, [r4, #16]
 8006480:	f7ff fb4e 	bl	8005b20 <memcpy>
 8006484:	89a3      	ldrh	r3, [r4, #12]
 8006486:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800648a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800648e:	81a3      	strh	r3, [r4, #12]
 8006490:	6126      	str	r6, [r4, #16]
 8006492:	444e      	add	r6, r9
 8006494:	6026      	str	r6, [r4, #0]
 8006496:	463e      	mov	r6, r7
 8006498:	6165      	str	r5, [r4, #20]
 800649a:	eba5 0509 	sub.w	r5, r5, r9
 800649e:	60a5      	str	r5, [r4, #8]
 80064a0:	42be      	cmp	r6, r7
 80064a2:	d900      	bls.n	80064a6 <__ssputs_r+0x86>
 80064a4:	463e      	mov	r6, r7
 80064a6:	4632      	mov	r2, r6
 80064a8:	4641      	mov	r1, r8
 80064aa:	6820      	ldr	r0, [r4, #0]
 80064ac:	f000 f966 	bl	800677c <memmove>
 80064b0:	68a3      	ldr	r3, [r4, #8]
 80064b2:	2000      	movs	r0, #0
 80064b4:	1b9b      	subs	r3, r3, r6
 80064b6:	60a3      	str	r3, [r4, #8]
 80064b8:	6823      	ldr	r3, [r4, #0]
 80064ba:	4433      	add	r3, r6
 80064bc:	6023      	str	r3, [r4, #0]
 80064be:	e7db      	b.n	8006478 <__ssputs_r+0x58>
 80064c0:	462a      	mov	r2, r5
 80064c2:	f000 f981 	bl	80067c8 <_realloc_r>
 80064c6:	4606      	mov	r6, r0
 80064c8:	2800      	cmp	r0, #0
 80064ca:	d1e1      	bne.n	8006490 <__ssputs_r+0x70>
 80064cc:	4650      	mov	r0, sl
 80064ce:	6921      	ldr	r1, [r4, #16]
 80064d0:	f7ff feca 	bl	8006268 <_free_r>
 80064d4:	e7c7      	b.n	8006466 <__ssputs_r+0x46>
	...

080064d8 <_svfiprintf_r>:
 80064d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064dc:	4698      	mov	r8, r3
 80064de:	898b      	ldrh	r3, [r1, #12]
 80064e0:	4607      	mov	r7, r0
 80064e2:	061b      	lsls	r3, r3, #24
 80064e4:	460d      	mov	r5, r1
 80064e6:	4614      	mov	r4, r2
 80064e8:	b09d      	sub	sp, #116	; 0x74
 80064ea:	d50e      	bpl.n	800650a <_svfiprintf_r+0x32>
 80064ec:	690b      	ldr	r3, [r1, #16]
 80064ee:	b963      	cbnz	r3, 800650a <_svfiprintf_r+0x32>
 80064f0:	2140      	movs	r1, #64	; 0x40
 80064f2:	f7ff ff21 	bl	8006338 <_malloc_r>
 80064f6:	6028      	str	r0, [r5, #0]
 80064f8:	6128      	str	r0, [r5, #16]
 80064fa:	b920      	cbnz	r0, 8006506 <_svfiprintf_r+0x2e>
 80064fc:	230c      	movs	r3, #12
 80064fe:	603b      	str	r3, [r7, #0]
 8006500:	f04f 30ff 	mov.w	r0, #4294967295
 8006504:	e0d1      	b.n	80066aa <_svfiprintf_r+0x1d2>
 8006506:	2340      	movs	r3, #64	; 0x40
 8006508:	616b      	str	r3, [r5, #20]
 800650a:	2300      	movs	r3, #0
 800650c:	9309      	str	r3, [sp, #36]	; 0x24
 800650e:	2320      	movs	r3, #32
 8006510:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006514:	2330      	movs	r3, #48	; 0x30
 8006516:	f04f 0901 	mov.w	r9, #1
 800651a:	f8cd 800c 	str.w	r8, [sp, #12]
 800651e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80066c4 <_svfiprintf_r+0x1ec>
 8006522:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006526:	4623      	mov	r3, r4
 8006528:	469a      	mov	sl, r3
 800652a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800652e:	b10a      	cbz	r2, 8006534 <_svfiprintf_r+0x5c>
 8006530:	2a25      	cmp	r2, #37	; 0x25
 8006532:	d1f9      	bne.n	8006528 <_svfiprintf_r+0x50>
 8006534:	ebba 0b04 	subs.w	fp, sl, r4
 8006538:	d00b      	beq.n	8006552 <_svfiprintf_r+0x7a>
 800653a:	465b      	mov	r3, fp
 800653c:	4622      	mov	r2, r4
 800653e:	4629      	mov	r1, r5
 8006540:	4638      	mov	r0, r7
 8006542:	f7ff ff6d 	bl	8006420 <__ssputs_r>
 8006546:	3001      	adds	r0, #1
 8006548:	f000 80aa 	beq.w	80066a0 <_svfiprintf_r+0x1c8>
 800654c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800654e:	445a      	add	r2, fp
 8006550:	9209      	str	r2, [sp, #36]	; 0x24
 8006552:	f89a 3000 	ldrb.w	r3, [sl]
 8006556:	2b00      	cmp	r3, #0
 8006558:	f000 80a2 	beq.w	80066a0 <_svfiprintf_r+0x1c8>
 800655c:	2300      	movs	r3, #0
 800655e:	f04f 32ff 	mov.w	r2, #4294967295
 8006562:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006566:	f10a 0a01 	add.w	sl, sl, #1
 800656a:	9304      	str	r3, [sp, #16]
 800656c:	9307      	str	r3, [sp, #28]
 800656e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006572:	931a      	str	r3, [sp, #104]	; 0x68
 8006574:	4654      	mov	r4, sl
 8006576:	2205      	movs	r2, #5
 8006578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800657c:	4851      	ldr	r0, [pc, #324]	; (80066c4 <_svfiprintf_r+0x1ec>)
 800657e:	f7ff fac1 	bl	8005b04 <memchr>
 8006582:	9a04      	ldr	r2, [sp, #16]
 8006584:	b9d8      	cbnz	r0, 80065be <_svfiprintf_r+0xe6>
 8006586:	06d0      	lsls	r0, r2, #27
 8006588:	bf44      	itt	mi
 800658a:	2320      	movmi	r3, #32
 800658c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006590:	0711      	lsls	r1, r2, #28
 8006592:	bf44      	itt	mi
 8006594:	232b      	movmi	r3, #43	; 0x2b
 8006596:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800659a:	f89a 3000 	ldrb.w	r3, [sl]
 800659e:	2b2a      	cmp	r3, #42	; 0x2a
 80065a0:	d015      	beq.n	80065ce <_svfiprintf_r+0xf6>
 80065a2:	4654      	mov	r4, sl
 80065a4:	2000      	movs	r0, #0
 80065a6:	f04f 0c0a 	mov.w	ip, #10
 80065aa:	9a07      	ldr	r2, [sp, #28]
 80065ac:	4621      	mov	r1, r4
 80065ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065b2:	3b30      	subs	r3, #48	; 0x30
 80065b4:	2b09      	cmp	r3, #9
 80065b6:	d94e      	bls.n	8006656 <_svfiprintf_r+0x17e>
 80065b8:	b1b0      	cbz	r0, 80065e8 <_svfiprintf_r+0x110>
 80065ba:	9207      	str	r2, [sp, #28]
 80065bc:	e014      	b.n	80065e8 <_svfiprintf_r+0x110>
 80065be:	eba0 0308 	sub.w	r3, r0, r8
 80065c2:	fa09 f303 	lsl.w	r3, r9, r3
 80065c6:	4313      	orrs	r3, r2
 80065c8:	46a2      	mov	sl, r4
 80065ca:	9304      	str	r3, [sp, #16]
 80065cc:	e7d2      	b.n	8006574 <_svfiprintf_r+0x9c>
 80065ce:	9b03      	ldr	r3, [sp, #12]
 80065d0:	1d19      	adds	r1, r3, #4
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	9103      	str	r1, [sp, #12]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	bfbb      	ittet	lt
 80065da:	425b      	neglt	r3, r3
 80065dc:	f042 0202 	orrlt.w	r2, r2, #2
 80065e0:	9307      	strge	r3, [sp, #28]
 80065e2:	9307      	strlt	r3, [sp, #28]
 80065e4:	bfb8      	it	lt
 80065e6:	9204      	strlt	r2, [sp, #16]
 80065e8:	7823      	ldrb	r3, [r4, #0]
 80065ea:	2b2e      	cmp	r3, #46	; 0x2e
 80065ec:	d10c      	bne.n	8006608 <_svfiprintf_r+0x130>
 80065ee:	7863      	ldrb	r3, [r4, #1]
 80065f0:	2b2a      	cmp	r3, #42	; 0x2a
 80065f2:	d135      	bne.n	8006660 <_svfiprintf_r+0x188>
 80065f4:	9b03      	ldr	r3, [sp, #12]
 80065f6:	3402      	adds	r4, #2
 80065f8:	1d1a      	adds	r2, r3, #4
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	9203      	str	r2, [sp, #12]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	bfb8      	it	lt
 8006602:	f04f 33ff 	movlt.w	r3, #4294967295
 8006606:	9305      	str	r3, [sp, #20]
 8006608:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80066c8 <_svfiprintf_r+0x1f0>
 800660c:	2203      	movs	r2, #3
 800660e:	4650      	mov	r0, sl
 8006610:	7821      	ldrb	r1, [r4, #0]
 8006612:	f7ff fa77 	bl	8005b04 <memchr>
 8006616:	b140      	cbz	r0, 800662a <_svfiprintf_r+0x152>
 8006618:	2340      	movs	r3, #64	; 0x40
 800661a:	eba0 000a 	sub.w	r0, r0, sl
 800661e:	fa03 f000 	lsl.w	r0, r3, r0
 8006622:	9b04      	ldr	r3, [sp, #16]
 8006624:	3401      	adds	r4, #1
 8006626:	4303      	orrs	r3, r0
 8006628:	9304      	str	r3, [sp, #16]
 800662a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800662e:	2206      	movs	r2, #6
 8006630:	4826      	ldr	r0, [pc, #152]	; (80066cc <_svfiprintf_r+0x1f4>)
 8006632:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006636:	f7ff fa65 	bl	8005b04 <memchr>
 800663a:	2800      	cmp	r0, #0
 800663c:	d038      	beq.n	80066b0 <_svfiprintf_r+0x1d8>
 800663e:	4b24      	ldr	r3, [pc, #144]	; (80066d0 <_svfiprintf_r+0x1f8>)
 8006640:	bb1b      	cbnz	r3, 800668a <_svfiprintf_r+0x1b2>
 8006642:	9b03      	ldr	r3, [sp, #12]
 8006644:	3307      	adds	r3, #7
 8006646:	f023 0307 	bic.w	r3, r3, #7
 800664a:	3308      	adds	r3, #8
 800664c:	9303      	str	r3, [sp, #12]
 800664e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006650:	4433      	add	r3, r6
 8006652:	9309      	str	r3, [sp, #36]	; 0x24
 8006654:	e767      	b.n	8006526 <_svfiprintf_r+0x4e>
 8006656:	460c      	mov	r4, r1
 8006658:	2001      	movs	r0, #1
 800665a:	fb0c 3202 	mla	r2, ip, r2, r3
 800665e:	e7a5      	b.n	80065ac <_svfiprintf_r+0xd4>
 8006660:	2300      	movs	r3, #0
 8006662:	f04f 0c0a 	mov.w	ip, #10
 8006666:	4619      	mov	r1, r3
 8006668:	3401      	adds	r4, #1
 800666a:	9305      	str	r3, [sp, #20]
 800666c:	4620      	mov	r0, r4
 800666e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006672:	3a30      	subs	r2, #48	; 0x30
 8006674:	2a09      	cmp	r2, #9
 8006676:	d903      	bls.n	8006680 <_svfiprintf_r+0x1a8>
 8006678:	2b00      	cmp	r3, #0
 800667a:	d0c5      	beq.n	8006608 <_svfiprintf_r+0x130>
 800667c:	9105      	str	r1, [sp, #20]
 800667e:	e7c3      	b.n	8006608 <_svfiprintf_r+0x130>
 8006680:	4604      	mov	r4, r0
 8006682:	2301      	movs	r3, #1
 8006684:	fb0c 2101 	mla	r1, ip, r1, r2
 8006688:	e7f0      	b.n	800666c <_svfiprintf_r+0x194>
 800668a:	ab03      	add	r3, sp, #12
 800668c:	9300      	str	r3, [sp, #0]
 800668e:	462a      	mov	r2, r5
 8006690:	4638      	mov	r0, r7
 8006692:	4b10      	ldr	r3, [pc, #64]	; (80066d4 <_svfiprintf_r+0x1fc>)
 8006694:	a904      	add	r1, sp, #16
 8006696:	f7fd ffcd 	bl	8004634 <_printf_float>
 800669a:	1c42      	adds	r2, r0, #1
 800669c:	4606      	mov	r6, r0
 800669e:	d1d6      	bne.n	800664e <_svfiprintf_r+0x176>
 80066a0:	89ab      	ldrh	r3, [r5, #12]
 80066a2:	065b      	lsls	r3, r3, #25
 80066a4:	f53f af2c 	bmi.w	8006500 <_svfiprintf_r+0x28>
 80066a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066aa:	b01d      	add	sp, #116	; 0x74
 80066ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066b0:	ab03      	add	r3, sp, #12
 80066b2:	9300      	str	r3, [sp, #0]
 80066b4:	462a      	mov	r2, r5
 80066b6:	4638      	mov	r0, r7
 80066b8:	4b06      	ldr	r3, [pc, #24]	; (80066d4 <_svfiprintf_r+0x1fc>)
 80066ba:	a904      	add	r1, sp, #16
 80066bc:	f7fe fa56 	bl	8004b6c <_printf_i>
 80066c0:	e7eb      	b.n	800669a <_svfiprintf_r+0x1c2>
 80066c2:	bf00      	nop
 80066c4:	0800852c 	.word	0x0800852c
 80066c8:	08008532 	.word	0x08008532
 80066cc:	08008536 	.word	0x08008536
 80066d0:	08004635 	.word	0x08004635
 80066d4:	08006421 	.word	0x08006421

080066d8 <_sbrk_r>:
 80066d8:	b538      	push	{r3, r4, r5, lr}
 80066da:	2300      	movs	r3, #0
 80066dc:	4d05      	ldr	r5, [pc, #20]	; (80066f4 <_sbrk_r+0x1c>)
 80066de:	4604      	mov	r4, r0
 80066e0:	4608      	mov	r0, r1
 80066e2:	602b      	str	r3, [r5, #0]
 80066e4:	f7fb fb6a 	bl	8001dbc <_sbrk>
 80066e8:	1c43      	adds	r3, r0, #1
 80066ea:	d102      	bne.n	80066f2 <_sbrk_r+0x1a>
 80066ec:	682b      	ldr	r3, [r5, #0]
 80066ee:	b103      	cbz	r3, 80066f2 <_sbrk_r+0x1a>
 80066f0:	6023      	str	r3, [r4, #0]
 80066f2:	bd38      	pop	{r3, r4, r5, pc}
 80066f4:	200003f0 	.word	0x200003f0

080066f8 <__assert_func>:
 80066f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80066fa:	4614      	mov	r4, r2
 80066fc:	461a      	mov	r2, r3
 80066fe:	4b09      	ldr	r3, [pc, #36]	; (8006724 <__assert_func+0x2c>)
 8006700:	4605      	mov	r5, r0
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68d8      	ldr	r0, [r3, #12]
 8006706:	b14c      	cbz	r4, 800671c <__assert_func+0x24>
 8006708:	4b07      	ldr	r3, [pc, #28]	; (8006728 <__assert_func+0x30>)
 800670a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800670e:	9100      	str	r1, [sp, #0]
 8006710:	462b      	mov	r3, r5
 8006712:	4906      	ldr	r1, [pc, #24]	; (800672c <__assert_func+0x34>)
 8006714:	f000 f80e 	bl	8006734 <fiprintf>
 8006718:	f000 faaa 	bl	8006c70 <abort>
 800671c:	4b04      	ldr	r3, [pc, #16]	; (8006730 <__assert_func+0x38>)
 800671e:	461c      	mov	r4, r3
 8006720:	e7f3      	b.n	800670a <__assert_func+0x12>
 8006722:	bf00      	nop
 8006724:	20000010 	.word	0x20000010
 8006728:	0800853d 	.word	0x0800853d
 800672c:	0800854a 	.word	0x0800854a
 8006730:	08008578 	.word	0x08008578

08006734 <fiprintf>:
 8006734:	b40e      	push	{r1, r2, r3}
 8006736:	b503      	push	{r0, r1, lr}
 8006738:	4601      	mov	r1, r0
 800673a:	ab03      	add	r3, sp, #12
 800673c:	4805      	ldr	r0, [pc, #20]	; (8006754 <fiprintf+0x20>)
 800673e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006742:	6800      	ldr	r0, [r0, #0]
 8006744:	9301      	str	r3, [sp, #4]
 8006746:	f000 f895 	bl	8006874 <_vfiprintf_r>
 800674a:	b002      	add	sp, #8
 800674c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006750:	b003      	add	sp, #12
 8006752:	4770      	bx	lr
 8006754:	20000010 	.word	0x20000010

08006758 <__ascii_mbtowc>:
 8006758:	b082      	sub	sp, #8
 800675a:	b901      	cbnz	r1, 800675e <__ascii_mbtowc+0x6>
 800675c:	a901      	add	r1, sp, #4
 800675e:	b142      	cbz	r2, 8006772 <__ascii_mbtowc+0x1a>
 8006760:	b14b      	cbz	r3, 8006776 <__ascii_mbtowc+0x1e>
 8006762:	7813      	ldrb	r3, [r2, #0]
 8006764:	600b      	str	r3, [r1, #0]
 8006766:	7812      	ldrb	r2, [r2, #0]
 8006768:	1e10      	subs	r0, r2, #0
 800676a:	bf18      	it	ne
 800676c:	2001      	movne	r0, #1
 800676e:	b002      	add	sp, #8
 8006770:	4770      	bx	lr
 8006772:	4610      	mov	r0, r2
 8006774:	e7fb      	b.n	800676e <__ascii_mbtowc+0x16>
 8006776:	f06f 0001 	mvn.w	r0, #1
 800677a:	e7f8      	b.n	800676e <__ascii_mbtowc+0x16>

0800677c <memmove>:
 800677c:	4288      	cmp	r0, r1
 800677e:	b510      	push	{r4, lr}
 8006780:	eb01 0402 	add.w	r4, r1, r2
 8006784:	d902      	bls.n	800678c <memmove+0x10>
 8006786:	4284      	cmp	r4, r0
 8006788:	4623      	mov	r3, r4
 800678a:	d807      	bhi.n	800679c <memmove+0x20>
 800678c:	1e43      	subs	r3, r0, #1
 800678e:	42a1      	cmp	r1, r4
 8006790:	d008      	beq.n	80067a4 <memmove+0x28>
 8006792:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006796:	f803 2f01 	strb.w	r2, [r3, #1]!
 800679a:	e7f8      	b.n	800678e <memmove+0x12>
 800679c:	4601      	mov	r1, r0
 800679e:	4402      	add	r2, r0
 80067a0:	428a      	cmp	r2, r1
 80067a2:	d100      	bne.n	80067a6 <memmove+0x2a>
 80067a4:	bd10      	pop	{r4, pc}
 80067a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80067aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80067ae:	e7f7      	b.n	80067a0 <memmove+0x24>

080067b0 <__malloc_lock>:
 80067b0:	4801      	ldr	r0, [pc, #4]	; (80067b8 <__malloc_lock+0x8>)
 80067b2:	f000 bc19 	b.w	8006fe8 <__retarget_lock_acquire_recursive>
 80067b6:	bf00      	nop
 80067b8:	200003f4 	.word	0x200003f4

080067bc <__malloc_unlock>:
 80067bc:	4801      	ldr	r0, [pc, #4]	; (80067c4 <__malloc_unlock+0x8>)
 80067be:	f000 bc14 	b.w	8006fea <__retarget_lock_release_recursive>
 80067c2:	bf00      	nop
 80067c4:	200003f4 	.word	0x200003f4

080067c8 <_realloc_r>:
 80067c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067cc:	4680      	mov	r8, r0
 80067ce:	4614      	mov	r4, r2
 80067d0:	460e      	mov	r6, r1
 80067d2:	b921      	cbnz	r1, 80067de <_realloc_r+0x16>
 80067d4:	4611      	mov	r1, r2
 80067d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067da:	f7ff bdad 	b.w	8006338 <_malloc_r>
 80067de:	b92a      	cbnz	r2, 80067ec <_realloc_r+0x24>
 80067e0:	f7ff fd42 	bl	8006268 <_free_r>
 80067e4:	4625      	mov	r5, r4
 80067e6:	4628      	mov	r0, r5
 80067e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067ec:	f000 fc64 	bl	80070b8 <_malloc_usable_size_r>
 80067f0:	4284      	cmp	r4, r0
 80067f2:	4607      	mov	r7, r0
 80067f4:	d802      	bhi.n	80067fc <_realloc_r+0x34>
 80067f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80067fa:	d812      	bhi.n	8006822 <_realloc_r+0x5a>
 80067fc:	4621      	mov	r1, r4
 80067fe:	4640      	mov	r0, r8
 8006800:	f7ff fd9a 	bl	8006338 <_malloc_r>
 8006804:	4605      	mov	r5, r0
 8006806:	2800      	cmp	r0, #0
 8006808:	d0ed      	beq.n	80067e6 <_realloc_r+0x1e>
 800680a:	42bc      	cmp	r4, r7
 800680c:	4622      	mov	r2, r4
 800680e:	4631      	mov	r1, r6
 8006810:	bf28      	it	cs
 8006812:	463a      	movcs	r2, r7
 8006814:	f7ff f984 	bl	8005b20 <memcpy>
 8006818:	4631      	mov	r1, r6
 800681a:	4640      	mov	r0, r8
 800681c:	f7ff fd24 	bl	8006268 <_free_r>
 8006820:	e7e1      	b.n	80067e6 <_realloc_r+0x1e>
 8006822:	4635      	mov	r5, r6
 8006824:	e7df      	b.n	80067e6 <_realloc_r+0x1e>

08006826 <__sfputc_r>:
 8006826:	6893      	ldr	r3, [r2, #8]
 8006828:	b410      	push	{r4}
 800682a:	3b01      	subs	r3, #1
 800682c:	2b00      	cmp	r3, #0
 800682e:	6093      	str	r3, [r2, #8]
 8006830:	da07      	bge.n	8006842 <__sfputc_r+0x1c>
 8006832:	6994      	ldr	r4, [r2, #24]
 8006834:	42a3      	cmp	r3, r4
 8006836:	db01      	blt.n	800683c <__sfputc_r+0x16>
 8006838:	290a      	cmp	r1, #10
 800683a:	d102      	bne.n	8006842 <__sfputc_r+0x1c>
 800683c:	bc10      	pop	{r4}
 800683e:	f000 b949 	b.w	8006ad4 <__swbuf_r>
 8006842:	6813      	ldr	r3, [r2, #0]
 8006844:	1c58      	adds	r0, r3, #1
 8006846:	6010      	str	r0, [r2, #0]
 8006848:	7019      	strb	r1, [r3, #0]
 800684a:	4608      	mov	r0, r1
 800684c:	bc10      	pop	{r4}
 800684e:	4770      	bx	lr

08006850 <__sfputs_r>:
 8006850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006852:	4606      	mov	r6, r0
 8006854:	460f      	mov	r7, r1
 8006856:	4614      	mov	r4, r2
 8006858:	18d5      	adds	r5, r2, r3
 800685a:	42ac      	cmp	r4, r5
 800685c:	d101      	bne.n	8006862 <__sfputs_r+0x12>
 800685e:	2000      	movs	r0, #0
 8006860:	e007      	b.n	8006872 <__sfputs_r+0x22>
 8006862:	463a      	mov	r2, r7
 8006864:	4630      	mov	r0, r6
 8006866:	f814 1b01 	ldrb.w	r1, [r4], #1
 800686a:	f7ff ffdc 	bl	8006826 <__sfputc_r>
 800686e:	1c43      	adds	r3, r0, #1
 8006870:	d1f3      	bne.n	800685a <__sfputs_r+0xa>
 8006872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006874 <_vfiprintf_r>:
 8006874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006878:	460d      	mov	r5, r1
 800687a:	4614      	mov	r4, r2
 800687c:	4698      	mov	r8, r3
 800687e:	4606      	mov	r6, r0
 8006880:	b09d      	sub	sp, #116	; 0x74
 8006882:	b118      	cbz	r0, 800688c <_vfiprintf_r+0x18>
 8006884:	6983      	ldr	r3, [r0, #24]
 8006886:	b90b      	cbnz	r3, 800688c <_vfiprintf_r+0x18>
 8006888:	f000 fb10 	bl	8006eac <__sinit>
 800688c:	4b89      	ldr	r3, [pc, #548]	; (8006ab4 <_vfiprintf_r+0x240>)
 800688e:	429d      	cmp	r5, r3
 8006890:	d11b      	bne.n	80068ca <_vfiprintf_r+0x56>
 8006892:	6875      	ldr	r5, [r6, #4]
 8006894:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006896:	07d9      	lsls	r1, r3, #31
 8006898:	d405      	bmi.n	80068a6 <_vfiprintf_r+0x32>
 800689a:	89ab      	ldrh	r3, [r5, #12]
 800689c:	059a      	lsls	r2, r3, #22
 800689e:	d402      	bmi.n	80068a6 <_vfiprintf_r+0x32>
 80068a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068a2:	f000 fba1 	bl	8006fe8 <__retarget_lock_acquire_recursive>
 80068a6:	89ab      	ldrh	r3, [r5, #12]
 80068a8:	071b      	lsls	r3, r3, #28
 80068aa:	d501      	bpl.n	80068b0 <_vfiprintf_r+0x3c>
 80068ac:	692b      	ldr	r3, [r5, #16]
 80068ae:	b9eb      	cbnz	r3, 80068ec <_vfiprintf_r+0x78>
 80068b0:	4629      	mov	r1, r5
 80068b2:	4630      	mov	r0, r6
 80068b4:	f000 f96e 	bl	8006b94 <__swsetup_r>
 80068b8:	b1c0      	cbz	r0, 80068ec <_vfiprintf_r+0x78>
 80068ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068bc:	07dc      	lsls	r4, r3, #31
 80068be:	d50e      	bpl.n	80068de <_vfiprintf_r+0x6a>
 80068c0:	f04f 30ff 	mov.w	r0, #4294967295
 80068c4:	b01d      	add	sp, #116	; 0x74
 80068c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ca:	4b7b      	ldr	r3, [pc, #492]	; (8006ab8 <_vfiprintf_r+0x244>)
 80068cc:	429d      	cmp	r5, r3
 80068ce:	d101      	bne.n	80068d4 <_vfiprintf_r+0x60>
 80068d0:	68b5      	ldr	r5, [r6, #8]
 80068d2:	e7df      	b.n	8006894 <_vfiprintf_r+0x20>
 80068d4:	4b79      	ldr	r3, [pc, #484]	; (8006abc <_vfiprintf_r+0x248>)
 80068d6:	429d      	cmp	r5, r3
 80068d8:	bf08      	it	eq
 80068da:	68f5      	ldreq	r5, [r6, #12]
 80068dc:	e7da      	b.n	8006894 <_vfiprintf_r+0x20>
 80068de:	89ab      	ldrh	r3, [r5, #12]
 80068e0:	0598      	lsls	r0, r3, #22
 80068e2:	d4ed      	bmi.n	80068c0 <_vfiprintf_r+0x4c>
 80068e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068e6:	f000 fb80 	bl	8006fea <__retarget_lock_release_recursive>
 80068ea:	e7e9      	b.n	80068c0 <_vfiprintf_r+0x4c>
 80068ec:	2300      	movs	r3, #0
 80068ee:	9309      	str	r3, [sp, #36]	; 0x24
 80068f0:	2320      	movs	r3, #32
 80068f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068f6:	2330      	movs	r3, #48	; 0x30
 80068f8:	f04f 0901 	mov.w	r9, #1
 80068fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8006900:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006ac0 <_vfiprintf_r+0x24c>
 8006904:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006908:	4623      	mov	r3, r4
 800690a:	469a      	mov	sl, r3
 800690c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006910:	b10a      	cbz	r2, 8006916 <_vfiprintf_r+0xa2>
 8006912:	2a25      	cmp	r2, #37	; 0x25
 8006914:	d1f9      	bne.n	800690a <_vfiprintf_r+0x96>
 8006916:	ebba 0b04 	subs.w	fp, sl, r4
 800691a:	d00b      	beq.n	8006934 <_vfiprintf_r+0xc0>
 800691c:	465b      	mov	r3, fp
 800691e:	4622      	mov	r2, r4
 8006920:	4629      	mov	r1, r5
 8006922:	4630      	mov	r0, r6
 8006924:	f7ff ff94 	bl	8006850 <__sfputs_r>
 8006928:	3001      	adds	r0, #1
 800692a:	f000 80aa 	beq.w	8006a82 <_vfiprintf_r+0x20e>
 800692e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006930:	445a      	add	r2, fp
 8006932:	9209      	str	r2, [sp, #36]	; 0x24
 8006934:	f89a 3000 	ldrb.w	r3, [sl]
 8006938:	2b00      	cmp	r3, #0
 800693a:	f000 80a2 	beq.w	8006a82 <_vfiprintf_r+0x20e>
 800693e:	2300      	movs	r3, #0
 8006940:	f04f 32ff 	mov.w	r2, #4294967295
 8006944:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006948:	f10a 0a01 	add.w	sl, sl, #1
 800694c:	9304      	str	r3, [sp, #16]
 800694e:	9307      	str	r3, [sp, #28]
 8006950:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006954:	931a      	str	r3, [sp, #104]	; 0x68
 8006956:	4654      	mov	r4, sl
 8006958:	2205      	movs	r2, #5
 800695a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800695e:	4858      	ldr	r0, [pc, #352]	; (8006ac0 <_vfiprintf_r+0x24c>)
 8006960:	f7ff f8d0 	bl	8005b04 <memchr>
 8006964:	9a04      	ldr	r2, [sp, #16]
 8006966:	b9d8      	cbnz	r0, 80069a0 <_vfiprintf_r+0x12c>
 8006968:	06d1      	lsls	r1, r2, #27
 800696a:	bf44      	itt	mi
 800696c:	2320      	movmi	r3, #32
 800696e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006972:	0713      	lsls	r3, r2, #28
 8006974:	bf44      	itt	mi
 8006976:	232b      	movmi	r3, #43	; 0x2b
 8006978:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800697c:	f89a 3000 	ldrb.w	r3, [sl]
 8006980:	2b2a      	cmp	r3, #42	; 0x2a
 8006982:	d015      	beq.n	80069b0 <_vfiprintf_r+0x13c>
 8006984:	4654      	mov	r4, sl
 8006986:	2000      	movs	r0, #0
 8006988:	f04f 0c0a 	mov.w	ip, #10
 800698c:	9a07      	ldr	r2, [sp, #28]
 800698e:	4621      	mov	r1, r4
 8006990:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006994:	3b30      	subs	r3, #48	; 0x30
 8006996:	2b09      	cmp	r3, #9
 8006998:	d94e      	bls.n	8006a38 <_vfiprintf_r+0x1c4>
 800699a:	b1b0      	cbz	r0, 80069ca <_vfiprintf_r+0x156>
 800699c:	9207      	str	r2, [sp, #28]
 800699e:	e014      	b.n	80069ca <_vfiprintf_r+0x156>
 80069a0:	eba0 0308 	sub.w	r3, r0, r8
 80069a4:	fa09 f303 	lsl.w	r3, r9, r3
 80069a8:	4313      	orrs	r3, r2
 80069aa:	46a2      	mov	sl, r4
 80069ac:	9304      	str	r3, [sp, #16]
 80069ae:	e7d2      	b.n	8006956 <_vfiprintf_r+0xe2>
 80069b0:	9b03      	ldr	r3, [sp, #12]
 80069b2:	1d19      	adds	r1, r3, #4
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	9103      	str	r1, [sp, #12]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	bfbb      	ittet	lt
 80069bc:	425b      	neglt	r3, r3
 80069be:	f042 0202 	orrlt.w	r2, r2, #2
 80069c2:	9307      	strge	r3, [sp, #28]
 80069c4:	9307      	strlt	r3, [sp, #28]
 80069c6:	bfb8      	it	lt
 80069c8:	9204      	strlt	r2, [sp, #16]
 80069ca:	7823      	ldrb	r3, [r4, #0]
 80069cc:	2b2e      	cmp	r3, #46	; 0x2e
 80069ce:	d10c      	bne.n	80069ea <_vfiprintf_r+0x176>
 80069d0:	7863      	ldrb	r3, [r4, #1]
 80069d2:	2b2a      	cmp	r3, #42	; 0x2a
 80069d4:	d135      	bne.n	8006a42 <_vfiprintf_r+0x1ce>
 80069d6:	9b03      	ldr	r3, [sp, #12]
 80069d8:	3402      	adds	r4, #2
 80069da:	1d1a      	adds	r2, r3, #4
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	9203      	str	r2, [sp, #12]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	bfb8      	it	lt
 80069e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80069e8:	9305      	str	r3, [sp, #20]
 80069ea:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006ac4 <_vfiprintf_r+0x250>
 80069ee:	2203      	movs	r2, #3
 80069f0:	4650      	mov	r0, sl
 80069f2:	7821      	ldrb	r1, [r4, #0]
 80069f4:	f7ff f886 	bl	8005b04 <memchr>
 80069f8:	b140      	cbz	r0, 8006a0c <_vfiprintf_r+0x198>
 80069fa:	2340      	movs	r3, #64	; 0x40
 80069fc:	eba0 000a 	sub.w	r0, r0, sl
 8006a00:	fa03 f000 	lsl.w	r0, r3, r0
 8006a04:	9b04      	ldr	r3, [sp, #16]
 8006a06:	3401      	adds	r4, #1
 8006a08:	4303      	orrs	r3, r0
 8006a0a:	9304      	str	r3, [sp, #16]
 8006a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a10:	2206      	movs	r2, #6
 8006a12:	482d      	ldr	r0, [pc, #180]	; (8006ac8 <_vfiprintf_r+0x254>)
 8006a14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a18:	f7ff f874 	bl	8005b04 <memchr>
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	d03f      	beq.n	8006aa0 <_vfiprintf_r+0x22c>
 8006a20:	4b2a      	ldr	r3, [pc, #168]	; (8006acc <_vfiprintf_r+0x258>)
 8006a22:	bb1b      	cbnz	r3, 8006a6c <_vfiprintf_r+0x1f8>
 8006a24:	9b03      	ldr	r3, [sp, #12]
 8006a26:	3307      	adds	r3, #7
 8006a28:	f023 0307 	bic.w	r3, r3, #7
 8006a2c:	3308      	adds	r3, #8
 8006a2e:	9303      	str	r3, [sp, #12]
 8006a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a32:	443b      	add	r3, r7
 8006a34:	9309      	str	r3, [sp, #36]	; 0x24
 8006a36:	e767      	b.n	8006908 <_vfiprintf_r+0x94>
 8006a38:	460c      	mov	r4, r1
 8006a3a:	2001      	movs	r0, #1
 8006a3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a40:	e7a5      	b.n	800698e <_vfiprintf_r+0x11a>
 8006a42:	2300      	movs	r3, #0
 8006a44:	f04f 0c0a 	mov.w	ip, #10
 8006a48:	4619      	mov	r1, r3
 8006a4a:	3401      	adds	r4, #1
 8006a4c:	9305      	str	r3, [sp, #20]
 8006a4e:	4620      	mov	r0, r4
 8006a50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a54:	3a30      	subs	r2, #48	; 0x30
 8006a56:	2a09      	cmp	r2, #9
 8006a58:	d903      	bls.n	8006a62 <_vfiprintf_r+0x1ee>
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d0c5      	beq.n	80069ea <_vfiprintf_r+0x176>
 8006a5e:	9105      	str	r1, [sp, #20]
 8006a60:	e7c3      	b.n	80069ea <_vfiprintf_r+0x176>
 8006a62:	4604      	mov	r4, r0
 8006a64:	2301      	movs	r3, #1
 8006a66:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a6a:	e7f0      	b.n	8006a4e <_vfiprintf_r+0x1da>
 8006a6c:	ab03      	add	r3, sp, #12
 8006a6e:	9300      	str	r3, [sp, #0]
 8006a70:	462a      	mov	r2, r5
 8006a72:	4630      	mov	r0, r6
 8006a74:	4b16      	ldr	r3, [pc, #88]	; (8006ad0 <_vfiprintf_r+0x25c>)
 8006a76:	a904      	add	r1, sp, #16
 8006a78:	f7fd fddc 	bl	8004634 <_printf_float>
 8006a7c:	4607      	mov	r7, r0
 8006a7e:	1c78      	adds	r0, r7, #1
 8006a80:	d1d6      	bne.n	8006a30 <_vfiprintf_r+0x1bc>
 8006a82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a84:	07d9      	lsls	r1, r3, #31
 8006a86:	d405      	bmi.n	8006a94 <_vfiprintf_r+0x220>
 8006a88:	89ab      	ldrh	r3, [r5, #12]
 8006a8a:	059a      	lsls	r2, r3, #22
 8006a8c:	d402      	bmi.n	8006a94 <_vfiprintf_r+0x220>
 8006a8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a90:	f000 faab 	bl	8006fea <__retarget_lock_release_recursive>
 8006a94:	89ab      	ldrh	r3, [r5, #12]
 8006a96:	065b      	lsls	r3, r3, #25
 8006a98:	f53f af12 	bmi.w	80068c0 <_vfiprintf_r+0x4c>
 8006a9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a9e:	e711      	b.n	80068c4 <_vfiprintf_r+0x50>
 8006aa0:	ab03      	add	r3, sp, #12
 8006aa2:	9300      	str	r3, [sp, #0]
 8006aa4:	462a      	mov	r2, r5
 8006aa6:	4630      	mov	r0, r6
 8006aa8:	4b09      	ldr	r3, [pc, #36]	; (8006ad0 <_vfiprintf_r+0x25c>)
 8006aaa:	a904      	add	r1, sp, #16
 8006aac:	f7fe f85e 	bl	8004b6c <_printf_i>
 8006ab0:	e7e4      	b.n	8006a7c <_vfiprintf_r+0x208>
 8006ab2:	bf00      	nop
 8006ab4:	080086a4 	.word	0x080086a4
 8006ab8:	080086c4 	.word	0x080086c4
 8006abc:	08008684 	.word	0x08008684
 8006ac0:	0800852c 	.word	0x0800852c
 8006ac4:	08008532 	.word	0x08008532
 8006ac8:	08008536 	.word	0x08008536
 8006acc:	08004635 	.word	0x08004635
 8006ad0:	08006851 	.word	0x08006851

08006ad4 <__swbuf_r>:
 8006ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ad6:	460e      	mov	r6, r1
 8006ad8:	4614      	mov	r4, r2
 8006ada:	4605      	mov	r5, r0
 8006adc:	b118      	cbz	r0, 8006ae6 <__swbuf_r+0x12>
 8006ade:	6983      	ldr	r3, [r0, #24]
 8006ae0:	b90b      	cbnz	r3, 8006ae6 <__swbuf_r+0x12>
 8006ae2:	f000 f9e3 	bl	8006eac <__sinit>
 8006ae6:	4b21      	ldr	r3, [pc, #132]	; (8006b6c <__swbuf_r+0x98>)
 8006ae8:	429c      	cmp	r4, r3
 8006aea:	d12b      	bne.n	8006b44 <__swbuf_r+0x70>
 8006aec:	686c      	ldr	r4, [r5, #4]
 8006aee:	69a3      	ldr	r3, [r4, #24]
 8006af0:	60a3      	str	r3, [r4, #8]
 8006af2:	89a3      	ldrh	r3, [r4, #12]
 8006af4:	071a      	lsls	r2, r3, #28
 8006af6:	d52f      	bpl.n	8006b58 <__swbuf_r+0x84>
 8006af8:	6923      	ldr	r3, [r4, #16]
 8006afa:	b36b      	cbz	r3, 8006b58 <__swbuf_r+0x84>
 8006afc:	6923      	ldr	r3, [r4, #16]
 8006afe:	6820      	ldr	r0, [r4, #0]
 8006b00:	b2f6      	uxtb	r6, r6
 8006b02:	1ac0      	subs	r0, r0, r3
 8006b04:	6963      	ldr	r3, [r4, #20]
 8006b06:	4637      	mov	r7, r6
 8006b08:	4283      	cmp	r3, r0
 8006b0a:	dc04      	bgt.n	8006b16 <__swbuf_r+0x42>
 8006b0c:	4621      	mov	r1, r4
 8006b0e:	4628      	mov	r0, r5
 8006b10:	f000 f938 	bl	8006d84 <_fflush_r>
 8006b14:	bb30      	cbnz	r0, 8006b64 <__swbuf_r+0x90>
 8006b16:	68a3      	ldr	r3, [r4, #8]
 8006b18:	3001      	adds	r0, #1
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	60a3      	str	r3, [r4, #8]
 8006b1e:	6823      	ldr	r3, [r4, #0]
 8006b20:	1c5a      	adds	r2, r3, #1
 8006b22:	6022      	str	r2, [r4, #0]
 8006b24:	701e      	strb	r6, [r3, #0]
 8006b26:	6963      	ldr	r3, [r4, #20]
 8006b28:	4283      	cmp	r3, r0
 8006b2a:	d004      	beq.n	8006b36 <__swbuf_r+0x62>
 8006b2c:	89a3      	ldrh	r3, [r4, #12]
 8006b2e:	07db      	lsls	r3, r3, #31
 8006b30:	d506      	bpl.n	8006b40 <__swbuf_r+0x6c>
 8006b32:	2e0a      	cmp	r6, #10
 8006b34:	d104      	bne.n	8006b40 <__swbuf_r+0x6c>
 8006b36:	4621      	mov	r1, r4
 8006b38:	4628      	mov	r0, r5
 8006b3a:	f000 f923 	bl	8006d84 <_fflush_r>
 8006b3e:	b988      	cbnz	r0, 8006b64 <__swbuf_r+0x90>
 8006b40:	4638      	mov	r0, r7
 8006b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b44:	4b0a      	ldr	r3, [pc, #40]	; (8006b70 <__swbuf_r+0x9c>)
 8006b46:	429c      	cmp	r4, r3
 8006b48:	d101      	bne.n	8006b4e <__swbuf_r+0x7a>
 8006b4a:	68ac      	ldr	r4, [r5, #8]
 8006b4c:	e7cf      	b.n	8006aee <__swbuf_r+0x1a>
 8006b4e:	4b09      	ldr	r3, [pc, #36]	; (8006b74 <__swbuf_r+0xa0>)
 8006b50:	429c      	cmp	r4, r3
 8006b52:	bf08      	it	eq
 8006b54:	68ec      	ldreq	r4, [r5, #12]
 8006b56:	e7ca      	b.n	8006aee <__swbuf_r+0x1a>
 8006b58:	4621      	mov	r1, r4
 8006b5a:	4628      	mov	r0, r5
 8006b5c:	f000 f81a 	bl	8006b94 <__swsetup_r>
 8006b60:	2800      	cmp	r0, #0
 8006b62:	d0cb      	beq.n	8006afc <__swbuf_r+0x28>
 8006b64:	f04f 37ff 	mov.w	r7, #4294967295
 8006b68:	e7ea      	b.n	8006b40 <__swbuf_r+0x6c>
 8006b6a:	bf00      	nop
 8006b6c:	080086a4 	.word	0x080086a4
 8006b70:	080086c4 	.word	0x080086c4
 8006b74:	08008684 	.word	0x08008684

08006b78 <__ascii_wctomb>:
 8006b78:	4603      	mov	r3, r0
 8006b7a:	4608      	mov	r0, r1
 8006b7c:	b141      	cbz	r1, 8006b90 <__ascii_wctomb+0x18>
 8006b7e:	2aff      	cmp	r2, #255	; 0xff
 8006b80:	d904      	bls.n	8006b8c <__ascii_wctomb+0x14>
 8006b82:	228a      	movs	r2, #138	; 0x8a
 8006b84:	f04f 30ff 	mov.w	r0, #4294967295
 8006b88:	601a      	str	r2, [r3, #0]
 8006b8a:	4770      	bx	lr
 8006b8c:	2001      	movs	r0, #1
 8006b8e:	700a      	strb	r2, [r1, #0]
 8006b90:	4770      	bx	lr
	...

08006b94 <__swsetup_r>:
 8006b94:	4b32      	ldr	r3, [pc, #200]	; (8006c60 <__swsetup_r+0xcc>)
 8006b96:	b570      	push	{r4, r5, r6, lr}
 8006b98:	681d      	ldr	r5, [r3, #0]
 8006b9a:	4606      	mov	r6, r0
 8006b9c:	460c      	mov	r4, r1
 8006b9e:	b125      	cbz	r5, 8006baa <__swsetup_r+0x16>
 8006ba0:	69ab      	ldr	r3, [r5, #24]
 8006ba2:	b913      	cbnz	r3, 8006baa <__swsetup_r+0x16>
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	f000 f981 	bl	8006eac <__sinit>
 8006baa:	4b2e      	ldr	r3, [pc, #184]	; (8006c64 <__swsetup_r+0xd0>)
 8006bac:	429c      	cmp	r4, r3
 8006bae:	d10f      	bne.n	8006bd0 <__swsetup_r+0x3c>
 8006bb0:	686c      	ldr	r4, [r5, #4]
 8006bb2:	89a3      	ldrh	r3, [r4, #12]
 8006bb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006bb8:	0719      	lsls	r1, r3, #28
 8006bba:	d42c      	bmi.n	8006c16 <__swsetup_r+0x82>
 8006bbc:	06dd      	lsls	r5, r3, #27
 8006bbe:	d411      	bmi.n	8006be4 <__swsetup_r+0x50>
 8006bc0:	2309      	movs	r3, #9
 8006bc2:	6033      	str	r3, [r6, #0]
 8006bc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bcc:	81a3      	strh	r3, [r4, #12]
 8006bce:	e03e      	b.n	8006c4e <__swsetup_r+0xba>
 8006bd0:	4b25      	ldr	r3, [pc, #148]	; (8006c68 <__swsetup_r+0xd4>)
 8006bd2:	429c      	cmp	r4, r3
 8006bd4:	d101      	bne.n	8006bda <__swsetup_r+0x46>
 8006bd6:	68ac      	ldr	r4, [r5, #8]
 8006bd8:	e7eb      	b.n	8006bb2 <__swsetup_r+0x1e>
 8006bda:	4b24      	ldr	r3, [pc, #144]	; (8006c6c <__swsetup_r+0xd8>)
 8006bdc:	429c      	cmp	r4, r3
 8006bde:	bf08      	it	eq
 8006be0:	68ec      	ldreq	r4, [r5, #12]
 8006be2:	e7e6      	b.n	8006bb2 <__swsetup_r+0x1e>
 8006be4:	0758      	lsls	r0, r3, #29
 8006be6:	d512      	bpl.n	8006c0e <__swsetup_r+0x7a>
 8006be8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bea:	b141      	cbz	r1, 8006bfe <__swsetup_r+0x6a>
 8006bec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bf0:	4299      	cmp	r1, r3
 8006bf2:	d002      	beq.n	8006bfa <__swsetup_r+0x66>
 8006bf4:	4630      	mov	r0, r6
 8006bf6:	f7ff fb37 	bl	8006268 <_free_r>
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	6363      	str	r3, [r4, #52]	; 0x34
 8006bfe:	89a3      	ldrh	r3, [r4, #12]
 8006c00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c04:	81a3      	strh	r3, [r4, #12]
 8006c06:	2300      	movs	r3, #0
 8006c08:	6063      	str	r3, [r4, #4]
 8006c0a:	6923      	ldr	r3, [r4, #16]
 8006c0c:	6023      	str	r3, [r4, #0]
 8006c0e:	89a3      	ldrh	r3, [r4, #12]
 8006c10:	f043 0308 	orr.w	r3, r3, #8
 8006c14:	81a3      	strh	r3, [r4, #12]
 8006c16:	6923      	ldr	r3, [r4, #16]
 8006c18:	b94b      	cbnz	r3, 8006c2e <__swsetup_r+0x9a>
 8006c1a:	89a3      	ldrh	r3, [r4, #12]
 8006c1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c24:	d003      	beq.n	8006c2e <__swsetup_r+0x9a>
 8006c26:	4621      	mov	r1, r4
 8006c28:	4630      	mov	r0, r6
 8006c2a:	f000 fa05 	bl	8007038 <__smakebuf_r>
 8006c2e:	89a0      	ldrh	r0, [r4, #12]
 8006c30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c34:	f010 0301 	ands.w	r3, r0, #1
 8006c38:	d00a      	beq.n	8006c50 <__swsetup_r+0xbc>
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	60a3      	str	r3, [r4, #8]
 8006c3e:	6963      	ldr	r3, [r4, #20]
 8006c40:	425b      	negs	r3, r3
 8006c42:	61a3      	str	r3, [r4, #24]
 8006c44:	6923      	ldr	r3, [r4, #16]
 8006c46:	b943      	cbnz	r3, 8006c5a <__swsetup_r+0xc6>
 8006c48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c4c:	d1ba      	bne.n	8006bc4 <__swsetup_r+0x30>
 8006c4e:	bd70      	pop	{r4, r5, r6, pc}
 8006c50:	0781      	lsls	r1, r0, #30
 8006c52:	bf58      	it	pl
 8006c54:	6963      	ldrpl	r3, [r4, #20]
 8006c56:	60a3      	str	r3, [r4, #8]
 8006c58:	e7f4      	b.n	8006c44 <__swsetup_r+0xb0>
 8006c5a:	2000      	movs	r0, #0
 8006c5c:	e7f7      	b.n	8006c4e <__swsetup_r+0xba>
 8006c5e:	bf00      	nop
 8006c60:	20000010 	.word	0x20000010
 8006c64:	080086a4 	.word	0x080086a4
 8006c68:	080086c4 	.word	0x080086c4
 8006c6c:	08008684 	.word	0x08008684

08006c70 <abort>:
 8006c70:	2006      	movs	r0, #6
 8006c72:	b508      	push	{r3, lr}
 8006c74:	f000 fa50 	bl	8007118 <raise>
 8006c78:	2001      	movs	r0, #1
 8006c7a:	f7fb f82c 	bl	8001cd6 <_exit>
	...

08006c80 <__sflush_r>:
 8006c80:	898a      	ldrh	r2, [r1, #12]
 8006c82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c84:	4605      	mov	r5, r0
 8006c86:	0710      	lsls	r0, r2, #28
 8006c88:	460c      	mov	r4, r1
 8006c8a:	d457      	bmi.n	8006d3c <__sflush_r+0xbc>
 8006c8c:	684b      	ldr	r3, [r1, #4]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	dc04      	bgt.n	8006c9c <__sflush_r+0x1c>
 8006c92:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	dc01      	bgt.n	8006c9c <__sflush_r+0x1c>
 8006c98:	2000      	movs	r0, #0
 8006c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c9e:	2e00      	cmp	r6, #0
 8006ca0:	d0fa      	beq.n	8006c98 <__sflush_r+0x18>
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ca8:	682f      	ldr	r7, [r5, #0]
 8006caa:	602b      	str	r3, [r5, #0]
 8006cac:	d032      	beq.n	8006d14 <__sflush_r+0x94>
 8006cae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006cb0:	89a3      	ldrh	r3, [r4, #12]
 8006cb2:	075a      	lsls	r2, r3, #29
 8006cb4:	d505      	bpl.n	8006cc2 <__sflush_r+0x42>
 8006cb6:	6863      	ldr	r3, [r4, #4]
 8006cb8:	1ac0      	subs	r0, r0, r3
 8006cba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006cbc:	b10b      	cbz	r3, 8006cc2 <__sflush_r+0x42>
 8006cbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006cc0:	1ac0      	subs	r0, r0, r3
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cc8:	4628      	mov	r0, r5
 8006cca:	6a21      	ldr	r1, [r4, #32]
 8006ccc:	47b0      	blx	r6
 8006cce:	1c43      	adds	r3, r0, #1
 8006cd0:	89a3      	ldrh	r3, [r4, #12]
 8006cd2:	d106      	bne.n	8006ce2 <__sflush_r+0x62>
 8006cd4:	6829      	ldr	r1, [r5, #0]
 8006cd6:	291d      	cmp	r1, #29
 8006cd8:	d82c      	bhi.n	8006d34 <__sflush_r+0xb4>
 8006cda:	4a29      	ldr	r2, [pc, #164]	; (8006d80 <__sflush_r+0x100>)
 8006cdc:	40ca      	lsrs	r2, r1
 8006cde:	07d6      	lsls	r6, r2, #31
 8006ce0:	d528      	bpl.n	8006d34 <__sflush_r+0xb4>
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	6062      	str	r2, [r4, #4]
 8006ce6:	6922      	ldr	r2, [r4, #16]
 8006ce8:	04d9      	lsls	r1, r3, #19
 8006cea:	6022      	str	r2, [r4, #0]
 8006cec:	d504      	bpl.n	8006cf8 <__sflush_r+0x78>
 8006cee:	1c42      	adds	r2, r0, #1
 8006cf0:	d101      	bne.n	8006cf6 <__sflush_r+0x76>
 8006cf2:	682b      	ldr	r3, [r5, #0]
 8006cf4:	b903      	cbnz	r3, 8006cf8 <__sflush_r+0x78>
 8006cf6:	6560      	str	r0, [r4, #84]	; 0x54
 8006cf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cfa:	602f      	str	r7, [r5, #0]
 8006cfc:	2900      	cmp	r1, #0
 8006cfe:	d0cb      	beq.n	8006c98 <__sflush_r+0x18>
 8006d00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d04:	4299      	cmp	r1, r3
 8006d06:	d002      	beq.n	8006d0e <__sflush_r+0x8e>
 8006d08:	4628      	mov	r0, r5
 8006d0a:	f7ff faad 	bl	8006268 <_free_r>
 8006d0e:	2000      	movs	r0, #0
 8006d10:	6360      	str	r0, [r4, #52]	; 0x34
 8006d12:	e7c2      	b.n	8006c9a <__sflush_r+0x1a>
 8006d14:	6a21      	ldr	r1, [r4, #32]
 8006d16:	2301      	movs	r3, #1
 8006d18:	4628      	mov	r0, r5
 8006d1a:	47b0      	blx	r6
 8006d1c:	1c41      	adds	r1, r0, #1
 8006d1e:	d1c7      	bne.n	8006cb0 <__sflush_r+0x30>
 8006d20:	682b      	ldr	r3, [r5, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d0c4      	beq.n	8006cb0 <__sflush_r+0x30>
 8006d26:	2b1d      	cmp	r3, #29
 8006d28:	d001      	beq.n	8006d2e <__sflush_r+0xae>
 8006d2a:	2b16      	cmp	r3, #22
 8006d2c:	d101      	bne.n	8006d32 <__sflush_r+0xb2>
 8006d2e:	602f      	str	r7, [r5, #0]
 8006d30:	e7b2      	b.n	8006c98 <__sflush_r+0x18>
 8006d32:	89a3      	ldrh	r3, [r4, #12]
 8006d34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d38:	81a3      	strh	r3, [r4, #12]
 8006d3a:	e7ae      	b.n	8006c9a <__sflush_r+0x1a>
 8006d3c:	690f      	ldr	r7, [r1, #16]
 8006d3e:	2f00      	cmp	r7, #0
 8006d40:	d0aa      	beq.n	8006c98 <__sflush_r+0x18>
 8006d42:	0793      	lsls	r3, r2, #30
 8006d44:	bf18      	it	ne
 8006d46:	2300      	movne	r3, #0
 8006d48:	680e      	ldr	r6, [r1, #0]
 8006d4a:	bf08      	it	eq
 8006d4c:	694b      	ldreq	r3, [r1, #20]
 8006d4e:	1bf6      	subs	r6, r6, r7
 8006d50:	600f      	str	r7, [r1, #0]
 8006d52:	608b      	str	r3, [r1, #8]
 8006d54:	2e00      	cmp	r6, #0
 8006d56:	dd9f      	ble.n	8006c98 <__sflush_r+0x18>
 8006d58:	4633      	mov	r3, r6
 8006d5a:	463a      	mov	r2, r7
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	6a21      	ldr	r1, [r4, #32]
 8006d60:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006d64:	47e0      	blx	ip
 8006d66:	2800      	cmp	r0, #0
 8006d68:	dc06      	bgt.n	8006d78 <__sflush_r+0xf8>
 8006d6a:	89a3      	ldrh	r3, [r4, #12]
 8006d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d74:	81a3      	strh	r3, [r4, #12]
 8006d76:	e790      	b.n	8006c9a <__sflush_r+0x1a>
 8006d78:	4407      	add	r7, r0
 8006d7a:	1a36      	subs	r6, r6, r0
 8006d7c:	e7ea      	b.n	8006d54 <__sflush_r+0xd4>
 8006d7e:	bf00      	nop
 8006d80:	20400001 	.word	0x20400001

08006d84 <_fflush_r>:
 8006d84:	b538      	push	{r3, r4, r5, lr}
 8006d86:	690b      	ldr	r3, [r1, #16]
 8006d88:	4605      	mov	r5, r0
 8006d8a:	460c      	mov	r4, r1
 8006d8c:	b913      	cbnz	r3, 8006d94 <_fflush_r+0x10>
 8006d8e:	2500      	movs	r5, #0
 8006d90:	4628      	mov	r0, r5
 8006d92:	bd38      	pop	{r3, r4, r5, pc}
 8006d94:	b118      	cbz	r0, 8006d9e <_fflush_r+0x1a>
 8006d96:	6983      	ldr	r3, [r0, #24]
 8006d98:	b90b      	cbnz	r3, 8006d9e <_fflush_r+0x1a>
 8006d9a:	f000 f887 	bl	8006eac <__sinit>
 8006d9e:	4b14      	ldr	r3, [pc, #80]	; (8006df0 <_fflush_r+0x6c>)
 8006da0:	429c      	cmp	r4, r3
 8006da2:	d11b      	bne.n	8006ddc <_fflush_r+0x58>
 8006da4:	686c      	ldr	r4, [r5, #4]
 8006da6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d0ef      	beq.n	8006d8e <_fflush_r+0xa>
 8006dae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006db0:	07d0      	lsls	r0, r2, #31
 8006db2:	d404      	bmi.n	8006dbe <_fflush_r+0x3a>
 8006db4:	0599      	lsls	r1, r3, #22
 8006db6:	d402      	bmi.n	8006dbe <_fflush_r+0x3a>
 8006db8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dba:	f000 f915 	bl	8006fe8 <__retarget_lock_acquire_recursive>
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	4621      	mov	r1, r4
 8006dc2:	f7ff ff5d 	bl	8006c80 <__sflush_r>
 8006dc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006dc8:	4605      	mov	r5, r0
 8006dca:	07da      	lsls	r2, r3, #31
 8006dcc:	d4e0      	bmi.n	8006d90 <_fflush_r+0xc>
 8006dce:	89a3      	ldrh	r3, [r4, #12]
 8006dd0:	059b      	lsls	r3, r3, #22
 8006dd2:	d4dd      	bmi.n	8006d90 <_fflush_r+0xc>
 8006dd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dd6:	f000 f908 	bl	8006fea <__retarget_lock_release_recursive>
 8006dda:	e7d9      	b.n	8006d90 <_fflush_r+0xc>
 8006ddc:	4b05      	ldr	r3, [pc, #20]	; (8006df4 <_fflush_r+0x70>)
 8006dde:	429c      	cmp	r4, r3
 8006de0:	d101      	bne.n	8006de6 <_fflush_r+0x62>
 8006de2:	68ac      	ldr	r4, [r5, #8]
 8006de4:	e7df      	b.n	8006da6 <_fflush_r+0x22>
 8006de6:	4b04      	ldr	r3, [pc, #16]	; (8006df8 <_fflush_r+0x74>)
 8006de8:	429c      	cmp	r4, r3
 8006dea:	bf08      	it	eq
 8006dec:	68ec      	ldreq	r4, [r5, #12]
 8006dee:	e7da      	b.n	8006da6 <_fflush_r+0x22>
 8006df0:	080086a4 	.word	0x080086a4
 8006df4:	080086c4 	.word	0x080086c4
 8006df8:	08008684 	.word	0x08008684

08006dfc <std>:
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	b510      	push	{r4, lr}
 8006e00:	4604      	mov	r4, r0
 8006e02:	e9c0 3300 	strd	r3, r3, [r0]
 8006e06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e0a:	6083      	str	r3, [r0, #8]
 8006e0c:	8181      	strh	r1, [r0, #12]
 8006e0e:	6643      	str	r3, [r0, #100]	; 0x64
 8006e10:	81c2      	strh	r2, [r0, #14]
 8006e12:	6183      	str	r3, [r0, #24]
 8006e14:	4619      	mov	r1, r3
 8006e16:	2208      	movs	r2, #8
 8006e18:	305c      	adds	r0, #92	; 0x5c
 8006e1a:	f7fd fb65 	bl	80044e8 <memset>
 8006e1e:	4b05      	ldr	r3, [pc, #20]	; (8006e34 <std+0x38>)
 8006e20:	6224      	str	r4, [r4, #32]
 8006e22:	6263      	str	r3, [r4, #36]	; 0x24
 8006e24:	4b04      	ldr	r3, [pc, #16]	; (8006e38 <std+0x3c>)
 8006e26:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e28:	4b04      	ldr	r3, [pc, #16]	; (8006e3c <std+0x40>)
 8006e2a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e2c:	4b04      	ldr	r3, [pc, #16]	; (8006e40 <std+0x44>)
 8006e2e:	6323      	str	r3, [r4, #48]	; 0x30
 8006e30:	bd10      	pop	{r4, pc}
 8006e32:	bf00      	nop
 8006e34:	08007151 	.word	0x08007151
 8006e38:	08007173 	.word	0x08007173
 8006e3c:	080071ab 	.word	0x080071ab
 8006e40:	080071cf 	.word	0x080071cf

08006e44 <_cleanup_r>:
 8006e44:	4901      	ldr	r1, [pc, #4]	; (8006e4c <_cleanup_r+0x8>)
 8006e46:	f000 b8af 	b.w	8006fa8 <_fwalk_reent>
 8006e4a:	bf00      	nop
 8006e4c:	08006d85 	.word	0x08006d85

08006e50 <__sfmoreglue>:
 8006e50:	2268      	movs	r2, #104	; 0x68
 8006e52:	b570      	push	{r4, r5, r6, lr}
 8006e54:	1e4d      	subs	r5, r1, #1
 8006e56:	4355      	muls	r5, r2
 8006e58:	460e      	mov	r6, r1
 8006e5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e5e:	f7ff fa6b 	bl	8006338 <_malloc_r>
 8006e62:	4604      	mov	r4, r0
 8006e64:	b140      	cbz	r0, 8006e78 <__sfmoreglue+0x28>
 8006e66:	2100      	movs	r1, #0
 8006e68:	e9c0 1600 	strd	r1, r6, [r0]
 8006e6c:	300c      	adds	r0, #12
 8006e6e:	60a0      	str	r0, [r4, #8]
 8006e70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006e74:	f7fd fb38 	bl	80044e8 <memset>
 8006e78:	4620      	mov	r0, r4
 8006e7a:	bd70      	pop	{r4, r5, r6, pc}

08006e7c <__sfp_lock_acquire>:
 8006e7c:	4801      	ldr	r0, [pc, #4]	; (8006e84 <__sfp_lock_acquire+0x8>)
 8006e7e:	f000 b8b3 	b.w	8006fe8 <__retarget_lock_acquire_recursive>
 8006e82:	bf00      	nop
 8006e84:	200003f5 	.word	0x200003f5

08006e88 <__sfp_lock_release>:
 8006e88:	4801      	ldr	r0, [pc, #4]	; (8006e90 <__sfp_lock_release+0x8>)
 8006e8a:	f000 b8ae 	b.w	8006fea <__retarget_lock_release_recursive>
 8006e8e:	bf00      	nop
 8006e90:	200003f5 	.word	0x200003f5

08006e94 <__sinit_lock_acquire>:
 8006e94:	4801      	ldr	r0, [pc, #4]	; (8006e9c <__sinit_lock_acquire+0x8>)
 8006e96:	f000 b8a7 	b.w	8006fe8 <__retarget_lock_acquire_recursive>
 8006e9a:	bf00      	nop
 8006e9c:	200003f6 	.word	0x200003f6

08006ea0 <__sinit_lock_release>:
 8006ea0:	4801      	ldr	r0, [pc, #4]	; (8006ea8 <__sinit_lock_release+0x8>)
 8006ea2:	f000 b8a2 	b.w	8006fea <__retarget_lock_release_recursive>
 8006ea6:	bf00      	nop
 8006ea8:	200003f6 	.word	0x200003f6

08006eac <__sinit>:
 8006eac:	b510      	push	{r4, lr}
 8006eae:	4604      	mov	r4, r0
 8006eb0:	f7ff fff0 	bl	8006e94 <__sinit_lock_acquire>
 8006eb4:	69a3      	ldr	r3, [r4, #24]
 8006eb6:	b11b      	cbz	r3, 8006ec0 <__sinit+0x14>
 8006eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ebc:	f7ff bff0 	b.w	8006ea0 <__sinit_lock_release>
 8006ec0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006ec4:	6523      	str	r3, [r4, #80]	; 0x50
 8006ec6:	4b13      	ldr	r3, [pc, #76]	; (8006f14 <__sinit+0x68>)
 8006ec8:	4a13      	ldr	r2, [pc, #76]	; (8006f18 <__sinit+0x6c>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	62a2      	str	r2, [r4, #40]	; 0x28
 8006ece:	42a3      	cmp	r3, r4
 8006ed0:	bf08      	it	eq
 8006ed2:	2301      	moveq	r3, #1
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	bf08      	it	eq
 8006ed8:	61a3      	streq	r3, [r4, #24]
 8006eda:	f000 f81f 	bl	8006f1c <__sfp>
 8006ede:	6060      	str	r0, [r4, #4]
 8006ee0:	4620      	mov	r0, r4
 8006ee2:	f000 f81b 	bl	8006f1c <__sfp>
 8006ee6:	60a0      	str	r0, [r4, #8]
 8006ee8:	4620      	mov	r0, r4
 8006eea:	f000 f817 	bl	8006f1c <__sfp>
 8006eee:	2200      	movs	r2, #0
 8006ef0:	2104      	movs	r1, #4
 8006ef2:	60e0      	str	r0, [r4, #12]
 8006ef4:	6860      	ldr	r0, [r4, #4]
 8006ef6:	f7ff ff81 	bl	8006dfc <std>
 8006efa:	2201      	movs	r2, #1
 8006efc:	2109      	movs	r1, #9
 8006efe:	68a0      	ldr	r0, [r4, #8]
 8006f00:	f7ff ff7c 	bl	8006dfc <std>
 8006f04:	2202      	movs	r2, #2
 8006f06:	2112      	movs	r1, #18
 8006f08:	68e0      	ldr	r0, [r4, #12]
 8006f0a:	f7ff ff77 	bl	8006dfc <std>
 8006f0e:	2301      	movs	r3, #1
 8006f10:	61a3      	str	r3, [r4, #24]
 8006f12:	e7d1      	b.n	8006eb8 <__sinit+0xc>
 8006f14:	08008308 	.word	0x08008308
 8006f18:	08006e45 	.word	0x08006e45

08006f1c <__sfp>:
 8006f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f1e:	4607      	mov	r7, r0
 8006f20:	f7ff ffac 	bl	8006e7c <__sfp_lock_acquire>
 8006f24:	4b1e      	ldr	r3, [pc, #120]	; (8006fa0 <__sfp+0x84>)
 8006f26:	681e      	ldr	r6, [r3, #0]
 8006f28:	69b3      	ldr	r3, [r6, #24]
 8006f2a:	b913      	cbnz	r3, 8006f32 <__sfp+0x16>
 8006f2c:	4630      	mov	r0, r6
 8006f2e:	f7ff ffbd 	bl	8006eac <__sinit>
 8006f32:	3648      	adds	r6, #72	; 0x48
 8006f34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	d503      	bpl.n	8006f44 <__sfp+0x28>
 8006f3c:	6833      	ldr	r3, [r6, #0]
 8006f3e:	b30b      	cbz	r3, 8006f84 <__sfp+0x68>
 8006f40:	6836      	ldr	r6, [r6, #0]
 8006f42:	e7f7      	b.n	8006f34 <__sfp+0x18>
 8006f44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f48:	b9d5      	cbnz	r5, 8006f80 <__sfp+0x64>
 8006f4a:	4b16      	ldr	r3, [pc, #88]	; (8006fa4 <__sfp+0x88>)
 8006f4c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f50:	60e3      	str	r3, [r4, #12]
 8006f52:	6665      	str	r5, [r4, #100]	; 0x64
 8006f54:	f000 f847 	bl	8006fe6 <__retarget_lock_init_recursive>
 8006f58:	f7ff ff96 	bl	8006e88 <__sfp_lock_release>
 8006f5c:	2208      	movs	r2, #8
 8006f5e:	4629      	mov	r1, r5
 8006f60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006f64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006f68:	6025      	str	r5, [r4, #0]
 8006f6a:	61a5      	str	r5, [r4, #24]
 8006f6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006f70:	f7fd faba 	bl	80044e8 <memset>
 8006f74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006f78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006f7c:	4620      	mov	r0, r4
 8006f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f80:	3468      	adds	r4, #104	; 0x68
 8006f82:	e7d9      	b.n	8006f38 <__sfp+0x1c>
 8006f84:	2104      	movs	r1, #4
 8006f86:	4638      	mov	r0, r7
 8006f88:	f7ff ff62 	bl	8006e50 <__sfmoreglue>
 8006f8c:	4604      	mov	r4, r0
 8006f8e:	6030      	str	r0, [r6, #0]
 8006f90:	2800      	cmp	r0, #0
 8006f92:	d1d5      	bne.n	8006f40 <__sfp+0x24>
 8006f94:	f7ff ff78 	bl	8006e88 <__sfp_lock_release>
 8006f98:	230c      	movs	r3, #12
 8006f9a:	603b      	str	r3, [r7, #0]
 8006f9c:	e7ee      	b.n	8006f7c <__sfp+0x60>
 8006f9e:	bf00      	nop
 8006fa0:	08008308 	.word	0x08008308
 8006fa4:	ffff0001 	.word	0xffff0001

08006fa8 <_fwalk_reent>:
 8006fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fac:	4606      	mov	r6, r0
 8006fae:	4688      	mov	r8, r1
 8006fb0:	2700      	movs	r7, #0
 8006fb2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006fb6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fba:	f1b9 0901 	subs.w	r9, r9, #1
 8006fbe:	d505      	bpl.n	8006fcc <_fwalk_reent+0x24>
 8006fc0:	6824      	ldr	r4, [r4, #0]
 8006fc2:	2c00      	cmp	r4, #0
 8006fc4:	d1f7      	bne.n	8006fb6 <_fwalk_reent+0xe>
 8006fc6:	4638      	mov	r0, r7
 8006fc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fcc:	89ab      	ldrh	r3, [r5, #12]
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d907      	bls.n	8006fe2 <_fwalk_reent+0x3a>
 8006fd2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	d003      	beq.n	8006fe2 <_fwalk_reent+0x3a>
 8006fda:	4629      	mov	r1, r5
 8006fdc:	4630      	mov	r0, r6
 8006fde:	47c0      	blx	r8
 8006fe0:	4307      	orrs	r7, r0
 8006fe2:	3568      	adds	r5, #104	; 0x68
 8006fe4:	e7e9      	b.n	8006fba <_fwalk_reent+0x12>

08006fe6 <__retarget_lock_init_recursive>:
 8006fe6:	4770      	bx	lr

08006fe8 <__retarget_lock_acquire_recursive>:
 8006fe8:	4770      	bx	lr

08006fea <__retarget_lock_release_recursive>:
 8006fea:	4770      	bx	lr

08006fec <__swhatbuf_r>:
 8006fec:	b570      	push	{r4, r5, r6, lr}
 8006fee:	460e      	mov	r6, r1
 8006ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ff4:	4614      	mov	r4, r2
 8006ff6:	2900      	cmp	r1, #0
 8006ff8:	461d      	mov	r5, r3
 8006ffa:	b096      	sub	sp, #88	; 0x58
 8006ffc:	da08      	bge.n	8007010 <__swhatbuf_r+0x24>
 8006ffe:	2200      	movs	r2, #0
 8007000:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007004:	602a      	str	r2, [r5, #0]
 8007006:	061a      	lsls	r2, r3, #24
 8007008:	d410      	bmi.n	800702c <__swhatbuf_r+0x40>
 800700a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800700e:	e00e      	b.n	800702e <__swhatbuf_r+0x42>
 8007010:	466a      	mov	r2, sp
 8007012:	f000 f903 	bl	800721c <_fstat_r>
 8007016:	2800      	cmp	r0, #0
 8007018:	dbf1      	blt.n	8006ffe <__swhatbuf_r+0x12>
 800701a:	9a01      	ldr	r2, [sp, #4]
 800701c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007020:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007024:	425a      	negs	r2, r3
 8007026:	415a      	adcs	r2, r3
 8007028:	602a      	str	r2, [r5, #0]
 800702a:	e7ee      	b.n	800700a <__swhatbuf_r+0x1e>
 800702c:	2340      	movs	r3, #64	; 0x40
 800702e:	2000      	movs	r0, #0
 8007030:	6023      	str	r3, [r4, #0]
 8007032:	b016      	add	sp, #88	; 0x58
 8007034:	bd70      	pop	{r4, r5, r6, pc}
	...

08007038 <__smakebuf_r>:
 8007038:	898b      	ldrh	r3, [r1, #12]
 800703a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800703c:	079d      	lsls	r5, r3, #30
 800703e:	4606      	mov	r6, r0
 8007040:	460c      	mov	r4, r1
 8007042:	d507      	bpl.n	8007054 <__smakebuf_r+0x1c>
 8007044:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007048:	6023      	str	r3, [r4, #0]
 800704a:	6123      	str	r3, [r4, #16]
 800704c:	2301      	movs	r3, #1
 800704e:	6163      	str	r3, [r4, #20]
 8007050:	b002      	add	sp, #8
 8007052:	bd70      	pop	{r4, r5, r6, pc}
 8007054:	466a      	mov	r2, sp
 8007056:	ab01      	add	r3, sp, #4
 8007058:	f7ff ffc8 	bl	8006fec <__swhatbuf_r>
 800705c:	9900      	ldr	r1, [sp, #0]
 800705e:	4605      	mov	r5, r0
 8007060:	4630      	mov	r0, r6
 8007062:	f7ff f969 	bl	8006338 <_malloc_r>
 8007066:	b948      	cbnz	r0, 800707c <__smakebuf_r+0x44>
 8007068:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800706c:	059a      	lsls	r2, r3, #22
 800706e:	d4ef      	bmi.n	8007050 <__smakebuf_r+0x18>
 8007070:	f023 0303 	bic.w	r3, r3, #3
 8007074:	f043 0302 	orr.w	r3, r3, #2
 8007078:	81a3      	strh	r3, [r4, #12]
 800707a:	e7e3      	b.n	8007044 <__smakebuf_r+0xc>
 800707c:	4b0d      	ldr	r3, [pc, #52]	; (80070b4 <__smakebuf_r+0x7c>)
 800707e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007080:	89a3      	ldrh	r3, [r4, #12]
 8007082:	6020      	str	r0, [r4, #0]
 8007084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007088:	81a3      	strh	r3, [r4, #12]
 800708a:	9b00      	ldr	r3, [sp, #0]
 800708c:	6120      	str	r0, [r4, #16]
 800708e:	6163      	str	r3, [r4, #20]
 8007090:	9b01      	ldr	r3, [sp, #4]
 8007092:	b15b      	cbz	r3, 80070ac <__smakebuf_r+0x74>
 8007094:	4630      	mov	r0, r6
 8007096:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800709a:	f000 f8d1 	bl	8007240 <_isatty_r>
 800709e:	b128      	cbz	r0, 80070ac <__smakebuf_r+0x74>
 80070a0:	89a3      	ldrh	r3, [r4, #12]
 80070a2:	f023 0303 	bic.w	r3, r3, #3
 80070a6:	f043 0301 	orr.w	r3, r3, #1
 80070aa:	81a3      	strh	r3, [r4, #12]
 80070ac:	89a0      	ldrh	r0, [r4, #12]
 80070ae:	4305      	orrs	r5, r0
 80070b0:	81a5      	strh	r5, [r4, #12]
 80070b2:	e7cd      	b.n	8007050 <__smakebuf_r+0x18>
 80070b4:	08006e45 	.word	0x08006e45

080070b8 <_malloc_usable_size_r>:
 80070b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070bc:	1f18      	subs	r0, r3, #4
 80070be:	2b00      	cmp	r3, #0
 80070c0:	bfbc      	itt	lt
 80070c2:	580b      	ldrlt	r3, [r1, r0]
 80070c4:	18c0      	addlt	r0, r0, r3
 80070c6:	4770      	bx	lr

080070c8 <_raise_r>:
 80070c8:	291f      	cmp	r1, #31
 80070ca:	b538      	push	{r3, r4, r5, lr}
 80070cc:	4604      	mov	r4, r0
 80070ce:	460d      	mov	r5, r1
 80070d0:	d904      	bls.n	80070dc <_raise_r+0x14>
 80070d2:	2316      	movs	r3, #22
 80070d4:	6003      	str	r3, [r0, #0]
 80070d6:	f04f 30ff 	mov.w	r0, #4294967295
 80070da:	bd38      	pop	{r3, r4, r5, pc}
 80070dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80070de:	b112      	cbz	r2, 80070e6 <_raise_r+0x1e>
 80070e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80070e4:	b94b      	cbnz	r3, 80070fa <_raise_r+0x32>
 80070e6:	4620      	mov	r0, r4
 80070e8:	f000 f830 	bl	800714c <_getpid_r>
 80070ec:	462a      	mov	r2, r5
 80070ee:	4601      	mov	r1, r0
 80070f0:	4620      	mov	r0, r4
 80070f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070f6:	f000 b817 	b.w	8007128 <_kill_r>
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d00a      	beq.n	8007114 <_raise_r+0x4c>
 80070fe:	1c59      	adds	r1, r3, #1
 8007100:	d103      	bne.n	800710a <_raise_r+0x42>
 8007102:	2316      	movs	r3, #22
 8007104:	6003      	str	r3, [r0, #0]
 8007106:	2001      	movs	r0, #1
 8007108:	e7e7      	b.n	80070da <_raise_r+0x12>
 800710a:	2400      	movs	r4, #0
 800710c:	4628      	mov	r0, r5
 800710e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007112:	4798      	blx	r3
 8007114:	2000      	movs	r0, #0
 8007116:	e7e0      	b.n	80070da <_raise_r+0x12>

08007118 <raise>:
 8007118:	4b02      	ldr	r3, [pc, #8]	; (8007124 <raise+0xc>)
 800711a:	4601      	mov	r1, r0
 800711c:	6818      	ldr	r0, [r3, #0]
 800711e:	f7ff bfd3 	b.w	80070c8 <_raise_r>
 8007122:	bf00      	nop
 8007124:	20000010 	.word	0x20000010

08007128 <_kill_r>:
 8007128:	b538      	push	{r3, r4, r5, lr}
 800712a:	2300      	movs	r3, #0
 800712c:	4d06      	ldr	r5, [pc, #24]	; (8007148 <_kill_r+0x20>)
 800712e:	4604      	mov	r4, r0
 8007130:	4608      	mov	r0, r1
 8007132:	4611      	mov	r1, r2
 8007134:	602b      	str	r3, [r5, #0]
 8007136:	f7fa fdbe 	bl	8001cb6 <_kill>
 800713a:	1c43      	adds	r3, r0, #1
 800713c:	d102      	bne.n	8007144 <_kill_r+0x1c>
 800713e:	682b      	ldr	r3, [r5, #0]
 8007140:	b103      	cbz	r3, 8007144 <_kill_r+0x1c>
 8007142:	6023      	str	r3, [r4, #0]
 8007144:	bd38      	pop	{r3, r4, r5, pc}
 8007146:	bf00      	nop
 8007148:	200003f0 	.word	0x200003f0

0800714c <_getpid_r>:
 800714c:	f7fa bdac 	b.w	8001ca8 <_getpid>

08007150 <__sread>:
 8007150:	b510      	push	{r4, lr}
 8007152:	460c      	mov	r4, r1
 8007154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007158:	f000 f894 	bl	8007284 <_read_r>
 800715c:	2800      	cmp	r0, #0
 800715e:	bfab      	itete	ge
 8007160:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007162:	89a3      	ldrhlt	r3, [r4, #12]
 8007164:	181b      	addge	r3, r3, r0
 8007166:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800716a:	bfac      	ite	ge
 800716c:	6563      	strge	r3, [r4, #84]	; 0x54
 800716e:	81a3      	strhlt	r3, [r4, #12]
 8007170:	bd10      	pop	{r4, pc}

08007172 <__swrite>:
 8007172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007176:	461f      	mov	r7, r3
 8007178:	898b      	ldrh	r3, [r1, #12]
 800717a:	4605      	mov	r5, r0
 800717c:	05db      	lsls	r3, r3, #23
 800717e:	460c      	mov	r4, r1
 8007180:	4616      	mov	r6, r2
 8007182:	d505      	bpl.n	8007190 <__swrite+0x1e>
 8007184:	2302      	movs	r3, #2
 8007186:	2200      	movs	r2, #0
 8007188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800718c:	f000 f868 	bl	8007260 <_lseek_r>
 8007190:	89a3      	ldrh	r3, [r4, #12]
 8007192:	4632      	mov	r2, r6
 8007194:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007198:	81a3      	strh	r3, [r4, #12]
 800719a:	4628      	mov	r0, r5
 800719c:	463b      	mov	r3, r7
 800719e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071a6:	f000 b817 	b.w	80071d8 <_write_r>

080071aa <__sseek>:
 80071aa:	b510      	push	{r4, lr}
 80071ac:	460c      	mov	r4, r1
 80071ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071b2:	f000 f855 	bl	8007260 <_lseek_r>
 80071b6:	1c43      	adds	r3, r0, #1
 80071b8:	89a3      	ldrh	r3, [r4, #12]
 80071ba:	bf15      	itete	ne
 80071bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80071be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80071c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80071c6:	81a3      	strheq	r3, [r4, #12]
 80071c8:	bf18      	it	ne
 80071ca:	81a3      	strhne	r3, [r4, #12]
 80071cc:	bd10      	pop	{r4, pc}

080071ce <__sclose>:
 80071ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071d2:	f000 b813 	b.w	80071fc <_close_r>
	...

080071d8 <_write_r>:
 80071d8:	b538      	push	{r3, r4, r5, lr}
 80071da:	4604      	mov	r4, r0
 80071dc:	4608      	mov	r0, r1
 80071de:	4611      	mov	r1, r2
 80071e0:	2200      	movs	r2, #0
 80071e2:	4d05      	ldr	r5, [pc, #20]	; (80071f8 <_write_r+0x20>)
 80071e4:	602a      	str	r2, [r5, #0]
 80071e6:	461a      	mov	r2, r3
 80071e8:	f7fa fd9c 	bl	8001d24 <_write>
 80071ec:	1c43      	adds	r3, r0, #1
 80071ee:	d102      	bne.n	80071f6 <_write_r+0x1e>
 80071f0:	682b      	ldr	r3, [r5, #0]
 80071f2:	b103      	cbz	r3, 80071f6 <_write_r+0x1e>
 80071f4:	6023      	str	r3, [r4, #0]
 80071f6:	bd38      	pop	{r3, r4, r5, pc}
 80071f8:	200003f0 	.word	0x200003f0

080071fc <_close_r>:
 80071fc:	b538      	push	{r3, r4, r5, lr}
 80071fe:	2300      	movs	r3, #0
 8007200:	4d05      	ldr	r5, [pc, #20]	; (8007218 <_close_r+0x1c>)
 8007202:	4604      	mov	r4, r0
 8007204:	4608      	mov	r0, r1
 8007206:	602b      	str	r3, [r5, #0]
 8007208:	f7fa fda8 	bl	8001d5c <_close>
 800720c:	1c43      	adds	r3, r0, #1
 800720e:	d102      	bne.n	8007216 <_close_r+0x1a>
 8007210:	682b      	ldr	r3, [r5, #0]
 8007212:	b103      	cbz	r3, 8007216 <_close_r+0x1a>
 8007214:	6023      	str	r3, [r4, #0]
 8007216:	bd38      	pop	{r3, r4, r5, pc}
 8007218:	200003f0 	.word	0x200003f0

0800721c <_fstat_r>:
 800721c:	b538      	push	{r3, r4, r5, lr}
 800721e:	2300      	movs	r3, #0
 8007220:	4d06      	ldr	r5, [pc, #24]	; (800723c <_fstat_r+0x20>)
 8007222:	4604      	mov	r4, r0
 8007224:	4608      	mov	r0, r1
 8007226:	4611      	mov	r1, r2
 8007228:	602b      	str	r3, [r5, #0]
 800722a:	f7fa fda2 	bl	8001d72 <_fstat>
 800722e:	1c43      	adds	r3, r0, #1
 8007230:	d102      	bne.n	8007238 <_fstat_r+0x1c>
 8007232:	682b      	ldr	r3, [r5, #0]
 8007234:	b103      	cbz	r3, 8007238 <_fstat_r+0x1c>
 8007236:	6023      	str	r3, [r4, #0]
 8007238:	bd38      	pop	{r3, r4, r5, pc}
 800723a:	bf00      	nop
 800723c:	200003f0 	.word	0x200003f0

08007240 <_isatty_r>:
 8007240:	b538      	push	{r3, r4, r5, lr}
 8007242:	2300      	movs	r3, #0
 8007244:	4d05      	ldr	r5, [pc, #20]	; (800725c <_isatty_r+0x1c>)
 8007246:	4604      	mov	r4, r0
 8007248:	4608      	mov	r0, r1
 800724a:	602b      	str	r3, [r5, #0]
 800724c:	f7fa fda0 	bl	8001d90 <_isatty>
 8007250:	1c43      	adds	r3, r0, #1
 8007252:	d102      	bne.n	800725a <_isatty_r+0x1a>
 8007254:	682b      	ldr	r3, [r5, #0]
 8007256:	b103      	cbz	r3, 800725a <_isatty_r+0x1a>
 8007258:	6023      	str	r3, [r4, #0]
 800725a:	bd38      	pop	{r3, r4, r5, pc}
 800725c:	200003f0 	.word	0x200003f0

08007260 <_lseek_r>:
 8007260:	b538      	push	{r3, r4, r5, lr}
 8007262:	4604      	mov	r4, r0
 8007264:	4608      	mov	r0, r1
 8007266:	4611      	mov	r1, r2
 8007268:	2200      	movs	r2, #0
 800726a:	4d05      	ldr	r5, [pc, #20]	; (8007280 <_lseek_r+0x20>)
 800726c:	602a      	str	r2, [r5, #0]
 800726e:	461a      	mov	r2, r3
 8007270:	f7fa fd98 	bl	8001da4 <_lseek>
 8007274:	1c43      	adds	r3, r0, #1
 8007276:	d102      	bne.n	800727e <_lseek_r+0x1e>
 8007278:	682b      	ldr	r3, [r5, #0]
 800727a:	b103      	cbz	r3, 800727e <_lseek_r+0x1e>
 800727c:	6023      	str	r3, [r4, #0]
 800727e:	bd38      	pop	{r3, r4, r5, pc}
 8007280:	200003f0 	.word	0x200003f0

08007284 <_read_r>:
 8007284:	b538      	push	{r3, r4, r5, lr}
 8007286:	4604      	mov	r4, r0
 8007288:	4608      	mov	r0, r1
 800728a:	4611      	mov	r1, r2
 800728c:	2200      	movs	r2, #0
 800728e:	4d05      	ldr	r5, [pc, #20]	; (80072a4 <_read_r+0x20>)
 8007290:	602a      	str	r2, [r5, #0]
 8007292:	461a      	mov	r2, r3
 8007294:	f7fa fd29 	bl	8001cea <_read>
 8007298:	1c43      	adds	r3, r0, #1
 800729a:	d102      	bne.n	80072a2 <_read_r+0x1e>
 800729c:	682b      	ldr	r3, [r5, #0]
 800729e:	b103      	cbz	r3, 80072a2 <_read_r+0x1e>
 80072a0:	6023      	str	r3, [r4, #0]
 80072a2:	bd38      	pop	{r3, r4, r5, pc}
 80072a4:	200003f0 	.word	0x200003f0

080072a8 <sin>:
 80072a8:	b530      	push	{r4, r5, lr}
 80072aa:	4a20      	ldr	r2, [pc, #128]	; (800732c <sin+0x84>)
 80072ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80072b0:	4293      	cmp	r3, r2
 80072b2:	b087      	sub	sp, #28
 80072b4:	dc06      	bgt.n	80072c4 <sin+0x1c>
 80072b6:	2300      	movs	r3, #0
 80072b8:	2200      	movs	r2, #0
 80072ba:	9300      	str	r3, [sp, #0]
 80072bc:	2300      	movs	r3, #0
 80072be:	f000 fe33 	bl	8007f28 <__kernel_sin>
 80072c2:	e006      	b.n	80072d2 <sin+0x2a>
 80072c4:	4a1a      	ldr	r2, [pc, #104]	; (8007330 <sin+0x88>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	dd05      	ble.n	80072d6 <sin+0x2e>
 80072ca:	4602      	mov	r2, r0
 80072cc:	460b      	mov	r3, r1
 80072ce:	f7f8 ff4b 	bl	8000168 <__aeabi_dsub>
 80072d2:	b007      	add	sp, #28
 80072d4:	bd30      	pop	{r4, r5, pc}
 80072d6:	aa02      	add	r2, sp, #8
 80072d8:	f000 f82e 	bl	8007338 <__ieee754_rem_pio2>
 80072dc:	f000 0003 	and.w	r0, r0, #3
 80072e0:	2801      	cmp	r0, #1
 80072e2:	d009      	beq.n	80072f8 <sin+0x50>
 80072e4:	2802      	cmp	r0, #2
 80072e6:	d00e      	beq.n	8007306 <sin+0x5e>
 80072e8:	b9c0      	cbnz	r0, 800731c <sin+0x74>
 80072ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072ee:	2301      	movs	r3, #1
 80072f0:	9300      	str	r3, [sp, #0]
 80072f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072f6:	e7e2      	b.n	80072be <sin+0x16>
 80072f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007300:	f000 fa12 	bl	8007728 <__kernel_cos>
 8007304:	e7e5      	b.n	80072d2 <sin+0x2a>
 8007306:	2301      	movs	r3, #1
 8007308:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800730c:	9300      	str	r3, [sp, #0]
 800730e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007312:	f000 fe09 	bl	8007f28 <__kernel_sin>
 8007316:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800731a:	e7da      	b.n	80072d2 <sin+0x2a>
 800731c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007320:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007324:	f000 fa00 	bl	8007728 <__kernel_cos>
 8007328:	e7f5      	b.n	8007316 <sin+0x6e>
 800732a:	bf00      	nop
 800732c:	3fe921fb 	.word	0x3fe921fb
 8007330:	7fefffff 	.word	0x7fefffff
 8007334:	00000000 	.word	0x00000000

08007338 <__ieee754_rem_pio2>:
 8007338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800733c:	4614      	mov	r4, r2
 800733e:	4ac4      	ldr	r2, [pc, #784]	; (8007650 <__ieee754_rem_pio2+0x318>)
 8007340:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8007344:	b08d      	sub	sp, #52	; 0x34
 8007346:	4592      	cmp	sl, r2
 8007348:	9104      	str	r1, [sp, #16]
 800734a:	dc07      	bgt.n	800735c <__ieee754_rem_pio2+0x24>
 800734c:	2200      	movs	r2, #0
 800734e:	2300      	movs	r3, #0
 8007350:	e9c4 0100 	strd	r0, r1, [r4]
 8007354:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8007358:	2500      	movs	r5, #0
 800735a:	e024      	b.n	80073a6 <__ieee754_rem_pio2+0x6e>
 800735c:	4abd      	ldr	r2, [pc, #756]	; (8007654 <__ieee754_rem_pio2+0x31c>)
 800735e:	4592      	cmp	sl, r2
 8007360:	dc72      	bgt.n	8007448 <__ieee754_rem_pio2+0x110>
 8007362:	9b04      	ldr	r3, [sp, #16]
 8007364:	4dbc      	ldr	r5, [pc, #752]	; (8007658 <__ieee754_rem_pio2+0x320>)
 8007366:	2b00      	cmp	r3, #0
 8007368:	a3ab      	add	r3, pc, #684	; (adr r3, 8007618 <__ieee754_rem_pio2+0x2e0>)
 800736a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736e:	dd36      	ble.n	80073de <__ieee754_rem_pio2+0xa6>
 8007370:	f7f8 fefa 	bl	8000168 <__aeabi_dsub>
 8007374:	45aa      	cmp	sl, r5
 8007376:	4606      	mov	r6, r0
 8007378:	460f      	mov	r7, r1
 800737a:	d018      	beq.n	80073ae <__ieee754_rem_pio2+0x76>
 800737c:	a3a8      	add	r3, pc, #672	; (adr r3, 8007620 <__ieee754_rem_pio2+0x2e8>)
 800737e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007382:	f7f8 fef1 	bl	8000168 <__aeabi_dsub>
 8007386:	4602      	mov	r2, r0
 8007388:	460b      	mov	r3, r1
 800738a:	4630      	mov	r0, r6
 800738c:	e9c4 2300 	strd	r2, r3, [r4]
 8007390:	4639      	mov	r1, r7
 8007392:	f7f8 fee9 	bl	8000168 <__aeabi_dsub>
 8007396:	a3a2      	add	r3, pc, #648	; (adr r3, 8007620 <__ieee754_rem_pio2+0x2e8>)
 8007398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739c:	f7f8 fee4 	bl	8000168 <__aeabi_dsub>
 80073a0:	2501      	movs	r5, #1
 80073a2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80073a6:	4628      	mov	r0, r5
 80073a8:	b00d      	add	sp, #52	; 0x34
 80073aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ae:	a39e      	add	r3, pc, #632	; (adr r3, 8007628 <__ieee754_rem_pio2+0x2f0>)
 80073b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b4:	f7f8 fed8 	bl	8000168 <__aeabi_dsub>
 80073b8:	a39d      	add	r3, pc, #628	; (adr r3, 8007630 <__ieee754_rem_pio2+0x2f8>)
 80073ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073be:	4606      	mov	r6, r0
 80073c0:	460f      	mov	r7, r1
 80073c2:	f7f8 fed1 	bl	8000168 <__aeabi_dsub>
 80073c6:	4602      	mov	r2, r0
 80073c8:	460b      	mov	r3, r1
 80073ca:	4630      	mov	r0, r6
 80073cc:	e9c4 2300 	strd	r2, r3, [r4]
 80073d0:	4639      	mov	r1, r7
 80073d2:	f7f8 fec9 	bl	8000168 <__aeabi_dsub>
 80073d6:	a396      	add	r3, pc, #600	; (adr r3, 8007630 <__ieee754_rem_pio2+0x2f8>)
 80073d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073dc:	e7de      	b.n	800739c <__ieee754_rem_pio2+0x64>
 80073de:	f7f8 fec5 	bl	800016c <__adddf3>
 80073e2:	45aa      	cmp	sl, r5
 80073e4:	4606      	mov	r6, r0
 80073e6:	460f      	mov	r7, r1
 80073e8:	d016      	beq.n	8007418 <__ieee754_rem_pio2+0xe0>
 80073ea:	a38d      	add	r3, pc, #564	; (adr r3, 8007620 <__ieee754_rem_pio2+0x2e8>)
 80073ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f0:	f7f8 febc 	bl	800016c <__adddf3>
 80073f4:	4602      	mov	r2, r0
 80073f6:	460b      	mov	r3, r1
 80073f8:	4630      	mov	r0, r6
 80073fa:	e9c4 2300 	strd	r2, r3, [r4]
 80073fe:	4639      	mov	r1, r7
 8007400:	f7f8 feb2 	bl	8000168 <__aeabi_dsub>
 8007404:	a386      	add	r3, pc, #536	; (adr r3, 8007620 <__ieee754_rem_pio2+0x2e8>)
 8007406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740a:	f7f8 feaf 	bl	800016c <__adddf3>
 800740e:	f04f 35ff 	mov.w	r5, #4294967295
 8007412:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007416:	e7c6      	b.n	80073a6 <__ieee754_rem_pio2+0x6e>
 8007418:	a383      	add	r3, pc, #524	; (adr r3, 8007628 <__ieee754_rem_pio2+0x2f0>)
 800741a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741e:	f7f8 fea5 	bl	800016c <__adddf3>
 8007422:	a383      	add	r3, pc, #524	; (adr r3, 8007630 <__ieee754_rem_pio2+0x2f8>)
 8007424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007428:	4606      	mov	r6, r0
 800742a:	460f      	mov	r7, r1
 800742c:	f7f8 fe9e 	bl	800016c <__adddf3>
 8007430:	4602      	mov	r2, r0
 8007432:	460b      	mov	r3, r1
 8007434:	4630      	mov	r0, r6
 8007436:	e9c4 2300 	strd	r2, r3, [r4]
 800743a:	4639      	mov	r1, r7
 800743c:	f7f8 fe94 	bl	8000168 <__aeabi_dsub>
 8007440:	a37b      	add	r3, pc, #492	; (adr r3, 8007630 <__ieee754_rem_pio2+0x2f8>)
 8007442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007446:	e7e0      	b.n	800740a <__ieee754_rem_pio2+0xd2>
 8007448:	4a84      	ldr	r2, [pc, #528]	; (800765c <__ieee754_rem_pio2+0x324>)
 800744a:	4592      	cmp	sl, r2
 800744c:	f300 80d5 	bgt.w	80075fa <__ieee754_rem_pio2+0x2c2>
 8007450:	f000 fe20 	bl	8008094 <fabs>
 8007454:	a378      	add	r3, pc, #480	; (adr r3, 8007638 <__ieee754_rem_pio2+0x300>)
 8007456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745a:	4606      	mov	r6, r0
 800745c:	460f      	mov	r7, r1
 800745e:	f7f9 f83b 	bl	80004d8 <__aeabi_dmul>
 8007462:	2200      	movs	r2, #0
 8007464:	4b7e      	ldr	r3, [pc, #504]	; (8007660 <__ieee754_rem_pio2+0x328>)
 8007466:	f7f8 fe81 	bl	800016c <__adddf3>
 800746a:	f7f9 fae5 	bl	8000a38 <__aeabi_d2iz>
 800746e:	4605      	mov	r5, r0
 8007470:	f7f8 ffc8 	bl	8000404 <__aeabi_i2d>
 8007474:	4602      	mov	r2, r0
 8007476:	460b      	mov	r3, r1
 8007478:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800747c:	a366      	add	r3, pc, #408	; (adr r3, 8007618 <__ieee754_rem_pio2+0x2e0>)
 800747e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007482:	f7f9 f829 	bl	80004d8 <__aeabi_dmul>
 8007486:	4602      	mov	r2, r0
 8007488:	460b      	mov	r3, r1
 800748a:	4630      	mov	r0, r6
 800748c:	4639      	mov	r1, r7
 800748e:	f7f8 fe6b 	bl	8000168 <__aeabi_dsub>
 8007492:	a363      	add	r3, pc, #396	; (adr r3, 8007620 <__ieee754_rem_pio2+0x2e8>)
 8007494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007498:	4680      	mov	r8, r0
 800749a:	4689      	mov	r9, r1
 800749c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074a0:	f7f9 f81a 	bl	80004d8 <__aeabi_dmul>
 80074a4:	2d1f      	cmp	r5, #31
 80074a6:	4606      	mov	r6, r0
 80074a8:	460f      	mov	r7, r1
 80074aa:	dc0e      	bgt.n	80074ca <__ieee754_rem_pio2+0x192>
 80074ac:	4b6d      	ldr	r3, [pc, #436]	; (8007664 <__ieee754_rem_pio2+0x32c>)
 80074ae:	1e6a      	subs	r2, r5, #1
 80074b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074b4:	4553      	cmp	r3, sl
 80074b6:	d008      	beq.n	80074ca <__ieee754_rem_pio2+0x192>
 80074b8:	4632      	mov	r2, r6
 80074ba:	463b      	mov	r3, r7
 80074bc:	4640      	mov	r0, r8
 80074be:	4649      	mov	r1, r9
 80074c0:	f7f8 fe52 	bl	8000168 <__aeabi_dsub>
 80074c4:	e9c4 0100 	strd	r0, r1, [r4]
 80074c8:	e013      	b.n	80074f2 <__ieee754_rem_pio2+0x1ba>
 80074ca:	463b      	mov	r3, r7
 80074cc:	4632      	mov	r2, r6
 80074ce:	4640      	mov	r0, r8
 80074d0:	4649      	mov	r1, r9
 80074d2:	f7f8 fe49 	bl	8000168 <__aeabi_dsub>
 80074d6:	ea4f 532a 	mov.w	r3, sl, asr #20
 80074da:	9305      	str	r3, [sp, #20]
 80074dc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80074e0:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 80074e4:	f1ba 0f10 	cmp.w	sl, #16
 80074e8:	dc1f      	bgt.n	800752a <__ieee754_rem_pio2+0x1f2>
 80074ea:	4602      	mov	r2, r0
 80074ec:	460b      	mov	r3, r1
 80074ee:	e9c4 2300 	strd	r2, r3, [r4]
 80074f2:	e9d4 2a00 	ldrd	r2, sl, [r4]
 80074f6:	4640      	mov	r0, r8
 80074f8:	4653      	mov	r3, sl
 80074fa:	4649      	mov	r1, r9
 80074fc:	f7f8 fe34 	bl	8000168 <__aeabi_dsub>
 8007500:	4632      	mov	r2, r6
 8007502:	463b      	mov	r3, r7
 8007504:	f7f8 fe30 	bl	8000168 <__aeabi_dsub>
 8007508:	460b      	mov	r3, r1
 800750a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800750e:	9904      	ldr	r1, [sp, #16]
 8007510:	4602      	mov	r2, r0
 8007512:	2900      	cmp	r1, #0
 8007514:	f6bf af47 	bge.w	80073a6 <__ieee754_rem_pio2+0x6e>
 8007518:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800751c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8007520:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007524:	60e3      	str	r3, [r4, #12]
 8007526:	426d      	negs	r5, r5
 8007528:	e73d      	b.n	80073a6 <__ieee754_rem_pio2+0x6e>
 800752a:	a33f      	add	r3, pc, #252	; (adr r3, 8007628 <__ieee754_rem_pio2+0x2f0>)
 800752c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007530:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007534:	f7f8 ffd0 	bl	80004d8 <__aeabi_dmul>
 8007538:	4606      	mov	r6, r0
 800753a:	460f      	mov	r7, r1
 800753c:	4602      	mov	r2, r0
 800753e:	460b      	mov	r3, r1
 8007540:	4640      	mov	r0, r8
 8007542:	4649      	mov	r1, r9
 8007544:	f7f8 fe10 	bl	8000168 <__aeabi_dsub>
 8007548:	4602      	mov	r2, r0
 800754a:	460b      	mov	r3, r1
 800754c:	4682      	mov	sl, r0
 800754e:	468b      	mov	fp, r1
 8007550:	4640      	mov	r0, r8
 8007552:	4649      	mov	r1, r9
 8007554:	f7f8 fe08 	bl	8000168 <__aeabi_dsub>
 8007558:	4632      	mov	r2, r6
 800755a:	463b      	mov	r3, r7
 800755c:	f7f8 fe04 	bl	8000168 <__aeabi_dsub>
 8007560:	a333      	add	r3, pc, #204	; (adr r3, 8007630 <__ieee754_rem_pio2+0x2f8>)
 8007562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007566:	4606      	mov	r6, r0
 8007568:	460f      	mov	r7, r1
 800756a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800756e:	f7f8 ffb3 	bl	80004d8 <__aeabi_dmul>
 8007572:	4632      	mov	r2, r6
 8007574:	463b      	mov	r3, r7
 8007576:	f7f8 fdf7 	bl	8000168 <__aeabi_dsub>
 800757a:	4602      	mov	r2, r0
 800757c:	460b      	mov	r3, r1
 800757e:	4606      	mov	r6, r0
 8007580:	460f      	mov	r7, r1
 8007582:	4650      	mov	r0, sl
 8007584:	4659      	mov	r1, fp
 8007586:	f7f8 fdef 	bl	8000168 <__aeabi_dsub>
 800758a:	9a05      	ldr	r2, [sp, #20]
 800758c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	2b31      	cmp	r3, #49	; 0x31
 8007594:	dc06      	bgt.n	80075a4 <__ieee754_rem_pio2+0x26c>
 8007596:	4602      	mov	r2, r0
 8007598:	460b      	mov	r3, r1
 800759a:	46d0      	mov	r8, sl
 800759c:	46d9      	mov	r9, fp
 800759e:	e9c4 2300 	strd	r2, r3, [r4]
 80075a2:	e7a6      	b.n	80074f2 <__ieee754_rem_pio2+0x1ba>
 80075a4:	a326      	add	r3, pc, #152	; (adr r3, 8007640 <__ieee754_rem_pio2+0x308>)
 80075a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075ae:	f7f8 ff93 	bl	80004d8 <__aeabi_dmul>
 80075b2:	4606      	mov	r6, r0
 80075b4:	460f      	mov	r7, r1
 80075b6:	4602      	mov	r2, r0
 80075b8:	460b      	mov	r3, r1
 80075ba:	4650      	mov	r0, sl
 80075bc:	4659      	mov	r1, fp
 80075be:	f7f8 fdd3 	bl	8000168 <__aeabi_dsub>
 80075c2:	4602      	mov	r2, r0
 80075c4:	460b      	mov	r3, r1
 80075c6:	4680      	mov	r8, r0
 80075c8:	4689      	mov	r9, r1
 80075ca:	4650      	mov	r0, sl
 80075cc:	4659      	mov	r1, fp
 80075ce:	f7f8 fdcb 	bl	8000168 <__aeabi_dsub>
 80075d2:	4632      	mov	r2, r6
 80075d4:	463b      	mov	r3, r7
 80075d6:	f7f8 fdc7 	bl	8000168 <__aeabi_dsub>
 80075da:	a31b      	add	r3, pc, #108	; (adr r3, 8007648 <__ieee754_rem_pio2+0x310>)
 80075dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e0:	4606      	mov	r6, r0
 80075e2:	460f      	mov	r7, r1
 80075e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075e8:	f7f8 ff76 	bl	80004d8 <__aeabi_dmul>
 80075ec:	4632      	mov	r2, r6
 80075ee:	463b      	mov	r3, r7
 80075f0:	f7f8 fdba 	bl	8000168 <__aeabi_dsub>
 80075f4:	4606      	mov	r6, r0
 80075f6:	460f      	mov	r7, r1
 80075f8:	e75e      	b.n	80074b8 <__ieee754_rem_pio2+0x180>
 80075fa:	4a1b      	ldr	r2, [pc, #108]	; (8007668 <__ieee754_rem_pio2+0x330>)
 80075fc:	4592      	cmp	sl, r2
 80075fe:	dd35      	ble.n	800766c <__ieee754_rem_pio2+0x334>
 8007600:	4602      	mov	r2, r0
 8007602:	460b      	mov	r3, r1
 8007604:	f7f8 fdb0 	bl	8000168 <__aeabi_dsub>
 8007608:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800760c:	e9c4 0100 	strd	r0, r1, [r4]
 8007610:	e6a2      	b.n	8007358 <__ieee754_rem_pio2+0x20>
 8007612:	bf00      	nop
 8007614:	f3af 8000 	nop.w
 8007618:	54400000 	.word	0x54400000
 800761c:	3ff921fb 	.word	0x3ff921fb
 8007620:	1a626331 	.word	0x1a626331
 8007624:	3dd0b461 	.word	0x3dd0b461
 8007628:	1a600000 	.word	0x1a600000
 800762c:	3dd0b461 	.word	0x3dd0b461
 8007630:	2e037073 	.word	0x2e037073
 8007634:	3ba3198a 	.word	0x3ba3198a
 8007638:	6dc9c883 	.word	0x6dc9c883
 800763c:	3fe45f30 	.word	0x3fe45f30
 8007640:	2e000000 	.word	0x2e000000
 8007644:	3ba3198a 	.word	0x3ba3198a
 8007648:	252049c1 	.word	0x252049c1
 800764c:	397b839a 	.word	0x397b839a
 8007650:	3fe921fb 	.word	0x3fe921fb
 8007654:	4002d97b 	.word	0x4002d97b
 8007658:	3ff921fb 	.word	0x3ff921fb
 800765c:	413921fb 	.word	0x413921fb
 8007660:	3fe00000 	.word	0x3fe00000
 8007664:	080086e4 	.word	0x080086e4
 8007668:	7fefffff 	.word	0x7fefffff
 800766c:	ea4f 552a 	mov.w	r5, sl, asr #20
 8007670:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8007674:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8007678:	460f      	mov	r7, r1
 800767a:	4606      	mov	r6, r0
 800767c:	f7f9 f9dc 	bl	8000a38 <__aeabi_d2iz>
 8007680:	f7f8 fec0 	bl	8000404 <__aeabi_i2d>
 8007684:	4602      	mov	r2, r0
 8007686:	460b      	mov	r3, r1
 8007688:	4630      	mov	r0, r6
 800768a:	4639      	mov	r1, r7
 800768c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007690:	f7f8 fd6a 	bl	8000168 <__aeabi_dsub>
 8007694:	2200      	movs	r2, #0
 8007696:	4b22      	ldr	r3, [pc, #136]	; (8007720 <__ieee754_rem_pio2+0x3e8>)
 8007698:	f7f8 ff1e 	bl	80004d8 <__aeabi_dmul>
 800769c:	460f      	mov	r7, r1
 800769e:	4606      	mov	r6, r0
 80076a0:	f7f9 f9ca 	bl	8000a38 <__aeabi_d2iz>
 80076a4:	f7f8 feae 	bl	8000404 <__aeabi_i2d>
 80076a8:	4602      	mov	r2, r0
 80076aa:	460b      	mov	r3, r1
 80076ac:	4630      	mov	r0, r6
 80076ae:	4639      	mov	r1, r7
 80076b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80076b4:	f7f8 fd58 	bl	8000168 <__aeabi_dsub>
 80076b8:	2200      	movs	r2, #0
 80076ba:	4b19      	ldr	r3, [pc, #100]	; (8007720 <__ieee754_rem_pio2+0x3e8>)
 80076bc:	f7f8 ff0c 	bl	80004d8 <__aeabi_dmul>
 80076c0:	f04f 0803 	mov.w	r8, #3
 80076c4:	2600      	movs	r6, #0
 80076c6:	2700      	movs	r7, #0
 80076c8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80076cc:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 80076d0:	4632      	mov	r2, r6
 80076d2:	e879 0102 	ldrd	r0, r1, [r9], #-8
 80076d6:	463b      	mov	r3, r7
 80076d8:	46c2      	mov	sl, r8
 80076da:	f108 38ff 	add.w	r8, r8, #4294967295
 80076de:	f7f9 f963 	bl	80009a8 <__aeabi_dcmpeq>
 80076e2:	2800      	cmp	r0, #0
 80076e4:	d1f4      	bne.n	80076d0 <__ieee754_rem_pio2+0x398>
 80076e6:	4b0f      	ldr	r3, [pc, #60]	; (8007724 <__ieee754_rem_pio2+0x3ec>)
 80076e8:	462a      	mov	r2, r5
 80076ea:	9301      	str	r3, [sp, #4]
 80076ec:	2302      	movs	r3, #2
 80076ee:	4621      	mov	r1, r4
 80076f0:	9300      	str	r3, [sp, #0]
 80076f2:	a806      	add	r0, sp, #24
 80076f4:	4653      	mov	r3, sl
 80076f6:	f000 f8d5 	bl	80078a4 <__kernel_rem_pio2>
 80076fa:	9b04      	ldr	r3, [sp, #16]
 80076fc:	4605      	mov	r5, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	f6bf ae51 	bge.w	80073a6 <__ieee754_rem_pio2+0x6e>
 8007704:	e9d4 2100 	ldrd	r2, r1, [r4]
 8007708:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800770c:	e9c4 2300 	strd	r2, r3, [r4]
 8007710:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8007714:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007718:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800771c:	e703      	b.n	8007526 <__ieee754_rem_pio2+0x1ee>
 800771e:	bf00      	nop
 8007720:	41700000 	.word	0x41700000
 8007724:	08008764 	.word	0x08008764

08007728 <__kernel_cos>:
 8007728:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800772c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007730:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8007734:	4680      	mov	r8, r0
 8007736:	460f      	mov	r7, r1
 8007738:	e9cd 2300 	strd	r2, r3, [sp]
 800773c:	da04      	bge.n	8007748 <__kernel_cos+0x20>
 800773e:	f7f9 f97b 	bl	8000a38 <__aeabi_d2iz>
 8007742:	2800      	cmp	r0, #0
 8007744:	f000 8086 	beq.w	8007854 <__kernel_cos+0x12c>
 8007748:	4642      	mov	r2, r8
 800774a:	463b      	mov	r3, r7
 800774c:	4640      	mov	r0, r8
 800774e:	4639      	mov	r1, r7
 8007750:	f7f8 fec2 	bl	80004d8 <__aeabi_dmul>
 8007754:	2200      	movs	r2, #0
 8007756:	4b4e      	ldr	r3, [pc, #312]	; (8007890 <__kernel_cos+0x168>)
 8007758:	4604      	mov	r4, r0
 800775a:	460d      	mov	r5, r1
 800775c:	f7f8 febc 	bl	80004d8 <__aeabi_dmul>
 8007760:	a33f      	add	r3, pc, #252	; (adr r3, 8007860 <__kernel_cos+0x138>)
 8007762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007766:	4682      	mov	sl, r0
 8007768:	468b      	mov	fp, r1
 800776a:	4620      	mov	r0, r4
 800776c:	4629      	mov	r1, r5
 800776e:	f7f8 feb3 	bl	80004d8 <__aeabi_dmul>
 8007772:	a33d      	add	r3, pc, #244	; (adr r3, 8007868 <__kernel_cos+0x140>)
 8007774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007778:	f7f8 fcf8 	bl	800016c <__adddf3>
 800777c:	4622      	mov	r2, r4
 800777e:	462b      	mov	r3, r5
 8007780:	f7f8 feaa 	bl	80004d8 <__aeabi_dmul>
 8007784:	a33a      	add	r3, pc, #232	; (adr r3, 8007870 <__kernel_cos+0x148>)
 8007786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778a:	f7f8 fced 	bl	8000168 <__aeabi_dsub>
 800778e:	4622      	mov	r2, r4
 8007790:	462b      	mov	r3, r5
 8007792:	f7f8 fea1 	bl	80004d8 <__aeabi_dmul>
 8007796:	a338      	add	r3, pc, #224	; (adr r3, 8007878 <__kernel_cos+0x150>)
 8007798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779c:	f7f8 fce6 	bl	800016c <__adddf3>
 80077a0:	4622      	mov	r2, r4
 80077a2:	462b      	mov	r3, r5
 80077a4:	f7f8 fe98 	bl	80004d8 <__aeabi_dmul>
 80077a8:	a335      	add	r3, pc, #212	; (adr r3, 8007880 <__kernel_cos+0x158>)
 80077aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ae:	f7f8 fcdb 	bl	8000168 <__aeabi_dsub>
 80077b2:	4622      	mov	r2, r4
 80077b4:	462b      	mov	r3, r5
 80077b6:	f7f8 fe8f 	bl	80004d8 <__aeabi_dmul>
 80077ba:	a333      	add	r3, pc, #204	; (adr r3, 8007888 <__kernel_cos+0x160>)
 80077bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c0:	f7f8 fcd4 	bl	800016c <__adddf3>
 80077c4:	4622      	mov	r2, r4
 80077c6:	462b      	mov	r3, r5
 80077c8:	f7f8 fe86 	bl	80004d8 <__aeabi_dmul>
 80077cc:	4622      	mov	r2, r4
 80077ce:	462b      	mov	r3, r5
 80077d0:	f7f8 fe82 	bl	80004d8 <__aeabi_dmul>
 80077d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077d8:	4604      	mov	r4, r0
 80077da:	460d      	mov	r5, r1
 80077dc:	4640      	mov	r0, r8
 80077de:	4639      	mov	r1, r7
 80077e0:	f7f8 fe7a 	bl	80004d8 <__aeabi_dmul>
 80077e4:	460b      	mov	r3, r1
 80077e6:	4602      	mov	r2, r0
 80077e8:	4629      	mov	r1, r5
 80077ea:	4620      	mov	r0, r4
 80077ec:	f7f8 fcbc 	bl	8000168 <__aeabi_dsub>
 80077f0:	4b28      	ldr	r3, [pc, #160]	; (8007894 <__kernel_cos+0x16c>)
 80077f2:	4680      	mov	r8, r0
 80077f4:	429e      	cmp	r6, r3
 80077f6:	4689      	mov	r9, r1
 80077f8:	dc0e      	bgt.n	8007818 <__kernel_cos+0xf0>
 80077fa:	4602      	mov	r2, r0
 80077fc:	460b      	mov	r3, r1
 80077fe:	4650      	mov	r0, sl
 8007800:	4659      	mov	r1, fp
 8007802:	f7f8 fcb1 	bl	8000168 <__aeabi_dsub>
 8007806:	4602      	mov	r2, r0
 8007808:	2000      	movs	r0, #0
 800780a:	460b      	mov	r3, r1
 800780c:	4922      	ldr	r1, [pc, #136]	; (8007898 <__kernel_cos+0x170>)
 800780e:	f7f8 fcab 	bl	8000168 <__aeabi_dsub>
 8007812:	b003      	add	sp, #12
 8007814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007818:	2400      	movs	r4, #0
 800781a:	4b20      	ldr	r3, [pc, #128]	; (800789c <__kernel_cos+0x174>)
 800781c:	4622      	mov	r2, r4
 800781e:	429e      	cmp	r6, r3
 8007820:	bfcc      	ite	gt
 8007822:	4d1f      	ldrgt	r5, [pc, #124]	; (80078a0 <__kernel_cos+0x178>)
 8007824:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8007828:	462b      	mov	r3, r5
 800782a:	2000      	movs	r0, #0
 800782c:	491a      	ldr	r1, [pc, #104]	; (8007898 <__kernel_cos+0x170>)
 800782e:	f7f8 fc9b 	bl	8000168 <__aeabi_dsub>
 8007832:	4622      	mov	r2, r4
 8007834:	4606      	mov	r6, r0
 8007836:	460f      	mov	r7, r1
 8007838:	462b      	mov	r3, r5
 800783a:	4650      	mov	r0, sl
 800783c:	4659      	mov	r1, fp
 800783e:	f7f8 fc93 	bl	8000168 <__aeabi_dsub>
 8007842:	4642      	mov	r2, r8
 8007844:	464b      	mov	r3, r9
 8007846:	f7f8 fc8f 	bl	8000168 <__aeabi_dsub>
 800784a:	4602      	mov	r2, r0
 800784c:	460b      	mov	r3, r1
 800784e:	4630      	mov	r0, r6
 8007850:	4639      	mov	r1, r7
 8007852:	e7dc      	b.n	800780e <__kernel_cos+0xe6>
 8007854:	2000      	movs	r0, #0
 8007856:	4910      	ldr	r1, [pc, #64]	; (8007898 <__kernel_cos+0x170>)
 8007858:	e7db      	b.n	8007812 <__kernel_cos+0xea>
 800785a:	bf00      	nop
 800785c:	f3af 8000 	nop.w
 8007860:	be8838d4 	.word	0xbe8838d4
 8007864:	bda8fae9 	.word	0xbda8fae9
 8007868:	bdb4b1c4 	.word	0xbdb4b1c4
 800786c:	3e21ee9e 	.word	0x3e21ee9e
 8007870:	809c52ad 	.word	0x809c52ad
 8007874:	3e927e4f 	.word	0x3e927e4f
 8007878:	19cb1590 	.word	0x19cb1590
 800787c:	3efa01a0 	.word	0x3efa01a0
 8007880:	16c15177 	.word	0x16c15177
 8007884:	3f56c16c 	.word	0x3f56c16c
 8007888:	5555554c 	.word	0x5555554c
 800788c:	3fa55555 	.word	0x3fa55555
 8007890:	3fe00000 	.word	0x3fe00000
 8007894:	3fd33332 	.word	0x3fd33332
 8007898:	3ff00000 	.word	0x3ff00000
 800789c:	3fe90000 	.word	0x3fe90000
 80078a0:	3fd20000 	.word	0x3fd20000

080078a4 <__kernel_rem_pio2>:
 80078a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078a8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80078ac:	9308      	str	r3, [sp, #32]
 80078ae:	9106      	str	r1, [sp, #24]
 80078b0:	4bb6      	ldr	r3, [pc, #728]	; (8007b8c <__kernel_rem_pio2+0x2e8>)
 80078b2:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80078b4:	f112 0f14 	cmn.w	r2, #20
 80078b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80078bc:	bfa8      	it	ge
 80078be:	1ed4      	subge	r4, r2, #3
 80078c0:	9302      	str	r3, [sp, #8]
 80078c2:	9b08      	ldr	r3, [sp, #32]
 80078c4:	bfb8      	it	lt
 80078c6:	2400      	movlt	r4, #0
 80078c8:	f103 33ff 	add.w	r3, r3, #4294967295
 80078cc:	9307      	str	r3, [sp, #28]
 80078ce:	bfa4      	itt	ge
 80078d0:	2318      	movge	r3, #24
 80078d2:	fb94 f4f3 	sdivge	r4, r4, r3
 80078d6:	f06f 0317 	mvn.w	r3, #23
 80078da:	fb04 3303 	mla	r3, r4, r3, r3
 80078de:	eb03 0b02 	add.w	fp, r3, r2
 80078e2:	9a07      	ldr	r2, [sp, #28]
 80078e4:	9b02      	ldr	r3, [sp, #8]
 80078e6:	1aa7      	subs	r7, r4, r2
 80078e8:	eb03 0802 	add.w	r8, r3, r2
 80078ec:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80078ee:	2500      	movs	r5, #0
 80078f0:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80078f4:	2200      	movs	r2, #0
 80078f6:	2300      	movs	r3, #0
 80078f8:	9009      	str	r0, [sp, #36]	; 0x24
 80078fa:	ae20      	add	r6, sp, #128	; 0x80
 80078fc:	4545      	cmp	r5, r8
 80078fe:	dd14      	ble.n	800792a <__kernel_rem_pio2+0x86>
 8007900:	f04f 0800 	mov.w	r8, #0
 8007904:	9a08      	ldr	r2, [sp, #32]
 8007906:	ab20      	add	r3, sp, #128	; 0x80
 8007908:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800790c:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8007910:	9b02      	ldr	r3, [sp, #8]
 8007912:	4598      	cmp	r8, r3
 8007914:	dc35      	bgt.n	8007982 <__kernel_rem_pio2+0xde>
 8007916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007918:	2200      	movs	r2, #0
 800791a:	f1a3 0908 	sub.w	r9, r3, #8
 800791e:	2300      	movs	r3, #0
 8007920:	462f      	mov	r7, r5
 8007922:	2600      	movs	r6, #0
 8007924:	e9cd 2300 	strd	r2, r3, [sp]
 8007928:	e01f      	b.n	800796a <__kernel_rem_pio2+0xc6>
 800792a:	42ef      	cmn	r7, r5
 800792c:	d40b      	bmi.n	8007946 <__kernel_rem_pio2+0xa2>
 800792e:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007932:	e9cd 2300 	strd	r2, r3, [sp]
 8007936:	f7f8 fd65 	bl	8000404 <__aeabi_i2d>
 800793a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800793e:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007942:	3501      	adds	r5, #1
 8007944:	e7da      	b.n	80078fc <__kernel_rem_pio2+0x58>
 8007946:	4610      	mov	r0, r2
 8007948:	4619      	mov	r1, r3
 800794a:	e7f8      	b.n	800793e <__kernel_rem_pio2+0x9a>
 800794c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007950:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8007954:	f7f8 fdc0 	bl	80004d8 <__aeabi_dmul>
 8007958:	4602      	mov	r2, r0
 800795a:	460b      	mov	r3, r1
 800795c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007960:	f7f8 fc04 	bl	800016c <__adddf3>
 8007964:	e9cd 0100 	strd	r0, r1, [sp]
 8007968:	3601      	adds	r6, #1
 800796a:	9b07      	ldr	r3, [sp, #28]
 800796c:	3f08      	subs	r7, #8
 800796e:	429e      	cmp	r6, r3
 8007970:	ddec      	ble.n	800794c <__kernel_rem_pio2+0xa8>
 8007972:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007976:	f108 0801 	add.w	r8, r8, #1
 800797a:	e8ea 2302 	strd	r2, r3, [sl], #8
 800797e:	3508      	adds	r5, #8
 8007980:	e7c6      	b.n	8007910 <__kernel_rem_pio2+0x6c>
 8007982:	9b02      	ldr	r3, [sp, #8]
 8007984:	aa0c      	add	r2, sp, #48	; 0x30
 8007986:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800798a:	930b      	str	r3, [sp, #44]	; 0x2c
 800798c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800798e:	9e02      	ldr	r6, [sp, #8]
 8007990:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007994:	930a      	str	r3, [sp, #40]	; 0x28
 8007996:	ab98      	add	r3, sp, #608	; 0x260
 8007998:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800799c:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 80079a0:	ab70      	add	r3, sp, #448	; 0x1c0
 80079a2:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 80079a6:	46d0      	mov	r8, sl
 80079a8:	46b1      	mov	r9, r6
 80079aa:	af0c      	add	r7, sp, #48	; 0x30
 80079ac:	9700      	str	r7, [sp, #0]
 80079ae:	f1b9 0f00 	cmp.w	r9, #0
 80079b2:	f1a8 0808 	sub.w	r8, r8, #8
 80079b6:	dc71      	bgt.n	8007a9c <__kernel_rem_pio2+0x1f8>
 80079b8:	465a      	mov	r2, fp
 80079ba:	4620      	mov	r0, r4
 80079bc:	4629      	mov	r1, r5
 80079be:	f000 fbef 	bl	80081a0 <scalbn>
 80079c2:	2200      	movs	r2, #0
 80079c4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80079c8:	4604      	mov	r4, r0
 80079ca:	460d      	mov	r5, r1
 80079cc:	f7f8 fd84 	bl	80004d8 <__aeabi_dmul>
 80079d0:	f000 fb66 	bl	80080a0 <floor>
 80079d4:	2200      	movs	r2, #0
 80079d6:	4b6e      	ldr	r3, [pc, #440]	; (8007b90 <__kernel_rem_pio2+0x2ec>)
 80079d8:	f7f8 fd7e 	bl	80004d8 <__aeabi_dmul>
 80079dc:	4602      	mov	r2, r0
 80079de:	460b      	mov	r3, r1
 80079e0:	4620      	mov	r0, r4
 80079e2:	4629      	mov	r1, r5
 80079e4:	f7f8 fbc0 	bl	8000168 <__aeabi_dsub>
 80079e8:	460d      	mov	r5, r1
 80079ea:	4604      	mov	r4, r0
 80079ec:	f7f9 f824 	bl	8000a38 <__aeabi_d2iz>
 80079f0:	9004      	str	r0, [sp, #16]
 80079f2:	f7f8 fd07 	bl	8000404 <__aeabi_i2d>
 80079f6:	4602      	mov	r2, r0
 80079f8:	460b      	mov	r3, r1
 80079fa:	4620      	mov	r0, r4
 80079fc:	4629      	mov	r1, r5
 80079fe:	f7f8 fbb3 	bl	8000168 <__aeabi_dsub>
 8007a02:	f1bb 0f00 	cmp.w	fp, #0
 8007a06:	4680      	mov	r8, r0
 8007a08:	4689      	mov	r9, r1
 8007a0a:	dd70      	ble.n	8007aee <__kernel_rem_pio2+0x24a>
 8007a0c:	1e72      	subs	r2, r6, #1
 8007a0e:	ab0c      	add	r3, sp, #48	; 0x30
 8007a10:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007a14:	9c04      	ldr	r4, [sp, #16]
 8007a16:	f1cb 0118 	rsb	r1, fp, #24
 8007a1a:	fa40 f301 	asr.w	r3, r0, r1
 8007a1e:	441c      	add	r4, r3
 8007a20:	408b      	lsls	r3, r1
 8007a22:	1ac0      	subs	r0, r0, r3
 8007a24:	ab0c      	add	r3, sp, #48	; 0x30
 8007a26:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007a2a:	f1cb 0317 	rsb	r3, fp, #23
 8007a2e:	9404      	str	r4, [sp, #16]
 8007a30:	fa40 f303 	asr.w	r3, r0, r3
 8007a34:	9300      	str	r3, [sp, #0]
 8007a36:	9b00      	ldr	r3, [sp, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	dd66      	ble.n	8007b0a <__kernel_rem_pio2+0x266>
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007a42:	4614      	mov	r4, r2
 8007a44:	9b04      	ldr	r3, [sp, #16]
 8007a46:	3301      	adds	r3, #1
 8007a48:	9304      	str	r3, [sp, #16]
 8007a4a:	4296      	cmp	r6, r2
 8007a4c:	f300 80ac 	bgt.w	8007ba8 <__kernel_rem_pio2+0x304>
 8007a50:	f1bb 0f00 	cmp.w	fp, #0
 8007a54:	dd07      	ble.n	8007a66 <__kernel_rem_pio2+0x1c2>
 8007a56:	f1bb 0f01 	cmp.w	fp, #1
 8007a5a:	f000 80b4 	beq.w	8007bc6 <__kernel_rem_pio2+0x322>
 8007a5e:	f1bb 0f02 	cmp.w	fp, #2
 8007a62:	f000 80ba 	beq.w	8007bda <__kernel_rem_pio2+0x336>
 8007a66:	9b00      	ldr	r3, [sp, #0]
 8007a68:	2b02      	cmp	r3, #2
 8007a6a:	d14e      	bne.n	8007b0a <__kernel_rem_pio2+0x266>
 8007a6c:	4642      	mov	r2, r8
 8007a6e:	464b      	mov	r3, r9
 8007a70:	2000      	movs	r0, #0
 8007a72:	4948      	ldr	r1, [pc, #288]	; (8007b94 <__kernel_rem_pio2+0x2f0>)
 8007a74:	f7f8 fb78 	bl	8000168 <__aeabi_dsub>
 8007a78:	4680      	mov	r8, r0
 8007a7a:	4689      	mov	r9, r1
 8007a7c:	2c00      	cmp	r4, #0
 8007a7e:	d044      	beq.n	8007b0a <__kernel_rem_pio2+0x266>
 8007a80:	465a      	mov	r2, fp
 8007a82:	2000      	movs	r0, #0
 8007a84:	4943      	ldr	r1, [pc, #268]	; (8007b94 <__kernel_rem_pio2+0x2f0>)
 8007a86:	f000 fb8b 	bl	80081a0 <scalbn>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	4640      	mov	r0, r8
 8007a90:	4649      	mov	r1, r9
 8007a92:	f7f8 fb69 	bl	8000168 <__aeabi_dsub>
 8007a96:	4680      	mov	r8, r0
 8007a98:	4689      	mov	r9, r1
 8007a9a:	e036      	b.n	8007b0a <__kernel_rem_pio2+0x266>
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	4b3e      	ldr	r3, [pc, #248]	; (8007b98 <__kernel_rem_pio2+0x2f4>)
 8007aa0:	4620      	mov	r0, r4
 8007aa2:	4629      	mov	r1, r5
 8007aa4:	f7f8 fd18 	bl	80004d8 <__aeabi_dmul>
 8007aa8:	f7f8 ffc6 	bl	8000a38 <__aeabi_d2iz>
 8007aac:	f7f8 fcaa 	bl	8000404 <__aeabi_i2d>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	4b38      	ldr	r3, [pc, #224]	; (8007b9c <__kernel_rem_pio2+0x2f8>)
 8007abc:	f7f8 fd0c 	bl	80004d8 <__aeabi_dmul>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	4620      	mov	r0, r4
 8007ac6:	4629      	mov	r1, r5
 8007ac8:	f7f8 fb4e 	bl	8000168 <__aeabi_dsub>
 8007acc:	f7f8 ffb4 	bl	8000a38 <__aeabi_d2iz>
 8007ad0:	9b00      	ldr	r3, [sp, #0]
 8007ad2:	f109 39ff 	add.w	r9, r9, #4294967295
 8007ad6:	f843 0b04 	str.w	r0, [r3], #4
 8007ada:	9300      	str	r3, [sp, #0]
 8007adc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ae0:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007ae4:	f7f8 fb42 	bl	800016c <__adddf3>
 8007ae8:	4604      	mov	r4, r0
 8007aea:	460d      	mov	r5, r1
 8007aec:	e75f      	b.n	80079ae <__kernel_rem_pio2+0x10a>
 8007aee:	d105      	bne.n	8007afc <__kernel_rem_pio2+0x258>
 8007af0:	1e73      	subs	r3, r6, #1
 8007af2:	aa0c      	add	r2, sp, #48	; 0x30
 8007af4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007af8:	15c3      	asrs	r3, r0, #23
 8007afa:	e79b      	b.n	8007a34 <__kernel_rem_pio2+0x190>
 8007afc:	2200      	movs	r2, #0
 8007afe:	4b28      	ldr	r3, [pc, #160]	; (8007ba0 <__kernel_rem_pio2+0x2fc>)
 8007b00:	f7f8 ff70 	bl	80009e4 <__aeabi_dcmpge>
 8007b04:	2800      	cmp	r0, #0
 8007b06:	d13e      	bne.n	8007b86 <__kernel_rem_pio2+0x2e2>
 8007b08:	9000      	str	r0, [sp, #0]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	4640      	mov	r0, r8
 8007b10:	4649      	mov	r1, r9
 8007b12:	f7f8 ff49 	bl	80009a8 <__aeabi_dcmpeq>
 8007b16:	2800      	cmp	r0, #0
 8007b18:	f000 80b1 	beq.w	8007c7e <__kernel_rem_pio2+0x3da>
 8007b1c:	1e74      	subs	r4, r6, #1
 8007b1e:	4623      	mov	r3, r4
 8007b20:	2200      	movs	r2, #0
 8007b22:	9902      	ldr	r1, [sp, #8]
 8007b24:	428b      	cmp	r3, r1
 8007b26:	da5f      	bge.n	8007be8 <__kernel_rem_pio2+0x344>
 8007b28:	2a00      	cmp	r2, #0
 8007b2a:	d074      	beq.n	8007c16 <__kernel_rem_pio2+0x372>
 8007b2c:	ab0c      	add	r3, sp, #48	; 0x30
 8007b2e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007b32:	f1ab 0b18 	sub.w	fp, fp, #24
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f000 809f 	beq.w	8007c7a <__kernel_rem_pio2+0x3d6>
 8007b3c:	465a      	mov	r2, fp
 8007b3e:	2000      	movs	r0, #0
 8007b40:	4914      	ldr	r1, [pc, #80]	; (8007b94 <__kernel_rem_pio2+0x2f0>)
 8007b42:	f000 fb2d 	bl	80081a0 <scalbn>
 8007b46:	46a2      	mov	sl, r4
 8007b48:	4606      	mov	r6, r0
 8007b4a:	460f      	mov	r7, r1
 8007b4c:	f04f 0800 	mov.w	r8, #0
 8007b50:	ab70      	add	r3, sp, #448	; 0x1c0
 8007b52:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8007b98 <__kernel_rem_pio2+0x2f4>
 8007b56:	00e5      	lsls	r5, r4, #3
 8007b58:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8007b5c:	f1ba 0f00 	cmp.w	sl, #0
 8007b60:	f280 80c3 	bge.w	8007cea <__kernel_rem_pio2+0x446>
 8007b64:	4626      	mov	r6, r4
 8007b66:	2e00      	cmp	r6, #0
 8007b68:	f2c0 80f5 	blt.w	8007d56 <__kernel_rem_pio2+0x4b2>
 8007b6c:	4b0d      	ldr	r3, [pc, #52]	; (8007ba4 <__kernel_rem_pio2+0x300>)
 8007b6e:	f04f 0a00 	mov.w	sl, #0
 8007b72:	9307      	str	r3, [sp, #28]
 8007b74:	ab70      	add	r3, sp, #448	; 0x1c0
 8007b76:	f04f 0b00 	mov.w	fp, #0
 8007b7a:	f04f 0800 	mov.w	r8, #0
 8007b7e:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8007b82:	1ba7      	subs	r7, r4, r6
 8007b84:	e0db      	b.n	8007d3e <__kernel_rem_pio2+0x49a>
 8007b86:	2302      	movs	r3, #2
 8007b88:	9300      	str	r3, [sp, #0]
 8007b8a:	e757      	b.n	8007a3c <__kernel_rem_pio2+0x198>
 8007b8c:	080088b0 	.word	0x080088b0
 8007b90:	40200000 	.word	0x40200000
 8007b94:	3ff00000 	.word	0x3ff00000
 8007b98:	3e700000 	.word	0x3e700000
 8007b9c:	41700000 	.word	0x41700000
 8007ba0:	3fe00000 	.word	0x3fe00000
 8007ba4:	08008870 	.word	0x08008870
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	b944      	cbnz	r4, 8007bbe <__kernel_rem_pio2+0x31a>
 8007bac:	b11b      	cbz	r3, 8007bb6 <__kernel_rem_pio2+0x312>
 8007bae:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007bb2:	603b      	str	r3, [r7, #0]
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	461c      	mov	r4, r3
 8007bb8:	3201      	adds	r2, #1
 8007bba:	3704      	adds	r7, #4
 8007bbc:	e745      	b.n	8007a4a <__kernel_rem_pio2+0x1a6>
 8007bbe:	1acb      	subs	r3, r1, r3
 8007bc0:	603b      	str	r3, [r7, #0]
 8007bc2:	4623      	mov	r3, r4
 8007bc4:	e7f7      	b.n	8007bb6 <__kernel_rem_pio2+0x312>
 8007bc6:	1e72      	subs	r2, r6, #1
 8007bc8:	ab0c      	add	r3, sp, #48	; 0x30
 8007bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bce:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007bd2:	a90c      	add	r1, sp, #48	; 0x30
 8007bd4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007bd8:	e745      	b.n	8007a66 <__kernel_rem_pio2+0x1c2>
 8007bda:	1e72      	subs	r2, r6, #1
 8007bdc:	ab0c      	add	r3, sp, #48	; 0x30
 8007bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007be2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007be6:	e7f4      	b.n	8007bd2 <__kernel_rem_pio2+0x32e>
 8007be8:	a90c      	add	r1, sp, #48	; 0x30
 8007bea:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007bee:	3b01      	subs	r3, #1
 8007bf0:	430a      	orrs	r2, r1
 8007bf2:	e796      	b.n	8007b22 <__kernel_rem_pio2+0x27e>
 8007bf4:	3401      	adds	r4, #1
 8007bf6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007bfa:	2a00      	cmp	r2, #0
 8007bfc:	d0fa      	beq.n	8007bf4 <__kernel_rem_pio2+0x350>
 8007bfe:	9b08      	ldr	r3, [sp, #32]
 8007c00:	f106 0801 	add.w	r8, r6, #1
 8007c04:	18f5      	adds	r5, r6, r3
 8007c06:	ab20      	add	r3, sp, #128	; 0x80
 8007c08:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007c0c:	4434      	add	r4, r6
 8007c0e:	4544      	cmp	r4, r8
 8007c10:	da04      	bge.n	8007c1c <__kernel_rem_pio2+0x378>
 8007c12:	4626      	mov	r6, r4
 8007c14:	e6bf      	b.n	8007996 <__kernel_rem_pio2+0xf2>
 8007c16:	2401      	movs	r4, #1
 8007c18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c1a:	e7ec      	b.n	8007bf6 <__kernel_rem_pio2+0x352>
 8007c1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c1e:	f04f 0900 	mov.w	r9, #0
 8007c22:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007c26:	f7f8 fbed 	bl	8000404 <__aeabi_i2d>
 8007c2a:	2600      	movs	r6, #0
 8007c2c:	2700      	movs	r7, #0
 8007c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c30:	e9c5 0100 	strd	r0, r1, [r5]
 8007c34:	3b08      	subs	r3, #8
 8007c36:	9300      	str	r3, [sp, #0]
 8007c38:	9504      	str	r5, [sp, #16]
 8007c3a:	9b07      	ldr	r3, [sp, #28]
 8007c3c:	4599      	cmp	r9, r3
 8007c3e:	dd05      	ble.n	8007c4c <__kernel_rem_pio2+0x3a8>
 8007c40:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8007c44:	f108 0801 	add.w	r8, r8, #1
 8007c48:	3508      	adds	r5, #8
 8007c4a:	e7e0      	b.n	8007c0e <__kernel_rem_pio2+0x36a>
 8007c4c:	f8dd c010 	ldr.w	ip, [sp, #16]
 8007c50:	9900      	ldr	r1, [sp, #0]
 8007c52:	f109 0901 	add.w	r9, r9, #1
 8007c56:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8007c5a:	9100      	str	r1, [sp, #0]
 8007c5c:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8007c60:	f8cd c010 	str.w	ip, [sp, #16]
 8007c64:	f7f8 fc38 	bl	80004d8 <__aeabi_dmul>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	4630      	mov	r0, r6
 8007c6e:	4639      	mov	r1, r7
 8007c70:	f7f8 fa7c 	bl	800016c <__adddf3>
 8007c74:	4606      	mov	r6, r0
 8007c76:	460f      	mov	r7, r1
 8007c78:	e7df      	b.n	8007c3a <__kernel_rem_pio2+0x396>
 8007c7a:	3c01      	subs	r4, #1
 8007c7c:	e756      	b.n	8007b2c <__kernel_rem_pio2+0x288>
 8007c7e:	f1cb 0200 	rsb	r2, fp, #0
 8007c82:	4640      	mov	r0, r8
 8007c84:	4649      	mov	r1, r9
 8007c86:	f000 fa8b 	bl	80081a0 <scalbn>
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	4ba4      	ldr	r3, [pc, #656]	; (8007f20 <__kernel_rem_pio2+0x67c>)
 8007c8e:	4604      	mov	r4, r0
 8007c90:	460d      	mov	r5, r1
 8007c92:	f7f8 fea7 	bl	80009e4 <__aeabi_dcmpge>
 8007c96:	b1f8      	cbz	r0, 8007cd8 <__kernel_rem_pio2+0x434>
 8007c98:	2200      	movs	r2, #0
 8007c9a:	4ba2      	ldr	r3, [pc, #648]	; (8007f24 <__kernel_rem_pio2+0x680>)
 8007c9c:	4620      	mov	r0, r4
 8007c9e:	4629      	mov	r1, r5
 8007ca0:	f7f8 fc1a 	bl	80004d8 <__aeabi_dmul>
 8007ca4:	f7f8 fec8 	bl	8000a38 <__aeabi_d2iz>
 8007ca8:	4607      	mov	r7, r0
 8007caa:	f7f8 fbab 	bl	8000404 <__aeabi_i2d>
 8007cae:	2200      	movs	r2, #0
 8007cb0:	4b9b      	ldr	r3, [pc, #620]	; (8007f20 <__kernel_rem_pio2+0x67c>)
 8007cb2:	f7f8 fc11 	bl	80004d8 <__aeabi_dmul>
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	4602      	mov	r2, r0
 8007cba:	4629      	mov	r1, r5
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	f7f8 fa53 	bl	8000168 <__aeabi_dsub>
 8007cc2:	f7f8 feb9 	bl	8000a38 <__aeabi_d2iz>
 8007cc6:	1c74      	adds	r4, r6, #1
 8007cc8:	ab0c      	add	r3, sp, #48	; 0x30
 8007cca:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8007cce:	f10b 0b18 	add.w	fp, fp, #24
 8007cd2:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8007cd6:	e731      	b.n	8007b3c <__kernel_rem_pio2+0x298>
 8007cd8:	4620      	mov	r0, r4
 8007cda:	4629      	mov	r1, r5
 8007cdc:	f7f8 feac 	bl	8000a38 <__aeabi_d2iz>
 8007ce0:	ab0c      	add	r3, sp, #48	; 0x30
 8007ce2:	4634      	mov	r4, r6
 8007ce4:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8007ce8:	e728      	b.n	8007b3c <__kernel_rem_pio2+0x298>
 8007cea:	ab0c      	add	r3, sp, #48	; 0x30
 8007cec:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8007cf0:	f7f8 fb88 	bl	8000404 <__aeabi_i2d>
 8007cf4:	4632      	mov	r2, r6
 8007cf6:	463b      	mov	r3, r7
 8007cf8:	f7f8 fbee 	bl	80004d8 <__aeabi_dmul>
 8007cfc:	4642      	mov	r2, r8
 8007cfe:	e86b 0102 	strd	r0, r1, [fp], #-8
 8007d02:	464b      	mov	r3, r9
 8007d04:	4630      	mov	r0, r6
 8007d06:	4639      	mov	r1, r7
 8007d08:	f7f8 fbe6 	bl	80004d8 <__aeabi_dmul>
 8007d0c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d10:	4606      	mov	r6, r0
 8007d12:	460f      	mov	r7, r1
 8007d14:	e722      	b.n	8007b5c <__kernel_rem_pio2+0x2b8>
 8007d16:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8007d1a:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8007d1e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8007d22:	f8cd c01c 	str.w	ip, [sp, #28]
 8007d26:	f7f8 fbd7 	bl	80004d8 <__aeabi_dmul>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	4650      	mov	r0, sl
 8007d30:	4659      	mov	r1, fp
 8007d32:	f7f8 fa1b 	bl	800016c <__adddf3>
 8007d36:	4682      	mov	sl, r0
 8007d38:	468b      	mov	fp, r1
 8007d3a:	f108 0801 	add.w	r8, r8, #1
 8007d3e:	9b02      	ldr	r3, [sp, #8]
 8007d40:	4598      	cmp	r8, r3
 8007d42:	dc01      	bgt.n	8007d48 <__kernel_rem_pio2+0x4a4>
 8007d44:	45b8      	cmp	r8, r7
 8007d46:	dde6      	ble.n	8007d16 <__kernel_rem_pio2+0x472>
 8007d48:	ab48      	add	r3, sp, #288	; 0x120
 8007d4a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007d4e:	e9c7 ab00 	strd	sl, fp, [r7]
 8007d52:	3e01      	subs	r6, #1
 8007d54:	e707      	b.n	8007b66 <__kernel_rem_pio2+0x2c2>
 8007d56:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	dc09      	bgt.n	8007d70 <__kernel_rem_pio2+0x4cc>
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	dc32      	bgt.n	8007dc6 <__kernel_rem_pio2+0x522>
 8007d60:	d05a      	beq.n	8007e18 <__kernel_rem_pio2+0x574>
 8007d62:	9b04      	ldr	r3, [sp, #16]
 8007d64:	f003 0007 	and.w	r0, r3, #7
 8007d68:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8007d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d70:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8007d72:	2b03      	cmp	r3, #3
 8007d74:	d1f5      	bne.n	8007d62 <__kernel_rem_pio2+0x4be>
 8007d76:	ab48      	add	r3, sp, #288	; 0x120
 8007d78:	441d      	add	r5, r3
 8007d7a:	46aa      	mov	sl, r5
 8007d7c:	46a3      	mov	fp, r4
 8007d7e:	f1bb 0f00 	cmp.w	fp, #0
 8007d82:	dc76      	bgt.n	8007e72 <__kernel_rem_pio2+0x5ce>
 8007d84:	46aa      	mov	sl, r5
 8007d86:	46a3      	mov	fp, r4
 8007d88:	f1bb 0f01 	cmp.w	fp, #1
 8007d8c:	f300 8090 	bgt.w	8007eb0 <__kernel_rem_pio2+0x60c>
 8007d90:	2700      	movs	r7, #0
 8007d92:	463e      	mov	r6, r7
 8007d94:	2c01      	cmp	r4, #1
 8007d96:	f300 80aa 	bgt.w	8007eee <__kernel_rem_pio2+0x64a>
 8007d9a:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8007d9e:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8007da2:	9b00      	ldr	r3, [sp, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	f040 80ac 	bne.w	8007f02 <__kernel_rem_pio2+0x65e>
 8007daa:	4603      	mov	r3, r0
 8007dac:	462a      	mov	r2, r5
 8007dae:	9806      	ldr	r0, [sp, #24]
 8007db0:	e9c0 2300 	strd	r2, r3, [r0]
 8007db4:	4622      	mov	r2, r4
 8007db6:	460b      	mov	r3, r1
 8007db8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007dbc:	463a      	mov	r2, r7
 8007dbe:	4633      	mov	r3, r6
 8007dc0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8007dc4:	e7cd      	b.n	8007d62 <__kernel_rem_pio2+0x4be>
 8007dc6:	2000      	movs	r0, #0
 8007dc8:	46a0      	mov	r8, r4
 8007dca:	4601      	mov	r1, r0
 8007dcc:	ab48      	add	r3, sp, #288	; 0x120
 8007dce:	441d      	add	r5, r3
 8007dd0:	f1b8 0f00 	cmp.w	r8, #0
 8007dd4:	da3a      	bge.n	8007e4c <__kernel_rem_pio2+0x5a8>
 8007dd6:	9b00      	ldr	r3, [sp, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d03e      	beq.n	8007e5a <__kernel_rem_pio2+0x5b6>
 8007ddc:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8007de0:	4602      	mov	r2, r0
 8007de2:	462b      	mov	r3, r5
 8007de4:	9d06      	ldr	r5, [sp, #24]
 8007de6:	2601      	movs	r6, #1
 8007de8:	e9c5 2300 	strd	r2, r3, [r5]
 8007dec:	460b      	mov	r3, r1
 8007dee:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8007df2:	f7f8 f9b9 	bl	8000168 <__aeabi_dsub>
 8007df6:	4684      	mov	ip, r0
 8007df8:	460f      	mov	r7, r1
 8007dfa:	ad48      	add	r5, sp, #288	; 0x120
 8007dfc:	42b4      	cmp	r4, r6
 8007dfe:	f105 0508 	add.w	r5, r5, #8
 8007e02:	da2c      	bge.n	8007e5e <__kernel_rem_pio2+0x5ba>
 8007e04:	9b00      	ldr	r3, [sp, #0]
 8007e06:	b10b      	cbz	r3, 8007e0c <__kernel_rem_pio2+0x568>
 8007e08:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8007e0c:	4662      	mov	r2, ip
 8007e0e:	463b      	mov	r3, r7
 8007e10:	9906      	ldr	r1, [sp, #24]
 8007e12:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8007e16:	e7a4      	b.n	8007d62 <__kernel_rem_pio2+0x4be>
 8007e18:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8007e1a:	ab48      	add	r3, sp, #288	; 0x120
 8007e1c:	4637      	mov	r7, r6
 8007e1e:	441d      	add	r5, r3
 8007e20:	2c00      	cmp	r4, #0
 8007e22:	da09      	bge.n	8007e38 <__kernel_rem_pio2+0x594>
 8007e24:	9b00      	ldr	r3, [sp, #0]
 8007e26:	b10b      	cbz	r3, 8007e2c <__kernel_rem_pio2+0x588>
 8007e28:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8007e2c:	4632      	mov	r2, r6
 8007e2e:	463b      	mov	r3, r7
 8007e30:	9906      	ldr	r1, [sp, #24]
 8007e32:	e9c1 2300 	strd	r2, r3, [r1]
 8007e36:	e794      	b.n	8007d62 <__kernel_rem_pio2+0x4be>
 8007e38:	4630      	mov	r0, r6
 8007e3a:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8007e3e:	4639      	mov	r1, r7
 8007e40:	f7f8 f994 	bl	800016c <__adddf3>
 8007e44:	3c01      	subs	r4, #1
 8007e46:	4606      	mov	r6, r0
 8007e48:	460f      	mov	r7, r1
 8007e4a:	e7e9      	b.n	8007e20 <__kernel_rem_pio2+0x57c>
 8007e4c:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8007e50:	f7f8 f98c 	bl	800016c <__adddf3>
 8007e54:	f108 38ff 	add.w	r8, r8, #4294967295
 8007e58:	e7ba      	b.n	8007dd0 <__kernel_rem_pio2+0x52c>
 8007e5a:	460d      	mov	r5, r1
 8007e5c:	e7c0      	b.n	8007de0 <__kernel_rem_pio2+0x53c>
 8007e5e:	4660      	mov	r0, ip
 8007e60:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e64:	4639      	mov	r1, r7
 8007e66:	f7f8 f981 	bl	800016c <__adddf3>
 8007e6a:	3601      	adds	r6, #1
 8007e6c:	4684      	mov	ip, r0
 8007e6e:	460f      	mov	r7, r1
 8007e70:	e7c4      	b.n	8007dfc <__kernel_rem_pio2+0x558>
 8007e72:	e9da 6700 	ldrd	r6, r7, [sl]
 8007e76:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8007e7a:	4632      	mov	r2, r6
 8007e7c:	463b      	mov	r3, r7
 8007e7e:	4640      	mov	r0, r8
 8007e80:	4649      	mov	r1, r9
 8007e82:	f7f8 f973 	bl	800016c <__adddf3>
 8007e86:	4602      	mov	r2, r0
 8007e88:	460b      	mov	r3, r1
 8007e8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e8e:	4640      	mov	r0, r8
 8007e90:	4649      	mov	r1, r9
 8007e92:	f7f8 f969 	bl	8000168 <__aeabi_dsub>
 8007e96:	4632      	mov	r2, r6
 8007e98:	463b      	mov	r3, r7
 8007e9a:	f7f8 f967 	bl	800016c <__adddf3>
 8007e9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ea2:	e86a 0102 	strd	r0, r1, [sl], #-8
 8007ea6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007eaa:	e9ca 2300 	strd	r2, r3, [sl]
 8007eae:	e766      	b.n	8007d7e <__kernel_rem_pio2+0x4da>
 8007eb0:	e9da 8900 	ldrd	r8, r9, [sl]
 8007eb4:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8007eb8:	4642      	mov	r2, r8
 8007eba:	464b      	mov	r3, r9
 8007ebc:	4630      	mov	r0, r6
 8007ebe:	4639      	mov	r1, r7
 8007ec0:	f7f8 f954 	bl	800016c <__adddf3>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ecc:	4630      	mov	r0, r6
 8007ece:	4639      	mov	r1, r7
 8007ed0:	f7f8 f94a 	bl	8000168 <__aeabi_dsub>
 8007ed4:	4642      	mov	r2, r8
 8007ed6:	464b      	mov	r3, r9
 8007ed8:	f7f8 f948 	bl	800016c <__adddf3>
 8007edc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ee0:	e86a 0102 	strd	r0, r1, [sl], #-8
 8007ee4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007ee8:	e9ca 2300 	strd	r2, r3, [sl]
 8007eec:	e74c      	b.n	8007d88 <__kernel_rem_pio2+0x4e4>
 8007eee:	4638      	mov	r0, r7
 8007ef0:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8007ef4:	4631      	mov	r1, r6
 8007ef6:	f7f8 f939 	bl	800016c <__adddf3>
 8007efa:	3c01      	subs	r4, #1
 8007efc:	4607      	mov	r7, r0
 8007efe:	460e      	mov	r6, r1
 8007f00:	e748      	b.n	8007d94 <__kernel_rem_pio2+0x4f0>
 8007f02:	9b06      	ldr	r3, [sp, #24]
 8007f04:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8007f08:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8007f0c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8007f10:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8007f14:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8007f18:	601d      	str	r5, [r3, #0]
 8007f1a:	615e      	str	r6, [r3, #20]
 8007f1c:	e721      	b.n	8007d62 <__kernel_rem_pio2+0x4be>
 8007f1e:	bf00      	nop
 8007f20:	41700000 	.word	0x41700000
 8007f24:	3e700000 	.word	0x3e700000

08007f28 <__kernel_sin>:
 8007f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f2c:	b086      	sub	sp, #24
 8007f2e:	e9cd 2300 	strd	r2, r3, [sp]
 8007f32:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007f36:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007f3a:	4682      	mov	sl, r0
 8007f3c:	460c      	mov	r4, r1
 8007f3e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8007f40:	da03      	bge.n	8007f4a <__kernel_sin+0x22>
 8007f42:	f7f8 fd79 	bl	8000a38 <__aeabi_d2iz>
 8007f46:	2800      	cmp	r0, #0
 8007f48:	d050      	beq.n	8007fec <__kernel_sin+0xc4>
 8007f4a:	4652      	mov	r2, sl
 8007f4c:	4623      	mov	r3, r4
 8007f4e:	4650      	mov	r0, sl
 8007f50:	4621      	mov	r1, r4
 8007f52:	f7f8 fac1 	bl	80004d8 <__aeabi_dmul>
 8007f56:	4606      	mov	r6, r0
 8007f58:	460f      	mov	r7, r1
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	4650      	mov	r0, sl
 8007f60:	4621      	mov	r1, r4
 8007f62:	f7f8 fab9 	bl	80004d8 <__aeabi_dmul>
 8007f66:	a33e      	add	r3, pc, #248	; (adr r3, 8008060 <__kernel_sin+0x138>)
 8007f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6c:	4680      	mov	r8, r0
 8007f6e:	4689      	mov	r9, r1
 8007f70:	4630      	mov	r0, r6
 8007f72:	4639      	mov	r1, r7
 8007f74:	f7f8 fab0 	bl	80004d8 <__aeabi_dmul>
 8007f78:	a33b      	add	r3, pc, #236	; (adr r3, 8008068 <__kernel_sin+0x140>)
 8007f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7e:	f7f8 f8f3 	bl	8000168 <__aeabi_dsub>
 8007f82:	4632      	mov	r2, r6
 8007f84:	463b      	mov	r3, r7
 8007f86:	f7f8 faa7 	bl	80004d8 <__aeabi_dmul>
 8007f8a:	a339      	add	r3, pc, #228	; (adr r3, 8008070 <__kernel_sin+0x148>)
 8007f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f90:	f7f8 f8ec 	bl	800016c <__adddf3>
 8007f94:	4632      	mov	r2, r6
 8007f96:	463b      	mov	r3, r7
 8007f98:	f7f8 fa9e 	bl	80004d8 <__aeabi_dmul>
 8007f9c:	a336      	add	r3, pc, #216	; (adr r3, 8008078 <__kernel_sin+0x150>)
 8007f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa2:	f7f8 f8e1 	bl	8000168 <__aeabi_dsub>
 8007fa6:	4632      	mov	r2, r6
 8007fa8:	463b      	mov	r3, r7
 8007faa:	f7f8 fa95 	bl	80004d8 <__aeabi_dmul>
 8007fae:	a334      	add	r3, pc, #208	; (adr r3, 8008080 <__kernel_sin+0x158>)
 8007fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb4:	f7f8 f8da 	bl	800016c <__adddf3>
 8007fb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fbc:	b9dd      	cbnz	r5, 8007ff6 <__kernel_sin+0xce>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	4630      	mov	r0, r6
 8007fc4:	4639      	mov	r1, r7
 8007fc6:	f7f8 fa87 	bl	80004d8 <__aeabi_dmul>
 8007fca:	a32f      	add	r3, pc, #188	; (adr r3, 8008088 <__kernel_sin+0x160>)
 8007fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd0:	f7f8 f8ca 	bl	8000168 <__aeabi_dsub>
 8007fd4:	4642      	mov	r2, r8
 8007fd6:	464b      	mov	r3, r9
 8007fd8:	f7f8 fa7e 	bl	80004d8 <__aeabi_dmul>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	460b      	mov	r3, r1
 8007fe0:	4650      	mov	r0, sl
 8007fe2:	4621      	mov	r1, r4
 8007fe4:	f7f8 f8c2 	bl	800016c <__adddf3>
 8007fe8:	4682      	mov	sl, r0
 8007fea:	460c      	mov	r4, r1
 8007fec:	4650      	mov	r0, sl
 8007fee:	4621      	mov	r1, r4
 8007ff0:	b006      	add	sp, #24
 8007ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ffc:	4b24      	ldr	r3, [pc, #144]	; (8008090 <__kernel_sin+0x168>)
 8007ffe:	f7f8 fa6b 	bl	80004d8 <__aeabi_dmul>
 8008002:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008006:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800800a:	4640      	mov	r0, r8
 800800c:	4649      	mov	r1, r9
 800800e:	f7f8 fa63 	bl	80004d8 <__aeabi_dmul>
 8008012:	4602      	mov	r2, r0
 8008014:	460b      	mov	r3, r1
 8008016:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800801a:	f7f8 f8a5 	bl	8000168 <__aeabi_dsub>
 800801e:	4632      	mov	r2, r6
 8008020:	463b      	mov	r3, r7
 8008022:	f7f8 fa59 	bl	80004d8 <__aeabi_dmul>
 8008026:	e9dd 2300 	ldrd	r2, r3, [sp]
 800802a:	f7f8 f89d 	bl	8000168 <__aeabi_dsub>
 800802e:	a316      	add	r3, pc, #88	; (adr r3, 8008088 <__kernel_sin+0x160>)
 8008030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008034:	4606      	mov	r6, r0
 8008036:	460f      	mov	r7, r1
 8008038:	4640      	mov	r0, r8
 800803a:	4649      	mov	r1, r9
 800803c:	f7f8 fa4c 	bl	80004d8 <__aeabi_dmul>
 8008040:	4602      	mov	r2, r0
 8008042:	460b      	mov	r3, r1
 8008044:	4630      	mov	r0, r6
 8008046:	4639      	mov	r1, r7
 8008048:	f7f8 f890 	bl	800016c <__adddf3>
 800804c:	4602      	mov	r2, r0
 800804e:	460b      	mov	r3, r1
 8008050:	4650      	mov	r0, sl
 8008052:	4621      	mov	r1, r4
 8008054:	f7f8 f888 	bl	8000168 <__aeabi_dsub>
 8008058:	e7c6      	b.n	8007fe8 <__kernel_sin+0xc0>
 800805a:	bf00      	nop
 800805c:	f3af 8000 	nop.w
 8008060:	5acfd57c 	.word	0x5acfd57c
 8008064:	3de5d93a 	.word	0x3de5d93a
 8008068:	8a2b9ceb 	.word	0x8a2b9ceb
 800806c:	3e5ae5e6 	.word	0x3e5ae5e6
 8008070:	57b1fe7d 	.word	0x57b1fe7d
 8008074:	3ec71de3 	.word	0x3ec71de3
 8008078:	19c161d5 	.word	0x19c161d5
 800807c:	3f2a01a0 	.word	0x3f2a01a0
 8008080:	1110f8a6 	.word	0x1110f8a6
 8008084:	3f811111 	.word	0x3f811111
 8008088:	55555549 	.word	0x55555549
 800808c:	3fc55555 	.word	0x3fc55555
 8008090:	3fe00000 	.word	0x3fe00000

08008094 <fabs>:
 8008094:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008098:	4770      	bx	lr
 800809a:	0000      	movs	r0, r0
 800809c:	0000      	movs	r0, r0
	...

080080a0 <floor>:
 80080a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080a4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80080a8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80080ac:	2e13      	cmp	r6, #19
 80080ae:	4602      	mov	r2, r0
 80080b0:	460b      	mov	r3, r1
 80080b2:	4607      	mov	r7, r0
 80080b4:	460c      	mov	r4, r1
 80080b6:	4605      	mov	r5, r0
 80080b8:	dc33      	bgt.n	8008122 <floor+0x82>
 80080ba:	2e00      	cmp	r6, #0
 80080bc:	da14      	bge.n	80080e8 <floor+0x48>
 80080be:	a334      	add	r3, pc, #208	; (adr r3, 8008190 <floor+0xf0>)
 80080c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c4:	f7f8 f852 	bl	800016c <__adddf3>
 80080c8:	2200      	movs	r2, #0
 80080ca:	2300      	movs	r3, #0
 80080cc:	f7f8 fc94 	bl	80009f8 <__aeabi_dcmpgt>
 80080d0:	b138      	cbz	r0, 80080e2 <floor+0x42>
 80080d2:	2c00      	cmp	r4, #0
 80080d4:	da58      	bge.n	8008188 <floor+0xe8>
 80080d6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80080da:	431d      	orrs	r5, r3
 80080dc:	d001      	beq.n	80080e2 <floor+0x42>
 80080de:	2500      	movs	r5, #0
 80080e0:	4c2d      	ldr	r4, [pc, #180]	; (8008198 <floor+0xf8>)
 80080e2:	4623      	mov	r3, r4
 80080e4:	462f      	mov	r7, r5
 80080e6:	e025      	b.n	8008134 <floor+0x94>
 80080e8:	4a2c      	ldr	r2, [pc, #176]	; (800819c <floor+0xfc>)
 80080ea:	fa42 f806 	asr.w	r8, r2, r6
 80080ee:	ea01 0208 	and.w	r2, r1, r8
 80080f2:	4302      	orrs	r2, r0
 80080f4:	d01e      	beq.n	8008134 <floor+0x94>
 80080f6:	a326      	add	r3, pc, #152	; (adr r3, 8008190 <floor+0xf0>)
 80080f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fc:	f7f8 f836 	bl	800016c <__adddf3>
 8008100:	2200      	movs	r2, #0
 8008102:	2300      	movs	r3, #0
 8008104:	f7f8 fc78 	bl	80009f8 <__aeabi_dcmpgt>
 8008108:	2800      	cmp	r0, #0
 800810a:	d0ea      	beq.n	80080e2 <floor+0x42>
 800810c:	2c00      	cmp	r4, #0
 800810e:	bfbe      	ittt	lt
 8008110:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008114:	fa43 f606 	asrlt.w	r6, r3, r6
 8008118:	19a4      	addlt	r4, r4, r6
 800811a:	2500      	movs	r5, #0
 800811c:	ea24 0408 	bic.w	r4, r4, r8
 8008120:	e7df      	b.n	80080e2 <floor+0x42>
 8008122:	2e33      	cmp	r6, #51	; 0x33
 8008124:	dd0a      	ble.n	800813c <floor+0x9c>
 8008126:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800812a:	d103      	bne.n	8008134 <floor+0x94>
 800812c:	f7f8 f81e 	bl	800016c <__adddf3>
 8008130:	4607      	mov	r7, r0
 8008132:	460b      	mov	r3, r1
 8008134:	4638      	mov	r0, r7
 8008136:	4619      	mov	r1, r3
 8008138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800813c:	f04f 32ff 	mov.w	r2, #4294967295
 8008140:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8008144:	fa22 f808 	lsr.w	r8, r2, r8
 8008148:	ea18 0f00 	tst.w	r8, r0
 800814c:	d0f2      	beq.n	8008134 <floor+0x94>
 800814e:	a310      	add	r3, pc, #64	; (adr r3, 8008190 <floor+0xf0>)
 8008150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008154:	f7f8 f80a 	bl	800016c <__adddf3>
 8008158:	2200      	movs	r2, #0
 800815a:	2300      	movs	r3, #0
 800815c:	f7f8 fc4c 	bl	80009f8 <__aeabi_dcmpgt>
 8008160:	2800      	cmp	r0, #0
 8008162:	d0be      	beq.n	80080e2 <floor+0x42>
 8008164:	2c00      	cmp	r4, #0
 8008166:	da02      	bge.n	800816e <floor+0xce>
 8008168:	2e14      	cmp	r6, #20
 800816a:	d103      	bne.n	8008174 <floor+0xd4>
 800816c:	3401      	adds	r4, #1
 800816e:	ea25 0508 	bic.w	r5, r5, r8
 8008172:	e7b6      	b.n	80080e2 <floor+0x42>
 8008174:	2301      	movs	r3, #1
 8008176:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800817a:	fa03 f606 	lsl.w	r6, r3, r6
 800817e:	4435      	add	r5, r6
 8008180:	42bd      	cmp	r5, r7
 8008182:	bf38      	it	cc
 8008184:	18e4      	addcc	r4, r4, r3
 8008186:	e7f2      	b.n	800816e <floor+0xce>
 8008188:	2500      	movs	r5, #0
 800818a:	462c      	mov	r4, r5
 800818c:	e7a9      	b.n	80080e2 <floor+0x42>
 800818e:	bf00      	nop
 8008190:	8800759c 	.word	0x8800759c
 8008194:	7e37e43c 	.word	0x7e37e43c
 8008198:	bff00000 	.word	0xbff00000
 800819c:	000fffff 	.word	0x000fffff

080081a0 <scalbn>:
 80081a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081a2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80081a6:	4604      	mov	r4, r0
 80081a8:	460d      	mov	r5, r1
 80081aa:	4617      	mov	r7, r2
 80081ac:	460b      	mov	r3, r1
 80081ae:	b996      	cbnz	r6, 80081d6 <scalbn+0x36>
 80081b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80081b4:	4303      	orrs	r3, r0
 80081b6:	d039      	beq.n	800822c <scalbn+0x8c>
 80081b8:	4b33      	ldr	r3, [pc, #204]	; (8008288 <scalbn+0xe8>)
 80081ba:	2200      	movs	r2, #0
 80081bc:	f7f8 f98c 	bl	80004d8 <__aeabi_dmul>
 80081c0:	4b32      	ldr	r3, [pc, #200]	; (800828c <scalbn+0xec>)
 80081c2:	4604      	mov	r4, r0
 80081c4:	429f      	cmp	r7, r3
 80081c6:	460d      	mov	r5, r1
 80081c8:	da0f      	bge.n	80081ea <scalbn+0x4a>
 80081ca:	a32b      	add	r3, pc, #172	; (adr r3, 8008278 <scalbn+0xd8>)
 80081cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d0:	f7f8 f982 	bl	80004d8 <__aeabi_dmul>
 80081d4:	e006      	b.n	80081e4 <scalbn+0x44>
 80081d6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80081da:	4296      	cmp	r6, r2
 80081dc:	d10a      	bne.n	80081f4 <scalbn+0x54>
 80081de:	4602      	mov	r2, r0
 80081e0:	f7f7 ffc4 	bl	800016c <__adddf3>
 80081e4:	4604      	mov	r4, r0
 80081e6:	460d      	mov	r5, r1
 80081e8:	e020      	b.n	800822c <scalbn+0x8c>
 80081ea:	460b      	mov	r3, r1
 80081ec:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80081f0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80081f4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80081f8:	19b9      	adds	r1, r7, r6
 80081fa:	4291      	cmp	r1, r2
 80081fc:	dd0e      	ble.n	800821c <scalbn+0x7c>
 80081fe:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8008202:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8008206:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800820a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800820e:	4820      	ldr	r0, [pc, #128]	; (8008290 <scalbn+0xf0>)
 8008210:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8008214:	a31a      	add	r3, pc, #104	; (adr r3, 8008280 <scalbn+0xe0>)
 8008216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821a:	e7d9      	b.n	80081d0 <scalbn+0x30>
 800821c:	2900      	cmp	r1, #0
 800821e:	dd08      	ble.n	8008232 <scalbn+0x92>
 8008220:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008224:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008228:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800822c:	4620      	mov	r0, r4
 800822e:	4629      	mov	r1, r5
 8008230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008232:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8008236:	da12      	bge.n	800825e <scalbn+0xbe>
 8008238:	f24c 3350 	movw	r3, #50000	; 0xc350
 800823c:	429f      	cmp	r7, r3
 800823e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8008242:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8008246:	dcdc      	bgt.n	8008202 <scalbn+0x62>
 8008248:	a30b      	add	r3, pc, #44	; (adr r3, 8008278 <scalbn+0xd8>)
 800824a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8008252:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8008256:	480f      	ldr	r0, [pc, #60]	; (8008294 <scalbn+0xf4>)
 8008258:	f041 011f 	orr.w	r1, r1, #31
 800825c:	e7b8      	b.n	80081d0 <scalbn+0x30>
 800825e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008262:	3136      	adds	r1, #54	; 0x36
 8008264:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008268:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800826c:	4620      	mov	r0, r4
 800826e:	4629      	mov	r1, r5
 8008270:	2200      	movs	r2, #0
 8008272:	4b09      	ldr	r3, [pc, #36]	; (8008298 <scalbn+0xf8>)
 8008274:	e7ac      	b.n	80081d0 <scalbn+0x30>
 8008276:	bf00      	nop
 8008278:	c2f8f359 	.word	0xc2f8f359
 800827c:	01a56e1f 	.word	0x01a56e1f
 8008280:	8800759c 	.word	0x8800759c
 8008284:	7e37e43c 	.word	0x7e37e43c
 8008288:	43500000 	.word	0x43500000
 800828c:	ffff3cb0 	.word	0xffff3cb0
 8008290:	8800759c 	.word	0x8800759c
 8008294:	c2f8f359 	.word	0xc2f8f359
 8008298:	3c900000 	.word	0x3c900000

0800829c <_init>:
 800829c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829e:	bf00      	nop
 80082a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082a2:	bc08      	pop	{r3}
 80082a4:	469e      	mov	lr, r3
 80082a6:	4770      	bx	lr

080082a8 <_fini>:
 80082a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082aa:	bf00      	nop
 80082ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ae:	bc08      	pop	{r3}
 80082b0:	469e      	mov	lr, r3
 80082b2:	4770      	bx	lr
