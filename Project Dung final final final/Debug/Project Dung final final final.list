
Project Dung final final final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8c8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800a9d8  0800a9d8  0001a9d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa48  0800aa48  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  0800aa48  0800aa48  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aa48  0800aa48  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa48  0800aa48  0001aa48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa4c  0800aa4c  0001aa4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800aa50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c9c  20000180  0800abd0  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e1c  0800abd0  00020e1c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ed2  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003638  00000000  00000000  0003507b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  000386b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001160  00000000  00000000  00039980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b2b8  00000000  00000000  0003aae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000162b2  00000000  00000000  00055d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009013c  00000000  00000000  0006c04a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fc186  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f5c  00000000  00000000  000fc1d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a9c0 	.word	0x0800a9c0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	0800a9c0 	.word	0x0800a9c0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <__aeabi_d2f>:
 800092c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000930:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000934:	bf24      	itt	cs
 8000936:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800093a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800093e:	d90d      	bls.n	800095c <__aeabi_d2f+0x30>
 8000940:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000944:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000948:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800094c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000950:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000954:	bf08      	it	eq
 8000956:	f020 0001 	biceq.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000960:	d121      	bne.n	80009a6 <__aeabi_d2f+0x7a>
 8000962:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000966:	bfbc      	itt	lt
 8000968:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800096c:	4770      	bxlt	lr
 800096e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000972:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000976:	f1c2 0218 	rsb	r2, r2, #24
 800097a:	f1c2 0c20 	rsb	ip, r2, #32
 800097e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000982:	fa20 f002 	lsr.w	r0, r0, r2
 8000986:	bf18      	it	ne
 8000988:	f040 0001 	orrne.w	r0, r0, #1
 800098c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000990:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000994:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000998:	ea40 000c 	orr.w	r0, r0, ip
 800099c:	fa23 f302 	lsr.w	r3, r3, r2
 80009a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009a4:	e7cc      	b.n	8000940 <__aeabi_d2f+0x14>
 80009a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009aa:	d107      	bne.n	80009bc <__aeabi_d2f+0x90>
 80009ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009b0:	bf1e      	ittt	ne
 80009b2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009b6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ba:	4770      	bxne	lr
 80009bc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_frsub>:
 80009cc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	e002      	b.n	80009d8 <__addsf3>
 80009d2:	bf00      	nop

080009d4 <__aeabi_fsub>:
 80009d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009d8 <__addsf3>:
 80009d8:	0042      	lsls	r2, r0, #1
 80009da:	bf1f      	itttt	ne
 80009dc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009e0:	ea92 0f03 	teqne	r2, r3
 80009e4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009e8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ec:	d06a      	beq.n	8000ac4 <__addsf3+0xec>
 80009ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009f2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009f6:	bfc1      	itttt	gt
 80009f8:	18d2      	addgt	r2, r2, r3
 80009fa:	4041      	eorgt	r1, r0
 80009fc:	4048      	eorgt	r0, r1
 80009fe:	4041      	eorgt	r1, r0
 8000a00:	bfb8      	it	lt
 8000a02:	425b      	neglt	r3, r3
 8000a04:	2b19      	cmp	r3, #25
 8000a06:	bf88      	it	hi
 8000a08:	4770      	bxhi	lr
 8000a0a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a16:	bf18      	it	ne
 8000a18:	4240      	negne	r0, r0
 8000a1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a1e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a22:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4249      	negne	r1, r1
 8000a2a:	ea92 0f03 	teq	r2, r3
 8000a2e:	d03f      	beq.n	8000ab0 <__addsf3+0xd8>
 8000a30:	f1a2 0201 	sub.w	r2, r2, #1
 8000a34:	fa41 fc03 	asr.w	ip, r1, r3
 8000a38:	eb10 000c 	adds.w	r0, r0, ip
 8000a3c:	f1c3 0320 	rsb	r3, r3, #32
 8000a40:	fa01 f103 	lsl.w	r1, r1, r3
 8000a44:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a48:	d502      	bpl.n	8000a50 <__addsf3+0x78>
 8000a4a:	4249      	negs	r1, r1
 8000a4c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a50:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a54:	d313      	bcc.n	8000a7e <__addsf3+0xa6>
 8000a56:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a5a:	d306      	bcc.n	8000a6a <__addsf3+0x92>
 8000a5c:	0840      	lsrs	r0, r0, #1
 8000a5e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a62:	f102 0201 	add.w	r2, r2, #1
 8000a66:	2afe      	cmp	r2, #254	; 0xfe
 8000a68:	d251      	bcs.n	8000b0e <__addsf3+0x136>
 8000a6a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a72:	bf08      	it	eq
 8000a74:	f020 0001 	biceq.w	r0, r0, #1
 8000a78:	ea40 0003 	orr.w	r0, r0, r3
 8000a7c:	4770      	bx	lr
 8000a7e:	0049      	lsls	r1, r1, #1
 8000a80:	eb40 0000 	adc.w	r0, r0, r0
 8000a84:	3a01      	subs	r2, #1
 8000a86:	bf28      	it	cs
 8000a88:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a8c:	d2ed      	bcs.n	8000a6a <__addsf3+0x92>
 8000a8e:	fab0 fc80 	clz	ip, r0
 8000a92:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a96:	ebb2 020c 	subs.w	r2, r2, ip
 8000a9a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a9e:	bfaa      	itet	ge
 8000aa0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000aa4:	4252      	neglt	r2, r2
 8000aa6:	4318      	orrge	r0, r3
 8000aa8:	bfbc      	itt	lt
 8000aaa:	40d0      	lsrlt	r0, r2
 8000aac:	4318      	orrlt	r0, r3
 8000aae:	4770      	bx	lr
 8000ab0:	f092 0f00 	teq	r2, #0
 8000ab4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ab8:	bf06      	itte	eq
 8000aba:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000abe:	3201      	addeq	r2, #1
 8000ac0:	3b01      	subne	r3, #1
 8000ac2:	e7b5      	b.n	8000a30 <__addsf3+0x58>
 8000ac4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ac8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000acc:	bf18      	it	ne
 8000ace:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad2:	d021      	beq.n	8000b18 <__addsf3+0x140>
 8000ad4:	ea92 0f03 	teq	r2, r3
 8000ad8:	d004      	beq.n	8000ae4 <__addsf3+0x10c>
 8000ada:	f092 0f00 	teq	r2, #0
 8000ade:	bf08      	it	eq
 8000ae0:	4608      	moveq	r0, r1
 8000ae2:	4770      	bx	lr
 8000ae4:	ea90 0f01 	teq	r0, r1
 8000ae8:	bf1c      	itt	ne
 8000aea:	2000      	movne	r0, #0
 8000aec:	4770      	bxne	lr
 8000aee:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000af2:	d104      	bne.n	8000afe <__addsf3+0x126>
 8000af4:	0040      	lsls	r0, r0, #1
 8000af6:	bf28      	it	cs
 8000af8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000afc:	4770      	bx	lr
 8000afe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b02:	bf3c      	itt	cc
 8000b04:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bxcc	lr
 8000b0a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b0e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b16:	4770      	bx	lr
 8000b18:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b1c:	bf16      	itet	ne
 8000b1e:	4608      	movne	r0, r1
 8000b20:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b24:	4601      	movne	r1, r0
 8000b26:	0242      	lsls	r2, r0, #9
 8000b28:	bf06      	itte	eq
 8000b2a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b2e:	ea90 0f01 	teqeq	r0, r1
 8000b32:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_ui2f>:
 8000b38:	f04f 0300 	mov.w	r3, #0
 8000b3c:	e004      	b.n	8000b48 <__aeabi_i2f+0x8>
 8000b3e:	bf00      	nop

08000b40 <__aeabi_i2f>:
 8000b40:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	bf48      	it	mi
 8000b46:	4240      	negmi	r0, r0
 8000b48:	ea5f 0c00 	movs.w	ip, r0
 8000b4c:	bf08      	it	eq
 8000b4e:	4770      	bxeq	lr
 8000b50:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b54:	4601      	mov	r1, r0
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	e01c      	b.n	8000b96 <__aeabi_l2f+0x2a>

08000b5c <__aeabi_ul2f>:
 8000b5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b60:	bf08      	it	eq
 8000b62:	4770      	bxeq	lr
 8000b64:	f04f 0300 	mov.w	r3, #0
 8000b68:	e00a      	b.n	8000b80 <__aeabi_l2f+0x14>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_l2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b78:	d502      	bpl.n	8000b80 <__aeabi_l2f+0x14>
 8000b7a:	4240      	negs	r0, r0
 8000b7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b80:	ea5f 0c01 	movs.w	ip, r1
 8000b84:	bf02      	ittt	eq
 8000b86:	4684      	moveq	ip, r0
 8000b88:	4601      	moveq	r1, r0
 8000b8a:	2000      	moveq	r0, #0
 8000b8c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b90:	bf08      	it	eq
 8000b92:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b96:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b9a:	fabc f28c 	clz	r2, ip
 8000b9e:	3a08      	subs	r2, #8
 8000ba0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ba4:	db10      	blt.n	8000bc8 <__aeabi_l2f+0x5c>
 8000ba6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000baa:	4463      	add	r3, ip
 8000bac:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bb0:	f1c2 0220 	rsb	r2, r2, #32
 8000bb4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bbc:	eb43 0002 	adc.w	r0, r3, r2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f102 0220 	add.w	r2, r2, #32
 8000bcc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bd0:	f1c2 0220 	rsb	r2, r2, #32
 8000bd4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bd8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bdc:	eb43 0002 	adc.w	r0, r3, r2
 8000be0:	bf08      	it	eq
 8000be2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000be6:	4770      	bx	lr

08000be8 <__gesf2>:
 8000be8:	f04f 3cff 	mov.w	ip, #4294967295
 8000bec:	e006      	b.n	8000bfc <__cmpsf2+0x4>
 8000bee:	bf00      	nop

08000bf0 <__lesf2>:
 8000bf0:	f04f 0c01 	mov.w	ip, #1
 8000bf4:	e002      	b.n	8000bfc <__cmpsf2+0x4>
 8000bf6:	bf00      	nop

08000bf8 <__cmpsf2>:
 8000bf8:	f04f 0c01 	mov.w	ip, #1
 8000bfc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c00:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c04:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c0c:	bf18      	it	ne
 8000c0e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c12:	d011      	beq.n	8000c38 <__cmpsf2+0x40>
 8000c14:	b001      	add	sp, #4
 8000c16:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000c1a:	bf18      	it	ne
 8000c1c:	ea90 0f01 	teqne	r0, r1
 8000c20:	bf58      	it	pl
 8000c22:	ebb2 0003 	subspl.w	r0, r2, r3
 8000c26:	bf88      	it	hi
 8000c28:	17c8      	asrhi	r0, r1, #31
 8000c2a:	bf38      	it	cc
 8000c2c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c30:	bf18      	it	ne
 8000c32:	f040 0001 	orrne.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	d102      	bne.n	8000c44 <__cmpsf2+0x4c>
 8000c3e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c42:	d105      	bne.n	8000c50 <__cmpsf2+0x58>
 8000c44:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c48:	d1e4      	bne.n	8000c14 <__cmpsf2+0x1c>
 8000c4a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c4e:	d0e1      	beq.n	8000c14 <__cmpsf2+0x1c>
 8000c50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_cfrcmple>:
 8000c58:	4684      	mov	ip, r0
 8000c5a:	4608      	mov	r0, r1
 8000c5c:	4661      	mov	r1, ip
 8000c5e:	e7ff      	b.n	8000c60 <__aeabi_cfcmpeq>

08000c60 <__aeabi_cfcmpeq>:
 8000c60:	b50f      	push	{r0, r1, r2, r3, lr}
 8000c62:	f7ff ffc9 	bl	8000bf8 <__cmpsf2>
 8000c66:	2800      	cmp	r0, #0
 8000c68:	bf48      	it	mi
 8000c6a:	f110 0f00 	cmnmi.w	r0, #0
 8000c6e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000c70 <__aeabi_fcmpeq>:
 8000c70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c74:	f7ff fff4 	bl	8000c60 <__aeabi_cfcmpeq>
 8000c78:	bf0c      	ite	eq
 8000c7a:	2001      	moveq	r0, #1
 8000c7c:	2000      	movne	r0, #0
 8000c7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c82:	bf00      	nop

08000c84 <__aeabi_fcmplt>:
 8000c84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c88:	f7ff ffea 	bl	8000c60 <__aeabi_cfcmpeq>
 8000c8c:	bf34      	ite	cc
 8000c8e:	2001      	movcc	r0, #1
 8000c90:	2000      	movcs	r0, #0
 8000c92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c96:	bf00      	nop

08000c98 <__aeabi_fcmple>:
 8000c98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c9c:	f7ff ffe0 	bl	8000c60 <__aeabi_cfcmpeq>
 8000ca0:	bf94      	ite	ls
 8000ca2:	2001      	movls	r0, #1
 8000ca4:	2000      	movhi	r0, #0
 8000ca6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000caa:	bf00      	nop

08000cac <__aeabi_fcmpge>:
 8000cac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cb0:	f7ff ffd2 	bl	8000c58 <__aeabi_cfrcmple>
 8000cb4:	bf94      	ite	ls
 8000cb6:	2001      	movls	r0, #1
 8000cb8:	2000      	movhi	r0, #0
 8000cba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_fcmpgt>:
 8000cc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cc4:	f7ff ffc8 	bl	8000c58 <__aeabi_cfrcmple>
 8000cc8:	bf34      	ite	cc
 8000cca:	2001      	movcc	r0, #1
 8000ccc:	2000      	movcs	r0, #0
 8000cce:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cd2:	bf00      	nop

08000cd4 <BUTTON_ReadPin>:
#include "BUTTON.h"
// (FINAL x3)

// ************************** Low Level Layer *****************************************************//
static ButtonState BUTTON_ReadPin(Button *Button) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  return HAL_GPIO_ReadPin(Button->Port, Button->Pin);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	889b      	ldrh	r3, [r3, #4]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4610      	mov	r0, r2
 8000ce8:	f001 ff10 	bl	8002b0c <HAL_GPIO_ReadPin>
 8000cec:	4603      	mov	r3, r0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <buttonInit>:
// ************************** High Level Layer *****************************************************//
void buttonInit(Button *Button, GPIO_TypeDef *BUTTON_PORT, uint16_t BUTTON_Pin) {
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b084      	sub	sp, #16
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	60f8      	str	r0, [r7, #12]
 8000cfe:	60b9      	str	r1, [r7, #8]
 8000d00:	4613      	mov	r3, r2
 8000d02:	80fb      	strh	r3, [r7, #6]
  Button->Port = BUTTON_PORT;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	601a      	str	r2, [r3, #0]
  Button->Pin = BUTTON_Pin;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	88fa      	ldrh	r2, [r7, #6]
 8000d0e:	809a      	strh	r2, [r3, #4]

  Button->state = BUTTON_ReadPin(Button);
 8000d10:	68f8      	ldr	r0, [r7, #12]
 8000d12:	f7ff ffdf 	bl	8000cd4 <BUTTON_ReadPin>
 8000d16:	4603      	mov	r3, r0
 8000d18:	461a      	mov	r2, r3
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	71da      	strb	r2, [r3, #7]
  Button->preState = Button->state;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	79da      	ldrb	r2, [r3, #7]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	719a      	strb	r2, [r3, #6]
  Button->timeIn = HAL_GetTick();
 8000d26:	f001 fc23 	bl	8002570 <HAL_GetTick>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	609a      	str	r2, [r3, #8]
  Button->hasChanged = false;
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	2200      	movs	r2, #0
 8000d34:	741a      	strb	r2, [r3, #16]
  Button->_change = false;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	745a      	strb	r2, [r3, #17]
}
 8000d3c:	bf00      	nop
 8000d3e:	3710      	adds	r7, #16
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <buttonRead>:

ButtonState buttonRead(Button *Button) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  ButtonState curState = BUTTON_ReadPin(Button);
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f7ff ffc1 	bl	8000cd4 <BUTTON_ReadPin>
 8000d52:	4603      	mov	r3, r0
 8000d54:	73fb      	strb	r3, [r7, #15]
  uint32_t now = HAL_GetTick();
 8000d56:	f001 fc0b 	bl	8002570 <HAL_GetTick>
 8000d5a:	60b8      	str	r0, [r7, #8]
  if (curState != Button->state) {
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	79db      	ldrb	r3, [r3, #7]
 8000d60:	7bfa      	ldrb	r2, [r7, #15]
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d026      	beq.n	8000db4 <buttonRead+0x70>
	if (Button->_change == false)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	7c5b      	ldrb	r3, [r3, #17]
 8000d6a:	f083 0301 	eor.w	r3, r3, #1
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d005      	beq.n	8000d80 <buttonRead+0x3c>
	{
	  Button->timeIn = now;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	68ba      	ldr	r2, [r7, #8]
 8000d78:	609a      	str	r2, [r3, #8]
	  Button->_change = true;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	745a      	strb	r2, [r3, #17]
	}
	Button->timeDelta = now - Button->timeIn;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	68ba      	ldr	r2, [r7, #8]
 8000d86:	1ad2      	subs	r2, r2, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	60da      	str	r2, [r3, #12]
	if (Button->timeDelta > DEBOUND_TIME) {
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	2b32      	cmp	r3, #50	; 0x32
 8000d92:	d917      	bls.n	8000dc4 <buttonRead+0x80>
	  Button->state = curState;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	7bfa      	ldrb	r2, [r7, #15]
 8000d98:	71da      	strb	r2, [r3, #7]
	  Button->timeDelta = 0;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	60da      	str	r2, [r3, #12]
	  Button->timeIn = now;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	609a      	str	r2, [r3, #8]
	  Button->_change = false;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2200      	movs	r2, #0
 8000daa:	745a      	strb	r2, [r3, #17]
	  Button->hasChanged = true;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2201      	movs	r2, #1
 8000db0:	741a      	strb	r2, [r3, #16]
 8000db2:	e007      	b.n	8000dc4 <buttonRead+0x80>
	}
  } else if (curState == Button->state)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	79db      	ldrb	r3, [r3, #7]
 8000db8:	7bfa      	ldrb	r2, [r7, #15]
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d102      	bne.n	8000dc4 <buttonRead+0x80>
  {
	Button->_change = false;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	745a      	strb	r2, [r3, #17]
  }
  return Button->state;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	79db      	ldrb	r3, [r3, #7]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd4:	f001 fb74 	bl	80024c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd8:	f000 f832 	bl	8000e40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ddc:	f000 fa20 	bl	8001220 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000de0:	f000 f88a 	bl	8000ef8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000de4:	f000 f8e0 	bl	8000fa8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000de8:	f000 f932 	bl	8001050 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000dec:	f000 f994 	bl	8001118 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8000df0:	f009 f944 	bl	800a07c <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 8000df4:	f000 f9ea 	bl	80011cc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  start_up();
 8000df8:	f000 feac 	bl	8001b54 <start_up>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	state = buttonRead(&SW_Mode);
 8000dfc:	480e      	ldr	r0, [pc, #56]	; (8000e38 <main+0x68>)
 8000dfe:	f7ff ffa1 	bl	8000d44 <buttonRead>
 8000e02:	4603      	mov	r3, r0
 8000e04:	461a      	mov	r2, r3
 8000e06:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <main+0x6c>)
 8000e08:	701a      	strb	r2, [r3, #0]
	if (SW_Mode.hasChanged) {
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <main+0x68>)
 8000e0c:	7c1b      	ldrb	r3, [r3, #16]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d00f      	beq.n	8000e32 <main+0x62>
	  SW_Mode.hasChanged = false;
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <main+0x68>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	741a      	strb	r2, [r3, #16]
	  if (state == IDLE) {
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <main+0x6c>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d102      	bne.n	8000e26 <main+0x56>
		active_idle();
 8000e20:	f000 ff16 	bl	8001c50 <active_idle>
 8000e24:	e005      	b.n	8000e32 <main+0x62>
	  } else if (state == RUN) {
 8000e26:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <main+0x6c>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d101      	bne.n	8000e32 <main+0x62>
		active_run();
 8000e2e:	f000 ff29 	bl	8001c84 <active_run>
	  }
	}
	apply_state();
 8000e32:	f001 fa03 	bl	800223c <apply_state>
	state = buttonRead(&SW_Mode);
 8000e36:	e7e1      	b.n	8000dfc <main+0x2c>
 8000e38:	2000032c 	.word	0x2000032c
 8000e3c:	20000368 	.word	0x20000368

08000e40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b094      	sub	sp, #80	; 0x50
 8000e44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e4a:	2228      	movs	r2, #40	; 0x28
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f009 fdae 	bl	800a9b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e70:	2301      	movs	r3, #1
 8000e72:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e78:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e82:	2302      	movs	r3, #2
 8000e84:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000e8c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e90:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e96:	4618      	mov	r0, r3
 8000e98:	f003 fb5c 	bl	8004554 <HAL_RCC_OscConfig>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ea2:	f000 fa85 	bl	80013b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea6:	230f      	movs	r3, #15
 8000ea8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eb6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f003 fdc8 	bl	8004a58 <HAL_RCC_ClockConfig>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000ece:	f000 fa6f 	bl	80013b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000ed2:	2310      	movs	r3, #16
 8000ed4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000ed6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000eda:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f003 ff52 	bl	8004d88 <HAL_RCCEx_PeriphCLKConfig>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000eea:	f000 fa61 	bl	80013b0 <Error_Handler>
  }
}
 8000eee:	bf00      	nop
 8000ef0:	3750      	adds	r7, #80	; 0x50
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08c      	sub	sp, #48	; 0x30
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000efe:	f107 030c 	add.w	r3, r7, #12
 8000f02:	2224      	movs	r2, #36	; 0x24
 8000f04:	2100      	movs	r1, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f009 fd52 	bl	800a9b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f14:	4b22      	ldr	r3, [pc, #136]	; (8000fa0 <MX_TIM1_Init+0xa8>)
 8000f16:	4a23      	ldr	r2, [pc, #140]	; (8000fa4 <MX_TIM1_Init+0xac>)
 8000f18:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f1a:	4b21      	ldr	r3, [pc, #132]	; (8000fa0 <MX_TIM1_Init+0xa8>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f20:	4b1f      	ldr	r3, [pc, #124]	; (8000fa0 <MX_TIM1_Init+0xa8>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f26:	4b1e      	ldr	r3, [pc, #120]	; (8000fa0 <MX_TIM1_Init+0xa8>)
 8000f28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f2c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2e:	4b1c      	ldr	r3, [pc, #112]	; (8000fa0 <MX_TIM1_Init+0xa8>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f34:	4b1a      	ldr	r3, [pc, #104]	; (8000fa0 <MX_TIM1_Init+0xa8>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f3a:	4b19      	ldr	r3, [pc, #100]	; (8000fa0 <MX_TIM1_Init+0xa8>)
 8000f3c:	2280      	movs	r2, #128	; 0x80
 8000f3e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f40:	2303      	movs	r3, #3
 8000f42:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f44:	2300      	movs	r3, #0
 8000f46:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000f50:	230a      	movs	r3, #10
 8000f52:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f54:	2300      	movs	r3, #0
 8000f56:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000f60:	230a      	movs	r3, #10
 8000f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	4619      	mov	r1, r3
 8000f6a:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <MX_TIM1_Init+0xa8>)
 8000f6c:	f004 f906 	bl	800517c <HAL_TIM_Encoder_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000f76:	f000 fa1b 	bl	80013b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	4619      	mov	r1, r3
 8000f86:	4806      	ldr	r0, [pc, #24]	; (8000fa0 <MX_TIM1_Init+0xa8>)
 8000f88:	f004 fe20 	bl	8005bcc <HAL_TIMEx_MasterConfigSynchronization>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000f92:	f000 fa0d 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f96:	bf00      	nop
 8000f98:	3730      	adds	r7, #48	; 0x30
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	2000019c 	.word	0x2000019c
 8000fa4:	40012c00 	.word	0x40012c00

08000fa8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08c      	sub	sp, #48	; 0x30
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fae:	f107 030c 	add.w	r3, r7, #12
 8000fb2:	2224      	movs	r2, #36	; 0x24
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f009 fcfa 	bl	800a9b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fc4:	4b21      	ldr	r3, [pc, #132]	; (800104c <MX_TIM2_Init+0xa4>)
 8000fc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000fcc:	4b1f      	ldr	r3, [pc, #124]	; (800104c <MX_TIM2_Init+0xa4>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd2:	4b1e      	ldr	r3, [pc, #120]	; (800104c <MX_TIM2_Init+0xa4>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000fd8:	4b1c      	ldr	r3, [pc, #112]	; (800104c <MX_TIM2_Init+0xa4>)
 8000fda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fde:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe0:	4b1a      	ldr	r3, [pc, #104]	; (800104c <MX_TIM2_Init+0xa4>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fe6:	4b19      	ldr	r3, [pc, #100]	; (800104c <MX_TIM2_Init+0xa4>)
 8000fe8:	2280      	movs	r2, #128	; 0x80
 8000fea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000fec:	2303      	movs	r3, #3
 8000fee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001000:	2300      	movs	r3, #0
 8001002:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001004:	2301      	movs	r3, #1
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001008:	2300      	movs	r3, #0
 800100a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001010:	f107 030c 	add.w	r3, r7, #12
 8001014:	4619      	mov	r1, r3
 8001016:	480d      	ldr	r0, [pc, #52]	; (800104c <MX_TIM2_Init+0xa4>)
 8001018:	f004 f8b0 	bl	800517c <HAL_TIM_Encoder_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001022:	f000 f9c5 	bl	80013b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800102a:	2300      	movs	r3, #0
 800102c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	4619      	mov	r1, r3
 8001032:	4806      	ldr	r0, [pc, #24]	; (800104c <MX_TIM2_Init+0xa4>)
 8001034:	f004 fdca 	bl	8005bcc <HAL_TIMEx_MasterConfigSynchronization>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800103e:	f000 f9b7 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	3730      	adds	r7, #48	; 0x30
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200001e4 	.word	0x200001e4

08001050 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	; 0x28
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001056:	f107 0320 	add.w	r3, r7, #32
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]
 800106c:	611a      	str	r2, [r3, #16]
 800106e:	615a      	str	r2, [r3, #20]
 8001070:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001072:	4b27      	ldr	r3, [pc, #156]	; (8001110 <MX_TIM3_Init+0xc0>)
 8001074:	4a27      	ldr	r2, [pc, #156]	; (8001114 <MX_TIM3_Init+0xc4>)
 8001076:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48;
 8001078:	4b25      	ldr	r3, [pc, #148]	; (8001110 <MX_TIM3_Init+0xc0>)
 800107a:	2230      	movs	r2, #48	; 0x30
 800107c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107e:	4b24      	ldr	r3, [pc, #144]	; (8001110 <MX_TIM3_Init+0xc0>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 8001084:	4b22      	ldr	r3, [pc, #136]	; (8001110 <MX_TIM3_Init+0xc0>)
 8001086:	f240 12f3 	movw	r2, #499	; 0x1f3
 800108a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108c:	4b20      	ldr	r3, [pc, #128]	; (8001110 <MX_TIM3_Init+0xc0>)
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001092:	4b1f      	ldr	r3, [pc, #124]	; (8001110 <MX_TIM3_Init+0xc0>)
 8001094:	2280      	movs	r2, #128	; 0x80
 8001096:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001098:	481d      	ldr	r0, [pc, #116]	; (8001110 <MX_TIM3_Init+0xc0>)
 800109a:	f003 ff7d 	bl	8004f98 <HAL_TIM_PWM_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80010a4:	f000 f984 	bl	80013b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a8:	2300      	movs	r3, #0
 80010aa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ac:	2300      	movs	r3, #0
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010b0:	f107 0320 	add.w	r3, r7, #32
 80010b4:	4619      	mov	r1, r3
 80010b6:	4816      	ldr	r0, [pc, #88]	; (8001110 <MX_TIM3_Init+0xc0>)
 80010b8:	f004 fd88 	bl	8005bcc <HAL_TIMEx_MasterConfigSynchronization>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80010c2:	f000 f975 	bl	80013b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010c6:	2360      	movs	r3, #96	; 0x60
 80010c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	2200      	movs	r2, #0
 80010da:	4619      	mov	r1, r3
 80010dc:	480c      	ldr	r0, [pc, #48]	; (8001110 <MX_TIM3_Init+0xc0>)
 80010de:	f004 fa85 	bl	80055ec <HAL_TIM_PWM_ConfigChannel>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80010e8:	f000 f962 	bl	80013b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	2204      	movs	r2, #4
 80010f0:	4619      	mov	r1, r3
 80010f2:	4807      	ldr	r0, [pc, #28]	; (8001110 <MX_TIM3_Init+0xc0>)
 80010f4:	f004 fa7a 	bl	80055ec <HAL_TIM_PWM_ConfigChannel>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80010fe:	f000 f957 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001102:	4803      	ldr	r0, [pc, #12]	; (8001110 <MX_TIM3_Init+0xc0>)
 8001104:	f000 fa30 	bl	8001568 <HAL_TIM_MspPostInit>

}
 8001108:	bf00      	nop
 800110a:	3728      	adds	r7, #40	; 0x28
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	2000022c 	.word	0x2000022c
 8001114:	40000400 	.word	0x40000400

08001118 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08a      	sub	sp, #40	; 0x28
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800111e:	f107 0320 	add.w	r3, r7, #32
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
 8001134:	611a      	str	r2, [r3, #16]
 8001136:	615a      	str	r2, [r3, #20]
 8001138:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800113a:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <MX_TIM4_Init+0xac>)
 800113c:	4a22      	ldr	r2, [pc, #136]	; (80011c8 <MX_TIM4_Init+0xb0>)
 800113e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48;
 8001140:	4b20      	ldr	r3, [pc, #128]	; (80011c4 <MX_TIM4_Init+0xac>)
 8001142:	2230      	movs	r2, #48	; 0x30
 8001144:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001146:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <MX_TIM4_Init+0xac>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 800114c:	4b1d      	ldr	r3, [pc, #116]	; (80011c4 <MX_TIM4_Init+0xac>)
 800114e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001152:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001154:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <MX_TIM4_Init+0xac>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800115a:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <MX_TIM4_Init+0xac>)
 800115c:	2280      	movs	r2, #128	; 0x80
 800115e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001160:	4818      	ldr	r0, [pc, #96]	; (80011c4 <MX_TIM4_Init+0xac>)
 8001162:	f003 ff19 	bl	8004f98 <HAL_TIM_PWM_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800116c:	f000 f920 	bl	80013b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001170:	2300      	movs	r3, #0
 8001172:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001174:	2300      	movs	r3, #0
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001178:	f107 0320 	add.w	r3, r7, #32
 800117c:	4619      	mov	r1, r3
 800117e:	4811      	ldr	r0, [pc, #68]	; (80011c4 <MX_TIM4_Init+0xac>)
 8001180:	f004 fd24 	bl	8005bcc <HAL_TIMEx_MasterConfigSynchronization>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800118a:	f000 f911 	bl	80013b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800118e:	2360      	movs	r3, #96	; 0x60
 8001190:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	2204      	movs	r2, #4
 80011a2:	4619      	mov	r1, r3
 80011a4:	4807      	ldr	r0, [pc, #28]	; (80011c4 <MX_TIM4_Init+0xac>)
 80011a6:	f004 fa21 	bl	80055ec <HAL_TIM_PWM_ConfigChannel>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80011b0:	f000 f8fe 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80011b4:	4803      	ldr	r0, [pc, #12]	; (80011c4 <MX_TIM4_Init+0xac>)
 80011b6:	f000 f9d7 	bl	8001568 <HAL_TIM_MspPostInit>

}
 80011ba:	bf00      	nop
 80011bc:	3728      	adds	r7, #40	; 0x28
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000274 	.word	0x20000274
 80011c8:	40000800 	.word	0x40000800

080011cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011d2:	4a12      	ldr	r2, [pc, #72]	; (800121c <MX_USART2_UART_Init+0x50>)
 80011d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011ea:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011f0:	4b09      	ldr	r3, [pc, #36]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011f2:	220c      	movs	r2, #12
 80011f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f6:	4b08      	ldr	r3, [pc, #32]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001202:	4805      	ldr	r0, [pc, #20]	; (8001218 <MX_USART2_UART_Init+0x4c>)
 8001204:	f004 fd52 	bl	8005cac <HAL_UART_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800120e:	f000 f8cf 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	200002bc 	.word	0x200002bc
 800121c:	40004400 	.word	0x40004400

08001220 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b088      	sub	sp, #32
 8001224:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001226:	f107 0310 	add.w	r3, r7, #16
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001234:	4b59      	ldr	r3, [pc, #356]	; (800139c <MX_GPIO_Init+0x17c>)
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	4a58      	ldr	r2, [pc, #352]	; (800139c <MX_GPIO_Init+0x17c>)
 800123a:	f043 0310 	orr.w	r3, r3, #16
 800123e:	6193      	str	r3, [r2, #24]
 8001240:	4b56      	ldr	r3, [pc, #344]	; (800139c <MX_GPIO_Init+0x17c>)
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	f003 0310 	and.w	r3, r3, #16
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800124c:	4b53      	ldr	r3, [pc, #332]	; (800139c <MX_GPIO_Init+0x17c>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	4a52      	ldr	r2, [pc, #328]	; (800139c <MX_GPIO_Init+0x17c>)
 8001252:	f043 0320 	orr.w	r3, r3, #32
 8001256:	6193      	str	r3, [r2, #24]
 8001258:	4b50      	ldr	r3, [pc, #320]	; (800139c <MX_GPIO_Init+0x17c>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	f003 0320 	and.w	r3, r3, #32
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001264:	4b4d      	ldr	r3, [pc, #308]	; (800139c <MX_GPIO_Init+0x17c>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	4a4c      	ldr	r2, [pc, #304]	; (800139c <MX_GPIO_Init+0x17c>)
 800126a:	f043 0304 	orr.w	r3, r3, #4
 800126e:	6193      	str	r3, [r2, #24]
 8001270:	4b4a      	ldr	r3, [pc, #296]	; (800139c <MX_GPIO_Init+0x17c>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	f003 0304 	and.w	r3, r3, #4
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127c:	4b47      	ldr	r3, [pc, #284]	; (800139c <MX_GPIO_Init+0x17c>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	4a46      	ldr	r2, [pc, #280]	; (800139c <MX_GPIO_Init+0x17c>)
 8001282:	f043 0308 	orr.w	r3, r3, #8
 8001286:	6193      	str	r3, [r2, #24]
 8001288:	4b44      	ldr	r3, [pc, #272]	; (800139c <MX_GPIO_Init+0x17c>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	f003 0308 	and.w	r3, r3, #8
 8001290:	603b      	str	r3, [r7, #0]
 8001292:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Y_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8001294:	2200      	movs	r2, #0
 8001296:	2130      	movs	r1, #48	; 0x30
 8001298:	4841      	ldr	r0, [pc, #260]	; (80013a0 <MX_GPIO_Init+0x180>)
 800129a:	f001 fc4e 	bl	8002b3a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_EN_Pin|M2_L_Pin|M2_R_Pin, GPIO_PIN_RESET);
 800129e:	2200      	movs	r2, #0
 80012a0:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80012a4:	483f      	ldr	r0, [pc, #252]	; (80013a4 <MX_GPIO_Init+0x184>)
 80012a6:	f001 fc48 	bl	8002b3a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80012aa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80012ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b0:	2303      	movs	r3, #3
 80012b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	4619      	mov	r1, r3
 80012ba:	483b      	ldr	r0, [pc, #236]	; (80013a8 <MX_GPIO_Init+0x188>)
 80012bc:	f001 faa2 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Y_Pin LED_G_Pin */
  GPIO_InitStruct.Pin = LED_Y_Pin|LED_G_Pin;
 80012c0:	2330      	movs	r3, #48	; 0x30
 80012c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c4:	2301      	movs	r3, #1
 80012c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012cc:	2302      	movs	r3, #2
 80012ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d0:	f107 0310 	add.w	r3, r7, #16
 80012d4:	4619      	mov	r1, r3
 80012d6:	4832      	ldr	r0, [pc, #200]	; (80013a0 <MX_GPIO_Init+0x180>)
 80012d8:	f001 fa94 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_STOP_Pin BTN_START_Pin MODE_SW_Pin LVL_SW1_Pin
                           LVL_SW2_Pin */
  GPIO_InitStruct.Pin = BTN_STOP_Pin|BTN_START_Pin|MODE_SW_Pin|LVL_SW1_Pin
 80012dc:	f240 431b 	movw	r3, #1051	; 0x41b
 80012e0:	613b      	str	r3, [r7, #16]
                          |LVL_SW2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012e6:	2301      	movs	r3, #1
 80012e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ea:	f107 0310 	add.w	r3, r7, #16
 80012ee:	4619      	mov	r1, r3
 80012f0:	482c      	ldr	r0, [pc, #176]	; (80013a4 <MX_GPIO_Init+0x184>)
 80012f2:	f001 fa87 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB11 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 80012f6:	f640 3304 	movw	r3, #2820	; 0xb04
 80012fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012fc:	2303      	movs	r3, #3
 80012fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001300:	f107 0310 	add.w	r3, r7, #16
 8001304:	4619      	mov	r1, r3
 8001306:	4827      	ldr	r0, [pc, #156]	; (80013a4 <MX_GPIO_Init+0x184>)
 8001308:	f001 fa7c 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pin : LMS_M_Pin */
  GPIO_InitStruct.Pin = LMS_M_Pin;
 800130c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001310:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001312:	4b26      	ldr	r3, [pc, #152]	; (80013ac <MX_GPIO_Init+0x18c>)
 8001314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001316:	2301      	movs	r3, #1
 8001318:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LMS_M_GPIO_Port, &GPIO_InitStruct);
 800131a:	f107 0310 	add.w	r3, r7, #16
 800131e:	4619      	mov	r1, r3
 8001320:	4820      	ldr	r0, [pc, #128]	; (80013a4 <MX_GPIO_Init+0x184>)
 8001322:	f001 fa6f 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_EN_Pin M2_L_Pin M2_R_Pin */
  GPIO_InitStruct.Pin = M1_EN_Pin|M2_L_Pin|M2_R_Pin;
 8001326:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800132a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132c:	2301      	movs	r3, #1
 800132e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001334:	2302      	movs	r3, #2
 8001336:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001338:	f107 0310 	add.w	r3, r7, #16
 800133c:	4619      	mov	r1, r3
 800133e:	4819      	ldr	r0, [pc, #100]	; (80013a4 <MX_GPIO_Init+0x184>)
 8001340:	f001 fa60 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8001344:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001348:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800134a:	2303      	movs	r3, #3
 800134c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134e:	f107 0310 	add.w	r3, r7, #16
 8001352:	4619      	mov	r1, r3
 8001354:	4812      	ldr	r0, [pc, #72]	; (80013a0 <MX_GPIO_Init+0x180>)
 8001356:	f001 fa55 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pins : LMS_E_Pin LMS_B_Pin */
  GPIO_InitStruct.Pin = LMS_E_Pin|LMS_B_Pin;
 800135a:	2360      	movs	r3, #96	; 0x60
 800135c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800135e:	4b13      	ldr	r3, [pc, #76]	; (80013ac <MX_GPIO_Init+0x18c>)
 8001360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001366:	f107 0310 	add.w	r3, r7, #16
 800136a:	4619      	mov	r1, r3
 800136c:	480d      	ldr	r0, [pc, #52]	; (80013a4 <MX_GPIO_Init+0x184>)
 800136e:	f001 fa49 	bl	8002804 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2102      	movs	r1, #2
 8001376:	2017      	movs	r0, #23
 8001378:	f001 f9ff 	bl	800277a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800137c:	2017      	movs	r0, #23
 800137e:	f001 fa18 	bl	80027b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2102      	movs	r1, #2
 8001386:	2028      	movs	r0, #40	; 0x28
 8001388:	f001 f9f7 	bl	800277a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800138c:	2028      	movs	r0, #40	; 0x28
 800138e:	f001 fa10 	bl	80027b2 <HAL_NVIC_EnableIRQ>

}
 8001392:	bf00      	nop
 8001394:	3720      	adds	r7, #32
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40021000 	.word	0x40021000
 80013a0:	40010800 	.word	0x40010800
 80013a4:	40010c00 	.word	0x40010c00
 80013a8:	40011000 	.word	0x40011000
 80013ac:	10310000 	.word	0x10310000

080013b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b4:	b672      	cpsid	i
}
 80013b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80013b8:	e7fe      	b.n	80013b8 <Error_Handler+0x8>
	...

080013bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <HAL_MspInit+0x5c>)
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	4a14      	ldr	r2, [pc, #80]	; (8001418 <HAL_MspInit+0x5c>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6193      	str	r3, [r2, #24]
 80013ce:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_MspInit+0x5c>)
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013da:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <HAL_MspInit+0x5c>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	4a0e      	ldr	r2, [pc, #56]	; (8001418 <HAL_MspInit+0x5c>)
 80013e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e4:	61d3      	str	r3, [r2, #28]
 80013e6:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <HAL_MspInit+0x5c>)
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013f2:	4b0a      	ldr	r3, [pc, #40]	; (800141c <HAL_MspInit+0x60>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	4a04      	ldr	r2, [pc, #16]	; (800141c <HAL_MspInit+0x60>)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140e:	bf00      	nop
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr
 8001418:	40021000 	.word	0x40021000
 800141c:	40010000 	.word	0x40010000

08001420 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	; 0x28
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 0318 	add.w	r3, r7, #24
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a2b      	ldr	r2, [pc, #172]	; (80014e8 <HAL_TIM_Encoder_MspInit+0xc8>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d125      	bne.n	800148c <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001440:	4b2a      	ldr	r3, [pc, #168]	; (80014ec <HAL_TIM_Encoder_MspInit+0xcc>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	4a29      	ldr	r2, [pc, #164]	; (80014ec <HAL_TIM_Encoder_MspInit+0xcc>)
 8001446:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800144a:	6193      	str	r3, [r2, #24]
 800144c:	4b27      	ldr	r3, [pc, #156]	; (80014ec <HAL_TIM_Encoder_MspInit+0xcc>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001454:	617b      	str	r3, [r7, #20]
 8001456:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001458:	4b24      	ldr	r3, [pc, #144]	; (80014ec <HAL_TIM_Encoder_MspInit+0xcc>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	4a23      	ldr	r2, [pc, #140]	; (80014ec <HAL_TIM_Encoder_MspInit+0xcc>)
 800145e:	f043 0304 	orr.w	r3, r3, #4
 8001462:	6193      	str	r3, [r2, #24]
 8001464:	4b21      	ldr	r3, [pc, #132]	; (80014ec <HAL_TIM_Encoder_MspInit+0xcc>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ECD1A_Pin|ECD1B_Pin;
 8001470:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001474:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147e:	f107 0318 	add.w	r3, r7, #24
 8001482:	4619      	mov	r1, r3
 8001484:	481a      	ldr	r0, [pc, #104]	; (80014f0 <HAL_TIM_Encoder_MspInit+0xd0>)
 8001486:	f001 f9bd 	bl	8002804 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800148a:	e028      	b.n	80014de <HAL_TIM_Encoder_MspInit+0xbe>
  else if(htim_encoder->Instance==TIM2)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001494:	d123      	bne.n	80014de <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001496:	4b15      	ldr	r3, [pc, #84]	; (80014ec <HAL_TIM_Encoder_MspInit+0xcc>)
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	4a14      	ldr	r2, [pc, #80]	; (80014ec <HAL_TIM_Encoder_MspInit+0xcc>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	61d3      	str	r3, [r2, #28]
 80014a2:	4b12      	ldr	r3, [pc, #72]	; (80014ec <HAL_TIM_Encoder_MspInit+0xcc>)
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ae:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <HAL_TIM_Encoder_MspInit+0xcc>)
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	4a0e      	ldr	r2, [pc, #56]	; (80014ec <HAL_TIM_Encoder_MspInit+0xcc>)
 80014b4:	f043 0304 	orr.w	r3, r3, #4
 80014b8:	6193      	str	r3, [r2, #24]
 80014ba:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <HAL_TIM_Encoder_MspInit+0xcc>)
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	f003 0304 	and.w	r3, r3, #4
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ECD2A_Pin|ECD2B_Pin;
 80014c6:	2303      	movs	r3, #3
 80014c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d2:	f107 0318 	add.w	r3, r7, #24
 80014d6:	4619      	mov	r1, r3
 80014d8:	4805      	ldr	r0, [pc, #20]	; (80014f0 <HAL_TIM_Encoder_MspInit+0xd0>)
 80014da:	f001 f993 	bl	8002804 <HAL_GPIO_Init>
}
 80014de:	bf00      	nop
 80014e0:	3728      	adds	r7, #40	; 0x28
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40012c00 	.word	0x40012c00
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40010800 	.word	0x40010800

080014f4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a16      	ldr	r2, [pc, #88]	; (800155c <HAL_TIM_PWM_MspInit+0x68>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d10c      	bne.n	8001520 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001506:	4b16      	ldr	r3, [pc, #88]	; (8001560 <HAL_TIM_PWM_MspInit+0x6c>)
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	4a15      	ldr	r2, [pc, #84]	; (8001560 <HAL_TIM_PWM_MspInit+0x6c>)
 800150c:	f043 0302 	orr.w	r3, r3, #2
 8001510:	61d3      	str	r3, [r2, #28]
 8001512:	4b13      	ldr	r3, [pc, #76]	; (8001560 <HAL_TIM_PWM_MspInit+0x6c>)
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800151e:	e018      	b.n	8001552 <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM4)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a0f      	ldr	r2, [pc, #60]	; (8001564 <HAL_TIM_PWM_MspInit+0x70>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d113      	bne.n	8001552 <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800152a:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <HAL_TIM_PWM_MspInit+0x6c>)
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	4a0c      	ldr	r2, [pc, #48]	; (8001560 <HAL_TIM_PWM_MspInit+0x6c>)
 8001530:	f043 0304 	orr.w	r3, r3, #4
 8001534:	61d3      	str	r3, [r2, #28]
 8001536:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <HAL_TIM_PWM_MspInit+0x6c>)
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	2101      	movs	r1, #1
 8001546:	201e      	movs	r0, #30
 8001548:	f001 f917 	bl	800277a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800154c:	201e      	movs	r0, #30
 800154e:	f001 f930 	bl	80027b2 <HAL_NVIC_EnableIRQ>
}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40000400 	.word	0x40000400
 8001560:	40021000 	.word	0x40021000
 8001564:	40000800 	.word	0x40000800

08001568 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001570:	f107 0310 	add.w	r3, r7, #16
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a1e      	ldr	r2, [pc, #120]	; (80015fc <HAL_TIM_MspPostInit+0x94>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d118      	bne.n	80015ba <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001588:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <HAL_TIM_MspPostInit+0x98>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	4a1c      	ldr	r2, [pc, #112]	; (8001600 <HAL_TIM_MspPostInit+0x98>)
 800158e:	f043 0304 	orr.w	r3, r3, #4
 8001592:	6193      	str	r3, [r2, #24]
 8001594:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <HAL_TIM_MspPostInit+0x98>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWM1_F_Pin|PWM1_B_Pin;
 80015a0:	23c0      	movs	r3, #192	; 0xc0
 80015a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2302      	movs	r3, #2
 80015a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	2302      	movs	r3, #2
 80015aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ac:	f107 0310 	add.w	r3, r7, #16
 80015b0:	4619      	mov	r1, r3
 80015b2:	4814      	ldr	r0, [pc, #80]	; (8001604 <HAL_TIM_MspPostInit+0x9c>)
 80015b4:	f001 f926 	bl	8002804 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80015b8:	e01c      	b.n	80015f4 <HAL_TIM_MspPostInit+0x8c>
  else if(htim->Instance==TIM4)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a12      	ldr	r2, [pc, #72]	; (8001608 <HAL_TIM_MspPostInit+0xa0>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d117      	bne.n	80015f4 <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c4:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <HAL_TIM_MspPostInit+0x98>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	4a0d      	ldr	r2, [pc, #52]	; (8001600 <HAL_TIM_MspPostInit+0x98>)
 80015ca:	f043 0308 	orr.w	r3, r3, #8
 80015ce:	6193      	str	r3, [r2, #24]
 80015d0:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <HAL_TIM_MspPostInit+0x98>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	f003 0308 	and.w	r3, r3, #8
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM2_Pin;
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e0:	2302      	movs	r3, #2
 80015e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e4:	2302      	movs	r3, #2
 80015e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM2_GPIO_Port, &GPIO_InitStruct);
 80015e8:	f107 0310 	add.w	r3, r7, #16
 80015ec:	4619      	mov	r1, r3
 80015ee:	4807      	ldr	r0, [pc, #28]	; (800160c <HAL_TIM_MspPostInit+0xa4>)
 80015f0:	f001 f908 	bl	8002804 <HAL_GPIO_Init>
}
 80015f4:	bf00      	nop
 80015f6:	3720      	adds	r7, #32
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40000400 	.word	0x40000400
 8001600:	40021000 	.word	0x40021000
 8001604:	40010800 	.word	0x40010800
 8001608:	40000800 	.word	0x40000800
 800160c:	40010c00 	.word	0x40010c00

08001610 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 0310 	add.w	r3, r7, #16
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a1b      	ldr	r2, [pc, #108]	; (8001698 <HAL_UART_MspInit+0x88>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d12f      	bne.n	8001690 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001630:	4b1a      	ldr	r3, [pc, #104]	; (800169c <HAL_UART_MspInit+0x8c>)
 8001632:	69db      	ldr	r3, [r3, #28]
 8001634:	4a19      	ldr	r2, [pc, #100]	; (800169c <HAL_UART_MspInit+0x8c>)
 8001636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800163a:	61d3      	str	r3, [r2, #28]
 800163c:	4b17      	ldr	r3, [pc, #92]	; (800169c <HAL_UART_MspInit+0x8c>)
 800163e:	69db      	ldr	r3, [r3, #28]
 8001640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001648:	4b14      	ldr	r3, [pc, #80]	; (800169c <HAL_UART_MspInit+0x8c>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	4a13      	ldr	r2, [pc, #76]	; (800169c <HAL_UART_MspInit+0x8c>)
 800164e:	f043 0304 	orr.w	r3, r3, #4
 8001652:	6193      	str	r3, [r2, #24]
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <HAL_UART_MspInit+0x8c>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001660:	2304      	movs	r3, #4
 8001662:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001664:	2302      	movs	r3, #2
 8001666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001668:	2303      	movs	r3, #3
 800166a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166c:	f107 0310 	add.w	r3, r7, #16
 8001670:	4619      	mov	r1, r3
 8001672:	480b      	ldr	r0, [pc, #44]	; (80016a0 <HAL_UART_MspInit+0x90>)
 8001674:	f001 f8c6 	bl	8002804 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001678:	2308      	movs	r3, #8
 800167a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001684:	f107 0310 	add.w	r3, r7, #16
 8001688:	4619      	mov	r1, r3
 800168a:	4805      	ldr	r0, [pc, #20]	; (80016a0 <HAL_UART_MspInit+0x90>)
 800168c:	f001 f8ba 	bl	8002804 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001690:	bf00      	nop
 8001692:	3720      	adds	r7, #32
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40004400 	.word	0x40004400
 800169c:	40021000 	.word	0x40021000
 80016a0:	40010800 	.word	0x40010800

080016a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <NMI_Handler+0x4>

080016aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ae:	e7fe      	b.n	80016ae <HardFault_Handler+0x4>

080016b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <MemManage_Handler+0x4>

080016b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ba:	e7fe      	b.n	80016ba <BusFault_Handler+0x4>

080016bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <UsageFault_Handler+0x4>

080016c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr

080016ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr

080016da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr

080016e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ea:	f000 ff2f 	bl	800254c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80016f8:	4802      	ldr	r0, [pc, #8]	; (8001704 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80016fa:	f001 fb98 	bl	8002e2e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000910 	.word	0x20000910

08001708 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LMS_E_Pin);
 800170c:	2020      	movs	r0, #32
 800170e:	f001 fa45 	bl	8002b9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LMS_B_Pin);
 8001712:	2040      	movs	r0, #64	; 0x40
 8001714:	f001 fa42 	bl	8002b9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}

0800171c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001720:	4802      	ldr	r0, [pc, #8]	; (800172c <TIM4_IRQHandler+0x10>)
 8001722:	f003 fe5b 	bl	80053dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000274 	.word	0x20000274

08001730 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LMS_M_Pin);
 8001734:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001738:	f001 fa30 	bl	8002b9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}

08001740 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr

0800174c <MAP>:
bool FLAG_runMotor = false;

u8 M1_toRotate = 0;
/*===================================================*/
uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax,
	uint32_t au32_OUTmin, uint32_t au32_OUTmax) {
 800174c:	b5b0      	push	{r4, r5, r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
 8001758:	603b      	str	r3, [r7, #0]
  uint32_t val = au32_IN - au32_INmin;
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	617b      	str	r3, [r7, #20]
  val = val * (au32_OUTmax - au32_OUTmin);
 8001762:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	1ad2      	subs	r2, r2, r3
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	fb02 f303 	mul.w	r3, r2, r3
 800176e:	617b      	str	r3, [r7, #20]
  val = val / (1.0 * (au32_INmax - au32_INmin));
 8001770:	6978      	ldr	r0, [r7, #20]
 8001772:	f7fe fe2f 	bl	80003d4 <__aeabi_ui2d>
 8001776:	4604      	mov	r4, r0
 8001778:	460d      	mov	r5, r1
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe fe27 	bl	80003d4 <__aeabi_ui2d>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	4620      	mov	r0, r4
 800178c:	4629      	mov	r1, r5
 800178e:	f7fe ffc5 	bl	800071c <__aeabi_ddiv>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4610      	mov	r0, r2
 8001798:	4619      	mov	r1, r3
 800179a:	f7ff f8a7 	bl	80008ec <__aeabi_d2uiz>
 800179e:	4603      	mov	r3, r0
 80017a0:	617b      	str	r3, [r7, #20]
  val = val + au32_OUTmin;
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	4413      	add	r3, r2
 80017a8:	617b      	str	r3, [r7, #20]
  return val;
 80017aa:	697b      	ldr	r3, [r7, #20]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bdb0      	pop	{r4, r5, r7, pc}

080017b4 <set_motor>:

void set_motor(u8 id, s8 dir, u16 val) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af02      	add	r7, sp, #8
 80017ba:	4603      	mov	r3, r0
 80017bc:	71fb      	strb	r3, [r7, #7]
 80017be:	460b      	mov	r3, r1
 80017c0:	71bb      	strb	r3, [r7, #6]
 80017c2:	4613      	mov	r3, r2
 80017c4:	80bb      	strh	r3, [r7, #4]
  u16 pwm;
  switch (id) {
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d002      	beq.n	80017d2 <set_motor+0x1e>
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d04e      	beq.n	800186e <set_motor+0xba>
	  HAL_GPIO_WritePin(M2_R_GPIO_Port, M2_R_Pin, GPIO_PIN_RESET);
	  TIM4->CCR2 = 999;
	}
	break;
  default:
	return;
 80017d0:	e0b7      	b.n	8001942 <set_motor+0x18e>
	pwm = MAP(val, 0, 1000, 0, 499);
 80017d2:	88b8      	ldrh	r0, [r7, #4]
 80017d4:	f240 13f3 	movw	r3, #499	; 0x1f3
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	2300      	movs	r3, #0
 80017dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017e0:	2100      	movs	r1, #0
 80017e2:	f7ff ffb3 	bl	800174c <MAP>
 80017e6:	4603      	mov	r3, r0
 80017e8:	81fb      	strh	r3, [r7, #14]
	if (dir == 1) {
 80017ea:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d10c      	bne.n	800180c <set_motor+0x58>
	  HAL_GPIO_WritePin(M1_EN_GPIO_Port, M1_EN_Pin, GPIO_PIN_SET);
 80017f2:	2201      	movs	r2, #1
 80017f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017f8:	4853      	ldr	r0, [pc, #332]	; (8001948 <set_motor+0x194>)
 80017fa:	f001 f99e 	bl	8002b3a <HAL_GPIO_WritePin>
	  TIM3->CCR1 = pwm;
 80017fe:	4a53      	ldr	r2, [pc, #332]	; (800194c <set_motor+0x198>)
 8001800:	89fb      	ldrh	r3, [r7, #14]
 8001802:	6353      	str	r3, [r2, #52]	; 0x34
	  TIM3->CCR2 = 0;
 8001804:	4b51      	ldr	r3, [pc, #324]	; (800194c <set_motor+0x198>)
 8001806:	2200      	movs	r2, #0
 8001808:	639a      	str	r2, [r3, #56]	; 0x38
	break;
 800180a:	e09a      	b.n	8001942 <set_motor+0x18e>
	} else if (dir == -1) {
 800180c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001814:	d10c      	bne.n	8001830 <set_motor+0x7c>
	  HAL_GPIO_WritePin(M1_EN_GPIO_Port, M1_EN_Pin, GPIO_PIN_SET);
 8001816:	2201      	movs	r2, #1
 8001818:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800181c:	484a      	ldr	r0, [pc, #296]	; (8001948 <set_motor+0x194>)
 800181e:	f001 f98c 	bl	8002b3a <HAL_GPIO_WritePin>
	  TIM3->CCR2 = pwm;
 8001822:	4a4a      	ldr	r2, [pc, #296]	; (800194c <set_motor+0x198>)
 8001824:	89fb      	ldrh	r3, [r7, #14]
 8001826:	6393      	str	r3, [r2, #56]	; 0x38
	  TIM3->CCR1 = 0;
 8001828:	4b48      	ldr	r3, [pc, #288]	; (800194c <set_motor+0x198>)
 800182a:	2200      	movs	r2, #0
 800182c:	635a      	str	r2, [r3, #52]	; 0x34
	break;
 800182e:	e088      	b.n	8001942 <set_motor+0x18e>
	} else if (dir == -2) //Freely run
 8001830:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001834:	f113 0f02 	cmn.w	r3, #2
 8001838:	d10c      	bne.n	8001854 <set_motor+0xa0>
	  HAL_GPIO_WritePin(M1_EN_GPIO_Port, M1_EN_Pin, GPIO_PIN_RESET);
 800183a:	2200      	movs	r2, #0
 800183c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001840:	4841      	ldr	r0, [pc, #260]	; (8001948 <set_motor+0x194>)
 8001842:	f001 f97a 	bl	8002b3a <HAL_GPIO_WritePin>
	  TIM3->CCR1 = 0;
 8001846:	4b41      	ldr	r3, [pc, #260]	; (800194c <set_motor+0x198>)
 8001848:	2200      	movs	r2, #0
 800184a:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM3->CCR2 = 0;
 800184c:	4b3f      	ldr	r3, [pc, #252]	; (800194c <set_motor+0x198>)
 800184e:	2200      	movs	r2, #0
 8001850:	639a      	str	r2, [r3, #56]	; 0x38
	break;
 8001852:	e076      	b.n	8001942 <set_motor+0x18e>
	  HAL_GPIO_WritePin(M1_EN_GPIO_Port, M1_EN_Pin, GPIO_PIN_SET);
 8001854:	2201      	movs	r2, #1
 8001856:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800185a:	483b      	ldr	r0, [pc, #236]	; (8001948 <set_motor+0x194>)
 800185c:	f001 f96d 	bl	8002b3a <HAL_GPIO_WritePin>
	  TIM3->CCR2 = 0;
 8001860:	4b3a      	ldr	r3, [pc, #232]	; (800194c <set_motor+0x198>)
 8001862:	2200      	movs	r2, #0
 8001864:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM3->CCR1 = 0;
 8001866:	4b39      	ldr	r3, [pc, #228]	; (800194c <set_motor+0x198>)
 8001868:	2200      	movs	r2, #0
 800186a:	635a      	str	r2, [r3, #52]	; 0x34
	break;
 800186c:	e069      	b.n	8001942 <set_motor+0x18e>
	pwm = MAP(val, 0, 1000, 0, 999);
 800186e:	88b8      	ldrh	r0, [r7, #4]
 8001870:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	2300      	movs	r3, #0
 8001878:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800187c:	2100      	movs	r1, #0
 800187e:	f7ff ff65 	bl	800174c <MAP>
 8001882:	4603      	mov	r3, r0
 8001884:	81fb      	strh	r3, [r7, #14]
	if (dir == -1 && BEGIN_REACH == false) {
 8001886:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800188a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800188e:	d116      	bne.n	80018be <set_motor+0x10a>
 8001890:	4b2f      	ldr	r3, [pc, #188]	; (8001950 <set_motor+0x19c>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	f083 0301 	eor.w	r3, r3, #1
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00f      	beq.n	80018be <set_motor+0x10a>
	  HAL_GPIO_WritePin(M2_L_GPIO_Port, M2_L_Pin, GPIO_PIN_SET);
 800189e:	2201      	movs	r2, #1
 80018a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018a4:	4828      	ldr	r0, [pc, #160]	; (8001948 <set_motor+0x194>)
 80018a6:	f001 f948 	bl	8002b3a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M2_R_GPIO_Port, M2_R_Pin, GPIO_PIN_RESET);
 80018aa:	2200      	movs	r2, #0
 80018ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018b0:	4825      	ldr	r0, [pc, #148]	; (8001948 <set_motor+0x194>)
 80018b2:	f001 f942 	bl	8002b3a <HAL_GPIO_WritePin>
	  TIM4->CCR2 = pwm;
 80018b6:	4a27      	ldr	r2, [pc, #156]	; (8001954 <set_motor+0x1a0>)
 80018b8:	89fb      	ldrh	r3, [r7, #14]
 80018ba:	6393      	str	r3, [r2, #56]	; 0x38
 80018bc:	e040      	b.n	8001940 <set_motor+0x18c>
	} else if (dir == 1 && END_REACH == false) {
 80018be:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d116      	bne.n	80018f4 <set_motor+0x140>
 80018c6:	4b24      	ldr	r3, [pc, #144]	; (8001958 <set_motor+0x1a4>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	f083 0301 	eor.w	r3, r3, #1
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d00f      	beq.n	80018f4 <set_motor+0x140>
	  HAL_GPIO_WritePin(M2_L_GPIO_Port, M2_L_Pin, GPIO_PIN_RESET);
 80018d4:	2200      	movs	r2, #0
 80018d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018da:	481b      	ldr	r0, [pc, #108]	; (8001948 <set_motor+0x194>)
 80018dc:	f001 f92d 	bl	8002b3a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M2_R_GPIO_Port, M2_R_Pin, GPIO_PIN_SET);
 80018e0:	2201      	movs	r2, #1
 80018e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018e6:	4818      	ldr	r0, [pc, #96]	; (8001948 <set_motor+0x194>)
 80018e8:	f001 f927 	bl	8002b3a <HAL_GPIO_WritePin>
	  TIM4->CCR2 = pwm;
 80018ec:	4a19      	ldr	r2, [pc, #100]	; (8001954 <set_motor+0x1a0>)
 80018ee:	89fb      	ldrh	r3, [r7, #14]
 80018f0:	6393      	str	r3, [r2, #56]	; 0x38
 80018f2:	e025      	b.n	8001940 <set_motor+0x18c>
	} else if (dir == -2) //Freely run
 80018f4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80018f8:	f113 0f02 	cmn.w	r3, #2
 80018fc:	d10f      	bne.n	800191e <set_motor+0x16a>
	  TIM4->CCR2 = 0;
 80018fe:	4b15      	ldr	r3, [pc, #84]	; (8001954 <set_motor+0x1a0>)
 8001900:	2200      	movs	r2, #0
 8001902:	639a      	str	r2, [r3, #56]	; 0x38
	  HAL_GPIO_WritePin(M2_L_GPIO_Port, M2_L_Pin, GPIO_PIN_RESET);
 8001904:	2200      	movs	r2, #0
 8001906:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800190a:	480f      	ldr	r0, [pc, #60]	; (8001948 <set_motor+0x194>)
 800190c:	f001 f915 	bl	8002b3a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M2_R_GPIO_Port, M2_R_Pin, GPIO_PIN_RESET);
 8001910:	2200      	movs	r2, #0
 8001912:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001916:	480c      	ldr	r0, [pc, #48]	; (8001948 <set_motor+0x194>)
 8001918:	f001 f90f 	bl	8002b3a <HAL_GPIO_WritePin>
	break;
 800191c:	e010      	b.n	8001940 <set_motor+0x18c>
	  HAL_GPIO_WritePin(M2_L_GPIO_Port, M2_L_Pin, GPIO_PIN_RESET);
 800191e:	2200      	movs	r2, #0
 8001920:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001924:	4808      	ldr	r0, [pc, #32]	; (8001948 <set_motor+0x194>)
 8001926:	f001 f908 	bl	8002b3a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M2_R_GPIO_Port, M2_R_Pin, GPIO_PIN_RESET);
 800192a:	2200      	movs	r2, #0
 800192c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001930:	4805      	ldr	r0, [pc, #20]	; (8001948 <set_motor+0x194>)
 8001932:	f001 f902 	bl	8002b3a <HAL_GPIO_WritePin>
	  TIM4->CCR2 = 999;
 8001936:	4b07      	ldr	r3, [pc, #28]	; (8001954 <set_motor+0x1a0>)
 8001938:	f240 32e7 	movw	r2, #999	; 0x3e7
 800193c:	639a      	str	r2, [r3, #56]	; 0x38
	break;
 800193e:	e7ff      	b.n	8001940 <set_motor+0x18c>
 8001940:	bf00      	nop
  }
}
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40010c00 	.word	0x40010c00
 800194c:	40000400 	.word	0x40000400
 8001950:	20000301 	.word	0x20000301
 8001954:	40000800 	.word	0x40000800
 8001958:	20000300 	.word	0x20000300

0800195c <lightLED>:

void lightLED(bool yellow, bool green) {
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	460a      	mov	r2, r1
 8001966:	71fb      	strb	r3, [r7, #7]
 8001968:	4613      	mov	r3, r2
 800196a:	71bb      	strb	r3, [r7, #6]
  if (yellow) {
 800196c:	79fb      	ldrb	r3, [r7, #7]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d005      	beq.n	800197e <lightLED+0x22>
	HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, GPIO_PIN_SET);
 8001972:	2201      	movs	r2, #1
 8001974:	2110      	movs	r1, #16
 8001976:	4813      	ldr	r0, [pc, #76]	; (80019c4 <lightLED+0x68>)
 8001978:	f001 f8df 	bl	8002b3a <HAL_GPIO_WritePin>
 800197c:	e00a      	b.n	8001994 <lightLED+0x38>
  } else if (yellow == false) {
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	f083 0301 	eor.w	r3, r3, #1
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d004      	beq.n	8001994 <lightLED+0x38>
	HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, GPIO_PIN_RESET);
 800198a:	2200      	movs	r2, #0
 800198c:	2110      	movs	r1, #16
 800198e:	480d      	ldr	r0, [pc, #52]	; (80019c4 <lightLED+0x68>)
 8001990:	f001 f8d3 	bl	8002b3a <HAL_GPIO_WritePin>
  }

  if (green) {
 8001994:	79bb      	ldrb	r3, [r7, #6]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d005      	beq.n	80019a6 <lightLED+0x4a>
	HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 800199a:	2201      	movs	r2, #1
 800199c:	2120      	movs	r1, #32
 800199e:	4809      	ldr	r0, [pc, #36]	; (80019c4 <lightLED+0x68>)
 80019a0:	f001 f8cb 	bl	8002b3a <HAL_GPIO_WritePin>
  } else if (green == false) {
	HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
  }
}
 80019a4:	e00a      	b.n	80019bc <lightLED+0x60>
  } else if (green == false) {
 80019a6:	79bb      	ldrb	r3, [r7, #6]
 80019a8:	f083 0301 	eor.w	r3, r3, #1
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d004      	beq.n	80019bc <lightLED+0x60>
	HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 80019b2:	2200      	movs	r2, #0
 80019b4:	2120      	movs	r1, #32
 80019b6:	4803      	ldr	r0, [pc, #12]	; (80019c4 <lightLED+0x68>)
 80019b8:	f001 f8bf 	bl	8002b3a <HAL_GPIO_WritePin>
}
 80019bc:	bf00      	nop
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40010800 	.word	0x40010800

080019c8 <HAL_GPIO_EXTI_Callback>:
bool FLAG_startPointSet = false;
bool FLAG_midInTime = false;
u32 midInTime = 0;
u32 midDelta = 0;
bool FLAG_midOutTime = false;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == LMS_B_Pin) {
 80019d2:	88fb      	ldrh	r3, [r7, #6]
 80019d4:	2b40      	cmp	r3, #64	; 0x40
 80019d6:	d11a      	bne.n	8001a0e <HAL_GPIO_EXTI_Callback+0x46>
	if (HAL_GPIO_ReadPin(LMS_B_GPIO_Port, LMS_B_Pin) == GPIO_PIN_SET) {
 80019d8:	2140      	movs	r1, #64	; 0x40
 80019da:	484f      	ldr	r0, [pc, #316]	; (8001b18 <HAL_GPIO_EXTI_Callback+0x150>)
 80019dc:	f001 f896 	bl	8002b0c <HAL_GPIO_ReadPin>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d103      	bne.n	80019ee <HAL_GPIO_EXTI_Callback+0x26>
	  BEGIN_REACH = false;
 80019e6:	4b4d      	ldr	r3, [pc, #308]	; (8001b1c <HAL_GPIO_EXTI_Callback+0x154>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	701a      	strb	r2, [r3, #0]
 80019ec:	e091      	b.n	8001b12 <HAL_GPIO_EXTI_Callback+0x14a>
	} else {
	  BEGIN_REACH = true;
 80019ee:	4b4b      	ldr	r3, [pc, #300]	; (8001b1c <HAL_GPIO_EXTI_Callback+0x154>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	701a      	strb	r2, [r3, #0]
	  if (M2_dir == -1)
 80019f4:	4b4a      	ldr	r3, [pc, #296]	; (8001b20 <HAL_GPIO_EXTI_Callback+0x158>)
 80019f6:	f993 3000 	ldrsb.w	r3, [r3]
 80019fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019fe:	f040 8088 	bne.w	8001b12 <HAL_GPIO_EXTI_Callback+0x14a>
		set_motor(2, 0, 0);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2100      	movs	r1, #0
 8001a06:	2002      	movs	r0, #2
 8001a08:	f7ff fed4 	bl	80017b4 <set_motor>
 8001a0c:	e081      	b.n	8001b12 <HAL_GPIO_EXTI_Callback+0x14a>
	}
  } else if (GPIO_Pin == LMS_E_Pin) {
 8001a0e:	88fb      	ldrh	r3, [r7, #6]
 8001a10:	2b20      	cmp	r3, #32
 8001a12:	d118      	bne.n	8001a46 <HAL_GPIO_EXTI_Callback+0x7e>
	if (HAL_GPIO_ReadPin(LMS_E_GPIO_Port, LMS_E_Pin) == GPIO_PIN_SET) {
 8001a14:	2120      	movs	r1, #32
 8001a16:	4840      	ldr	r0, [pc, #256]	; (8001b18 <HAL_GPIO_EXTI_Callback+0x150>)
 8001a18:	f001 f878 	bl	8002b0c <HAL_GPIO_ReadPin>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d103      	bne.n	8001a2a <HAL_GPIO_EXTI_Callback+0x62>
	  END_REACH = false;
 8001a22:	4b40      	ldr	r3, [pc, #256]	; (8001b24 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
 8001a28:	e073      	b.n	8001b12 <HAL_GPIO_EXTI_Callback+0x14a>
	} else {
	  END_REACH = true;
 8001a2a:	4b3e      	ldr	r3, [pc, #248]	; (8001b24 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	701a      	strb	r2, [r3, #0]
	  if (M2_dir == 1)
 8001a30:	4b3b      	ldr	r3, [pc, #236]	; (8001b20 <HAL_GPIO_EXTI_Callback+0x158>)
 8001a32:	f993 3000 	ldrsb.w	r3, [r3]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d16b      	bne.n	8001b12 <HAL_GPIO_EXTI_Callback+0x14a>
		set_motor(2, 0, 0);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	2002      	movs	r0, #2
 8001a40:	f7ff feb8 	bl	80017b4 <set_motor>
 8001a44:	e065      	b.n	8001b12 <HAL_GPIO_EXTI_Callback+0x14a>
	}
  } else if (GPIO_Pin == LMS_M_Pin) {
 8001a46:	88fb      	ldrh	r3, [r7, #6]
 8001a48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a4c:	d160      	bne.n	8001b10 <HAL_GPIO_EXTI_Callback+0x148>
	if (HAL_GPIO_ReadPin(LMS_M_GPIO_Port, LMS_M_Pin) == GPIO_PIN_SET) {
 8001a4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a52:	4831      	ldr	r0, [pc, #196]	; (8001b18 <HAL_GPIO_EXTI_Callback+0x150>)
 8001a54:	f001 f85a 	bl	8002b0c <HAL_GPIO_ReadPin>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d142      	bne.n	8001ae4 <HAL_GPIO_EXTI_Callback+0x11c>
	  MID_REACH = false;
 8001a5e:	4b32      	ldr	r3, [pc, #200]	; (8001b28 <HAL_GPIO_EXTI_Callback+0x160>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	701a      	strb	r2, [r3, #0]
	  FLAG_midInTime = false;
 8001a64:	4b31      	ldr	r3, [pc, #196]	; (8001b2c <HAL_GPIO_EXTI_Callback+0x164>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	701a      	strb	r2, [r3, #0]
	  if (FLAG_midOutTime == false) {
 8001a6a:	4b31      	ldr	r3, [pc, #196]	; (8001b30 <HAL_GPIO_EXTI_Callback+0x168>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	f083 0301 	eor.w	r3, r3, #1
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d04c      	beq.n	8001b12 <HAL_GPIO_EXTI_Callback+0x14a>
		FLAG_midOutTime = true;
 8001a78:	4b2d      	ldr	r3, [pc, #180]	; (8001b30 <HAL_GPIO_EXTI_Callback+0x168>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	701a      	strb	r2, [r3, #0]
		u32 now_midOut = HAL_GetTick();
 8001a7e:	f000 fd77 	bl	8002570 <HAL_GetTick>
 8001a82:	60f8      	str	r0, [r7, #12]
		midDelta = now_midOut - midInTime;
 8001a84:	4b2b      	ldr	r3, [pc, #172]	; (8001b34 <HAL_GPIO_EXTI_Callback+0x16c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	4a2a      	ldr	r2, [pc, #168]	; (8001b38 <HAL_GPIO_EXTI_Callback+0x170>)
 8001a8e:	6013      	str	r3, [r2, #0]
		midInTime = now_midOut;
 8001a90:	4a28      	ldr	r2, [pc, #160]	; (8001b34 <HAL_GPIO_EXTI_Callback+0x16c>)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6013      	str	r3, [r2, #0]
		if (midDelta > 3000) {
 8001a96:	4b28      	ldr	r3, [pc, #160]	; (8001b38 <HAL_GPIO_EXTI_Callback+0x170>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d905      	bls.n	8001aae <HAL_GPIO_EXTI_Callback+0xe6>
		  FLAG_startPointSet = false;
 8001aa2:	4b26      	ldr	r3, [pc, #152]	; (8001b3c <HAL_GPIO_EXTI_Callback+0x174>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	701a      	strb	r2, [r3, #0]
		  midDelta = 0;
 8001aa8:	4b23      	ldr	r3, [pc, #140]	; (8001b38 <HAL_GPIO_EXTI_Callback+0x170>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
		}

		if ((FLAG_startPointSet == false) && (FLAG_runMotor == true)) {
 8001aae:	4b23      	ldr	r3, [pc, #140]	; (8001b3c <HAL_GPIO_EXTI_Callback+0x174>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	f083 0301 	eor.w	r3, r3, #1
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d02a      	beq.n	8001b12 <HAL_GPIO_EXTI_Callback+0x14a>
 8001abc:	4b20      	ldr	r3, [pc, #128]	; (8001b40 <HAL_GPIO_EXTI_Callback+0x178>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d026      	beq.n	8001b12 <HAL_GPIO_EXTI_Callback+0x14a>
		  M2_travel_StartPoint = M2_x;
 8001ac4:	4b1f      	ldr	r3, [pc, #124]	; (8001b44 <HAL_GPIO_EXTI_Callback+0x17c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a1f      	ldr	r2, [pc, #124]	; (8001b48 <HAL_GPIO_EXTI_Callback+0x180>)
 8001aca:	6013      	str	r3, [r2, #0]
		  M2_travel = 0;
 8001acc:	4b1f      	ldr	r3, [pc, #124]	; (8001b4c <HAL_GPIO_EXTI_Callback+0x184>)
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
		  M1_travel = 0;
 8001ad4:	4b1e      	ldr	r3, [pc, #120]	; (8001b50 <HAL_GPIO_EXTI_Callback+0x188>)
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
		  FLAG_startPointSet = true;
 8001adc:	4b17      	ldr	r3, [pc, #92]	; (8001b3c <HAL_GPIO_EXTI_Callback+0x174>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	701a      	strb	r2, [r3, #0]
 8001ae2:	e016      	b.n	8001b12 <HAL_GPIO_EXTI_Callback+0x14a>
		}
	  }
	} else {
	  MID_REACH = true;
 8001ae4:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <HAL_GPIO_EXTI_Callback+0x160>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	701a      	strb	r2, [r3, #0]
	  FLAG_midOutTime = false;
 8001aea:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <HAL_GPIO_EXTI_Callback+0x168>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
	  if (FLAG_midInTime == false) {
 8001af0:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <HAL_GPIO_EXTI_Callback+0x164>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	f083 0301 	eor.w	r3, r3, #1
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d009      	beq.n	8001b12 <HAL_GPIO_EXTI_Callback+0x14a>
		FLAG_midInTime = true;
 8001afe:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <HAL_GPIO_EXTI_Callback+0x164>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	701a      	strb	r2, [r3, #0]
		midInTime = HAL_GetTick();
 8001b04:	f000 fd34 	bl	8002570 <HAL_GetTick>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	; (8001b34 <HAL_GPIO_EXTI_Callback+0x16c>)
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	e000      	b.n	8001b12 <HAL_GPIO_EXTI_Callback+0x14a>
	  }
	}
  } else
	return;
 8001b10:	bf00      	nop
}
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40010c00 	.word	0x40010c00
 8001b1c:	20000301 	.word	0x20000301
 8001b20:	20000374 	.word	0x20000374
 8001b24:	20000300 	.word	0x20000300
 8001b28:	20000302 	.word	0x20000302
 8001b2c:	200003af 	.word	0x200003af
 8001b30:	200003b8 	.word	0x200003b8
 8001b34:	200003b0 	.word	0x200003b0
 8001b38:	200003b4 	.word	0x200003b4
 8001b3c:	200003ae 	.word	0x200003ae
 8001b40:	200003ac 	.word	0x200003ac
 8001b44:	20000394 	.word	0x20000394
 8001b48:	200003a8 	.word	0x200003a8
 8001b4c:	20000398 	.word	0x20000398
 8001b50:	2000039c 	.word	0x2000039c

08001b54 <start_up>:

void start_up() {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001b58:	213c      	movs	r1, #60	; 0x3c
 8001b5a:	4823      	ldr	r0, [pc, #140]	; (8001be8 <start_up+0x94>)
 8001b5c:	f003 fbb0 	bl	80052c0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001b60:	213c      	movs	r1, #60	; 0x3c
 8001b62:	4822      	ldr	r0, [pc, #136]	; (8001bec <start_up+0x98>)
 8001b64:	f003 fbac 	bl	80052c0 <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start_IT(&htim4);
 8001b68:	4821      	ldr	r0, [pc, #132]	; (8001bf0 <start_up+0x9c>)
 8001b6a:	f003 f9c3 	bl	8004ef4 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001b6e:	2100      	movs	r1, #0
 8001b70:	4820      	ldr	r0, [pc, #128]	; (8001bf4 <start_up+0xa0>)
 8001b72:	f003 fa61 	bl	8005038 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001b76:	2104      	movs	r1, #4
 8001b78:	481e      	ldr	r0, [pc, #120]	; (8001bf4 <start_up+0xa0>)
 8001b7a:	f003 fa5d 	bl	8005038 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001b7e:	2104      	movs	r1, #4
 8001b80:	481b      	ldr	r0, [pc, #108]	; (8001bf0 <start_up+0x9c>)
 8001b82:	f003 fa59 	bl	8005038 <HAL_TIM_PWM_Start>

  buttonInit(&BTN_Start, BTN_START_GPIO_Port, BTN_START_Pin);
 8001b86:	2202      	movs	r2, #2
 8001b88:	491b      	ldr	r1, [pc, #108]	; (8001bf8 <start_up+0xa4>)
 8001b8a:	481c      	ldr	r0, [pc, #112]	; (8001bfc <start_up+0xa8>)
 8001b8c:	f7ff f8b3 	bl	8000cf6 <buttonInit>
  buttonInit(&BTN_Stop, BTN_STOP_GPIO_Port, BTN_STOP_Pin);
 8001b90:	2201      	movs	r2, #1
 8001b92:	4919      	ldr	r1, [pc, #100]	; (8001bf8 <start_up+0xa4>)
 8001b94:	481a      	ldr	r0, [pc, #104]	; (8001c00 <start_up+0xac>)
 8001b96:	f7ff f8ae 	bl	8000cf6 <buttonInit>
  buttonInit(&SW_Mode, MODE_SW_GPIO_Port, MODE_SW_Pin);
 8001b9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b9e:	4916      	ldr	r1, [pc, #88]	; (8001bf8 <start_up+0xa4>)
 8001ba0:	4818      	ldr	r0, [pc, #96]	; (8001c04 <start_up+0xb0>)
 8001ba2:	f7ff f8a8 	bl	8000cf6 <buttonInit>
  buttonInit(&SW_Lvl1, LVL_SW1_GPIO_Port, LVL_SW1_Pin);
 8001ba6:	2208      	movs	r2, #8
 8001ba8:	4913      	ldr	r1, [pc, #76]	; (8001bf8 <start_up+0xa4>)
 8001baa:	4817      	ldr	r0, [pc, #92]	; (8001c08 <start_up+0xb4>)
 8001bac:	f7ff f8a3 	bl	8000cf6 <buttonInit>
  buttonInit(&SW_Lvl2, LVL_SW2_GPIO_Port, LVL_SW2_Pin);
 8001bb0:	2210      	movs	r2, #16
 8001bb2:	4911      	ldr	r1, [pc, #68]	; (8001bf8 <start_up+0xa4>)
 8001bb4:	4815      	ldr	r0, [pc, #84]	; (8001c0c <start_up+0xb8>)
 8001bb6:	f7ff f89e 	bl	8000cf6 <buttonInit>

  state = buttonRead(&SW_Mode);
 8001bba:	4812      	ldr	r0, [pc, #72]	; (8001c04 <start_up+0xb0>)
 8001bbc:	f7ff f8c2 	bl	8000d44 <buttonRead>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <start_up+0xbc>)
 8001bc6:	701a      	strb	r2, [r3, #0]
  if (state == IDLE)
 8001bc8:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <start_up+0xbc>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d102      	bne.n	8001bd6 <start_up+0x82>
	active_idle();
 8001bd0:	f000 f83e 	bl	8001c50 <active_idle>
  else if (state == RUN)
	active_run();
}
 8001bd4:	e005      	b.n	8001be2 <start_up+0x8e>
  else if (state == RUN)
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <start_up+0xbc>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <start_up+0x8e>
	active_run();
 8001bde:	f000 f851 	bl	8001c84 <active_run>
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	2000019c 	.word	0x2000019c
 8001bec:	200001e4 	.word	0x200001e4
 8001bf0:	20000274 	.word	0x20000274
 8001bf4:	2000022c 	.word	0x2000022c
 8001bf8:	40010c00 	.word	0x40010c00
 8001bfc:	20000304 	.word	0x20000304
 8001c00:	20000318 	.word	0x20000318
 8001c04:	2000032c 	.word	0x2000032c
 8001c08:	20000340 	.word	0x20000340
 8001c0c:	20000354 	.word	0x20000354
 8001c10:	20000368 	.word	0x20000368

08001c14 <stop_motor>:
void stop_motor(bool motor1, bool motor2) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	460a      	mov	r2, r1
 8001c1e:	71fb      	strb	r3, [r7, #7]
 8001c20:	4613      	mov	r3, r2
 8001c22:	71bb      	strb	r3, [r7, #6]
  if (motor1) {
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d005      	beq.n	8001c36 <stop_motor+0x22>
	set_motor(1, -2, 0);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f06f 0101 	mvn.w	r1, #1
 8001c30:	2001      	movs	r0, #1
 8001c32:	f7ff fdbf 	bl	80017b4 <set_motor>
  }
  if (motor2) {
 8001c36:	79bb      	ldrb	r3, [r7, #6]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d004      	beq.n	8001c46 <stop_motor+0x32>
	set_motor(2, 0, 0);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2100      	movs	r1, #0
 8001c40:	2002      	movs	r0, #2
 8001c42:	f7ff fdb7 	bl	80017b4 <set_motor>
  }
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
	...

08001c50 <active_idle>:
void active_idle() {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  stop_motor(1, 1);
 8001c54:	2101      	movs	r1, #1
 8001c56:	2001      	movs	r0, #1
 8001c58:	f7ff ffdc 	bl	8001c14 <stop_motor>
  if (RUN_MODE == true) {
 8001c5c:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <active_idle+0x2c>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d002      	beq.n	8001c6a <active_idle+0x1a>
	RUN_MODE = false;
 8001c64:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <active_idle+0x2c>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	701a      	strb	r2, [r3, #0]
  }
  IDLE_MODE = true;
 8001c6a:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <active_idle+0x30>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	701a      	strb	r2, [r3, #0]
  lightLED(1, 0);
 8001c70:	2100      	movs	r1, #0
 8001c72:	2001      	movs	r0, #1
 8001c74:	f7ff fe72 	bl	800195c <lightLED>
}
 8001c78:	bf00      	nop
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20000369 	.word	0x20000369
 8001c80:	2000036a 	.word	0x2000036a

08001c84 <active_run>:
void active_run() {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  stop_motor(1, 1);
 8001c88:	2101      	movs	r1, #1
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	f7ff ffc2 	bl	8001c14 <stop_motor>
  if (IDLE_MODE == true) {
 8001c90:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <active_run+0x2c>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d002      	beq.n	8001c9e <active_run+0x1a>
	IDLE_MODE = false;
 8001c98:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <active_run+0x2c>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	701a      	strb	r2, [r3, #0]
  }
  RUN_MODE = true;
 8001c9e:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <active_run+0x30>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	701a      	strb	r2, [r3, #0]
  lightLED(0, 1);
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	f7ff fe58 	bl	800195c <lightLED>
}
 8001cac:	bf00      	nop
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	2000036a 	.word	0x2000036a
 8001cb4:	20000369 	.word	0x20000369

08001cb8 <check_button>:

void check_button() {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  BTN_Start_state = buttonRead(&BTN_Start);
 8001cbc:	481c      	ldr	r0, [pc, #112]	; (8001d30 <check_button+0x78>)
 8001cbe:	f7ff f841 	bl	8000d44 <buttonRead>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4b1b      	ldr	r3, [pc, #108]	; (8001d34 <check_button+0x7c>)
 8001cc8:	701a      	strb	r2, [r3, #0]
  BTN_Stop_state = buttonRead(&BTN_Stop);
 8001cca:	481b      	ldr	r0, [pc, #108]	; (8001d38 <check_button+0x80>)
 8001ccc:	f7ff f83a 	bl	8000d44 <buttonRead>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	4b19      	ldr	r3, [pc, #100]	; (8001d3c <check_button+0x84>)
 8001cd6:	701a      	strb	r2, [r3, #0]

  SW_Lvl1_state = buttonRead(&SW_Lvl1);
 8001cd8:	4819      	ldr	r0, [pc, #100]	; (8001d40 <check_button+0x88>)
 8001cda:	f7ff f833 	bl	8000d44 <buttonRead>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4b18      	ldr	r3, [pc, #96]	; (8001d44 <check_button+0x8c>)
 8001ce4:	701a      	strb	r2, [r3, #0]
  SW_Lvl2_state = buttonRead(&SW_Lvl2);
 8001ce6:	4818      	ldr	r0, [pc, #96]	; (8001d48 <check_button+0x90>)
 8001ce8:	f7ff f82c 	bl	8000d44 <buttonRead>
 8001cec:	4603      	mov	r3, r0
 8001cee:	461a      	mov	r2, r3
 8001cf0:	4b16      	ldr	r3, [pc, #88]	; (8001d4c <check_button+0x94>)
 8001cf2:	701a      	strb	r2, [r3, #0]

  if (SW_Lvl1_state == BTN_SET && SW_Lvl2_state == BTN_SET) {
 8001cf4:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <check_button+0x8c>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d107      	bne.n	8001d0c <check_button+0x54>
 8001cfc:	4b13      	ldr	r3, [pc, #76]	; (8001d4c <check_button+0x94>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d103      	bne.n	8001d0c <check_button+0x54>
	level = 1;
 8001d04:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <check_button+0x98>)
 8001d06:	2201      	movs	r2, #1
 8001d08:	701a      	strb	r2, [r3, #0]
  } else if (SW_Lvl1_state == BTN_RESET) {
	level = 0;
  } else if (SW_Lvl2_state == BTN_RESET) {
	level = 2;
  }
}
 8001d0a:	e00e      	b.n	8001d2a <check_button+0x72>
  } else if (SW_Lvl1_state == BTN_RESET) {
 8001d0c:	4b0d      	ldr	r3, [pc, #52]	; (8001d44 <check_button+0x8c>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d103      	bne.n	8001d1c <check_button+0x64>
	level = 0;
 8001d14:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <check_button+0x98>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	701a      	strb	r2, [r3, #0]
}
 8001d1a:	e006      	b.n	8001d2a <check_button+0x72>
  } else if (SW_Lvl2_state == BTN_RESET) {
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <check_button+0x94>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d102      	bne.n	8001d2a <check_button+0x72>
	level = 2;
 8001d24:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <check_button+0x98>)
 8001d26:	2202      	movs	r2, #2
 8001d28:	701a      	strb	r2, [r3, #0]
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000304 	.word	0x20000304
 8001d34:	20000004 	.word	0x20000004
 8001d38:	20000318 	.word	0x20000318
 8001d3c:	20000005 	.word	0x20000005
 8001d40:	20000340 	.word	0x20000340
 8001d44:	20000006 	.word	0x20000006
 8001d48:	20000354 	.word	0x20000354
 8001d4c:	20000007 	.word	0x20000007
 8001d50:	2000036b 	.word	0x2000036b

08001d54 <flash_LED>:

void flash_LED(u8 id, u16 interval) {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	460a      	mov	r2, r1
 8001d5e:	71fb      	strb	r3, [r7, #7]
 8001d60:	4613      	mov	r3, r2
 8001d62:	80bb      	strh	r3, [r7, #4]
  static u32 last_Y = 0, last_G = 0;
  u32 now = HAL_GetTick();
 8001d64:	f000 fc04 	bl	8002570 <HAL_GetTick>
 8001d68:	60f8      	str	r0, [r7, #12]
  switch (id) {
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d002      	beq.n	8001d76 <flash_LED+0x22>
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d00f      	beq.n	8001d94 <flash_LED+0x40>
	  HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
	  last_G = now;
	}
	break;
  }
}
 8001d74:	e020      	b.n	8001db8 <flash_LED+0x64>
	if ((now - last_Y) > interval) {
 8001d76:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <flash_LED+0x6c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	1ad2      	subs	r2, r2, r3
 8001d7e:	88bb      	ldrh	r3, [r7, #4]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d916      	bls.n	8001db2 <flash_LED+0x5e>
	  HAL_GPIO_TogglePin(LED_Y_GPIO_Port, LED_Y_Pin);
 8001d84:	2110      	movs	r1, #16
 8001d86:	480f      	ldr	r0, [pc, #60]	; (8001dc4 <flash_LED+0x70>)
 8001d88:	f000 feef 	bl	8002b6a <HAL_GPIO_TogglePin>
	  last_Y = now;
 8001d8c:	4a0c      	ldr	r2, [pc, #48]	; (8001dc0 <flash_LED+0x6c>)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6013      	str	r3, [r2, #0]
	break;
 8001d92:	e00e      	b.n	8001db2 <flash_LED+0x5e>
	if ((now - last_G) > interval) {
 8001d94:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <flash_LED+0x74>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	1ad2      	subs	r2, r2, r3
 8001d9c:	88bb      	ldrh	r3, [r7, #4]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d909      	bls.n	8001db6 <flash_LED+0x62>
	  HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8001da2:	2120      	movs	r1, #32
 8001da4:	4807      	ldr	r0, [pc, #28]	; (8001dc4 <flash_LED+0x70>)
 8001da6:	f000 fee0 	bl	8002b6a <HAL_GPIO_TogglePin>
	  last_G = now;
 8001daa:	4a07      	ldr	r2, [pc, #28]	; (8001dc8 <flash_LED+0x74>)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6013      	str	r3, [r2, #0]
	break;
 8001db0:	e001      	b.n	8001db6 <flash_LED+0x62>
	break;
 8001db2:	bf00      	nop
 8001db4:	e000      	b.n	8001db8 <flash_LED+0x64>
	break;
 8001db6:	bf00      	nop
}
 8001db8:	bf00      	nop
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	200003bc 	.word	0x200003bc
 8001dc4:	40010800 	.word	0x40010800
 8001dc8:	200003c0 	.word	0x200003c0

08001dcc <return_home>:
bool FLAG_returnFineRev = false;
void return_home() {
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
  if (FLAG_returnFast) {
 8001dd2:	4b39      	ldr	r3, [pc, #228]	; (8001eb8 <return_home+0xec>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d021      	beq.n	8001e1e <return_home+0x52>
	if (BEGIN_REACH) {
 8001dda:	4b38      	ldr	r3, [pc, #224]	; (8001ebc <return_home+0xf0>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d010      	beq.n	8001e04 <return_home+0x38>
	  FLAG_returnFast = false;
 8001de2:	4b35      	ldr	r3, [pc, #212]	; (8001eb8 <return_home+0xec>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]
	  FLAG_returnFine = true;
 8001de8:	4b35      	ldr	r3, [pc, #212]	; (8001ec0 <return_home+0xf4>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	701a      	strb	r2, [r3, #0]
	  TS_returnFine = HAL_GetTick();
 8001dee:	f000 fbbf 	bl	8002570 <HAL_GetTick>
 8001df2:	4603      	mov	r3, r0
 8001df4:	4a33      	ldr	r2, [pc, #204]	; (8001ec4 <return_home+0xf8>)
 8001df6:	6013      	str	r3, [r2, #0]
	  set_motor(2, 0, 0);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	2002      	movs	r0, #2
 8001dfe:	f7ff fcd9 	bl	80017b4 <set_motor>
	  return;
 8001e02:	e056      	b.n	8001eb2 <return_home+0xe6>
	}
	set_motor(2, -1, 700);
 8001e04:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001e08:	f04f 31ff 	mov.w	r1, #4294967295
 8001e0c:	2002      	movs	r0, #2
 8001e0e:	f7ff fcd1 	bl	80017b4 <set_motor>
	FLAG_returnFine = false;
 8001e12:	4b2b      	ldr	r3, [pc, #172]	; (8001ec0 <return_home+0xf4>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]
	FLAG_returnFineRev = false;
 8001e18:	4b2b      	ldr	r3, [pc, #172]	; (8001ec8 <return_home+0xfc>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	701a      	strb	r2, [r3, #0]
  }
  if (FLAG_returnFine) {
 8001e1e:	4b28      	ldr	r3, [pc, #160]	; (8001ec0 <return_home+0xf4>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d01c      	beq.n	8001e60 <return_home+0x94>
	u32 deltaTime = HAL_GetTick() - TS_returnFine;
 8001e26:	f000 fba3 	bl	8002570 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	4b25      	ldr	r3, [pc, #148]	; (8001ec4 <return_home+0xf8>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	607b      	str	r3, [r7, #4]

	if (deltaTime > 2000) {
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001e3a:	d90b      	bls.n	8001e54 <return_home+0x88>
	  FLAG_returnFineRev = true;
 8001e3c:	4b22      	ldr	r3, [pc, #136]	; (8001ec8 <return_home+0xfc>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	701a      	strb	r2, [r3, #0]
	  FLAG_returnFine = false;
 8001e42:	4b1f      	ldr	r3, [pc, #124]	; (8001ec0 <return_home+0xf4>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	701a      	strb	r2, [r3, #0]
	  set_motor(2, 0, 0);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	2002      	movs	r0, #2
 8001e4e:	f7ff fcb1 	bl	80017b4 <set_motor>
	  return;
 8001e52:	e02e      	b.n	8001eb2 <return_home+0xe6>
	}
	set_motor(2, 1, 700);
 8001e54:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001e58:	2101      	movs	r1, #1
 8001e5a:	2002      	movs	r0, #2
 8001e5c:	f7ff fcaa 	bl	80017b4 <set_motor>
  }
  if (FLAG_returnFineRev) {
 8001e60:	4b19      	ldr	r3, [pc, #100]	; (8001ec8 <return_home+0xfc>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d024      	beq.n	8001eb2 <return_home+0xe6>
	if (BEGIN_REACH) {
 8001e68:	4b14      	ldr	r3, [pc, #80]	; (8001ebc <return_home+0xf0>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d019      	beq.n	8001ea4 <return_home+0xd8>
	  set_motor(2, 0, 0);
 8001e70:	2200      	movs	r2, #0
 8001e72:	2100      	movs	r1, #0
 8001e74:	2002      	movs	r0, #2
 8001e76:	f7ff fc9d 	bl	80017b4 <set_motor>
	  FLAG_returnHome = false;
 8001e7a:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <return_home+0x100>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	701a      	strb	r2, [r3, #0]
	  FLAG_startPointSet = false;
 8001e80:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <return_home+0x104>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	701a      	strb	r2, [r3, #0]
	  HAL_NVIC_DisableIRQ(TIM4_IRQn);
 8001e86:	201e      	movs	r0, #30
 8001e88:	f000 fca1 	bl	80027ce <HAL_NVIC_DisableIRQ>
	  M2_x = 0;
 8001e8c:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <return_home+0x108>)
 8001e8e:	f04f 0200 	mov.w	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
	  M2_travel = 0;
 8001e94:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <return_home+0x10c>)
 8001e96:	f04f 0200 	mov.w	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
	  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e9c:	201e      	movs	r0, #30
 8001e9e:	f000 fc88 	bl	80027b2 <HAL_NVIC_EnableIRQ>
	  return;
 8001ea2:	e006      	b.n	8001eb2 <return_home+0xe6>
	}
	set_motor(2, -1, 500);
 8001ea4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eac:	2002      	movs	r0, #2
 8001eae:	f7ff fc81 	bl	80017b4 <set_motor>
  }
}
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	200003a0 	.word	0x200003a0
 8001ebc:	20000301 	.word	0x20000301
 8001ec0:	200003a1 	.word	0x200003a1
 8001ec4:	200003a4 	.word	0x200003a4
 8001ec8:	200003b9 	.word	0x200003b9
 8001ecc:	2000036c 	.word	0x2000036c
 8001ed0:	200003ae 	.word	0x200003ae
 8001ed4:	20000394 	.word	0x20000394
 8001ed8:	20000398 	.word	0x20000398
 8001edc:	00000000 	.word	0x00000000

08001ee0 <HAL_TIM_PeriodElapsedCallback>:

s32 delta_E1 = 0, delta_E2 = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001ee0:	b5b0      	push	{r4, r5, r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4) {
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a84      	ldr	r2, [pc, #528]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	f040 80f9 	bne.w	80020e6 <HAL_TIM_PeriodElapsedCallback+0x206>
	tick_count = tick_count + 1;
 8001ef4:	4b83      	ldr	r3, [pc, #524]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	4a82      	ldr	r2, [pc, #520]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001efc:	6013      	str	r3, [r2, #0]
	if (tick_count >= 50) {
 8001efe:	4b81      	ldr	r3, [pc, #516]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2b31      	cmp	r3, #49	; 0x31
 8001f04:	f240 80ef 	bls.w	80020e6 <HAL_TIM_PeriodElapsedCallback+0x206>
	  //50 ms
	  tick_count = 0;
 8001f08:	4b7e      	ldr	r3, [pc, #504]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
	  {
		now_E1 = TIM1->CNT;
 8001f0e:	4b7e      	ldr	r3, [pc, #504]	; (8002108 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f12:	461a      	mov	r2, r3
 8001f14:	4b7d      	ldr	r3, [pc, #500]	; (800210c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001f16:	601a      	str	r2, [r3, #0]
		now_E2 = TIM2->CNT;
 8001f18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1e:	461a      	mov	r2, r3
 8001f20:	4b7b      	ldr	r3, [pc, #492]	; (8002110 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001f22:	601a      	str	r2, [r3, #0]

		s32 delta_E1 = now_E1 - pre_E1;
 8001f24:	4b79      	ldr	r3, [pc, #484]	; (800210c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4b7a      	ldr	r3, [pc, #488]	; (8002114 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	617b      	str	r3, [r7, #20]
		s32 delta_E2 = now_E2 - pre_E2;
 8001f32:	4b77      	ldr	r3, [pc, #476]	; (8002110 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	461a      	mov	r2, r3
 8001f38:	4b77      	ldr	r3, [pc, #476]	; (8002118 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	613b      	str	r3, [r7, #16]

		if (delta_E1 < -3000) // now = 5, pre = 65530
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	4a76      	ldr	r2, [pc, #472]	; (800211c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	da05      	bge.n	8001f54 <HAL_TIM_PeriodElapsedCallback+0x74>
		  delta_E1 = delta_E1 + 0xFFFF;
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001f4e:	33ff      	adds	r3, #255	; 0xff
 8001f50:	617b      	str	r3, [r7, #20]
 8001f52:	e009      	b.n	8001f68 <HAL_TIM_PeriodElapsedCallback+0x88>
		else if (delta_E1 > 3000) // now = 65535, pre = 5
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	dd04      	ble.n	8001f68 <HAL_TIM_PeriodElapsedCallback+0x88>
		  delta_E1 = delta_E1 - 0xFFFF;
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8001f64:	3bff      	subs	r3, #255	; 0xff
 8001f66:	617b      	str	r3, [r7, #20]

		if (delta_E2 < -3000) // now = 5, pre = 65530
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	4a6c      	ldr	r2, [pc, #432]	; (800211c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	da05      	bge.n	8001f7c <HAL_TIM_PeriodElapsedCallback+0x9c>
		  delta_E2 = delta_E2 + 0xFFFF;
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001f76:	33ff      	adds	r3, #255	; 0xff
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	e009      	b.n	8001f90 <HAL_TIM_PeriodElapsedCallback+0xb0>
		else if (delta_E2 > 3000) // now = 65535, pre = 5
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001f82:	4293      	cmp	r3, r2
 8001f84:	dd04      	ble.n	8001f90 <HAL_TIM_PeriodElapsedCallback+0xb0>
		  delta_E2 = delta_E2 - 0xFFFF;
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8001f8c:	3bff      	subs	r3, #255	; 0xff
 8001f8e:	613b      	str	r3, [r7, #16]

		// (ticks/s*60)/(ticks/mRev*mRev/outRev) = outRev/min
		M1_velo = (delta_E1 * 20 * 60.0)
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	4613      	mov	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7fe fa2a 	bl	80003f4 <__aeabi_i2d>
 8001fa0:	f04f 0200 	mov.w	r2, #0
 8001fa4:	4b5e      	ldr	r3, [pc, #376]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001fa6:	f7fe fa8f 	bl	80004c8 <__aeabi_dmul>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	4610      	mov	r0, r2
 8001fb0:	4619      	mov	r1, r3
			/ (1.0 * M1_PulsePerRev * M1_GearRatio);
 8001fb2:	a34f      	add	r3, pc, #316	; (adr r3, 80020f0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb8:	f7fe fbb0 	bl	800071c <__aeabi_ddiv>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	4610      	mov	r0, r2
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	f7fe fcb2 	bl	800092c <__aeabi_d2f>
 8001fc8:	4603      	mov	r3, r0
		M1_velo = (delta_E1 * 20 * 60.0)
 8001fca:	4a56      	ldr	r2, [pc, #344]	; (8002124 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001fcc:	6013      	str	r3, [r2, #0]
		M2_velo = (delta_E2 * 20 * 60.0)
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7fe fa0b 	bl	80003f4 <__aeabi_i2d>
 8001fde:	f04f 0200 	mov.w	r2, #0
 8001fe2:	4b4f      	ldr	r3, [pc, #316]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001fe4:	f7fe fa70 	bl	80004c8 <__aeabi_dmul>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	4610      	mov	r0, r2
 8001fee:	4619      	mov	r1, r3
			/ (1.0 * M2_PulsePerRev * M2_GearRatio);
 8001ff0:	a341      	add	r3, pc, #260	; (adr r3, 80020f8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff6:	f7fe fb91 	bl	800071c <__aeabi_ddiv>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	4610      	mov	r0, r2
 8002000:	4619      	mov	r1, r3
 8002002:	f7fe fc93 	bl	800092c <__aeabi_d2f>
 8002006:	4603      	mov	r3, r0
		M2_velo = (delta_E2 * 20 * 60.0)
 8002008:	4a47      	ldr	r2, [pc, #284]	; (8002128 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800200a:	6013      	str	r3, [r2, #0]

		// pulse/(pulse/rev*rev/Outrev) = OutRev *pitch = mm
		M2_x = M2_x
			- delta_E2 * M2_visme_pitch * 1.0
 800200c:	4b47      	ldr	r3, [pc, #284]	; (800212c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe fa01 	bl	8000418 <__aeabi_f2d>
 8002016:	4604      	mov	r4, r0
 8002018:	460d      	mov	r5, r1
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe f9e8 	bl	80003f4 <__aeabi_i2d>
				/ (1.0 * M2_PulsePerRev * M2_GearRatio);
 8002024:	a334      	add	r3, pc, #208	; (adr r3, 80020f8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202a:	f7fe fb77 	bl	800071c <__aeabi_ddiv>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
			- delta_E2 * M2_visme_pitch * 1.0
 8002032:	4620      	mov	r0, r4
 8002034:	4629      	mov	r1, r5
 8002036:	f7fe f88f 	bl	8000158 <__aeabi_dsub>
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	4610      	mov	r0, r2
 8002040:	4619      	mov	r1, r3
 8002042:	f7fe fc73 	bl	800092c <__aeabi_d2f>
 8002046:	4603      	mov	r3, r0
		M2_x = M2_x
 8002048:	4a38      	ldr	r2, [pc, #224]	; (800212c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800204a:	6013      	str	r3, [r2, #0]

		pre_E1 = now_E1;
 800204c:	4b2f      	ldr	r3, [pc, #188]	; (800210c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	461a      	mov	r2, r3
 8002052:	4b30      	ldr	r3, [pc, #192]	; (8002114 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002054:	601a      	str	r2, [r3, #0]
		pre_E2 = now_E2;
 8002056:	4b2e      	ldr	r3, [pc, #184]	; (8002110 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	461a      	mov	r2, r3
 800205c:	4b2e      	ldr	r3, [pc, #184]	; (8002118 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800205e:	601a      	str	r2, [r3, #0]

		u32 delta_E2_abs = abs(delta_E2);
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	2b00      	cmp	r3, #0
 8002064:	bfb8      	it	lt
 8002066:	425b      	neglt	r3, r3
 8002068:	60fb      	str	r3, [r7, #12]
		M2_travel = M2_travel
			+ (delta_E2_abs * M2_visme_pitch * 1.0)
 800206a:	4b31      	ldr	r3, [pc, #196]	; (8002130 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe f9d2 	bl	8000418 <__aeabi_f2d>
 8002074:	4604      	mov	r4, r0
 8002076:	460d      	mov	r5, r1
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe f9a9 	bl	80003d4 <__aeabi_ui2d>
				/ (1.0 * M2_PulsePerRev * M2_GearRatio);
 8002082:	a31d      	add	r3, pc, #116	; (adr r3, 80020f8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002088:	f7fe fb48 	bl	800071c <__aeabi_ddiv>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
			+ (delta_E2_abs * M2_visme_pitch * 1.0)
 8002090:	4620      	mov	r0, r4
 8002092:	4629      	mov	r1, r5
 8002094:	f7fe f862 	bl	800015c <__adddf3>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4610      	mov	r0, r2
 800209e:	4619      	mov	r1, r3
 80020a0:	f7fe fc44 	bl	800092c <__aeabi_d2f>
 80020a4:	4603      	mov	r3, r0
		M2_travel = M2_travel
 80020a6:	4a22      	ldr	r2, [pc, #136]	; (8002130 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80020a8:	6013      	str	r3, [r2, #0]
		M1_travel = M1_travel
			+ delta_E1 * 1.0 / (1.0 * M1_PulsePerRev * M1_GearRatio);
 80020aa:	4b22      	ldr	r3, [pc, #136]	; (8002134 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe f9b2 	bl	8000418 <__aeabi_f2d>
 80020b4:	4604      	mov	r4, r0
 80020b6:	460d      	mov	r5, r1
 80020b8:	6978      	ldr	r0, [r7, #20]
 80020ba:	f7fe f99b 	bl	80003f4 <__aeabi_i2d>
 80020be:	a30c      	add	r3, pc, #48	; (adr r3, 80020f0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80020c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c4:	f7fe fb2a 	bl	800071c <__aeabi_ddiv>
 80020c8:	4602      	mov	r2, r0
 80020ca:	460b      	mov	r3, r1
 80020cc:	4620      	mov	r0, r4
 80020ce:	4629      	mov	r1, r5
 80020d0:	f7fe f844 	bl	800015c <__adddf3>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	4610      	mov	r0, r2
 80020da:	4619      	mov	r1, r3
 80020dc:	f7fe fc26 	bl	800092c <__aeabi_d2f>
 80020e0:	4603      	mov	r3, r0
		M1_travel = M1_travel
 80020e2:	4a14      	ldr	r2, [pc, #80]	; (8002134 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80020e4:	6013      	str	r3, [r2, #0]
	  }
	}
  }
}
 80020e6:	bf00      	nop
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bdb0      	pop	{r4, r5, r7, pc}
 80020ee:	bf00      	nop
 80020f0:	00000000 	.word	0x00000000
 80020f4:	40a77000 	.word	0x40a77000
 80020f8:	00000000 	.word	0x00000000
 80020fc:	40bce000 	.word	0x40bce000
 8002100:	40000800 	.word	0x40000800
 8002104:	20000378 	.word	0x20000378
 8002108:	40012c00 	.word	0x40012c00
 800210c:	20000384 	.word	0x20000384
 8002110:	20000388 	.word	0x20000388
 8002114:	2000038c 	.word	0x2000038c
 8002118:	20000390 	.word	0x20000390
 800211c:	fffff448 	.word	0xfffff448
 8002120:	404e0000 	.word	0x404e0000
 8002124:	2000037c 	.word	0x2000037c
 8002128:	20000380 	.word	0x20000380
 800212c:	20000394 	.word	0x20000394
 8002130:	20000398 	.word	0x20000398
 8002134:	2000039c 	.word	0x2000039c

08002138 <run_motor>:

void run_motor() {
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0

  if (M1_travel >= M1_toRotate) {
 800213c:	4b38      	ldr	r3, [pc, #224]	; (8002220 <run_motor+0xe8>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f7fe fcfd 	bl	8000b40 <__aeabi_i2f>
 8002146:	4602      	mov	r2, r0
 8002148:	4b36      	ldr	r3, [pc, #216]	; (8002224 <run_motor+0xec>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4619      	mov	r1, r3
 800214e:	4610      	mov	r0, r2
 8002150:	f7fe fda2 	bl	8000c98 <__aeabi_fcmple>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d010      	beq.n	800217c <run_motor+0x44>
	set_motor(2, 0, 0);
 800215a:	2200      	movs	r2, #0
 800215c:	2100      	movs	r1, #0
 800215e:	2002      	movs	r0, #2
 8002160:	f7ff fb28 	bl	80017b4 <set_motor>
	set_motor(1, -2, 0);
 8002164:	2200      	movs	r2, #0
 8002166:	f06f 0101 	mvn.w	r1, #1
 800216a:	2001      	movs	r0, #1
 800216c:	f7ff fb22 	bl	80017b4 <set_motor>
	flash_LED(LED_G, 300);
 8002170:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002174:	2001      	movs	r0, #1
 8002176:	f7ff fded 	bl	8001d54 <flash_LED>
	return;
 800217a:	e050      	b.n	800221e <run_motor+0xe6>
  } else if (M2_dir == 1) {
 800217c:	4b2a      	ldr	r3, [pc, #168]	; (8002228 <run_motor+0xf0>)
 800217e:	f993 3000 	ldrsb.w	r3, [r3]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d109      	bne.n	800219a <run_motor+0x62>
	set_motor(2, M2_dir, 500);
 8002186:	4b28      	ldr	r3, [pc, #160]	; (8002228 <run_motor+0xf0>)
 8002188:	f993 3000 	ldrsb.w	r3, [r3]
 800218c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002190:	4619      	mov	r1, r3
 8002192:	2002      	movs	r0, #2
 8002194:	f7ff fb0e 	bl	80017b4 <set_motor>
 8002198:	e00e      	b.n	80021b8 <run_motor+0x80>
  } else if (M2_dir == -1) {
 800219a:	4b23      	ldr	r3, [pc, #140]	; (8002228 <run_motor+0xf0>)
 800219c:	f993 3000 	ldrsb.w	r3, [r3]
 80021a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a4:	d108      	bne.n	80021b8 <run_motor+0x80>
	set_motor(2, M2_dir, 500);
 80021a6:	4b20      	ldr	r3, [pc, #128]	; (8002228 <run_motor+0xf0>)
 80021a8:	f993 3000 	ldrsb.w	r3, [r3]
 80021ac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80021b0:	4619      	mov	r1, r3
 80021b2:	2002      	movs	r0, #2
 80021b4:	f7ff fafe 	bl	80017b4 <set_motor>
  }
  set_motor(1, -1, 800);
 80021b8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80021bc:	f04f 31ff 	mov.w	r1, #4294967295
 80021c0:	2001      	movs	r0, #1
 80021c2:	f7ff faf7 	bl	80017b4 <set_motor>
  if (M2_dir == 1 && M2_x >= travelLength) {
 80021c6:	4b18      	ldr	r3, [pc, #96]	; (8002228 <run_motor+0xf0>)
 80021c8:	f993 3000 	ldrsb.w	r3, [r3]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d10c      	bne.n	80021ea <run_motor+0xb2>
 80021d0:	4b16      	ldr	r3, [pc, #88]	; (800222c <run_motor+0xf4>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4916      	ldr	r1, [pc, #88]	; (8002230 <run_motor+0xf8>)
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7fe fd68 	bl	8000cac <__aeabi_fcmpge>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <run_motor+0xb2>
	M2_dir = -1;
 80021e2:	4b11      	ldr	r3, [pc, #68]	; (8002228 <run_motor+0xf0>)
 80021e4:	22ff      	movs	r2, #255	; 0xff
 80021e6:	701a      	strb	r2, [r3, #0]
 80021e8:	e019      	b.n	800221e <run_motor+0xe6>
  } else if (M2_dir == -1 && M2_x <= (M2_travel_StartPoint + 5)) {
 80021ea:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <run_motor+0xf0>)
 80021ec:	f993 3000 	ldrsb.w	r3, [r3]
 80021f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f4:	d113      	bne.n	800221e <run_motor+0xe6>
 80021f6:	4b0f      	ldr	r3, [pc, #60]	; (8002234 <run_motor+0xfc>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	490f      	ldr	r1, [pc, #60]	; (8002238 <run_motor+0x100>)
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fe fbeb 	bl	80009d8 <__addsf3>
 8002202:	4603      	mov	r3, r0
 8002204:	461a      	mov	r2, r3
 8002206:	4b09      	ldr	r3, [pc, #36]	; (800222c <run_motor+0xf4>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4619      	mov	r1, r3
 800220c:	4610      	mov	r0, r2
 800220e:	f7fe fd4d 	bl	8000cac <__aeabi_fcmpge>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d002      	beq.n	800221e <run_motor+0xe6>
	M2_dir = 1;
 8002218:	4b03      	ldr	r3, [pc, #12]	; (8002228 <run_motor+0xf0>)
 800221a:	2201      	movs	r2, #1
 800221c:	701a      	strb	r2, [r3, #0]
  }
}
 800221e:	bd80      	pop	{r7, pc}
 8002220:	200003ad 	.word	0x200003ad
 8002224:	2000039c 	.word	0x2000039c
 8002228:	20000374 	.word	0x20000374
 800222c:	20000394 	.word	0x20000394
 8002230:	437a0000 	.word	0x437a0000
 8002234:	200003a8 	.word	0x200003a8
 8002238:	40a00000 	.word	0x40a00000

0800223c <apply_state>:

bool FLAG_notHome = false;

void apply_state() {
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  check_button();
 8002240:	f7ff fd3a 	bl	8001cb8 <check_button>
  if (IDLE_MODE) {
 8002244:	4b7b      	ldr	r3, [pc, #492]	; (8002434 <apply_state+0x1f8>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d024      	beq.n	8002296 <apply_state+0x5a>
	if (BTN_Stop_state == BTN_RESET) {
 800224c:	4b7a      	ldr	r3, [pc, #488]	; (8002438 <apply_state+0x1fc>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d107      	bne.n	8002264 <apply_state+0x28>
	  FLAG_returnHome = false;
 8002254:	4b79      	ldr	r3, [pc, #484]	; (800243c <apply_state+0x200>)
 8002256:	2200      	movs	r2, #0
 8002258:	701a      	strb	r2, [r3, #0]
	  set_motor(2, 0, 0);
 800225a:	2200      	movs	r2, #0
 800225c:	2100      	movs	r1, #0
 800225e:	2002      	movs	r0, #2
 8002260:	f7ff faa8 	bl	80017b4 <set_motor>
	}
	if (BTN_Start_state == BTN_RESET && BEGIN_REACH == false) {
 8002264:	4b76      	ldr	r3, [pc, #472]	; (8002440 <apply_state+0x204>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10c      	bne.n	8002286 <apply_state+0x4a>
 800226c:	4b75      	ldr	r3, [pc, #468]	; (8002444 <apply_state+0x208>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	f083 0301 	eor.w	r3, r3, #1
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d005      	beq.n	8002286 <apply_state+0x4a>
	  FLAG_returnHome = true;
 800227a:	4b70      	ldr	r3, [pc, #448]	; (800243c <apply_state+0x200>)
 800227c:	2201      	movs	r2, #1
 800227e:	701a      	strb	r2, [r3, #0]
	  FLAG_returnFast = true;
 8002280:	4b71      	ldr	r3, [pc, #452]	; (8002448 <apply_state+0x20c>)
 8002282:	2201      	movs	r2, #1
 8002284:	701a      	strb	r2, [r3, #0]
	}

	if (FLAG_returnHome) {
 8002286:	4b6d      	ldr	r3, [pc, #436]	; (800243c <apply_state+0x200>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 80d1 	beq.w	8002432 <apply_state+0x1f6>
	  return_home();
 8002290:	f7ff fd9c 	bl	8001dcc <return_home>
 8002294:	e0cd      	b.n	8002432 <apply_state+0x1f6>
	}
  } else if (RUN_MODE) {
 8002296:	4b6d      	ldr	r3, [pc, #436]	; (800244c <apply_state+0x210>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	f000 80c9 	beq.w	8002432 <apply_state+0x1f6>
	FLAG_returnHome = false;
 80022a0:	4b66      	ldr	r3, [pc, #408]	; (800243c <apply_state+0x200>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	701a      	strb	r2, [r3, #0]
	if (level != 0 && FLAG_runMotor == true) {
 80022a6:	4b6a      	ldr	r3, [pc, #424]	; (8002450 <apply_state+0x214>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00a      	beq.n	80022c4 <apply_state+0x88>
 80022ae:	4b69      	ldr	r3, [pc, #420]	; (8002454 <apply_state+0x218>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d006      	beq.n	80022c4 <apply_state+0x88>
	  run_motor();
 80022b6:	f7ff ff3f 	bl	8002138 <run_motor>
	  lightLED(0, 1);
 80022ba:	2101      	movs	r1, #1
 80022bc:	2000      	movs	r0, #0
 80022be:	f7ff fb4d 	bl	800195c <lightLED>
 80022c2:	e00e      	b.n	80022e2 <apply_state+0xa6>
	} else if (level != 0 && !FLAG_runMotor)
 80022c4:	4b62      	ldr	r3, [pc, #392]	; (8002450 <apply_state+0x214>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00a      	beq.n	80022e2 <apply_state+0xa6>
 80022cc:	4b61      	ldr	r3, [pc, #388]	; (8002454 <apply_state+0x218>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	f083 0301 	eor.w	r3, r3, #1
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <apply_state+0xa6>
	  stop_motor(1, 1);
 80022da:	2101      	movs	r1, #1
 80022dc:	2001      	movs	r0, #1
 80022de:	f7ff fc99 	bl	8001c14 <stop_motor>
	if (BTN_Stop_state == BTN_RESET) {
 80022e2:	4b55      	ldr	r3, [pc, #340]	; (8002438 <apply_state+0x1fc>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d106      	bne.n	80022f8 <apply_state+0xbc>
	  FLAG_runMotor = false;
 80022ea:	4b5a      	ldr	r3, [pc, #360]	; (8002454 <apply_state+0x218>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	701a      	strb	r2, [r3, #0]
	  stop_motor(1, 1);
 80022f0:	2101      	movs	r1, #1
 80022f2:	2001      	movs	r0, #1
 80022f4:	f7ff fc8e 	bl	8001c14 <stop_motor>
	}

	if (!FLAG_notHome) {
 80022f8:	4b57      	ldr	r3, [pc, #348]	; (8002458 <apply_state+0x21c>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	f083 0301 	eor.w	r3, r3, #1
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d031      	beq.n	800236a <apply_state+0x12e>
	  if (level == 1) {
 8002306:	4b52      	ldr	r3, [pc, #328]	; (8002450 <apply_state+0x214>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d106      	bne.n	800231c <apply_state+0xe0>
		distanceToGo = 2000;
 800230e:	4b53      	ldr	r3, [pc, #332]	; (800245c <apply_state+0x220>)
 8002310:	4a53      	ldr	r2, [pc, #332]	; (8002460 <apply_state+0x224>)
 8002312:	601a      	str	r2, [r3, #0]
		M1_toRotate = 40;
 8002314:	4b53      	ldr	r3, [pc, #332]	; (8002464 <apply_state+0x228>)
 8002316:	2228      	movs	r2, #40	; 0x28
 8002318:	701a      	strb	r2, [r3, #0]
 800231a:	e009      	b.n	8002330 <apply_state+0xf4>
	  } else if (level == 2) {
 800231c:	4b4c      	ldr	r3, [pc, #304]	; (8002450 <apply_state+0x214>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b02      	cmp	r3, #2
 8002322:	d105      	bne.n	8002330 <apply_state+0xf4>
		distanceToGo = 4000;
 8002324:	4b4d      	ldr	r3, [pc, #308]	; (800245c <apply_state+0x220>)
 8002326:	4a50      	ldr	r2, [pc, #320]	; (8002468 <apply_state+0x22c>)
 8002328:	601a      	str	r2, [r3, #0]
		M1_toRotate = 80;
 800232a:	4b4e      	ldr	r3, [pc, #312]	; (8002464 <apply_state+0x228>)
 800232c:	2250      	movs	r2, #80	; 0x50
 800232e:	701a      	strb	r2, [r3, #0]
	  }
	  if (BTN_Stop_state == BTN_RESET) {
 8002330:	4b41      	ldr	r3, [pc, #260]	; (8002438 <apply_state+0x1fc>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d107      	bne.n	8002348 <apply_state+0x10c>
		FLAG_runMotor = false;
 8002338:	4b46      	ldr	r3, [pc, #280]	; (8002454 <apply_state+0x218>)
 800233a:	2200      	movs	r2, #0
 800233c:	701a      	strb	r2, [r3, #0]
		stop_motor(1, 1);
 800233e:	2101      	movs	r1, #1
 8002340:	2001      	movs	r0, #1
 8002342:	f7ff fc67 	bl	8001c14 <stop_motor>
 8002346:	e010      	b.n	800236a <apply_state+0x12e>
	  } else if (BTN_Start_state == BTN_RESET && !FLAG_runMotor) {
 8002348:	4b3d      	ldr	r3, [pc, #244]	; (8002440 <apply_state+0x204>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10c      	bne.n	800236a <apply_state+0x12e>
 8002350:	4b40      	ldr	r3, [pc, #256]	; (8002454 <apply_state+0x218>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	f083 0301 	eor.w	r3, r3, #1
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d005      	beq.n	800236a <apply_state+0x12e>
		FLAG_runMotor = true;
 800235e:	4b3d      	ldr	r3, [pc, #244]	; (8002454 <apply_state+0x218>)
 8002360:	2201      	movs	r2, #1
 8002362:	701a      	strb	r2, [r3, #0]
		M2_dir = 1;
 8002364:	4b41      	ldr	r3, [pc, #260]	; (800246c <apply_state+0x230>)
 8002366:	2201      	movs	r2, #1
 8002368:	701a      	strb	r2, [r3, #0]
	  }
	}

	switch (level) {
 800236a:	4b39      	ldr	r3, [pc, #228]	; (8002450 <apply_state+0x214>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d005      	beq.n	800237e <apply_state+0x142>
 8002372:	2b00      	cmp	r3, #0
 8002374:	db5d      	blt.n	8002432 <apply_state+0x1f6>
 8002376:	3b01      	subs	r3, #1
 8002378:	2b01      	cmp	r3, #1
 800237a:	d85a      	bhi.n	8002432 <apply_state+0x1f6>
 800237c:	e02f      	b.n	80023de <apply_state+0x1a2>
	case 0:
	  lightLED(0, 1);
 800237e:	2101      	movs	r1, #1
 8002380:	2000      	movs	r0, #0
 8002382:	f7ff faeb 	bl	800195c <lightLED>
	  if (BTN_Start_state == BTN_RESET && END_REACH == false) {
 8002386:	4b2e      	ldr	r3, [pc, #184]	; (8002440 <apply_state+0x204>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10d      	bne.n	80023aa <apply_state+0x16e>
 800238e:	4b38      	ldr	r3, [pc, #224]	; (8002470 <apply_state+0x234>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	f083 0301 	eor.w	r3, r3, #1
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	d006      	beq.n	80023aa <apply_state+0x16e>
		set_motor(2, 1, 500);
 800239c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80023a0:	2101      	movs	r1, #1
 80023a2:	2002      	movs	r0, #2
 80023a4:	f7ff fa06 	bl	80017b4 <set_motor>
 80023a8:	e018      	b.n	80023dc <apply_state+0x1a0>
	  } else if (BTN_Stop_state == BTN_RESET && BEGIN_REACH == false) {
 80023aa:	4b23      	ldr	r3, [pc, #140]	; (8002438 <apply_state+0x1fc>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10e      	bne.n	80023d0 <apply_state+0x194>
 80023b2:	4b24      	ldr	r3, [pc, #144]	; (8002444 <apply_state+0x208>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	f083 0301 	eor.w	r3, r3, #1
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d007      	beq.n	80023d0 <apply_state+0x194>
		set_motor(2, -1, 500);
 80023c0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80023c4:	f04f 31ff 	mov.w	r1, #4294967295
 80023c8:	2002      	movs	r0, #2
 80023ca:	f7ff f9f3 	bl	80017b4 <set_motor>
 80023ce:	e005      	b.n	80023dc <apply_state+0x1a0>
	  } else {
		set_motor(2, 0, 0);
 80023d0:	2200      	movs	r2, #0
 80023d2:	2100      	movs	r1, #0
 80023d4:	2002      	movs	r0, #2
 80023d6:	f7ff f9ed 	bl	80017b4 <set_motor>
	  }
	  return;
 80023da:	e02a      	b.n	8002432 <apply_state+0x1f6>
 80023dc:	e029      	b.n	8002432 <apply_state+0x1f6>
	  break;
	case 1:
	case 2:
	  if (!BEGIN_REACH && !FLAG_runMotor) {
 80023de:	4b19      	ldr	r3, [pc, #100]	; (8002444 <apply_state+0x208>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	f083 0301 	eor.w	r3, r3, #1
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00f      	beq.n	800240c <apply_state+0x1d0>
 80023ec:	4b19      	ldr	r3, [pc, #100]	; (8002454 <apply_state+0x218>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	f083 0301 	eor.w	r3, r3, #1
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d008      	beq.n	800240c <apply_state+0x1d0>
		flash_LED(LED_G, 500);
 80023fa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80023fe:	2001      	movs	r0, #1
 8002400:	f7ff fca8 	bl	8001d54 <flash_LED>
		FLAG_notHome = true;
 8002404:	4b14      	ldr	r3, [pc, #80]	; (8002458 <apply_state+0x21c>)
 8002406:	2201      	movs	r2, #1
 8002408:	701a      	strb	r2, [r3, #0]
		return;
 800240a:	e012      	b.n	8002432 <apply_state+0x1f6>
	  } else if (BEGIN_REACH && !FLAG_runMotor) {
 800240c:	4b0d      	ldr	r3, [pc, #52]	; (8002444 <apply_state+0x208>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00d      	beq.n	8002430 <apply_state+0x1f4>
 8002414:	4b0f      	ldr	r3, [pc, #60]	; (8002454 <apply_state+0x218>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	f083 0301 	eor.w	r3, r3, #1
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d006      	beq.n	8002430 <apply_state+0x1f4>
		FLAG_notHome = false;
 8002422:	4b0d      	ldr	r3, [pc, #52]	; (8002458 <apply_state+0x21c>)
 8002424:	2200      	movs	r2, #0
 8002426:	701a      	strb	r2, [r3, #0]
		lightLED(0, 1);
 8002428:	2101      	movs	r1, #1
 800242a:	2000      	movs	r0, #0
 800242c:	f7ff fa96 	bl	800195c <lightLED>
	  }
	  break;
 8002430:	bf00      	nop
	}
  }
}
 8002432:	bd80      	pop	{r7, pc}
 8002434:	2000036a 	.word	0x2000036a
 8002438:	20000005 	.word	0x20000005
 800243c:	2000036c 	.word	0x2000036c
 8002440:	20000004 	.word	0x20000004
 8002444:	20000301 	.word	0x20000301
 8002448:	200003a0 	.word	0x200003a0
 800244c:	20000369 	.word	0x20000369
 8002450:	2000036b 	.word	0x2000036b
 8002454:	200003ac 	.word	0x200003ac
 8002458:	200003ba 	.word	0x200003ba
 800245c:	20000370 	.word	0x20000370
 8002460:	44fa0000 	.word	0x44fa0000
 8002464:	200003ad 	.word	0x200003ad
 8002468:	457a0000 	.word	0x457a0000
 800246c:	20000374 	.word	0x20000374
 8002470:	20000300 	.word	0x20000300

08002474 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002474:	480c      	ldr	r0, [pc, #48]	; (80024a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002476:	490d      	ldr	r1, [pc, #52]	; (80024ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002478:	4a0d      	ldr	r2, [pc, #52]	; (80024b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800247a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800247c:	e002      	b.n	8002484 <LoopCopyDataInit>

0800247e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800247e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002482:	3304      	adds	r3, #4

08002484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002488:	d3f9      	bcc.n	800247e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800248a:	4a0a      	ldr	r2, [pc, #40]	; (80024b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800248c:	4c0a      	ldr	r4, [pc, #40]	; (80024b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800248e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002490:	e001      	b.n	8002496 <LoopFillZerobss>

08002492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002494:	3204      	adds	r2, #4

08002496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002498:	d3fb      	bcc.n	8002492 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800249a:	f7ff f951 	bl	8001740 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800249e:	f008 fa63 	bl	800a968 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024a2:	f7fe fc95 	bl	8000dd0 <main>
  bx lr
 80024a6:	4770      	bx	lr
  ldr r0, =_sdata
 80024a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024ac:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 80024b0:	0800aa50 	.word	0x0800aa50
  ldr r2, =_sbss
 80024b4:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 80024b8:	20000e1c 	.word	0x20000e1c

080024bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024bc:	e7fe      	b.n	80024bc <ADC1_2_IRQHandler>
	...

080024c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024c4:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <HAL_Init+0x28>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a07      	ldr	r2, [pc, #28]	; (80024e8 <HAL_Init+0x28>)
 80024ca:	f043 0310 	orr.w	r3, r3, #16
 80024ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024d0:	2003      	movs	r0, #3
 80024d2:	f000 f947 	bl	8002764 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024d6:	200f      	movs	r0, #15
 80024d8:	f000 f808 	bl	80024ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024dc:	f7fe ff6e 	bl	80013bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40022000 	.word	0x40022000

080024ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024f4:	4b12      	ldr	r3, [pc, #72]	; (8002540 <HAL_InitTick+0x54>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	4b12      	ldr	r3, [pc, #72]	; (8002544 <HAL_InitTick+0x58>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	4619      	mov	r1, r3
 80024fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002502:	fbb3 f3f1 	udiv	r3, r3, r1
 8002506:	fbb2 f3f3 	udiv	r3, r2, r3
 800250a:	4618      	mov	r0, r3
 800250c:	f000 f96d 	bl	80027ea <HAL_SYSTICK_Config>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e00e      	b.n	8002538 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b0f      	cmp	r3, #15
 800251e:	d80a      	bhi.n	8002536 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002520:	2200      	movs	r2, #0
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	f04f 30ff 	mov.w	r0, #4294967295
 8002528:	f000 f927 	bl	800277a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800252c:	4a06      	ldr	r2, [pc, #24]	; (8002548 <HAL_InitTick+0x5c>)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002532:	2300      	movs	r3, #0
 8002534:	e000      	b.n	8002538 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
}
 8002538:	4618      	mov	r0, r3
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	20000000 	.word	0x20000000
 8002544:	2000000c 	.word	0x2000000c
 8002548:	20000008 	.word	0x20000008

0800254c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002550:	4b05      	ldr	r3, [pc, #20]	; (8002568 <HAL_IncTick+0x1c>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	461a      	mov	r2, r3
 8002556:	4b05      	ldr	r3, [pc, #20]	; (800256c <HAL_IncTick+0x20>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4413      	add	r3, r2
 800255c:	4a03      	ldr	r2, [pc, #12]	; (800256c <HAL_IncTick+0x20>)
 800255e:	6013      	str	r3, [r2, #0]
}
 8002560:	bf00      	nop
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr
 8002568:	2000000c 	.word	0x2000000c
 800256c:	200003c4 	.word	0x200003c4

08002570 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  return uwTick;
 8002574:	4b02      	ldr	r3, [pc, #8]	; (8002580 <HAL_GetTick+0x10>)
 8002576:	681b      	ldr	r3, [r3, #0]
}
 8002578:	4618      	mov	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr
 8002580:	200003c4 	.word	0x200003c4

08002584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002594:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025a0:	4013      	ands	r3, r2
 80025a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025b6:	4a04      	ldr	r2, [pc, #16]	; (80025c8 <__NVIC_SetPriorityGrouping+0x44>)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	60d3      	str	r3, [r2, #12]
}
 80025bc:	bf00      	nop
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bc80      	pop	{r7}
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	e000ed00 	.word	0xe000ed00

080025cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025d0:	4b04      	ldr	r3, [pc, #16]	; (80025e4 <__NVIC_GetPriorityGrouping+0x18>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	0a1b      	lsrs	r3, r3, #8
 80025d6:	f003 0307 	and.w	r3, r3, #7
}
 80025da:	4618      	mov	r0, r3
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	e000ed00 	.word	0xe000ed00

080025e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	db0b      	blt.n	8002612 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025fa:	79fb      	ldrb	r3, [r7, #7]
 80025fc:	f003 021f 	and.w	r2, r3, #31
 8002600:	4906      	ldr	r1, [pc, #24]	; (800261c <__NVIC_EnableIRQ+0x34>)
 8002602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002606:	095b      	lsrs	r3, r3, #5
 8002608:	2001      	movs	r0, #1
 800260a:	fa00 f202 	lsl.w	r2, r0, r2
 800260e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr
 800261c:	e000e100 	.word	0xe000e100

08002620 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800262a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262e:	2b00      	cmp	r3, #0
 8002630:	db12      	blt.n	8002658 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002632:	79fb      	ldrb	r3, [r7, #7]
 8002634:	f003 021f 	and.w	r2, r3, #31
 8002638:	490a      	ldr	r1, [pc, #40]	; (8002664 <__NVIC_DisableIRQ+0x44>)
 800263a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263e:	095b      	lsrs	r3, r3, #5
 8002640:	2001      	movs	r0, #1
 8002642:	fa00 f202 	lsl.w	r2, r0, r2
 8002646:	3320      	adds	r3, #32
 8002648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800264c:	f3bf 8f4f 	dsb	sy
}
 8002650:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002652:	f3bf 8f6f 	isb	sy
}
 8002656:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	bc80      	pop	{r7}
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	e000e100 	.word	0xe000e100

08002668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	6039      	str	r1, [r7, #0]
 8002672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002678:	2b00      	cmp	r3, #0
 800267a:	db0a      	blt.n	8002692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	b2da      	uxtb	r2, r3
 8002680:	490c      	ldr	r1, [pc, #48]	; (80026b4 <__NVIC_SetPriority+0x4c>)
 8002682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002686:	0112      	lsls	r2, r2, #4
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	440b      	add	r3, r1
 800268c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002690:	e00a      	b.n	80026a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	b2da      	uxtb	r2, r3
 8002696:	4908      	ldr	r1, [pc, #32]	; (80026b8 <__NVIC_SetPriority+0x50>)
 8002698:	79fb      	ldrb	r3, [r7, #7]
 800269a:	f003 030f 	and.w	r3, r3, #15
 800269e:	3b04      	subs	r3, #4
 80026a0:	0112      	lsls	r2, r2, #4
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	440b      	add	r3, r1
 80026a6:	761a      	strb	r2, [r3, #24]
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bc80      	pop	{r7}
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	e000e100 	.word	0xe000e100
 80026b8:	e000ed00 	.word	0xe000ed00

080026bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026bc:	b480      	push	{r7}
 80026be:	b089      	sub	sp, #36	; 0x24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	f1c3 0307 	rsb	r3, r3, #7
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	bf28      	it	cs
 80026da:	2304      	movcs	r3, #4
 80026dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	3304      	adds	r3, #4
 80026e2:	2b06      	cmp	r3, #6
 80026e4:	d902      	bls.n	80026ec <NVIC_EncodePriority+0x30>
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	3b03      	subs	r3, #3
 80026ea:	e000      	b.n	80026ee <NVIC_EncodePriority+0x32>
 80026ec:	2300      	movs	r3, #0
 80026ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f0:	f04f 32ff 	mov.w	r2, #4294967295
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43da      	mvns	r2, r3
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	401a      	ands	r2, r3
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002704:	f04f 31ff 	mov.w	r1, #4294967295
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	fa01 f303 	lsl.w	r3, r1, r3
 800270e:	43d9      	mvns	r1, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002714:	4313      	orrs	r3, r2
         );
}
 8002716:	4618      	mov	r0, r3
 8002718:	3724      	adds	r7, #36	; 0x24
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr

08002720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3b01      	subs	r3, #1
 800272c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002730:	d301      	bcc.n	8002736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002732:	2301      	movs	r3, #1
 8002734:	e00f      	b.n	8002756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002736:	4a0a      	ldr	r2, [pc, #40]	; (8002760 <SysTick_Config+0x40>)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3b01      	subs	r3, #1
 800273c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800273e:	210f      	movs	r1, #15
 8002740:	f04f 30ff 	mov.w	r0, #4294967295
 8002744:	f7ff ff90 	bl	8002668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002748:	4b05      	ldr	r3, [pc, #20]	; (8002760 <SysTick_Config+0x40>)
 800274a:	2200      	movs	r2, #0
 800274c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800274e:	4b04      	ldr	r3, [pc, #16]	; (8002760 <SysTick_Config+0x40>)
 8002750:	2207      	movs	r2, #7
 8002752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	e000e010 	.word	0xe000e010

08002764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f7ff ff09 	bl	8002584 <__NVIC_SetPriorityGrouping>
}
 8002772:	bf00      	nop
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800277a:	b580      	push	{r7, lr}
 800277c:	b086      	sub	sp, #24
 800277e:	af00      	add	r7, sp, #0
 8002780:	4603      	mov	r3, r0
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	607a      	str	r2, [r7, #4]
 8002786:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800278c:	f7ff ff1e 	bl	80025cc <__NVIC_GetPriorityGrouping>
 8002790:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	68b9      	ldr	r1, [r7, #8]
 8002796:	6978      	ldr	r0, [r7, #20]
 8002798:	f7ff ff90 	bl	80026bc <NVIC_EncodePriority>
 800279c:	4602      	mov	r2, r0
 800279e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a2:	4611      	mov	r1, r2
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff ff5f 	bl	8002668 <__NVIC_SetPriority>
}
 80027aa:	bf00      	nop
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	4603      	mov	r3, r0
 80027ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff ff11 	bl	80025e8 <__NVIC_EnableIRQ>
}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	4603      	mov	r3, r0
 80027d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80027d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff ff1f 	bl	8002620 <__NVIC_DisableIRQ>
}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b082      	sub	sp, #8
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7ff ff94 	bl	8002720 <SysTick_Config>
 80027f8:	4603      	mov	r3, r0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002804:	b480      	push	{r7}
 8002806:	b08b      	sub	sp, #44	; 0x2c
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800280e:	2300      	movs	r3, #0
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002812:	2300      	movs	r3, #0
 8002814:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002816:	e169      	b.n	8002aec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002818:	2201      	movs	r2, #1
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	69fa      	ldr	r2, [r7, #28]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	429a      	cmp	r2, r3
 8002832:	f040 8158 	bne.w	8002ae6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	4a9a      	ldr	r2, [pc, #616]	; (8002aa4 <HAL_GPIO_Init+0x2a0>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d05e      	beq.n	80028fe <HAL_GPIO_Init+0xfa>
 8002840:	4a98      	ldr	r2, [pc, #608]	; (8002aa4 <HAL_GPIO_Init+0x2a0>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d875      	bhi.n	8002932 <HAL_GPIO_Init+0x12e>
 8002846:	4a98      	ldr	r2, [pc, #608]	; (8002aa8 <HAL_GPIO_Init+0x2a4>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d058      	beq.n	80028fe <HAL_GPIO_Init+0xfa>
 800284c:	4a96      	ldr	r2, [pc, #600]	; (8002aa8 <HAL_GPIO_Init+0x2a4>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d86f      	bhi.n	8002932 <HAL_GPIO_Init+0x12e>
 8002852:	4a96      	ldr	r2, [pc, #600]	; (8002aac <HAL_GPIO_Init+0x2a8>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d052      	beq.n	80028fe <HAL_GPIO_Init+0xfa>
 8002858:	4a94      	ldr	r2, [pc, #592]	; (8002aac <HAL_GPIO_Init+0x2a8>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d869      	bhi.n	8002932 <HAL_GPIO_Init+0x12e>
 800285e:	4a94      	ldr	r2, [pc, #592]	; (8002ab0 <HAL_GPIO_Init+0x2ac>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d04c      	beq.n	80028fe <HAL_GPIO_Init+0xfa>
 8002864:	4a92      	ldr	r2, [pc, #584]	; (8002ab0 <HAL_GPIO_Init+0x2ac>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d863      	bhi.n	8002932 <HAL_GPIO_Init+0x12e>
 800286a:	4a92      	ldr	r2, [pc, #584]	; (8002ab4 <HAL_GPIO_Init+0x2b0>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d046      	beq.n	80028fe <HAL_GPIO_Init+0xfa>
 8002870:	4a90      	ldr	r2, [pc, #576]	; (8002ab4 <HAL_GPIO_Init+0x2b0>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d85d      	bhi.n	8002932 <HAL_GPIO_Init+0x12e>
 8002876:	2b12      	cmp	r3, #18
 8002878:	d82a      	bhi.n	80028d0 <HAL_GPIO_Init+0xcc>
 800287a:	2b12      	cmp	r3, #18
 800287c:	d859      	bhi.n	8002932 <HAL_GPIO_Init+0x12e>
 800287e:	a201      	add	r2, pc, #4	; (adr r2, 8002884 <HAL_GPIO_Init+0x80>)
 8002880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002884:	080028ff 	.word	0x080028ff
 8002888:	080028d9 	.word	0x080028d9
 800288c:	080028eb 	.word	0x080028eb
 8002890:	0800292d 	.word	0x0800292d
 8002894:	08002933 	.word	0x08002933
 8002898:	08002933 	.word	0x08002933
 800289c:	08002933 	.word	0x08002933
 80028a0:	08002933 	.word	0x08002933
 80028a4:	08002933 	.word	0x08002933
 80028a8:	08002933 	.word	0x08002933
 80028ac:	08002933 	.word	0x08002933
 80028b0:	08002933 	.word	0x08002933
 80028b4:	08002933 	.word	0x08002933
 80028b8:	08002933 	.word	0x08002933
 80028bc:	08002933 	.word	0x08002933
 80028c0:	08002933 	.word	0x08002933
 80028c4:	08002933 	.word	0x08002933
 80028c8:	080028e1 	.word	0x080028e1
 80028cc:	080028f5 	.word	0x080028f5
 80028d0:	4a79      	ldr	r2, [pc, #484]	; (8002ab8 <HAL_GPIO_Init+0x2b4>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d013      	beq.n	80028fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028d6:	e02c      	b.n	8002932 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	623b      	str	r3, [r7, #32]
          break;
 80028de:	e029      	b.n	8002934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	3304      	adds	r3, #4
 80028e6:	623b      	str	r3, [r7, #32]
          break;
 80028e8:	e024      	b.n	8002934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	3308      	adds	r3, #8
 80028f0:	623b      	str	r3, [r7, #32]
          break;
 80028f2:	e01f      	b.n	8002934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	330c      	adds	r3, #12
 80028fa:	623b      	str	r3, [r7, #32]
          break;
 80028fc:	e01a      	b.n	8002934 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d102      	bne.n	800290c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002906:	2304      	movs	r3, #4
 8002908:	623b      	str	r3, [r7, #32]
          break;
 800290a:	e013      	b.n	8002934 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d105      	bne.n	8002920 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002914:	2308      	movs	r3, #8
 8002916:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	69fa      	ldr	r2, [r7, #28]
 800291c:	611a      	str	r2, [r3, #16]
          break;
 800291e:	e009      	b.n	8002934 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002920:	2308      	movs	r3, #8
 8002922:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69fa      	ldr	r2, [r7, #28]
 8002928:	615a      	str	r2, [r3, #20]
          break;
 800292a:	e003      	b.n	8002934 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800292c:	2300      	movs	r3, #0
 800292e:	623b      	str	r3, [r7, #32]
          break;
 8002930:	e000      	b.n	8002934 <HAL_GPIO_Init+0x130>
          break;
 8002932:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	2bff      	cmp	r3, #255	; 0xff
 8002938:	d801      	bhi.n	800293e <HAL_GPIO_Init+0x13a>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	e001      	b.n	8002942 <HAL_GPIO_Init+0x13e>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3304      	adds	r3, #4
 8002942:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	2bff      	cmp	r3, #255	; 0xff
 8002948:	d802      	bhi.n	8002950 <HAL_GPIO_Init+0x14c>
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	e002      	b.n	8002956 <HAL_GPIO_Init+0x152>
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	3b08      	subs	r3, #8
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	210f      	movs	r1, #15
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	fa01 f303 	lsl.w	r3, r1, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	401a      	ands	r2, r3
 8002968:	6a39      	ldr	r1, [r7, #32]
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	fa01 f303 	lsl.w	r3, r1, r3
 8002970:	431a      	orrs	r2, r3
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 80b1 	beq.w	8002ae6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002984:	4b4d      	ldr	r3, [pc, #308]	; (8002abc <HAL_GPIO_Init+0x2b8>)
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	4a4c      	ldr	r2, [pc, #304]	; (8002abc <HAL_GPIO_Init+0x2b8>)
 800298a:	f043 0301 	orr.w	r3, r3, #1
 800298e:	6193      	str	r3, [r2, #24]
 8002990:	4b4a      	ldr	r3, [pc, #296]	; (8002abc <HAL_GPIO_Init+0x2b8>)
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	60bb      	str	r3, [r7, #8]
 800299a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800299c:	4a48      	ldr	r2, [pc, #288]	; (8002ac0 <HAL_GPIO_Init+0x2bc>)
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	089b      	lsrs	r3, r3, #2
 80029a2:	3302      	adds	r3, #2
 80029a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	f003 0303 	and.w	r3, r3, #3
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	220f      	movs	r2, #15
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	43db      	mvns	r3, r3
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	4013      	ands	r3, r2
 80029be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a40      	ldr	r2, [pc, #256]	; (8002ac4 <HAL_GPIO_Init+0x2c0>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d013      	beq.n	80029f0 <HAL_GPIO_Init+0x1ec>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a3f      	ldr	r2, [pc, #252]	; (8002ac8 <HAL_GPIO_Init+0x2c4>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d00d      	beq.n	80029ec <HAL_GPIO_Init+0x1e8>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a3e      	ldr	r2, [pc, #248]	; (8002acc <HAL_GPIO_Init+0x2c8>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d007      	beq.n	80029e8 <HAL_GPIO_Init+0x1e4>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a3d      	ldr	r2, [pc, #244]	; (8002ad0 <HAL_GPIO_Init+0x2cc>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d101      	bne.n	80029e4 <HAL_GPIO_Init+0x1e0>
 80029e0:	2303      	movs	r3, #3
 80029e2:	e006      	b.n	80029f2 <HAL_GPIO_Init+0x1ee>
 80029e4:	2304      	movs	r3, #4
 80029e6:	e004      	b.n	80029f2 <HAL_GPIO_Init+0x1ee>
 80029e8:	2302      	movs	r3, #2
 80029ea:	e002      	b.n	80029f2 <HAL_GPIO_Init+0x1ee>
 80029ec:	2301      	movs	r3, #1
 80029ee:	e000      	b.n	80029f2 <HAL_GPIO_Init+0x1ee>
 80029f0:	2300      	movs	r3, #0
 80029f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f4:	f002 0203 	and.w	r2, r2, #3
 80029f8:	0092      	lsls	r2, r2, #2
 80029fa:	4093      	lsls	r3, r2
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a02:	492f      	ldr	r1, [pc, #188]	; (8002ac0 <HAL_GPIO_Init+0x2bc>)
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	089b      	lsrs	r3, r3, #2
 8002a08:	3302      	adds	r3, #2
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d006      	beq.n	8002a2a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a1c:	4b2d      	ldr	r3, [pc, #180]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	492c      	ldr	r1, [pc, #176]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	600b      	str	r3, [r1, #0]
 8002a28:	e006      	b.n	8002a38 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a2a:	4b2a      	ldr	r3, [pc, #168]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	43db      	mvns	r3, r3
 8002a32:	4928      	ldr	r1, [pc, #160]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d006      	beq.n	8002a52 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a44:	4b23      	ldr	r3, [pc, #140]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	4922      	ldr	r1, [pc, #136]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	604b      	str	r3, [r1, #4]
 8002a50:	e006      	b.n	8002a60 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a52:	4b20      	ldr	r3, [pc, #128]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	491e      	ldr	r1, [pc, #120]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d006      	beq.n	8002a7a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a6c:	4b19      	ldr	r3, [pc, #100]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	4918      	ldr	r1, [pc, #96]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	608b      	str	r3, [r1, #8]
 8002a78:	e006      	b.n	8002a88 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a7a:	4b16      	ldr	r3, [pc, #88]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a7c:	689a      	ldr	r2, [r3, #8]
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	43db      	mvns	r3, r3
 8002a82:	4914      	ldr	r1, [pc, #80]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a84:	4013      	ands	r3, r2
 8002a86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d021      	beq.n	8002ad8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a94:	4b0f      	ldr	r3, [pc, #60]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a96:	68da      	ldr	r2, [r3, #12]
 8002a98:	490e      	ldr	r1, [pc, #56]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	60cb      	str	r3, [r1, #12]
 8002aa0:	e021      	b.n	8002ae6 <HAL_GPIO_Init+0x2e2>
 8002aa2:	bf00      	nop
 8002aa4:	10320000 	.word	0x10320000
 8002aa8:	10310000 	.word	0x10310000
 8002aac:	10220000 	.word	0x10220000
 8002ab0:	10210000 	.word	0x10210000
 8002ab4:	10120000 	.word	0x10120000
 8002ab8:	10110000 	.word	0x10110000
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	40010000 	.word	0x40010000
 8002ac4:	40010800 	.word	0x40010800
 8002ac8:	40010c00 	.word	0x40010c00
 8002acc:	40011000 	.word	0x40011000
 8002ad0:	40011400 	.word	0x40011400
 8002ad4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ad8:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <HAL_GPIO_Init+0x304>)
 8002ada:	68da      	ldr	r2, [r3, #12]
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	4909      	ldr	r1, [pc, #36]	; (8002b08 <HAL_GPIO_Init+0x304>)
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	3301      	adds	r3, #1
 8002aea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	fa22 f303 	lsr.w	r3, r2, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f47f ae8e 	bne.w	8002818 <HAL_GPIO_Init+0x14>
  }
}
 8002afc:	bf00      	nop
 8002afe:	bf00      	nop
 8002b00:	372c      	adds	r7, #44	; 0x2c
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr
 8002b08:	40010400 	.word	0x40010400

08002b0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	460b      	mov	r3, r1
 8002b16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	887b      	ldrh	r3, [r7, #2]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d002      	beq.n	8002b2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b24:	2301      	movs	r3, #1
 8002b26:	73fb      	strb	r3, [r7, #15]
 8002b28:	e001      	b.n	8002b2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr

08002b3a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
 8002b42:	460b      	mov	r3, r1
 8002b44:	807b      	strh	r3, [r7, #2]
 8002b46:	4613      	mov	r3, r2
 8002b48:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b4a:	787b      	ldrb	r3, [r7, #1]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b50:	887a      	ldrh	r2, [r7, #2]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b56:	e003      	b.n	8002b60 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b58:	887b      	ldrh	r3, [r7, #2]
 8002b5a:	041a      	lsls	r2, r3, #16
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	611a      	str	r2, [r3, #16]
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr

08002b6a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b085      	sub	sp, #20
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
 8002b72:	460b      	mov	r3, r1
 8002b74:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b7c:	887a      	ldrh	r2, [r7, #2]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4013      	ands	r3, r2
 8002b82:	041a      	lsls	r2, r3, #16
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	43d9      	mvns	r1, r3
 8002b88:	887b      	ldrh	r3, [r7, #2]
 8002b8a:	400b      	ands	r3, r1
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	611a      	str	r2, [r3, #16]
}
 8002b92:	bf00      	nop
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr

08002b9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ba6:	4b08      	ldr	r3, [pc, #32]	; (8002bc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ba8:	695a      	ldr	r2, [r3, #20]
 8002baa:	88fb      	ldrh	r3, [r7, #6]
 8002bac:	4013      	ands	r3, r2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d006      	beq.n	8002bc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bb2:	4a05      	ldr	r2, [pc, #20]	; (8002bc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bb4:	88fb      	ldrh	r3, [r7, #6]
 8002bb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bb8:	88fb      	ldrh	r3, [r7, #6]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fe ff04 	bl	80019c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002bc0:	bf00      	nop
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40010400 	.word	0x40010400

08002bcc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	b08b      	sub	sp, #44	; 0x2c
 8002bd0:	af06      	add	r7, sp, #24
 8002bd2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e0fd      	b.n	8002dda <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d106      	bne.n	8002bf8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f007 fc0e 	bl	800a414 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2203      	movs	r2, #3
 8002bfc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f003 f953 	bl	8005eb0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	603b      	str	r3, [r7, #0]
 8002c10:	687e      	ldr	r6, [r7, #4]
 8002c12:	466d      	mov	r5, sp
 8002c14:	f106 0410 	add.w	r4, r6, #16
 8002c18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c1c:	6823      	ldr	r3, [r4, #0]
 8002c1e:	602b      	str	r3, [r5, #0]
 8002c20:	1d33      	adds	r3, r6, #4
 8002c22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c24:	6838      	ldr	r0, [r7, #0]
 8002c26:	f003 f91d 	bl	8005e64 <USB_CoreInit>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d005      	beq.n	8002c3c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2202      	movs	r2, #2
 8002c34:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e0ce      	b.n	8002dda <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2100      	movs	r1, #0
 8002c42:	4618      	mov	r0, r3
 8002c44:	f003 f94e 	bl	8005ee4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c48:	2300      	movs	r3, #0
 8002c4a:	73fb      	strb	r3, [r7, #15]
 8002c4c:	e04c      	b.n	8002ce8 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c4e:	7bfb      	ldrb	r3, [r7, #15]
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	1c5a      	adds	r2, r3, #1
 8002c54:	4613      	mov	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	440b      	add	r3, r1
 8002c5e:	3301      	adds	r3, #1
 8002c60:	2201      	movs	r2, #1
 8002c62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	1c5a      	adds	r2, r3, #1
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	440b      	add	r3, r1
 8002c74:	7bfa      	ldrb	r2, [r7, #15]
 8002c76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c78:	7bfa      	ldrb	r2, [r7, #15]
 8002c7a:	7bfb      	ldrb	r3, [r7, #15]
 8002c7c:	b298      	uxth	r0, r3
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	4613      	mov	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	440b      	add	r3, r1
 8002c8a:	3336      	adds	r3, #54	; 0x36
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	4613      	mov	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4413      	add	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	440b      	add	r3, r1
 8002ca0:	3303      	adds	r3, #3
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ca6:	7bfa      	ldrb	r2, [r7, #15]
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	4613      	mov	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4413      	add	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	440b      	add	r3, r1
 8002cb4:	3338      	adds	r3, #56	; 0x38
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cba:	7bfa      	ldrb	r2, [r7, #15]
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	440b      	add	r3, r1
 8002cc8:	333c      	adds	r3, #60	; 0x3c
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002cce:	7bfa      	ldrb	r2, [r7, #15]
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	440b      	add	r3, r1
 8002cdc:	3340      	adds	r3, #64	; 0x40
 8002cde:	2200      	movs	r2, #0
 8002ce0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	73fb      	strb	r3, [r7, #15]
 8002ce8:	7bfa      	ldrb	r2, [r7, #15]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d3ad      	bcc.n	8002c4e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	73fb      	strb	r3, [r7, #15]
 8002cf6:	e044      	b.n	8002d82 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002cf8:	7bfa      	ldrb	r2, [r7, #15]
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	440b      	add	r3, r1
 8002d06:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d0e:	7bfa      	ldrb	r2, [r7, #15]
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	4613      	mov	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	440b      	add	r3, r1
 8002d1c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d20:	7bfa      	ldrb	r2, [r7, #15]
 8002d22:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d24:	7bfa      	ldrb	r2, [r7, #15]
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	440b      	add	r3, r1
 8002d32:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002d36:	2200      	movs	r2, #0
 8002d38:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d3a:	7bfa      	ldrb	r2, [r7, #15]
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4413      	add	r3, r2
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	440b      	add	r3, r1
 8002d48:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d50:	7bfa      	ldrb	r2, [r7, #15]
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	4613      	mov	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4413      	add	r3, r2
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	440b      	add	r3, r1
 8002d5e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d66:	7bfa      	ldrb	r2, [r7, #15]
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	440b      	add	r3, r1
 8002d74:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	73fb      	strb	r3, [r7, #15]
 8002d82:	7bfa      	ldrb	r2, [r7, #15]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d3b5      	bcc.n	8002cf8 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	603b      	str	r3, [r7, #0]
 8002d92:	687e      	ldr	r6, [r7, #4]
 8002d94:	466d      	mov	r5, sp
 8002d96:	f106 0410 	add.w	r4, r6, #16
 8002d9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d9e:	6823      	ldr	r3, [r4, #0]
 8002da0:	602b      	str	r3, [r5, #0]
 8002da2:	1d33      	adds	r3, r6, #4
 8002da4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002da6:	6838      	ldr	r0, [r7, #0]
 8002da8:	f003 f8a8 	bl	8005efc <USB_DevInit>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d005      	beq.n	8002dbe <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2202      	movs	r2, #2
 8002db6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e00d      	b.n	8002dda <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f005 fd5a 	bl	800888c <USB_DevDisconnect>

  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002de2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b082      	sub	sp, #8
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d101      	bne.n	8002df8 <HAL_PCD_Start+0x16>
 8002df4:	2302      	movs	r3, #2
 8002df6:	e016      	b.n	8002e26 <HAL_PCD_Start+0x44>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f003 f83d 	bl	8005e84 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f007 fd74 	bl	800a8fa <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f005 fd2e 	bl	8008878 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b088      	sub	sp, #32
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f005 fd30 	bl	80088a0 <USB_ReadInterrupts>
 8002e40:	4603      	mov	r3, r0
 8002e42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e4a:	d102      	bne.n	8002e52 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 fb5f 	bl	8003510 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f005 fd22 	bl	80088a0 <USB_ReadInterrupts>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e66:	d112      	bne.n	8002e8e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e7a:	b292      	uxth	r2, r2
 8002e7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f007 fb42 	bl	800a50a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002e86:	2100      	movs	r1, #0
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 f923 	bl	80030d4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f005 fd04 	bl	80088a0 <USB_ReadInterrupts>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ea2:	d10b      	bne.n	8002ebc <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002eb6:	b292      	uxth	r2, r2
 8002eb8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f005 fced 	bl	80088a0 <USB_ReadInterrupts>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ecc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ed0:	d10b      	bne.n	8002eea <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ee4:	b292      	uxth	r2, r2
 8002ee6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f005 fcd6 	bl	80088a0 <USB_ReadInterrupts>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002efe:	d126      	bne.n	8002f4e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0204 	bic.w	r2, r2, #4
 8002f12:	b292      	uxth	r2, r2
 8002f14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 0208 	bic.w	r2, r2, #8
 8002f2a:	b292      	uxth	r2, r2
 8002f2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f007 fb23 	bl	800a57c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f48:	b292      	uxth	r2, r2
 8002f4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f005 fca4 	bl	80088a0 <USB_ReadInterrupts>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f62:	f040 8082 	bne.w	800306a <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002f66:	2300      	movs	r3, #0
 8002f68:	77fb      	strb	r3, [r7, #31]
 8002f6a:	e010      	b.n	8002f8e <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	461a      	mov	r2, r3
 8002f72:	7ffb      	ldrb	r3, [r7, #31]
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	441a      	add	r2, r3
 8002f78:	7ffb      	ldrb	r3, [r7, #31]
 8002f7a:	8812      	ldrh	r2, [r2, #0]
 8002f7c:	b292      	uxth	r2, r2
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	3320      	adds	r3, #32
 8002f82:	443b      	add	r3, r7
 8002f84:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002f88:	7ffb      	ldrb	r3, [r7, #31]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	77fb      	strb	r3, [r7, #31]
 8002f8e:	7ffb      	ldrb	r3, [r7, #31]
 8002f90:	2b07      	cmp	r3, #7
 8002f92:	d9eb      	bls.n	8002f6c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0201 	orr.w	r2, r2, #1
 8002fa6:	b292      	uxth	r2, r2
 8002fa8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0201 	bic.w	r2, r2, #1
 8002fbe:	b292      	uxth	r2, r2
 8002fc0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002fc4:	bf00      	nop
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d0f6      	beq.n	8002fc6 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fea:	b292      	uxth	r2, r2
 8002fec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	77fb      	strb	r3, [r7, #31]
 8002ff4:	e00f      	b.n	8003016 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002ff6:	7ffb      	ldrb	r3, [r7, #31]
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6812      	ldr	r2, [r2, #0]
 8002ffc:	4611      	mov	r1, r2
 8002ffe:	7ffa      	ldrb	r2, [r7, #31]
 8003000:	0092      	lsls	r2, r2, #2
 8003002:	440a      	add	r2, r1
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	3320      	adds	r3, #32
 8003008:	443b      	add	r3, r7
 800300a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800300e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003010:	7ffb      	ldrb	r3, [r7, #31]
 8003012:	3301      	adds	r3, #1
 8003014:	77fb      	strb	r3, [r7, #31]
 8003016:	7ffb      	ldrb	r3, [r7, #31]
 8003018:	2b07      	cmp	r3, #7
 800301a:	d9ec      	bls.n	8002ff6 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003024:	b29a      	uxth	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0208 	orr.w	r2, r2, #8
 800302e:	b292      	uxth	r2, r2
 8003030:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800303c:	b29a      	uxth	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003046:	b292      	uxth	r2, r2
 8003048:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003054:	b29a      	uxth	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f042 0204 	orr.w	r2, r2, #4
 800305e:	b292      	uxth	r2, r2
 8003060:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f007 fa6f 	bl	800a548 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4618      	mov	r0, r3
 8003070:	f005 fc16 	bl	80088a0 <USB_ReadInterrupts>
 8003074:	4603      	mov	r3, r0
 8003076:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800307a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800307e:	d10e      	bne.n	800309e <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003088:	b29a      	uxth	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003092:	b292      	uxth	r2, r2
 8003094:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f007 fa28 	bl	800a4ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f005 fbfc 	bl	80088a0 <USB_ReadInterrupts>
 80030a8:	4603      	mov	r3, r0
 80030aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030b2:	d10b      	bne.n	80030cc <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030bc:	b29a      	uxth	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030c6:	b292      	uxth	r2, r2
 80030c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80030cc:	bf00      	nop
 80030ce:	3720      	adds	r7, #32
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d101      	bne.n	80030ee <HAL_PCD_SetAddress+0x1a>
 80030ea:	2302      	movs	r3, #2
 80030ec:	e013      	b.n	8003116 <HAL_PCD_SetAddress+0x42>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	78fa      	ldrb	r2, [r7, #3]
 80030fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	78fa      	ldrb	r2, [r7, #3]
 8003104:	4611      	mov	r1, r2
 8003106:	4618      	mov	r0, r3
 8003108:	f005 fba3 	bl	8008852 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b084      	sub	sp, #16
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
 8003126:	4608      	mov	r0, r1
 8003128:	4611      	mov	r1, r2
 800312a:	461a      	mov	r2, r3
 800312c:	4603      	mov	r3, r0
 800312e:	70fb      	strb	r3, [r7, #3]
 8003130:	460b      	mov	r3, r1
 8003132:	803b      	strh	r3, [r7, #0]
 8003134:	4613      	mov	r3, r2
 8003136:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003138:	2300      	movs	r3, #0
 800313a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800313c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003140:	2b00      	cmp	r3, #0
 8003142:	da0e      	bge.n	8003162 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003144:	78fb      	ldrb	r3, [r7, #3]
 8003146:	f003 0307 	and.w	r3, r3, #7
 800314a:	1c5a      	adds	r2, r3, #1
 800314c:	4613      	mov	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	4413      	add	r3, r2
 8003158:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2201      	movs	r2, #1
 800315e:	705a      	strb	r2, [r3, #1]
 8003160:	e00e      	b.n	8003180 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003162:	78fb      	ldrb	r3, [r7, #3]
 8003164:	f003 0207 	and.w	r2, r3, #7
 8003168:	4613      	mov	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	4413      	add	r3, r2
 8003178:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003180:	78fb      	ldrb	r3, [r7, #3]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	b2da      	uxtb	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800318c:	883a      	ldrh	r2, [r7, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	78ba      	ldrb	r2, [r7, #2]
 8003196:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	785b      	ldrb	r3, [r3, #1]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d004      	beq.n	80031aa <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80031aa:	78bb      	ldrb	r3, [r7, #2]
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d102      	bne.n	80031b6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d101      	bne.n	80031c4 <HAL_PCD_EP_Open+0xa6>
 80031c0:	2302      	movs	r3, #2
 80031c2:	e00e      	b.n	80031e2 <HAL_PCD_EP_Open+0xc4>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68f9      	ldr	r1, [r7, #12]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f002 feb2 	bl	8005f3c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80031e0:	7afb      	ldrb	r3, [r7, #11]
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b084      	sub	sp, #16
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
 80031f2:	460b      	mov	r3, r1
 80031f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	da0e      	bge.n	800321c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031fe:	78fb      	ldrb	r3, [r7, #3]
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	1c5a      	adds	r2, r3, #1
 8003206:	4613      	mov	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	4413      	add	r3, r2
 8003212:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2201      	movs	r2, #1
 8003218:	705a      	strb	r2, [r3, #1]
 800321a:	e00e      	b.n	800323a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800321c:	78fb      	ldrb	r3, [r7, #3]
 800321e:	f003 0207 	and.w	r2, r3, #7
 8003222:	4613      	mov	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	4413      	add	r3, r2
 8003232:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800323a:	78fb      	ldrb	r3, [r7, #3]
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	b2da      	uxtb	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800324c:	2b01      	cmp	r3, #1
 800324e:	d101      	bne.n	8003254 <HAL_PCD_EP_Close+0x6a>
 8003250:	2302      	movs	r3, #2
 8003252:	e00e      	b.n	8003272 <HAL_PCD_EP_Close+0x88>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68f9      	ldr	r1, [r7, #12]
 8003262:	4618      	mov	r0, r3
 8003264:	f003 f9d4 	bl	8006610 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b086      	sub	sp, #24
 800327e:	af00      	add	r7, sp, #0
 8003280:	60f8      	str	r0, [r7, #12]
 8003282:	607a      	str	r2, [r7, #4]
 8003284:	603b      	str	r3, [r7, #0]
 8003286:	460b      	mov	r3, r1
 8003288:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800328a:	7afb      	ldrb	r3, [r7, #11]
 800328c:	f003 0207 	and.w	r2, r3, #7
 8003290:	4613      	mov	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4413      	add	r3, r2
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	4413      	add	r3, r2
 80032a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2200      	movs	r2, #0
 80032b2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	2200      	movs	r2, #0
 80032b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032ba:	7afb      	ldrb	r3, [r7, #11]
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032c6:	7afb      	ldrb	r3, [r7, #11]
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d106      	bne.n	80032de <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6979      	ldr	r1, [r7, #20]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f003 fb86 	bl	80069e8 <USB_EPStartXfer>
 80032dc:	e005      	b.n	80032ea <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6979      	ldr	r1, [r7, #20]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f003 fb7f 	bl	80069e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3718      	adds	r7, #24
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003300:	78fb      	ldrb	r3, [r7, #3]
 8003302:	f003 0207 	and.w	r2, r3, #7
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	440b      	add	r3, r1
 8003312:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003316:	681b      	ldr	r3, [r3, #0]
}
 8003318:	4618      	mov	r0, r3
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	bc80      	pop	{r7}
 8003320:	4770      	bx	lr

08003322 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b086      	sub	sp, #24
 8003326:	af00      	add	r7, sp, #0
 8003328:	60f8      	str	r0, [r7, #12]
 800332a:	607a      	str	r2, [r7, #4]
 800332c:	603b      	str	r3, [r7, #0]
 800332e:	460b      	mov	r3, r1
 8003330:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003332:	7afb      	ldrb	r3, [r7, #11]
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	4613      	mov	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	4413      	add	r3, r2
 8003346:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	2200      	movs	r2, #0
 8003366:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	2201      	movs	r2, #1
 800336c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800336e:	7afb      	ldrb	r3, [r7, #11]
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	b2da      	uxtb	r2, r3
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800337a:	7afb      	ldrb	r3, [r7, #11]
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	2b00      	cmp	r3, #0
 8003382:	d106      	bne.n	8003392 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6979      	ldr	r1, [r7, #20]
 800338a:	4618      	mov	r0, r3
 800338c:	f003 fb2c 	bl	80069e8 <USB_EPStartXfer>
 8003390:	e005      	b.n	800339e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6979      	ldr	r1, [r7, #20]
 8003398:	4618      	mov	r0, r3
 800339a:	f003 fb25 	bl	80069e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	460b      	mov	r3, r1
 80033b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80033b4:	78fb      	ldrb	r3, [r7, #3]
 80033b6:	f003 0207 	and.w	r2, r3, #7
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d901      	bls.n	80033c6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e04c      	b.n	8003460 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	da0e      	bge.n	80033ec <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033ce:	78fb      	ldrb	r3, [r7, #3]
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	1c5a      	adds	r2, r3, #1
 80033d6:	4613      	mov	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4413      	add	r3, r2
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	4413      	add	r3, r2
 80033e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2201      	movs	r2, #1
 80033e8:	705a      	strb	r2, [r3, #1]
 80033ea:	e00c      	b.n	8003406 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80033ec:	78fa      	ldrb	r2, [r7, #3]
 80033ee:	4613      	mov	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	4413      	add	r3, r2
 80033fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2201      	movs	r2, #1
 800340a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800340c:	78fb      	ldrb	r3, [r7, #3]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	b2da      	uxtb	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800341e:	2b01      	cmp	r3, #1
 8003420:	d101      	bne.n	8003426 <HAL_PCD_EP_SetStall+0x7e>
 8003422:	2302      	movs	r3, #2
 8003424:	e01c      	b.n	8003460 <HAL_PCD_EP_SetStall+0xb8>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68f9      	ldr	r1, [r7, #12]
 8003434:	4618      	mov	r0, r3
 8003436:	f005 f90f 	bl	8008658 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800343a:	78fb      	ldrb	r3, [r7, #3]
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	2b00      	cmp	r3, #0
 8003442:	d108      	bne.n	8003456 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800344e:	4619      	mov	r1, r3
 8003450:	4610      	mov	r0, r2
 8003452:	f005 fa34 	bl	80088be <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	460b      	mov	r3, r1
 8003472:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003474:	78fb      	ldrb	r3, [r7, #3]
 8003476:	f003 020f 	and.w	r2, r3, #15
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	429a      	cmp	r2, r3
 8003480:	d901      	bls.n	8003486 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e040      	b.n	8003508 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003486:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800348a:	2b00      	cmp	r3, #0
 800348c:	da0e      	bge.n	80034ac <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800348e:	78fb      	ldrb	r3, [r7, #3]
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	1c5a      	adds	r2, r3, #1
 8003496:	4613      	mov	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4413      	add	r3, r2
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	4413      	add	r3, r2
 80034a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2201      	movs	r2, #1
 80034a8:	705a      	strb	r2, [r3, #1]
 80034aa:	e00e      	b.n	80034ca <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034ac:	78fb      	ldrb	r3, [r7, #3]
 80034ae:	f003 0207 	and.w	r2, r3, #7
 80034b2:	4613      	mov	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	4413      	add	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034d0:	78fb      	ldrb	r3, [r7, #3]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d101      	bne.n	80034ea <HAL_PCD_EP_ClrStall+0x82>
 80034e6:	2302      	movs	r3, #2
 80034e8:	e00e      	b.n	8003508 <HAL_PCD_EP_ClrStall+0xa0>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68f9      	ldr	r1, [r7, #12]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f005 f8fd 	bl	80086f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b08e      	sub	sp, #56	; 0x38
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003518:	e2ec      	b.n	8003af4 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003522:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003524:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003526:	b2db      	uxtb	r3, r3
 8003528:	f003 030f 	and.w	r3, r3, #15
 800352c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003530:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003534:	2b00      	cmp	r3, #0
 8003536:	f040 8161 	bne.w	80037fc <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800353a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800353c:	f003 0310 	and.w	r3, r3, #16
 8003540:	2b00      	cmp	r3, #0
 8003542:	d152      	bne.n	80035ea <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	881b      	ldrh	r3, [r3, #0]
 800354a:	b29b      	uxth	r3, r3
 800354c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003554:	81fb      	strh	r3, [r7, #14]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	89fb      	ldrh	r3, [r7, #14]
 800355c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003560:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003564:	b29b      	uxth	r3, r3
 8003566:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3328      	adds	r3, #40	; 0x28
 800356c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003576:	b29b      	uxth	r3, r3
 8003578:	461a      	mov	r2, r3
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	4413      	add	r3, r2
 8003582:	3302      	adds	r3, #2
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	6812      	ldr	r2, [r2, #0]
 800358a:	4413      	add	r3, r2
 800358c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800359a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359c:	695a      	ldr	r2, [r3, #20]
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	441a      	add	r2, r3
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80035a8:	2100      	movs	r1, #0
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f006 ff85 	bl	800a4ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f000 829b 	beq.w	8003af4 <PCD_EP_ISR_Handler+0x5e4>
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f040 8296 	bne.w	8003af4 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	b292      	uxth	r2, r2
 80035dc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80035e8:	e284      	b.n	8003af4 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80035f0:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	881b      	ldrh	r3, [r3, #0]
 80035f8:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80035fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80035fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003600:	2b00      	cmp	r3, #0
 8003602:	d034      	beq.n	800366e <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800360c:	b29b      	uxth	r3, r3
 800360e:	461a      	mov	r2, r3
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	4413      	add	r3, r2
 8003618:	3306      	adds	r3, #6
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	6812      	ldr	r2, [r2, #0]
 8003620:	4413      	add	r3, r2
 8003622:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6818      	ldr	r0, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003642:	b29b      	uxth	r3, r3
 8003644:	f005 f98b 	bl	800895e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	881b      	ldrh	r3, [r3, #0]
 800364e:	b29a      	uxth	r2, r3
 8003650:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003654:	4013      	ands	r3, r2
 8003656:	823b      	strh	r3, [r7, #16]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	8a3a      	ldrh	r2, [r7, #16]
 800365e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003662:	b292      	uxth	r2, r2
 8003664:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f006 fefa 	bl	800a460 <HAL_PCD_SetupStageCallback>
 800366c:	e242      	b.n	8003af4 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800366e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003672:	2b00      	cmp	r3, #0
 8003674:	f280 823e 	bge.w	8003af4 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	881b      	ldrh	r3, [r3, #0]
 800367e:	b29a      	uxth	r2, r3
 8003680:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003684:	4013      	ands	r3, r2
 8003686:	83bb      	strh	r3, [r7, #28]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	8bba      	ldrh	r2, [r7, #28]
 800368e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003692:	b292      	uxth	r2, r2
 8003694:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800369e:	b29b      	uxth	r3, r3
 80036a0:	461a      	mov	r2, r3
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	4413      	add	r3, r2
 80036aa:	3306      	adds	r3, #6
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6812      	ldr	r2, [r2, #0]
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036b8:	881b      	ldrh	r3, [r3, #0]
 80036ba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80036c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d019      	beq.n	80036fe <PCD_EP_ISR_Handler+0x1ee>
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d015      	beq.n	80036fe <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6818      	ldr	r0, [r3, #0]
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	6959      	ldr	r1, [r3, #20]
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	f005 f93b 	bl	800895e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80036e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ea:	695a      	ldr	r2, [r3, #20]
 80036ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	441a      	add	r2, r3
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80036f6:	2100      	movs	r1, #0
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f006 fec3 	bl	800a484 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	881b      	ldrh	r3, [r3, #0]
 8003704:	b29b      	uxth	r3, r3
 8003706:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800370a:	2b00      	cmp	r3, #0
 800370c:	f040 81f2 	bne.w	8003af4 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	61bb      	str	r3, [r7, #24]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800371e:	b29b      	uxth	r3, r3
 8003720:	461a      	mov	r2, r3
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	4413      	add	r3, r2
 8003726:	61bb      	str	r3, [r7, #24]
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800372e:	617b      	str	r3, [r7, #20]
 8003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d112      	bne.n	800375e <PCD_EP_ISR_Handler+0x24e>
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	b29b      	uxth	r3, r3
 800373e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003742:	b29a      	uxth	r2, r3
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	801a      	strh	r2, [r3, #0]
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	881b      	ldrh	r3, [r3, #0]
 800374c:	b29b      	uxth	r3, r3
 800374e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003752:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003756:	b29a      	uxth	r2, r3
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	801a      	strh	r2, [r3, #0]
 800375c:	e02f      	b.n	80037be <PCD_EP_ISR_Handler+0x2ae>
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	2b3e      	cmp	r3, #62	; 0x3e
 8003764:	d813      	bhi.n	800378e <PCD_EP_ISR_Handler+0x27e>
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	085b      	lsrs	r3, r3, #1
 800376c:	633b      	str	r3, [r7, #48]	; 0x30
 800376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d002      	beq.n	8003780 <PCD_EP_ISR_Handler+0x270>
 800377a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377c:	3301      	adds	r3, #1
 800377e:	633b      	str	r3, [r7, #48]	; 0x30
 8003780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003782:	b29b      	uxth	r3, r3
 8003784:	029b      	lsls	r3, r3, #10
 8003786:	b29a      	uxth	r2, r3
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	801a      	strh	r2, [r3, #0]
 800378c:	e017      	b.n	80037be <PCD_EP_ISR_Handler+0x2ae>
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	095b      	lsrs	r3, r3, #5
 8003794:	633b      	str	r3, [r7, #48]	; 0x30
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f003 031f 	and.w	r3, r3, #31
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d102      	bne.n	80037a8 <PCD_EP_ISR_Handler+0x298>
 80037a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a4:	3b01      	subs	r3, #1
 80037a6:	633b      	str	r3, [r7, #48]	; 0x30
 80037a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	029b      	lsls	r3, r3, #10
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	881b      	ldrh	r3, [r3, #0]
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ce:	827b      	strh	r3, [r7, #18]
 80037d0:	8a7b      	ldrh	r3, [r7, #18]
 80037d2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80037d6:	827b      	strh	r3, [r7, #18]
 80037d8:	8a7b      	ldrh	r3, [r7, #18]
 80037da:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80037de:	827b      	strh	r3, [r7, #18]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	8a7b      	ldrh	r3, [r7, #18]
 80037e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	8013      	strh	r3, [r2, #0]
 80037fa:	e17b      	b.n	8003af4 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	461a      	mov	r2, r3
 8003802:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4413      	add	r3, r2
 800380a:	881b      	ldrh	r3, [r3, #0]
 800380c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800380e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003812:	2b00      	cmp	r3, #0
 8003814:	f280 80ea 	bge.w	80039ec <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	461a      	mov	r2, r3
 800381e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	4413      	add	r3, r2
 8003826:	881b      	ldrh	r3, [r3, #0]
 8003828:	b29a      	uxth	r2, r3
 800382a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800382e:	4013      	ands	r3, r2
 8003830:	853b      	strh	r3, [r7, #40]	; 0x28
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	461a      	mov	r2, r3
 8003838:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	4413      	add	r3, r2
 8003840:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003842:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003846:	b292      	uxth	r2, r2
 8003848:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800384a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800384e:	4613      	mov	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4413      	add	r3, r2
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	4413      	add	r3, r2
 800385e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003862:	7b1b      	ldrb	r3, [r3, #12]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d122      	bne.n	80038ae <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003870:	b29b      	uxth	r3, r3
 8003872:	461a      	mov	r2, r3
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	4413      	add	r3, r2
 800387c:	3306      	adds	r3, #6
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	6812      	ldr	r2, [r2, #0]
 8003884:	4413      	add	r3, r2
 8003886:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800388a:	881b      	ldrh	r3, [r3, #0]
 800388c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003890:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003892:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 8087 	beq.w	80039a8 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6818      	ldr	r0, [r3, #0]
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	6959      	ldr	r1, [r3, #20]
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	88da      	ldrh	r2, [r3, #6]
 80038a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80038a8:	f005 f859 	bl	800895e <USB_ReadPMA>
 80038ac:	e07c      	b.n	80039a8 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	78db      	ldrb	r3, [r3, #3]
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d108      	bne.n	80038c8 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80038b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80038b8:	461a      	mov	r2, r3
 80038ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 f927 	bl	8003b10 <HAL_PCD_EP_DB_Receive>
 80038c2:	4603      	mov	r3, r0
 80038c4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80038c6:	e06f      	b.n	80039a8 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	461a      	mov	r2, r3
 80038ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	b29b      	uxth	r3, r3
 80038da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038e2:	847b      	strh	r3, [r7, #34]	; 0x22
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	461a      	mov	r2, r3
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	441a      	add	r2, r3
 80038f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80038f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003900:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003904:	b29b      	uxth	r3, r3
 8003906:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	461a      	mov	r2, r3
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4413      	add	r3, r2
 8003916:	881b      	ldrh	r3, [r3, #0]
 8003918:	b29b      	uxth	r3, r3
 800391a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d021      	beq.n	8003966 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800392a:	b29b      	uxth	r3, r3
 800392c:	461a      	mov	r2, r3
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	4413      	add	r3, r2
 8003936:	3302      	adds	r3, #2
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6812      	ldr	r2, [r2, #0]
 800393e:	4413      	add	r3, r2
 8003940:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003944:	881b      	ldrh	r3, [r3, #0]
 8003946:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800394a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800394c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800394e:	2b00      	cmp	r3, #0
 8003950:	d02a      	beq.n	80039a8 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6818      	ldr	r0, [r3, #0]
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	6959      	ldr	r1, [r3, #20]
 800395a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395c:	891a      	ldrh	r2, [r3, #8]
 800395e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003960:	f004 fffd 	bl	800895e <USB_ReadPMA>
 8003964:	e020      	b.n	80039a8 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800396e:	b29b      	uxth	r3, r3
 8003970:	461a      	mov	r2, r3
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	4413      	add	r3, r2
 800397a:	3306      	adds	r3, #6
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	6812      	ldr	r2, [r2, #0]
 8003982:	4413      	add	r3, r2
 8003984:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003988:	881b      	ldrh	r3, [r3, #0]
 800398a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800398e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003990:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003992:	2b00      	cmp	r3, #0
 8003994:	d008      	beq.n	80039a8 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6818      	ldr	r0, [r3, #0]
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	6959      	ldr	r1, [r3, #20]
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	895a      	ldrh	r2, [r3, #10]
 80039a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80039a4:	f004 ffdb 	bl	800895e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80039a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039aa:	69da      	ldr	r2, [r3, #28]
 80039ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80039ae:	441a      	add	r2, r3
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80039b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b6:	695a      	ldr	r2, [r3, #20]
 80039b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80039ba:	441a      	add	r2, r3
 80039bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039be:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80039c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d004      	beq.n	80039d2 <PCD_EP_ISR_Handler+0x4c2>
 80039c8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d206      	bcs.n	80039e0 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	4619      	mov	r1, r3
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f006 fd53 	bl	800a484 <HAL_PCD_DataOutStageCallback>
 80039de:	e005      	b.n	80039ec <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039e6:	4618      	mov	r0, r3
 80039e8:	f002 fffe 	bl	80069e8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80039ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80039ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d07e      	beq.n	8003af4 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80039f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80039fa:	1c5a      	adds	r2, r3, #1
 80039fc:	4613      	mov	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4413      	add	r3, r2
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	4413      	add	r3, r2
 8003a08:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	461a      	mov	r2, r3
 8003a10:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	881b      	ldrh	r3, [r3, #0]
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a24:	843b      	strh	r3, [r7, #32]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	441a      	add	r2, r3
 8003a34:	8c3b      	ldrh	r3, [r7, #32]
 8003a36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	78db      	ldrb	r3, [r3, #3]
 8003a46:	2b03      	cmp	r3, #3
 8003a48:	d00c      	beq.n	8003a64 <PCD_EP_ISR_Handler+0x554>
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	78db      	ldrb	r3, [r3, #3]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d008      	beq.n	8003a64 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d146      	bne.n	8003ae8 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003a5a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d141      	bne.n	8003ae8 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	461a      	mov	r2, r3
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	4413      	add	r3, r2
 8003a78:	3302      	adds	r3, #2
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6812      	ldr	r2, [r2, #0]
 8003a80:	4413      	add	r3, r2
 8003a82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a86:	881b      	ldrh	r3, [r3, #0]
 8003a88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a8c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a90:	699a      	ldr	r2, [r3, #24]
 8003a92:	8bfb      	ldrh	r3, [r7, #30]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d906      	bls.n	8003aa6 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	699a      	ldr	r2, [r3, #24]
 8003a9c:	8bfb      	ldrh	r3, [r7, #30]
 8003a9e:	1ad2      	subs	r2, r2, r3
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa2:	619a      	str	r2, [r3, #24]
 8003aa4:	e002      	b.n	8003aac <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d106      	bne.n	8003ac2 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	4619      	mov	r1, r3
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f006 fcfd 	bl	800a4ba <HAL_PCD_DataInStageCallback>
 8003ac0:	e018      	b.n	8003af4 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac4:	695a      	ldr	r2, [r3, #20]
 8003ac6:	8bfb      	ldrh	r3, [r7, #30]
 8003ac8:	441a      	add	r2, r3
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	69da      	ldr	r2, [r3, #28]
 8003ad2:	8bfb      	ldrh	r3, [r7, #30]
 8003ad4:	441a      	add	r2, r3
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f002 ff81 	bl	80069e8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003ae6:	e005      	b.n	8003af4 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003ae8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003aea:	461a      	mov	r2, r3
 8003aec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f91b 	bl	8003d2a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	b21b      	sxth	r3, r3
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f6ff ad0a 	blt.w	800351a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3738      	adds	r7, #56	; 0x38
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b088      	sub	sp, #32
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003b1e:	88fb      	ldrh	r3, [r7, #6]
 8003b20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d07e      	beq.n	8003c26 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	461a      	mov	r2, r3
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	4413      	add	r3, r2
 8003b3c:	3302      	adds	r3, #2
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	6812      	ldr	r2, [r2, #0]
 8003b44:	4413      	add	r3, r2
 8003b46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b4a:	881b      	ldrh	r3, [r3, #0]
 8003b4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b50:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	699a      	ldr	r2, [r3, #24]
 8003b56:	8b7b      	ldrh	r3, [r7, #26]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d306      	bcc.n	8003b6a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	699a      	ldr	r2, [r3, #24]
 8003b60:	8b7b      	ldrh	r3, [r7, #26]
 8003b62:	1ad2      	subs	r2, r2, r3
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	619a      	str	r2, [r3, #24]
 8003b68:	e002      	b.n	8003b70 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d123      	bne.n	8003bc0 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	881b      	ldrh	r3, [r3, #0]
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b92:	833b      	strh	r3, [r7, #24]
 8003b94:	8b3b      	ldrh	r3, [r7, #24]
 8003b96:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003b9a:	833b      	strh	r3, [r7, #24]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	441a      	add	r2, r3
 8003baa:	8b3b      	ldrh	r3, [r7, #24]
 8003bac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003bc0:	88fb      	ldrh	r3, [r7, #6]
 8003bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d01f      	beq.n	8003c0a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003be4:	82fb      	strh	r3, [r7, #22]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	461a      	mov	r2, r3
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	441a      	add	r2, r3
 8003bf4:	8afb      	ldrh	r3, [r7, #22]
 8003bf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003c0a:	8b7b      	ldrh	r3, [r7, #26]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 8087 	beq.w	8003d20 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6818      	ldr	r0, [r3, #0]
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	6959      	ldr	r1, [r3, #20]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	891a      	ldrh	r2, [r3, #8]
 8003c1e:	8b7b      	ldrh	r3, [r7, #26]
 8003c20:	f004 fe9d 	bl	800895e <USB_ReadPMA>
 8003c24:	e07c      	b.n	8003d20 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	461a      	mov	r2, r3
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	4413      	add	r3, r2
 8003c3a:	3306      	adds	r3, #6
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	6812      	ldr	r2, [r2, #0]
 8003c42:	4413      	add	r3, r2
 8003c44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c48:	881b      	ldrh	r3, [r3, #0]
 8003c4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c4e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	699a      	ldr	r2, [r3, #24]
 8003c54:	8b7b      	ldrh	r3, [r7, #26]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d306      	bcc.n	8003c68 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	699a      	ldr	r2, [r3, #24]
 8003c5e:	8b7b      	ldrh	r3, [r7, #26]
 8003c60:	1ad2      	subs	r2, r2, r3
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	619a      	str	r2, [r3, #24]
 8003c66:	e002      	b.n	8003c6e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d123      	bne.n	8003cbe <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4413      	add	r3, r2
 8003c84:	881b      	ldrh	r3, [r3, #0]
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c90:	83fb      	strh	r3, [r7, #30]
 8003c92:	8bfb      	ldrh	r3, [r7, #30]
 8003c94:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003c98:	83fb      	strh	r3, [r7, #30]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	441a      	add	r2, r3
 8003ca8:	8bfb      	ldrh	r3, [r7, #30]
 8003caa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003cbe:	88fb      	ldrh	r3, [r7, #6]
 8003cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d11f      	bne.n	8003d08 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	4413      	add	r3, r2
 8003cd6:	881b      	ldrh	r3, [r3, #0]
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ce2:	83bb      	strh	r3, [r7, #28]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	461a      	mov	r2, r3
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	441a      	add	r2, r3
 8003cf2:	8bbb      	ldrh	r3, [r7, #28]
 8003cf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003d08:	8b7b      	ldrh	r3, [r7, #26]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d008      	beq.n	8003d20 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6818      	ldr	r0, [r3, #0]
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	6959      	ldr	r1, [r3, #20]
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	895a      	ldrh	r2, [r3, #10]
 8003d1a:	8b7b      	ldrh	r3, [r7, #26]
 8003d1c:	f004 fe1f 	bl	800895e <USB_ReadPMA>
    }
  }

  return count;
 8003d20:	8b7b      	ldrh	r3, [r7, #26]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3720      	adds	r7, #32
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b0a2      	sub	sp, #136	; 0x88
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	60f8      	str	r0, [r7, #12]
 8003d32:	60b9      	str	r1, [r7, #8]
 8003d34:	4613      	mov	r3, r2
 8003d36:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003d38:	88fb      	ldrh	r3, [r7, #6]
 8003d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f000 81c7 	beq.w	80040d2 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	461a      	mov	r2, r3
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	4413      	add	r3, r2
 8003d58:	3302      	adds	r3, #2
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	6812      	ldr	r2, [r2, #0]
 8003d60:	4413      	add	r3, r2
 8003d62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d66:	881b      	ldrh	r3, [r3, #0]
 8003d68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d6c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	699a      	ldr	r2, [r3, #24]
 8003d74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d907      	bls.n	8003d8c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	699a      	ldr	r2, [r3, #24]
 8003d80:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d84:	1ad2      	subs	r2, r2, r3
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	619a      	str	r2, [r3, #24]
 8003d8a:	e002      	b.n	8003d92 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f040 80b9 	bne.w	8003f0e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	785b      	ldrb	r3, [r3, #1]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d126      	bne.n	8003df2 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	461a      	mov	r2, r3
 8003db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db8:	4413      	add	r3, r2
 8003dba:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	011a      	lsls	r2, r3, #4
 8003dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc4:	4413      	add	r3, r2
 8003dc6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003dca:	627b      	str	r3, [r7, #36]	; 0x24
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	881b      	ldrh	r3, [r3, #0]
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	801a      	strh	r2, [r3, #0]
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	881b      	ldrh	r3, [r3, #0]
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003de6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	801a      	strh	r2, [r3, #0]
 8003df0:	e01a      	b.n	8003e28 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	785b      	ldrb	r3, [r3, #1]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d116      	bne.n	8003e28 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	633b      	str	r3, [r7, #48]	; 0x30
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0e:	4413      	add	r3, r2
 8003e10:	633b      	str	r3, [r7, #48]	; 0x30
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	011a      	lsls	r2, r3, #4
 8003e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e24:	2200      	movs	r2, #0
 8003e26:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	623b      	str	r3, [r7, #32]
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	785b      	ldrb	r3, [r3, #1]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d126      	bne.n	8003e84 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	61bb      	str	r3, [r7, #24]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	461a      	mov	r2, r3
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	61bb      	str	r3, [r7, #24]
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	011a      	lsls	r2, r3, #4
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	4413      	add	r3, r2
 8003e58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e5c:	617b      	str	r3, [r7, #20]
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	881b      	ldrh	r3, [r3, #0]
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	801a      	strh	r2, [r3, #0]
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	881b      	ldrh	r3, [r3, #0]
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	801a      	strh	r2, [r3, #0]
 8003e82:	e017      	b.n	8003eb4 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	785b      	ldrb	r3, [r3, #1]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d113      	bne.n	8003eb4 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	461a      	mov	r2, r3
 8003e98:	6a3b      	ldr	r3, [r7, #32]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	623b      	str	r3, [r7, #32]
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	011a      	lsls	r2, r3, #4
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003eac:	61fb      	str	r3, [r7, #28]
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	4619      	mov	r1, r3
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f006 fafd 	bl	800a4ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003ec0:	88fb      	ldrh	r3, [r7, #6]
 8003ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f000 82d4 	beq.w	8004474 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4413      	add	r3, r2
 8003eda:	881b      	ldrh	r3, [r3, #0]
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee6:	827b      	strh	r3, [r7, #18]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	461a      	mov	r2, r3
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	441a      	add	r2, r3
 8003ef6:	8a7b      	ldrh	r3, [r7, #18]
 8003ef8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003efc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	8013      	strh	r3, [r2, #0]
 8003f0c:	e2b2      	b.n	8004474 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f0e:	88fb      	ldrh	r3, [r7, #6]
 8003f10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d021      	beq.n	8003f5c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4413      	add	r3, r2
 8003f26:	881b      	ldrh	r3, [r3, #0]
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f32:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	441a      	add	r2, r3
 8003f44:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003f48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	f040 8286 	bne.w	8004474 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	695a      	ldr	r2, [r3, #20]
 8003f6c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f70:	441a      	add	r2, r3
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	69da      	ldr	r2, [r3, #28]
 8003f7a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f7e:	441a      	add	r2, r3
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	6a1a      	ldr	r2, [r3, #32]
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d309      	bcc.n	8003fa4 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	6a1a      	ldr	r2, [r3, #32]
 8003f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f9c:	1ad2      	subs	r2, r2, r3
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	621a      	str	r2, [r3, #32]
 8003fa2:	e015      	b.n	8003fd0 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d107      	bne.n	8003fbc <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003fac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003fb0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003fba:	e009      	b.n	8003fd0 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	785b      	ldrb	r3, [r3, #1]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d155      	bne.n	8004084 <HAL_PCD_EP_DB_Transmit+0x35a>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	461a      	mov	r2, r3
 8003fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fec:	4413      	add	r3, r2
 8003fee:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	011a      	lsls	r2, r3, #4
 8003ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ffe:	637b      	str	r3, [r7, #52]	; 0x34
 8004000:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004002:	2b00      	cmp	r3, #0
 8004004:	d112      	bne.n	800402c <HAL_PCD_EP_DB_Transmit+0x302>
 8004006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004008:	881b      	ldrh	r3, [r3, #0]
 800400a:	b29b      	uxth	r3, r3
 800400c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004010:	b29a      	uxth	r2, r3
 8004012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004014:	801a      	strh	r2, [r3, #0]
 8004016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004018:	881b      	ldrh	r3, [r3, #0]
 800401a:	b29b      	uxth	r3, r3
 800401c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004020:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004024:	b29a      	uxth	r2, r3
 8004026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004028:	801a      	strh	r2, [r3, #0]
 800402a:	e047      	b.n	80040bc <HAL_PCD_EP_DB_Transmit+0x392>
 800402c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800402e:	2b3e      	cmp	r3, #62	; 0x3e
 8004030:	d811      	bhi.n	8004056 <HAL_PCD_EP_DB_Transmit+0x32c>
 8004032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004034:	085b      	lsrs	r3, r3, #1
 8004036:	64bb      	str	r3, [r7, #72]	; 0x48
 8004038:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d002      	beq.n	8004048 <HAL_PCD_EP_DB_Transmit+0x31e>
 8004042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004044:	3301      	adds	r3, #1
 8004046:	64bb      	str	r3, [r7, #72]	; 0x48
 8004048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800404a:	b29b      	uxth	r3, r3
 800404c:	029b      	lsls	r3, r3, #10
 800404e:	b29a      	uxth	r2, r3
 8004050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004052:	801a      	strh	r2, [r3, #0]
 8004054:	e032      	b.n	80040bc <HAL_PCD_EP_DB_Transmit+0x392>
 8004056:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004058:	095b      	lsrs	r3, r3, #5
 800405a:	64bb      	str	r3, [r7, #72]	; 0x48
 800405c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800405e:	f003 031f 	and.w	r3, r3, #31
 8004062:	2b00      	cmp	r3, #0
 8004064:	d102      	bne.n	800406c <HAL_PCD_EP_DB_Transmit+0x342>
 8004066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004068:	3b01      	subs	r3, #1
 800406a:	64bb      	str	r3, [r7, #72]	; 0x48
 800406c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800406e:	b29b      	uxth	r3, r3
 8004070:	029b      	lsls	r3, r3, #10
 8004072:	b29b      	uxth	r3, r3
 8004074:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004078:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800407c:	b29a      	uxth	r2, r3
 800407e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004080:	801a      	strh	r2, [r3, #0]
 8004082:	e01b      	b.n	80040bc <HAL_PCD_EP_DB_Transmit+0x392>
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	785b      	ldrb	r3, [r3, #1]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d117      	bne.n	80040bc <HAL_PCD_EP_DB_Transmit+0x392>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	643b      	str	r3, [r7, #64]	; 0x40
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800409a:	b29b      	uxth	r3, r3
 800409c:	461a      	mov	r2, r3
 800409e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040a0:	4413      	add	r3, r2
 80040a2:	643b      	str	r3, [r7, #64]	; 0x40
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	011a      	lsls	r2, r3, #4
 80040aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040ac:	4413      	add	r3, r2
 80040ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80040b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ba:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6818      	ldr	r0, [r3, #0]
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	6959      	ldr	r1, [r3, #20]
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	891a      	ldrh	r2, [r3, #8]
 80040c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	f004 fc02 	bl	80088d4 <USB_WritePMA>
 80040d0:	e1d0      	b.n	8004474 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040da:	b29b      	uxth	r3, r3
 80040dc:	461a      	mov	r2, r3
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	4413      	add	r3, r2
 80040e6:	3306      	adds	r3, #6
 80040e8:	005b      	lsls	r3, r3, #1
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	6812      	ldr	r2, [r2, #0]
 80040ee:	4413      	add	r3, r2
 80040f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040f4:	881b      	ldrh	r3, [r3, #0]
 80040f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040fa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	699a      	ldr	r2, [r3, #24]
 8004102:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004106:	429a      	cmp	r2, r3
 8004108:	d307      	bcc.n	800411a <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	699a      	ldr	r2, [r3, #24]
 800410e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004112:	1ad2      	subs	r2, r2, r3
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	619a      	str	r2, [r3, #24]
 8004118:	e002      	b.n	8004120 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	2200      	movs	r2, #0
 800411e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	2b00      	cmp	r3, #0
 8004126:	f040 80c4 	bne.w	80042b2 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	785b      	ldrb	r3, [r3, #1]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d126      	bne.n	8004180 <HAL_PCD_EP_DB_Transmit+0x456>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004140:	b29b      	uxth	r3, r3
 8004142:	461a      	mov	r2, r3
 8004144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004146:	4413      	add	r3, r2
 8004148:	66fb      	str	r3, [r7, #108]	; 0x6c
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	011a      	lsls	r2, r3, #4
 8004150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004152:	4413      	add	r3, r2
 8004154:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004158:	66bb      	str	r3, [r7, #104]	; 0x68
 800415a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	b29b      	uxth	r3, r3
 8004160:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004164:	b29a      	uxth	r2, r3
 8004166:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004168:	801a      	strh	r2, [r3, #0]
 800416a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	b29b      	uxth	r3, r3
 8004170:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004174:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004178:	b29a      	uxth	r2, r3
 800417a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800417c:	801a      	strh	r2, [r3, #0]
 800417e:	e01a      	b.n	80041b6 <HAL_PCD_EP_DB_Transmit+0x48c>
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	785b      	ldrb	r3, [r3, #1]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d116      	bne.n	80041b6 <HAL_PCD_EP_DB_Transmit+0x48c>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	677b      	str	r3, [r7, #116]	; 0x74
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004196:	b29b      	uxth	r3, r3
 8004198:	461a      	mov	r2, r3
 800419a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800419c:	4413      	add	r3, r2
 800419e:	677b      	str	r3, [r7, #116]	; 0x74
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	011a      	lsls	r2, r3, #4
 80041a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041a8:	4413      	add	r3, r2
 80041aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80041ae:	673b      	str	r3, [r7, #112]	; 0x70
 80041b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041b2:	2200      	movs	r2, #0
 80041b4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	67bb      	str	r3, [r7, #120]	; 0x78
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	785b      	ldrb	r3, [r3, #1]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d12f      	bne.n	8004224 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	461a      	mov	r2, r3
 80041d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80041dc:	4413      	add	r3, r2
 80041de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	011a      	lsls	r2, r3, #4
 80041e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80041ec:	4413      	add	r3, r2
 80041ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80041f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041fa:	881b      	ldrh	r3, [r3, #0]
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004202:	b29a      	uxth	r2, r3
 8004204:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004208:	801a      	strh	r2, [r3, #0]
 800420a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800420e:	881b      	ldrh	r3, [r3, #0]
 8004210:	b29b      	uxth	r3, r3
 8004212:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004216:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800421a:	b29a      	uxth	r2, r3
 800421c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004220:	801a      	strh	r2, [r3, #0]
 8004222:	e017      	b.n	8004254 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	785b      	ldrb	r3, [r3, #1]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d113      	bne.n	8004254 <HAL_PCD_EP_DB_Transmit+0x52a>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004234:	b29b      	uxth	r3, r3
 8004236:	461a      	mov	r2, r3
 8004238:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800423a:	4413      	add	r3, r2
 800423c:	67bb      	str	r3, [r7, #120]	; 0x78
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	011a      	lsls	r2, r3, #4
 8004244:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004246:	4413      	add	r3, r2
 8004248:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800424c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800424e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004250:	2200      	movs	r2, #0
 8004252:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	4619      	mov	r1, r3
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f006 f92d 	bl	800a4ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004260:	88fb      	ldrh	r3, [r7, #6]
 8004262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004266:	2b00      	cmp	r3, #0
 8004268:	f040 8104 	bne.w	8004474 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	461a      	mov	r2, r3
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4413      	add	r3, r2
 800427a:	881b      	ldrh	r3, [r3, #0]
 800427c:	b29b      	uxth	r3, r3
 800427e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004286:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	461a      	mov	r2, r3
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	441a      	add	r2, r3
 8004298:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800429c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	8013      	strh	r3, [r2, #0]
 80042b0:	e0e0      	b.n	8004474 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80042b2:	88fb      	ldrh	r3, [r7, #6]
 80042b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d121      	bne.n	8004300 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	461a      	mov	r2, r3
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4413      	add	r3, r2
 80042ca:	881b      	ldrh	r3, [r3, #0]
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	461a      	mov	r2, r3
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	441a      	add	r2, r3
 80042e8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80042ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004306:	2b01      	cmp	r3, #1
 8004308:	f040 80b4 	bne.w	8004474 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	695a      	ldr	r2, [r3, #20]
 8004310:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004314:	441a      	add	r2, r3
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	69da      	ldr	r2, [r3, #28]
 800431e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004322:	441a      	add	r2, r3
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	6a1a      	ldr	r2, [r3, #32]
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	429a      	cmp	r2, r3
 8004332:	d309      	bcc.n	8004348 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	6a1a      	ldr	r2, [r3, #32]
 800433e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004340:	1ad2      	subs	r2, r2, r3
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	621a      	str	r2, [r3, #32]
 8004346:	e015      	b.n	8004374 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d107      	bne.n	8004360 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8004350:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004354:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800435e:	e009      	b.n	8004374 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	6a1b      	ldr	r3, [r3, #32]
 8004364:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	2200      	movs	r2, #0
 800436a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	667b      	str	r3, [r7, #100]	; 0x64
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	785b      	ldrb	r3, [r3, #1]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d155      	bne.n	800442e <HAL_PCD_EP_DB_Transmit+0x704>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004390:	b29b      	uxth	r3, r3
 8004392:	461a      	mov	r2, r3
 8004394:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004396:	4413      	add	r3, r2
 8004398:	65fb      	str	r3, [r7, #92]	; 0x5c
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	011a      	lsls	r2, r3, #4
 80043a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043a2:	4413      	add	r3, r2
 80043a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80043a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80043aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d112      	bne.n	80043d6 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80043b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043be:	801a      	strh	r2, [r3, #0]
 80043c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043c2:	881b      	ldrh	r3, [r3, #0]
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043d2:	801a      	strh	r2, [r3, #0]
 80043d4:	e044      	b.n	8004460 <HAL_PCD_EP_DB_Transmit+0x736>
 80043d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043d8:	2b3e      	cmp	r3, #62	; 0x3e
 80043da:	d811      	bhi.n	8004400 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80043dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043de:	085b      	lsrs	r3, r3, #1
 80043e0:	657b      	str	r3, [r7, #84]	; 0x54
 80043e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d002      	beq.n	80043f2 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80043ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043ee:	3301      	adds	r3, #1
 80043f0:	657b      	str	r3, [r7, #84]	; 0x54
 80043f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	029b      	lsls	r3, r3, #10
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043fc:	801a      	strh	r2, [r3, #0]
 80043fe:	e02f      	b.n	8004460 <HAL_PCD_EP_DB_Transmit+0x736>
 8004400:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004402:	095b      	lsrs	r3, r3, #5
 8004404:	657b      	str	r3, [r7, #84]	; 0x54
 8004406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004408:	f003 031f 	and.w	r3, r3, #31
 800440c:	2b00      	cmp	r3, #0
 800440e:	d102      	bne.n	8004416 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8004410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004412:	3b01      	subs	r3, #1
 8004414:	657b      	str	r3, [r7, #84]	; 0x54
 8004416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004418:	b29b      	uxth	r3, r3
 800441a:	029b      	lsls	r3, r3, #10
 800441c:	b29b      	uxth	r3, r3
 800441e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004422:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004426:	b29a      	uxth	r2, r3
 8004428:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800442a:	801a      	strh	r2, [r3, #0]
 800442c:	e018      	b.n	8004460 <HAL_PCD_EP_DB_Transmit+0x736>
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	785b      	ldrb	r3, [r3, #1]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d114      	bne.n	8004460 <HAL_PCD_EP_DB_Transmit+0x736>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800443e:	b29b      	uxth	r3, r3
 8004440:	461a      	mov	r2, r3
 8004442:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004444:	4413      	add	r3, r2
 8004446:	667b      	str	r3, [r7, #100]	; 0x64
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	011a      	lsls	r2, r3, #4
 800444e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004450:	4413      	add	r3, r2
 8004452:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004456:	663b      	str	r3, [r7, #96]	; 0x60
 8004458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800445a:	b29a      	uxth	r2, r3
 800445c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800445e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6818      	ldr	r0, [r3, #0]
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	6959      	ldr	r1, [r3, #20]
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	895a      	ldrh	r2, [r3, #10]
 800446c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800446e:	b29b      	uxth	r3, r3
 8004470:	f004 fa30 	bl	80088d4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	461a      	mov	r2, r3
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4413      	add	r3, r2
 8004482:	881b      	ldrh	r3, [r3, #0]
 8004484:	b29b      	uxth	r3, r3
 8004486:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800448a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800448e:	823b      	strh	r3, [r7, #16]
 8004490:	8a3b      	ldrh	r3, [r7, #16]
 8004492:	f083 0310 	eor.w	r3, r3, #16
 8004496:	823b      	strh	r3, [r7, #16]
 8004498:	8a3b      	ldrh	r3, [r7, #16]
 800449a:	f083 0320 	eor.w	r3, r3, #32
 800449e:	823b      	strh	r3, [r7, #16]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	461a      	mov	r2, r3
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	441a      	add	r2, r3
 80044ae:	8a3b      	ldrh	r3, [r7, #16]
 80044b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3788      	adds	r7, #136	; 0x88
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b087      	sub	sp, #28
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	60f8      	str	r0, [r7, #12]
 80044d6:	607b      	str	r3, [r7, #4]
 80044d8:	460b      	mov	r3, r1
 80044da:	817b      	strh	r3, [r7, #10]
 80044dc:	4613      	mov	r3, r2
 80044de:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80044e0:	897b      	ldrh	r3, [r7, #10]
 80044e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00b      	beq.n	8004504 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044ec:	897b      	ldrh	r3, [r7, #10]
 80044ee:	f003 0307 	and.w	r3, r3, #7
 80044f2:	1c5a      	adds	r2, r3, #1
 80044f4:	4613      	mov	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4413      	add	r3, r2
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	4413      	add	r3, r2
 8004500:	617b      	str	r3, [r7, #20]
 8004502:	e009      	b.n	8004518 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004504:	897a      	ldrh	r2, [r7, #10]
 8004506:	4613      	mov	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	4413      	add	r3, r2
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	4413      	add	r3, r2
 8004516:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004518:	893b      	ldrh	r3, [r7, #8]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d107      	bne.n	800452e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	2200      	movs	r2, #0
 8004522:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	b29a      	uxth	r2, r3
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	80da      	strh	r2, [r3, #6]
 800452c:	e00b      	b.n	8004546 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	2201      	movs	r2, #1
 8004532:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	b29a      	uxth	r2, r3
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	0c1b      	lsrs	r3, r3, #16
 8004540:	b29a      	uxth	r2, r3
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	371c      	adds	r7, #28
 800454c:	46bd      	mov	sp, r7
 800454e:	bc80      	pop	{r7}
 8004550:	4770      	bx	lr
	...

08004554 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e272      	b.n	8004a4c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	f000 8087 	beq.w	8004682 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004574:	4b92      	ldr	r3, [pc, #584]	; (80047c0 <HAL_RCC_OscConfig+0x26c>)
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f003 030c 	and.w	r3, r3, #12
 800457c:	2b04      	cmp	r3, #4
 800457e:	d00c      	beq.n	800459a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004580:	4b8f      	ldr	r3, [pc, #572]	; (80047c0 <HAL_RCC_OscConfig+0x26c>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f003 030c 	and.w	r3, r3, #12
 8004588:	2b08      	cmp	r3, #8
 800458a:	d112      	bne.n	80045b2 <HAL_RCC_OscConfig+0x5e>
 800458c:	4b8c      	ldr	r3, [pc, #560]	; (80047c0 <HAL_RCC_OscConfig+0x26c>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004598:	d10b      	bne.n	80045b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800459a:	4b89      	ldr	r3, [pc, #548]	; (80047c0 <HAL_RCC_OscConfig+0x26c>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d06c      	beq.n	8004680 <HAL_RCC_OscConfig+0x12c>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d168      	bne.n	8004680 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e24c      	b.n	8004a4c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ba:	d106      	bne.n	80045ca <HAL_RCC_OscConfig+0x76>
 80045bc:	4b80      	ldr	r3, [pc, #512]	; (80047c0 <HAL_RCC_OscConfig+0x26c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a7f      	ldr	r2, [pc, #508]	; (80047c0 <HAL_RCC_OscConfig+0x26c>)
 80045c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045c6:	6013      	str	r3, [r2, #0]
 80045c8:	e02e      	b.n	8004628 <HAL_RCC_OscConfig+0xd4>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10c      	bne.n	80045ec <HAL_RCC_OscConfig+0x98>
 80045d2:	4b7b      	ldr	r3, [pc, #492]	; (80047c0 <HAL_RCC_OscConfig+0x26c>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a7a      	ldr	r2, [pc, #488]	; (80047c0 <HAL_RCC_OscConfig+0x26c>)
 80045d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045dc:	6013      	str	r3, [r2, #0]
 80045de:	4b78      	ldr	r3, [pc, #480]	; (80047c0 <HAL_RCC_OscConfig+0x26c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a77      	ldr	r2, [pc, #476]	; (80047c0 <HAL_RCC_OscConfig+0x26c>)
 80045e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045e8:	6013      	str	r3, [r2, #0]
 80045ea:	e01d      	b.n	8004628 <HAL_RCC_OscConfig+0xd4>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045f4:	d10c      	bne.n	8004610 <HAL_RCC_OscConfig+0xbc>
 80045f6:	4b72      	ldr	r3, [pc, #456]	; (80047c0 <HAL_RCC_OscConfig+0x26c>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a71      	ldr	r2, [pc, #452]	; (80047c0 <HAL_RCC_OscConfig+0x26c>)
 80045fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004600:	6013      	str	r3, [r2, #0]
 8004602:	4b6f      	ldr	r3, [pc, #444]	; (80047c0 <HAL_RCC_OscConfig+0x26c>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a6e      	ldr	r2, [pc, #440]	; (80047c0 <HAL_RCC_OscConfig+0x26c>)
 8004608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800460c:	6013      	str	r3, [r2, #0]
 800460e:	e00b      	b.n	8004628 <HAL_RCC_OscConfig+0xd4>
 8004610:	4b6b      	ldr	r3, [pc, #428]	; (80047c0 <HAL_RCC_OscConfig+0x26c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a6a      	ldr	r2, [pc, #424]	; (80047c0 <HAL_RCC_OscConfig+0x26c>)
 8004616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800461a:	6013      	str	r3, [r2, #0]
 800461c:	4b68      	ldr	r3, [pc, #416]	; (80047c0 <HAL_RCC_OscConfig+0x26c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a67      	ldr	r2, [pc, #412]	; (80047c0 <HAL_RCC_OscConfig+0x26c>)
 8004622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004626:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d013      	beq.n	8004658 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004630:	f7fd ff9e 	bl	8002570 <HAL_GetTick>
 8004634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004636:	e008      	b.n	800464a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004638:	f7fd ff9a 	bl	8002570 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b64      	cmp	r3, #100	; 0x64
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e200      	b.n	8004a4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800464a:	4b5d      	ldr	r3, [pc, #372]	; (80047c0 <HAL_RCC_OscConfig+0x26c>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d0f0      	beq.n	8004638 <HAL_RCC_OscConfig+0xe4>
 8004656:	e014      	b.n	8004682 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004658:	f7fd ff8a 	bl	8002570 <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800465e:	e008      	b.n	8004672 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004660:	f7fd ff86 	bl	8002570 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b64      	cmp	r3, #100	; 0x64
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e1ec      	b.n	8004a4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004672:	4b53      	ldr	r3, [pc, #332]	; (80047c0 <HAL_RCC_OscConfig+0x26c>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1f0      	bne.n	8004660 <HAL_RCC_OscConfig+0x10c>
 800467e:	e000      	b.n	8004682 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d063      	beq.n	8004756 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800468e:	4b4c      	ldr	r3, [pc, #304]	; (80047c0 <HAL_RCC_OscConfig+0x26c>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f003 030c 	and.w	r3, r3, #12
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00b      	beq.n	80046b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800469a:	4b49      	ldr	r3, [pc, #292]	; (80047c0 <HAL_RCC_OscConfig+0x26c>)
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f003 030c 	and.w	r3, r3, #12
 80046a2:	2b08      	cmp	r3, #8
 80046a4:	d11c      	bne.n	80046e0 <HAL_RCC_OscConfig+0x18c>
 80046a6:	4b46      	ldr	r3, [pc, #280]	; (80047c0 <HAL_RCC_OscConfig+0x26c>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d116      	bne.n	80046e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046b2:	4b43      	ldr	r3, [pc, #268]	; (80047c0 <HAL_RCC_OscConfig+0x26c>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d005      	beq.n	80046ca <HAL_RCC_OscConfig+0x176>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d001      	beq.n	80046ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e1c0      	b.n	8004a4c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ca:	4b3d      	ldr	r3, [pc, #244]	; (80047c0 <HAL_RCC_OscConfig+0x26c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	4939      	ldr	r1, [pc, #228]	; (80047c0 <HAL_RCC_OscConfig+0x26c>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046de:	e03a      	b.n	8004756 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d020      	beq.n	800472a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046e8:	4b36      	ldr	r3, [pc, #216]	; (80047c4 <HAL_RCC_OscConfig+0x270>)
 80046ea:	2201      	movs	r2, #1
 80046ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ee:	f7fd ff3f 	bl	8002570 <HAL_GetTick>
 80046f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046f4:	e008      	b.n	8004708 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046f6:	f7fd ff3b 	bl	8002570 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	2b02      	cmp	r3, #2
 8004702:	d901      	bls.n	8004708 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e1a1      	b.n	8004a4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004708:	4b2d      	ldr	r3, [pc, #180]	; (80047c0 <HAL_RCC_OscConfig+0x26c>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	2b00      	cmp	r3, #0
 8004712:	d0f0      	beq.n	80046f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004714:	4b2a      	ldr	r3, [pc, #168]	; (80047c0 <HAL_RCC_OscConfig+0x26c>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	00db      	lsls	r3, r3, #3
 8004722:	4927      	ldr	r1, [pc, #156]	; (80047c0 <HAL_RCC_OscConfig+0x26c>)
 8004724:	4313      	orrs	r3, r2
 8004726:	600b      	str	r3, [r1, #0]
 8004728:	e015      	b.n	8004756 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800472a:	4b26      	ldr	r3, [pc, #152]	; (80047c4 <HAL_RCC_OscConfig+0x270>)
 800472c:	2200      	movs	r2, #0
 800472e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004730:	f7fd ff1e 	bl	8002570 <HAL_GetTick>
 8004734:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004736:	e008      	b.n	800474a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004738:	f7fd ff1a 	bl	8002570 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b02      	cmp	r3, #2
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e180      	b.n	8004a4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800474a:	4b1d      	ldr	r3, [pc, #116]	; (80047c0 <HAL_RCC_OscConfig+0x26c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1f0      	bne.n	8004738 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0308 	and.w	r3, r3, #8
 800475e:	2b00      	cmp	r3, #0
 8004760:	d03a      	beq.n	80047d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d019      	beq.n	800479e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800476a:	4b17      	ldr	r3, [pc, #92]	; (80047c8 <HAL_RCC_OscConfig+0x274>)
 800476c:	2201      	movs	r2, #1
 800476e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004770:	f7fd fefe 	bl	8002570 <HAL_GetTick>
 8004774:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004776:	e008      	b.n	800478a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004778:	f7fd fefa 	bl	8002570 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b02      	cmp	r3, #2
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e160      	b.n	8004a4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800478a:	4b0d      	ldr	r3, [pc, #52]	; (80047c0 <HAL_RCC_OscConfig+0x26c>)
 800478c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d0f0      	beq.n	8004778 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004796:	2001      	movs	r0, #1
 8004798:	f000 fad8 	bl	8004d4c <RCC_Delay>
 800479c:	e01c      	b.n	80047d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800479e:	4b0a      	ldr	r3, [pc, #40]	; (80047c8 <HAL_RCC_OscConfig+0x274>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047a4:	f7fd fee4 	bl	8002570 <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047aa:	e00f      	b.n	80047cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047ac:	f7fd fee0 	bl	8002570 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d908      	bls.n	80047cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e146      	b.n	8004a4c <HAL_RCC_OscConfig+0x4f8>
 80047be:	bf00      	nop
 80047c0:	40021000 	.word	0x40021000
 80047c4:	42420000 	.word	0x42420000
 80047c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047cc:	4b92      	ldr	r3, [pc, #584]	; (8004a18 <HAL_RCC_OscConfig+0x4c4>)
 80047ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d0:	f003 0302 	and.w	r3, r3, #2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1e9      	bne.n	80047ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0304 	and.w	r3, r3, #4
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 80a6 	beq.w	8004932 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047e6:	2300      	movs	r3, #0
 80047e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ea:	4b8b      	ldr	r3, [pc, #556]	; (8004a18 <HAL_RCC_OscConfig+0x4c4>)
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10d      	bne.n	8004812 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047f6:	4b88      	ldr	r3, [pc, #544]	; (8004a18 <HAL_RCC_OscConfig+0x4c4>)
 80047f8:	69db      	ldr	r3, [r3, #28]
 80047fa:	4a87      	ldr	r2, [pc, #540]	; (8004a18 <HAL_RCC_OscConfig+0x4c4>)
 80047fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004800:	61d3      	str	r3, [r2, #28]
 8004802:	4b85      	ldr	r3, [pc, #532]	; (8004a18 <HAL_RCC_OscConfig+0x4c4>)
 8004804:	69db      	ldr	r3, [r3, #28]
 8004806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800480a:	60bb      	str	r3, [r7, #8]
 800480c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800480e:	2301      	movs	r3, #1
 8004810:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004812:	4b82      	ldr	r3, [pc, #520]	; (8004a1c <HAL_RCC_OscConfig+0x4c8>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481a:	2b00      	cmp	r3, #0
 800481c:	d118      	bne.n	8004850 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800481e:	4b7f      	ldr	r3, [pc, #508]	; (8004a1c <HAL_RCC_OscConfig+0x4c8>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a7e      	ldr	r2, [pc, #504]	; (8004a1c <HAL_RCC_OscConfig+0x4c8>)
 8004824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004828:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800482a:	f7fd fea1 	bl	8002570 <HAL_GetTick>
 800482e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004830:	e008      	b.n	8004844 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004832:	f7fd fe9d 	bl	8002570 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b64      	cmp	r3, #100	; 0x64
 800483e:	d901      	bls.n	8004844 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e103      	b.n	8004a4c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004844:	4b75      	ldr	r3, [pc, #468]	; (8004a1c <HAL_RCC_OscConfig+0x4c8>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800484c:	2b00      	cmp	r3, #0
 800484e:	d0f0      	beq.n	8004832 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d106      	bne.n	8004866 <HAL_RCC_OscConfig+0x312>
 8004858:	4b6f      	ldr	r3, [pc, #444]	; (8004a18 <HAL_RCC_OscConfig+0x4c4>)
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	4a6e      	ldr	r2, [pc, #440]	; (8004a18 <HAL_RCC_OscConfig+0x4c4>)
 800485e:	f043 0301 	orr.w	r3, r3, #1
 8004862:	6213      	str	r3, [r2, #32]
 8004864:	e02d      	b.n	80048c2 <HAL_RCC_OscConfig+0x36e>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10c      	bne.n	8004888 <HAL_RCC_OscConfig+0x334>
 800486e:	4b6a      	ldr	r3, [pc, #424]	; (8004a18 <HAL_RCC_OscConfig+0x4c4>)
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	4a69      	ldr	r2, [pc, #420]	; (8004a18 <HAL_RCC_OscConfig+0x4c4>)
 8004874:	f023 0301 	bic.w	r3, r3, #1
 8004878:	6213      	str	r3, [r2, #32]
 800487a:	4b67      	ldr	r3, [pc, #412]	; (8004a18 <HAL_RCC_OscConfig+0x4c4>)
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	4a66      	ldr	r2, [pc, #408]	; (8004a18 <HAL_RCC_OscConfig+0x4c4>)
 8004880:	f023 0304 	bic.w	r3, r3, #4
 8004884:	6213      	str	r3, [r2, #32]
 8004886:	e01c      	b.n	80048c2 <HAL_RCC_OscConfig+0x36e>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	2b05      	cmp	r3, #5
 800488e:	d10c      	bne.n	80048aa <HAL_RCC_OscConfig+0x356>
 8004890:	4b61      	ldr	r3, [pc, #388]	; (8004a18 <HAL_RCC_OscConfig+0x4c4>)
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	4a60      	ldr	r2, [pc, #384]	; (8004a18 <HAL_RCC_OscConfig+0x4c4>)
 8004896:	f043 0304 	orr.w	r3, r3, #4
 800489a:	6213      	str	r3, [r2, #32]
 800489c:	4b5e      	ldr	r3, [pc, #376]	; (8004a18 <HAL_RCC_OscConfig+0x4c4>)
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	4a5d      	ldr	r2, [pc, #372]	; (8004a18 <HAL_RCC_OscConfig+0x4c4>)
 80048a2:	f043 0301 	orr.w	r3, r3, #1
 80048a6:	6213      	str	r3, [r2, #32]
 80048a8:	e00b      	b.n	80048c2 <HAL_RCC_OscConfig+0x36e>
 80048aa:	4b5b      	ldr	r3, [pc, #364]	; (8004a18 <HAL_RCC_OscConfig+0x4c4>)
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	4a5a      	ldr	r2, [pc, #360]	; (8004a18 <HAL_RCC_OscConfig+0x4c4>)
 80048b0:	f023 0301 	bic.w	r3, r3, #1
 80048b4:	6213      	str	r3, [r2, #32]
 80048b6:	4b58      	ldr	r3, [pc, #352]	; (8004a18 <HAL_RCC_OscConfig+0x4c4>)
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	4a57      	ldr	r2, [pc, #348]	; (8004a18 <HAL_RCC_OscConfig+0x4c4>)
 80048bc:	f023 0304 	bic.w	r3, r3, #4
 80048c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d015      	beq.n	80048f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048ca:	f7fd fe51 	bl	8002570 <HAL_GetTick>
 80048ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048d0:	e00a      	b.n	80048e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048d2:	f7fd fe4d 	bl	8002570 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d901      	bls.n	80048e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e0b1      	b.n	8004a4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048e8:	4b4b      	ldr	r3, [pc, #300]	; (8004a18 <HAL_RCC_OscConfig+0x4c4>)
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	f003 0302 	and.w	r3, r3, #2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d0ee      	beq.n	80048d2 <HAL_RCC_OscConfig+0x37e>
 80048f4:	e014      	b.n	8004920 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048f6:	f7fd fe3b 	bl	8002570 <HAL_GetTick>
 80048fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048fc:	e00a      	b.n	8004914 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048fe:	f7fd fe37 	bl	8002570 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	f241 3288 	movw	r2, #5000	; 0x1388
 800490c:	4293      	cmp	r3, r2
 800490e:	d901      	bls.n	8004914 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e09b      	b.n	8004a4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004914:	4b40      	ldr	r3, [pc, #256]	; (8004a18 <HAL_RCC_OscConfig+0x4c4>)
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1ee      	bne.n	80048fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004920:	7dfb      	ldrb	r3, [r7, #23]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d105      	bne.n	8004932 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004926:	4b3c      	ldr	r3, [pc, #240]	; (8004a18 <HAL_RCC_OscConfig+0x4c4>)
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	4a3b      	ldr	r2, [pc, #236]	; (8004a18 <HAL_RCC_OscConfig+0x4c4>)
 800492c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004930:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	2b00      	cmp	r3, #0
 8004938:	f000 8087 	beq.w	8004a4a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800493c:	4b36      	ldr	r3, [pc, #216]	; (8004a18 <HAL_RCC_OscConfig+0x4c4>)
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f003 030c 	and.w	r3, r3, #12
 8004944:	2b08      	cmp	r3, #8
 8004946:	d061      	beq.n	8004a0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	69db      	ldr	r3, [r3, #28]
 800494c:	2b02      	cmp	r3, #2
 800494e:	d146      	bne.n	80049de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004950:	4b33      	ldr	r3, [pc, #204]	; (8004a20 <HAL_RCC_OscConfig+0x4cc>)
 8004952:	2200      	movs	r2, #0
 8004954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004956:	f7fd fe0b 	bl	8002570 <HAL_GetTick>
 800495a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800495c:	e008      	b.n	8004970 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800495e:	f7fd fe07 	bl	8002570 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	2b02      	cmp	r3, #2
 800496a:	d901      	bls.n	8004970 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e06d      	b.n	8004a4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004970:	4b29      	ldr	r3, [pc, #164]	; (8004a18 <HAL_RCC_OscConfig+0x4c4>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1f0      	bne.n	800495e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004984:	d108      	bne.n	8004998 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004986:	4b24      	ldr	r3, [pc, #144]	; (8004a18 <HAL_RCC_OscConfig+0x4c4>)
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	4921      	ldr	r1, [pc, #132]	; (8004a18 <HAL_RCC_OscConfig+0x4c4>)
 8004994:	4313      	orrs	r3, r2
 8004996:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004998:	4b1f      	ldr	r3, [pc, #124]	; (8004a18 <HAL_RCC_OscConfig+0x4c4>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a19      	ldr	r1, [r3, #32]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a8:	430b      	orrs	r3, r1
 80049aa:	491b      	ldr	r1, [pc, #108]	; (8004a18 <HAL_RCC_OscConfig+0x4c4>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049b0:	4b1b      	ldr	r3, [pc, #108]	; (8004a20 <HAL_RCC_OscConfig+0x4cc>)
 80049b2:	2201      	movs	r2, #1
 80049b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b6:	f7fd fddb 	bl	8002570 <HAL_GetTick>
 80049ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049bc:	e008      	b.n	80049d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049be:	f7fd fdd7 	bl	8002570 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d901      	bls.n	80049d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e03d      	b.n	8004a4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049d0:	4b11      	ldr	r3, [pc, #68]	; (8004a18 <HAL_RCC_OscConfig+0x4c4>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d0f0      	beq.n	80049be <HAL_RCC_OscConfig+0x46a>
 80049dc:	e035      	b.n	8004a4a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049de:	4b10      	ldr	r3, [pc, #64]	; (8004a20 <HAL_RCC_OscConfig+0x4cc>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e4:	f7fd fdc4 	bl	8002570 <HAL_GetTick>
 80049e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049ea:	e008      	b.n	80049fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ec:	f7fd fdc0 	bl	8002570 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e026      	b.n	8004a4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049fe:	4b06      	ldr	r3, [pc, #24]	; (8004a18 <HAL_RCC_OscConfig+0x4c4>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1f0      	bne.n	80049ec <HAL_RCC_OscConfig+0x498>
 8004a0a:	e01e      	b.n	8004a4a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	69db      	ldr	r3, [r3, #28]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d107      	bne.n	8004a24 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e019      	b.n	8004a4c <HAL_RCC_OscConfig+0x4f8>
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	40007000 	.word	0x40007000
 8004a20:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004a24:	4b0b      	ldr	r3, [pc, #44]	; (8004a54 <HAL_RCC_OscConfig+0x500>)
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d106      	bne.n	8004a46 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d001      	beq.n	8004a4a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e000      	b.n	8004a4c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3718      	adds	r7, #24
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	40021000 	.word	0x40021000

08004a58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e0d0      	b.n	8004c0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a6c:	4b6a      	ldr	r3, [pc, #424]	; (8004c18 <HAL_RCC_ClockConfig+0x1c0>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0307 	and.w	r3, r3, #7
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d910      	bls.n	8004a9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a7a:	4b67      	ldr	r3, [pc, #412]	; (8004c18 <HAL_RCC_ClockConfig+0x1c0>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f023 0207 	bic.w	r2, r3, #7
 8004a82:	4965      	ldr	r1, [pc, #404]	; (8004c18 <HAL_RCC_ClockConfig+0x1c0>)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a8a:	4b63      	ldr	r3, [pc, #396]	; (8004c18 <HAL_RCC_ClockConfig+0x1c0>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0307 	and.w	r3, r3, #7
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d001      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e0b8      	b.n	8004c0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0302 	and.w	r3, r3, #2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d020      	beq.n	8004aea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0304 	and.w	r3, r3, #4
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d005      	beq.n	8004ac0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ab4:	4b59      	ldr	r3, [pc, #356]	; (8004c1c <HAL_RCC_ClockConfig+0x1c4>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	4a58      	ldr	r2, [pc, #352]	; (8004c1c <HAL_RCC_ClockConfig+0x1c4>)
 8004aba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004abe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0308 	and.w	r3, r3, #8
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d005      	beq.n	8004ad8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004acc:	4b53      	ldr	r3, [pc, #332]	; (8004c1c <HAL_RCC_ClockConfig+0x1c4>)
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	4a52      	ldr	r2, [pc, #328]	; (8004c1c <HAL_RCC_ClockConfig+0x1c4>)
 8004ad2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004ad6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ad8:	4b50      	ldr	r3, [pc, #320]	; (8004c1c <HAL_RCC_ClockConfig+0x1c4>)
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	494d      	ldr	r1, [pc, #308]	; (8004c1c <HAL_RCC_ClockConfig+0x1c4>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d040      	beq.n	8004b78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d107      	bne.n	8004b0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004afe:	4b47      	ldr	r3, [pc, #284]	; (8004c1c <HAL_RCC_ClockConfig+0x1c4>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d115      	bne.n	8004b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e07f      	b.n	8004c0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d107      	bne.n	8004b26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b16:	4b41      	ldr	r3, [pc, #260]	; (8004c1c <HAL_RCC_ClockConfig+0x1c4>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d109      	bne.n	8004b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e073      	b.n	8004c0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b26:	4b3d      	ldr	r3, [pc, #244]	; (8004c1c <HAL_RCC_ClockConfig+0x1c4>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e06b      	b.n	8004c0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b36:	4b39      	ldr	r3, [pc, #228]	; (8004c1c <HAL_RCC_ClockConfig+0x1c4>)
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f023 0203 	bic.w	r2, r3, #3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	4936      	ldr	r1, [pc, #216]	; (8004c1c <HAL_RCC_ClockConfig+0x1c4>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b48:	f7fd fd12 	bl	8002570 <HAL_GetTick>
 8004b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b4e:	e00a      	b.n	8004b66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b50:	f7fd fd0e 	bl	8002570 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e053      	b.n	8004c0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b66:	4b2d      	ldr	r3, [pc, #180]	; (8004c1c <HAL_RCC_ClockConfig+0x1c4>)
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f003 020c 	and.w	r2, r3, #12
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d1eb      	bne.n	8004b50 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b78:	4b27      	ldr	r3, [pc, #156]	; (8004c18 <HAL_RCC_ClockConfig+0x1c0>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0307 	and.w	r3, r3, #7
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d210      	bcs.n	8004ba8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b86:	4b24      	ldr	r3, [pc, #144]	; (8004c18 <HAL_RCC_ClockConfig+0x1c0>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f023 0207 	bic.w	r2, r3, #7
 8004b8e:	4922      	ldr	r1, [pc, #136]	; (8004c18 <HAL_RCC_ClockConfig+0x1c0>)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b96:	4b20      	ldr	r3, [pc, #128]	; (8004c18 <HAL_RCC_ClockConfig+0x1c0>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0307 	and.w	r3, r3, #7
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d001      	beq.n	8004ba8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e032      	b.n	8004c0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0304 	and.w	r3, r3, #4
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d008      	beq.n	8004bc6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bb4:	4b19      	ldr	r3, [pc, #100]	; (8004c1c <HAL_RCC_ClockConfig+0x1c4>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	4916      	ldr	r1, [pc, #88]	; (8004c1c <HAL_RCC_ClockConfig+0x1c4>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0308 	and.w	r3, r3, #8
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d009      	beq.n	8004be6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004bd2:	4b12      	ldr	r3, [pc, #72]	; (8004c1c <HAL_RCC_ClockConfig+0x1c4>)
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	490e      	ldr	r1, [pc, #56]	; (8004c1c <HAL_RCC_ClockConfig+0x1c4>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004be6:	f000 f821 	bl	8004c2c <HAL_RCC_GetSysClockFreq>
 8004bea:	4602      	mov	r2, r0
 8004bec:	4b0b      	ldr	r3, [pc, #44]	; (8004c1c <HAL_RCC_ClockConfig+0x1c4>)
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	091b      	lsrs	r3, r3, #4
 8004bf2:	f003 030f 	and.w	r3, r3, #15
 8004bf6:	490a      	ldr	r1, [pc, #40]	; (8004c20 <HAL_RCC_ClockConfig+0x1c8>)
 8004bf8:	5ccb      	ldrb	r3, [r1, r3]
 8004bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8004bfe:	4a09      	ldr	r2, [pc, #36]	; (8004c24 <HAL_RCC_ClockConfig+0x1cc>)
 8004c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004c02:	4b09      	ldr	r3, [pc, #36]	; (8004c28 <HAL_RCC_ClockConfig+0x1d0>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7fd fc70 	bl	80024ec <HAL_InitTick>

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	40022000 	.word	0x40022000
 8004c1c:	40021000 	.word	0x40021000
 8004c20:	0800aa30 	.word	0x0800aa30
 8004c24:	20000000 	.word	0x20000000
 8004c28:	20000008 	.word	0x20000008

08004c2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c2c:	b490      	push	{r4, r7}
 8004c2e:	b08a      	sub	sp, #40	; 0x28
 8004c30:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004c32:	4b29      	ldr	r3, [pc, #164]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0xac>)
 8004c34:	1d3c      	adds	r4, r7, #4
 8004c36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004c3c:	f240 2301 	movw	r3, #513	; 0x201
 8004c40:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c42:	2300      	movs	r3, #0
 8004c44:	61fb      	str	r3, [r7, #28]
 8004c46:	2300      	movs	r3, #0
 8004c48:	61bb      	str	r3, [r7, #24]
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c4e:	2300      	movs	r3, #0
 8004c50:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004c56:	4b21      	ldr	r3, [pc, #132]	; (8004cdc <HAL_RCC_GetSysClockFreq+0xb0>)
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	f003 030c 	and.w	r3, r3, #12
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	d002      	beq.n	8004c6c <HAL_RCC_GetSysClockFreq+0x40>
 8004c66:	2b08      	cmp	r3, #8
 8004c68:	d003      	beq.n	8004c72 <HAL_RCC_GetSysClockFreq+0x46>
 8004c6a:	e02b      	b.n	8004cc4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c6c:	4b1c      	ldr	r3, [pc, #112]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004c6e:	623b      	str	r3, [r7, #32]
      break;
 8004c70:	e02b      	b.n	8004cca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	0c9b      	lsrs	r3, r3, #18
 8004c76:	f003 030f 	and.w	r3, r3, #15
 8004c7a:	3328      	adds	r3, #40	; 0x28
 8004c7c:	443b      	add	r3, r7
 8004c7e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004c82:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d012      	beq.n	8004cb4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004c8e:	4b13      	ldr	r3, [pc, #76]	; (8004cdc <HAL_RCC_GetSysClockFreq+0xb0>)
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	0c5b      	lsrs	r3, r3, #17
 8004c94:	f003 0301 	and.w	r3, r3, #1
 8004c98:	3328      	adds	r3, #40	; 0x28
 8004c9a:	443b      	add	r3, r7
 8004c9c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004ca0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	4a0e      	ldr	r2, [pc, #56]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004ca6:	fb03 f202 	mul.w	r2, r3, r2
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8004cb2:	e004      	b.n	8004cbe <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	4a0b      	ldr	r2, [pc, #44]	; (8004ce4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cb8:	fb02 f303 	mul.w	r3, r2, r3
 8004cbc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc0:	623b      	str	r3, [r7, #32]
      break;
 8004cc2:	e002      	b.n	8004cca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004cc4:	4b06      	ldr	r3, [pc, #24]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004cc6:	623b      	str	r3, [r7, #32]
      break;
 8004cc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cca:	6a3b      	ldr	r3, [r7, #32]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3728      	adds	r7, #40	; 0x28
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bc90      	pop	{r4, r7}
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	0800a9d8 	.word	0x0800a9d8
 8004cdc:	40021000 	.word	0x40021000
 8004ce0:	007a1200 	.word	0x007a1200
 8004ce4:	003d0900 	.word	0x003d0900

08004ce8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cec:	4b02      	ldr	r3, [pc, #8]	; (8004cf8 <HAL_RCC_GetHCLKFreq+0x10>)
 8004cee:	681b      	ldr	r3, [r3, #0]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bc80      	pop	{r7}
 8004cf6:	4770      	bx	lr
 8004cf8:	20000000 	.word	0x20000000

08004cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d00:	f7ff fff2 	bl	8004ce8 <HAL_RCC_GetHCLKFreq>
 8004d04:	4602      	mov	r2, r0
 8004d06:	4b05      	ldr	r3, [pc, #20]	; (8004d1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	0a1b      	lsrs	r3, r3, #8
 8004d0c:	f003 0307 	and.w	r3, r3, #7
 8004d10:	4903      	ldr	r1, [pc, #12]	; (8004d20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d12:	5ccb      	ldrb	r3, [r1, r3]
 8004d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	40021000 	.word	0x40021000
 8004d20:	0800aa40 	.word	0x0800aa40

08004d24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d28:	f7ff ffde 	bl	8004ce8 <HAL_RCC_GetHCLKFreq>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	4b05      	ldr	r3, [pc, #20]	; (8004d44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	0adb      	lsrs	r3, r3, #11
 8004d34:	f003 0307 	and.w	r3, r3, #7
 8004d38:	4903      	ldr	r1, [pc, #12]	; (8004d48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d3a:	5ccb      	ldrb	r3, [r1, r3]
 8004d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	40021000 	.word	0x40021000
 8004d48:	0800aa40 	.word	0x0800aa40

08004d4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004d54:	4b0a      	ldr	r3, [pc, #40]	; (8004d80 <RCC_Delay+0x34>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a0a      	ldr	r2, [pc, #40]	; (8004d84 <RCC_Delay+0x38>)
 8004d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5e:	0a5b      	lsrs	r3, r3, #9
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	fb02 f303 	mul.w	r3, r2, r3
 8004d66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004d68:	bf00      	nop
  }
  while (Delay --);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	1e5a      	subs	r2, r3, #1
 8004d6e:	60fa      	str	r2, [r7, #12]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1f9      	bne.n	8004d68 <RCC_Delay+0x1c>
}
 8004d74:	bf00      	nop
 8004d76:	bf00      	nop
 8004d78:	3714      	adds	r7, #20
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bc80      	pop	{r7}
 8004d7e:	4770      	bx	lr
 8004d80:	20000000 	.word	0x20000000
 8004d84:	10624dd3 	.word	0x10624dd3

08004d88 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	613b      	str	r3, [r7, #16]
 8004d94:	2300      	movs	r3, #0
 8004d96:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0301 	and.w	r3, r3, #1
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d07d      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004da4:	2300      	movs	r3, #0
 8004da6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004da8:	4b4f      	ldr	r3, [pc, #316]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004daa:	69db      	ldr	r3, [r3, #28]
 8004dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10d      	bne.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004db4:	4b4c      	ldr	r3, [pc, #304]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004db6:	69db      	ldr	r3, [r3, #28]
 8004db8:	4a4b      	ldr	r2, [pc, #300]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dbe:	61d3      	str	r3, [r2, #28]
 8004dc0:	4b49      	ldr	r3, [pc, #292]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dc2:	69db      	ldr	r3, [r3, #28]
 8004dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dc8:	60bb      	str	r3, [r7, #8]
 8004dca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dd0:	4b46      	ldr	r3, [pc, #280]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d118      	bne.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ddc:	4b43      	ldr	r3, [pc, #268]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a42      	ldr	r2, [pc, #264]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004de6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004de8:	f7fd fbc2 	bl	8002570 <HAL_GetTick>
 8004dec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dee:	e008      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004df0:	f7fd fbbe 	bl	8002570 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b64      	cmp	r3, #100	; 0x64
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e06d      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e02:	4b3a      	ldr	r3, [pc, #232]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d0f0      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e0e:	4b36      	ldr	r3, [pc, #216]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e16:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d02e      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d027      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e2c:	4b2e      	ldr	r3, [pc, #184]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e2e:	6a1b      	ldr	r3, [r3, #32]
 8004e30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e34:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e36:	4b2e      	ldr	r3, [pc, #184]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e38:	2201      	movs	r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e3c:	4b2c      	ldr	r3, [pc, #176]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004e42:	4a29      	ldr	r2, [pc, #164]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d014      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e52:	f7fd fb8d 	bl	8002570 <HAL_GetTick>
 8004e56:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e58:	e00a      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e5a:	f7fd fb89 	bl	8002570 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d901      	bls.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e036      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e70:	4b1d      	ldr	r3, [pc, #116]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e72:	6a1b      	ldr	r3, [r3, #32]
 8004e74:	f003 0302 	and.w	r3, r3, #2
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d0ee      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e7c:	4b1a      	ldr	r3, [pc, #104]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	4917      	ldr	r1, [pc, #92]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e8e:	7dfb      	ldrb	r3, [r7, #23]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d105      	bne.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e94:	4b14      	ldr	r3, [pc, #80]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e96:	69db      	ldr	r3, [r3, #28]
 8004e98:	4a13      	ldr	r2, [pc, #76]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e9e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d008      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004eac:	4b0e      	ldr	r3, [pc, #56]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	490b      	ldr	r1, [pc, #44]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0310 	and.w	r3, r3, #16
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d008      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004eca:	4b07      	ldr	r3, [pc, #28]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	4904      	ldr	r1, [pc, #16]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3718      	adds	r7, #24
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	40021000 	.word	0x40021000
 8004eec:	40007000 	.word	0x40007000
 8004ef0:	42420440 	.word	0x42420440

08004ef4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d001      	beq.n	8004f0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e03a      	b.n	8004f82 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2202      	movs	r2, #2
 8004f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68da      	ldr	r2, [r3, #12]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f042 0201 	orr.w	r2, r2, #1
 8004f22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a18      	ldr	r2, [pc, #96]	; (8004f8c <HAL_TIM_Base_Start_IT+0x98>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d00e      	beq.n	8004f4c <HAL_TIM_Base_Start_IT+0x58>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f36:	d009      	beq.n	8004f4c <HAL_TIM_Base_Start_IT+0x58>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a14      	ldr	r2, [pc, #80]	; (8004f90 <HAL_TIM_Base_Start_IT+0x9c>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d004      	beq.n	8004f4c <HAL_TIM_Base_Start_IT+0x58>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a13      	ldr	r2, [pc, #76]	; (8004f94 <HAL_TIM_Base_Start_IT+0xa0>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d111      	bne.n	8004f70 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f003 0307 	and.w	r3, r3, #7
 8004f56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2b06      	cmp	r3, #6
 8004f5c:	d010      	beq.n	8004f80 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f042 0201 	orr.w	r2, r2, #1
 8004f6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f6e:	e007      	b.n	8004f80 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f042 0201 	orr.w	r2, r2, #1
 8004f7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3714      	adds	r7, #20
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bc80      	pop	{r7}
 8004f8a:	4770      	bx	lr
 8004f8c:	40012c00 	.word	0x40012c00
 8004f90:	40000400 	.word	0x40000400
 8004f94:	40000800 	.word	0x40000800

08004f98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e041      	b.n	800502e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d106      	bne.n	8004fc4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f7fc fa98 	bl	80014f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	3304      	adds	r3, #4
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	4610      	mov	r0, r2
 8004fd8:	f000 fbea 	bl	80057b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3708      	adds	r7, #8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
	...

08005038 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d109      	bne.n	800505c <HAL_TIM_PWM_Start+0x24>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b01      	cmp	r3, #1
 8005052:	bf14      	ite	ne
 8005054:	2301      	movne	r3, #1
 8005056:	2300      	moveq	r3, #0
 8005058:	b2db      	uxtb	r3, r3
 800505a:	e022      	b.n	80050a2 <HAL_TIM_PWM_Start+0x6a>
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	2b04      	cmp	r3, #4
 8005060:	d109      	bne.n	8005076 <HAL_TIM_PWM_Start+0x3e>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b01      	cmp	r3, #1
 800506c:	bf14      	ite	ne
 800506e:	2301      	movne	r3, #1
 8005070:	2300      	moveq	r3, #0
 8005072:	b2db      	uxtb	r3, r3
 8005074:	e015      	b.n	80050a2 <HAL_TIM_PWM_Start+0x6a>
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b08      	cmp	r3, #8
 800507a:	d109      	bne.n	8005090 <HAL_TIM_PWM_Start+0x58>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b01      	cmp	r3, #1
 8005086:	bf14      	ite	ne
 8005088:	2301      	movne	r3, #1
 800508a:	2300      	moveq	r3, #0
 800508c:	b2db      	uxtb	r3, r3
 800508e:	e008      	b.n	80050a2 <HAL_TIM_PWM_Start+0x6a>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b01      	cmp	r3, #1
 800509a:	bf14      	ite	ne
 800509c:	2301      	movne	r3, #1
 800509e:	2300      	moveq	r3, #0
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e05e      	b.n	8005168 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d104      	bne.n	80050ba <HAL_TIM_PWM_Start+0x82>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2202      	movs	r2, #2
 80050b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050b8:	e013      	b.n	80050e2 <HAL_TIM_PWM_Start+0xaa>
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2b04      	cmp	r3, #4
 80050be:	d104      	bne.n	80050ca <HAL_TIM_PWM_Start+0x92>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050c8:	e00b      	b.n	80050e2 <HAL_TIM_PWM_Start+0xaa>
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2b08      	cmp	r3, #8
 80050ce:	d104      	bne.n	80050da <HAL_TIM_PWM_Start+0xa2>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2202      	movs	r2, #2
 80050d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050d8:	e003      	b.n	80050e2 <HAL_TIM_PWM_Start+0xaa>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2202      	movs	r2, #2
 80050de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2201      	movs	r2, #1
 80050e8:	6839      	ldr	r1, [r7, #0]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f000 fd4a 	bl	8005b84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a1e      	ldr	r2, [pc, #120]	; (8005170 <HAL_TIM_PWM_Start+0x138>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d107      	bne.n	800510a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005108:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a18      	ldr	r2, [pc, #96]	; (8005170 <HAL_TIM_PWM_Start+0x138>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d00e      	beq.n	8005132 <HAL_TIM_PWM_Start+0xfa>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800511c:	d009      	beq.n	8005132 <HAL_TIM_PWM_Start+0xfa>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a14      	ldr	r2, [pc, #80]	; (8005174 <HAL_TIM_PWM_Start+0x13c>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d004      	beq.n	8005132 <HAL_TIM_PWM_Start+0xfa>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a12      	ldr	r2, [pc, #72]	; (8005178 <HAL_TIM_PWM_Start+0x140>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d111      	bne.n	8005156 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f003 0307 	and.w	r3, r3, #7
 800513c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2b06      	cmp	r3, #6
 8005142:	d010      	beq.n	8005166 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f042 0201 	orr.w	r2, r2, #1
 8005152:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005154:	e007      	b.n	8005166 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f042 0201 	orr.w	r2, r2, #1
 8005164:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3710      	adds	r7, #16
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	40012c00 	.word	0x40012c00
 8005174:	40000400 	.word	0x40000400
 8005178:	40000800 	.word	0x40000800

0800517c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e093      	b.n	80052b8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005196:	b2db      	uxtb	r3, r3
 8005198:	2b00      	cmp	r3, #0
 800519a:	d106      	bne.n	80051aa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f7fc f93b 	bl	8001420 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2202      	movs	r2, #2
 80051ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	6812      	ldr	r2, [r2, #0]
 80051bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051c0:	f023 0307 	bic.w	r3, r3, #7
 80051c4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	3304      	adds	r3, #4
 80051ce:	4619      	mov	r1, r3
 80051d0:	4610      	mov	r0, r2
 80051d2:	f000 faed 	bl	80057b0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051fe:	f023 0303 	bic.w	r3, r3, #3
 8005202:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	689a      	ldr	r2, [r3, #8]
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	021b      	lsls	r3, r3, #8
 800520e:	4313      	orrs	r3, r2
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	4313      	orrs	r3, r2
 8005214:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800521c:	f023 030c 	bic.w	r3, r3, #12
 8005220:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005228:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800522c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	68da      	ldr	r2, [r3, #12]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	69db      	ldr	r3, [r3, #28]
 8005236:	021b      	lsls	r3, r3, #8
 8005238:	4313      	orrs	r3, r2
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	4313      	orrs	r3, r2
 800523e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	011a      	lsls	r2, r3, #4
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	031b      	lsls	r3, r3, #12
 800524c:	4313      	orrs	r3, r2
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	4313      	orrs	r3, r2
 8005252:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800525a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	011b      	lsls	r3, r3, #4
 8005266:	4313      	orrs	r3, r2
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	4313      	orrs	r3, r2
 800526c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3718      	adds	r7, #24
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052d0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80052d8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80052e0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80052e8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d110      	bne.n	8005312 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80052f0:	7bfb      	ldrb	r3, [r7, #15]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d102      	bne.n	80052fc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80052f6:	7b7b      	ldrb	r3, [r7, #13]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d001      	beq.n	8005300 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e069      	b.n	80053d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2202      	movs	r2, #2
 8005304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2202      	movs	r2, #2
 800530c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005310:	e031      	b.n	8005376 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	2b04      	cmp	r3, #4
 8005316:	d110      	bne.n	800533a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005318:	7bbb      	ldrb	r3, [r7, #14]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d102      	bne.n	8005324 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800531e:	7b3b      	ldrb	r3, [r7, #12]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d001      	beq.n	8005328 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e055      	b.n	80053d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005338:	e01d      	b.n	8005376 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800533a:	7bfb      	ldrb	r3, [r7, #15]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d108      	bne.n	8005352 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005340:	7bbb      	ldrb	r3, [r7, #14]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d105      	bne.n	8005352 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005346:	7b7b      	ldrb	r3, [r7, #13]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d102      	bne.n	8005352 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800534c:	7b3b      	ldrb	r3, [r7, #12]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d001      	beq.n	8005356 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e03e      	b.n	80053d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2202      	movs	r2, #2
 800535a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2202      	movs	r2, #2
 8005362:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2202      	movs	r2, #2
 800536a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2202      	movs	r2, #2
 8005372:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d003      	beq.n	8005384 <HAL_TIM_Encoder_Start+0xc4>
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	2b04      	cmp	r3, #4
 8005380:	d008      	beq.n	8005394 <HAL_TIM_Encoder_Start+0xd4>
 8005382:	e00f      	b.n	80053a4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2201      	movs	r2, #1
 800538a:	2100      	movs	r1, #0
 800538c:	4618      	mov	r0, r3
 800538e:	f000 fbf9 	bl	8005b84 <TIM_CCxChannelCmd>
      break;
 8005392:	e016      	b.n	80053c2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2201      	movs	r2, #1
 800539a:	2104      	movs	r1, #4
 800539c:	4618      	mov	r0, r3
 800539e:	f000 fbf1 	bl	8005b84 <TIM_CCxChannelCmd>
      break;
 80053a2:	e00e      	b.n	80053c2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2201      	movs	r2, #1
 80053aa:	2100      	movs	r1, #0
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 fbe9 	bl	8005b84 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2201      	movs	r2, #1
 80053b8:	2104      	movs	r1, #4
 80053ba:	4618      	mov	r0, r3
 80053bc:	f000 fbe2 	bl	8005b84 <TIM_CCxChannelCmd>
      break;
 80053c0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f042 0201 	orr.w	r2, r2, #1
 80053d0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d122      	bne.n	8005438 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d11b      	bne.n	8005438 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f06f 0202 	mvn.w	r2, #2
 8005408:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	f003 0303 	and.w	r3, r3, #3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f9ab 	bl	800577a <HAL_TIM_IC_CaptureCallback>
 8005424:	e005      	b.n	8005432 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f99e 	bl	8005768 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f9ad 	bl	800578c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	f003 0304 	and.w	r3, r3, #4
 8005442:	2b04      	cmp	r3, #4
 8005444:	d122      	bne.n	800548c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	f003 0304 	and.w	r3, r3, #4
 8005450:	2b04      	cmp	r3, #4
 8005452:	d11b      	bne.n	800548c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f06f 0204 	mvn.w	r2, #4
 800545c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2202      	movs	r2, #2
 8005462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800546e:	2b00      	cmp	r3, #0
 8005470:	d003      	beq.n	800547a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f981 	bl	800577a <HAL_TIM_IC_CaptureCallback>
 8005478:	e005      	b.n	8005486 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f974 	bl	8005768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 f983 	bl	800578c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	f003 0308 	and.w	r3, r3, #8
 8005496:	2b08      	cmp	r3, #8
 8005498:	d122      	bne.n	80054e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f003 0308 	and.w	r3, r3, #8
 80054a4:	2b08      	cmp	r3, #8
 80054a6:	d11b      	bne.n	80054e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f06f 0208 	mvn.w	r2, #8
 80054b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2204      	movs	r2, #4
 80054b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	69db      	ldr	r3, [r3, #28]
 80054be:	f003 0303 	and.w	r3, r3, #3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d003      	beq.n	80054ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f957 	bl	800577a <HAL_TIM_IC_CaptureCallback>
 80054cc:	e005      	b.n	80054da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f94a 	bl	8005768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 f959 	bl	800578c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	f003 0310 	and.w	r3, r3, #16
 80054ea:	2b10      	cmp	r3, #16
 80054ec:	d122      	bne.n	8005534 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	f003 0310 	and.w	r3, r3, #16
 80054f8:	2b10      	cmp	r3, #16
 80054fa:	d11b      	bne.n	8005534 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f06f 0210 	mvn.w	r2, #16
 8005504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2208      	movs	r2, #8
 800550a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005516:	2b00      	cmp	r3, #0
 8005518:	d003      	beq.n	8005522 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f92d 	bl	800577a <HAL_TIM_IC_CaptureCallback>
 8005520:	e005      	b.n	800552e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f920 	bl	8005768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f92f 	bl	800578c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	f003 0301 	and.w	r3, r3, #1
 800553e:	2b01      	cmp	r3, #1
 8005540:	d10e      	bne.n	8005560 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	2b01      	cmp	r3, #1
 800554e:	d107      	bne.n	8005560 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f06f 0201 	mvn.w	r2, #1
 8005558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f7fc fcc0 	bl	8001ee0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800556a:	2b80      	cmp	r3, #128	; 0x80
 800556c:	d10e      	bne.n	800558c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005578:	2b80      	cmp	r3, #128	; 0x80
 800557a:	d107      	bne.n	800558c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 fb87 	bl	8005c9a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005596:	2b40      	cmp	r3, #64	; 0x40
 8005598:	d10e      	bne.n	80055b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a4:	2b40      	cmp	r3, #64	; 0x40
 80055a6:	d107      	bne.n	80055b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f8f3 	bl	800579e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	f003 0320 	and.w	r3, r3, #32
 80055c2:	2b20      	cmp	r3, #32
 80055c4:	d10e      	bne.n	80055e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	f003 0320 	and.w	r3, r3, #32
 80055d0:	2b20      	cmp	r3, #32
 80055d2:	d107      	bne.n	80055e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f06f 0220 	mvn.w	r2, #32
 80055dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 fb52 	bl	8005c88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055e4:	bf00      	nop
 80055e6:	3708      	adds	r7, #8
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d101      	bne.n	8005606 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005602:	2302      	movs	r3, #2
 8005604:	e0ac      	b.n	8005760 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2b0c      	cmp	r3, #12
 8005612:	f200 809f 	bhi.w	8005754 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005616:	a201      	add	r2, pc, #4	; (adr r2, 800561c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800561c:	08005651 	.word	0x08005651
 8005620:	08005755 	.word	0x08005755
 8005624:	08005755 	.word	0x08005755
 8005628:	08005755 	.word	0x08005755
 800562c:	08005691 	.word	0x08005691
 8005630:	08005755 	.word	0x08005755
 8005634:	08005755 	.word	0x08005755
 8005638:	08005755 	.word	0x08005755
 800563c:	080056d3 	.word	0x080056d3
 8005640:	08005755 	.word	0x08005755
 8005644:	08005755 	.word	0x08005755
 8005648:	08005755 	.word	0x08005755
 800564c:	08005713 	.word	0x08005713
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68b9      	ldr	r1, [r7, #8]
 8005656:	4618      	mov	r0, r3
 8005658:	f000 f90c 	bl	8005874 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	699a      	ldr	r2, [r3, #24]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f042 0208 	orr.w	r2, r2, #8
 800566a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	699a      	ldr	r2, [r3, #24]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f022 0204 	bic.w	r2, r2, #4
 800567a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6999      	ldr	r1, [r3, #24]
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	691a      	ldr	r2, [r3, #16]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	430a      	orrs	r2, r1
 800568c:	619a      	str	r2, [r3, #24]
      break;
 800568e:	e062      	b.n	8005756 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68b9      	ldr	r1, [r7, #8]
 8005696:	4618      	mov	r0, r3
 8005698:	f000 f952 	bl	8005940 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	699a      	ldr	r2, [r3, #24]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	699a      	ldr	r2, [r3, #24]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6999      	ldr	r1, [r3, #24]
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	021a      	lsls	r2, r3, #8
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	619a      	str	r2, [r3, #24]
      break;
 80056d0:	e041      	b.n	8005756 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68b9      	ldr	r1, [r7, #8]
 80056d8:	4618      	mov	r0, r3
 80056da:	f000 f99b 	bl	8005a14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	69da      	ldr	r2, [r3, #28]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f042 0208 	orr.w	r2, r2, #8
 80056ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	69da      	ldr	r2, [r3, #28]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f022 0204 	bic.w	r2, r2, #4
 80056fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	69d9      	ldr	r1, [r3, #28]
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	691a      	ldr	r2, [r3, #16]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	430a      	orrs	r2, r1
 800570e:	61da      	str	r2, [r3, #28]
      break;
 8005710:	e021      	b.n	8005756 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68b9      	ldr	r1, [r7, #8]
 8005718:	4618      	mov	r0, r3
 800571a:	f000 f9e5 	bl	8005ae8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	69da      	ldr	r2, [r3, #28]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800572c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	69da      	ldr	r2, [r3, #28]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800573c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	69d9      	ldr	r1, [r3, #28]
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	021a      	lsls	r2, r3, #8
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	430a      	orrs	r2, r1
 8005750:	61da      	str	r2, [r3, #28]
      break;
 8005752:	e000      	b.n	8005756 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005754:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	bc80      	pop	{r7}
 8005778:	4770      	bx	lr

0800577a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800577a:	b480      	push	{r7}
 800577c:	b083      	sub	sp, #12
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005782:	bf00      	nop
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	bc80      	pop	{r7}
 800578a:	4770      	bx	lr

0800578c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	bc80      	pop	{r7}
 800579c:	4770      	bx	lr

0800579e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800579e:	b480      	push	{r7}
 80057a0:	b083      	sub	sp, #12
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057a6:	bf00      	nop
 80057a8:	370c      	adds	r7, #12
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bc80      	pop	{r7}
 80057ae:	4770      	bx	lr

080057b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a29      	ldr	r2, [pc, #164]	; (8005868 <TIM_Base_SetConfig+0xb8>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d00b      	beq.n	80057e0 <TIM_Base_SetConfig+0x30>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ce:	d007      	beq.n	80057e0 <TIM_Base_SetConfig+0x30>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a26      	ldr	r2, [pc, #152]	; (800586c <TIM_Base_SetConfig+0xbc>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d003      	beq.n	80057e0 <TIM_Base_SetConfig+0x30>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a25      	ldr	r2, [pc, #148]	; (8005870 <TIM_Base_SetConfig+0xc0>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d108      	bne.n	80057f2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a1c      	ldr	r2, [pc, #112]	; (8005868 <TIM_Base_SetConfig+0xb8>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d00b      	beq.n	8005812 <TIM_Base_SetConfig+0x62>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005800:	d007      	beq.n	8005812 <TIM_Base_SetConfig+0x62>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a19      	ldr	r2, [pc, #100]	; (800586c <TIM_Base_SetConfig+0xbc>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d003      	beq.n	8005812 <TIM_Base_SetConfig+0x62>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a18      	ldr	r2, [pc, #96]	; (8005870 <TIM_Base_SetConfig+0xc0>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d108      	bne.n	8005824 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	4313      	orrs	r3, r2
 8005822:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	4313      	orrs	r3, r2
 8005830:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	689a      	ldr	r2, [r3, #8]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a07      	ldr	r2, [pc, #28]	; (8005868 <TIM_Base_SetConfig+0xb8>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d103      	bne.n	8005858 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	691a      	ldr	r2, [r3, #16]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	615a      	str	r2, [r3, #20]
}
 800585e:	bf00      	nop
 8005860:	3714      	adds	r7, #20
 8005862:	46bd      	mov	sp, r7
 8005864:	bc80      	pop	{r7}
 8005866:	4770      	bx	lr
 8005868:	40012c00 	.word	0x40012c00
 800586c:	40000400 	.word	0x40000400
 8005870:	40000800 	.word	0x40000800

08005874 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005874:	b480      	push	{r7}
 8005876:	b087      	sub	sp, #28
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	f023 0201 	bic.w	r2, r3, #1
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f023 0303 	bic.w	r3, r3, #3
 80058aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f023 0302 	bic.w	r3, r3, #2
 80058bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a1c      	ldr	r2, [pc, #112]	; (800593c <TIM_OC1_SetConfig+0xc8>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d10c      	bne.n	80058ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f023 0308 	bic.w	r3, r3, #8
 80058d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	4313      	orrs	r3, r2
 80058e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	f023 0304 	bic.w	r3, r3, #4
 80058e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a13      	ldr	r2, [pc, #76]	; (800593c <TIM_OC1_SetConfig+0xc8>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d111      	bne.n	8005916 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	4313      	orrs	r3, r2
 800590a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	699b      	ldr	r3, [r3, #24]
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	4313      	orrs	r3, r2
 8005914:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	621a      	str	r2, [r3, #32]
}
 8005930:	bf00      	nop
 8005932:	371c      	adds	r7, #28
 8005934:	46bd      	mov	sp, r7
 8005936:	bc80      	pop	{r7}
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	40012c00 	.word	0x40012c00

08005940 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005940:	b480      	push	{r7}
 8005942:	b087      	sub	sp, #28
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	f023 0210 	bic.w	r2, r3, #16
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800596e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005976:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	021b      	lsls	r3, r3, #8
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	4313      	orrs	r3, r2
 8005982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	f023 0320 	bic.w	r3, r3, #32
 800598a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	011b      	lsls	r3, r3, #4
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	4313      	orrs	r3, r2
 8005996:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a1d      	ldr	r2, [pc, #116]	; (8005a10 <TIM_OC2_SetConfig+0xd0>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d10d      	bne.n	80059bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	011b      	lsls	r3, r3, #4
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a14      	ldr	r2, [pc, #80]	; (8005a10 <TIM_OC2_SetConfig+0xd0>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d113      	bne.n	80059ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	695b      	ldr	r3, [r3, #20]
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	693a      	ldr	r2, [r7, #16]
 80059dc:	4313      	orrs	r3, r2
 80059de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	685a      	ldr	r2, [r3, #4]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	621a      	str	r2, [r3, #32]
}
 8005a06:	bf00      	nop
 8005a08:	371c      	adds	r7, #28
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bc80      	pop	{r7}
 8005a0e:	4770      	bx	lr
 8005a10:	40012c00 	.word	0x40012c00

08005a14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b087      	sub	sp, #28
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a1b      	ldr	r3, [r3, #32]
 8005a22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	69db      	ldr	r3, [r3, #28]
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f023 0303 	bic.w	r3, r3, #3
 8005a4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	021b      	lsls	r3, r3, #8
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a1d      	ldr	r2, [pc, #116]	; (8005ae4 <TIM_OC3_SetConfig+0xd0>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d10d      	bne.n	8005a8e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	021b      	lsls	r3, r3, #8
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a14      	ldr	r2, [pc, #80]	; (8005ae4 <TIM_OC3_SetConfig+0xd0>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d113      	bne.n	8005abe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005aa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	011b      	lsls	r3, r3, #4
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	011b      	lsls	r3, r3, #4
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	621a      	str	r2, [r3, #32]
}
 8005ad8:	bf00      	nop
 8005ada:	371c      	adds	r7, #28
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bc80      	pop	{r7}
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	40012c00 	.word	0x40012c00

08005ae8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b087      	sub	sp, #28
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	021b      	lsls	r3, r3, #8
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	031b      	lsls	r3, r3, #12
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a0f      	ldr	r2, [pc, #60]	; (8005b80 <TIM_OC4_SetConfig+0x98>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d109      	bne.n	8005b5c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	695b      	ldr	r3, [r3, #20]
 8005b54:	019b      	lsls	r3, r3, #6
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	621a      	str	r2, [r3, #32]
}
 8005b76:	bf00      	nop
 8005b78:	371c      	adds	r7, #28
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bc80      	pop	{r7}
 8005b7e:	4770      	bx	lr
 8005b80:	40012c00 	.word	0x40012c00

08005b84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b087      	sub	sp, #28
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	f003 031f 	and.w	r3, r3, #31
 8005b96:	2201      	movs	r2, #1
 8005b98:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6a1a      	ldr	r2, [r3, #32]
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	43db      	mvns	r3, r3
 8005ba6:	401a      	ands	r2, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6a1a      	ldr	r2, [r3, #32]
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	f003 031f 	and.w	r3, r3, #31
 8005bb6:	6879      	ldr	r1, [r7, #4]
 8005bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bbc:	431a      	orrs	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	621a      	str	r2, [r3, #32]
}
 8005bc2:	bf00      	nop
 8005bc4:	371c      	adds	r7, #28
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bc80      	pop	{r7}
 8005bca:	4770      	bx	lr

08005bcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d101      	bne.n	8005be4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005be0:	2302      	movs	r3, #2
 8005be2:	e046      	b.n	8005c72 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2202      	movs	r2, #2
 8005bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a16      	ldr	r2, [pc, #88]	; (8005c7c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d00e      	beq.n	8005c46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c30:	d009      	beq.n	8005c46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a12      	ldr	r2, [pc, #72]	; (8005c80 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d004      	beq.n	8005c46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a10      	ldr	r2, [pc, #64]	; (8005c84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d10c      	bne.n	8005c60 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3714      	adds	r7, #20
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bc80      	pop	{r7}
 8005c7a:	4770      	bx	lr
 8005c7c:	40012c00 	.word	0x40012c00
 8005c80:	40000400 	.word	0x40000400
 8005c84:	40000800 	.word	0x40000800

08005c88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bc80      	pop	{r7}
 8005c98:	4770      	bx	lr

08005c9a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b083      	sub	sp, #12
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ca2:	bf00      	nop
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bc80      	pop	{r7}
 8005caa:	4770      	bx	lr

08005cac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e03f      	b.n	8005d3e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d106      	bne.n	8005cd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f7fb fc9c 	bl	8001610 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2224      	movs	r2, #36	; 0x24
 8005cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68da      	ldr	r2, [r3, #12]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 f829 	bl	8005d48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	691a      	ldr	r2, [r3, #16]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	695a      	ldr	r2, [r3, #20]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68da      	ldr	r2, [r3, #12]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2220      	movs	r2, #32
 8005d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2220      	movs	r2, #32
 8005d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3708      	adds	r7, #8
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
	...

08005d48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68da      	ldr	r2, [r3, #12]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	689a      	ldr	r2, [r3, #8]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	431a      	orrs	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	695b      	ldr	r3, [r3, #20]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005d82:	f023 030c 	bic.w	r3, r3, #12
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	6812      	ldr	r2, [r2, #0]
 8005d8a:	68b9      	ldr	r1, [r7, #8]
 8005d8c:	430b      	orrs	r3, r1
 8005d8e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	699a      	ldr	r2, [r3, #24]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a2c      	ldr	r2, [pc, #176]	; (8005e5c <UART_SetConfig+0x114>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d103      	bne.n	8005db8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005db0:	f7fe ffb8 	bl	8004d24 <HAL_RCC_GetPCLK2Freq>
 8005db4:	60f8      	str	r0, [r7, #12]
 8005db6:	e002      	b.n	8005dbe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005db8:	f7fe ffa0 	bl	8004cfc <HAL_RCC_GetPCLK1Freq>
 8005dbc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	4413      	add	r3, r2
 8005dc6:	009a      	lsls	r2, r3, #2
 8005dc8:	441a      	add	r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dd4:	4a22      	ldr	r2, [pc, #136]	; (8005e60 <UART_SetConfig+0x118>)
 8005dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dda:	095b      	lsrs	r3, r3, #5
 8005ddc:	0119      	lsls	r1, r3, #4
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	4613      	mov	r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	4413      	add	r3, r2
 8005de6:	009a      	lsls	r2, r3, #2
 8005de8:	441a      	add	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005df4:	4b1a      	ldr	r3, [pc, #104]	; (8005e60 <UART_SetConfig+0x118>)
 8005df6:	fba3 0302 	umull	r0, r3, r3, r2
 8005dfa:	095b      	lsrs	r3, r3, #5
 8005dfc:	2064      	movs	r0, #100	; 0x64
 8005dfe:	fb00 f303 	mul.w	r3, r0, r3
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	011b      	lsls	r3, r3, #4
 8005e06:	3332      	adds	r3, #50	; 0x32
 8005e08:	4a15      	ldr	r2, [pc, #84]	; (8005e60 <UART_SetConfig+0x118>)
 8005e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e0e:	095b      	lsrs	r3, r3, #5
 8005e10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e14:	4419      	add	r1, r3
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	4613      	mov	r3, r2
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	4413      	add	r3, r2
 8005e1e:	009a      	lsls	r2, r3, #2
 8005e20:	441a      	add	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e2c:	4b0c      	ldr	r3, [pc, #48]	; (8005e60 <UART_SetConfig+0x118>)
 8005e2e:	fba3 0302 	umull	r0, r3, r3, r2
 8005e32:	095b      	lsrs	r3, r3, #5
 8005e34:	2064      	movs	r0, #100	; 0x64
 8005e36:	fb00 f303 	mul.w	r3, r0, r3
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	011b      	lsls	r3, r3, #4
 8005e3e:	3332      	adds	r3, #50	; 0x32
 8005e40:	4a07      	ldr	r2, [pc, #28]	; (8005e60 <UART_SetConfig+0x118>)
 8005e42:	fba2 2303 	umull	r2, r3, r2, r3
 8005e46:	095b      	lsrs	r3, r3, #5
 8005e48:	f003 020f 	and.w	r2, r3, #15
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	440a      	add	r2, r1
 8005e52:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005e54:	bf00      	nop
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	40013800 	.word	0x40013800
 8005e60:	51eb851f 	.word	0x51eb851f

08005e64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005e64:	b084      	sub	sp, #16
 8005e66:	b480      	push	{r7}
 8005e68:	b083      	sub	sp, #12
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
 8005e6e:	f107 0014 	add.w	r0, r7, #20
 8005e72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bc80      	pop	{r7}
 8005e80:	b004      	add	sp, #16
 8005e82:	4770      	bx	lr

08005e84 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005e94:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005e98:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3714      	adds	r7, #20
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bc80      	pop	{r7}
 8005eae:	4770      	bx	lr

08005eb0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005eb8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005ebc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	43db      	mvns	r3, r3
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	4013      	ands	r3, r2
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3714      	adds	r7, #20
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bc80      	pop	{r7}
 8005ee2:	4770      	bx	lr

08005ee4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	460b      	mov	r3, r1
 8005eee:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	370c      	adds	r7, #12
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bc80      	pop	{r7}
 8005efa:	4770      	bx	lr

08005efc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005efc:	b084      	sub	sp, #16
 8005efe:	b480      	push	{r7}
 8005f00:	b083      	sub	sp, #12
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
 8005f06:	f107 0014 	add.w	r0, r7, #20
 8005f0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bc80      	pop	{r7}
 8005f38:	b004      	add	sp, #16
 8005f3a:	4770      	bx	lr

08005f3c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b09b      	sub	sp, #108	; 0x6c
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f46:	2300      	movs	r3, #0
 8005f48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	881b      	ldrh	r3, [r3, #0]
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f62:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	78db      	ldrb	r3, [r3, #3]
 8005f6a:	2b03      	cmp	r3, #3
 8005f6c:	d81f      	bhi.n	8005fae <USB_ActivateEndpoint+0x72>
 8005f6e:	a201      	add	r2, pc, #4	; (adr r2, 8005f74 <USB_ActivateEndpoint+0x38>)
 8005f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f74:	08005f85 	.word	0x08005f85
 8005f78:	08005fa1 	.word	0x08005fa1
 8005f7c:	08005fb7 	.word	0x08005fb7
 8005f80:	08005f93 	.word	0x08005f93
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005f84:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005f88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f8c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005f90:	e012      	b.n	8005fb8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005f92:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005f96:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005f9a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005f9e:	e00b      	b.n	8005fb8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005fa0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005fa4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005fa8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005fac:	e004      	b.n	8005fb8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005fb4:	e000      	b.n	8005fb8 <USB_ActivateEndpoint+0x7c>
      break;
 8005fb6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	441a      	add	r2, r3
 8005fc2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005fc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4413      	add	r3, r2
 8005fe4:	881b      	ldrh	r3, [r3, #0]
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	441a      	add	r2, r3
 8006008:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800600c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006010:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006014:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800601c:	b29b      	uxth	r3, r3
 800601e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	7b1b      	ldrb	r3, [r3, #12]
 8006024:	2b00      	cmp	r3, #0
 8006026:	f040 8149 	bne.w	80062bc <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	785b      	ldrb	r3, [r3, #1]
 800602e:	2b00      	cmp	r3, #0
 8006030:	f000 8084 	beq.w	800613c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	617b      	str	r3, [r7, #20]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800603e:	b29b      	uxth	r3, r3
 8006040:	461a      	mov	r2, r3
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	4413      	add	r3, r2
 8006046:	617b      	str	r3, [r7, #20]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	011a      	lsls	r2, r3, #4
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	4413      	add	r3, r2
 8006052:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006056:	613b      	str	r3, [r7, #16]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	88db      	ldrh	r3, [r3, #6]
 800605c:	085b      	lsrs	r3, r3, #1
 800605e:	b29b      	uxth	r3, r3
 8006060:	005b      	lsls	r3, r3, #1
 8006062:	b29a      	uxth	r2, r3
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	4413      	add	r3, r2
 8006072:	881b      	ldrh	r3, [r3, #0]
 8006074:	81fb      	strh	r3, [r7, #14]
 8006076:	89fb      	ldrh	r3, [r7, #14]
 8006078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800607c:	2b00      	cmp	r3, #0
 800607e:	d01b      	beq.n	80060b8 <USB_ActivateEndpoint+0x17c>
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4413      	add	r3, r2
 800608a:	881b      	ldrh	r3, [r3, #0]
 800608c:	b29b      	uxth	r3, r3
 800608e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006096:	81bb      	strh	r3, [r7, #12]
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	441a      	add	r2, r3
 80060a2:	89bb      	ldrh	r3, [r7, #12]
 80060a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	78db      	ldrb	r3, [r3, #3]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d020      	beq.n	8006102 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	881b      	ldrh	r3, [r3, #0]
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060d6:	813b      	strh	r3, [r7, #8]
 80060d8:	893b      	ldrh	r3, [r7, #8]
 80060da:	f083 0320 	eor.w	r3, r3, #32
 80060de:	813b      	strh	r3, [r7, #8]
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	441a      	add	r2, r3
 80060ea:	893b      	ldrh	r3, [r7, #8]
 80060ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	8013      	strh	r3, [r2, #0]
 8006100:	e27f      	b.n	8006602 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4413      	add	r3, r2
 800610c:	881b      	ldrh	r3, [r3, #0]
 800610e:	b29b      	uxth	r3, r3
 8006110:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006118:	817b      	strh	r3, [r7, #10]
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	441a      	add	r2, r3
 8006124:	897b      	ldrh	r3, [r7, #10]
 8006126:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800612a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800612e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006136:	b29b      	uxth	r3, r3
 8006138:	8013      	strh	r3, [r2, #0]
 800613a:	e262      	b.n	8006602 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006146:	b29b      	uxth	r3, r3
 8006148:	461a      	mov	r2, r3
 800614a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614c:	4413      	add	r3, r2
 800614e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	011a      	lsls	r2, r3, #4
 8006156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006158:	4413      	add	r3, r2
 800615a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800615e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	88db      	ldrh	r3, [r3, #6]
 8006164:	085b      	lsrs	r3, r3, #1
 8006166:	b29b      	uxth	r3, r3
 8006168:	005b      	lsls	r3, r3, #1
 800616a:	b29a      	uxth	r2, r3
 800616c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	627b      	str	r3, [r7, #36]	; 0x24
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800617a:	b29b      	uxth	r3, r3
 800617c:	461a      	mov	r2, r3
 800617e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006180:	4413      	add	r3, r2
 8006182:	627b      	str	r3, [r7, #36]	; 0x24
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	011a      	lsls	r2, r3, #4
 800618a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618c:	4413      	add	r3, r2
 800618e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006192:	623b      	str	r3, [r7, #32]
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d112      	bne.n	80061c2 <USB_ActivateEndpoint+0x286>
 800619c:	6a3b      	ldr	r3, [r7, #32]
 800619e:	881b      	ldrh	r3, [r3, #0]
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	6a3b      	ldr	r3, [r7, #32]
 80061aa:	801a      	strh	r2, [r3, #0]
 80061ac:	6a3b      	ldr	r3, [r7, #32]
 80061ae:	881b      	ldrh	r3, [r3, #0]
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	6a3b      	ldr	r3, [r7, #32]
 80061be:	801a      	strh	r2, [r3, #0]
 80061c0:	e02f      	b.n	8006222 <USB_ActivateEndpoint+0x2e6>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	2b3e      	cmp	r3, #62	; 0x3e
 80061c8:	d813      	bhi.n	80061f2 <USB_ActivateEndpoint+0x2b6>
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	085b      	lsrs	r3, r3, #1
 80061d0:	663b      	str	r3, [r7, #96]	; 0x60
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d002      	beq.n	80061e4 <USB_ActivateEndpoint+0x2a8>
 80061de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061e0:	3301      	adds	r3, #1
 80061e2:	663b      	str	r3, [r7, #96]	; 0x60
 80061e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	029b      	lsls	r3, r3, #10
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	6a3b      	ldr	r3, [r7, #32]
 80061ee:	801a      	strh	r2, [r3, #0]
 80061f0:	e017      	b.n	8006222 <USB_ActivateEndpoint+0x2e6>
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	095b      	lsrs	r3, r3, #5
 80061f8:	663b      	str	r3, [r7, #96]	; 0x60
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	f003 031f 	and.w	r3, r3, #31
 8006202:	2b00      	cmp	r3, #0
 8006204:	d102      	bne.n	800620c <USB_ActivateEndpoint+0x2d0>
 8006206:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006208:	3b01      	subs	r3, #1
 800620a:	663b      	str	r3, [r7, #96]	; 0x60
 800620c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800620e:	b29b      	uxth	r3, r3
 8006210:	029b      	lsls	r3, r3, #10
 8006212:	b29b      	uxth	r3, r3
 8006214:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006218:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800621c:	b29a      	uxth	r2, r3
 800621e:	6a3b      	ldr	r3, [r7, #32]
 8006220:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	4413      	add	r3, r2
 800622c:	881b      	ldrh	r3, [r3, #0]
 800622e:	83fb      	strh	r3, [r7, #30]
 8006230:	8bfb      	ldrh	r3, [r7, #30]
 8006232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d01b      	beq.n	8006272 <USB_ActivateEndpoint+0x336>
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	4413      	add	r3, r2
 8006244:	881b      	ldrh	r3, [r3, #0]
 8006246:	b29b      	uxth	r3, r3
 8006248:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800624c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006250:	83bb      	strh	r3, [r7, #28]
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	441a      	add	r2, r3
 800625c:	8bbb      	ldrh	r3, [r7, #28]
 800625e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006262:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006266:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800626a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800626e:	b29b      	uxth	r3, r3
 8006270:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	4413      	add	r3, r2
 800627c:	881b      	ldrh	r3, [r3, #0]
 800627e:	b29b      	uxth	r3, r3
 8006280:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006288:	837b      	strh	r3, [r7, #26]
 800628a:	8b7b      	ldrh	r3, [r7, #26]
 800628c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006290:	837b      	strh	r3, [r7, #26]
 8006292:	8b7b      	ldrh	r3, [r7, #26]
 8006294:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006298:	837b      	strh	r3, [r7, #26]
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	441a      	add	r2, r3
 80062a4:	8b7b      	ldrh	r3, [r7, #26]
 80062a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	8013      	strh	r3, [r2, #0]
 80062ba:	e1a2      	b.n	8006602 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4413      	add	r3, r2
 80062c6:	881b      	ldrh	r3, [r3, #0]
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	441a      	add	r2, r3
 80062e0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80062e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062ec:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80062f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006302:	b29b      	uxth	r3, r3
 8006304:	461a      	mov	r2, r3
 8006306:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006308:	4413      	add	r3, r2
 800630a:	65bb      	str	r3, [r7, #88]	; 0x58
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	011a      	lsls	r2, r3, #4
 8006312:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006314:	4413      	add	r3, r2
 8006316:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800631a:	657b      	str	r3, [r7, #84]	; 0x54
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	891b      	ldrh	r3, [r3, #8]
 8006320:	085b      	lsrs	r3, r3, #1
 8006322:	b29b      	uxth	r3, r3
 8006324:	005b      	lsls	r3, r3, #1
 8006326:	b29a      	uxth	r2, r3
 8006328:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800632a:	801a      	strh	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	653b      	str	r3, [r7, #80]	; 0x50
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006336:	b29b      	uxth	r3, r3
 8006338:	461a      	mov	r2, r3
 800633a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800633c:	4413      	add	r3, r2
 800633e:	653b      	str	r3, [r7, #80]	; 0x50
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	011a      	lsls	r2, r3, #4
 8006346:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006348:	4413      	add	r3, r2
 800634a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800634e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	895b      	ldrh	r3, [r3, #10]
 8006354:	085b      	lsrs	r3, r3, #1
 8006356:	b29b      	uxth	r3, r3
 8006358:	005b      	lsls	r3, r3, #1
 800635a:	b29a      	uxth	r2, r3
 800635c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800635e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	785b      	ldrb	r3, [r3, #1]
 8006364:	2b00      	cmp	r3, #0
 8006366:	f040 8091 	bne.w	800648c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4413      	add	r3, r2
 8006374:	881b      	ldrh	r3, [r3, #0]
 8006376:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006378:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800637a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d01b      	beq.n	80063ba <USB_ActivateEndpoint+0x47e>
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4413      	add	r3, r2
 800638c:	881b      	ldrh	r3, [r3, #0]
 800638e:	b29b      	uxth	r3, r3
 8006390:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006398:	877b      	strh	r3, [r7, #58]	; 0x3a
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	441a      	add	r2, r3
 80063a4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80063a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4413      	add	r3, r2
 80063c4:	881b      	ldrh	r3, [r3, #0]
 80063c6:	873b      	strh	r3, [r7, #56]	; 0x38
 80063c8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80063ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d01b      	beq.n	800640a <USB_ActivateEndpoint+0x4ce>
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	4413      	add	r3, r2
 80063dc:	881b      	ldrh	r3, [r3, #0]
 80063de:	b29b      	uxth	r3, r3
 80063e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	441a      	add	r2, r3
 80063f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80063f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006402:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006406:	b29b      	uxth	r3, r3
 8006408:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	4413      	add	r3, r2
 8006414:	881b      	ldrh	r3, [r3, #0]
 8006416:	b29b      	uxth	r3, r3
 8006418:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800641c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006420:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006422:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006424:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006428:	86bb      	strh	r3, [r7, #52]	; 0x34
 800642a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800642c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006430:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	441a      	add	r2, r3
 800643c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800643e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006442:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800644a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800644e:	b29b      	uxth	r3, r3
 8006450:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	881b      	ldrh	r3, [r3, #0]
 800645e:	b29b      	uxth	r3, r3
 8006460:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006464:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006468:	867b      	strh	r3, [r7, #50]	; 0x32
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	441a      	add	r2, r3
 8006474:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006476:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800647a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800647e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006486:	b29b      	uxth	r3, r3
 8006488:	8013      	strh	r3, [r2, #0]
 800648a:	e0ba      	b.n	8006602 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	881b      	ldrh	r3, [r3, #0]
 8006498:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800649c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80064a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d01d      	beq.n	80064e4 <USB_ActivateEndpoint+0x5a8>
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4413      	add	r3, r2
 80064b2:	881b      	ldrh	r3, [r3, #0]
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064be:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	441a      	add	r2, r3
 80064cc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80064d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	4413      	add	r3, r2
 80064ee:	881b      	ldrh	r3, [r3, #0]
 80064f0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80064f4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80064f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d01d      	beq.n	800653c <USB_ActivateEndpoint+0x600>
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4413      	add	r3, r2
 800650a:	881b      	ldrh	r3, [r3, #0]
 800650c:	b29b      	uxth	r3, r3
 800650e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006516:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	441a      	add	r2, r3
 8006524:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006528:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800652c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006530:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006534:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006538:	b29b      	uxth	r3, r3
 800653a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	78db      	ldrb	r3, [r3, #3]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d024      	beq.n	800658e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4413      	add	r3, r2
 800654e:	881b      	ldrh	r3, [r3, #0]
 8006550:	b29b      	uxth	r3, r3
 8006552:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006556:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800655a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800655e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006562:	f083 0320 	eor.w	r3, r3, #32
 8006566:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	441a      	add	r2, r3
 8006574:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006578:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800657c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006580:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006588:	b29b      	uxth	r3, r3
 800658a:	8013      	strh	r3, [r2, #0]
 800658c:	e01d      	b.n	80065ca <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	4413      	add	r3, r2
 8006598:	881b      	ldrh	r3, [r3, #0]
 800659a:	b29b      	uxth	r3, r3
 800659c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065a4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	441a      	add	r2, r3
 80065b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80065b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	881b      	ldrh	r3, [r3, #0]
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065e0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	441a      	add	r2, r3
 80065ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80065ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065fe:	b29b      	uxth	r3, r3
 8006600:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006602:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006606:	4618      	mov	r0, r3
 8006608:	376c      	adds	r7, #108	; 0x6c
 800660a:	46bd      	mov	sp, r7
 800660c:	bc80      	pop	{r7}
 800660e:	4770      	bx	lr

08006610 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006610:	b480      	push	{r7}
 8006612:	b08d      	sub	sp, #52	; 0x34
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	7b1b      	ldrb	r3, [r3, #12]
 800661e:	2b00      	cmp	r3, #0
 8006620:	f040 808e 	bne.w	8006740 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	785b      	ldrb	r3, [r3, #1]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d044      	beq.n	80066b6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4413      	add	r3, r2
 8006636:	881b      	ldrh	r3, [r3, #0]
 8006638:	81bb      	strh	r3, [r7, #12]
 800663a:	89bb      	ldrh	r3, [r7, #12]
 800663c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006640:	2b00      	cmp	r3, #0
 8006642:	d01b      	beq.n	800667c <USB_DeactivateEndpoint+0x6c>
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	4413      	add	r3, r2
 800664e:	881b      	ldrh	r3, [r3, #0]
 8006650:	b29b      	uxth	r3, r3
 8006652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800665a:	817b      	strh	r3, [r7, #10]
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	441a      	add	r2, r3
 8006666:	897b      	ldrh	r3, [r7, #10]
 8006668:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800666c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006670:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006674:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006678:	b29b      	uxth	r3, r3
 800667a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	4413      	add	r3, r2
 8006686:	881b      	ldrh	r3, [r3, #0]
 8006688:	b29b      	uxth	r3, r3
 800668a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800668e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006692:	813b      	strh	r3, [r7, #8]
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	441a      	add	r2, r3
 800669e:	893b      	ldrh	r3, [r7, #8]
 80066a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	8013      	strh	r3, [r2, #0]
 80066b4:	e192      	b.n	80069dc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	881b      	ldrh	r3, [r3, #0]
 80066c2:	827b      	strh	r3, [r7, #18]
 80066c4:	8a7b      	ldrh	r3, [r7, #18]
 80066c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d01b      	beq.n	8006706 <USB_DeactivateEndpoint+0xf6>
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	4413      	add	r3, r2
 80066d8:	881b      	ldrh	r3, [r3, #0]
 80066da:	b29b      	uxth	r3, r3
 80066dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066e4:	823b      	strh	r3, [r7, #16]
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	441a      	add	r2, r3
 80066f0:	8a3b      	ldrh	r3, [r7, #16]
 80066f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006702:	b29b      	uxth	r3, r3
 8006704:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	4413      	add	r3, r2
 8006710:	881b      	ldrh	r3, [r3, #0]
 8006712:	b29b      	uxth	r3, r3
 8006714:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800671c:	81fb      	strh	r3, [r7, #14]
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	441a      	add	r2, r3
 8006728:	89fb      	ldrh	r3, [r7, #14]
 800672a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800672e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800673a:	b29b      	uxth	r3, r3
 800673c:	8013      	strh	r3, [r2, #0]
 800673e:	e14d      	b.n	80069dc <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	785b      	ldrb	r3, [r3, #1]
 8006744:	2b00      	cmp	r3, #0
 8006746:	f040 80a5 	bne.w	8006894 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4413      	add	r3, r2
 8006754:	881b      	ldrh	r3, [r3, #0]
 8006756:	843b      	strh	r3, [r7, #32]
 8006758:	8c3b      	ldrh	r3, [r7, #32]
 800675a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d01b      	beq.n	800679a <USB_DeactivateEndpoint+0x18a>
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	4413      	add	r3, r2
 800676c:	881b      	ldrh	r3, [r3, #0]
 800676e:	b29b      	uxth	r3, r3
 8006770:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006778:	83fb      	strh	r3, [r7, #30]
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	441a      	add	r2, r3
 8006784:	8bfb      	ldrh	r3, [r7, #30]
 8006786:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800678a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800678e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006796:	b29b      	uxth	r3, r3
 8006798:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	4413      	add	r3, r2
 80067a4:	881b      	ldrh	r3, [r3, #0]
 80067a6:	83bb      	strh	r3, [r7, #28]
 80067a8:	8bbb      	ldrh	r3, [r7, #28]
 80067aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d01b      	beq.n	80067ea <USB_DeactivateEndpoint+0x1da>
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	4413      	add	r3, r2
 80067bc:	881b      	ldrh	r3, [r3, #0]
 80067be:	b29b      	uxth	r3, r3
 80067c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067c8:	837b      	strh	r3, [r7, #26]
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	441a      	add	r2, r3
 80067d4:	8b7b      	ldrh	r3, [r7, #26]
 80067d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	4413      	add	r3, r2
 80067f4:	881b      	ldrh	r3, [r3, #0]
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006800:	833b      	strh	r3, [r7, #24]
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	441a      	add	r2, r3
 800680c:	8b3b      	ldrh	r3, [r7, #24]
 800680e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006812:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006816:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800681a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800681e:	b29b      	uxth	r3, r3
 8006820:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	4413      	add	r3, r2
 800682c:	881b      	ldrh	r3, [r3, #0]
 800682e:	b29b      	uxth	r3, r3
 8006830:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006838:	82fb      	strh	r3, [r7, #22]
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	441a      	add	r2, r3
 8006844:	8afb      	ldrh	r3, [r7, #22]
 8006846:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800684a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800684e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006856:	b29b      	uxth	r3, r3
 8006858:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4413      	add	r3, r2
 8006864:	881b      	ldrh	r3, [r3, #0]
 8006866:	b29b      	uxth	r3, r3
 8006868:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800686c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006870:	82bb      	strh	r3, [r7, #20]
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	441a      	add	r2, r3
 800687c:	8abb      	ldrh	r3, [r7, #20]
 800687e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800688a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800688e:	b29b      	uxth	r3, r3
 8006890:	8013      	strh	r3, [r2, #0]
 8006892:	e0a3      	b.n	80069dc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	881b      	ldrh	r3, [r3, #0]
 80068a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80068a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80068a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d01b      	beq.n	80068e4 <USB_DeactivateEndpoint+0x2d4>
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	4413      	add	r3, r2
 80068b6:	881b      	ldrh	r3, [r3, #0]
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	441a      	add	r2, r3
 80068ce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80068d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	4413      	add	r3, r2
 80068ee:	881b      	ldrh	r3, [r3, #0]
 80068f0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80068f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80068f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d01b      	beq.n	8006934 <USB_DeactivateEndpoint+0x324>
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4413      	add	r3, r2
 8006906:	881b      	ldrh	r3, [r3, #0]
 8006908:	b29b      	uxth	r3, r3
 800690a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800690e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006912:	853b      	strh	r3, [r7, #40]	; 0x28
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	441a      	add	r2, r3
 800691e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006920:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006924:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006928:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800692c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006930:	b29b      	uxth	r3, r3
 8006932:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4413      	add	r3, r2
 800693e:	881b      	ldrh	r3, [r3, #0]
 8006940:	b29b      	uxth	r3, r3
 8006942:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800694a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	441a      	add	r2, r3
 8006956:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006958:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800695c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006960:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006968:	b29b      	uxth	r3, r3
 800696a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	4413      	add	r3, r2
 8006976:	881b      	ldrh	r3, [r3, #0]
 8006978:	b29b      	uxth	r3, r3
 800697a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800697e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006982:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	441a      	add	r2, r3
 800698e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006990:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006994:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006998:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800699c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	4413      	add	r3, r2
 80069ae:	881b      	ldrh	r3, [r3, #0]
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ba:	847b      	strh	r3, [r7, #34]	; 0x22
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	441a      	add	r2, r3
 80069c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80069c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069d8:	b29b      	uxth	r3, r3
 80069da:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3734      	adds	r7, #52	; 0x34
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bc80      	pop	{r7}
 80069e6:	4770      	bx	lr

080069e8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b0cc      	sub	sp, #304	; 0x130
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069f6:	6018      	str	r0, [r3, #0]
 80069f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a00:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	785b      	ldrb	r3, [r3, #1]
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	f041 817d 	bne.w	8007d0e <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006a14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	699a      	ldr	r2, [r3, #24]
 8006a20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d908      	bls.n	8006a42 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006a30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006a40:	e007      	b.n	8006a52 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006a42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	699b      	ldr	r3, [r3, #24]
 8006a4e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006a52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	7b1b      	ldrb	r3, [r3, #12]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d152      	bne.n	8006b08 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006a62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6959      	ldr	r1, [r3, #20]
 8006a6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	88da      	ldrh	r2, [r3, #6]
 8006a7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006a84:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006a88:	6800      	ldr	r0, [r0, #0]
 8006a8a:	f001 ff23 	bl	80088d4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006a8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a92:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006a96:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a9a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006a9e:	6812      	ldr	r2, [r2, #0]
 8006aa0:	601a      	str	r2, [r3, #0]
 8006aa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aa6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ab8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006abc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006ac0:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8006ac4:	6812      	ldr	r2, [r2, #0]
 8006ac6:	440a      	add	r2, r1
 8006ac8:	601a      	str	r2, [r3, #0]
 8006aca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ace:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	011a      	lsls	r2, r3, #4
 8006ad8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006adc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006ae8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aec:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006af0:	601a      	str	r2, [r3, #0]
 8006af2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006afc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	801a      	strh	r2, [r3, #0]
 8006b04:	f001 b8b5 	b.w	8007c72 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006b08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	78db      	ldrb	r3, [r3, #3]
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	f040 84c6 	bne.w	80074a6 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006b1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	6a1a      	ldr	r2, [r3, #32]
 8006b26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	f240 8443 	bls.w	80073be <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006b38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	4413      	add	r3, r2
 8006b52:	881b      	ldrh	r3, [r3, #0]
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b5e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006b62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	441a      	add	r2, r3
 8006b7c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006b80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b88:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006b94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	6a1a      	ldr	r2, [r3, #32]
 8006ba0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ba4:	1ad2      	subs	r2, r2, r3
 8006ba6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006baa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006bb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	4413      	add	r3, r2
 8006bcc:	881b      	ldrh	r3, [r3, #0]
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f000 823e 	beq.w	8007056 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006bda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bde:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006be2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006be6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006bea:	6812      	ldr	r2, [r2, #0]
 8006bec:	601a      	str	r2, [r3, #0]
 8006bee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	785b      	ldrb	r3, [r3, #1]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f040 809a 	bne.w	8006d34 <USB_EPStartXfer+0x34c>
 8006c00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c08:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006c0c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006c10:	6812      	ldr	r2, [r2, #0]
 8006c12:	601a      	str	r2, [r3, #0]
 8006c14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	4619      	mov	r1, r3
 8006c26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c2e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006c32:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8006c36:	6812      	ldr	r2, [r2, #0]
 8006c38:	440a      	add	r2, r1
 8006c3a:	601a      	str	r2, [r3, #0]
 8006c3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	011a      	lsls	r2, r3, #4
 8006c4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4413      	add	r3, r2
 8006c56:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006c5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c5e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006c62:	601a      	str	r2, [r3, #0]
 8006c64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d122      	bne.n	8006cb2 <USB_EPStartXfer+0x2ca>
 8006c6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c70:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	881b      	ldrh	r3, [r3, #0]
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c84:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	801a      	strh	r2, [r3, #0]
 8006c8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c90:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	881b      	ldrh	r3, [r3, #0]
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ca8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	801a      	strh	r2, [r3, #0]
 8006cb0:	e079      	b.n	8006da6 <USB_EPStartXfer+0x3be>
 8006cb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cb6:	2b3e      	cmp	r3, #62	; 0x3e
 8006cb8:	d81b      	bhi.n	8006cf2 <USB_EPStartXfer+0x30a>
 8006cba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cbe:	085b      	lsrs	r3, r3, #1
 8006cc0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006cc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cc8:	f003 0301 	and.w	r3, r3, #1
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d004      	beq.n	8006cda <USB_EPStartXfer+0x2f2>
 8006cd0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006cda:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	029b      	lsls	r3, r3, #10
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ce8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	801a      	strh	r2, [r3, #0]
 8006cf0:	e059      	b.n	8006da6 <USB_EPStartXfer+0x3be>
 8006cf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cf6:	095b      	lsrs	r3, r3, #5
 8006cf8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006cfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d00:	f003 031f 	and.w	r3, r3, #31
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d104      	bne.n	8006d12 <USB_EPStartXfer+0x32a>
 8006d08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006d12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	029b      	lsls	r3, r3, #10
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d2a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	801a      	strh	r2, [r3, #0]
 8006d32:	e038      	b.n	8006da6 <USB_EPStartXfer+0x3be>
 8006d34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	785b      	ldrb	r3, [r3, #1]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d130      	bne.n	8006da6 <USB_EPStartXfer+0x3be>
 8006d44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	4619      	mov	r1, r3
 8006d56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d5a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006d5e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d62:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8006d66:	6812      	ldr	r2, [r2, #0]
 8006d68:	440a      	add	r2, r1
 8006d6a:	601a      	str	r2, [r3, #0]
 8006d6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	011a      	lsls	r2, r3, #4
 8006d7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d7e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4413      	add	r3, r2
 8006d86:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006d8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d92:	601a      	str	r2, [r3, #0]
 8006d94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006da6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006daa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	895b      	ldrh	r3, [r3, #10]
 8006db2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006db6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	6959      	ldr	r1, [r3, #20]
 8006dc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006dcc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006dd0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006dd4:	6800      	ldr	r0, [r0, #0]
 8006dd6:	f001 fd7d 	bl	80088d4 <USB_WritePMA>
            ep->xfer_buff += len;
 8006dda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	695a      	ldr	r2, [r3, #20]
 8006de6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dea:	441a      	add	r2, r3
 8006dec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006df0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006df8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	6a1a      	ldr	r2, [r3, #32]
 8006e04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d90f      	bls.n	8006e34 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8006e14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	6a1a      	ldr	r2, [r3, #32]
 8006e20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e24:	1ad2      	subs	r2, r2, r3
 8006e26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	621a      	str	r2, [r3, #32]
 8006e32:	e00e      	b.n	8006e52 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8006e34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	6a1b      	ldr	r3, [r3, #32]
 8006e40:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006e44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006e52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	785b      	ldrb	r3, [r3, #1]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	f040 809a 	bne.w	8006f98 <USB_EPStartXfer+0x5b0>
 8006e64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e68:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006e6c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e70:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006e74:	6812      	ldr	r2, [r2, #0]
 8006e76:	601a      	str	r2, [r3, #0]
 8006e78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	4619      	mov	r1, r3
 8006e8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e8e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006e92:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e96:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8006e9a:	6812      	ldr	r2, [r2, #0]
 8006e9c:	440a      	add	r2, r1
 8006e9e:	601a      	str	r2, [r3, #0]
 8006ea0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ea4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	011a      	lsls	r2, r3, #4
 8006eae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eb2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4413      	add	r3, r2
 8006eba:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006ebe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ec2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006ec6:	601a      	str	r2, [r3, #0]
 8006ec8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d122      	bne.n	8006f16 <USB_EPStartXfer+0x52e>
 8006ed0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ed4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	881b      	ldrh	r3, [r3, #0]
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ee8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	801a      	strh	r2, [r3, #0]
 8006ef0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ef4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	881b      	ldrh	r3, [r3, #0]
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f0c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	801a      	strh	r2, [r3, #0]
 8006f14:	e083      	b.n	800701e <USB_EPStartXfer+0x636>
 8006f16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f1a:	2b3e      	cmp	r3, #62	; 0x3e
 8006f1c:	d81b      	bhi.n	8006f56 <USB_EPStartXfer+0x56e>
 8006f1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f22:	085b      	lsrs	r3, r3, #1
 8006f24:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006f28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f2c:	f003 0301 	and.w	r3, r3, #1
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d004      	beq.n	8006f3e <USB_EPStartXfer+0x556>
 8006f34:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006f38:	3301      	adds	r3, #1
 8006f3a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006f3e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	029b      	lsls	r3, r3, #10
 8006f46:	b29a      	uxth	r2, r3
 8006f48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f4c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	801a      	strh	r2, [r3, #0]
 8006f54:	e063      	b.n	800701e <USB_EPStartXfer+0x636>
 8006f56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f5a:	095b      	lsrs	r3, r3, #5
 8006f5c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006f60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f64:	f003 031f 	and.w	r3, r3, #31
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d104      	bne.n	8006f76 <USB_EPStartXfer+0x58e>
 8006f6c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006f70:	3b01      	subs	r3, #1
 8006f72:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006f76:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	029b      	lsls	r3, r3, #10
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f88:	b29a      	uxth	r2, r3
 8006f8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f8e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	801a      	strh	r2, [r3, #0]
 8006f96:	e042      	b.n	800701e <USB_EPStartXfer+0x636>
 8006f98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	785b      	ldrb	r3, [r3, #1]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d13a      	bne.n	800701e <USB_EPStartXfer+0x636>
 8006fa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006fb0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006fb4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006fb8:	6812      	ldr	r2, [r2, #0]
 8006fba:	601a      	str	r2, [r3, #0]
 8006fbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	4619      	mov	r1, r3
 8006fce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fd2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006fd6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006fda:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8006fde:	6812      	ldr	r2, [r2, #0]
 8006fe0:	440a      	add	r2, r1
 8006fe2:	601a      	str	r2, [r3, #0]
 8006fe4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fe8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	011a      	lsls	r2, r3, #4
 8006ff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ff6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4413      	add	r3, r2
 8006ffe:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007002:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007006:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800700a:	601a      	str	r2, [r3, #0]
 800700c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007010:	b29a      	uxth	r2, r3
 8007012:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007016:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800701e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007022:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	891b      	ldrh	r3, [r3, #8]
 800702a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800702e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007032:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	6959      	ldr	r1, [r3, #20]
 800703a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800703e:	b29b      	uxth	r3, r3
 8007040:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007044:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007048:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800704c:	6800      	ldr	r0, [r0, #0]
 800704e:	f001 fc41 	bl	80088d4 <USB_WritePMA>
 8007052:	f000 be0e 	b.w	8007c72 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007056:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800705a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	785b      	ldrb	r3, [r3, #1]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d16d      	bne.n	8007142 <USB_EPStartXfer+0x75a>
 8007066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800706a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	64bb      	str	r3, [r7, #72]	; 0x48
 8007072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007076:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007080:	b29b      	uxth	r3, r3
 8007082:	461a      	mov	r2, r3
 8007084:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007086:	4413      	add	r3, r2
 8007088:	64bb      	str	r3, [r7, #72]	; 0x48
 800708a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800708e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	011a      	lsls	r2, r3, #4
 8007098:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800709a:	4413      	add	r3, r2
 800709c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80070a0:	647b      	str	r3, [r7, #68]	; 0x44
 80070a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d112      	bne.n	80070d0 <USB_EPStartXfer+0x6e8>
 80070aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070ac:	881b      	ldrh	r3, [r3, #0]
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070b4:	b29a      	uxth	r2, r3
 80070b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070b8:	801a      	strh	r2, [r3, #0]
 80070ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070bc:	881b      	ldrh	r3, [r3, #0]
 80070be:	b29b      	uxth	r3, r3
 80070c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070cc:	801a      	strh	r2, [r3, #0]
 80070ce:	e063      	b.n	8007198 <USB_EPStartXfer+0x7b0>
 80070d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070d4:	2b3e      	cmp	r3, #62	; 0x3e
 80070d6:	d817      	bhi.n	8007108 <USB_EPStartXfer+0x720>
 80070d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070dc:	085b      	lsrs	r3, r3, #1
 80070de:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80070e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d004      	beq.n	80070f8 <USB_EPStartXfer+0x710>
 80070ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80070f2:	3301      	adds	r3, #1
 80070f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80070f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	029b      	lsls	r3, r3, #10
 8007100:	b29a      	uxth	r2, r3
 8007102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007104:	801a      	strh	r2, [r3, #0]
 8007106:	e047      	b.n	8007198 <USB_EPStartXfer+0x7b0>
 8007108:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800710c:	095b      	lsrs	r3, r3, #5
 800710e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007112:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007116:	f003 031f 	and.w	r3, r3, #31
 800711a:	2b00      	cmp	r3, #0
 800711c:	d104      	bne.n	8007128 <USB_EPStartXfer+0x740>
 800711e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007122:	3b01      	subs	r3, #1
 8007124:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007128:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800712c:	b29b      	uxth	r3, r3
 800712e:	029b      	lsls	r3, r3, #10
 8007130:	b29b      	uxth	r3, r3
 8007132:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007136:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800713a:	b29a      	uxth	r2, r3
 800713c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800713e:	801a      	strh	r2, [r3, #0]
 8007140:	e02a      	b.n	8007198 <USB_EPStartXfer+0x7b0>
 8007142:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007146:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	785b      	ldrb	r3, [r3, #1]
 800714e:	2b01      	cmp	r3, #1
 8007150:	d122      	bne.n	8007198 <USB_EPStartXfer+0x7b0>
 8007152:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007156:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	653b      	str	r3, [r7, #80]	; 0x50
 800715e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007162:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800716c:	b29b      	uxth	r3, r3
 800716e:	461a      	mov	r2, r3
 8007170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007172:	4413      	add	r3, r2
 8007174:	653b      	str	r3, [r7, #80]	; 0x50
 8007176:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800717a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	011a      	lsls	r2, r3, #4
 8007184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007186:	4413      	add	r3, r2
 8007188:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800718c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800718e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007192:	b29a      	uxth	r2, r3
 8007194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007196:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007198:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800719c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	891b      	ldrh	r3, [r3, #8]
 80071a4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	6959      	ldr	r1, [r3, #20]
 80071b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80071be:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80071c2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80071c6:	6800      	ldr	r0, [r0, #0]
 80071c8:	f001 fb84 	bl	80088d4 <USB_WritePMA>
            ep->xfer_buff += len;
 80071cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	695a      	ldr	r2, [r3, #20]
 80071d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071dc:	441a      	add	r2, r3
 80071de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80071ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	6a1a      	ldr	r2, [r3, #32]
 80071f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	429a      	cmp	r2, r3
 8007204:	d90f      	bls.n	8007226 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8007206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800720a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	6a1a      	ldr	r2, [r3, #32]
 8007212:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007216:	1ad2      	subs	r2, r2, r3
 8007218:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800721c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	621a      	str	r2, [r3, #32]
 8007224:	e00e      	b.n	8007244 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8007226:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800722a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	6a1b      	ldr	r3, [r3, #32]
 8007232:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007236:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800723a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2200      	movs	r2, #0
 8007242:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007248:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	643b      	str	r3, [r7, #64]	; 0x40
 8007250:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007254:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	785b      	ldrb	r3, [r3, #1]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d16d      	bne.n	800733c <USB_EPStartXfer+0x954>
 8007260:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007264:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	63bb      	str	r3, [r7, #56]	; 0x38
 800726c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007270:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800727a:	b29b      	uxth	r3, r3
 800727c:	461a      	mov	r2, r3
 800727e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007280:	4413      	add	r3, r2
 8007282:	63bb      	str	r3, [r7, #56]	; 0x38
 8007284:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007288:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	011a      	lsls	r2, r3, #4
 8007292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007294:	4413      	add	r3, r2
 8007296:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800729a:	637b      	str	r3, [r7, #52]	; 0x34
 800729c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d112      	bne.n	80072ca <USB_EPStartXfer+0x8e2>
 80072a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072a6:	881b      	ldrh	r3, [r3, #0]
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072ae:	b29a      	uxth	r2, r3
 80072b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072b2:	801a      	strh	r2, [r3, #0]
 80072b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072b6:	881b      	ldrh	r3, [r3, #0]
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072c2:	b29a      	uxth	r2, r3
 80072c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072c6:	801a      	strh	r2, [r3, #0]
 80072c8:	e05d      	b.n	8007386 <USB_EPStartXfer+0x99e>
 80072ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072ce:	2b3e      	cmp	r3, #62	; 0x3e
 80072d0:	d817      	bhi.n	8007302 <USB_EPStartXfer+0x91a>
 80072d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072d6:	085b      	lsrs	r3, r3, #1
 80072d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80072dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072e0:	f003 0301 	and.w	r3, r3, #1
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d004      	beq.n	80072f2 <USB_EPStartXfer+0x90a>
 80072e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80072ec:	3301      	adds	r3, #1
 80072ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80072f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	029b      	lsls	r3, r3, #10
 80072fa:	b29a      	uxth	r2, r3
 80072fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072fe:	801a      	strh	r2, [r3, #0]
 8007300:	e041      	b.n	8007386 <USB_EPStartXfer+0x99e>
 8007302:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007306:	095b      	lsrs	r3, r3, #5
 8007308:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800730c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007310:	f003 031f 	and.w	r3, r3, #31
 8007314:	2b00      	cmp	r3, #0
 8007316:	d104      	bne.n	8007322 <USB_EPStartXfer+0x93a>
 8007318:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800731c:	3b01      	subs	r3, #1
 800731e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007322:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007326:	b29b      	uxth	r3, r3
 8007328:	029b      	lsls	r3, r3, #10
 800732a:	b29b      	uxth	r3, r3
 800732c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007330:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007334:	b29a      	uxth	r2, r3
 8007336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007338:	801a      	strh	r2, [r3, #0]
 800733a:	e024      	b.n	8007386 <USB_EPStartXfer+0x99e>
 800733c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007340:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	785b      	ldrb	r3, [r3, #1]
 8007348:	2b01      	cmp	r3, #1
 800734a:	d11c      	bne.n	8007386 <USB_EPStartXfer+0x99e>
 800734c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007350:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800735a:	b29b      	uxth	r3, r3
 800735c:	461a      	mov	r2, r3
 800735e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007360:	4413      	add	r3, r2
 8007362:	643b      	str	r3, [r7, #64]	; 0x40
 8007364:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007368:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	011a      	lsls	r2, r3, #4
 8007372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007374:	4413      	add	r3, r2
 8007376:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800737a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800737c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007380:	b29a      	uxth	r2, r3
 8007382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007384:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007386:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800738a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	895b      	ldrh	r3, [r3, #10]
 8007392:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007396:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800739a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	6959      	ldr	r1, [r3, #20]
 80073a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80073ac:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80073b0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80073b4:	6800      	ldr	r0, [r0, #0]
 80073b6:	f001 fa8d 	bl	80088d4 <USB_WritePMA>
 80073ba:	f000 bc5a 	b.w	8007c72 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80073be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	6a1b      	ldr	r3, [r3, #32]
 80073ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80073ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	4413      	add	r3, r2
 80073e8:	881b      	ldrh	r3, [r3, #0]
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80073f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073f4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80073f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007406:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	441a      	add	r2, r3
 8007412:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007416:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800741a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800741e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007426:	b29b      	uxth	r3, r3
 8007428:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800742a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800742e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007436:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800743a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007444:	b29b      	uxth	r3, r3
 8007446:	461a      	mov	r2, r3
 8007448:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800744a:	4413      	add	r3, r2
 800744c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800744e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007452:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	011a      	lsls	r2, r3, #4
 800745c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800745e:	4413      	add	r3, r2
 8007460:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007464:	65bb      	str	r3, [r7, #88]	; 0x58
 8007466:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800746a:	b29a      	uxth	r2, r3
 800746c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800746e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007470:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007474:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	891b      	ldrh	r3, [r3, #8]
 800747c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007480:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007484:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	6959      	ldr	r1, [r3, #20]
 800748c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007490:	b29b      	uxth	r3, r3
 8007492:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007496:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800749a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800749e:	6800      	ldr	r0, [r0, #0]
 80074a0:	f001 fa18 	bl	80088d4 <USB_WritePMA>
 80074a4:	e3e5      	b.n	8007c72 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80074a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	4413      	add	r3, r2
 80074c0:	881b      	ldrh	r3, [r3, #0]
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074cc:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80074d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	441a      	add	r2, r3
 80074ea:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80074ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074f6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80074fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074fe:	b29b      	uxth	r3, r3
 8007500:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007502:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007506:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	6a1a      	ldr	r2, [r3, #32]
 800750e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007512:	1ad2      	subs	r2, r2, r3
 8007514:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007518:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007520:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007524:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800752e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	4413      	add	r3, r2
 800753a:	881b      	ldrh	r3, [r3, #0]
 800753c:	b29b      	uxth	r3, r3
 800753e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007542:	2b00      	cmp	r3, #0
 8007544:	f000 81bc 	beq.w	80078c0 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007548:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800754c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007556:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800755a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	785b      	ldrb	r3, [r3, #1]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d16d      	bne.n	8007642 <USB_EPStartXfer+0xc5a>
 8007566:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800756a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	67bb      	str	r3, [r7, #120]	; 0x78
 8007572:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007576:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007580:	b29b      	uxth	r3, r3
 8007582:	461a      	mov	r2, r3
 8007584:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007586:	4413      	add	r3, r2
 8007588:	67bb      	str	r3, [r7, #120]	; 0x78
 800758a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800758e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	011a      	lsls	r2, r3, #4
 8007598:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800759a:	4413      	add	r3, r2
 800759c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80075a0:	677b      	str	r3, [r7, #116]	; 0x74
 80075a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d112      	bne.n	80075d0 <USB_EPStartXfer+0xbe8>
 80075aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075ac:	881b      	ldrh	r3, [r3, #0]
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075b4:	b29a      	uxth	r2, r3
 80075b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075b8:	801a      	strh	r2, [r3, #0]
 80075ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075bc:	881b      	ldrh	r3, [r3, #0]
 80075be:	b29b      	uxth	r3, r3
 80075c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075cc:	801a      	strh	r2, [r3, #0]
 80075ce:	e060      	b.n	8007692 <USB_EPStartXfer+0xcaa>
 80075d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075d4:	2b3e      	cmp	r3, #62	; 0x3e
 80075d6:	d817      	bhi.n	8007608 <USB_EPStartXfer+0xc20>
 80075d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075dc:	085b      	lsrs	r3, r3, #1
 80075de:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80075e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075e6:	f003 0301 	and.w	r3, r3, #1
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d004      	beq.n	80075f8 <USB_EPStartXfer+0xc10>
 80075ee:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80075f2:	3301      	adds	r3, #1
 80075f4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80075f8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	029b      	lsls	r3, r3, #10
 8007600:	b29a      	uxth	r2, r3
 8007602:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007604:	801a      	strh	r2, [r3, #0]
 8007606:	e044      	b.n	8007692 <USB_EPStartXfer+0xcaa>
 8007608:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800760c:	095b      	lsrs	r3, r3, #5
 800760e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007612:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007616:	f003 031f 	and.w	r3, r3, #31
 800761a:	2b00      	cmp	r3, #0
 800761c:	d104      	bne.n	8007628 <USB_EPStartXfer+0xc40>
 800761e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007622:	3b01      	subs	r3, #1
 8007624:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007628:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800762c:	b29b      	uxth	r3, r3
 800762e:	029b      	lsls	r3, r3, #10
 8007630:	b29b      	uxth	r3, r3
 8007632:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007636:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800763a:	b29a      	uxth	r2, r3
 800763c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800763e:	801a      	strh	r2, [r3, #0]
 8007640:	e027      	b.n	8007692 <USB_EPStartXfer+0xcaa>
 8007642:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007646:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	785b      	ldrb	r3, [r3, #1]
 800764e:	2b01      	cmp	r3, #1
 8007650:	d11f      	bne.n	8007692 <USB_EPStartXfer+0xcaa>
 8007652:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007656:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007660:	b29b      	uxth	r3, r3
 8007662:	461a      	mov	r2, r3
 8007664:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007668:	4413      	add	r3, r2
 800766a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800766e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007672:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	011a      	lsls	r2, r3, #4
 800767c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007680:	4413      	add	r3, r2
 8007682:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007686:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007688:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800768c:	b29a      	uxth	r2, r3
 800768e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007690:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007696:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	895b      	ldrh	r3, [r3, #10]
 800769e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	6959      	ldr	r1, [r3, #20]
 80076ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80076b8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80076bc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80076c0:	6800      	ldr	r0, [r0, #0]
 80076c2:	f001 f907 	bl	80088d4 <USB_WritePMA>
          ep->xfer_buff += len;
 80076c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	695a      	ldr	r2, [r3, #20]
 80076d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076d6:	441a      	add	r2, r3
 80076d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80076e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	6a1a      	ldr	r2, [r3, #32]
 80076f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	691b      	ldr	r3, [r3, #16]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d90f      	bls.n	8007720 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8007700:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007704:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	6a1a      	ldr	r2, [r3, #32]
 800770c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007710:	1ad2      	subs	r2, r2, r3
 8007712:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007716:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	621a      	str	r2, [r3, #32]
 800771e:	e00e      	b.n	800773e <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8007720:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007724:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	6a1b      	ldr	r3, [r3, #32]
 800772c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007730:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007734:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2200      	movs	r2, #0
 800773c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800773e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007742:	2b00      	cmp	r3, #0
 8007744:	f000 8295 	beq.w	8007c72 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007748:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800774c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	785b      	ldrb	r3, [r3, #1]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d16d      	bne.n	8007834 <USB_EPStartXfer+0xe4c>
 8007758:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800775c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	66bb      	str	r3, [r7, #104]	; 0x68
 8007764:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007768:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007772:	b29b      	uxth	r3, r3
 8007774:	461a      	mov	r2, r3
 8007776:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007778:	4413      	add	r3, r2
 800777a:	66bb      	str	r3, [r7, #104]	; 0x68
 800777c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007780:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	011a      	lsls	r2, r3, #4
 800778a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800778c:	4413      	add	r3, r2
 800778e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007792:	667b      	str	r3, [r7, #100]	; 0x64
 8007794:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007798:	2b00      	cmp	r3, #0
 800779a:	d112      	bne.n	80077c2 <USB_EPStartXfer+0xdda>
 800779c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800779e:	881b      	ldrh	r3, [r3, #0]
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80077a6:	b29a      	uxth	r2, r3
 80077a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077aa:	801a      	strh	r2, [r3, #0]
 80077ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077ae:	881b      	ldrh	r3, [r3, #0]
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077be:	801a      	strh	r2, [r3, #0]
 80077c0:	e063      	b.n	800788a <USB_EPStartXfer+0xea2>
 80077c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077c6:	2b3e      	cmp	r3, #62	; 0x3e
 80077c8:	d817      	bhi.n	80077fa <USB_EPStartXfer+0xe12>
 80077ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077ce:	085b      	lsrs	r3, r3, #1
 80077d0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80077d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077d8:	f003 0301 	and.w	r3, r3, #1
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d004      	beq.n	80077ea <USB_EPStartXfer+0xe02>
 80077e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077e4:	3301      	adds	r3, #1
 80077e6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80077ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	029b      	lsls	r3, r3, #10
 80077f2:	b29a      	uxth	r2, r3
 80077f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077f6:	801a      	strh	r2, [r3, #0]
 80077f8:	e047      	b.n	800788a <USB_EPStartXfer+0xea2>
 80077fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077fe:	095b      	lsrs	r3, r3, #5
 8007800:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007804:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007808:	f003 031f 	and.w	r3, r3, #31
 800780c:	2b00      	cmp	r3, #0
 800780e:	d104      	bne.n	800781a <USB_EPStartXfer+0xe32>
 8007810:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007814:	3b01      	subs	r3, #1
 8007816:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800781a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800781e:	b29b      	uxth	r3, r3
 8007820:	029b      	lsls	r3, r3, #10
 8007822:	b29b      	uxth	r3, r3
 8007824:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007828:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800782c:	b29a      	uxth	r2, r3
 800782e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007830:	801a      	strh	r2, [r3, #0]
 8007832:	e02a      	b.n	800788a <USB_EPStartXfer+0xea2>
 8007834:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007838:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	785b      	ldrb	r3, [r3, #1]
 8007840:	2b01      	cmp	r3, #1
 8007842:	d122      	bne.n	800788a <USB_EPStartXfer+0xea2>
 8007844:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007848:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	673b      	str	r3, [r7, #112]	; 0x70
 8007850:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007854:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800785e:	b29b      	uxth	r3, r3
 8007860:	461a      	mov	r2, r3
 8007862:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007864:	4413      	add	r3, r2
 8007866:	673b      	str	r3, [r7, #112]	; 0x70
 8007868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800786c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	011a      	lsls	r2, r3, #4
 8007876:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007878:	4413      	add	r3, r2
 800787a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800787e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007880:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007884:	b29a      	uxth	r2, r3
 8007886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007888:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800788a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800788e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	891b      	ldrh	r3, [r3, #8]
 8007896:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800789a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800789e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	6959      	ldr	r1, [r3, #20]
 80078a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80078b0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80078b4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80078b8:	6800      	ldr	r0, [r0, #0]
 80078ba:	f001 f80b 	bl	80088d4 <USB_WritePMA>
 80078be:	e1d8      	b.n	8007c72 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80078c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	785b      	ldrb	r3, [r3, #1]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d178      	bne.n	80079c2 <USB_EPStartXfer+0xfda>
 80078d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80078de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	461a      	mov	r2, r3
 80078f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078f4:	4413      	add	r3, r2
 80078f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80078fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	011a      	lsls	r2, r3, #4
 8007908:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800790c:	4413      	add	r3, r2
 800790e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007912:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007916:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800791a:	2b00      	cmp	r3, #0
 800791c:	d116      	bne.n	800794c <USB_EPStartXfer+0xf64>
 800791e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007922:	881b      	ldrh	r3, [r3, #0]
 8007924:	b29b      	uxth	r3, r3
 8007926:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800792a:	b29a      	uxth	r2, r3
 800792c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007930:	801a      	strh	r2, [r3, #0]
 8007932:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007936:	881b      	ldrh	r3, [r3, #0]
 8007938:	b29b      	uxth	r3, r3
 800793a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800793e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007942:	b29a      	uxth	r2, r3
 8007944:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007948:	801a      	strh	r2, [r3, #0]
 800794a:	e06b      	b.n	8007a24 <USB_EPStartXfer+0x103c>
 800794c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007950:	2b3e      	cmp	r3, #62	; 0x3e
 8007952:	d818      	bhi.n	8007986 <USB_EPStartXfer+0xf9e>
 8007954:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007958:	085b      	lsrs	r3, r3, #1
 800795a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800795e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007962:	f003 0301 	and.w	r3, r3, #1
 8007966:	2b00      	cmp	r3, #0
 8007968:	d004      	beq.n	8007974 <USB_EPStartXfer+0xf8c>
 800796a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800796e:	3301      	adds	r3, #1
 8007970:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007974:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007978:	b29b      	uxth	r3, r3
 800797a:	029b      	lsls	r3, r3, #10
 800797c:	b29a      	uxth	r2, r3
 800797e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007982:	801a      	strh	r2, [r3, #0]
 8007984:	e04e      	b.n	8007a24 <USB_EPStartXfer+0x103c>
 8007986:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800798a:	095b      	lsrs	r3, r3, #5
 800798c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007990:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007994:	f003 031f 	and.w	r3, r3, #31
 8007998:	2b00      	cmp	r3, #0
 800799a:	d104      	bne.n	80079a6 <USB_EPStartXfer+0xfbe>
 800799c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80079a0:	3b01      	subs	r3, #1
 80079a2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80079a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	029b      	lsls	r3, r3, #10
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079b8:	b29a      	uxth	r2, r3
 80079ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079be:	801a      	strh	r2, [r3, #0]
 80079c0:	e030      	b.n	8007a24 <USB_EPStartXfer+0x103c>
 80079c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	785b      	ldrb	r3, [r3, #1]
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d128      	bne.n	8007a24 <USB_EPStartXfer+0x103c>
 80079d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80079e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	461a      	mov	r2, r3
 80079f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80079f6:	4413      	add	r3, r2
 80079f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80079fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	011a      	lsls	r2, r3, #4
 8007a0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007a0e:	4413      	add	r3, r2
 8007a10:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007a18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a1c:	b29a      	uxth	r2, r3
 8007a1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007a22:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007a24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	891b      	ldrh	r3, [r3, #8]
 8007a30:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	6959      	ldr	r1, [r3, #20]
 8007a40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007a4a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007a4e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007a52:	6800      	ldr	r0, [r0, #0]
 8007a54:	f000 ff3e 	bl	80088d4 <USB_WritePMA>
          ep->xfer_buff += len;
 8007a58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	695a      	ldr	r2, [r3, #20]
 8007a64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a68:	441a      	add	r2, r3
 8007a6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007a76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6a1a      	ldr	r2, [r3, #32]
 8007a82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	691b      	ldr	r3, [r3, #16]
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d90f      	bls.n	8007ab2 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8007a92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	6a1a      	ldr	r2, [r3, #32]
 8007a9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007aa2:	1ad2      	subs	r2, r2, r3
 8007aa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aa8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	621a      	str	r2, [r3, #32]
 8007ab0:	e00e      	b.n	8007ad0 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8007ab2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ab6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	6a1b      	ldr	r3, [r3, #32]
 8007abe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007ac2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ac6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2200      	movs	r2, #0
 8007ace:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007ad0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	f000 80cc 	beq.w	8007c72 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007ada:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ade:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007ae8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	785b      	ldrb	r3, [r3, #1]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d178      	bne.n	8007bea <USB_EPStartXfer+0x1202>
 8007af8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007afc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007b06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	461a      	mov	r2, r3
 8007b18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b1c:	4413      	add	r3, r2
 8007b1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007b22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	011a      	lsls	r2, r3, #4
 8007b30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b34:	4413      	add	r3, r2
 8007b36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007b3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d116      	bne.n	8007b74 <USB_EPStartXfer+0x118c>
 8007b46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b4a:	881b      	ldrh	r3, [r3, #0]
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b58:	801a      	strh	r2, [r3, #0]
 8007b5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b5e:	881b      	ldrh	r3, [r3, #0]
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b6a:	b29a      	uxth	r2, r3
 8007b6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b70:	801a      	strh	r2, [r3, #0]
 8007b72:	e064      	b.n	8007c3e <USB_EPStartXfer+0x1256>
 8007b74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b78:	2b3e      	cmp	r3, #62	; 0x3e
 8007b7a:	d818      	bhi.n	8007bae <USB_EPStartXfer+0x11c6>
 8007b7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b80:	085b      	lsrs	r3, r3, #1
 8007b82:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007b86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b8a:	f003 0301 	and.w	r3, r3, #1
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d004      	beq.n	8007b9c <USB_EPStartXfer+0x11b4>
 8007b92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b96:	3301      	adds	r3, #1
 8007b98:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007b9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	029b      	lsls	r3, r3, #10
 8007ba4:	b29a      	uxth	r2, r3
 8007ba6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007baa:	801a      	strh	r2, [r3, #0]
 8007bac:	e047      	b.n	8007c3e <USB_EPStartXfer+0x1256>
 8007bae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bb2:	095b      	lsrs	r3, r3, #5
 8007bb4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007bb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bbc:	f003 031f 	and.w	r3, r3, #31
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d104      	bne.n	8007bce <USB_EPStartXfer+0x11e6>
 8007bc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007bce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	029b      	lsls	r3, r3, #10
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007be0:	b29a      	uxth	r2, r3
 8007be2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007be6:	801a      	strh	r2, [r3, #0]
 8007be8:	e029      	b.n	8007c3e <USB_EPStartXfer+0x1256>
 8007bea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	785b      	ldrb	r3, [r3, #1]
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d121      	bne.n	8007c3e <USB_EPStartXfer+0x1256>
 8007bfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bfe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c10:	4413      	add	r3, r2
 8007c12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	011a      	lsls	r2, r3, #4
 8007c24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c28:	4413      	add	r3, r2
 8007c2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007c32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c36:	b29a      	uxth	r2, r3
 8007c38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c3c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007c3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	895b      	ldrh	r3, [r3, #10]
 8007c4a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	6959      	ldr	r1, [r3, #20]
 8007c5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007c64:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007c68:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007c6c:	6800      	ldr	r0, [r0, #0]
 8007c6e:	f000 fe31 	bl	80088d4 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007c72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	4413      	add	r3, r2
 8007c8c:	881b      	ldrh	r3, [r3, #0]
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007c94:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007c98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ca0:	8013      	strh	r3, [r2, #0]
 8007ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ca6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007caa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007cae:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007cb2:	8812      	ldrh	r2, [r2, #0]
 8007cb4:	f082 0210 	eor.w	r2, r2, #16
 8007cb8:	801a      	strh	r2, [r3, #0]
 8007cba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cbe:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007cc2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007cc6:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007cca:	8812      	ldrh	r2, [r2, #0]
 8007ccc:	f082 0220 	eor.w	r2, r2, #32
 8007cd0:	801a      	strh	r2, [r3, #0]
 8007cd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cd6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ce0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	441a      	add	r2, r3
 8007cec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cf0:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007cf4:	881b      	ldrh	r3, [r3, #0]
 8007cf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	8013      	strh	r3, [r2, #0]
 8007d0a:	f000 bc9f 	b.w	800864c <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007d0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	7b1b      	ldrb	r3, [r3, #12]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f040 80ae 	bne.w	8007e7c <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007d20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	699a      	ldr	r2, [r3, #24]
 8007d2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	691b      	ldr	r3, [r3, #16]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d917      	bls.n	8007d6c <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8007d3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	691b      	ldr	r3, [r3, #16]
 8007d48:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8007d4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	699a      	ldr	r2, [r3, #24]
 8007d58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d5c:	1ad2      	subs	r2, r2, r3
 8007d5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	619a      	str	r2, [r3, #24]
 8007d6a:	e00e      	b.n	8007d8a <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8007d6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	699b      	ldr	r3, [r3, #24]
 8007d78:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8007d7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	2200      	movs	r2, #0
 8007d88:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007d8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	461a      	mov	r2, r3
 8007daa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007dae:	4413      	add	r3, r2
 8007db0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007db4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007db8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	011a      	lsls	r2, r3, #4
 8007dc2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007dc6:	4413      	add	r3, r2
 8007dc8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007dcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007dd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d116      	bne.n	8007e06 <USB_EPStartXfer+0x141e>
 8007dd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ddc:	881b      	ldrh	r3, [r3, #0]
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007dea:	801a      	strh	r2, [r3, #0]
 8007dec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007df0:	881b      	ldrh	r3, [r3, #0]
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007df8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dfc:	b29a      	uxth	r2, r3
 8007dfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e02:	801a      	strh	r2, [r3, #0]
 8007e04:	e3e8      	b.n	80085d8 <USB_EPStartXfer+0x1bf0>
 8007e06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e0a:	2b3e      	cmp	r3, #62	; 0x3e
 8007e0c:	d818      	bhi.n	8007e40 <USB_EPStartXfer+0x1458>
 8007e0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e12:	085b      	lsrs	r3, r3, #1
 8007e14:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007e18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e1c:	f003 0301 	and.w	r3, r3, #1
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d004      	beq.n	8007e2e <USB_EPStartXfer+0x1446>
 8007e24:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e28:	3301      	adds	r3, #1
 8007e2a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007e2e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	029b      	lsls	r3, r3, #10
 8007e36:	b29a      	uxth	r2, r3
 8007e38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e3c:	801a      	strh	r2, [r3, #0]
 8007e3e:	e3cb      	b.n	80085d8 <USB_EPStartXfer+0x1bf0>
 8007e40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e44:	095b      	lsrs	r3, r3, #5
 8007e46:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007e4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e4e:	f003 031f 	and.w	r3, r3, #31
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d104      	bne.n	8007e60 <USB_EPStartXfer+0x1478>
 8007e56:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e5a:	3b01      	subs	r3, #1
 8007e5c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007e60:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	029b      	lsls	r3, r3, #10
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e72:	b29a      	uxth	r2, r3
 8007e74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e78:	801a      	strh	r2, [r3, #0]
 8007e7a:	e3ad      	b.n	80085d8 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007e7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	78db      	ldrb	r3, [r3, #3]
 8007e88:	2b02      	cmp	r3, #2
 8007e8a:	f040 8200 	bne.w	800828e <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007e8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	785b      	ldrb	r3, [r3, #1]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	f040 8091 	bne.w	8007fc2 <USB_EPStartXfer+0x15da>
 8007ea0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ea4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007eae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007ec4:	4413      	add	r3, r2
 8007ec6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007eca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ece:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	011a      	lsls	r2, r3, #4
 8007ed8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007edc:	4413      	add	r3, r2
 8007ede:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ee2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ee6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	691b      	ldr	r3, [r3, #16]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d116      	bne.n	8007f24 <USB_EPStartXfer+0x153c>
 8007ef6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007efa:	881b      	ldrh	r3, [r3, #0]
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f02:	b29a      	uxth	r2, r3
 8007f04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f08:	801a      	strh	r2, [r3, #0]
 8007f0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f0e:	881b      	ldrh	r3, [r3, #0]
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f1a:	b29a      	uxth	r2, r3
 8007f1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f20:	801a      	strh	r2, [r3, #0]
 8007f22:	e083      	b.n	800802c <USB_EPStartXfer+0x1644>
 8007f24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	691b      	ldr	r3, [r3, #16]
 8007f30:	2b3e      	cmp	r3, #62	; 0x3e
 8007f32:	d820      	bhi.n	8007f76 <USB_EPStartXfer+0x158e>
 8007f34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	691b      	ldr	r3, [r3, #16]
 8007f40:	085b      	lsrs	r3, r3, #1
 8007f42:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007f46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	f003 0301 	and.w	r3, r3, #1
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d004      	beq.n	8007f64 <USB_EPStartXfer+0x157c>
 8007f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f5e:	3301      	adds	r3, #1
 8007f60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	029b      	lsls	r3, r3, #10
 8007f6c:	b29a      	uxth	r2, r3
 8007f6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f72:	801a      	strh	r2, [r3, #0]
 8007f74:	e05a      	b.n	800802c <USB_EPStartXfer+0x1644>
 8007f76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	095b      	lsrs	r3, r3, #5
 8007f84:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007f88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	691b      	ldr	r3, [r3, #16]
 8007f94:	f003 031f 	and.w	r3, r3, #31
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d104      	bne.n	8007fa6 <USB_EPStartXfer+0x15be>
 8007f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fa0:	3b01      	subs	r3, #1
 8007fa2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	029b      	lsls	r3, r3, #10
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fb8:	b29a      	uxth	r2, r3
 8007fba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007fbe:	801a      	strh	r2, [r3, #0]
 8007fc0:	e034      	b.n	800802c <USB_EPStartXfer+0x1644>
 8007fc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	785b      	ldrb	r3, [r3, #1]
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d12c      	bne.n	800802c <USB_EPStartXfer+0x1644>
 8007fd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fd6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007fe0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fe4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ff6:	4413      	add	r3, r2
 8007ff8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007ffc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008000:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	011a      	lsls	r2, r3, #4
 800800a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800800e:	4413      	add	r3, r2
 8008010:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008014:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008018:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800801c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	691b      	ldr	r3, [r3, #16]
 8008024:	b29a      	uxth	r2, r3
 8008026:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800802a:	801a      	strh	r2, [r3, #0]
 800802c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008030:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800803a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800803e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	785b      	ldrb	r3, [r3, #1]
 8008046:	2b00      	cmp	r3, #0
 8008048:	f040 8091 	bne.w	800816e <USB_EPStartXfer+0x1786>
 800804c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008050:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800805a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800805e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008068:	b29b      	uxth	r3, r3
 800806a:	461a      	mov	r2, r3
 800806c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008070:	4413      	add	r3, r2
 8008072:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800807a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	011a      	lsls	r2, r3, #4
 8008084:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008088:	4413      	add	r3, r2
 800808a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800808e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008096:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	691b      	ldr	r3, [r3, #16]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d116      	bne.n	80080d0 <USB_EPStartXfer+0x16e8>
 80080a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80080a6:	881b      	ldrh	r3, [r3, #0]
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80080ae:	b29a      	uxth	r2, r3
 80080b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80080b4:	801a      	strh	r2, [r3, #0]
 80080b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80080ba:	881b      	ldrh	r3, [r3, #0]
 80080bc:	b29b      	uxth	r3, r3
 80080be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080c6:	b29a      	uxth	r2, r3
 80080c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80080cc:	801a      	strh	r2, [r3, #0]
 80080ce:	e07c      	b.n	80081ca <USB_EPStartXfer+0x17e2>
 80080d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	691b      	ldr	r3, [r3, #16]
 80080dc:	2b3e      	cmp	r3, #62	; 0x3e
 80080de:	d820      	bhi.n	8008122 <USB_EPStartXfer+0x173a>
 80080e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	085b      	lsrs	r3, r3, #1
 80080ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80080f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	f003 0301 	and.w	r3, r3, #1
 8008102:	2b00      	cmp	r3, #0
 8008104:	d004      	beq.n	8008110 <USB_EPStartXfer+0x1728>
 8008106:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800810a:	3301      	adds	r3, #1
 800810c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008110:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008114:	b29b      	uxth	r3, r3
 8008116:	029b      	lsls	r3, r3, #10
 8008118:	b29a      	uxth	r2, r3
 800811a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800811e:	801a      	strh	r2, [r3, #0]
 8008120:	e053      	b.n	80081ca <USB_EPStartXfer+0x17e2>
 8008122:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008126:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	691b      	ldr	r3, [r3, #16]
 800812e:	095b      	lsrs	r3, r3, #5
 8008130:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008134:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008138:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	691b      	ldr	r3, [r3, #16]
 8008140:	f003 031f 	and.w	r3, r3, #31
 8008144:	2b00      	cmp	r3, #0
 8008146:	d104      	bne.n	8008152 <USB_EPStartXfer+0x176a>
 8008148:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800814c:	3b01      	subs	r3, #1
 800814e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008152:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008156:	b29b      	uxth	r3, r3
 8008158:	029b      	lsls	r3, r3, #10
 800815a:	b29b      	uxth	r3, r3
 800815c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008160:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008164:	b29a      	uxth	r2, r3
 8008166:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800816a:	801a      	strh	r2, [r3, #0]
 800816c:	e02d      	b.n	80081ca <USB_EPStartXfer+0x17e2>
 800816e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008172:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	785b      	ldrb	r3, [r3, #1]
 800817a:	2b01      	cmp	r3, #1
 800817c:	d125      	bne.n	80081ca <USB_EPStartXfer+0x17e2>
 800817e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008182:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800818c:	b29b      	uxth	r3, r3
 800818e:	461a      	mov	r2, r3
 8008190:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008194:	4413      	add	r3, r2
 8008196:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800819a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800819e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	011a      	lsls	r2, r3, #4
 80081a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80081ac:	4413      	add	r3, r2
 80081ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80081b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80081b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	691b      	ldr	r3, [r3, #16]
 80081c2:	b29a      	uxth	r2, r3
 80081c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80081c8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80081ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	69db      	ldr	r3, [r3, #28]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	f000 81fe 	beq.w	80085d8 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80081dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	4413      	add	r3, r2
 80081f6:	881b      	ldrh	r3, [r3, #0]
 80081f8:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80081fc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008200:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008204:	2b00      	cmp	r3, #0
 8008206:	d005      	beq.n	8008214 <USB_EPStartXfer+0x182c>
 8008208:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800820c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008210:	2b00      	cmp	r3, #0
 8008212:	d10d      	bne.n	8008230 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008214:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008218:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800821c:	2b00      	cmp	r3, #0
 800821e:	f040 81db 	bne.w	80085d8 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008222:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800822a:	2b00      	cmp	r3, #0
 800822c:	f040 81d4 	bne.w	80085d8 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008230:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008234:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800823e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	4413      	add	r3, r2
 800824a:	881b      	ldrh	r3, [r3, #0]
 800824c:	b29b      	uxth	r3, r3
 800824e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008256:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800825a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800825e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008268:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	441a      	add	r2, r3
 8008274:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008278:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800827c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008280:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008284:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008288:	b29b      	uxth	r3, r3
 800828a:	8013      	strh	r3, [r2, #0]
 800828c:	e1a4      	b.n	80085d8 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800828e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008292:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	78db      	ldrb	r3, [r3, #3]
 800829a:	2b01      	cmp	r3, #1
 800829c:	f040 819a 	bne.w	80085d4 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80082a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	699a      	ldr	r2, [r3, #24]
 80082ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	691b      	ldr	r3, [r3, #16]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d917      	bls.n	80082ec <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80082bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	691b      	ldr	r3, [r3, #16]
 80082c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80082cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	699a      	ldr	r2, [r3, #24]
 80082d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082dc:	1ad2      	subs	r2, r2, r3
 80082de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	619a      	str	r2, [r3, #24]
 80082ea:	e00e      	b.n	800830a <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80082ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	699b      	ldr	r3, [r3, #24]
 80082f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80082fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008300:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2200      	movs	r2, #0
 8008308:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800830a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800830e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	785b      	ldrb	r3, [r3, #1]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d178      	bne.n	800840c <USB_EPStartXfer+0x1a24>
 800831a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800831e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008328:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800832c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008336:	b29b      	uxth	r3, r3
 8008338:	461a      	mov	r2, r3
 800833a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800833e:	4413      	add	r3, r2
 8008340:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008344:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008348:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	011a      	lsls	r2, r3, #4
 8008352:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008356:	4413      	add	r3, r2
 8008358:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800835c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008360:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008364:	2b00      	cmp	r3, #0
 8008366:	d116      	bne.n	8008396 <USB_EPStartXfer+0x19ae>
 8008368:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800836c:	881b      	ldrh	r3, [r3, #0]
 800836e:	b29b      	uxth	r3, r3
 8008370:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008374:	b29a      	uxth	r2, r3
 8008376:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800837a:	801a      	strh	r2, [r3, #0]
 800837c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008380:	881b      	ldrh	r3, [r3, #0]
 8008382:	b29b      	uxth	r3, r3
 8008384:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008388:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800838c:	b29a      	uxth	r2, r3
 800838e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008392:	801a      	strh	r2, [r3, #0]
 8008394:	e06b      	b.n	800846e <USB_EPStartXfer+0x1a86>
 8008396:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800839a:	2b3e      	cmp	r3, #62	; 0x3e
 800839c:	d818      	bhi.n	80083d0 <USB_EPStartXfer+0x19e8>
 800839e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083a2:	085b      	lsrs	r3, r3, #1
 80083a4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80083a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083ac:	f003 0301 	and.w	r3, r3, #1
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d004      	beq.n	80083be <USB_EPStartXfer+0x19d6>
 80083b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083b8:	3301      	adds	r3, #1
 80083ba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80083be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	029b      	lsls	r3, r3, #10
 80083c6:	b29a      	uxth	r2, r3
 80083c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80083cc:	801a      	strh	r2, [r3, #0]
 80083ce:	e04e      	b.n	800846e <USB_EPStartXfer+0x1a86>
 80083d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083d4:	095b      	lsrs	r3, r3, #5
 80083d6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80083da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083de:	f003 031f 	and.w	r3, r3, #31
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d104      	bne.n	80083f0 <USB_EPStartXfer+0x1a08>
 80083e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083ea:	3b01      	subs	r3, #1
 80083ec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80083f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	029b      	lsls	r3, r3, #10
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008402:	b29a      	uxth	r2, r3
 8008404:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008408:	801a      	strh	r2, [r3, #0]
 800840a:	e030      	b.n	800846e <USB_EPStartXfer+0x1a86>
 800840c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008410:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	785b      	ldrb	r3, [r3, #1]
 8008418:	2b01      	cmp	r3, #1
 800841a:	d128      	bne.n	800846e <USB_EPStartXfer+0x1a86>
 800841c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008420:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800842a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800842e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008438:	b29b      	uxth	r3, r3
 800843a:	461a      	mov	r2, r3
 800843c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008440:	4413      	add	r3, r2
 8008442:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008446:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800844a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	011a      	lsls	r2, r3, #4
 8008454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008458:	4413      	add	r3, r2
 800845a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800845e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008462:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008466:	b29a      	uxth	r2, r3
 8008468:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800846c:	801a      	strh	r2, [r3, #0]
 800846e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008472:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800847c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008480:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	785b      	ldrb	r3, [r3, #1]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d178      	bne.n	800857e <USB_EPStartXfer+0x1b96>
 800848c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008490:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800849a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800849e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	461a      	mov	r2, r3
 80084ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084b0:	4413      	add	r3, r2
 80084b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80084b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	011a      	lsls	r2, r3, #4
 80084c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084c8:	4413      	add	r3, r2
 80084ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80084ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80084d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d116      	bne.n	8008508 <USB_EPStartXfer+0x1b20>
 80084da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80084de:	881b      	ldrh	r3, [r3, #0]
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80084e6:	b29a      	uxth	r2, r3
 80084e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80084ec:	801a      	strh	r2, [r3, #0]
 80084ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80084f2:	881b      	ldrh	r3, [r3, #0]
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084fe:	b29a      	uxth	r2, r3
 8008500:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008504:	801a      	strh	r2, [r3, #0]
 8008506:	e067      	b.n	80085d8 <USB_EPStartXfer+0x1bf0>
 8008508:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800850c:	2b3e      	cmp	r3, #62	; 0x3e
 800850e:	d818      	bhi.n	8008542 <USB_EPStartXfer+0x1b5a>
 8008510:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008514:	085b      	lsrs	r3, r3, #1
 8008516:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800851a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800851e:	f003 0301 	and.w	r3, r3, #1
 8008522:	2b00      	cmp	r3, #0
 8008524:	d004      	beq.n	8008530 <USB_EPStartXfer+0x1b48>
 8008526:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800852a:	3301      	adds	r3, #1
 800852c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008530:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008534:	b29b      	uxth	r3, r3
 8008536:	029b      	lsls	r3, r3, #10
 8008538:	b29a      	uxth	r2, r3
 800853a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800853e:	801a      	strh	r2, [r3, #0]
 8008540:	e04a      	b.n	80085d8 <USB_EPStartXfer+0x1bf0>
 8008542:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008546:	095b      	lsrs	r3, r3, #5
 8008548:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800854c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008550:	f003 031f 	and.w	r3, r3, #31
 8008554:	2b00      	cmp	r3, #0
 8008556:	d104      	bne.n	8008562 <USB_EPStartXfer+0x1b7a>
 8008558:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800855c:	3b01      	subs	r3, #1
 800855e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008562:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008566:	b29b      	uxth	r3, r3
 8008568:	029b      	lsls	r3, r3, #10
 800856a:	b29b      	uxth	r3, r3
 800856c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008570:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008574:	b29a      	uxth	r2, r3
 8008576:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800857a:	801a      	strh	r2, [r3, #0]
 800857c:	e02c      	b.n	80085d8 <USB_EPStartXfer+0x1bf0>
 800857e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008582:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	785b      	ldrb	r3, [r3, #1]
 800858a:	2b01      	cmp	r3, #1
 800858c:	d124      	bne.n	80085d8 <USB_EPStartXfer+0x1bf0>
 800858e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008592:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800859c:	b29b      	uxth	r3, r3
 800859e:	461a      	mov	r2, r3
 80085a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085a4:	4413      	add	r3, r2
 80085a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80085aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	011a      	lsls	r2, r3, #4
 80085b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085bc:	4413      	add	r3, r2
 80085be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80085c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80085c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085ca:	b29a      	uxth	r2, r3
 80085cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085d0:	801a      	strh	r2, [r3, #0]
 80085d2:	e001      	b.n	80085d8 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80085d4:	2301      	movs	r3, #1
 80085d6:	e03a      	b.n	800864e <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80085d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	4413      	add	r3, r2
 80085f2:	881b      	ldrh	r3, [r3, #0]
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085fe:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008602:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008606:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800860a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800860e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008612:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008616:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800861a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800861e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008628:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	441a      	add	r2, r3
 8008634:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008638:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800863c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008640:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008648:	b29b      	uxth	r3, r3
 800864a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800864c:	2300      	movs	r3, #0
}
 800864e:	4618      	mov	r0, r3
 8008650:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	785b      	ldrb	r3, [r3, #1]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d020      	beq.n	80086ac <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	4413      	add	r3, r2
 8008674:	881b      	ldrh	r3, [r3, #0]
 8008676:	b29b      	uxth	r3, r3
 8008678:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800867c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008680:	81bb      	strh	r3, [r7, #12]
 8008682:	89bb      	ldrh	r3, [r7, #12]
 8008684:	f083 0310 	eor.w	r3, r3, #16
 8008688:	81bb      	strh	r3, [r7, #12]
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	441a      	add	r2, r3
 8008694:	89bb      	ldrh	r3, [r7, #12]
 8008696:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800869a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800869e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	8013      	strh	r3, [r2, #0]
 80086aa:	e01f      	b.n	80086ec <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	4413      	add	r3, r2
 80086b6:	881b      	ldrh	r3, [r3, #0]
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086c2:	81fb      	strh	r3, [r7, #14]
 80086c4:	89fb      	ldrh	r3, [r7, #14]
 80086c6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80086ca:	81fb      	strh	r3, [r7, #14]
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	441a      	add	r2, r3
 80086d6:	89fb      	ldrh	r3, [r7, #14]
 80086d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3714      	adds	r7, #20
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bc80      	pop	{r7}
 80086f6:	4770      	bx	lr

080086f8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b087      	sub	sp, #28
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	7b1b      	ldrb	r3, [r3, #12]
 8008706:	2b00      	cmp	r3, #0
 8008708:	f040 809d 	bne.w	8008846 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	785b      	ldrb	r3, [r3, #1]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d04c      	beq.n	80087ae <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	4413      	add	r3, r2
 800871e:	881b      	ldrh	r3, [r3, #0]
 8008720:	823b      	strh	r3, [r7, #16]
 8008722:	8a3b      	ldrh	r3, [r7, #16]
 8008724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008728:	2b00      	cmp	r3, #0
 800872a:	d01b      	beq.n	8008764 <USB_EPClearStall+0x6c>
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	4413      	add	r3, r2
 8008736:	881b      	ldrh	r3, [r3, #0]
 8008738:	b29b      	uxth	r3, r3
 800873a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800873e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008742:	81fb      	strh	r3, [r7, #14]
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	441a      	add	r2, r3
 800874e:	89fb      	ldrh	r3, [r7, #14]
 8008750:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008754:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008758:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800875c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008760:	b29b      	uxth	r3, r3
 8008762:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	78db      	ldrb	r3, [r3, #3]
 8008768:	2b01      	cmp	r3, #1
 800876a:	d06c      	beq.n	8008846 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	4413      	add	r3, r2
 8008776:	881b      	ldrh	r3, [r3, #0]
 8008778:	b29b      	uxth	r3, r3
 800877a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800877e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008782:	81bb      	strh	r3, [r7, #12]
 8008784:	89bb      	ldrh	r3, [r7, #12]
 8008786:	f083 0320 	eor.w	r3, r3, #32
 800878a:	81bb      	strh	r3, [r7, #12]
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	441a      	add	r2, r3
 8008796:	89bb      	ldrh	r3, [r7, #12]
 8008798:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800879c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	8013      	strh	r3, [r2, #0]
 80087ac:	e04b      	b.n	8008846 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	4413      	add	r3, r2
 80087b8:	881b      	ldrh	r3, [r3, #0]
 80087ba:	82fb      	strh	r3, [r7, #22]
 80087bc:	8afb      	ldrh	r3, [r7, #22]
 80087be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d01b      	beq.n	80087fe <USB_EPClearStall+0x106>
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	4413      	add	r3, r2
 80087d0:	881b      	ldrh	r3, [r3, #0]
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087dc:	82bb      	strh	r3, [r7, #20]
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	441a      	add	r2, r3
 80087e8:	8abb      	ldrh	r3, [r7, #20]
 80087ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80087f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	4413      	add	r3, r2
 8008808:	881b      	ldrh	r3, [r3, #0]
 800880a:	b29b      	uxth	r3, r3
 800880c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008814:	827b      	strh	r3, [r7, #18]
 8008816:	8a7b      	ldrh	r3, [r7, #18]
 8008818:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800881c:	827b      	strh	r3, [r7, #18]
 800881e:	8a7b      	ldrh	r3, [r7, #18]
 8008820:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008824:	827b      	strh	r3, [r7, #18]
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	441a      	add	r2, r3
 8008830:	8a7b      	ldrh	r3, [r7, #18]
 8008832:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008836:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800883a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800883e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008842:	b29b      	uxth	r3, r3
 8008844:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	371c      	adds	r7, #28
 800884c:	46bd      	mov	sp, r7
 800884e:	bc80      	pop	{r7}
 8008850:	4770      	bx	lr

08008852 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008852:	b480      	push	{r7}
 8008854:	b083      	sub	sp, #12
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
 800885a:	460b      	mov	r3, r1
 800885c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800885e:	78fb      	ldrb	r3, [r7, #3]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d103      	bne.n	800886c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2280      	movs	r2, #128	; 0x80
 8008868:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	370c      	adds	r7, #12
 8008872:	46bd      	mov	sp, r7
 8008874:	bc80      	pop	{r7}
 8008876:	4770      	bx	lr

08008878 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008878:	b480      	push	{r7}
 800887a:	b083      	sub	sp, #12
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008880:	2300      	movs	r3, #0
}
 8008882:	4618      	mov	r0, r3
 8008884:	370c      	adds	r7, #12
 8008886:	46bd      	mov	sp, r7
 8008888:	bc80      	pop	{r7}
 800888a:	4770      	bx	lr

0800888c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008894:	2300      	movs	r3, #0
}
 8008896:	4618      	mov	r0, r3
 8008898:	370c      	adds	r7, #12
 800889a:	46bd      	mov	sp, r7
 800889c:	bc80      	pop	{r7}
 800889e:	4770      	bx	lr

080088a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b085      	sub	sp, #20
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80088b2:	68fb      	ldr	r3, [r7, #12]
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3714      	adds	r7, #20
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bc80      	pop	{r7}
 80088bc:	4770      	bx	lr

080088be <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80088be:	b480      	push	{r7}
 80088c0:	b083      	sub	sp, #12
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
 80088c6:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	370c      	adds	r7, #12
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bc80      	pop	{r7}
 80088d2:	4770      	bx	lr

080088d4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b08d      	sub	sp, #52	; 0x34
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	4611      	mov	r1, r2
 80088e0:	461a      	mov	r2, r3
 80088e2:	460b      	mov	r3, r1
 80088e4:	80fb      	strh	r3, [r7, #6]
 80088e6:	4613      	mov	r3, r2
 80088e8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80088ea:	88bb      	ldrh	r3, [r7, #4]
 80088ec:	3301      	adds	r3, #1
 80088ee:	085b      	lsrs	r3, r3, #1
 80088f0:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80088fa:	88fb      	ldrh	r3, [r7, #6]
 80088fc:	005a      	lsls	r2, r3, #1
 80088fe:	69fb      	ldr	r3, [r7, #28]
 8008900:	4413      	add	r3, r2
 8008902:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008906:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008908:	6a3b      	ldr	r3, [r7, #32]
 800890a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800890c:	e01e      	b.n	800894c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800890e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008916:	3301      	adds	r3, #1
 8008918:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800891a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	b29b      	uxth	r3, r3
 8008920:	021b      	lsls	r3, r3, #8
 8008922:	b29b      	uxth	r3, r3
 8008924:	461a      	mov	r2, r3
 8008926:	69bb      	ldr	r3, [r7, #24]
 8008928:	4313      	orrs	r3, r2
 800892a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	b29a      	uxth	r2, r3
 8008930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008932:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008936:	3302      	adds	r3, #2
 8008938:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800893a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893c:	3302      	adds	r3, #2
 800893e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008942:	3301      	adds	r3, #1
 8008944:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008948:	3b01      	subs	r3, #1
 800894a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800894c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800894e:	2b00      	cmp	r3, #0
 8008950:	d1dd      	bne.n	800890e <USB_WritePMA+0x3a>
  }
}
 8008952:	bf00      	nop
 8008954:	bf00      	nop
 8008956:	3734      	adds	r7, #52	; 0x34
 8008958:	46bd      	mov	sp, r7
 800895a:	bc80      	pop	{r7}
 800895c:	4770      	bx	lr

0800895e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800895e:	b480      	push	{r7}
 8008960:	b08b      	sub	sp, #44	; 0x2c
 8008962:	af00      	add	r7, sp, #0
 8008964:	60f8      	str	r0, [r7, #12]
 8008966:	60b9      	str	r1, [r7, #8]
 8008968:	4611      	mov	r1, r2
 800896a:	461a      	mov	r2, r3
 800896c:	460b      	mov	r3, r1
 800896e:	80fb      	strh	r3, [r7, #6]
 8008970:	4613      	mov	r3, r2
 8008972:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008974:	88bb      	ldrh	r3, [r7, #4]
 8008976:	085b      	lsrs	r3, r3, #1
 8008978:	b29b      	uxth	r3, r3
 800897a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008984:	88fb      	ldrh	r3, [r7, #6]
 8008986:	005a      	lsls	r2, r3, #1
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	4413      	add	r3, r2
 800898c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008990:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	627b      	str	r3, [r7, #36]	; 0x24
 8008996:	e01b      	b.n	80089d0 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008998:	6a3b      	ldr	r3, [r7, #32]
 800899a:	881b      	ldrh	r3, [r3, #0]
 800899c:	b29b      	uxth	r3, r3
 800899e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80089a0:	6a3b      	ldr	r3, [r7, #32]
 80089a2:	3302      	adds	r3, #2
 80089a4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	b2da      	uxtb	r2, r3
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	3301      	adds	r3, #1
 80089b2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	0a1b      	lsrs	r3, r3, #8
 80089b8:	b2da      	uxtb	r2, r3
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80089be:	69fb      	ldr	r3, [r7, #28]
 80089c0:	3301      	adds	r3, #1
 80089c2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80089c4:	6a3b      	ldr	r3, [r7, #32]
 80089c6:	3302      	adds	r3, #2
 80089c8:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80089ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089cc:	3b01      	subs	r3, #1
 80089ce:	627b      	str	r3, [r7, #36]	; 0x24
 80089d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d1e0      	bne.n	8008998 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80089d6:	88bb      	ldrh	r3, [r7, #4]
 80089d8:	f003 0301 	and.w	r3, r3, #1
 80089dc:	b29b      	uxth	r3, r3
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d007      	beq.n	80089f2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80089e2:	6a3b      	ldr	r3, [r7, #32]
 80089e4:	881b      	ldrh	r3, [r3, #0]
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	b2da      	uxtb	r2, r3
 80089ee:	69fb      	ldr	r3, [r7, #28]
 80089f0:	701a      	strb	r2, [r3, #0]
  }
}
 80089f2:	bf00      	nop
 80089f4:	372c      	adds	r7, #44	; 0x2c
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bc80      	pop	{r7}
 80089fa:	4770      	bx	lr

080089fc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	460b      	mov	r3, r1
 8008a06:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	7c1b      	ldrb	r3, [r3, #16]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d115      	bne.n	8008a40 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008a14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a18:	2202      	movs	r2, #2
 8008a1a:	2181      	movs	r1, #129	; 0x81
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f001 fe30 	bl	800a682 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2201      	movs	r2, #1
 8008a26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008a28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a2c:	2202      	movs	r2, #2
 8008a2e:	2101      	movs	r1, #1
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f001 fe26 	bl	800a682 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2201      	movs	r2, #1
 8008a3a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008a3e:	e012      	b.n	8008a66 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008a40:	2340      	movs	r3, #64	; 0x40
 8008a42:	2202      	movs	r2, #2
 8008a44:	2181      	movs	r1, #129	; 0x81
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f001 fe1b 	bl	800a682 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008a52:	2340      	movs	r3, #64	; 0x40
 8008a54:	2202      	movs	r2, #2
 8008a56:	2101      	movs	r1, #1
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f001 fe12 	bl	800a682 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2201      	movs	r2, #1
 8008a62:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008a66:	2308      	movs	r3, #8
 8008a68:	2203      	movs	r2, #3
 8008a6a:	2182      	movs	r1, #130	; 0x82
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f001 fe08 	bl	800a682 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2201      	movs	r2, #1
 8008a76:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008a78:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008a7c:	f001 ff28 	bl	800a8d0 <USBD_static_malloc>
 8008a80:	4602      	mov	r2, r0
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d102      	bne.n	8008a98 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008a92:	2301      	movs	r3, #1
 8008a94:	73fb      	strb	r3, [r7, #15]
 8008a96:	e026      	b.n	8008ae6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a9e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	2200      	movs	r2, #0
 8008aae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	7c1b      	ldrb	r3, [r3, #16]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d109      	bne.n	8008ad6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ac8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008acc:	2101      	movs	r1, #1
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f001 fec8 	bl	800a864 <USBD_LL_PrepareReceive>
 8008ad4:	e007      	b.n	8008ae6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008adc:	2340      	movs	r3, #64	; 0x40
 8008ade:	2101      	movs	r1, #1
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f001 febf 	bl	800a864 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3710      	adds	r7, #16
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	460b      	mov	r3, r1
 8008afa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008afc:	2300      	movs	r3, #0
 8008afe:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008b00:	2181      	movs	r1, #129	; 0x81
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f001 fde3 	bl	800a6ce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008b0e:	2101      	movs	r1, #1
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f001 fddc 	bl	800a6ce <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008b1e:	2182      	movs	r1, #130	; 0x82
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f001 fdd4 	bl	800a6ce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d00e      	beq.n	8008b54 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b46:	4618      	mov	r0, r3
 8008b48:	f001 fece 	bl	800a8e8 <USBD_static_free>
    pdev->pClassData = NULL;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3710      	adds	r7, #16
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}

08008b5e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b086      	sub	sp, #24
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
 8008b66:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b6e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008b70:	2300      	movs	r3, #0
 8008b72:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008b74:	2300      	movs	r3, #0
 8008b76:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d039      	beq.n	8008bfc <USBD_CDC_Setup+0x9e>
 8008b88:	2b20      	cmp	r3, #32
 8008b8a:	d17f      	bne.n	8008c8c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	88db      	ldrh	r3, [r3, #6]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d029      	beq.n	8008be8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	b25b      	sxtb	r3, r3
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	da11      	bge.n	8008bc2 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	683a      	ldr	r2, [r7, #0]
 8008ba8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008baa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008bac:	683a      	ldr	r2, [r7, #0]
 8008bae:	88d2      	ldrh	r2, [r2, #6]
 8008bb0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008bb2:	6939      	ldr	r1, [r7, #16]
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	88db      	ldrh	r3, [r3, #6]
 8008bb8:	461a      	mov	r2, r3
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f001 f9d9 	bl	8009f72 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008bc0:	e06b      	b.n	8008c9a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	785a      	ldrb	r2, [r3, #1]
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	88db      	ldrh	r3, [r3, #6]
 8008bd0:	b2da      	uxtb	r2, r3
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008bd8:	6939      	ldr	r1, [r7, #16]
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	88db      	ldrh	r3, [r3, #6]
 8008bde:	461a      	mov	r2, r3
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f001 f9f4 	bl	8009fce <USBD_CtlPrepareRx>
      break;
 8008be6:	e058      	b.n	8008c9a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008bee:	689b      	ldr	r3, [r3, #8]
 8008bf0:	683a      	ldr	r2, [r7, #0]
 8008bf2:	7850      	ldrb	r0, [r2, #1]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	6839      	ldr	r1, [r7, #0]
 8008bf8:	4798      	blx	r3
      break;
 8008bfa:	e04e      	b.n	8008c9a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	785b      	ldrb	r3, [r3, #1]
 8008c00:	2b0b      	cmp	r3, #11
 8008c02:	d02e      	beq.n	8008c62 <USBD_CDC_Setup+0x104>
 8008c04:	2b0b      	cmp	r3, #11
 8008c06:	dc38      	bgt.n	8008c7a <USBD_CDC_Setup+0x11c>
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d002      	beq.n	8008c12 <USBD_CDC_Setup+0xb4>
 8008c0c:	2b0a      	cmp	r3, #10
 8008c0e:	d014      	beq.n	8008c3a <USBD_CDC_Setup+0xdc>
 8008c10:	e033      	b.n	8008c7a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c18:	2b03      	cmp	r3, #3
 8008c1a:	d107      	bne.n	8008c2c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008c1c:	f107 030c 	add.w	r3, r7, #12
 8008c20:	2202      	movs	r2, #2
 8008c22:	4619      	mov	r1, r3
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f001 f9a4 	bl	8009f72 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c2a:	e02e      	b.n	8008c8a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008c2c:	6839      	ldr	r1, [r7, #0]
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f001 f935 	bl	8009e9e <USBD_CtlError>
            ret = USBD_FAIL;
 8008c34:	2302      	movs	r3, #2
 8008c36:	75fb      	strb	r3, [r7, #23]
          break;
 8008c38:	e027      	b.n	8008c8a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c40:	2b03      	cmp	r3, #3
 8008c42:	d107      	bne.n	8008c54 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008c44:	f107 030f 	add.w	r3, r7, #15
 8008c48:	2201      	movs	r2, #1
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f001 f990 	bl	8009f72 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c52:	e01a      	b.n	8008c8a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008c54:	6839      	ldr	r1, [r7, #0]
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f001 f921 	bl	8009e9e <USBD_CtlError>
            ret = USBD_FAIL;
 8008c5c:	2302      	movs	r3, #2
 8008c5e:	75fb      	strb	r3, [r7, #23]
          break;
 8008c60:	e013      	b.n	8008c8a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c68:	2b03      	cmp	r3, #3
 8008c6a:	d00d      	beq.n	8008c88 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008c6c:	6839      	ldr	r1, [r7, #0]
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f001 f915 	bl	8009e9e <USBD_CtlError>
            ret = USBD_FAIL;
 8008c74:	2302      	movs	r3, #2
 8008c76:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008c78:	e006      	b.n	8008c88 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008c7a:	6839      	ldr	r1, [r7, #0]
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f001 f90e 	bl	8009e9e <USBD_CtlError>
          ret = USBD_FAIL;
 8008c82:	2302      	movs	r3, #2
 8008c84:	75fb      	strb	r3, [r7, #23]
          break;
 8008c86:	e000      	b.n	8008c8a <USBD_CDC_Setup+0x12c>
          break;
 8008c88:	bf00      	nop
      }
      break;
 8008c8a:	e006      	b.n	8008c9a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008c8c:	6839      	ldr	r1, [r7, #0]
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f001 f905 	bl	8009e9e <USBD_CtlError>
      ret = USBD_FAIL;
 8008c94:	2302      	movs	r3, #2
 8008c96:	75fb      	strb	r3, [r7, #23]
      break;
 8008c98:	bf00      	nop
  }

  return ret;
 8008c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3718      	adds	r7, #24
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	460b      	mov	r3, r1
 8008cae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cb6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008cbe:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d03a      	beq.n	8008d40 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008cca:	78fa      	ldrb	r2, [r7, #3]
 8008ccc:	6879      	ldr	r1, [r7, #4]
 8008cce:	4613      	mov	r3, r2
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	4413      	add	r3, r2
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	440b      	add	r3, r1
 8008cd8:	331c      	adds	r3, #28
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d029      	beq.n	8008d34 <USBD_CDC_DataIn+0x90>
 8008ce0:	78fa      	ldrb	r2, [r7, #3]
 8008ce2:	6879      	ldr	r1, [r7, #4]
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	4413      	add	r3, r2
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	440b      	add	r3, r1
 8008cee:	331c      	adds	r3, #28
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	78f9      	ldrb	r1, [r7, #3]
 8008cf4:	68b8      	ldr	r0, [r7, #8]
 8008cf6:	460b      	mov	r3, r1
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	440b      	add	r3, r1
 8008cfc:	00db      	lsls	r3, r3, #3
 8008cfe:	4403      	add	r3, r0
 8008d00:	3338      	adds	r3, #56	; 0x38
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	fbb2 f1f3 	udiv	r1, r2, r3
 8008d08:	fb01 f303 	mul.w	r3, r1, r3
 8008d0c:	1ad3      	subs	r3, r2, r3
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d110      	bne.n	8008d34 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008d12:	78fa      	ldrb	r2, [r7, #3]
 8008d14:	6879      	ldr	r1, [r7, #4]
 8008d16:	4613      	mov	r3, r2
 8008d18:	009b      	lsls	r3, r3, #2
 8008d1a:	4413      	add	r3, r2
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	440b      	add	r3, r1
 8008d20:	331c      	adds	r3, #28
 8008d22:	2200      	movs	r2, #0
 8008d24:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008d26:	78f9      	ldrb	r1, [r7, #3]
 8008d28:	2300      	movs	r3, #0
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f001 fd76 	bl	800a81e <USBD_LL_Transmit>
 8008d32:	e003      	b.n	8008d3c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2200      	movs	r2, #0
 8008d38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	e000      	b.n	8008d42 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008d40:	2302      	movs	r3, #2
  }
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3710      	adds	r7, #16
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}

08008d4a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b084      	sub	sp, #16
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
 8008d52:	460b      	mov	r3, r1
 8008d54:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d5c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008d5e:	78fb      	ldrb	r3, [r7, #3]
 8008d60:	4619      	mov	r1, r3
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f001 fda1 	bl	800a8aa <USBD_LL_GetRxDataSize>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00d      	beq.n	8008d96 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	68fa      	ldr	r2, [r7, #12]
 8008d84:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008d88:	68fa      	ldr	r2, [r7, #12]
 8008d8a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008d8e:	4611      	mov	r1, r2
 8008d90:	4798      	blx	r3

    return USBD_OK;
 8008d92:	2300      	movs	r3, #0
 8008d94:	e000      	b.n	8008d98 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008d96:	2302      	movs	r3, #2
  }
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3710      	adds	r7, #16
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dae:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d015      	beq.n	8008de6 <USBD_CDC_EP0_RxReady+0x46>
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008dc0:	2bff      	cmp	r3, #255	; 0xff
 8008dc2:	d010      	beq.n	8008de6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	68fa      	ldr	r2, [r7, #12]
 8008dce:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008dd2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008dd4:	68fa      	ldr	r2, [r7, #12]
 8008dd6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008dda:	b292      	uxth	r2, r2
 8008ddc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	22ff      	movs	r2, #255	; 0xff
 8008de2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3710      	adds	r7, #16
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2243      	movs	r2, #67	; 0x43
 8008dfc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008dfe:	4b03      	ldr	r3, [pc, #12]	; (8008e0c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bc80      	pop	{r7}
 8008e08:	4770      	bx	lr
 8008e0a:	bf00      	nop
 8008e0c:	20000098 	.word	0x20000098

08008e10 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2243      	movs	r2, #67	; 0x43
 8008e1c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008e1e:	4b03      	ldr	r3, [pc, #12]	; (8008e2c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bc80      	pop	{r7}
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	20000054 	.word	0x20000054

08008e30 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b083      	sub	sp, #12
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2243      	movs	r2, #67	; 0x43
 8008e3c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008e3e:	4b03      	ldr	r3, [pc, #12]	; (8008e4c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	370c      	adds	r7, #12
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bc80      	pop	{r7}
 8008e48:	4770      	bx	lr
 8008e4a:	bf00      	nop
 8008e4c:	200000dc 	.word	0x200000dc

08008e50 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b083      	sub	sp, #12
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	220a      	movs	r2, #10
 8008e5c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008e5e:	4b03      	ldr	r3, [pc, #12]	; (8008e6c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	370c      	adds	r7, #12
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bc80      	pop	{r7}
 8008e68:	4770      	bx	lr
 8008e6a:	bf00      	nop
 8008e6c:	20000010 	.word	0x20000010

08008e70 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b085      	sub	sp, #20
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008e7a:	2302      	movs	r3, #2
 8008e7c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d005      	beq.n	8008e90 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	683a      	ldr	r2, [r7, #0]
 8008e88:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3714      	adds	r7, #20
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bc80      	pop	{r7}
 8008e9a:	4770      	bx	lr

08008e9c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b087      	sub	sp, #28
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	4613      	mov	r3, r2
 8008ea8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eb0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	68ba      	ldr	r2, [r7, #8]
 8008eb6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008eba:	88fa      	ldrh	r2, [r7, #6]
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008ec2:	2300      	movs	r3, #0
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	371c      	adds	r7, #28
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bc80      	pop	{r7}
 8008ecc:	4770      	bx	lr

08008ece <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008ece:	b480      	push	{r7}
 8008ed0:	b085      	sub	sp, #20
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
 8008ed6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ede:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	683a      	ldr	r2, [r7, #0]
 8008ee4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008ee8:	2300      	movs	r3, #0
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3714      	adds	r7, #20
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bc80      	pop	{r7}
 8008ef2:	4770      	bx	lr

08008ef4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f02:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d017      	beq.n	8008f3e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	7c1b      	ldrb	r3, [r3, #16]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d109      	bne.n	8008f2a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f20:	2101      	movs	r1, #1
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f001 fc9e 	bl	800a864 <USBD_LL_PrepareReceive>
 8008f28:	e007      	b.n	8008f3a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f30:	2340      	movs	r3, #64	; 0x40
 8008f32:	2101      	movs	r1, #1
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f001 fc95 	bl	800a864 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	e000      	b.n	8008f40 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008f3e:	2302      	movs	r3, #2
  }
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3710      	adds	r7, #16
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b084      	sub	sp, #16
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	4613      	mov	r3, r2
 8008f54:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d101      	bne.n	8008f60 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008f5c:	2302      	movs	r3, #2
 8008f5e:	e01a      	b.n	8008f96 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d003      	beq.n	8008f72 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d003      	beq.n	8008f80 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	68ba      	ldr	r2, [r7, #8]
 8008f7c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2201      	movs	r2, #1
 8008f84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	79fa      	ldrb	r2, [r7, #7]
 8008f8c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008f8e:	68f8      	ldr	r0, [r7, #12]
 8008f90:	f001 fb02 	bl	800a598 <USBD_LL_Init>

  return USBD_OK;
 8008f94:	2300      	movs	r3, #0
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3710      	adds	r7, #16
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}

08008f9e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008f9e:	b480      	push	{r7}
 8008fa0:	b085      	sub	sp, #20
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
 8008fa6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d006      	beq.n	8008fc0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	683a      	ldr	r2, [r7, #0]
 8008fb6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	73fb      	strb	r3, [r7, #15]
 8008fbe:	e001      	b.n	8008fc4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008fc0:	2302      	movs	r3, #2
 8008fc2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3714      	adds	r7, #20
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bc80      	pop	{r7}
 8008fce:	4770      	bx	lr

08008fd0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f001 fb37 	bl	800a64c <USBD_LL_Start>

  return USBD_OK;
 8008fde:	2300      	movs	r3, #0
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3708      	adds	r7, #8
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008ff0:	2300      	movs	r3, #0
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	370c      	adds	r7, #12
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bc80      	pop	{r7}
 8008ffa:	4770      	bx	lr

08008ffc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b084      	sub	sp, #16
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	460b      	mov	r3, r1
 8009006:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009008:	2302      	movs	r3, #2
 800900a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009012:	2b00      	cmp	r3, #0
 8009014:	d00c      	beq.n	8009030 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	78fa      	ldrb	r2, [r7, #3]
 8009020:	4611      	mov	r1, r2
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	4798      	blx	r3
 8009026:	4603      	mov	r3, r0
 8009028:	2b00      	cmp	r3, #0
 800902a:	d101      	bne.n	8009030 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800902c:	2300      	movs	r3, #0
 800902e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009030:	7bfb      	ldrb	r3, [r7, #15]
}
 8009032:	4618      	mov	r0, r3
 8009034:	3710      	adds	r7, #16
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800903a:	b580      	push	{r7, lr}
 800903c:	b082      	sub	sp, #8
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
 8009042:	460b      	mov	r3, r1
 8009044:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	78fa      	ldrb	r2, [r7, #3]
 8009050:	4611      	mov	r1, r2
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	4798      	blx	r3

  return USBD_OK;
 8009056:	2300      	movs	r3, #0
}
 8009058:	4618      	mov	r0, r3
 800905a:	3708      	adds	r7, #8
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009070:	6839      	ldr	r1, [r7, #0]
 8009072:	4618      	mov	r0, r3
 8009074:	f000 fed7 	bl	8009e26 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2201      	movs	r2, #1
 800907c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009086:	461a      	mov	r2, r3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009094:	f003 031f 	and.w	r3, r3, #31
 8009098:	2b02      	cmp	r3, #2
 800909a:	d016      	beq.n	80090ca <USBD_LL_SetupStage+0x6a>
 800909c:	2b02      	cmp	r3, #2
 800909e:	d81c      	bhi.n	80090da <USBD_LL_SetupStage+0x7a>
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d002      	beq.n	80090aa <USBD_LL_SetupStage+0x4a>
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d008      	beq.n	80090ba <USBD_LL_SetupStage+0x5a>
 80090a8:	e017      	b.n	80090da <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80090b0:	4619      	mov	r1, r3
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 f9ca 	bl	800944c <USBD_StdDevReq>
      break;
 80090b8:	e01a      	b.n	80090f0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80090c0:	4619      	mov	r1, r3
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 fa2c 	bl	8009520 <USBD_StdItfReq>
      break;
 80090c8:	e012      	b.n	80090f0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80090d0:	4619      	mov	r1, r3
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 fa6c 	bl	80095b0 <USBD_StdEPReq>
      break;
 80090d8:	e00a      	b.n	80090f0 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80090e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80090e4:	b2db      	uxtb	r3, r3
 80090e6:	4619      	mov	r1, r3
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f001 fb0f 	bl	800a70c <USBD_LL_StallEP>
      break;
 80090ee:	bf00      	nop
  }

  return USBD_OK;
 80090f0:	2300      	movs	r3, #0
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3708      	adds	r7, #8
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}

080090fa <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80090fa:	b580      	push	{r7, lr}
 80090fc:	b086      	sub	sp, #24
 80090fe:	af00      	add	r7, sp, #0
 8009100:	60f8      	str	r0, [r7, #12]
 8009102:	460b      	mov	r3, r1
 8009104:	607a      	str	r2, [r7, #4]
 8009106:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009108:	7afb      	ldrb	r3, [r7, #11]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d14b      	bne.n	80091a6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009114:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800911c:	2b03      	cmp	r3, #3
 800911e:	d134      	bne.n	800918a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	68da      	ldr	r2, [r3, #12]
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	691b      	ldr	r3, [r3, #16]
 8009128:	429a      	cmp	r2, r3
 800912a:	d919      	bls.n	8009160 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	68da      	ldr	r2, [r3, #12]
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	691b      	ldr	r3, [r3, #16]
 8009134:	1ad2      	subs	r2, r2, r3
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	68da      	ldr	r2, [r3, #12]
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009142:	429a      	cmp	r2, r3
 8009144:	d203      	bcs.n	800914e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800914a:	b29b      	uxth	r3, r3
 800914c:	e002      	b.n	8009154 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009152:	b29b      	uxth	r3, r3
 8009154:	461a      	mov	r2, r3
 8009156:	6879      	ldr	r1, [r7, #4]
 8009158:	68f8      	ldr	r0, [r7, #12]
 800915a:	f000 ff56 	bl	800a00a <USBD_CtlContinueRx>
 800915e:	e038      	b.n	80091d2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009166:	691b      	ldr	r3, [r3, #16]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d00a      	beq.n	8009182 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009172:	2b03      	cmp	r3, #3
 8009174:	d105      	bne.n	8009182 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800917c:	691b      	ldr	r3, [r3, #16]
 800917e:	68f8      	ldr	r0, [r7, #12]
 8009180:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009182:	68f8      	ldr	r0, [r7, #12]
 8009184:	f000 ff53 	bl	800a02e <USBD_CtlSendStatus>
 8009188:	e023      	b.n	80091d2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009190:	2b05      	cmp	r3, #5
 8009192:	d11e      	bne.n	80091d2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2200      	movs	r2, #0
 8009198:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800919c:	2100      	movs	r1, #0
 800919e:	68f8      	ldr	r0, [r7, #12]
 80091a0:	f001 fab4 	bl	800a70c <USBD_LL_StallEP>
 80091a4:	e015      	b.n	80091d2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091ac:	699b      	ldr	r3, [r3, #24]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d00d      	beq.n	80091ce <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80091b8:	2b03      	cmp	r3, #3
 80091ba:	d108      	bne.n	80091ce <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091c2:	699b      	ldr	r3, [r3, #24]
 80091c4:	7afa      	ldrb	r2, [r7, #11]
 80091c6:	4611      	mov	r1, r2
 80091c8:	68f8      	ldr	r0, [r7, #12]
 80091ca:	4798      	blx	r3
 80091cc:	e001      	b.n	80091d2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80091ce:	2302      	movs	r3, #2
 80091d0:	e000      	b.n	80091d4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80091d2:	2300      	movs	r3, #0
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3718      	adds	r7, #24
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b086      	sub	sp, #24
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	460b      	mov	r3, r1
 80091e6:	607a      	str	r2, [r7, #4]
 80091e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80091ea:	7afb      	ldrb	r3, [r7, #11]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d17f      	bne.n	80092f0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	3314      	adds	r3, #20
 80091f4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80091fc:	2b02      	cmp	r3, #2
 80091fe:	d15c      	bne.n	80092ba <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	68da      	ldr	r2, [r3, #12]
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	691b      	ldr	r3, [r3, #16]
 8009208:	429a      	cmp	r2, r3
 800920a:	d915      	bls.n	8009238 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	68da      	ldr	r2, [r3, #12]
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	691b      	ldr	r3, [r3, #16]
 8009214:	1ad2      	subs	r2, r2, r3
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	68db      	ldr	r3, [r3, #12]
 800921e:	b29b      	uxth	r3, r3
 8009220:	461a      	mov	r2, r3
 8009222:	6879      	ldr	r1, [r7, #4]
 8009224:	68f8      	ldr	r0, [r7, #12]
 8009226:	f000 fec0 	bl	8009faa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800922a:	2300      	movs	r3, #0
 800922c:	2200      	movs	r2, #0
 800922e:	2100      	movs	r1, #0
 8009230:	68f8      	ldr	r0, [r7, #12]
 8009232:	f001 fb17 	bl	800a864 <USBD_LL_PrepareReceive>
 8009236:	e04e      	b.n	80092d6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	689b      	ldr	r3, [r3, #8]
 800923c:	697a      	ldr	r2, [r7, #20]
 800923e:	6912      	ldr	r2, [r2, #16]
 8009240:	fbb3 f1f2 	udiv	r1, r3, r2
 8009244:	fb01 f202 	mul.w	r2, r1, r2
 8009248:	1a9b      	subs	r3, r3, r2
 800924a:	2b00      	cmp	r3, #0
 800924c:	d11c      	bne.n	8009288 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	689a      	ldr	r2, [r3, #8]
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009256:	429a      	cmp	r2, r3
 8009258:	d316      	bcc.n	8009288 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	689a      	ldr	r2, [r3, #8]
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009264:	429a      	cmp	r2, r3
 8009266:	d20f      	bcs.n	8009288 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009268:	2200      	movs	r2, #0
 800926a:	2100      	movs	r1, #0
 800926c:	68f8      	ldr	r0, [r7, #12]
 800926e:	f000 fe9c 	bl	8009faa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2200      	movs	r2, #0
 8009276:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800927a:	2300      	movs	r3, #0
 800927c:	2200      	movs	r2, #0
 800927e:	2100      	movs	r1, #0
 8009280:	68f8      	ldr	r0, [r7, #12]
 8009282:	f001 faef 	bl	800a864 <USBD_LL_PrepareReceive>
 8009286:	e026      	b.n	80092d6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d00a      	beq.n	80092aa <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800929a:	2b03      	cmp	r3, #3
 800929c:	d105      	bne.n	80092aa <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092a4:	68db      	ldr	r3, [r3, #12]
 80092a6:	68f8      	ldr	r0, [r7, #12]
 80092a8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80092aa:	2180      	movs	r1, #128	; 0x80
 80092ac:	68f8      	ldr	r0, [r7, #12]
 80092ae:	f001 fa2d 	bl	800a70c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80092b2:	68f8      	ldr	r0, [r7, #12]
 80092b4:	f000 fece 	bl	800a054 <USBD_CtlReceiveStatus>
 80092b8:	e00d      	b.n	80092d6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80092c0:	2b04      	cmp	r3, #4
 80092c2:	d004      	beq.n	80092ce <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d103      	bne.n	80092d6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80092ce:	2180      	movs	r1, #128	; 0x80
 80092d0:	68f8      	ldr	r0, [r7, #12]
 80092d2:	f001 fa1b 	bl	800a70c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d11d      	bne.n	800931c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	f7ff fe81 	bl	8008fe8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2200      	movs	r2, #0
 80092ea:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80092ee:	e015      	b.n	800931c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092f6:	695b      	ldr	r3, [r3, #20]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d00d      	beq.n	8009318 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009302:	2b03      	cmp	r3, #3
 8009304:	d108      	bne.n	8009318 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800930c:	695b      	ldr	r3, [r3, #20]
 800930e:	7afa      	ldrb	r2, [r7, #11]
 8009310:	4611      	mov	r1, r2
 8009312:	68f8      	ldr	r0, [r7, #12]
 8009314:	4798      	blx	r3
 8009316:	e001      	b.n	800931c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009318:	2302      	movs	r3, #2
 800931a:	e000      	b.n	800931e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800931c:	2300      	movs	r3, #0
}
 800931e:	4618      	mov	r0, r3
 8009320:	3718      	adds	r7, #24
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}

08009326 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009326:	b580      	push	{r7, lr}
 8009328:	b082      	sub	sp, #8
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800932e:	2340      	movs	r3, #64	; 0x40
 8009330:	2200      	movs	r2, #0
 8009332:	2100      	movs	r1, #0
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f001 f9a4 	bl	800a682 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2201      	movs	r2, #1
 800933e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2240      	movs	r2, #64	; 0x40
 8009346:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800934a:	2340      	movs	r3, #64	; 0x40
 800934c:	2200      	movs	r2, #0
 800934e:	2180      	movs	r1, #128	; 0x80
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f001 f996 	bl	800a682 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2201      	movs	r2, #1
 800935a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2240      	movs	r2, #64	; 0x40
 8009360:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2201      	movs	r2, #1
 8009366:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2200      	movs	r2, #0
 8009376:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2200      	movs	r2, #0
 800937c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009386:	2b00      	cmp	r3, #0
 8009388:	d009      	beq.n	800939e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	6852      	ldr	r2, [r2, #4]
 8009396:	b2d2      	uxtb	r2, r2
 8009398:	4611      	mov	r1, r2
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	4798      	blx	r3
  }

  return USBD_OK;
 800939e:	2300      	movs	r3, #0
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3708      	adds	r7, #8
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b083      	sub	sp, #12
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	460b      	mov	r3, r1
 80093b2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	78fa      	ldrb	r2, [r7, #3]
 80093b8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80093ba:	2300      	movs	r3, #0
}
 80093bc:	4618      	mov	r0, r3
 80093be:	370c      	adds	r7, #12
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bc80      	pop	{r7}
 80093c4:	4770      	bx	lr

080093c6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80093c6:	b480      	push	{r7}
 80093c8:	b083      	sub	sp, #12
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2204      	movs	r2, #4
 80093de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80093e2:	2300      	movs	r3, #0
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	370c      	adds	r7, #12
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bc80      	pop	{r7}
 80093ec:	4770      	bx	lr

080093ee <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80093ee:	b480      	push	{r7}
 80093f0:	b083      	sub	sp, #12
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093fc:	2b04      	cmp	r3, #4
 80093fe:	d105      	bne.n	800940c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800940c:	2300      	movs	r3, #0
}
 800940e:	4618      	mov	r0, r3
 8009410:	370c      	adds	r7, #12
 8009412:	46bd      	mov	sp, r7
 8009414:	bc80      	pop	{r7}
 8009416:	4770      	bx	lr

08009418 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009426:	2b03      	cmp	r3, #3
 8009428:	d10b      	bne.n	8009442 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009430:	69db      	ldr	r3, [r3, #28]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d005      	beq.n	8009442 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800943c:	69db      	ldr	r3, [r3, #28]
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009442:	2300      	movs	r3, #0
}
 8009444:	4618      	mov	r0, r3
 8009446:	3708      	adds	r7, #8
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009456:	2300      	movs	r3, #0
 8009458:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009462:	2b40      	cmp	r3, #64	; 0x40
 8009464:	d005      	beq.n	8009472 <USBD_StdDevReq+0x26>
 8009466:	2b40      	cmp	r3, #64	; 0x40
 8009468:	d84f      	bhi.n	800950a <USBD_StdDevReq+0xbe>
 800946a:	2b00      	cmp	r3, #0
 800946c:	d009      	beq.n	8009482 <USBD_StdDevReq+0x36>
 800946e:	2b20      	cmp	r3, #32
 8009470:	d14b      	bne.n	800950a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	6839      	ldr	r1, [r7, #0]
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	4798      	blx	r3
      break;
 8009480:	e048      	b.n	8009514 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	785b      	ldrb	r3, [r3, #1]
 8009486:	2b09      	cmp	r3, #9
 8009488:	d839      	bhi.n	80094fe <USBD_StdDevReq+0xb2>
 800948a:	a201      	add	r2, pc, #4	; (adr r2, 8009490 <USBD_StdDevReq+0x44>)
 800948c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009490:	080094e1 	.word	0x080094e1
 8009494:	080094f5 	.word	0x080094f5
 8009498:	080094ff 	.word	0x080094ff
 800949c:	080094eb 	.word	0x080094eb
 80094a0:	080094ff 	.word	0x080094ff
 80094a4:	080094c3 	.word	0x080094c3
 80094a8:	080094b9 	.word	0x080094b9
 80094ac:	080094ff 	.word	0x080094ff
 80094b0:	080094d7 	.word	0x080094d7
 80094b4:	080094cd 	.word	0x080094cd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80094b8:	6839      	ldr	r1, [r7, #0]
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 f9dc 	bl	8009878 <USBD_GetDescriptor>
          break;
 80094c0:	e022      	b.n	8009508 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80094c2:	6839      	ldr	r1, [r7, #0]
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 fb3f 	bl	8009b48 <USBD_SetAddress>
          break;
 80094ca:	e01d      	b.n	8009508 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80094cc:	6839      	ldr	r1, [r7, #0]
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 fb7e 	bl	8009bd0 <USBD_SetConfig>
          break;
 80094d4:	e018      	b.n	8009508 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80094d6:	6839      	ldr	r1, [r7, #0]
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 fc07 	bl	8009cec <USBD_GetConfig>
          break;
 80094de:	e013      	b.n	8009508 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80094e0:	6839      	ldr	r1, [r7, #0]
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 fc37 	bl	8009d56 <USBD_GetStatus>
          break;
 80094e8:	e00e      	b.n	8009508 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80094ea:	6839      	ldr	r1, [r7, #0]
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 fc65 	bl	8009dbc <USBD_SetFeature>
          break;
 80094f2:	e009      	b.n	8009508 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80094f4:	6839      	ldr	r1, [r7, #0]
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 fc74 	bl	8009de4 <USBD_ClrFeature>
          break;
 80094fc:	e004      	b.n	8009508 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80094fe:	6839      	ldr	r1, [r7, #0]
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f000 fccc 	bl	8009e9e <USBD_CtlError>
          break;
 8009506:	bf00      	nop
      }
      break;
 8009508:	e004      	b.n	8009514 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800950a:	6839      	ldr	r1, [r7, #0]
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 fcc6 	bl	8009e9e <USBD_CtlError>
      break;
 8009512:	bf00      	nop
  }

  return ret;
 8009514:	7bfb      	ldrb	r3, [r7, #15]
}
 8009516:	4618      	mov	r0, r3
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop

08009520 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800952a:	2300      	movs	r3, #0
 800952c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009536:	2b40      	cmp	r3, #64	; 0x40
 8009538:	d005      	beq.n	8009546 <USBD_StdItfReq+0x26>
 800953a:	2b40      	cmp	r3, #64	; 0x40
 800953c:	d82e      	bhi.n	800959c <USBD_StdItfReq+0x7c>
 800953e:	2b00      	cmp	r3, #0
 8009540:	d001      	beq.n	8009546 <USBD_StdItfReq+0x26>
 8009542:	2b20      	cmp	r3, #32
 8009544:	d12a      	bne.n	800959c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800954c:	3b01      	subs	r3, #1
 800954e:	2b02      	cmp	r3, #2
 8009550:	d81d      	bhi.n	800958e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	889b      	ldrh	r3, [r3, #4]
 8009556:	b2db      	uxtb	r3, r3
 8009558:	2b01      	cmp	r3, #1
 800955a:	d813      	bhi.n	8009584 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	6839      	ldr	r1, [r7, #0]
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	4798      	blx	r3
 800956a:	4603      	mov	r3, r0
 800956c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	88db      	ldrh	r3, [r3, #6]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d110      	bne.n	8009598 <USBD_StdItfReq+0x78>
 8009576:	7bfb      	ldrb	r3, [r7, #15]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d10d      	bne.n	8009598 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 fd56 	bl	800a02e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009582:	e009      	b.n	8009598 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009584:	6839      	ldr	r1, [r7, #0]
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f000 fc89 	bl	8009e9e <USBD_CtlError>
          break;
 800958c:	e004      	b.n	8009598 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800958e:	6839      	ldr	r1, [r7, #0]
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 fc84 	bl	8009e9e <USBD_CtlError>
          break;
 8009596:	e000      	b.n	800959a <USBD_StdItfReq+0x7a>
          break;
 8009598:	bf00      	nop
      }
      break;
 800959a:	e004      	b.n	80095a6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800959c:	6839      	ldr	r1, [r7, #0]
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 fc7d 	bl	8009e9e <USBD_CtlError>
      break;
 80095a4:	bf00      	nop
  }

  return USBD_OK;
 80095a6:	2300      	movs	r3, #0
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3710      	adds	r7, #16
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b084      	sub	sp, #16
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80095ba:	2300      	movs	r3, #0
 80095bc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	889b      	ldrh	r3, [r3, #4]
 80095c2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80095cc:	2b40      	cmp	r3, #64	; 0x40
 80095ce:	d007      	beq.n	80095e0 <USBD_StdEPReq+0x30>
 80095d0:	2b40      	cmp	r3, #64	; 0x40
 80095d2:	f200 8146 	bhi.w	8009862 <USBD_StdEPReq+0x2b2>
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d00a      	beq.n	80095f0 <USBD_StdEPReq+0x40>
 80095da:	2b20      	cmp	r3, #32
 80095dc:	f040 8141 	bne.w	8009862 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	6839      	ldr	r1, [r7, #0]
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	4798      	blx	r3
      break;
 80095ee:	e13d      	b.n	800986c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80095f8:	2b20      	cmp	r3, #32
 80095fa:	d10a      	bne.n	8009612 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	6839      	ldr	r1, [r7, #0]
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	4798      	blx	r3
 800960a:	4603      	mov	r3, r0
 800960c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800960e:	7bfb      	ldrb	r3, [r7, #15]
 8009610:	e12d      	b.n	800986e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	785b      	ldrb	r3, [r3, #1]
 8009616:	2b03      	cmp	r3, #3
 8009618:	d007      	beq.n	800962a <USBD_StdEPReq+0x7a>
 800961a:	2b03      	cmp	r3, #3
 800961c:	f300 811b 	bgt.w	8009856 <USBD_StdEPReq+0x2a6>
 8009620:	2b00      	cmp	r3, #0
 8009622:	d072      	beq.n	800970a <USBD_StdEPReq+0x15a>
 8009624:	2b01      	cmp	r3, #1
 8009626:	d03a      	beq.n	800969e <USBD_StdEPReq+0xee>
 8009628:	e115      	b.n	8009856 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009630:	2b02      	cmp	r3, #2
 8009632:	d002      	beq.n	800963a <USBD_StdEPReq+0x8a>
 8009634:	2b03      	cmp	r3, #3
 8009636:	d015      	beq.n	8009664 <USBD_StdEPReq+0xb4>
 8009638:	e02b      	b.n	8009692 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800963a:	7bbb      	ldrb	r3, [r7, #14]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d00c      	beq.n	800965a <USBD_StdEPReq+0xaa>
 8009640:	7bbb      	ldrb	r3, [r7, #14]
 8009642:	2b80      	cmp	r3, #128	; 0x80
 8009644:	d009      	beq.n	800965a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009646:	7bbb      	ldrb	r3, [r7, #14]
 8009648:	4619      	mov	r1, r3
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f001 f85e 	bl	800a70c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009650:	2180      	movs	r1, #128	; 0x80
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f001 f85a 	bl	800a70c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009658:	e020      	b.n	800969c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800965a:	6839      	ldr	r1, [r7, #0]
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 fc1e 	bl	8009e9e <USBD_CtlError>
              break;
 8009662:	e01b      	b.n	800969c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	885b      	ldrh	r3, [r3, #2]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d10e      	bne.n	800968a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800966c:	7bbb      	ldrb	r3, [r7, #14]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d00b      	beq.n	800968a <USBD_StdEPReq+0xda>
 8009672:	7bbb      	ldrb	r3, [r7, #14]
 8009674:	2b80      	cmp	r3, #128	; 0x80
 8009676:	d008      	beq.n	800968a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	88db      	ldrh	r3, [r3, #6]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d104      	bne.n	800968a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009680:	7bbb      	ldrb	r3, [r7, #14]
 8009682:	4619      	mov	r1, r3
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f001 f841 	bl	800a70c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 fccf 	bl	800a02e <USBD_CtlSendStatus>

              break;
 8009690:	e004      	b.n	800969c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009692:	6839      	ldr	r1, [r7, #0]
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 fc02 	bl	8009e9e <USBD_CtlError>
              break;
 800969a:	bf00      	nop
          }
          break;
 800969c:	e0e0      	b.n	8009860 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096a4:	2b02      	cmp	r3, #2
 80096a6:	d002      	beq.n	80096ae <USBD_StdEPReq+0xfe>
 80096a8:	2b03      	cmp	r3, #3
 80096aa:	d015      	beq.n	80096d8 <USBD_StdEPReq+0x128>
 80096ac:	e026      	b.n	80096fc <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096ae:	7bbb      	ldrb	r3, [r7, #14]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d00c      	beq.n	80096ce <USBD_StdEPReq+0x11e>
 80096b4:	7bbb      	ldrb	r3, [r7, #14]
 80096b6:	2b80      	cmp	r3, #128	; 0x80
 80096b8:	d009      	beq.n	80096ce <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80096ba:	7bbb      	ldrb	r3, [r7, #14]
 80096bc:	4619      	mov	r1, r3
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f001 f824 	bl	800a70c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80096c4:	2180      	movs	r1, #128	; 0x80
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f001 f820 	bl	800a70c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80096cc:	e01c      	b.n	8009708 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80096ce:	6839      	ldr	r1, [r7, #0]
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 fbe4 	bl	8009e9e <USBD_CtlError>
              break;
 80096d6:	e017      	b.n	8009708 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	885b      	ldrh	r3, [r3, #2]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d112      	bne.n	8009706 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80096e0:	7bbb      	ldrb	r3, [r7, #14]
 80096e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d004      	beq.n	80096f4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80096ea:	7bbb      	ldrb	r3, [r7, #14]
 80096ec:	4619      	mov	r1, r3
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f001 f82b 	bl	800a74a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 fc9a 	bl	800a02e <USBD_CtlSendStatus>
              }
              break;
 80096fa:	e004      	b.n	8009706 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80096fc:	6839      	ldr	r1, [r7, #0]
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 fbcd 	bl	8009e9e <USBD_CtlError>
              break;
 8009704:	e000      	b.n	8009708 <USBD_StdEPReq+0x158>
              break;
 8009706:	bf00      	nop
          }
          break;
 8009708:	e0aa      	b.n	8009860 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009710:	2b02      	cmp	r3, #2
 8009712:	d002      	beq.n	800971a <USBD_StdEPReq+0x16a>
 8009714:	2b03      	cmp	r3, #3
 8009716:	d032      	beq.n	800977e <USBD_StdEPReq+0x1ce>
 8009718:	e097      	b.n	800984a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800971a:	7bbb      	ldrb	r3, [r7, #14]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d007      	beq.n	8009730 <USBD_StdEPReq+0x180>
 8009720:	7bbb      	ldrb	r3, [r7, #14]
 8009722:	2b80      	cmp	r3, #128	; 0x80
 8009724:	d004      	beq.n	8009730 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009726:	6839      	ldr	r1, [r7, #0]
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 fbb8 	bl	8009e9e <USBD_CtlError>
                break;
 800972e:	e091      	b.n	8009854 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009730:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009734:	2b00      	cmp	r3, #0
 8009736:	da0b      	bge.n	8009750 <USBD_StdEPReq+0x1a0>
 8009738:	7bbb      	ldrb	r3, [r7, #14]
 800973a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800973e:	4613      	mov	r3, r2
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	4413      	add	r3, r2
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	3310      	adds	r3, #16
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	4413      	add	r3, r2
 800974c:	3304      	adds	r3, #4
 800974e:	e00b      	b.n	8009768 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009750:	7bbb      	ldrb	r3, [r7, #14]
 8009752:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009756:	4613      	mov	r3, r2
 8009758:	009b      	lsls	r3, r3, #2
 800975a:	4413      	add	r3, r2
 800975c:	009b      	lsls	r3, r3, #2
 800975e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	4413      	add	r3, r2
 8009766:	3304      	adds	r3, #4
 8009768:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	2200      	movs	r2, #0
 800976e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	2202      	movs	r2, #2
 8009774:	4619      	mov	r1, r3
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 fbfb 	bl	8009f72 <USBD_CtlSendData>
              break;
 800977c:	e06a      	b.n	8009854 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800977e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009782:	2b00      	cmp	r3, #0
 8009784:	da11      	bge.n	80097aa <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009786:	7bbb      	ldrb	r3, [r7, #14]
 8009788:	f003 020f 	and.w	r2, r3, #15
 800978c:	6879      	ldr	r1, [r7, #4]
 800978e:	4613      	mov	r3, r2
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	4413      	add	r3, r2
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	440b      	add	r3, r1
 8009798:	3318      	adds	r3, #24
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d117      	bne.n	80097d0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80097a0:	6839      	ldr	r1, [r7, #0]
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 fb7b 	bl	8009e9e <USBD_CtlError>
                  break;
 80097a8:	e054      	b.n	8009854 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80097aa:	7bbb      	ldrb	r3, [r7, #14]
 80097ac:	f003 020f 	and.w	r2, r3, #15
 80097b0:	6879      	ldr	r1, [r7, #4]
 80097b2:	4613      	mov	r3, r2
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	4413      	add	r3, r2
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	440b      	add	r3, r1
 80097bc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d104      	bne.n	80097d0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80097c6:	6839      	ldr	r1, [r7, #0]
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 fb68 	bl	8009e9e <USBD_CtlError>
                  break;
 80097ce:	e041      	b.n	8009854 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	da0b      	bge.n	80097f0 <USBD_StdEPReq+0x240>
 80097d8:	7bbb      	ldrb	r3, [r7, #14]
 80097da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097de:	4613      	mov	r3, r2
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	4413      	add	r3, r2
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	3310      	adds	r3, #16
 80097e8:	687a      	ldr	r2, [r7, #4]
 80097ea:	4413      	add	r3, r2
 80097ec:	3304      	adds	r3, #4
 80097ee:	e00b      	b.n	8009808 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80097f0:	7bbb      	ldrb	r3, [r7, #14]
 80097f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097f6:	4613      	mov	r3, r2
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	4413      	add	r3, r2
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	4413      	add	r3, r2
 8009806:	3304      	adds	r3, #4
 8009808:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800980a:	7bbb      	ldrb	r3, [r7, #14]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d002      	beq.n	8009816 <USBD_StdEPReq+0x266>
 8009810:	7bbb      	ldrb	r3, [r7, #14]
 8009812:	2b80      	cmp	r3, #128	; 0x80
 8009814:	d103      	bne.n	800981e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	2200      	movs	r2, #0
 800981a:	601a      	str	r2, [r3, #0]
 800981c:	e00e      	b.n	800983c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800981e:	7bbb      	ldrb	r3, [r7, #14]
 8009820:	4619      	mov	r1, r3
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 ffb0 	bl	800a788 <USBD_LL_IsStallEP>
 8009828:	4603      	mov	r3, r0
 800982a:	2b00      	cmp	r3, #0
 800982c:	d003      	beq.n	8009836 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	2201      	movs	r2, #1
 8009832:	601a      	str	r2, [r3, #0]
 8009834:	e002      	b.n	800983c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	2200      	movs	r2, #0
 800983a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	2202      	movs	r2, #2
 8009840:	4619      	mov	r1, r3
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 fb95 	bl	8009f72 <USBD_CtlSendData>
              break;
 8009848:	e004      	b.n	8009854 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800984a:	6839      	ldr	r1, [r7, #0]
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 fb26 	bl	8009e9e <USBD_CtlError>
              break;
 8009852:	bf00      	nop
          }
          break;
 8009854:	e004      	b.n	8009860 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009856:	6839      	ldr	r1, [r7, #0]
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 fb20 	bl	8009e9e <USBD_CtlError>
          break;
 800985e:	bf00      	nop
      }
      break;
 8009860:	e004      	b.n	800986c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009862:	6839      	ldr	r1, [r7, #0]
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f000 fb1a 	bl	8009e9e <USBD_CtlError>
      break;
 800986a:	bf00      	nop
  }

  return ret;
 800986c:	7bfb      	ldrb	r3, [r7, #15]
}
 800986e:	4618      	mov	r0, r3
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
	...

08009878 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009882:	2300      	movs	r3, #0
 8009884:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009886:	2300      	movs	r3, #0
 8009888:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800988a:	2300      	movs	r3, #0
 800988c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	885b      	ldrh	r3, [r3, #2]
 8009892:	0a1b      	lsrs	r3, r3, #8
 8009894:	b29b      	uxth	r3, r3
 8009896:	3b01      	subs	r3, #1
 8009898:	2b06      	cmp	r3, #6
 800989a:	f200 8128 	bhi.w	8009aee <USBD_GetDescriptor+0x276>
 800989e:	a201      	add	r2, pc, #4	; (adr r2, 80098a4 <USBD_GetDescriptor+0x2c>)
 80098a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a4:	080098c1 	.word	0x080098c1
 80098a8:	080098d9 	.word	0x080098d9
 80098ac:	08009919 	.word	0x08009919
 80098b0:	08009aef 	.word	0x08009aef
 80098b4:	08009aef 	.word	0x08009aef
 80098b8:	08009a8f 	.word	0x08009a8f
 80098bc:	08009abb 	.word	0x08009abb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	7c12      	ldrb	r2, [r2, #16]
 80098cc:	f107 0108 	add.w	r1, r7, #8
 80098d0:	4610      	mov	r0, r2
 80098d2:	4798      	blx	r3
 80098d4:	60f8      	str	r0, [r7, #12]
      break;
 80098d6:	e112      	b.n	8009afe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	7c1b      	ldrb	r3, [r3, #16]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d10d      	bne.n	80098fc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098e8:	f107 0208 	add.w	r2, r7, #8
 80098ec:	4610      	mov	r0, r2
 80098ee:	4798      	blx	r3
 80098f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	3301      	adds	r3, #1
 80098f6:	2202      	movs	r2, #2
 80098f8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80098fa:	e100      	b.n	8009afe <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009904:	f107 0208 	add.w	r2, r7, #8
 8009908:	4610      	mov	r0, r2
 800990a:	4798      	blx	r3
 800990c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	3301      	adds	r3, #1
 8009912:	2202      	movs	r2, #2
 8009914:	701a      	strb	r2, [r3, #0]
      break;
 8009916:	e0f2      	b.n	8009afe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	885b      	ldrh	r3, [r3, #2]
 800991c:	b2db      	uxtb	r3, r3
 800991e:	2b05      	cmp	r3, #5
 8009920:	f200 80ac 	bhi.w	8009a7c <USBD_GetDescriptor+0x204>
 8009924:	a201      	add	r2, pc, #4	; (adr r2, 800992c <USBD_GetDescriptor+0xb4>)
 8009926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800992a:	bf00      	nop
 800992c:	08009945 	.word	0x08009945
 8009930:	08009979 	.word	0x08009979
 8009934:	080099ad 	.word	0x080099ad
 8009938:	080099e1 	.word	0x080099e1
 800993c:	08009a15 	.word	0x08009a15
 8009940:	08009a49 	.word	0x08009a49
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d00b      	beq.n	8009968 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	7c12      	ldrb	r2, [r2, #16]
 800995c:	f107 0108 	add.w	r1, r7, #8
 8009960:	4610      	mov	r0, r2
 8009962:	4798      	blx	r3
 8009964:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009966:	e091      	b.n	8009a8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009968:	6839      	ldr	r1, [r7, #0]
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 fa97 	bl	8009e9e <USBD_CtlError>
            err++;
 8009970:	7afb      	ldrb	r3, [r7, #11]
 8009972:	3301      	adds	r3, #1
 8009974:	72fb      	strb	r3, [r7, #11]
          break;
 8009976:	e089      	b.n	8009a8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800997e:	689b      	ldr	r3, [r3, #8]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d00b      	beq.n	800999c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800998a:	689b      	ldr	r3, [r3, #8]
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	7c12      	ldrb	r2, [r2, #16]
 8009990:	f107 0108 	add.w	r1, r7, #8
 8009994:	4610      	mov	r0, r2
 8009996:	4798      	blx	r3
 8009998:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800999a:	e077      	b.n	8009a8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800999c:	6839      	ldr	r1, [r7, #0]
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f000 fa7d 	bl	8009e9e <USBD_CtlError>
            err++;
 80099a4:	7afb      	ldrb	r3, [r7, #11]
 80099a6:	3301      	adds	r3, #1
 80099a8:	72fb      	strb	r3, [r7, #11]
          break;
 80099aa:	e06f      	b.n	8009a8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80099b2:	68db      	ldr	r3, [r3, #12]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d00b      	beq.n	80099d0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80099be:	68db      	ldr	r3, [r3, #12]
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	7c12      	ldrb	r2, [r2, #16]
 80099c4:	f107 0108 	add.w	r1, r7, #8
 80099c8:	4610      	mov	r0, r2
 80099ca:	4798      	blx	r3
 80099cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099ce:	e05d      	b.n	8009a8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099d0:	6839      	ldr	r1, [r7, #0]
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 fa63 	bl	8009e9e <USBD_CtlError>
            err++;
 80099d8:	7afb      	ldrb	r3, [r7, #11]
 80099da:	3301      	adds	r3, #1
 80099dc:	72fb      	strb	r3, [r7, #11]
          break;
 80099de:	e055      	b.n	8009a8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80099e6:	691b      	ldr	r3, [r3, #16]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d00b      	beq.n	8009a04 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80099f2:	691b      	ldr	r3, [r3, #16]
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	7c12      	ldrb	r2, [r2, #16]
 80099f8:	f107 0108 	add.w	r1, r7, #8
 80099fc:	4610      	mov	r0, r2
 80099fe:	4798      	blx	r3
 8009a00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a02:	e043      	b.n	8009a8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a04:	6839      	ldr	r1, [r7, #0]
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 fa49 	bl	8009e9e <USBD_CtlError>
            err++;
 8009a0c:	7afb      	ldrb	r3, [r7, #11]
 8009a0e:	3301      	adds	r3, #1
 8009a10:	72fb      	strb	r3, [r7, #11]
          break;
 8009a12:	e03b      	b.n	8009a8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a1a:	695b      	ldr	r3, [r3, #20]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d00b      	beq.n	8009a38 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a26:	695b      	ldr	r3, [r3, #20]
 8009a28:	687a      	ldr	r2, [r7, #4]
 8009a2a:	7c12      	ldrb	r2, [r2, #16]
 8009a2c:	f107 0108 	add.w	r1, r7, #8
 8009a30:	4610      	mov	r0, r2
 8009a32:	4798      	blx	r3
 8009a34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a36:	e029      	b.n	8009a8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a38:	6839      	ldr	r1, [r7, #0]
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 fa2f 	bl	8009e9e <USBD_CtlError>
            err++;
 8009a40:	7afb      	ldrb	r3, [r7, #11]
 8009a42:	3301      	adds	r3, #1
 8009a44:	72fb      	strb	r3, [r7, #11]
          break;
 8009a46:	e021      	b.n	8009a8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a4e:	699b      	ldr	r3, [r3, #24]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d00b      	beq.n	8009a6c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a5a:	699b      	ldr	r3, [r3, #24]
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	7c12      	ldrb	r2, [r2, #16]
 8009a60:	f107 0108 	add.w	r1, r7, #8
 8009a64:	4610      	mov	r0, r2
 8009a66:	4798      	blx	r3
 8009a68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a6a:	e00f      	b.n	8009a8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a6c:	6839      	ldr	r1, [r7, #0]
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 fa15 	bl	8009e9e <USBD_CtlError>
            err++;
 8009a74:	7afb      	ldrb	r3, [r7, #11]
 8009a76:	3301      	adds	r3, #1
 8009a78:	72fb      	strb	r3, [r7, #11]
          break;
 8009a7a:	e007      	b.n	8009a8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009a7c:	6839      	ldr	r1, [r7, #0]
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 fa0d 	bl	8009e9e <USBD_CtlError>
          err++;
 8009a84:	7afb      	ldrb	r3, [r7, #11]
 8009a86:	3301      	adds	r3, #1
 8009a88:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009a8a:	e038      	b.n	8009afe <USBD_GetDescriptor+0x286>
 8009a8c:	e037      	b.n	8009afe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	7c1b      	ldrb	r3, [r3, #16]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d109      	bne.n	8009aaa <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a9e:	f107 0208 	add.w	r2, r7, #8
 8009aa2:	4610      	mov	r0, r2
 8009aa4:	4798      	blx	r3
 8009aa6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009aa8:	e029      	b.n	8009afe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009aaa:	6839      	ldr	r1, [r7, #0]
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 f9f6 	bl	8009e9e <USBD_CtlError>
        err++;
 8009ab2:	7afb      	ldrb	r3, [r7, #11]
 8009ab4:	3301      	adds	r3, #1
 8009ab6:	72fb      	strb	r3, [r7, #11]
      break;
 8009ab8:	e021      	b.n	8009afe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	7c1b      	ldrb	r3, [r3, #16]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d10d      	bne.n	8009ade <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aca:	f107 0208 	add.w	r2, r7, #8
 8009ace:	4610      	mov	r0, r2
 8009ad0:	4798      	blx	r3
 8009ad2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	2207      	movs	r2, #7
 8009ada:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009adc:	e00f      	b.n	8009afe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009ade:	6839      	ldr	r1, [r7, #0]
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 f9dc 	bl	8009e9e <USBD_CtlError>
        err++;
 8009ae6:	7afb      	ldrb	r3, [r7, #11]
 8009ae8:	3301      	adds	r3, #1
 8009aea:	72fb      	strb	r3, [r7, #11]
      break;
 8009aec:	e007      	b.n	8009afe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009aee:	6839      	ldr	r1, [r7, #0]
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 f9d4 	bl	8009e9e <USBD_CtlError>
      err++;
 8009af6:	7afb      	ldrb	r3, [r7, #11]
 8009af8:	3301      	adds	r3, #1
 8009afa:	72fb      	strb	r3, [r7, #11]
      break;
 8009afc:	bf00      	nop
  }

  if (err != 0U)
 8009afe:	7afb      	ldrb	r3, [r7, #11]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d11c      	bne.n	8009b3e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009b04:	893b      	ldrh	r3, [r7, #8]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d011      	beq.n	8009b2e <USBD_GetDescriptor+0x2b6>
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	88db      	ldrh	r3, [r3, #6]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d00d      	beq.n	8009b2e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	88da      	ldrh	r2, [r3, #6]
 8009b16:	893b      	ldrh	r3, [r7, #8]
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	bf28      	it	cs
 8009b1c:	4613      	movcs	r3, r2
 8009b1e:	b29b      	uxth	r3, r3
 8009b20:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009b22:	893b      	ldrh	r3, [r7, #8]
 8009b24:	461a      	mov	r2, r3
 8009b26:	68f9      	ldr	r1, [r7, #12]
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 fa22 	bl	8009f72 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	88db      	ldrh	r3, [r3, #6]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d104      	bne.n	8009b40 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 fa79 	bl	800a02e <USBD_CtlSendStatus>
 8009b3c:	e000      	b.n	8009b40 <USBD_GetDescriptor+0x2c8>
    return;
 8009b3e:	bf00      	nop
    }
  }
}
 8009b40:	3710      	adds	r7, #16
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop

08009b48 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b084      	sub	sp, #16
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	889b      	ldrh	r3, [r3, #4]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d130      	bne.n	8009bbc <USBD_SetAddress+0x74>
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	88db      	ldrh	r3, [r3, #6]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d12c      	bne.n	8009bbc <USBD_SetAddress+0x74>
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	885b      	ldrh	r3, [r3, #2]
 8009b66:	2b7f      	cmp	r3, #127	; 0x7f
 8009b68:	d828      	bhi.n	8009bbc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	885b      	ldrh	r3, [r3, #2]
 8009b6e:	b2db      	uxtb	r3, r3
 8009b70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b74:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b7c:	2b03      	cmp	r3, #3
 8009b7e:	d104      	bne.n	8009b8a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009b80:	6839      	ldr	r1, [r7, #0]
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 f98b 	bl	8009e9e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b88:	e01d      	b.n	8009bc6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	7bfa      	ldrb	r2, [r7, #15]
 8009b8e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009b92:	7bfb      	ldrb	r3, [r7, #15]
 8009b94:	4619      	mov	r1, r3
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 fe22 	bl	800a7e0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f000 fa46 	bl	800a02e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009ba2:	7bfb      	ldrb	r3, [r7, #15]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d004      	beq.n	8009bb2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2202      	movs	r2, #2
 8009bac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bb0:	e009      	b.n	8009bc6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bba:	e004      	b.n	8009bc6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009bbc:	6839      	ldr	r1, [r7, #0]
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 f96d 	bl	8009e9e <USBD_CtlError>
  }
}
 8009bc4:	bf00      	nop
 8009bc6:	bf00      	nop
 8009bc8:	3710      	adds	r7, #16
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}
	...

08009bd0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	885b      	ldrh	r3, [r3, #2]
 8009bde:	b2da      	uxtb	r2, r3
 8009be0:	4b41      	ldr	r3, [pc, #260]	; (8009ce8 <USBD_SetConfig+0x118>)
 8009be2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009be4:	4b40      	ldr	r3, [pc, #256]	; (8009ce8 <USBD_SetConfig+0x118>)
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d904      	bls.n	8009bf6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009bec:	6839      	ldr	r1, [r7, #0]
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 f955 	bl	8009e9e <USBD_CtlError>
 8009bf4:	e075      	b.n	8009ce2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bfc:	2b02      	cmp	r3, #2
 8009bfe:	d002      	beq.n	8009c06 <USBD_SetConfig+0x36>
 8009c00:	2b03      	cmp	r3, #3
 8009c02:	d023      	beq.n	8009c4c <USBD_SetConfig+0x7c>
 8009c04:	e062      	b.n	8009ccc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009c06:	4b38      	ldr	r3, [pc, #224]	; (8009ce8 <USBD_SetConfig+0x118>)
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d01a      	beq.n	8009c44 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009c0e:	4b36      	ldr	r3, [pc, #216]	; (8009ce8 <USBD_SetConfig+0x118>)
 8009c10:	781b      	ldrb	r3, [r3, #0]
 8009c12:	461a      	mov	r2, r3
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2203      	movs	r2, #3
 8009c1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009c20:	4b31      	ldr	r3, [pc, #196]	; (8009ce8 <USBD_SetConfig+0x118>)
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	4619      	mov	r1, r3
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f7ff f9e8 	bl	8008ffc <USBD_SetClassConfig>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	2b02      	cmp	r3, #2
 8009c30:	d104      	bne.n	8009c3c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009c32:	6839      	ldr	r1, [r7, #0]
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f000 f932 	bl	8009e9e <USBD_CtlError>
            return;
 8009c3a:	e052      	b.n	8009ce2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 f9f6 	bl	800a02e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009c42:	e04e      	b.n	8009ce2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f000 f9f2 	bl	800a02e <USBD_CtlSendStatus>
        break;
 8009c4a:	e04a      	b.n	8009ce2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009c4c:	4b26      	ldr	r3, [pc, #152]	; (8009ce8 <USBD_SetConfig+0x118>)
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d112      	bne.n	8009c7a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2202      	movs	r2, #2
 8009c58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009c5c:	4b22      	ldr	r3, [pc, #136]	; (8009ce8 <USBD_SetConfig+0x118>)
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	461a      	mov	r2, r3
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009c66:	4b20      	ldr	r3, [pc, #128]	; (8009ce8 <USBD_SetConfig+0x118>)
 8009c68:	781b      	ldrb	r3, [r3, #0]
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f7ff f9e4 	bl	800903a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 f9db 	bl	800a02e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009c78:	e033      	b.n	8009ce2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009c7a:	4b1b      	ldr	r3, [pc, #108]	; (8009ce8 <USBD_SetConfig+0x118>)
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	461a      	mov	r2, r3
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d01d      	beq.n	8009cc4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	4619      	mov	r1, r3
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f7ff f9d2 	bl	800903a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009c96:	4b14      	ldr	r3, [pc, #80]	; (8009ce8 <USBD_SetConfig+0x118>)
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009ca0:	4b11      	ldr	r3, [pc, #68]	; (8009ce8 <USBD_SetConfig+0x118>)
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f7ff f9a8 	bl	8008ffc <USBD_SetClassConfig>
 8009cac:	4603      	mov	r3, r0
 8009cae:	2b02      	cmp	r3, #2
 8009cb0:	d104      	bne.n	8009cbc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009cb2:	6839      	ldr	r1, [r7, #0]
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 f8f2 	bl	8009e9e <USBD_CtlError>
            return;
 8009cba:	e012      	b.n	8009ce2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 f9b6 	bl	800a02e <USBD_CtlSendStatus>
        break;
 8009cc2:	e00e      	b.n	8009ce2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f000 f9b2 	bl	800a02e <USBD_CtlSendStatus>
        break;
 8009cca:	e00a      	b.n	8009ce2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009ccc:	6839      	ldr	r1, [r7, #0]
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 f8e5 	bl	8009e9e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009cd4:	4b04      	ldr	r3, [pc, #16]	; (8009ce8 <USBD_SetConfig+0x118>)
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	4619      	mov	r1, r3
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f7ff f9ad 	bl	800903a <USBD_ClrClassConfig>
        break;
 8009ce0:	bf00      	nop
    }
  }
}
 8009ce2:	3708      	adds	r7, #8
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}
 8009ce8:	200003c8 	.word	0x200003c8

08009cec <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	88db      	ldrh	r3, [r3, #6]
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d004      	beq.n	8009d08 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009cfe:	6839      	ldr	r1, [r7, #0]
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 f8cc 	bl	8009e9e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009d06:	e022      	b.n	8009d4e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d0e:	2b02      	cmp	r3, #2
 8009d10:	dc02      	bgt.n	8009d18 <USBD_GetConfig+0x2c>
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	dc03      	bgt.n	8009d1e <USBD_GetConfig+0x32>
 8009d16:	e015      	b.n	8009d44 <USBD_GetConfig+0x58>
 8009d18:	2b03      	cmp	r3, #3
 8009d1a:	d00b      	beq.n	8009d34 <USBD_GetConfig+0x48>
 8009d1c:	e012      	b.n	8009d44 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2200      	movs	r2, #0
 8009d22:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	3308      	adds	r3, #8
 8009d28:	2201      	movs	r2, #1
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 f920 	bl	8009f72 <USBD_CtlSendData>
        break;
 8009d32:	e00c      	b.n	8009d4e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	3304      	adds	r3, #4
 8009d38:	2201      	movs	r2, #1
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f000 f918 	bl	8009f72 <USBD_CtlSendData>
        break;
 8009d42:	e004      	b.n	8009d4e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009d44:	6839      	ldr	r1, [r7, #0]
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 f8a9 	bl	8009e9e <USBD_CtlError>
        break;
 8009d4c:	bf00      	nop
}
 8009d4e:	bf00      	nop
 8009d50:	3708      	adds	r7, #8
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}

08009d56 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d56:	b580      	push	{r7, lr}
 8009d58:	b082      	sub	sp, #8
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	6078      	str	r0, [r7, #4]
 8009d5e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d66:	3b01      	subs	r3, #1
 8009d68:	2b02      	cmp	r3, #2
 8009d6a:	d81e      	bhi.n	8009daa <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	88db      	ldrh	r3, [r3, #6]
 8009d70:	2b02      	cmp	r3, #2
 8009d72:	d004      	beq.n	8009d7e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009d74:	6839      	ldr	r1, [r7, #0]
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 f891 	bl	8009e9e <USBD_CtlError>
        break;
 8009d7c:	e01a      	b.n	8009db4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2201      	movs	r2, #1
 8009d82:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d005      	beq.n	8009d9a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	68db      	ldr	r3, [r3, #12]
 8009d92:	f043 0202 	orr.w	r2, r3, #2
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	330c      	adds	r3, #12
 8009d9e:	2202      	movs	r2, #2
 8009da0:	4619      	mov	r1, r3
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f000 f8e5 	bl	8009f72 <USBD_CtlSendData>
      break;
 8009da8:	e004      	b.n	8009db4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009daa:	6839      	ldr	r1, [r7, #0]
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f000 f876 	bl	8009e9e <USBD_CtlError>
      break;
 8009db2:	bf00      	nop
  }
}
 8009db4:	bf00      	nop
 8009db6:	3708      	adds	r7, #8
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b082      	sub	sp, #8
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	885b      	ldrh	r3, [r3, #2]
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	d106      	bne.n	8009ddc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 f929 	bl	800a02e <USBD_CtlSendStatus>
  }
}
 8009ddc:	bf00      	nop
 8009dde:	3708      	adds	r7, #8
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b082      	sub	sp, #8
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009df4:	3b01      	subs	r3, #1
 8009df6:	2b02      	cmp	r3, #2
 8009df8:	d80b      	bhi.n	8009e12 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	885b      	ldrh	r3, [r3, #2]
 8009dfe:	2b01      	cmp	r3, #1
 8009e00:	d10c      	bne.n	8009e1c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2200      	movs	r2, #0
 8009e06:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 f90f 	bl	800a02e <USBD_CtlSendStatus>
      }
      break;
 8009e10:	e004      	b.n	8009e1c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009e12:	6839      	ldr	r1, [r7, #0]
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f000 f842 	bl	8009e9e <USBD_CtlError>
      break;
 8009e1a:	e000      	b.n	8009e1e <USBD_ClrFeature+0x3a>
      break;
 8009e1c:	bf00      	nop
  }
}
 8009e1e:	bf00      	nop
 8009e20:	3708      	adds	r7, #8
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}

08009e26 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009e26:	b480      	push	{r7}
 8009e28:	b083      	sub	sp, #12
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	6078      	str	r0, [r7, #4]
 8009e2e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	781a      	ldrb	r2, [r3, #0]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	785a      	ldrb	r2, [r3, #1]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	3302      	adds	r3, #2
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	b29a      	uxth	r2, r3
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	3303      	adds	r3, #3
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	b29b      	uxth	r3, r3
 8009e50:	021b      	lsls	r3, r3, #8
 8009e52:	b29b      	uxth	r3, r3
 8009e54:	4413      	add	r3, r2
 8009e56:	b29a      	uxth	r2, r3
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	3304      	adds	r3, #4
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	b29a      	uxth	r2, r3
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	3305      	adds	r3, #5
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	b29b      	uxth	r3, r3
 8009e6c:	021b      	lsls	r3, r3, #8
 8009e6e:	b29b      	uxth	r3, r3
 8009e70:	4413      	add	r3, r2
 8009e72:	b29a      	uxth	r2, r3
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	3306      	adds	r3, #6
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	b29a      	uxth	r2, r3
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	3307      	adds	r3, #7
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	b29b      	uxth	r3, r3
 8009e88:	021b      	lsls	r3, r3, #8
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	4413      	add	r3, r2
 8009e8e:	b29a      	uxth	r2, r3
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	80da      	strh	r2, [r3, #6]

}
 8009e94:	bf00      	nop
 8009e96:	370c      	adds	r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bc80      	pop	{r7}
 8009e9c:	4770      	bx	lr

08009e9e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	b082      	sub	sp, #8
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
 8009ea6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009ea8:	2180      	movs	r1, #128	; 0x80
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 fc2e 	bl	800a70c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009eb0:	2100      	movs	r1, #0
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 fc2a 	bl	800a70c <USBD_LL_StallEP>
}
 8009eb8:	bf00      	nop
 8009eba:	3708      	adds	r7, #8
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b086      	sub	sp, #24
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	60f8      	str	r0, [r7, #12]
 8009ec8:	60b9      	str	r1, [r7, #8]
 8009eca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d032      	beq.n	8009f3c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009ed6:	68f8      	ldr	r0, [r7, #12]
 8009ed8:	f000 f834 	bl	8009f44 <USBD_GetLen>
 8009edc:	4603      	mov	r3, r0
 8009ede:	3301      	adds	r3, #1
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	005b      	lsls	r3, r3, #1
 8009ee4:	b29a      	uxth	r2, r3
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009eea:	7dfb      	ldrb	r3, [r7, #23]
 8009eec:	1c5a      	adds	r2, r3, #1
 8009eee:	75fa      	strb	r2, [r7, #23]
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	4413      	add	r3, r2
 8009ef6:	687a      	ldr	r2, [r7, #4]
 8009ef8:	7812      	ldrb	r2, [r2, #0]
 8009efa:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009efc:	7dfb      	ldrb	r3, [r7, #23]
 8009efe:	1c5a      	adds	r2, r3, #1
 8009f00:	75fa      	strb	r2, [r7, #23]
 8009f02:	461a      	mov	r2, r3
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	4413      	add	r3, r2
 8009f08:	2203      	movs	r2, #3
 8009f0a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009f0c:	e012      	b.n	8009f34 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	1c5a      	adds	r2, r3, #1
 8009f12:	60fa      	str	r2, [r7, #12]
 8009f14:	7dfa      	ldrb	r2, [r7, #23]
 8009f16:	1c51      	adds	r1, r2, #1
 8009f18:	75f9      	strb	r1, [r7, #23]
 8009f1a:	4611      	mov	r1, r2
 8009f1c:	68ba      	ldr	r2, [r7, #8]
 8009f1e:	440a      	add	r2, r1
 8009f20:	781b      	ldrb	r3, [r3, #0]
 8009f22:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009f24:	7dfb      	ldrb	r3, [r7, #23]
 8009f26:	1c5a      	adds	r2, r3, #1
 8009f28:	75fa      	strb	r2, [r7, #23]
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	4413      	add	r3, r2
 8009f30:	2200      	movs	r2, #0
 8009f32:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d1e8      	bne.n	8009f0e <USBD_GetString+0x4e>
    }
  }
}
 8009f3c:	bf00      	nop
 8009f3e:	3718      	adds	r7, #24
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b085      	sub	sp, #20
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009f50:	e005      	b.n	8009f5e <USBD_GetLen+0x1a>
  {
    len++;
 8009f52:	7bfb      	ldrb	r3, [r7, #15]
 8009f54:	3301      	adds	r3, #1
 8009f56:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	781b      	ldrb	r3, [r3, #0]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d1f5      	bne.n	8009f52 <USBD_GetLen+0xe>
  }

  return len;
 8009f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3714      	adds	r7, #20
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bc80      	pop	{r7}
 8009f70:	4770      	bx	lr

08009f72 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009f72:	b580      	push	{r7, lr}
 8009f74:	b084      	sub	sp, #16
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	60f8      	str	r0, [r7, #12]
 8009f7a:	60b9      	str	r1, [r7, #8]
 8009f7c:	4613      	mov	r3, r2
 8009f7e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2202      	movs	r2, #2
 8009f84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009f88:	88fa      	ldrh	r2, [r7, #6]
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009f8e:	88fa      	ldrh	r2, [r7, #6]
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009f94:	88fb      	ldrh	r3, [r7, #6]
 8009f96:	68ba      	ldr	r2, [r7, #8]
 8009f98:	2100      	movs	r1, #0
 8009f9a:	68f8      	ldr	r0, [r7, #12]
 8009f9c:	f000 fc3f 	bl	800a81e <USBD_LL_Transmit>

  return USBD_OK;
 8009fa0:	2300      	movs	r3, #0
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3710      	adds	r7, #16
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}

08009faa <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009faa:	b580      	push	{r7, lr}
 8009fac:	b084      	sub	sp, #16
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	60f8      	str	r0, [r7, #12]
 8009fb2:	60b9      	str	r1, [r7, #8]
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009fb8:	88fb      	ldrh	r3, [r7, #6]
 8009fba:	68ba      	ldr	r2, [r7, #8]
 8009fbc:	2100      	movs	r1, #0
 8009fbe:	68f8      	ldr	r0, [r7, #12]
 8009fc0:	f000 fc2d 	bl	800a81e <USBD_LL_Transmit>

  return USBD_OK;
 8009fc4:	2300      	movs	r3, #0
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3710      	adds	r7, #16
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b084      	sub	sp, #16
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	60f8      	str	r0, [r7, #12]
 8009fd6:	60b9      	str	r1, [r7, #8]
 8009fd8:	4613      	mov	r3, r2
 8009fda:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2203      	movs	r2, #3
 8009fe0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009fe4:	88fa      	ldrh	r2, [r7, #6]
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009fec:	88fa      	ldrh	r2, [r7, #6]
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ff4:	88fb      	ldrh	r3, [r7, #6]
 8009ff6:	68ba      	ldr	r2, [r7, #8]
 8009ff8:	2100      	movs	r1, #0
 8009ffa:	68f8      	ldr	r0, [r7, #12]
 8009ffc:	f000 fc32 	bl	800a864 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a000:	2300      	movs	r3, #0
}
 800a002:	4618      	mov	r0, r3
 800a004:	3710      	adds	r7, #16
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}

0800a00a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a00a:	b580      	push	{r7, lr}
 800a00c:	b084      	sub	sp, #16
 800a00e:	af00      	add	r7, sp, #0
 800a010:	60f8      	str	r0, [r7, #12]
 800a012:	60b9      	str	r1, [r7, #8]
 800a014:	4613      	mov	r3, r2
 800a016:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a018:	88fb      	ldrh	r3, [r7, #6]
 800a01a:	68ba      	ldr	r2, [r7, #8]
 800a01c:	2100      	movs	r1, #0
 800a01e:	68f8      	ldr	r0, [r7, #12]
 800a020:	f000 fc20 	bl	800a864 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a024:	2300      	movs	r3, #0
}
 800a026:	4618      	mov	r0, r3
 800a028:	3710      	adds	r7, #16
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}

0800a02e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a02e:	b580      	push	{r7, lr}
 800a030:	b082      	sub	sp, #8
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2204      	movs	r2, #4
 800a03a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a03e:	2300      	movs	r3, #0
 800a040:	2200      	movs	r2, #0
 800a042:	2100      	movs	r1, #0
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f000 fbea 	bl	800a81e <USBD_LL_Transmit>

  return USBD_OK;
 800a04a:	2300      	movs	r3, #0
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3708      	adds	r7, #8
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}

0800a054 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b082      	sub	sp, #8
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2205      	movs	r2, #5
 800a060:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a064:	2300      	movs	r3, #0
 800a066:	2200      	movs	r2, #0
 800a068:	2100      	movs	r1, #0
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 fbfa 	bl	800a864 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	3708      	adds	r7, #8
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
	...

0800a07c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a080:	2200      	movs	r2, #0
 800a082:	4912      	ldr	r1, [pc, #72]	; (800a0cc <MX_USB_DEVICE_Init+0x50>)
 800a084:	4812      	ldr	r0, [pc, #72]	; (800a0d0 <MX_USB_DEVICE_Init+0x54>)
 800a086:	f7fe ff5f 	bl	8008f48 <USBD_Init>
 800a08a:	4603      	mov	r3, r0
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d001      	beq.n	800a094 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a090:	f7f7 f98e 	bl	80013b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a094:	490f      	ldr	r1, [pc, #60]	; (800a0d4 <MX_USB_DEVICE_Init+0x58>)
 800a096:	480e      	ldr	r0, [pc, #56]	; (800a0d0 <MX_USB_DEVICE_Init+0x54>)
 800a098:	f7fe ff81 	bl	8008f9e <USBD_RegisterClass>
 800a09c:	4603      	mov	r3, r0
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d001      	beq.n	800a0a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a0a2:	f7f7 f985 	bl	80013b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a0a6:	490c      	ldr	r1, [pc, #48]	; (800a0d8 <MX_USB_DEVICE_Init+0x5c>)
 800a0a8:	4809      	ldr	r0, [pc, #36]	; (800a0d0 <MX_USB_DEVICE_Init+0x54>)
 800a0aa:	f7fe fee1 	bl	8008e70 <USBD_CDC_RegisterInterface>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d001      	beq.n	800a0b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a0b4:	f7f7 f97c 	bl	80013b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a0b8:	4805      	ldr	r0, [pc, #20]	; (800a0d0 <MX_USB_DEVICE_Init+0x54>)
 800a0ba:	f7fe ff89 	bl	8008fd0 <USBD_Start>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d001      	beq.n	800a0c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a0c4:	f7f7 f974 	bl	80013b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a0c8:	bf00      	nop
 800a0ca:	bd80      	pop	{r7, pc}
 800a0cc:	20000130 	.word	0x20000130
 800a0d0:	200003cc 	.word	0x200003cc
 800a0d4:	2000001c 	.word	0x2000001c
 800a0d8:	20000120 	.word	0x20000120

0800a0dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	4905      	ldr	r1, [pc, #20]	; (800a0f8 <CDC_Init_FS+0x1c>)
 800a0e4:	4805      	ldr	r0, [pc, #20]	; (800a0fc <CDC_Init_FS+0x20>)
 800a0e6:	f7fe fed9 	bl	8008e9c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a0ea:	4905      	ldr	r1, [pc, #20]	; (800a100 <CDC_Init_FS+0x24>)
 800a0ec:	4803      	ldr	r0, [pc, #12]	; (800a0fc <CDC_Init_FS+0x20>)
 800a0ee:	f7fe feee 	bl	8008ece <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a0f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	bd80      	pop	{r7, pc}
 800a0f8:	200006d0 	.word	0x200006d0
 800a0fc:	200003cc 	.word	0x200003cc
 800a100:	20000690 	.word	0x20000690

0800a104 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a104:	b480      	push	{r7}
 800a106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a108:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bc80      	pop	{r7}
 800a110:	4770      	bx	lr
	...

0800a114 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a114:	b480      	push	{r7}
 800a116:	b083      	sub	sp, #12
 800a118:	af00      	add	r7, sp, #0
 800a11a:	4603      	mov	r3, r0
 800a11c:	6039      	str	r1, [r7, #0]
 800a11e:	71fb      	strb	r3, [r7, #7]
 800a120:	4613      	mov	r3, r2
 800a122:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a124:	79fb      	ldrb	r3, [r7, #7]
 800a126:	2b23      	cmp	r3, #35	; 0x23
 800a128:	d84a      	bhi.n	800a1c0 <CDC_Control_FS+0xac>
 800a12a:	a201      	add	r2, pc, #4	; (adr r2, 800a130 <CDC_Control_FS+0x1c>)
 800a12c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a130:	0800a1c1 	.word	0x0800a1c1
 800a134:	0800a1c1 	.word	0x0800a1c1
 800a138:	0800a1c1 	.word	0x0800a1c1
 800a13c:	0800a1c1 	.word	0x0800a1c1
 800a140:	0800a1c1 	.word	0x0800a1c1
 800a144:	0800a1c1 	.word	0x0800a1c1
 800a148:	0800a1c1 	.word	0x0800a1c1
 800a14c:	0800a1c1 	.word	0x0800a1c1
 800a150:	0800a1c1 	.word	0x0800a1c1
 800a154:	0800a1c1 	.word	0x0800a1c1
 800a158:	0800a1c1 	.word	0x0800a1c1
 800a15c:	0800a1c1 	.word	0x0800a1c1
 800a160:	0800a1c1 	.word	0x0800a1c1
 800a164:	0800a1c1 	.word	0x0800a1c1
 800a168:	0800a1c1 	.word	0x0800a1c1
 800a16c:	0800a1c1 	.word	0x0800a1c1
 800a170:	0800a1c1 	.word	0x0800a1c1
 800a174:	0800a1c1 	.word	0x0800a1c1
 800a178:	0800a1c1 	.word	0x0800a1c1
 800a17c:	0800a1c1 	.word	0x0800a1c1
 800a180:	0800a1c1 	.word	0x0800a1c1
 800a184:	0800a1c1 	.word	0x0800a1c1
 800a188:	0800a1c1 	.word	0x0800a1c1
 800a18c:	0800a1c1 	.word	0x0800a1c1
 800a190:	0800a1c1 	.word	0x0800a1c1
 800a194:	0800a1c1 	.word	0x0800a1c1
 800a198:	0800a1c1 	.word	0x0800a1c1
 800a19c:	0800a1c1 	.word	0x0800a1c1
 800a1a0:	0800a1c1 	.word	0x0800a1c1
 800a1a4:	0800a1c1 	.word	0x0800a1c1
 800a1a8:	0800a1c1 	.word	0x0800a1c1
 800a1ac:	0800a1c1 	.word	0x0800a1c1
 800a1b0:	0800a1c1 	.word	0x0800a1c1
 800a1b4:	0800a1c1 	.word	0x0800a1c1
 800a1b8:	0800a1c1 	.word	0x0800a1c1
 800a1bc:	0800a1c1 	.word	0x0800a1c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a1c0:	bf00      	nop
  }

  return (USBD_OK);
 800a1c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	370c      	adds	r7, #12
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bc80      	pop	{r7}
 800a1cc:	4770      	bx	lr
 800a1ce:	bf00      	nop

0800a1d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a1da:	6879      	ldr	r1, [r7, #4]
 800a1dc:	4805      	ldr	r0, [pc, #20]	; (800a1f4 <CDC_Receive_FS+0x24>)
 800a1de:	f7fe fe76 	bl	8008ece <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a1e2:	4804      	ldr	r0, [pc, #16]	; (800a1f4 <CDC_Receive_FS+0x24>)
 800a1e4:	f7fe fe86 	bl	8008ef4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a1e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3708      	adds	r7, #8
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	bf00      	nop
 800a1f4:	200003cc 	.word	0x200003cc

0800a1f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	4603      	mov	r3, r0
 800a200:	6039      	str	r1, [r7, #0]
 800a202:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	2212      	movs	r2, #18
 800a208:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a20a:	4b03      	ldr	r3, [pc, #12]	; (800a218 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	370c      	adds	r7, #12
 800a210:	46bd      	mov	sp, r7
 800a212:	bc80      	pop	{r7}
 800a214:	4770      	bx	lr
 800a216:	bf00      	nop
 800a218:	2000014c 	.word	0x2000014c

0800a21c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b083      	sub	sp, #12
 800a220:	af00      	add	r7, sp, #0
 800a222:	4603      	mov	r3, r0
 800a224:	6039      	str	r1, [r7, #0]
 800a226:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	2204      	movs	r2, #4
 800a22c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a22e:	4b03      	ldr	r3, [pc, #12]	; (800a23c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a230:	4618      	mov	r0, r3
 800a232:	370c      	adds	r7, #12
 800a234:	46bd      	mov	sp, r7
 800a236:	bc80      	pop	{r7}
 800a238:	4770      	bx	lr
 800a23a:	bf00      	nop
 800a23c:	20000160 	.word	0x20000160

0800a240 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b082      	sub	sp, #8
 800a244:	af00      	add	r7, sp, #0
 800a246:	4603      	mov	r3, r0
 800a248:	6039      	str	r1, [r7, #0]
 800a24a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a24c:	79fb      	ldrb	r3, [r7, #7]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d105      	bne.n	800a25e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a252:	683a      	ldr	r2, [r7, #0]
 800a254:	4907      	ldr	r1, [pc, #28]	; (800a274 <USBD_FS_ProductStrDescriptor+0x34>)
 800a256:	4808      	ldr	r0, [pc, #32]	; (800a278 <USBD_FS_ProductStrDescriptor+0x38>)
 800a258:	f7ff fe32 	bl	8009ec0 <USBD_GetString>
 800a25c:	e004      	b.n	800a268 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a25e:	683a      	ldr	r2, [r7, #0]
 800a260:	4904      	ldr	r1, [pc, #16]	; (800a274 <USBD_FS_ProductStrDescriptor+0x34>)
 800a262:	4805      	ldr	r0, [pc, #20]	; (800a278 <USBD_FS_ProductStrDescriptor+0x38>)
 800a264:	f7ff fe2c 	bl	8009ec0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a268:	4b02      	ldr	r3, [pc, #8]	; (800a274 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3708      	adds	r7, #8
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
 800a272:	bf00      	nop
 800a274:	20000710 	.word	0x20000710
 800a278:	0800a9e8 	.word	0x0800a9e8

0800a27c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	af00      	add	r7, sp, #0
 800a282:	4603      	mov	r3, r0
 800a284:	6039      	str	r1, [r7, #0]
 800a286:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a288:	683a      	ldr	r2, [r7, #0]
 800a28a:	4904      	ldr	r1, [pc, #16]	; (800a29c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a28c:	4804      	ldr	r0, [pc, #16]	; (800a2a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a28e:	f7ff fe17 	bl	8009ec0 <USBD_GetString>
  return USBD_StrDesc;
 800a292:	4b02      	ldr	r3, [pc, #8]	; (800a29c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a294:	4618      	mov	r0, r3
 800a296:	3708      	adds	r7, #8
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}
 800a29c:	20000710 	.word	0x20000710
 800a2a0:	0800aa00 	.word	0x0800aa00

0800a2a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b082      	sub	sp, #8
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	6039      	str	r1, [r7, #0]
 800a2ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	221a      	movs	r2, #26
 800a2b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a2b6:	f000 f843 	bl	800a340 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a2ba:	4b02      	ldr	r3, [pc, #8]	; (800a2c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3708      	adds	r7, #8
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}
 800a2c4:	20000164 	.word	0x20000164

0800a2c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	6039      	str	r1, [r7, #0]
 800a2d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a2d4:	79fb      	ldrb	r3, [r7, #7]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d105      	bne.n	800a2e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a2da:	683a      	ldr	r2, [r7, #0]
 800a2dc:	4907      	ldr	r1, [pc, #28]	; (800a2fc <USBD_FS_ConfigStrDescriptor+0x34>)
 800a2de:	4808      	ldr	r0, [pc, #32]	; (800a300 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a2e0:	f7ff fdee 	bl	8009ec0 <USBD_GetString>
 800a2e4:	e004      	b.n	800a2f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a2e6:	683a      	ldr	r2, [r7, #0]
 800a2e8:	4904      	ldr	r1, [pc, #16]	; (800a2fc <USBD_FS_ConfigStrDescriptor+0x34>)
 800a2ea:	4805      	ldr	r0, [pc, #20]	; (800a300 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a2ec:	f7ff fde8 	bl	8009ec0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a2f0:	4b02      	ldr	r3, [pc, #8]	; (800a2fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3708      	adds	r7, #8
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	20000710 	.word	0x20000710
 800a300:	0800aa14 	.word	0x0800aa14

0800a304 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b082      	sub	sp, #8
 800a308:	af00      	add	r7, sp, #0
 800a30a:	4603      	mov	r3, r0
 800a30c:	6039      	str	r1, [r7, #0]
 800a30e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a310:	79fb      	ldrb	r3, [r7, #7]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d105      	bne.n	800a322 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a316:	683a      	ldr	r2, [r7, #0]
 800a318:	4907      	ldr	r1, [pc, #28]	; (800a338 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a31a:	4808      	ldr	r0, [pc, #32]	; (800a33c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a31c:	f7ff fdd0 	bl	8009ec0 <USBD_GetString>
 800a320:	e004      	b.n	800a32c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a322:	683a      	ldr	r2, [r7, #0]
 800a324:	4904      	ldr	r1, [pc, #16]	; (800a338 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a326:	4805      	ldr	r0, [pc, #20]	; (800a33c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a328:	f7ff fdca 	bl	8009ec0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a32c:	4b02      	ldr	r3, [pc, #8]	; (800a338 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3708      	adds	r7, #8
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop
 800a338:	20000710 	.word	0x20000710
 800a33c:	0800aa20 	.word	0x0800aa20

0800a340 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a346:	4b0f      	ldr	r3, [pc, #60]	; (800a384 <Get_SerialNum+0x44>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a34c:	4b0e      	ldr	r3, [pc, #56]	; (800a388 <Get_SerialNum+0x48>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a352:	4b0e      	ldr	r3, [pc, #56]	; (800a38c <Get_SerialNum+0x4c>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a358:	68fa      	ldr	r2, [r7, #12]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	4413      	add	r3, r2
 800a35e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d009      	beq.n	800a37a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a366:	2208      	movs	r2, #8
 800a368:	4909      	ldr	r1, [pc, #36]	; (800a390 <Get_SerialNum+0x50>)
 800a36a:	68f8      	ldr	r0, [r7, #12]
 800a36c:	f000 f814 	bl	800a398 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a370:	2204      	movs	r2, #4
 800a372:	4908      	ldr	r1, [pc, #32]	; (800a394 <Get_SerialNum+0x54>)
 800a374:	68b8      	ldr	r0, [r7, #8]
 800a376:	f000 f80f 	bl	800a398 <IntToUnicode>
  }
}
 800a37a:	bf00      	nop
 800a37c:	3710      	adds	r7, #16
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
 800a382:	bf00      	nop
 800a384:	1ffff7e8 	.word	0x1ffff7e8
 800a388:	1ffff7ec 	.word	0x1ffff7ec
 800a38c:	1ffff7f0 	.word	0x1ffff7f0
 800a390:	20000166 	.word	0x20000166
 800a394:	20000176 	.word	0x20000176

0800a398 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a398:	b480      	push	{r7}
 800a39a:	b087      	sub	sp, #28
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	60f8      	str	r0, [r7, #12]
 800a3a0:	60b9      	str	r1, [r7, #8]
 800a3a2:	4613      	mov	r3, r2
 800a3a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	75fb      	strb	r3, [r7, #23]
 800a3ae:	e027      	b.n	800a400 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	0f1b      	lsrs	r3, r3, #28
 800a3b4:	2b09      	cmp	r3, #9
 800a3b6:	d80b      	bhi.n	800a3d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	0f1b      	lsrs	r3, r3, #28
 800a3bc:	b2da      	uxtb	r2, r3
 800a3be:	7dfb      	ldrb	r3, [r7, #23]
 800a3c0:	005b      	lsls	r3, r3, #1
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	440b      	add	r3, r1
 800a3c8:	3230      	adds	r2, #48	; 0x30
 800a3ca:	b2d2      	uxtb	r2, r2
 800a3cc:	701a      	strb	r2, [r3, #0]
 800a3ce:	e00a      	b.n	800a3e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	0f1b      	lsrs	r3, r3, #28
 800a3d4:	b2da      	uxtb	r2, r3
 800a3d6:	7dfb      	ldrb	r3, [r7, #23]
 800a3d8:	005b      	lsls	r3, r3, #1
 800a3da:	4619      	mov	r1, r3
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	440b      	add	r3, r1
 800a3e0:	3237      	adds	r2, #55	; 0x37
 800a3e2:	b2d2      	uxtb	r2, r2
 800a3e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	011b      	lsls	r3, r3, #4
 800a3ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a3ec:	7dfb      	ldrb	r3, [r7, #23]
 800a3ee:	005b      	lsls	r3, r3, #1
 800a3f0:	3301      	adds	r3, #1
 800a3f2:	68ba      	ldr	r2, [r7, #8]
 800a3f4:	4413      	add	r3, r2
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a3fa:	7dfb      	ldrb	r3, [r7, #23]
 800a3fc:	3301      	adds	r3, #1
 800a3fe:	75fb      	strb	r3, [r7, #23]
 800a400:	7dfa      	ldrb	r2, [r7, #23]
 800a402:	79fb      	ldrb	r3, [r7, #7]
 800a404:	429a      	cmp	r2, r3
 800a406:	d3d3      	bcc.n	800a3b0 <IntToUnicode+0x18>
  }
}
 800a408:	bf00      	nop
 800a40a:	bf00      	nop
 800a40c:	371c      	adds	r7, #28
 800a40e:	46bd      	mov	sp, r7
 800a410:	bc80      	pop	{r7}
 800a412:	4770      	bx	lr

0800a414 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b084      	sub	sp, #16
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a0d      	ldr	r2, [pc, #52]	; (800a458 <HAL_PCD_MspInit+0x44>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d113      	bne.n	800a44e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a426:	4b0d      	ldr	r3, [pc, #52]	; (800a45c <HAL_PCD_MspInit+0x48>)
 800a428:	69db      	ldr	r3, [r3, #28]
 800a42a:	4a0c      	ldr	r2, [pc, #48]	; (800a45c <HAL_PCD_MspInit+0x48>)
 800a42c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a430:	61d3      	str	r3, [r2, #28]
 800a432:	4b0a      	ldr	r3, [pc, #40]	; (800a45c <HAL_PCD_MspInit+0x48>)
 800a434:	69db      	ldr	r3, [r3, #28]
 800a436:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a43a:	60fb      	str	r3, [r7, #12]
 800a43c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a43e:	2200      	movs	r2, #0
 800a440:	2100      	movs	r1, #0
 800a442:	2014      	movs	r0, #20
 800a444:	f7f8 f999 	bl	800277a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a448:	2014      	movs	r0, #20
 800a44a:	f7f8 f9b2 	bl	80027b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a44e:	bf00      	nop
 800a450:	3710      	adds	r7, #16
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
 800a456:	bf00      	nop
 800a458:	40005c00 	.word	0x40005c00
 800a45c:	40021000 	.word	0x40021000

0800a460 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b082      	sub	sp, #8
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a474:	4619      	mov	r1, r3
 800a476:	4610      	mov	r0, r2
 800a478:	f7fe fdf2 	bl	8009060 <USBD_LL_SetupStage>
}
 800a47c:	bf00      	nop
 800a47e:	3708      	adds	r7, #8
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b082      	sub	sp, #8
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	460b      	mov	r3, r1
 800a48e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a496:	78fa      	ldrb	r2, [r7, #3]
 800a498:	6879      	ldr	r1, [r7, #4]
 800a49a:	4613      	mov	r3, r2
 800a49c:	009b      	lsls	r3, r3, #2
 800a49e:	4413      	add	r3, r2
 800a4a0:	00db      	lsls	r3, r3, #3
 800a4a2:	440b      	add	r3, r1
 800a4a4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	78fb      	ldrb	r3, [r7, #3]
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	f7fe fe24 	bl	80090fa <USBD_LL_DataOutStage>
}
 800a4b2:	bf00      	nop
 800a4b4:	3708      	adds	r7, #8
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}

0800a4ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4ba:	b580      	push	{r7, lr}
 800a4bc:	b082      	sub	sp, #8
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	6078      	str	r0, [r7, #4]
 800a4c2:	460b      	mov	r3, r1
 800a4c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a4cc:	78fa      	ldrb	r2, [r7, #3]
 800a4ce:	6879      	ldr	r1, [r7, #4]
 800a4d0:	4613      	mov	r3, r2
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	4413      	add	r3, r2
 800a4d6:	00db      	lsls	r3, r3, #3
 800a4d8:	440b      	add	r3, r1
 800a4da:	333c      	adds	r3, #60	; 0x3c
 800a4dc:	681a      	ldr	r2, [r3, #0]
 800a4de:	78fb      	ldrb	r3, [r7, #3]
 800a4e0:	4619      	mov	r1, r3
 800a4e2:	f7fe fe7b 	bl	80091dc <USBD_LL_DataInStage>
}
 800a4e6:	bf00      	nop
 800a4e8:	3708      	adds	r7, #8
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}

0800a4ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4ee:	b580      	push	{r7, lr}
 800a4f0:	b082      	sub	sp, #8
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f7fe ff8b 	bl	8009418 <USBD_LL_SOF>
}
 800a502:	bf00      	nop
 800a504:	3708      	adds	r7, #8
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}

0800a50a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a50a:	b580      	push	{r7, lr}
 800a50c:	b084      	sub	sp, #16
 800a50e:	af00      	add	r7, sp, #0
 800a510:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a512:	2301      	movs	r3, #1
 800a514:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	689b      	ldr	r3, [r3, #8]
 800a51a:	2b02      	cmp	r3, #2
 800a51c:	d001      	beq.n	800a522 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a51e:	f7f6 ff47 	bl	80013b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a528:	7bfa      	ldrb	r2, [r7, #15]
 800a52a:	4611      	mov	r1, r2
 800a52c:	4618      	mov	r0, r3
 800a52e:	f7fe ff3b 	bl	80093a8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a538:	4618      	mov	r0, r3
 800a53a:	f7fe fef4 	bl	8009326 <USBD_LL_Reset>
}
 800a53e:	bf00      	nop
 800a540:	3710      	adds	r7, #16
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
	...

0800a548 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b082      	sub	sp, #8
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a556:	4618      	mov	r0, r3
 800a558:	f7fe ff35 	bl	80093c6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	699b      	ldr	r3, [r3, #24]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d005      	beq.n	800a570 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a564:	4b04      	ldr	r3, [pc, #16]	; (800a578 <HAL_PCD_SuspendCallback+0x30>)
 800a566:	691b      	ldr	r3, [r3, #16]
 800a568:	4a03      	ldr	r2, [pc, #12]	; (800a578 <HAL_PCD_SuspendCallback+0x30>)
 800a56a:	f043 0306 	orr.w	r3, r3, #6
 800a56e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a570:	bf00      	nop
 800a572:	3708      	adds	r7, #8
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}
 800a578:	e000ed00 	.word	0xe000ed00

0800a57c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b082      	sub	sp, #8
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a58a:	4618      	mov	r0, r3
 800a58c:	f7fe ff2f 	bl	80093ee <USBD_LL_Resume>
}
 800a590:	bf00      	nop
 800a592:	3708      	adds	r7, #8
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}

0800a598 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b082      	sub	sp, #8
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a5a0:	4a28      	ldr	r2, [pc, #160]	; (800a644 <USBD_LL_Init+0xac>)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	4a26      	ldr	r2, [pc, #152]	; (800a644 <USBD_LL_Init+0xac>)
 800a5ac:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a5b0:	4b24      	ldr	r3, [pc, #144]	; (800a644 <USBD_LL_Init+0xac>)
 800a5b2:	4a25      	ldr	r2, [pc, #148]	; (800a648 <USBD_LL_Init+0xb0>)
 800a5b4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a5b6:	4b23      	ldr	r3, [pc, #140]	; (800a644 <USBD_LL_Init+0xac>)
 800a5b8:	2208      	movs	r2, #8
 800a5ba:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a5bc:	4b21      	ldr	r3, [pc, #132]	; (800a644 <USBD_LL_Init+0xac>)
 800a5be:	2202      	movs	r2, #2
 800a5c0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a5c2:	4b20      	ldr	r3, [pc, #128]	; (800a644 <USBD_LL_Init+0xac>)
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a5c8:	4b1e      	ldr	r3, [pc, #120]	; (800a644 <USBD_LL_Init+0xac>)
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a5ce:	4b1d      	ldr	r3, [pc, #116]	; (800a644 <USBD_LL_Init+0xac>)
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a5d4:	481b      	ldr	r0, [pc, #108]	; (800a644 <USBD_LL_Init+0xac>)
 800a5d6:	f7f8 faf9 	bl	8002bcc <HAL_PCD_Init>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d001      	beq.n	800a5e4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a5e0:	f7f6 fee6 	bl	80013b0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a5ea:	2318      	movs	r3, #24
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	2100      	movs	r1, #0
 800a5f0:	f7f9 ff6d 	bl	80044ce <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a5fa:	2358      	movs	r3, #88	; 0x58
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	2180      	movs	r1, #128	; 0x80
 800a600:	f7f9 ff65 	bl	80044ce <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a60a:	23c0      	movs	r3, #192	; 0xc0
 800a60c:	2200      	movs	r2, #0
 800a60e:	2181      	movs	r1, #129	; 0x81
 800a610:	f7f9 ff5d 	bl	80044ce <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a61a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a61e:	2200      	movs	r2, #0
 800a620:	2101      	movs	r1, #1
 800a622:	f7f9 ff54 	bl	80044ce <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a62c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a630:	2200      	movs	r2, #0
 800a632:	2182      	movs	r1, #130	; 0x82
 800a634:	f7f9 ff4b 	bl	80044ce <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a638:	2300      	movs	r3, #0
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3708      	adds	r7, #8
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	20000910 	.word	0x20000910
 800a648:	40005c00 	.word	0x40005c00

0800a64c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a654:	2300      	movs	r3, #0
 800a656:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a658:	2300      	movs	r3, #0
 800a65a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a662:	4618      	mov	r0, r3
 800a664:	f7f8 fbbd 	bl	8002de2 <HAL_PCD_Start>
 800a668:	4603      	mov	r3, r0
 800a66a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a66c:	7bfb      	ldrb	r3, [r7, #15]
 800a66e:	4618      	mov	r0, r3
 800a670:	f000 f94e 	bl	800a910 <USBD_Get_USB_Status>
 800a674:	4603      	mov	r3, r0
 800a676:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a678:	7bbb      	ldrb	r3, [r7, #14]
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3710      	adds	r7, #16
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}

0800a682 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a682:	b580      	push	{r7, lr}
 800a684:	b084      	sub	sp, #16
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
 800a68a:	4608      	mov	r0, r1
 800a68c:	4611      	mov	r1, r2
 800a68e:	461a      	mov	r2, r3
 800a690:	4603      	mov	r3, r0
 800a692:	70fb      	strb	r3, [r7, #3]
 800a694:	460b      	mov	r3, r1
 800a696:	70bb      	strb	r3, [r7, #2]
 800a698:	4613      	mov	r3, r2
 800a69a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a69c:	2300      	movs	r3, #0
 800a69e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a6aa:	78bb      	ldrb	r3, [r7, #2]
 800a6ac:	883a      	ldrh	r2, [r7, #0]
 800a6ae:	78f9      	ldrb	r1, [r7, #3]
 800a6b0:	f7f8 fd35 	bl	800311e <HAL_PCD_EP_Open>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6b8:	7bfb      	ldrb	r3, [r7, #15]
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f000 f928 	bl	800a910 <USBD_Get_USB_Status>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3710      	adds	r7, #16
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}

0800a6ce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6ce:	b580      	push	{r7, lr}
 800a6d0:	b084      	sub	sp, #16
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	6078      	str	r0, [r7, #4]
 800a6d6:	460b      	mov	r3, r1
 800a6d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6e8:	78fa      	ldrb	r2, [r7, #3]
 800a6ea:	4611      	mov	r1, r2
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f7f8 fd7c 	bl	80031ea <HAL_PCD_EP_Close>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6f6:	7bfb      	ldrb	r3, [r7, #15]
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f000 f909 	bl	800a910 <USBD_Get_USB_Status>
 800a6fe:	4603      	mov	r3, r0
 800a700:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a702:	7bbb      	ldrb	r3, [r7, #14]
}
 800a704:	4618      	mov	r0, r3
 800a706:	3710      	adds	r7, #16
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b084      	sub	sp, #16
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	460b      	mov	r3, r1
 800a716:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a718:	2300      	movs	r3, #0
 800a71a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a71c:	2300      	movs	r3, #0
 800a71e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a726:	78fa      	ldrb	r2, [r7, #3]
 800a728:	4611      	mov	r1, r2
 800a72a:	4618      	mov	r0, r3
 800a72c:	f7f8 fe3c 	bl	80033a8 <HAL_PCD_EP_SetStall>
 800a730:	4603      	mov	r3, r0
 800a732:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a734:	7bfb      	ldrb	r3, [r7, #15]
 800a736:	4618      	mov	r0, r3
 800a738:	f000 f8ea 	bl	800a910 <USBD_Get_USB_Status>
 800a73c:	4603      	mov	r3, r0
 800a73e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a740:	7bbb      	ldrb	r3, [r7, #14]
}
 800a742:	4618      	mov	r0, r3
 800a744:	3710      	adds	r7, #16
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}

0800a74a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a74a:	b580      	push	{r7, lr}
 800a74c:	b084      	sub	sp, #16
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
 800a752:	460b      	mov	r3, r1
 800a754:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a756:	2300      	movs	r3, #0
 800a758:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a75a:	2300      	movs	r3, #0
 800a75c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a764:	78fa      	ldrb	r2, [r7, #3]
 800a766:	4611      	mov	r1, r2
 800a768:	4618      	mov	r0, r3
 800a76a:	f7f8 fe7d 	bl	8003468 <HAL_PCD_EP_ClrStall>
 800a76e:	4603      	mov	r3, r0
 800a770:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a772:	7bfb      	ldrb	r3, [r7, #15]
 800a774:	4618      	mov	r0, r3
 800a776:	f000 f8cb 	bl	800a910 <USBD_Get_USB_Status>
 800a77a:	4603      	mov	r3, r0
 800a77c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a77e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a780:	4618      	mov	r0, r3
 800a782:	3710      	adds	r7, #16
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}

0800a788 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a788:	b480      	push	{r7}
 800a78a:	b085      	sub	sp, #20
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	460b      	mov	r3, r1
 800a792:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a79a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a79c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	da0c      	bge.n	800a7be <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a7a4:	78fb      	ldrb	r3, [r7, #3]
 800a7a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7aa:	68f9      	ldr	r1, [r7, #12]
 800a7ac:	1c5a      	adds	r2, r3, #1
 800a7ae:	4613      	mov	r3, r2
 800a7b0:	009b      	lsls	r3, r3, #2
 800a7b2:	4413      	add	r3, r2
 800a7b4:	00db      	lsls	r3, r3, #3
 800a7b6:	440b      	add	r3, r1
 800a7b8:	3302      	adds	r3, #2
 800a7ba:	781b      	ldrb	r3, [r3, #0]
 800a7bc:	e00b      	b.n	800a7d6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a7be:	78fb      	ldrb	r3, [r7, #3]
 800a7c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a7c4:	68f9      	ldr	r1, [r7, #12]
 800a7c6:	4613      	mov	r3, r2
 800a7c8:	009b      	lsls	r3, r3, #2
 800a7ca:	4413      	add	r3, r2
 800a7cc:	00db      	lsls	r3, r3, #3
 800a7ce:	440b      	add	r3, r1
 800a7d0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a7d4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3714      	adds	r7, #20
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bc80      	pop	{r7}
 800a7de:	4770      	bx	lr

0800a7e0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b084      	sub	sp, #16
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	460b      	mov	r3, r1
 800a7ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a7fa:	78fa      	ldrb	r2, [r7, #3]
 800a7fc:	4611      	mov	r1, r2
 800a7fe:	4618      	mov	r0, r3
 800a800:	f7f8 fc68 	bl	80030d4 <HAL_PCD_SetAddress>
 800a804:	4603      	mov	r3, r0
 800a806:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a808:	7bfb      	ldrb	r3, [r7, #15]
 800a80a:	4618      	mov	r0, r3
 800a80c:	f000 f880 	bl	800a910 <USBD_Get_USB_Status>
 800a810:	4603      	mov	r3, r0
 800a812:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a814:	7bbb      	ldrb	r3, [r7, #14]
}
 800a816:	4618      	mov	r0, r3
 800a818:	3710      	adds	r7, #16
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}

0800a81e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a81e:	b580      	push	{r7, lr}
 800a820:	b086      	sub	sp, #24
 800a822:	af00      	add	r7, sp, #0
 800a824:	60f8      	str	r0, [r7, #12]
 800a826:	607a      	str	r2, [r7, #4]
 800a828:	461a      	mov	r2, r3
 800a82a:	460b      	mov	r3, r1
 800a82c:	72fb      	strb	r3, [r7, #11]
 800a82e:	4613      	mov	r3, r2
 800a830:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a832:	2300      	movs	r3, #0
 800a834:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a836:	2300      	movs	r3, #0
 800a838:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a840:	893b      	ldrh	r3, [r7, #8]
 800a842:	7af9      	ldrb	r1, [r7, #11]
 800a844:	687a      	ldr	r2, [r7, #4]
 800a846:	f7f8 fd6c 	bl	8003322 <HAL_PCD_EP_Transmit>
 800a84a:	4603      	mov	r3, r0
 800a84c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a84e:	7dfb      	ldrb	r3, [r7, #23]
 800a850:	4618      	mov	r0, r3
 800a852:	f000 f85d 	bl	800a910 <USBD_Get_USB_Status>
 800a856:	4603      	mov	r3, r0
 800a858:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a85a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3718      	adds	r7, #24
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}

0800a864 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b086      	sub	sp, #24
 800a868:	af00      	add	r7, sp, #0
 800a86a:	60f8      	str	r0, [r7, #12]
 800a86c:	607a      	str	r2, [r7, #4]
 800a86e:	461a      	mov	r2, r3
 800a870:	460b      	mov	r3, r1
 800a872:	72fb      	strb	r3, [r7, #11]
 800a874:	4613      	mov	r3, r2
 800a876:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a878:	2300      	movs	r3, #0
 800a87a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a87c:	2300      	movs	r3, #0
 800a87e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a886:	893b      	ldrh	r3, [r7, #8]
 800a888:	7af9      	ldrb	r1, [r7, #11]
 800a88a:	687a      	ldr	r2, [r7, #4]
 800a88c:	f7f8 fcf5 	bl	800327a <HAL_PCD_EP_Receive>
 800a890:	4603      	mov	r3, r0
 800a892:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a894:	7dfb      	ldrb	r3, [r7, #23]
 800a896:	4618      	mov	r0, r3
 800a898:	f000 f83a 	bl	800a910 <USBD_Get_USB_Status>
 800a89c:	4603      	mov	r3, r0
 800a89e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a8a0:	7dbb      	ldrb	r3, [r7, #22]
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3718      	adds	r7, #24
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}

0800a8aa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8aa:	b580      	push	{r7, lr}
 800a8ac:	b082      	sub	sp, #8
 800a8ae:	af00      	add	r7, sp, #0
 800a8b0:	6078      	str	r0, [r7, #4]
 800a8b2:	460b      	mov	r3, r1
 800a8b4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a8bc:	78fa      	ldrb	r2, [r7, #3]
 800a8be:	4611      	mov	r1, r2
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f7f8 fd17 	bl	80032f4 <HAL_PCD_EP_GetRxCount>
 800a8c6:	4603      	mov	r3, r0
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3708      	adds	r7, #8
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b083      	sub	sp, #12
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a8d8:	4b02      	ldr	r3, [pc, #8]	; (800a8e4 <USBD_static_malloc+0x14>)
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	370c      	adds	r7, #12
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bc80      	pop	{r7}
 800a8e2:	4770      	bx	lr
 800a8e4:	20000bfc 	.word	0x20000bfc

0800a8e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b083      	sub	sp, #12
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]

}
 800a8f0:	bf00      	nop
 800a8f2:	370c      	adds	r7, #12
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bc80      	pop	{r7}
 800a8f8:	4770      	bx	lr

0800a8fa <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8fa:	b480      	push	{r7}
 800a8fc:	b083      	sub	sp, #12
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
 800a902:	460b      	mov	r3, r1
 800a904:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a906:	bf00      	nop
 800a908:	370c      	adds	r7, #12
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bc80      	pop	{r7}
 800a90e:	4770      	bx	lr

0800a910 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a910:	b480      	push	{r7}
 800a912:	b085      	sub	sp, #20
 800a914:	af00      	add	r7, sp, #0
 800a916:	4603      	mov	r3, r0
 800a918:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a91a:	2300      	movs	r3, #0
 800a91c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a91e:	79fb      	ldrb	r3, [r7, #7]
 800a920:	2b03      	cmp	r3, #3
 800a922:	d817      	bhi.n	800a954 <USBD_Get_USB_Status+0x44>
 800a924:	a201      	add	r2, pc, #4	; (adr r2, 800a92c <USBD_Get_USB_Status+0x1c>)
 800a926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a92a:	bf00      	nop
 800a92c:	0800a93d 	.word	0x0800a93d
 800a930:	0800a943 	.word	0x0800a943
 800a934:	0800a949 	.word	0x0800a949
 800a938:	0800a94f 	.word	0x0800a94f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a93c:	2300      	movs	r3, #0
 800a93e:	73fb      	strb	r3, [r7, #15]
    break;
 800a940:	e00b      	b.n	800a95a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a942:	2302      	movs	r3, #2
 800a944:	73fb      	strb	r3, [r7, #15]
    break;
 800a946:	e008      	b.n	800a95a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a948:	2301      	movs	r3, #1
 800a94a:	73fb      	strb	r3, [r7, #15]
    break;
 800a94c:	e005      	b.n	800a95a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a94e:	2302      	movs	r3, #2
 800a950:	73fb      	strb	r3, [r7, #15]
    break;
 800a952:	e002      	b.n	800a95a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a954:	2302      	movs	r3, #2
 800a956:	73fb      	strb	r3, [r7, #15]
    break;
 800a958:	bf00      	nop
  }
  return usb_status;
 800a95a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3714      	adds	r7, #20
 800a960:	46bd      	mov	sp, r7
 800a962:	bc80      	pop	{r7}
 800a964:	4770      	bx	lr
 800a966:	bf00      	nop

0800a968 <__libc_init_array>:
 800a968:	b570      	push	{r4, r5, r6, lr}
 800a96a:	2600      	movs	r6, #0
 800a96c:	4d0c      	ldr	r5, [pc, #48]	; (800a9a0 <__libc_init_array+0x38>)
 800a96e:	4c0d      	ldr	r4, [pc, #52]	; (800a9a4 <__libc_init_array+0x3c>)
 800a970:	1b64      	subs	r4, r4, r5
 800a972:	10a4      	asrs	r4, r4, #2
 800a974:	42a6      	cmp	r6, r4
 800a976:	d109      	bne.n	800a98c <__libc_init_array+0x24>
 800a978:	f000 f822 	bl	800a9c0 <_init>
 800a97c:	2600      	movs	r6, #0
 800a97e:	4d0a      	ldr	r5, [pc, #40]	; (800a9a8 <__libc_init_array+0x40>)
 800a980:	4c0a      	ldr	r4, [pc, #40]	; (800a9ac <__libc_init_array+0x44>)
 800a982:	1b64      	subs	r4, r4, r5
 800a984:	10a4      	asrs	r4, r4, #2
 800a986:	42a6      	cmp	r6, r4
 800a988:	d105      	bne.n	800a996 <__libc_init_array+0x2e>
 800a98a:	bd70      	pop	{r4, r5, r6, pc}
 800a98c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a990:	4798      	blx	r3
 800a992:	3601      	adds	r6, #1
 800a994:	e7ee      	b.n	800a974 <__libc_init_array+0xc>
 800a996:	f855 3b04 	ldr.w	r3, [r5], #4
 800a99a:	4798      	blx	r3
 800a99c:	3601      	adds	r6, #1
 800a99e:	e7f2      	b.n	800a986 <__libc_init_array+0x1e>
 800a9a0:	0800aa48 	.word	0x0800aa48
 800a9a4:	0800aa48 	.word	0x0800aa48
 800a9a8:	0800aa48 	.word	0x0800aa48
 800a9ac:	0800aa4c 	.word	0x0800aa4c

0800a9b0 <memset>:
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	4402      	add	r2, r0
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d100      	bne.n	800a9ba <memset+0xa>
 800a9b8:	4770      	bx	lr
 800a9ba:	f803 1b01 	strb.w	r1, [r3], #1
 800a9be:	e7f9      	b.n	800a9b4 <memset+0x4>

0800a9c0 <_init>:
 800a9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9c2:	bf00      	nop
 800a9c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9c6:	bc08      	pop	{r3}
 800a9c8:	469e      	mov	lr, r3
 800a9ca:	4770      	bx	lr

0800a9cc <_fini>:
 800a9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ce:	bf00      	nop
 800a9d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9d2:	bc08      	pop	{r3}
 800a9d4:	469e      	mov	lr, r3
 800a9d6:	4770      	bx	lr
